
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800ed90  0800ed90  0001ed90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2b0  0800f2b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800f2b0  0800f2b0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f2b0  0800f2b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f2b0  0800f2b0  0001f2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f2b8  0800f2b8  0001f2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f2c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001914  20000078  0800f334  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000198c  0800f334  0002198c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029255  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f6b  00000000  00000000  000492f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0004e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0004f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001decc  00000000  00000000  00050d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d787  00000000  00000000  0006ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095fcd  00000000  00000000  0008c383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006598  00000000  00000000  001223a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ed78 	.word	0x0800ed78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800ed78 	.word	0x0800ed78

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HMC5883L_initialize+0x44>)
 8001180:	223c      	movs	r2, #60	; 0x3c
 8001182:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001184:	2378      	movs	r3, #120	; 0x78
 8001186:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HMC5883L_initialize+0x44>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b299      	uxth	r1, r3
 800118e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	2200      	movs	r2, #0
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <HMC5883L_initialize+0x48>)
 80011a2:	f005 f9c1 	bl	8006528 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f80c 	bl	80011c4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f829 	bl	8001204 <HMC5883L_setMode>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000094 	.word	0x20000094
 80011c0:	20001630 	.word	0x20001630

080011c4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HMC5883L_setGain+0x38>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b299      	uxth	r1, r3
 80011dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2201      	movs	r2, #1
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <HMC5883L_setGain+0x3c>)
 80011f0:	f005 f99a 	bl	8006528 <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000094 	.word	0x20000094
 8001200:	20001630 	.word	0x20001630

08001204 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HMC5883L_setMode+0x3c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b299      	uxth	r1, r3
 8001218:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2202      	movs	r2, #2
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <HMC5883L_setMode+0x40>)
 800122c:	f005 f97c 	bl	8006528 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HMC5883L_setMode+0x44>)
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000094 	.word	0x20000094
 8001244:	20001630 	.word	0x20001630
 8001248:	2000009e 	.word	0x2000009e

0800124c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af04      	add	r7, sp, #16
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HMC5883L_getMagData+0x84>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b299      	uxth	r1, r3
 800125e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2306      	movs	r3, #6
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <HMC5883L_getMagData+0x8c>)
 8001272:	f005 fa53 	bl	800671c <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HMC5883L_getMagData+0x90>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <HMC5883L_getMagData+0x38>
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ffc0 	bl	8001204 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HMC5883L_getMagData+0x88>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000094 	.word	0x20000094
 80012d4:	20000098 	.word	0x20000098
 80012d8:	20001630 	.word	0x20001630
 80012dc:	2000009e 	.word	0x2000009e

080012e0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <Ringbuf_init+0x38>)
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <Ringbuf_init+0x3c>)
 80012e8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <Ringbuf_init+0x40>)
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <Ringbuf_init+0x44>)
 80012ee:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <Ringbuf_init+0x48>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <Ringbuf_init+0x48>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <Ringbuf_init+0x48>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <Ringbuf_init+0x48>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	60da      	str	r2, [r3, #12]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20001628 	.word	0x20001628
 800131c:	200000a0 	.word	0x200000a0
 8001320:	20001624 	.word	0x20001624
 8001324:	200004a8 	.word	0x200004a8
 8001328:	20001840 	.word	0x20001840

0800132c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001344:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	429a      	cmp	r2, r3
 8001350:	d009      	beq.n	8001366 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	79f9      	ldrb	r1, [r7, #7]
 800135c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <Uart_isr>:

}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b00      	cmp	r3, #0
 8001390:	d013      	beq.n	80013ba <Uart_isr+0x4a>
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00e      	beq.n	80013ba <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <Uart_isr+0xb4>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffba 	bl	800132c <store_char>
        return;
 80013b8:	e031      	b.n	800141e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d02c      	beq.n	800141e <Uart_isr+0xae>
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d027      	beq.n	800141e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <Uart_isr+0xb8>)
 80013d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <Uart_isr+0xb8>)
 80013d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013da:	429a      	cmp	r2, r3
 80013dc:	d108      	bne.n	80013f0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ec:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80013ee:	e015      	b.n	800141c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <Uart_isr+0xb8>)
 80013f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <Uart_isr+0xb8>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <Uart_isr+0xb8>)
 80013fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001402:	3301      	adds	r3, #1
 8001404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <Uart_isr+0xb8>)
 800140a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	7bba      	ldrb	r2, [r7, #14]
 800141a:	605a      	str	r2, [r3, #4]
    	return;
 800141c:	bf00      	nop
    }
}
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20001628 	.word	0x20001628
 8001428:	200004a8 	.word	0x200004a8

0800142c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800143a:	2301      	movs	r3, #1
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	1dbb      	adds	r3, r7, #6
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	22d0      	movs	r2, #208	; 0xd0
 800144a:	21ef      	movs	r1, #239	; 0xef
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <read_chip_id+0x3c>)
 800144e:	f005 f965 	bl	800671c <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2b55      	cmp	r3, #85	; 0x55
 8001456:	d001      	beq.n	800145c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001458:	2301      	movs	r3, #1
 800145a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001630 	.word	0x20001630

0800146c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af04      	add	r7, sp, #16
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001478:	2300      	movs	r3, #0
 800147a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d81a      	bhi.n	80014b8 <set_oss+0x4c>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <set_oss+0x1c>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001499 	.word	0x08001499
 800148c:	080014a1 	.word	0x080014a1
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014b1 	.word	0x080014b1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2205      	movs	r2, #5
 800149c:	705a      	strb	r2, [r3, #1]
			break;
 800149e:	e00f      	b.n	80014c0 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2208      	movs	r2, #8
 80014a4:	705a      	strb	r2, [r3, #1]
			break;
 80014a6:	e00b      	b.n	80014c0 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	220e      	movs	r2, #14
 80014ac:	705a      	strb	r2, [r3, #1]
			break;
 80014ae:	e007      	b.n	80014c0 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	221a      	movs	r2, #26
 80014b4:	705a      	strb	r2, [r3, #1]
			break;
 80014b6:	e003      	b.n	80014c0 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2208      	movs	r2, #8
 80014bc:	705a      	strb	r2, [r3, #1]
			break;
 80014be:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	019b      	lsls	r3, r3, #6
 80014ca:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80014d0:	2301      	movs	r3, #1
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	2302      	movs	r3, #2
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	22f4      	movs	r2, #244	; 0xf4
 80014e2:	21ee      	movs	r1, #238	; 0xee
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <set_oss+0x88>)
 80014e6:	f005 f81f 	bl	8006528 <HAL_I2C_Mem_Write>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001630 	.word	0x20001630

080014f8 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001526:	2301      	movs	r3, #1
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	2316      	movs	r3, #22
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	22aa      	movs	r2, #170	; 0xaa
 8001538:	21ef      	movs	r1, #239	; 0xef
 800153a:	4828      	ldr	r0, [pc, #160]	; (80015dc <read_calib_data+0xe4>)
 800153c:	f005 f8ee 	bl	800671c <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001546:	e03e      	b.n	80015c6 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001552:	4413      	add	r3, r2
 8001554:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b219      	sxth	r1, r3
 800155c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001560:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001564:	4413      	add	r3, r2
 8001566:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800156a:	b21a      	sxth	r2, r3
 800156c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4403      	add	r3, r0
 8001576:	430a      	orrs	r2, r1
 8001578:	b212      	sxth	r2, r2
 800157a:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 800157c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	440b      	add	r3, r1
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ca:	2b0b      	cmp	r3, #11
 80015cc:	d9bc      	bls.n	8001548 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80015ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20001630 	.word	0x20001630

080015e0 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00d fbba 	bl	800ed68 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80015f4:	687c      	ldr	r4, [r7, #4]
 80015f6:	f7ff ff19 	bl	800142c <read_chip_id>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	687c      	ldr	r4, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff77 	bl	80014f8 <read_calib_data>
 800160a:	4603      	mov	r3, r0
 800160c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3338      	adds	r3, #56	; 0x38
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff28 	bl	800146c <set_oss>
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 800162a:	232e      	movs	r3, #46	; 0x2e
 800162c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800162e:	2301      	movs	r3, #1
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2301      	movs	r3, #1
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	22f4      	movs	r2, #244	; 0xf4
 800163e:	21ee      	movs	r1, #238	; 0xee
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <write_ut+0x2c>)
 8001642:	f004 ff71 	bl	8006528 <HAL_I2C_Mem_Write>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20001630 	.word	0x20001630

08001654 <read_ut>:

int32_t read_ut (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800165a:	2301      	movs	r3, #1
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2302      	movs	r3, #2
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	22f6      	movs	r2, #246	; 0xf6
 800166a:	21ef      	movs	r1, #239	; 0xef
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <read_ut+0x30>)
 800166e:	f005 f855 	bl	800671c <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001672:	793b      	ldrb	r3, [r7, #4]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	797a      	ldrb	r2, [r7, #5]
 8001678:	4313      	orrs	r3, r2
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001630 	.word	0x20001630

08001688 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd22 	bl	80010ec <__aeabi_f2iz>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	895b      	ldrh	r3, [r3, #10]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	8912      	ldrh	r2, [r2, #8]
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	13db      	asrs	r3, r3, #15
 80016ba:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016c2:	02da      	lsls	r2, r3, #11
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016ca:	4619      	mov	r1, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	440b      	add	r3, r1
 80016d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d4:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	441a      	add	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	3308      	adds	r3, #8
 80016e6:	111b      	asrs	r3, r3, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff facf 	bl	8000c8c <__aeabi_i2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <get_temp+0xa4>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fb1e 	bl	8000d34 <__aeabi_fmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <get_temp+0xa8>)
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fcc0 	bl	8001084 <__aeabi_fcmple>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <get_temp+0x90>
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <get_temp+0xac>)
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fcc3 	bl	8001098 <__aeabi_fcmpge>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	3dcccccd 	.word	0x3dcccccd
 8001730:	c2200000 	.word	0xc2200000
 8001734:	42aa0000 	.word	0x42aa0000

08001738 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <write_up+0x38>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	803b      	strh	r3, [r7, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 800174c:	2334      	movs	r3, #52	; 0x34
 800174e:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001750:	2301      	movs	r3, #1
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	463b      	mov	r3, r7
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	22f4      	movs	r2, #244	; 0xf4
 8001760:	21ee      	movs	r1, #238	; 0xee
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <write_up+0x3c>)
 8001764:	f004 fee0 	bl	8006528 <HAL_I2C_Mem_Write>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800ed90 	.word	0x0800ed90
 8001774:	20001630 	.word	0x20001630

08001778 <read_up>:

int32_t read_up (oss_t oss)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af04      	add	r7, sp, #16
 800177e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <read_up+0x54>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	813b      	strh	r3, [r7, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 800178e:	2301      	movs	r3, #1
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2303      	movs	r3, #3
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	22f6      	movs	r2, #246	; 0xf6
 80017a0:	21ef      	movs	r1, #239	; 0xef
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <read_up+0x58>)
 80017a4:	f004 ffba 	bl	800671c <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	7a7b      	ldrb	r3, [r7, #9]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4413      	add	r3, r2
 80017b2:	7aba      	ldrb	r2, [r7, #10]
 80017b4:	441a      	add	r2, r3
 80017b6:	793b      	ldrb	r3, [r7, #4]
 80017b8:	f1c3 0308 	rsb	r3, r3, #8
 80017bc:	fa42 f303 	asr.w	r3, r2, r3
 80017c0:	60fb      	str	r3, [r7, #12]
	return up;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0800ed90 	.word	0x0800ed90
 80017d0:	20001630 	.word	0x20001630

080017d4 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017d4:	b084      	sub	sp, #16
 80017d6:	b480      	push	{r7}
 80017d8:	b089      	sub	sp, #36	; 0x24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80017e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80017ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ee:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80017f2:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80017f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80017f8:	461a      	mov	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fb03 f303 	mul.w	r3, r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	da01      	bge.n	8001808 <get_pressure+0x34>
 8001804:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001808:	131b      	asrs	r3, r3, #12
 800180a:	fb03 f302 	mul.w	r3, r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	da01      	bge.n	8001816 <get_pressure+0x42>
 8001812:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001816:	12db      	asrs	r3, r3, #11
 8001818:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800181a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800181e:	461a      	mov	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fb03 f302 	mul.w	r3, r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	da01      	bge.n	800182e <get_pressure+0x5a>
 800182a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800182e:	12db      	asrs	r3, r3, #11
 8001830:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800183a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800183e:	009a      	lsls	r2, r3, #2
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001848:	4093      	lsls	r3, r2
 800184a:	3302      	adds	r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	da00      	bge.n	8001852 <get_pressure+0x7e>
 8001850:	3303      	adds	r3, #3
 8001852:	109b      	asrs	r3, r3, #2
 8001854:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001856:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800185a:	461a      	mov	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fb03 f302 	mul.w	r3, r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	da02      	bge.n	800186c <get_pressure+0x98>
 8001866:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800186a:	331f      	adds	r3, #31
 800186c:	135b      	asrs	r3, r3, #13
 800186e:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001870:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001874:	461a      	mov	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fb03 f303 	mul.w	r3, r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	da01      	bge.n	8001884 <get_pressure+0xb0>
 8001880:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001884:	131b      	asrs	r3, r3, #12
 8001886:	fb03 f302 	mul.w	r3, r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	da02      	bge.n	8001894 <get_pressure+0xc0>
 800188e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001892:	33ff      	adds	r3, #255	; 0xff
 8001894:	141b      	asrs	r3, r3, #16
 8001896:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	3302      	adds	r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da00      	bge.n	80018a6 <get_pressure+0xd2>
 80018a4:	3303      	adds	r3, #3
 80018a6:	109b      	asrs	r3, r3, #2
 80018a8:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018b4:	fb03 f302 	mul.w	r3, r3, r2
 80018b8:	0bdb      	lsrs	r3, r3, #15
 80018ba:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80018c8:	4611      	mov	r1, r2
 80018ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018ce:	410a      	asrs	r2, r1
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db06      	blt.n	80018ea <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	005a      	lsls	r2, r3, #1
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	e005      	b.n	80018f6 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <get_pressure+0x12a>
 80018fc:	33ff      	adds	r3, #255	; 0xff
 80018fe:	121b      	asrs	r3, r3, #8
 8001900:	461a      	mov	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b00      	cmp	r3, #0
 8001906:	da00      	bge.n	800190a <get_pressure+0x136>
 8001908:	33ff      	adds	r3, #255	; 0xff
 800190a:	121b      	asrs	r3, r3, #8
 800190c:	fb03 f302 	mul.w	r3, r3, r2
 8001910:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f640 32de 	movw	r2, #3038	; 0xbde
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	da02      	bge.n	8001926 <get_pressure+0x152>
 8001920:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001924:	33ff      	adds	r3, #255	; 0xff
 8001926:	141b      	asrs	r3, r3, #16
 8001928:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <get_pressure+0x194>)
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	da02      	bge.n	800193c <get_pressure+0x168>
 8001936:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800193a:	33ff      	adds	r3, #255	; 0xff
 800193c:	141b      	asrs	r3, r3, #16
 800193e:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800194a:	2b00      	cmp	r3, #0
 800194c:	da00      	bge.n	8001950 <get_pressure+0x17c>
 800194e:	330f      	adds	r3, #15
 8001950:	111b      	asrs	r3, r3, #4
 8001952:	461a      	mov	r2, r3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	61fb      	str	r3, [r7, #28]

	return p;
 800195a:	69fb      	ldr	r3, [r7, #28]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3724      	adds	r7, #36	; 0x24
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	b004      	add	sp, #16
 8001966:	4770      	bx	lr
 8001968:	ffffe343 	.word	0xffffe343
 800196c:	00000000 	.word	0x00000000

08001970 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f982 	bl	8000c8c <__aeabi_i2f>
 8001988:	4603      	mov	r3, r0
 800198a:	4923      	ldr	r1, [pc, #140]	; (8001a18 <get_altitude+0xa8>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fa85 	bl	8000e9c <__aeabi_fdiv>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd3f 	bl	8000418 <__aeabi_f2d>
 800199a:	a31b      	add	r3, pc, #108	; (adr r3, 8001a08 <get_altitude+0x98>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f00b f9ea 	bl	800cd78 <pow>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	491b      	ldr	r1, [pc, #108]	; (8001a1c <get_altitude+0xac>)
 80019ae:	f7fe fbd3 	bl	8000158 <__aeabi_dsub>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	a315      	add	r3, pc, #84	; (adr r3, 8001a10 <get_altitude+0xa0>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fd82 	bl	80004c8 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f854 	bl	8000a78 <__aeabi_d2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80019d4:	4912      	ldr	r1, [pc, #72]	; (8001a20 <get_altitude+0xb0>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fb54 	bl	8001084 <__aeabi_fcmple>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <get_altitude+0x80>
 80019e2:	4910      	ldr	r1, [pc, #64]	; (8001a24 <get_altitude+0xb4>)
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fb57 	bl	8001098 <__aeabi_fcmpge>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2205      	movs	r2, #5
 80019f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	ccd9456c 	.word	0xccd9456c
 8001a0c:	3fc85b95 	.word	0x3fc85b95
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40e5a540 	.word	0x40e5a540
 8001a18:	47c5e680 	.word	0x47c5e680
 8001a1c:	3ff00000 	.word	0x3ff00000
 8001a20:	c3fa0000 	.word	0xc3fa0000
 8001a24:	460ca000 	.word	0x460ca000

08001a28 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	return b_counter;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <get_b_counter+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	200008b0 	.word	0x200008b0

08001a3c <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

	b_counter++;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <set_b_counter+0x30>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <set_b_counter+0x30>)
 8001a4c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <set_b_counter+0x30>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d202      	bcs.n	8001a60 <set_b_counter+0x24>
		b_counter = 0;
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <set_b_counter+0x30>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
	}
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200008b0 	.word	0x200008b0

08001a70 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f00b f90f 	bl	800cc9c <cosf>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f00b f93b 	bl	800cd0c <sinf>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_DMA_Init+0x58>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <MX_DMA_Init+0x58>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6153      	str	r3, [r2, #20]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_DMA_Init+0x58>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f003 fb31 	bl	800512a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f003 fb4a 	bl	8005162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2010      	movs	r0, #16
 8001ad4:	f003 fb29 	bl	800512a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ad8:	2010      	movs	r0, #16
 8001ada:	f003 fb42 	bl	8005162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2011      	movs	r0, #17
 8001ae4:	f003 fb21 	bl	800512a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ae8:	2011      	movs	r0, #17
 8001aea:	f003 fb3a 	bl	8005162 <HAL_NVIC_EnableIRQ>

}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b76:	4821      	ldr	r0, [pc, #132]	; (8001bfc <MX_GPIO_Init+0x100>)
 8001b78:	f004 f81c 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b82:	481f      	ldr	r0, [pc, #124]	; (8001c00 <MX_GPIO_Init+0x104>)
 8001b84:	f004 f816 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b8e:	481d      	ldr	r0, [pc, #116]	; (8001c04 <MX_GPIO_Init+0x108>)
 8001b90:	f004 f810 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	4813      	ldr	r0, [pc, #76]	; (8001bfc <MX_GPIO_Init+0x100>)
 8001bae:	f003 fdc1 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CSN_Pin|CE_Pin;
 8001bb2:	f243 0302 	movw	r3, #12290	; 0x3002
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_GPIO_Init+0x104>)
 8001bcc:	f003 fdb2 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_GPIO_Init+0x108>)
 8001bea:	f003 fda3 	bl	8005734 <HAL_GPIO_Init>

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40010800 	.word	0x40010800

08001c08 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8001c0e:	2351      	movs	r3, #81	; 0x51
 8001c10:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8001c12:	1dba      	adds	r2, r7, #6
 8001c14:	2364      	movs	r3, #100	; 0x64
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	21e0      	movs	r1, #224	; 0xe0
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <request_range+0x2c>)
 8001c1e:	f004 f925 	bl	8005e6c <HAL_I2C_Master_Transmit>
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <request_range+0x30>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20001630 	.word	0x20001630
 8001c38:	20000000 	.word	0x20000000

08001c3c <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <getRange+0x34>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
			write = 1;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <getRange+0x38>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8001c4e:	1d3a      	adds	r2, r7, #4
 8001c50:	2364      	movs	r3, #100	; 0x64
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2302      	movs	r3, #2
 8001c56:	21e1      	movs	r1, #225	; 0xe1
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <getRange+0x3c>)
 8001c5a:	f004 fa05 	bl	8006068 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8001c5e:	793b      	ldrb	r3, [r7, #4]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	797a      	ldrb	r2, [r7, #5]
 8001c64:	4313      	orrs	r3, r2



	//return -1;

}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000162e 	.word	0x2000162e
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20001630 	.word	0x20001630

08001c7c <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <set_ucounter+0x30>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <set_ucounter+0x30>)
 8001c8c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <set_ucounter+0x30>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d202      	bcs.n	8001ca0 <set_ucounter+0x24>
		u_counter = 0;
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <set_ucounter+0x30>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200008b4 	.word	0x200008b4

08001cb0 <get_ucounter>:

int get_ucounter(void) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	return u_counter;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <get_ucounter+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	200008b4 	.word	0x200008b4

08001cc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cca:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <MX_I2C1_Init+0x58>)
 8001cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_I2C1_Init+0x50>)
 8001d02:	f003 ff6f 	bl	8005be4 <HAL_I2C_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f002 fa1e 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20001630 	.word	0x20001630
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	00061a80 	.word	0x00061a80

08001d20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_I2C_MspInit+0x70>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d123      	bne.n	8001d88 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_I2C_MspInit+0x74>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <HAL_I2C_MspInit+0x74>)
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_I2C_MspInit+0x74>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d58:	23c0      	movs	r3, #192	; 0xc0
 8001d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5c:	2312      	movs	r3, #18
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480b      	ldr	r0, [pc, #44]	; (8001d98 <HAL_I2C_MspInit+0x78>)
 8001d6c:	f003 fce2 	bl	8005734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_I2C_MspInit+0x74>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_I2C_MspInit+0x74>)
 8001d76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7a:	61d3      	str	r3, [r2, #28]
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_I2C_MspInit+0x74>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010c00 	.word	0x40010c00

08001d9c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f00b f8b3 	bl	800cf28 <asinf>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f00a fe55 	bl	800ca84 <atanf>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f00b f8bf 	bl	800cf74 <atan2f>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f00b f8b5 	bl	800cf78 <sqrtf>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d140      	bne.n	8001eae <HAL_UART_TxCpltCallback+0x96>
		char end_char;
		switch(tx_type) {
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_UART_TxCpltCallback+0xa4>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d013      	beq.n	8001e5c <HAL_UART_TxCpltCallback+0x44>
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	dc3a      	bgt.n	8001eae <HAL_UART_TxCpltCallback+0x96>
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_UART_TxCpltCallback+0x2a>
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d017      	beq.n	8001e70 <HAL_UART_TxCpltCallback+0x58>
		    period = sent_time - sent_time_;
		    break;
		}

	}
}
 8001e40:	e035      	b.n	8001eae <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x01;
 8001e42:	2301      	movs	r3, #1
 8001e44:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8001e46:	f107 030b 	add.w	r3, r7, #11
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e50:	f007 fd0e 	bl	8009870 <HAL_UART_Transmit_DMA>
			tx_type = package;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_UART_TxCpltCallback+0xa4>)
 8001e56:	2202      	movs	r2, #2
 8001e58:	701a      	strb	r2, [r3, #0]
			break;
 8001e5a:	e028      	b.n	8001eae <HAL_UART_TxCpltCallback+0x96>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 8001e5c:	f240 1205 	movw	r2, #261	; 0x105
 8001e60:	4917      	ldr	r1, [pc, #92]	; (8001ec0 <HAL_UART_TxCpltCallback+0xa8>)
 8001e62:	4815      	ldr	r0, [pc, #84]	; (8001eb8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e64:	f007 fd04 	bl	8009870 <HAL_UART_Transmit_DMA>
			tx_type = stop;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_UART_TxCpltCallback+0xa4>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
			break;
 8001e6e:	e01e      	b.n	8001eae <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x04;
 8001e70:	2304      	movs	r3, #4
 8001e72:	72fb      	strb	r3, [r7, #11]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8001e74:	f107 030b 	add.w	r3, r7, #11
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e7e:	f007 fcf7 	bl	8009870 <HAL_UART_Transmit_DMA>
		    tx_type = start;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_UART_TxCpltCallback+0xa4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
		    long int sent_time_ = sent_time;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_UART_TxCpltCallback+0xac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
		    sent_time = HAL_GetTick();
 8001e8e:	f003 f823 	bl	8004ed8 <HAL_GetTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_UART_TxCpltCallback+0xac>)
 8001e98:	601a      	str	r2, [r3, #0]
		    period = sent_time - sent_time_;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_UART_TxCpltCallback+0xac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_UART_TxCpltCallback+0xb0>)
 8001eaa:	701a      	strb	r2, [r3, #0]
		    break;
 8001eac:	bf00      	nop
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20001948 	.word	0x20001948
 8001ebc:	2000161d 	.word	0x2000161d
 8001ec0:	20000a50 	.word	0x20000a50
 8001ec4:	20001564 	.word	0x20001564
 8001ec8:	2000161c 	.word	0x2000161c
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed6:	f002 ffa7 	bl	8004e28 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001eda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ede:	f003 f805 	bl	8004eec <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee2:	f000 f8f5 	bl	80020d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee6:	f7ff fe09 	bl	8001afc <MX_GPIO_Init>
  MX_DMA_Init();
 8001eea:	f7ff fdd9 	bl	8001aa0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001eee:	f7ff fee9 	bl	8001cc4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ef2:	f002 fb61 	bl	80045b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001ef6:	f002 fab7 	bl	8004468 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001efa:	f002 fd71 	bl	80049e0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001efe:	f002 fba7 	bl	8004650 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f02:	f002 fc15 	bl	8004730 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001f06:	f002 fd41 	bl	800498c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f0a:	f002 fd93 	bl	8004a34 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f0e:	f002 f95d 	bl	80041cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8001f12:	2209      	movs	r2, #9
 8001f14:	495c      	ldr	r1, [pc, #368]	; (8002088 <main+0x1b8>)
 8001f16:	485d      	ldr	r0, [pc, #372]	; (800208c <main+0x1bc>)
 8001f18:	f007 fd16 	bl	8009948 <HAL_UART_Receive_DMA>

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, 1);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	495c      	ldr	r1, [pc, #368]	; (8002090 <main+0x1c0>)
 8001f20:	485c      	ldr	r0, [pc, #368]	; (8002094 <main+0x1c4>)
 8001f22:	f007 fd11 	bl	8009948 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8001f26:	f000 f923 	bl	8002170 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001f2a:	485b      	ldr	r0, [pc, #364]	; (8002098 <main+0x1c8>)
 8001f2c:	f7ff fb58 	bl	80015e0 <bmp_init>
  HMC5883L_initialize();
 8001f30:	f7ff f922 	bl	8001178 <HMC5883L_initialize>
  MotorBaslat();
 8001f34:	f001 fa7c 	bl	8003430 <_Z11MotorBaslatv>
  GPSInit();
 8001f38:	f000 fe40 	bl	8002bbc <_Z7GPSInitv>
  HAL_Delay(1000);
 8001f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f40:	f002 ffd4 	bl	8004eec <HAL_Delay>

  Ringbuf_init();
 8001f44:	f7ff f9cc 	bl	80012e0 <Ringbuf_init>
	NRF24_openReadingPipe(1, RxpipeAddrs);
	NRF24_startListening();
#endif
*/
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8001f48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f4c:	f002 ffce 	bl	8004eec <HAL_Delay>

  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001f50:	201d      	movs	r0, #29
 8001f52:	f001 fa11 	bl	8003378 <_Z7GyroErrh>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a50      	ldr	r2, [pc, #320]	; (800209c <main+0x1cc>)
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	201f      	movs	r0, #31
 8001f5e:	f001 fa0b 	bl	8003378 <_Z7GyroErrh>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <main+0x1d0>)
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	2021      	movs	r0, #33	; 0x21
 8001f6a:	f001 fa05 	bl	8003378 <_Z7GyroErrh>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <main+0x1d4>)
 8001f72:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8001f74:	2032      	movs	r0, #50	; 0x32
 8001f76:	f001 fa2d 	bl	80033d4 <_Z6AccErrh>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa4b 	bl	8000418 <__aeabi_f2d>
 8001f82:	a33f      	add	r3, pc, #252	; (adr r3, 8002080 <main+0x1b0>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fa9e 	bl	80004c8 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fd70 	bl	8000a78 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a43      	ldr	r2, [pc, #268]	; (80020a8 <main+0x1d8>)
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	2034      	movs	r0, #52	; 0x34
 8001fa0:	f001 fa18 	bl	80033d4 <_Z6AccErrh>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa36 	bl	8000418 <__aeabi_f2d>
 8001fac:	a334      	add	r3, pc, #208	; (adr r3, 8002080 <main+0x1b0>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fa89 	bl	80004c8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fd5b 	bl	8000a78 <__aeabi_d2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a39      	ldr	r2, [pc, #228]	; (80020ac <main+0x1dc>)
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	2036      	movs	r0, #54	; 0x36
 8001fca:	f001 fa03 	bl	80033d4 <_Z6AccErrh>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa21 	bl	8000418 <__aeabi_f2d>
 8001fd6:	a32a      	add	r3, pc, #168	; (adr r3, 8002080 <main+0x1b0>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fa74 	bl	80004c8 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd46 	bl	8000a78 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <main+0x1e0>)
 8001ff0:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8001ff2:	2032      	movs	r0, #50	; 0x32
 8001ff4:	f000 fe98 	bl	8002d28 <_Z6AccOkuh>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe46 	bl	8000c8c <__aeabi_i2f>
 8002000:	4603      	mov	r3, r0
 8002002:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <main+0x1e4>)
 8002004:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8002006:	2034      	movs	r0, #52	; 0x34
 8002008:	f000 fe8e 	bl	8002d28 <_Z6AccOkuh>
 800200c:	4603      	mov	r3, r0
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fe3c 	bl	8000c8c <__aeabi_i2f>
 8002014:	4603      	mov	r3, r0
 8002016:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <main+0x1e8>)
 8002018:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 800201a:	2036      	movs	r0, #54	; 0x36
 800201c:	f000 fe84 	bl	8002d28 <_Z6AccOkuh>
 8002020:	4603      	mov	r3, r0
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fe32 	bl	8000c8c <__aeabi_i2f>
 8002028:	4603      	mov	r3, r0
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <main+0x1ec>)
 800202c:	6013      	str	r3, [r2, #0]

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 800202e:	4824      	ldr	r0, [pc, #144]	; (80020c0 <main+0x1f0>)
 8002030:	f005 ffbe 	bl	8007fb0 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8002034:	4823      	ldr	r0, [pc, #140]	; (80020c4 <main+0x1f4>)
 8002036:	f005 ff71 	bl	8007f1c <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800203a:	2100      	movs	r1, #0
 800203c:	4822      	ldr	r0, [pc, #136]	; (80020c8 <main+0x1f8>)
 800203e:	f006 f859 	bl	80080f4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002042:	2104      	movs	r1, #4
 8002044:	4820      	ldr	r0, [pc, #128]	; (80020c8 <main+0x1f8>)
 8002046:	f007 f985 	bl	8009354 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800204a:	2108      	movs	r1, #8
 800204c:	481e      	ldr	r0, [pc, #120]	; (80020c8 <main+0x1f8>)
 800204e:	f007 f981 	bl	8009354 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002052:	210c      	movs	r1, #12
 8002054:	481c      	ldr	r0, [pc, #112]	; (80020c8 <main+0x1f8>)
 8002056:	f006 f84d 	bl	80080f4 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800205a:	2108      	movs	r1, #8
 800205c:	4819      	ldr	r0, [pc, #100]	; (80020c4 <main+0x1f4>)
 800205e:	f006 f943 	bl	80082e8 <HAL_TIM_IC_Start_IT>

  //ESP DMA Başlat.
  char end_char = 0x01;
 8002062:	2301      	movs	r3, #1
 8002064:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	2201      	movs	r2, #1
 800206a:	4619      	mov	r1, r3
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <main+0x1c4>)
 800206e:	f007 fbff 	bl	8009870 <HAL_UART_Transmit_DMA>
  tx_type = package;
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <main+0x1fc>)
 8002074:	2202      	movs	r2, #2
 8002076:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002078:	e7fe      	b.n	8002078 <main+0x1a8>
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	8e8a71de 	.word	0x8e8a71de
 8002084:	3f7ff2e4 	.word	0x3f7ff2e4
 8002088:	200015dc 	.word	0x200015dc
 800208c:	20001908 	.word	0x20001908
 8002090:	2000160c 	.word	0x2000160c
 8002094:	20001948 	.word	0x20001948
 8002098:	2000158c 	.word	0x2000158c
 800209c:	200008e8 	.word	0x200008e8
 80020a0:	200008ec 	.word	0x200008ec
 80020a4:	200008f0 	.word	0x200008f0
 80020a8:	200008f4 	.word	0x200008f4
 80020ac:	200008f8 	.word	0x200008f8
 80020b0:	200008fc 	.word	0x200008fc
 80020b4:	200008c4 	.word	0x200008c4
 80020b8:	200008c8 	.word	0x200008c8
 80020bc:	200008cc 	.word	0x200008cc
 80020c0:	200017b4 	.word	0x200017b4
 80020c4:	20001724 	.word	0x20001724
 80020c8:	2000176c 	.word	0x2000176c
 80020cc:	2000161d 	.word	0x2000161d

080020d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b090      	sub	sp, #64	; 0x40
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 0318 	add.w	r3, r7, #24
 80020da:	2228      	movs	r2, #40	; 0x28
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f00c fe42 	bl	800ed68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002100:	2301      	movs	r3, #1
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002104:	2302      	movs	r3, #2
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800210e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002114:	f107 0318 	add.w	r3, r7, #24
 8002118:	4618      	mov	r0, r3
 800211a:	f005 fa11 	bl	8007540 <HAL_RCC_OscConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800212e:	f002 f80d 	bl	800414c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002132:	230f      	movs	r3, #15
 8002134:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002136:	2302      	movs	r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800213e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2102      	movs	r1, #2
 800214c:	4618      	mov	r0, r3
 800214e:	f005 fc77 	bl	8007a40 <HAL_RCC_ClockConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf14      	ite	ne
 8002158:	2301      	movne	r3, #1
 800215a:	2300      	moveq	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002162:	f001 fff3 	bl	800414c <Error_Handler>
  }
}
 8002166:	bf00      	nop
 8002168:	3740      	adds	r7, #64	; 0x40
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8002176:	2300      	movs	r3, #0
 8002178:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800217a:	2305      	movs	r3, #5
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	2301      	movs	r3, #1
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	223e      	movs	r2, #62	; 0x3e
 800218a:	21d0      	movs	r1, #208	; 0xd0
 800218c:	4826      	ldr	r0, [pc, #152]	; (8002228 <_Z14MPU6050_Baslatv+0xb8>)
 800218e:	f004 f9cb 	bl	8006528 <HAL_I2C_Mem_Write>
	config = 0x18;
 8002192:	2318      	movs	r3, #24
 8002194:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8002196:	2305      	movs	r3, #5
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	2301      	movs	r3, #1
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	2216      	movs	r2, #22
 80021a6:	21d0      	movs	r1, #208	; 0xd0
 80021a8:	481f      	ldr	r0, [pc, #124]	; (8002228 <_Z14MPU6050_Baslatv+0xb8>)
 80021aa:	f004 f9bd 	bl	8006528 <HAL_I2C_Mem_Write>
	config = 0x00;
 80021ae:	2300      	movs	r3, #0
 80021b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80021b2:	2305      	movs	r3, #5
 80021b4:	9302      	str	r3, [sp, #8]
 80021b6:	2301      	movs	r3, #1
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2301      	movs	r3, #1
 80021c0:	222d      	movs	r2, #45	; 0x2d
 80021c2:	21a6      	movs	r1, #166	; 0xa6
 80021c4:	4818      	ldr	r0, [pc, #96]	; (8002228 <_Z14MPU6050_Baslatv+0xb8>)
 80021c6:	f004 f9af 	bl	8006528 <HAL_I2C_Mem_Write>
	config = 0x08;
 80021ca:	2308      	movs	r3, #8
 80021cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80021ce:	2305      	movs	r3, #5
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2301      	movs	r3, #1
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	222d      	movs	r2, #45	; 0x2d
 80021de:	21a6      	movs	r1, #166	; 0xa6
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <_Z14MPU6050_Baslatv+0xb8>)
 80021e2:	f004 f9a1 	bl	8006528 <HAL_I2C_Mem_Write>
	config = 0x0D;
 80021e6:	230d      	movs	r3, #13
 80021e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80021ea:	2305      	movs	r3, #5
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	2301      	movs	r3, #1
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	222c      	movs	r2, #44	; 0x2c
 80021fa:	21a6      	movs	r1, #166	; 0xa6
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <_Z14MPU6050_Baslatv+0xb8>)
 80021fe:	f004 f993 	bl	8006528 <HAL_I2C_Mem_Write>
	config = 0x01;
 8002202:	2301      	movs	r3, #1
 8002204:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002206:	2305      	movs	r3, #5
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	2301      	movs	r3, #1
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	2231      	movs	r2, #49	; 0x31
 8002216:	21a6      	movs	r1, #166	; 0xa6
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <_Z14MPU6050_Baslatv+0xb8>)
 800221a:	f004 f985 	bl	8006528 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20001630 	.word	0x20001630
 800222c:	00000000 	.word	0x00000000

08002230 <_Z8MagCalibsss>:

}
*/
#endif

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
 800223a:	460b      	mov	r3, r1
 800223c:	80bb      	strh	r3, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 8002242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f8d4 	bl	80003f4 <__aeabi_i2d>
 800224c:	a366      	add	r3, pc, #408	; (adr r3, 80023e8 <_Z8MagCalibsss+0x1b8>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f939 	bl	80004c8 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4614      	mov	r4, r2
 800225c:	461d      	mov	r5, r3
 800225e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f8c6 	bl	80003f4 <__aeabi_i2d>
 8002268:	a361      	add	r3, pc, #388	; (adr r3, 80023f0 <_Z8MagCalibsss+0x1c0>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f92b 	bl	80004c8 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fd ff6f 	bl	800015c <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f8b2 	bl	80003f4 <__aeabi_i2d>
 8002290:	a359      	add	r3, pc, #356	; (adr r3, 80023f8 <_Z8MagCalibsss+0x1c8>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fe f917 	bl	80004c8 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fd ff59 	bl	8000158 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <_Z8MagCalibsss+0x1f8>)
 80022b4:	f7fd ff52 	bl	800015c <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fbb2 	bl	8000a28 <__aeabi_d2iz>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	4b58      	ldr	r3, [pc, #352]	; (800242c <_Z8MagCalibsss+0x1fc>)
 80022ca:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 80022cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f88f 	bl	80003f4 <__aeabi_i2d>
 80022d6:	a346      	add	r3, pc, #280	; (adr r3, 80023f0 <_Z8MagCalibsss+0x1c0>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe f8f4 	bl	80004c8 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f881 	bl	80003f4 <__aeabi_i2d>
 80022f2:	a343      	add	r3, pc, #268	; (adr r3, 8002400 <_Z8MagCalibsss+0x1d0>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe f8e6 	bl	80004c8 <__aeabi_dmul>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	f7fd ff2a 	bl	800015c <__adddf3>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4614      	mov	r4, r2
 800230e:	461d      	mov	r5, r3
 8002310:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f86d 	bl	80003f4 <__aeabi_i2d>
 800231a:	a33b      	add	r3, pc, #236	; (adr r3, 8002408 <_Z8MagCalibsss+0x1d8>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f8d2 	bl	80004c8 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ff16 	bl	800015c <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	a335      	add	r3, pc, #212	; (adr r3, 8002410 <_Z8MagCalibsss+0x1e0>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fd ff0d 	bl	800015c <__adddf3>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fb6d 	bl	8000a28 <__aeabi_d2iz>
 800234e:	4603      	mov	r3, r0
 8002350:	b21a      	sxth	r2, r3
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <_Z8MagCalibsss+0x200>)
 8002354:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 8002356:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f84a 	bl	80003f4 <__aeabi_i2d>
 8002360:	a329      	add	r3, pc, #164	; (adr r3, 8002408 <_Z8MagCalibsss+0x1d8>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe f8af 	bl	80004c8 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4614      	mov	r4, r2
 8002370:	461d      	mov	r5, r3
 8002372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f83c 	bl	80003f4 <__aeabi_i2d>
 800237c:	a31e      	add	r3, pc, #120	; (adr r3, 80023f8 <_Z8MagCalibsss+0x1c8>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fe f8a1 	bl	80004c8 <__aeabi_dmul>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fd fee3 	bl	8000158 <__aeabi_dsub>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f828 	bl	80003f4 <__aeabi_i2d>
 80023a4:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_Z8MagCalibsss+0x1e8>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f88d 	bl	80004c8 <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4620      	mov	r0, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	f7fd fed1 	bl	800015c <__adddf3>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	a317      	add	r3, pc, #92	; (adr r3, 8002420 <_Z8MagCalibsss+0x1f0>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fd fec6 	bl	8000158 <__aeabi_dsub>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fb28 	bl	8000a28 <__aeabi_d2iz>
 80023d8:	4603      	mov	r3, r0
 80023da:	b21a      	sxth	r2, r3
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <_Z8MagCalibsss+0x204>)
 80023de:	801a      	strh	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	4189374c 	.word	0x4189374c
 80023ec:	3feee560 	.word	0x3feee560
 80023f0:	3dee7818 	.word	0x3dee7818
 80023f4:	3f8c725c 	.word	0x3f8c725c
 80023f8:	f861a60d 	.word	0xf861a60d
 80023fc:	3f929888 	.word	0x3f929888
 8002400:	3c361134 	.word	0x3c361134
 8002404:	3fee52bd 	.word	0x3fee52bd
 8002408:	a6ce3583 	.word	0xa6ce3583
 800240c:	3f7b8023 	.word	0x3f7b8023
 8002410:	33333333 	.word	0x33333333
 8002414:	4059d333 	.word	0x4059d333
 8002418:	24dd2f1b 	.word	0x24dd2f1b
 800241c:	3ff18106 	.word	0x3ff18106
 8002420:	e353f7cf 	.word	0xe353f7cf
 8002424:	40211ba5 	.word	0x40211ba5
 8002428:	40300000 	.word	0x40300000
 800242c:	20001606 	.word	0x20001606
 8002430:	20001608 	.word	0x20001608
 8002434:	2000160a 	.word	0x2000160a

08002438 <_Z9checkModei>:

void checkMode(int mod_ch) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002446:	da1f      	bge.n	8002488 <_Z9checkModei+0x50>

		  controller.mod = STABILIZE;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <_Z9checkModei+0x88>)
 800244a:	2200      	movs	r2, #0
 800244c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  controller.z0 = EKF.alt_gnd;
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <_Z9checkModei+0x8c>)
 8002452:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8002456:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <_Z9checkModei+0x88>)
 8002458:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
		  controller.x0 = EKF.x;
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <_Z9checkModei+0x8c>)
 800245e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <_Z9checkModei+0x88>)
 8002464:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
		  controller.y0 = EKF.y;
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <_Z9checkModei+0x8c>)
 800246a:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <_Z9checkModei+0x88>)
 8002470:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
		  controller.p_alt.reset();
 8002474:	4814      	ldr	r0, [pc, #80]	; (80024c8 <_Z9checkModei+0x90>)
 8002476:	f00a f99f 	bl	800c7b8 <_ZN3PID5resetEv>
		  controller.p_velx.reset();
 800247a:	4814      	ldr	r0, [pc, #80]	; (80024cc <_Z9checkModei+0x94>)
 800247c:	f00a f99c 	bl	800c7b8 <_ZN3PID5resetEv>
		  controller.p_vely.reset();
 8002480:	4813      	ldr	r0, [pc, #76]	; (80024d0 <_Z9checkModei+0x98>)
 8002482:	f00a f999 	bl	800c7b8 <_ZN3PID5resetEv>

	  else {
		  //controller.mod = LOITER;
		  controller.mod = STABILIZE;
	  }
}
 8002486:	e016      	b.n	80024b6 <_Z9checkModei+0x7e>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800248e:	db0e      	blt.n	80024ae <_Z9checkModei+0x76>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8002496:	4293      	cmp	r3, r2
 8002498:	dc09      	bgt.n	80024ae <_Z9checkModei+0x76>
		  controller.mod = STABILIZE;
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <_Z9checkModei+0x88>)
 800249c:	2200      	movs	r2, #0
 800249e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  z0 = controller.p_alt.zi;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <_Z9checkModei+0x88>)
 80024a4:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <_Z9checkModei+0x9c>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	e003      	b.n	80024b6 <_Z9checkModei+0x7e>
		  controller.mod = STABILIZE;
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <_Z9checkModei+0x88>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000ea0 	.word	0x20000ea0
 80024c4:	20000b58 	.word	0x20000b58
 80024c8:	200012a0 	.word	0x200012a0
 80024cc:	20001358 	.word	0x20001358
 80024d0:	20001410 	.word	0x20001410
 80024d4:	200015c8 	.word	0x200015c8

080024d8 <_Z9SwitchMagv>:

void SwitchMag() {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0

	char state;

	// determine which state is the switch on
	if		(ch[MAGNET_CH-1] > 750  && ch[MAGNET_CH-1] < 1250) state = 0;
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <_Z9SwitchMagv+0xc4>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80024e6:	4293      	cmp	r3, r2
 80024e8:	dd08      	ble.n	80024fc <_Z9SwitchMagv+0x24>
 80024ea:	4b2c      	ldr	r3, [pc, #176]	; (800259c <_Z9SwitchMagv+0xc4>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80024f2:	4293      	cmp	r3, r2
 80024f4:	dc02      	bgt.n	80024fc <_Z9SwitchMagv+0x24>
 80024f6:	2300      	movs	r3, #0
 80024f8:	71fb      	strb	r3, [r7, #7]
 80024fa:	e01f      	b.n	800253c <_Z9SwitchMagv+0x64>
	else if (ch[MAGNET_CH-1] > 1250 && ch[MAGNET_CH-1] < 1750) state = 1;
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <_Z9SwitchMagv+0xc4>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002504:	4293      	cmp	r3, r2
 8002506:	dd08      	ble.n	800251a <_Z9SwitchMagv+0x42>
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <_Z9SwitchMagv+0xc4>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8002510:	4293      	cmp	r3, r2
 8002512:	dc02      	bgt.n	800251a <_Z9SwitchMagv+0x42>
 8002514:	2301      	movs	r3, #1
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	e010      	b.n	800253c <_Z9SwitchMagv+0x64>
	else if (ch[MAGNET_CH-1] > 1750 && ch[MAGNET_CH-1] < 2250) state = 2;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <_Z9SwitchMagv+0xc4>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8002522:	4293      	cmp	r3, r2
 8002524:	dd08      	ble.n	8002538 <_Z9SwitchMagv+0x60>
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <_Z9SwitchMagv+0xc4>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800252e:	4293      	cmp	r3, r2
 8002530:	dc02      	bgt.n	8002538 <_Z9SwitchMagv+0x60>
 8002532:	2302      	movs	r3, #2
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	e001      	b.n	800253c <_Z9SwitchMagv+0x64>
	else state = -1;
 8002538:	23ff      	movs	r3, #255	; 0xff
 800253a:	71fb      	strb	r3, [r7, #7]
	// change magnet state based on state of switch
	// state = 0 -> off
	// state = 1 -> attach
	// state = 2 -> separate

	switch(state) {
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d017      	beq.n	8002572 <_Z9SwitchMagv+0x9a>
 8002542:	2b02      	cmp	r3, #2
 8002544:	dc20      	bgt.n	8002588 <_Z9SwitchMagv+0xb0>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <_Z9SwitchMagv+0x78>
 800254a:	2b01      	cmp	r3, #1
 800254c:	d006      	beq.n	800255c <_Z9SwitchMagv+0x84>
 800254e:	e01b      	b.n	8002588 <_Z9SwitchMagv+0xb0>
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	2130      	movs	r1, #48	; 0x30
 8002554:	4812      	ldr	r0, [pc, #72]	; (80025a0 <_Z9SwitchMagv+0xc8>)
 8002556:	f003 fb2d 	bl	8005bb4 <HAL_GPIO_WritePin>
		break;
 800255a:	e01b      	b.n	8002594 <_Z9SwitchMagv+0xbc>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800255c:	2201      	movs	r2, #1
 800255e:	2110      	movs	r1, #16
 8002560:	480f      	ldr	r0, [pc, #60]	; (80025a0 <_Z9SwitchMagv+0xc8>)
 8002562:	f003 fb27 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2120      	movs	r1, #32
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <_Z9SwitchMagv+0xc8>)
 800256c:	f003 fb22 	bl	8005bb4 <HAL_GPIO_WritePin>
		break;
 8002570:	e010      	b.n	8002594 <_Z9SwitchMagv+0xbc>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	2110      	movs	r1, #16
 8002576:	480a      	ldr	r0, [pc, #40]	; (80025a0 <_Z9SwitchMagv+0xc8>)
 8002578:	f003 fb1c 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	2120      	movs	r1, #32
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <_Z9SwitchMagv+0xc8>)
 8002582:	f003 fb17 	bl	8005bb4 <HAL_GPIO_WritePin>
		break;
 8002586:	e005      	b.n	8002594 <_Z9SwitchMagv+0xbc>
	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	2130      	movs	r1, #48	; 0x30
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <_Z9SwitchMagv+0xc8>)
 800258e:	f003 fb11 	bl	8005bb4 <HAL_GPIO_WritePin>
		break;
 8002592:	bf00      	nop
	}
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20001500 	.word	0x20001500
 80025a0:	40010800 	.word	0x40010800

080025a4 <_Z10CheckSwarmv>:

void CheckSwarm() {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <_Z10CheckSwarmv+0x68>)
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80025b0:	4293      	cmp	r3, r2
 80025b2:	dd14      	ble.n	80025de <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <_Z10CheckSwarmv+0x6c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d024      	beq.n	8002606 <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <_Z10CheckSwarmv+0x6c>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <_Z10CheckSwarmv+0x70>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			controller.pid_roll.reset();
 80025ca:	4813      	ldr	r0, [pc, #76]	; (8002618 <_Z10CheckSwarmv+0x74>)
 80025cc:	f00a f8f4 	bl	800c7b8 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80025d0:	4812      	ldr	r0, [pc, #72]	; (800261c <_Z10CheckSwarmv+0x78>)
 80025d2:	f00a f8f1 	bl	800c7b8 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80025d6:	4812      	ldr	r0, [pc, #72]	; (8002620 <_Z10CheckSwarmv+0x7c>)
 80025d8:	f00a f8ee 	bl	800c7b8 <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 80025dc:	e013      	b.n	8002606 <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <_Z10CheckSwarmv+0x6c>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00f      	beq.n	8002606 <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <_Z10CheckSwarmv+0x70>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			swarm_mode = NORMAL;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_Z10CheckSwarmv+0x6c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 80025f4:	4808      	ldr	r0, [pc, #32]	; (8002618 <_Z10CheckSwarmv+0x74>)
 80025f6:	f00a f8df 	bl	800c7b8 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80025fa:	4808      	ldr	r0, [pc, #32]	; (800261c <_Z10CheckSwarmv+0x78>)
 80025fc:	f00a f8dc 	bl	800c7b8 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 8002600:	4807      	ldr	r0, [pc, #28]	; (8002620 <_Z10CheckSwarmv+0x7c>)
 8002602:	f00a f8d9 	bl	800c7b8 <_ZN3PID5resetEv>
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20001500 	.word	0x20001500
 8002610:	2000161e 	.word	0x2000161e
 8002614:	20000ea0 	.word	0x20000ea0
 8002618:	20001078 	.word	0x20001078
 800261c:	20001130 	.word	0x20001130
 8002620:	200011e8 	.word	0x200011e8

08002624 <_Z13CheckFailsafev>:

void CheckFailsafe() {
 8002624:	b598      	push	{r3, r4, r7, lr}
 8002626:	af00      	add	r7, sp, #0

	if(armed) {
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <_Z13CheckFailsafev+0xa4>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d048      	beq.n	80026c2 <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <_Z13CheckFailsafev+0xa8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002638:	4293      	cmp	r3, r2
 800263a:	dc0d      	bgt.n	8002658 <_Z13CheckFailsafev+0x34>
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <_Z13CheckFailsafev+0xac>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <_Z13CheckFailsafev+0xac>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <_Z13CheckFailsafev+0xb0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <_Z13CheckFailsafev+0xb4>)
 8002656:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <_Z13CheckFailsafev+0xb8>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002660:	d226      	bcs.n	80026b0 <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <_Z13CheckFailsafev+0xac>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d02b      	beq.n	80026c2 <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <_Z13CheckFailsafev+0xb0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <_Z13CheckFailsafev+0xb4>)
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fa53 	bl	8000b20 <__aeabi_fsub>
 800267a:	4603      	mov	r3, r0
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fb8d 	bl	8001d9c <_ZSt3absf>
 8002682:	4603      	mov	r3, r0
 8002684:	2201      	movs	r2, #1
 8002686:	4614      	mov	r4, r2
 8002688:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fcef 	bl	8001070 <__aeabi_fcmplt>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <_Z13CheckFailsafev+0x78>
 8002698:	2300      	movs	r3, #0
 800269a:	461c      	mov	r4, r3
 800269c:	b2e3      	uxtb	r3, r4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00f      	beq.n	80026c2 <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <_Z13CheckFailsafev+0xb8>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <_Z13CheckFailsafev+0xb8>)
 80026ac:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 80026ae:	e008      	b.n	80026c2 <_Z13CheckFailsafev+0x9e>
			armed = false;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <_Z13CheckFailsafev+0xa4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <_Z13CheckFailsafev+0xac>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <_Z13CheckFailsafev+0xb8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	801a      	strh	r2, [r3, #0]
}
 80026c2:	bf00      	nop
 80026c4:	bd98      	pop	{r3, r4, r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20001569 	.word	0x20001569
 80026cc:	20001500 	.word	0x20001500
 80026d0:	20001616 	.word	0x20001616
 80026d4:	200008d0 	.word	0x200008d0
 80026d8:	20001618 	.word	0x20001618
 80026dc:	20001614 	.word	0x20001614

080026e0 <_Z9Check_Armv>:


void Check_Arm() {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	if(!armed) {
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <_Z9Check_Armv+0xa4>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f083 0301 	eor.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d045      	beq.n	800277e <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 80026f2:	4b25      	ldr	r3, [pc, #148]	; (8002788 <_Z9Check_Armv+0xa8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f240 424b 	movw	r2, #1099	; 0x44b
 80026fa:	4293      	cmp	r3, r2
 80026fc:	dc3b      	bgt.n	8002776 <_Z9Check_Armv+0x96>
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <_Z9Check_Armv+0xa8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8002706:	4293      	cmp	r3, r2
 8002708:	dd35      	ble.n	8002776 <_Z9Check_Armv+0x96>
				if(!arm_start){
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <_Z9Check_Armv+0xac>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8002718:	f002 fbde 	bl	8004ed8 <HAL_GetTick>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <_Z9Check_Armv+0xb0>)
 8002722:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <_Z9Check_Armv+0xac>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 800272a:	f002 fbd5 	bl	8004ed8 <HAL_GetTick>
 800272e:	4603      	mov	r3, r0
 8002730:	4a17      	ldr	r2, [pc, #92]	; (8002790 <_Z9Check_Armv+0xb0>)
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800273a:	4293      	cmp	r3, r2
 800273c:	bf8c      	ite	hi
 800273e:	2301      	movhi	r3, #1
 8002740:	2300      	movls	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01a      	beq.n	800277e <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 8002748:	4812      	ldr	r0, [pc, #72]	; (8002794 <_Z9Check_Armv+0xb4>)
 800274a:	f00a f835 	bl	800c7b8 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 800274e:	4812      	ldr	r0, [pc, #72]	; (8002798 <_Z9Check_Armv+0xb8>)
 8002750:	f00a f832 	bl	800c7b8 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8002754:	4811      	ldr	r0, [pc, #68]	; (800279c <_Z9Check_Armv+0xbc>)
 8002756:	f00a f82f 	bl	800c7b8 <_ZN3PID5resetEv>
					armed = true;
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <_Z9Check_Armv+0xa4>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <_Z9Check_Armv+0xc0>)
 8002762:	2201      	movs	r2, #1
 8002764:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					//SetHome2();
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276e:	480d      	ldr	r0, [pc, #52]	; (80027a4 <_Z9Check_Armv+0xc4>)
 8002770:	f003 fa20 	bl	8005bb4 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8002774:	e003      	b.n	800277e <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <_Z9Check_Armv+0xac>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800277c:	e7ff      	b.n	800277e <_Z9Check_Armv+0x9e>
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20001569 	.word	0x20001569
 8002788:	20001500 	.word	0x20001500
 800278c:	20001568 	.word	0x20001568
 8002790:	2000155c 	.word	0x2000155c
 8002794:	20001078 	.word	0x20001078
 8002798:	20001130 	.word	0x20001130
 800279c:	200011e8 	.word	0x200011e8
 80027a0:	20000b58 	.word	0x20000b58
 80027a4:	40010800 	.word	0x40010800

080027a8 <_Z12Check_Disarmv>:

void Check_Disarm() {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	if(armed) {
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <_Z12Check_Disarmv+0x8c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03c      	beq.n	800282e <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <_Z12Check_Disarmv+0x90>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f240 424b 	movw	r2, #1099	; 0x44b
 80027bc:	4293      	cmp	r3, r2
 80027be:	dc32      	bgt.n	8002826 <_Z12Check_Disarmv+0x7e>
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <_Z12Check_Disarmv+0x90>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f240 424b 	movw	r2, #1099	; 0x44b
 80027c8:	4293      	cmp	r3, r2
 80027ca:	dc2c      	bgt.n	8002826 <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <_Z12Check_Disarmv+0x94>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 80027da:	f002 fb7d 	bl	8004ed8 <HAL_GetTick>
 80027de:	4603      	mov	r3, r0
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <_Z12Check_Disarmv+0x98>)
 80027e4:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <_Z12Check_Disarmv+0x94>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 80027ec:	f002 fb74 	bl	8004ed8 <HAL_GetTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a13      	ldr	r2, [pc, #76]	; (8002840 <_Z12Check_Disarmv+0x98>)
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf8c      	ite	hi
 8002800:	2301      	movhi	r3, #1
 8002802:	2300      	movls	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d011      	beq.n	800282e <_Z12Check_Disarmv+0x86>
					armed = false;
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <_Z12Check_Disarmv+0x8c>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <_Z12Check_Disarmv+0x9c>)
 8002812:	2200      	movs	r2, #0
 8002814:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281e:	480a      	ldr	r0, [pc, #40]	; (8002848 <_Z12Check_Disarmv+0xa0>)
 8002820:	f003 f9c8 	bl	8005bb4 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8002824:	e003      	b.n	800282e <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <_Z12Check_Disarmv+0x94>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800282c:	e7ff      	b.n	800282e <_Z12Check_Disarmv+0x86>
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20001569 	.word	0x20001569
 8002838:	20001500 	.word	0x20001500
 800283c:	2000156a 	.word	0x2000156a
 8002840:	20001560 	.word	0x20001560
 8002844:	20000b58 	.word	0x20000b58
 8002848:	40010800 	.word	0x40010800

0800284c <_Z9TelemPackv>:

void TelemPack() {
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8002850:	4b9e      	ldr	r3, [pc, #632]	; (8002acc <_Z9TelemPackv+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a9e      	ldr	r2, [pc, #632]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002856:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8002858:	4b9c      	ldr	r3, [pc, #624]	; (8002acc <_Z9TelemPackv+0x280>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a9c      	ldr	r2, [pc, #624]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800285e:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8002860:	4b9a      	ldr	r3, [pc, #616]	; (8002acc <_Z9TelemPackv+0x280>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a9a      	ldr	r2, [pc, #616]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002866:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8002868:	4b9a      	ldr	r3, [pc, #616]	; (8002ad4 <_Z9TelemPackv+0x288>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b98      	ldr	r3, [pc, #608]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002870:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8002872:	4b98      	ldr	r3, [pc, #608]	; (8002ad4 <_Z9TelemPackv+0x288>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b95      	ldr	r3, [pc, #596]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800287a:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 800287c:	4b95      	ldr	r3, [pc, #596]	; (8002ad4 <_Z9TelemPackv+0x288>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b93      	ldr	r3, [pc, #588]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002884:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8002886:	4b93      	ldr	r3, [pc, #588]	; (8002ad4 <_Z9TelemPackv+0x288>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b90      	ldr	r3, [pc, #576]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800288e:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 8002890:	4b91      	ldr	r3, [pc, #580]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 8002892:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002896:	4a8e      	ldr	r2, [pc, #568]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002898:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 800289a:	4b8f      	ldr	r3, [pc, #572]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 800289c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80028a0:	4a8b      	ldr	r2, [pc, #556]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028a2:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 80028a4:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <_Z9TelemPackv+0x290>)
 80028a6:	f993 3000 	ldrsb.w	r3, [r3]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f9ee 	bl	8000c8c <__aeabi_i2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4a87      	ldr	r2, [pc, #540]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028b4:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 80028b6:	4b85      	ldr	r3, [pc, #532]	; (8002acc <_Z9TelemPackv+0x280>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a85      	ldr	r2, [pc, #532]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028bc:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80028be:	4b83      	ldr	r3, [pc, #524]	; (8002acc <_Z9TelemPackv+0x280>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	4a83      	ldr	r2, [pc, #524]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028c4:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 80028c6:	4b81      	ldr	r3, [pc, #516]	; (8002acc <_Z9TelemPackv+0x280>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4a81      	ldr	r2, [pc, #516]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028cc:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80028ce:	4b84      	ldr	r3, [pc, #528]	; (8002ae0 <_Z9TelemPackv+0x294>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4a7f      	ldr	r2, [pc, #508]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028d4:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <_Z9TelemPackv+0x294>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4a7d      	ldr	r2, [pc, #500]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028dc:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 80028de:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80028e0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80028e4:	4a7a      	ldr	r2, [pc, #488]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028e6:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 80028e8:	4b7e      	ldr	r3, [pc, #504]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80028ea:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80028ee:	4a78      	ldr	r2, [pc, #480]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028f0:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 80028f2:	4b7c      	ldr	r3, [pc, #496]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80028f4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80028f8:	4a75      	ldr	r2, [pc, #468]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80028fa:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 80028fc:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80028fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002904:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_bias;
 8002906:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <_Z9TelemPackv+0x298>)
 8002908:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800290c:	4a70      	ldr	r2, [pc, #448]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800290e:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_bias;
 8002910:	4b74      	ldr	r3, [pc, #464]	; (8002ae4 <_Z9TelemPackv+0x298>)
 8002912:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002916:	4a6e      	ldr	r2, [pc, #440]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002918:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 800291a:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <_Z9TelemPackv+0x298>)
 800291c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002920:	4a6b      	ldr	r2, [pc, #428]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002922:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8002924:	4b6f      	ldr	r3, [pc, #444]	; (8002ae4 <_Z9TelemPackv+0x298>)
 8002926:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800292a:	4a69      	ldr	r2, [pc, #420]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800292c:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 800292e:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 8002930:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8002934:	4a66      	ldr	r2, [pc, #408]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8002938:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 800293a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800293e:	4a64      	ldr	r2, [pc, #400]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002940:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002942:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 8002944:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8002948:	4a61      	ldr	r2, [pc, #388]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800294a:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 800294c:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 800294e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002952:	4a5f      	ldr	r2, [pc, #380]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002954:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8002956:	4b60      	ldr	r3, [pc, #384]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 8002958:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800295c:	4a5c      	ldr	r2, [pc, #368]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800295e:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8002960:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 8002962:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8002966:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002968:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 800296c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8002970:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8002974:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 8002976:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800297a:	4a55      	ldr	r2, [pc, #340]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800297c:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 800297e:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <_Z9TelemPackv+0x298>)
 8002980:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002986:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 8002988:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <_Z9TelemPackv+0x298>)
 800298a:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 800298e:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <_Z9TelemPackv+0x298>)
 8002996:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800299a:	4a4d      	ldr	r2, [pc, #308]	; (8002ad0 <_Z9TelemPackv+0x284>)
 800299c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 80029a0:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <_Z9TelemPackv+0x29c>)
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80029a6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 80029aa:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <_Z9TelemPackv+0x29c>)
 80029ac:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80029b4:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 80029b8:	4b4b      	ldr	r3, [pc, #300]	; (8002ae8 <_Z9TelemPackv+0x29c>)
 80029ba:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80029be:	b21a      	sxth	r2, r3
 80029c0:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80029c2:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <_Z9TelemPackv+0x29c>)
 80029c8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80029d0:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.x;
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80029d6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80029da:	4a3d      	ldr	r2, [pc, #244]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80029dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 80029e0:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80029e2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80029e6:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80029e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  telem_pack.position_body.y = EKF.y;
 80029ec:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80029ee:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80029f2:	4a37      	ldr	r2, [pc, #220]	; (8002ad0 <_Z9TelemPackv+0x284>)
 80029f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	  telem_pack.velocity_body.y = EKF.vy;
 80029f8:	4b3a      	ldr	r3, [pc, #232]	; (8002ae4 <_Z9TelemPackv+0x298>)
 80029fa:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80029fe:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.alt_thr = controller.alt_thr;
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <_Z9TelemPackv+0x28c>)
 8002a06:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8002a0a:	4a31      	ldr	r2, [pc, #196]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a0c:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 8002a0e:	f002 fa63 	bl	8004ed8 <HAL_GetTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accXc;
 8002a1a:	4b34      	ldr	r3, [pc, #208]	; (8002aec <_Z9TelemPackv+0x2a0>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a20:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accYc;
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <_Z9TelemPackv+0x2a4>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a2a:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZm;
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <_Z9TelemPackv+0x2a8>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a34:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8002a38:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <_Z9TelemPackv+0x2ac>)
 8002a3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a40:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <_Z9TelemPackv+0x2b0>)
 8002a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a4c:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <_Z9TelemPackv+0x2b4>)
 8002a52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a58:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
	   */

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a64:	f8a3 20e7 	strh.w	r2, [r3, #231]	; 0xe7
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a70:	f8a3 20e9 	strh.w	r2, [r3, #233]	; 0xe9
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a7c:	f8a3 20eb 	strh.w	r2, [r3, #235]	; 0xeb
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a88:	f8a3 20ed 	strh.w	r2, [r3, #237]	; 0xed
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002a94:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002aa0:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002aac:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002ab8:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <_Z9TelemPackv+0x2b8>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <_Z9TelemPackv+0x284>)
 8002ac4:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
 8002ac8:	e01e      	b.n	8002b08 <_Z9TelemPackv+0x2bc>
 8002aca:	bf00      	nop
 8002acc:	20000924 	.word	0x20000924
 8002ad0:	20000948 	.word	0x20000948
 8002ad4:	200014d0 	.word	0x200014d0
 8002ad8:	20000ea0 	.word	0x20000ea0
 8002adc:	2000161f 	.word	0x2000161f
 8002ae0:	20000900 	.word	0x20000900
 8002ae4:	20000b58 	.word	0x20000b58
 8002ae8:	200015e8 	.word	0x200015e8
 8002aec:	200008d0 	.word	0x200008d0
 8002af0:	200008d4 	.word	0x200008d4
 8002af4:	200008e4 	.word	0x200008e4
 8002af8:	20001606 	.word	0x20001606
 8002afc:	20001608 	.word	0x20001608
 8002b00:	2000160a 	.word	0x2000160a
 8002b04:	20001500 	.word	0x20001500
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <_Z9TelemPackv+0x31c>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <_Z9TelemPackv+0x320>)
 8002b10:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <_Z9TelemPackv+0x31c>)
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <_Z9TelemPackv+0x320>)
 8002b1c:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_Z9TelemPackv+0x324>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <_Z9TelemPackv+0x320>)
 8002b28:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.pwm2.w2 = controller_output_2[1];
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <_Z9TelemPackv+0x324>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <_Z9TelemPackv+0x320>)
 8002b34:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <_Z9TelemPackv+0x324>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <_Z9TelemPackv+0x320>)
 8002b40:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <_Z9TelemPackv+0x324>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <_Z9TelemPackv+0x320>)
 8002b4c:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8002b50:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <_Z9TelemPackv+0x328>)
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <_Z9TelemPackv+0x320>)
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f240 1305 	movw	r3, #261	; 0x105
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f00c f8f5 	bl	800ed4c <memcpy>
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20001500 	.word	0x20001500
 8002b6c:	20000948 	.word	0x20000948
 8002b70:	200014e0 	.word	0x200014e0
 8002b74:	20000a50 	.word	0x20000a50

08002b78 <_Z7GyroOkuh>:
	  sent_time = HAL_GetTick();


}

int16_t GyroOku (uint8_t addr) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af04      	add	r7, sp, #16
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	2301      	movs	r3, #1
 8002b88:	9302      	str	r3, [sp, #8]
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2301      	movs	r3, #1
 8002b96:	21d1      	movs	r1, #209	; 0xd1
 8002b98:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <_Z7GyroOkuh+0x40>)
 8002b9a:	f003 fdbf 	bl	800671c <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8002b9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	7b7b      	ldrb	r3, [r7, #13]
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002bac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20001630 	.word	0x20001630

08002bbc <_Z7GPSInitv>:

void GPSInit() {
 8002bbc:	b5b0      	push	{r4, r5, r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0
	uint8_t Disable_GPGSV[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15};
 8002bc2:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <_Z7GPSInitv+0x94>)
 8002bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bca:	c303      	stmia	r3!, {r0, r1}
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	0c12      	lsrs	r2, r2, #16
 8002bd2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Disable_GPGSV, 11, 100);
 8002bd4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002bd8:	2364      	movs	r3, #100	; 0x64
 8002bda:	220b      	movs	r2, #11
 8002bdc:	481d      	ldr	r0, [pc, #116]	; (8002c54 <_Z7GPSInitv+0x98>)
 8002bde:	f006 fdb5 	bl	800974c <HAL_UART_Transmit>
	uint8_t Set_to_5Hz[14] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <_Z7GPSInitv+0x9c>)
 8002be4:	f107 041c 	add.w	r4, r7, #28
 8002be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bea:	c407      	stmia	r4!, {r0, r1, r2}
 8002bec:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_5Hz, 14, 100);
 8002bee:	f107 011c 	add.w	r1, r7, #28
 8002bf2:	2364      	movs	r3, #100	; 0x64
 8002bf4:	220e      	movs	r2, #14
 8002bf6:	4817      	ldr	r0, [pc, #92]	; (8002c54 <_Z7GPSInitv+0x98>)
 8002bf8:	f006 fda8 	bl	800974c <HAL_UART_Transmit>
	uint8_t Set_to_115[28] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E};
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <_Z7GPSInitv+0xa0>)
 8002bfe:	463c      	mov	r4, r7
 8002c00:	461d      	mov	r5, r3
 8002c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_115, 28, 100);
 8002c0e:	4639      	mov	r1, r7
 8002c10:	2364      	movs	r3, #100	; 0x64
 8002c12:	221c      	movs	r2, #28
 8002c14:	480f      	ldr	r0, [pc, #60]	; (8002c54 <_Z7GPSInitv+0x98>)
 8002c16:	f006 fd99 	bl	800974c <HAL_UART_Transmit>


    HAL_UART_Abort_IT(&huart3);
 8002c1a:	480e      	ldr	r0, [pc, #56]	; (8002c54 <_Z7GPSInitv+0x98>)
 8002c1c:	f006 ff14 	bl	8009a48 <HAL_UART_Abort_IT>

    HAL_UART_DeInit(&huart3);
 8002c20:	480c      	ldr	r0, [pc, #48]	; (8002c54 <_Z7GPSInitv+0x98>)
 8002c22:	f006 fd67 	bl	80096f4 <HAL_UART_DeInit>

    huart3.Init.BaudRate = 115200;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <_Z7GPSInitv+0x98>)
 8002c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c2c:	605a      	str	r2, [r3, #4]

    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002c2e:	4809      	ldr	r0, [pc, #36]	; (8002c54 <_Z7GPSInitv+0x98>)
 8002c30:	f006 fd13 	bl	800965a <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <_Z7GPSInitv+0x8c>
        Error_Handler();
 8002c44:	f001 fa82 	bl	800414c <Error_Handler>
    }


}
 8002c48:	bf00      	nop
 8002c4a:	3738      	adds	r7, #56	; 0x38
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	0800eda4 	.word	0x0800eda4
 8002c54:	20001840 	.word	0x20001840
 8002c58:	0800edb0 	.word	0x0800edb0
 8002c5c:	0800edc0 	.word	0x0800edc0

08002c60 <_Z7pwm2angt>:

float pwm2ang(unsigned short int pwm) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8002c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c72:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002c74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c78:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 8002c7a:	f06f 0313 	mvn.w	r3, #19
 8002c7e:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 8002c80:	2314      	movs	r3, #20
 8002c82:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	dd09      	ble.n	8002ca6 <_Z7pwm2angt+0x46>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	db03      	blt.n	8002ca6 <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8002c9e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002ca2:	83fb      	strh	r3, [r7, #30]
 8002ca4:	e001      	b.n	8002caa <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002caa:	8bfa      	ldrh	r2, [r7, #30]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	1a8a      	subs	r2, r1, r2
 8002cb6:	fb02 f203 	mul.w	r2, r2, r3
 8002cba:	6939      	ldr	r1, [r7, #16]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1acb      	subs	r3, r1, r3
 8002cc0:	fb92 f2f3 	sdiv	r2, r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd ffdf 	bl	8000c8c <__aeabi_i2f>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8002ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce6:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002ce8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cec:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8002cee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002cf2:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8002cf4:	2364      	movs	r3, #100	; 0x64
 8002cf6:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	1a8a      	subs	r2, r1, r2
 8002d04:	fb02 f203 	mul.w	r2, r2, r3
 8002d08:	6939      	ldr	r1, [r7, #16]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1acb      	subs	r3, r1, r3
 8002d0e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	425b      	negs	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd ffb7 	bl	8000c8c <__aeabi_i2f>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af04      	add	r7, sp, #16
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	2301      	movs	r3, #1
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2301      	movs	r3, #1
 8002d46:	21a7      	movs	r1, #167	; 0xa7
 8002d48:	4807      	ldr	r0, [pc, #28]	; (8002d68 <_Z6AccOkuh+0x40>)
 8002d4a:	f003 fce7 	bl	800671c <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8002d4e:	7b7b      	ldrb	r3, [r7, #13]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	7b3b      	ldrb	r3, [r7, #12]
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20001630 	.word	0x20001630

08002d6c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fd fb3d 	bl	80003f4 <__aeabi_i2d>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f00a f8a5 	bl	800ced0 <sqrt>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8002da0:	4bc6      	ldr	r3, [pc, #792]	; (80030bc <_Z9DCM2EulerPsS_+0x328>)
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db2:	fb03 f202 	mul.w	r2, r3, r2
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3302      	adds	r3, #2
 8002dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc8:	fb03 f301 	mul.w	r3, r3, r1
 8002dcc:	441a      	add	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de0:	fb03 f301 	mul.w	r3, r3, r1
 8002de4:	4413      	add	r3, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ffc0 	bl	8002d6c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7fd fe40 	bl	8000a78 <__aeabi_d2f>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3302      	adds	r3, #2
 8002e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0c:	fb03 f302 	mul.w	r3, r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	3202      	adds	r2, #2
 8002e14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e18:	fb02 f203 	mul.w	r2, r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e22:	4619      	mov	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3302      	adds	r3, #2
 8002e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2c:	fb03 f301 	mul.w	r3, r3, r1
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	3102      	adds	r1, #2
 8002e34:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	1ad2      	subs	r2, r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e44:	4619      	mov	r1, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4e:	fb03 f301 	mul.w	r3, r3, r1
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	3104      	adds	r1, #4
 8002e56:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	441a      	add	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e66:	4619      	mov	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e70:	fb03 f301 	mul.w	r3, r3, r1
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	3104      	adds	r1, #4
 8002e78:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd ff02 	bl	8000c8c <__aeabi_i2f>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e90:	461a      	mov	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3302      	adds	r3, #2
 8002e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e9a:	fb03 f202 	mul.w	r2, r3, r2
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eae:	fb03 f301 	mul.w	r3, r3, r1
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fee9 	bl	8000c8c <__aeabi_i2f>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f9d3 	bl	8003268 <_Z6squaref>
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed4:	fb03 f202 	mul.w	r2, r3, r2
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3304      	adds	r3, #4
 8002edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee8:	fb03 f301 	mul.w	r3, r3, r1
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fecc 	bl	8000c8c <__aeabi_i2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f9b6 	bl	8003268 <_Z6squaref>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4619      	mov	r1, r3
 8002f00:	4628      	mov	r0, r5
 8002f02:	f7fd fe0f 	bl	8000b24 <__addsf3>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461d      	mov	r5, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1c:	fb03 f202 	mul.w	r2, r3, r2
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3304      	adds	r3, #4
 8002f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f32:	fb03 f301 	mul.w	r3, r3, r1
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fea7 	bl	8000c8c <__aeabi_i2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f991 	bl	8003268 <_Z6squaref>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f7fd fdea 	bl	8000b24 <__addsf3>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe ff54 	bl	8001e00 <_ZSt4sqrtf>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fee9 	bl	8000d34 <__aeabi_fmul>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4619      	mov	r1, r3
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7fd ff98 	bl	8000e9c <__aeabi_fdiv>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	3304      	adds	r3, #4
 8002f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f82:	fb03 f202 	mul.w	r2, r3, r2
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f98:	fb03 f301 	mul.w	r3, r3, r1
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fe74 	bl	8000c8c <__aeabi_i2f>
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb6:	fb03 f202 	mul.w	r2, r3, r2
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fca:	fb03 f301 	mul.w	r3, r3, r1
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fe5b 	bl	8000c8c <__aeabi_i2f>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f945 	bl	8003268 <_Z6squaref>
 8002fde:	4605      	mov	r5, r0
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff0:	fb03 f202 	mul.w	r2, r3, r2
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003004:	fb03 f301 	mul.w	r3, r3, r1
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fe3e 	bl	8000c8c <__aeabi_i2f>
 8003010:	4603      	mov	r3, r0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f928 	bl	8003268 <_Z6squaref>
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	4628      	mov	r0, r5
 800301e:	f7fd fd81 	bl	8000b24 <__addsf3>
 8003022:	4603      	mov	r3, r0
 8003024:	461d      	mov	r5, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3302      	adds	r3, #2
 800302a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003038:	fb03 f202 	mul.w	r2, r3, r2
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3304      	adds	r3, #4
 8003040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003044:	4619      	mov	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3302      	adds	r3, #2
 800304a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304e:	fb03 f301 	mul.w	r3, r3, r1
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fe19 	bl	8000c8c <__aeabi_i2f>
 800305a:	4603      	mov	r3, r0
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f903 	bl	8003268 <_Z6squaref>
 8003062:	4603      	mov	r3, r0
 8003064:	4619      	mov	r1, r3
 8003066:	4628      	mov	r0, r5
 8003068:	f7fd fd5c 	bl	8000b24 <__addsf3>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fec6 	bl	8001e00 <_ZSt4sqrtf>
 8003074:	4603      	mov	r3, r0
 8003076:	4619      	mov	r1, r3
 8003078:	4620      	mov	r0, r4
 800307a:	f7fd ff0f 	bl	8000e9c <__aeabi_fdiv>
 800307e:	4603      	mov	r3, r0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003088:	425b      	negs	r3, r3
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fdfe 	bl	8000c8c <__aeabi_i2f>
 8003090:	4603      	mov	r3, r0
 8003092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd ff01 	bl	8000e9c <__aeabi_fdiv>
 800309a:	4603      	mov	r3, r0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3302      	adds	r3, #2
 80030a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a6:	425b      	negs	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fdef 	bl	8000c8c <__aeabi_i2f>
 80030ae:	4603      	mov	r3, r0
 80030b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fef2 	bl	8000e9c <__aeabi_fdiv>
 80030b8:	4603      	mov	r3, r0
 80030ba:	e001      	b.n	80030c0 <_Z9DCM2EulerPsS_+0x32c>
 80030bc:	42654ca3 	.word	0x42654ca3
 80030c0:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3304      	adds	r3, #4
 80030c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ca:	425b      	negs	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fddd 	bl	8000c8c <__aeabi_i2f>
 80030d2:	4603      	mov	r3, r0
 80030d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fee0 	bl	8000e9c <__aeabi_fdiv>
 80030dc:	4603      	mov	r3, r0
 80030de:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fe64 	bl	8001db4 <_ZSt4asinf>
 80030ec:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 80030ee:	69b8      	ldr	r0, [r7, #24]
 80030f0:	f7fe fcbe 	bl	8001a70 <_ZSt3cosf>
 80030f4:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030fa:	f7fd fe1b 	bl	8000d34 <__aeabi_fmul>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 8003106:	69f9      	ldr	r1, [r7, #28]
 8003108:	6a38      	ldr	r0, [r7, #32]
 800310a:	f7fd fec7 	bl	8000e9c <__aeabi_fdiv>
 800310e:	4603      	mov	r3, r0
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe fe5b 	bl	8001dcc <_ZSt4atanf>
 8003116:	4603      	mov	r3, r0
 8003118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fe0a 	bl	8000d34 <__aeabi_fmul>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312c:	f7fd feb6 	bl	8000e9c <__aeabi_fdiv>
 8003130:	4603      	mov	r3, r0
 8003132:	461c      	mov	r4, r3
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003138:	f7fd feb0 	bl	8000e9c <__aeabi_fdiv>
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	4620      	mov	r0, r4
 8003142:	f7fe fe4f 	bl	8001de4 <_ZSt5atan2ff>
 8003146:	4603      	mov	r3, r0
 8003148:	4619      	mov	r1, r3
 800314a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800314c:	f7fd fdf2 	bl	8000d34 <__aeabi_fmul>
 8003150:	4603      	mov	r3, r0
 8003152:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 8003154:	6938      	ldr	r0, [r7, #16]
 8003156:	f7fd ffc9 	bl	80010ec <__aeabi_f2iz>
 800315a:	4603      	mov	r3, r0
 800315c:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 8003160:	da23      	bge.n	80031aa <_Z9DCM2EulerPsS_+0x416>
 8003162:	6938      	ldr	r0, [r7, #16]
 8003164:	f7fd ffc2 	bl	80010ec <__aeabi_f2iz>
 8003168:	4603      	mov	r3, r0
 800316a:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800316e:	db1c      	blt.n	80031aa <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <_Z9DCM2EulerPsS_+0x4c4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d04b      	beq.n	8003210 <_Z9DCM2EulerPsS_+0x47c>
 8003178:	4b38      	ldr	r3, [pc, #224]	; (800325c <_Z9DCM2EulerPsS_+0x4c8>)
 800317a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd ff74 	bl	8001070 <__aeabi_fcmplt>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d100      	bne.n	8003190 <_Z9DCM2EulerPsS_+0x3fc>
 800318e:	e03f      	b.n	8003210 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 8003190:	4b33      	ldr	r3, [pc, #204]	; (8003260 <_Z9DCM2EulerPsS_+0x4cc>)
 8003192:	f993 3000 	ldrsb.w	r3, [r3]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	b25a      	sxtb	r2, r3
 800319e:	4b30      	ldr	r3, [pc, #192]	; (8003260 <_Z9DCM2EulerPsS_+0x4cc>)
 80031a0:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80031a2:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <_Z9DCM2EulerPsS_+0x4c4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80031a8:	e032      	b.n	8003210 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 80031aa:	6938      	ldr	r0, [r7, #16]
 80031ac:	f7fd ff9e 	bl	80010ec <__aeabi_f2iz>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2baf      	cmp	r3, #175	; 0xaf
 80031b4:	dd22      	ble.n	80031fc <_Z9DCM2EulerPsS_+0x468>
 80031b6:	6938      	ldr	r0, [r7, #16]
 80031b8:	f7fd ff98 	bl	80010ec <__aeabi_f2iz>
 80031bc:	4603      	mov	r3, r0
 80031be:	2bb4      	cmp	r3, #180	; 0xb4
 80031c0:	dc1c      	bgt.n	80031fc <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <_Z9DCM2EulerPsS_+0x4c4>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d022      	beq.n	8003210 <_Z9DCM2EulerPsS_+0x47c>
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <_Z9DCM2EulerPsS_+0x4c8>)
 80031cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd ff69 	bl	80010ac <__aeabi_fcmpgt>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d100      	bne.n	80031e2 <_Z9DCM2EulerPsS_+0x44e>
 80031e0:	e016      	b.n	8003210 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <_Z9DCM2EulerPsS_+0x4cc>)
 80031e4:	f993 3000 	ldrsb.w	r3, [r3]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	b25a      	sxtb	r2, r3
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <_Z9DCM2EulerPsS_+0x4cc>)
 80031f2:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80031f4:	4b18      	ldr	r3, [pc, #96]	; (8003258 <_Z9DCM2EulerPsS_+0x4c4>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80031fa:	e009      	b.n	8003210 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <_Z9DCM2EulerPsS_+0x4d0>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	2b32      	cmp	r3, #50	; 0x32
 8003202:	d905      	bls.n	8003210 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <_Z9DCM2EulerPsS_+0x4c4>)
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <_Z9DCM2EulerPsS_+0x4d0>)
 800320c:	2200      	movs	r2, #0
 800320e:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <_Z9DCM2EulerPsS_+0x4c4>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d005      	beq.n	8003224 <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <_Z9DCM2EulerPsS_+0x4d0>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <_Z9DCM2EulerPsS_+0x4d0>)
 8003222:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <_Z9DCM2EulerPsS_+0x4cc>)
 8003226:	f993 3000 	ldrsb.w	r3, [r3]
 800322a:	461a      	mov	r2, r3
 800322c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003230:	fb03 f302 	mul.w	r3, r3, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd fd29 	bl	8000c8c <__aeabi_i2f>
 800323a:	4603      	mov	r3, r0
 800323c:	4619      	mov	r1, r3
 800323e:	6938      	ldr	r0, [r7, #16]
 8003240:	f7fd fc70 	bl	8000b24 <__addsf3>
 8003244:	4603      	mov	r3, r0
 8003246:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 800324e:	bf00      	nop

}
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	3738      	adds	r7, #56	; 0x38
 8003254:	46bd      	mov	sp, r7
 8003256:	bdb0      	pop	{r4, r5, r7, pc}
 8003258:	20000001 	.word	0x20000001
 800325c:	20000b58 	.word	0x20000b58
 8003260:	2000161f 	.word	0x2000161f
 8003264:	20001620 	.word	0x20001620

08003268 <_Z6squaref>:

float square(float x) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	float y = x*x;
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd fd5e 	bl	8000d34 <__aeabi_fmul>
 8003278:	4603      	mov	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]
	return y;
 800327c:	68fb      	ldr	r3, [r7, #12]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <_Z6PWMYazv>:

void PWMYaz() {
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
*/

#ifdef UAV1


		  if(armed) {
 800328c:	4b35      	ldr	r3, [pc, #212]	; (8003364 <_Z6PWMYazv+0xdc>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d04f      	beq.n	8003334 <_Z6PWMYazv+0xac>

			  if(in_failsafe) {
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <_Z6PWMYazv+0xe0>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d014      	beq.n	80032c6 <_Z6PWMYazv+0x3e>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1300);
 800329c:	4b33      	ldr	r3, [pc, #204]	; (800336c <_Z6PWMYazv+0xe4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f240 5214 	movw	r2, #1300	; 0x514
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1300);
 80032a6:	4b31      	ldr	r3, [pc, #196]	; (800336c <_Z6PWMYazv+0xe4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f240 5214 	movw	r2, #1300	; 0x514
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1300);
 80032b0:	4b2e      	ldr	r3, [pc, #184]	; (800336c <_Z6PWMYazv+0xe4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f240 5214 	movw	r2, #1300	; 0x514
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1300);
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <_Z6PWMYazv+0xe4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f240 5214 	movw	r2, #1300	; 0x514
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 80032c4:	e04a      	b.n	800335c <_Z6PWMYazv+0xd4>
				  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <_Z6PWMYazv+0xe8>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f240 52db 	movw	r2, #1499	; 0x5db
 80032ce:	4293      	cmp	r3, r2
 80032d0:	dc1b      	bgt.n	800330a <_Z6PWMYazv+0x82>
 80032d2:	4b27      	ldr	r3, [pc, #156]	; (8003370 <_Z6PWMYazv+0xe8>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f240 424c 	movw	r2, #1100	; 0x44c
 80032da:	4293      	cmp	r3, r2
 80032dc:	dd15      	ble.n	800330a <_Z6PWMYazv+0x82>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <_Z6PWMYazv+0xec>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <_Z6PWMYazv+0xe4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <_Z6PWMYazv+0xec>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <_Z6PWMYazv+0xe4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <_Z6PWMYazv+0xec>)
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <_Z6PWMYazv+0xe4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <_Z6PWMYazv+0xec>)
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <_Z6PWMYazv+0xe4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
 8003306:	bf00      	nop
}
 8003308:	e028      	b.n	800335c <_Z6PWMYazv+0xd4>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <_Z6PWMYazv+0xe4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003312:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <_Z6PWMYazv+0xe4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <_Z6PWMYazv+0xe4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <_Z6PWMYazv+0xe4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003332:	e013      	b.n	800335c <_Z6PWMYazv+0xd4>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <_Z6PWMYazv+0xe4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800333c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <_Z6PWMYazv+0xe4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <_Z6PWMYazv+0xe4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <_Z6PWMYazv+0xe4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	20001569 	.word	0x20001569
 8003368:	20001616 	.word	0x20001616
 800336c:	2000176c 	.word	0x2000176c
 8003370:	20001500 	.word	0x20001500
 8003374:	200014d0 	.word	0x200014d0

08003378 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003392:	da12      	bge.n	80033ba <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fbee 	bl	8002b78 <_Z7GyroOkuh>
 800339c:	4603      	mov	r3, r0
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fc74 	bl	8000c8c <__aeabi_i2f>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4619      	mov	r1, r3
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7fd fbbb 	bl	8000b24 <__addsf3>
 80033ae:	4603      	mov	r3, r0
 80033b0:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	e7e8      	b.n	800338c <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80033ba:	4905      	ldr	r1, [pc, #20]	; (80033d0 <_Z7GyroErrh+0x58>)
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7fd fd6d 	bl	8000e9c <__aeabi_fdiv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	44fa0000 	.word	0x44fa0000

080033d4 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033ee:	da12      	bge.n	8003416 <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fc98 	bl	8002d28 <_Z6AccOkuh>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fc46 	bl	8000c8c <__aeabi_i2f>
 8003400:	4603      	mov	r3, r0
 8003402:	4619      	mov	r1, r3
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7fd fb8d 	bl	8000b24 <__addsf3>
 800340a:	4603      	mov	r3, r0
 800340c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3301      	adds	r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	e7e8      	b.n	80033e8 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8003416:	4905      	ldr	r1, [pc, #20]	; (800342c <_Z6AccErrh+0x58>)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7fd fd3f 	bl	8000e9c <__aeabi_fdiv>
 800341e:	4603      	mov	r3, r0
 8003420:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	44fa0000 	.word	0x44fa0000

08003430 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <_Z11MotorBaslatv+0x38>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800343c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <_Z11MotorBaslatv+0x38>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <_Z11MotorBaslatv+0x38>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <_Z11MotorBaslatv+0x38>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 800345c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003460:	f001 fd44 	bl	8004eec <HAL_Delay>
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000176c 	.word	0x2000176c
 800346c:	00000000 	.word	0x00000000

08003470 <HAL_TIM_PeriodElapsedCallback>:
		home = true;
}
*/

//Ana Kontrolcü döngüsü
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b0a1      	sub	sp, #132	; 0x84
 8003474:	af0c      	add	r7, sp, #48	; 0x30
 8003476:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	4a51      	ldr	r2, [pc, #324]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800347c:	4293      	cmp	r3, r2
 800347e:	f040 858a 	bne.w	8003f96 <HAL_TIM_PeriodElapsedCallback+0xb26>
		//1.25 ms || 800 Hz
		Check_Arm();
 8003482:	f7ff f92d 	bl	80026e0 <_Z9Check_Armv>
		Check_Disarm();
 8003486:	f7ff f98f 	bl	80027a8 <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 800348a:	2014      	movs	r0, #20
 800348c:	f7fe fbf6 	bl	8001c7c <set_ucounter>
		set_b_counter(12);
 8003490:	200c      	movs	r0, #12
 8003492:	f7fe fad3 	bl	8001a3c <set_b_counter>

		controller_counter++;
 8003496:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80034a0:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 80034a2:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80034ac:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	4b45      	ldr	r3, [pc, #276]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034b8:	801a      	strh	r2, [r3, #0]

		#ifdef UAV1


		if(mag_counter == MAG_CLOCK_RATE) {
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d146      	bne.n	8003550 <HAL_TIM_PeriodElapsedCallback+0xe0>
			mag_counter = 0;
 80034c2:	4b42      	ldr	r3, [pc, #264]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 80034c8:	4a41      	ldr	r2, [pc, #260]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80034ca:	4942      	ldr	r1, [pc, #264]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80034cc:	4842      	ldr	r0, [pc, #264]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80034ce:	f7fd febd 	bl	800124c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80034d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d8:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80034da:	f9b2 1000 	ldrsh.w	r1, [r2]
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80034e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fea3 	bl	8002230 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 80034ea:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80034ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			mag[1] = MAG_Y_CALIB;
 80034f2:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80034f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f8:	84fb      	strh	r3, [r7, #38]	; 0x26
			mag[2] = MAG_Z_CALIB;
 80034fa:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80034fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003500:	853b      	strh	r3, [r7, #40]	; 0x28

			int16_t acc[3];
			acc[0] = accX;
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd fdf0 	bl	80010ec <__aeabi_f2iz>
 800350c:	4603      	mov	r3, r0
 800350e:	b21b      	sxth	r3, r3
 8003510:	83bb      	strh	r3, [r7, #28]
			acc[1] = accY;
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fde8 	bl	80010ec <__aeabi_f2iz>
 800351c:	4603      	mov	r3, r0
 800351e:	b21b      	sxth	r3, r3
 8003520:	83fb      	strh	r3, [r7, #30]
			acc[2] = accZ;
 8003522:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fde0 	bl	80010ec <__aeabi_f2iz>
 800352c:	4603      	mov	r3, r0
 800352e:	b21b      	sxth	r3, r3
 8003530:	843b      	strh	r3, [r7, #32]
			euler_angles = DCM2Euler(acc, mag);
 8003532:	4c30      	ldr	r4, [pc, #192]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003534:	463b      	mov	r3, r7
 8003536:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800353a:	f107 011c 	add.w	r1, r7, #28
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fc28 	bl	8002d94 <_Z9DCM2EulerPsS_>
 8003544:	4623      	mov	r3, r4
 8003546:	463a      	mov	r2, r7
 8003548:	6810      	ldr	r0, [r2, #0]
 800354a:	6851      	ldr	r1, [r2, #4]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2b28      	cmp	r3, #40	; 0x28
 8003556:	d125      	bne.n	80035a4 <HAL_TIM_PeriodElapsedCallback+0x134>
			  camera_counter = 0;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800355a:	2200      	movs	r2, #0
 800355c:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003560:	4a26      	ldr	r2, [pc, #152]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003562:	ca07      	ldmia	r2, {r0, r1, r2}
 8003564:	c303      	stmia	r3!, {r0, r1}
 8003566:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 8003568:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800356a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800356e:	b21b      	sxth	r3, r3
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fb8b 	bl	8000c8c <__aeabi_i2f>
 8003576:	4603      	mov	r3, r0
 8003578:	4921      	ldr	r1, [pc, #132]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fc8e 	bl	8000e9c <__aeabi_fdiv>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003586:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

			  if(!cam_data.detected) {
 800358a:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <HAL_TIM_PeriodElapsedCallback+0x12c>
				  EKF.Qc = 9e9;
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003596:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800359a:	e003      	b.n	80035a4 <HAL_TIM_PeriodElapsedCallback+0x134>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80035a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
			  }
		}

		if(get_ucounter() == 1) {
 80035a4:	f7fe fb84 	bl	8001cb0 <get_ucounter>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d02b      	beq.n	8003610 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			request_range();
 80035b8:	f7fe fb26 	bl	8001c08 <request_range>
 80035bc:	e0e9      	b.n	8003792 <HAL_TIM_PeriodElapsedCallback+0x322>
 80035be:	bf00      	nop
 80035c0:	200017b4 	.word	0x200017b4
 80035c4:	20001584 	.word	0x20001584
 80035c8:	20001586 	.word	0x20001586
 80035cc:	20001588 	.word	0x20001588
 80035d0:	20001604 	.word	0x20001604
 80035d4:	20001602 	.word	0x20001602
 80035d8:	20001600 	.word	0x20001600
 80035dc:	20001606 	.word	0x20001606
 80035e0:	20001608 	.word	0x20001608
 80035e4:	2000160a 	.word	0x2000160a
 80035e8:	200008c4 	.word	0x200008c4
 80035ec:	200008c8 	.word	0x200008c8
 80035f0:	200008cc 	.word	0x200008cc
 80035f4:	200015f4 	.word	0x200015f4
 80035f8:	200015e8 	.word	0x200015e8
 80035fc:	200015dc 	.word	0x200015dc
 8003600:	42c80000 	.word	0x42c80000
 8003604:	20000b58 	.word	0x20000b58
 8003608:	50061c46 	.word	0x50061c46
 800360c:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8003610:	f7fe fb4e 	bl	8001cb0 <get_ucounter>
 8003614:	4603      	mov	r3, r0
 8003616:	2b14      	cmp	r3, #20
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80b6 	beq.w	8003792 <HAL_TIM_PeriodElapsedCallback+0x322>

		  sonar_range = getRange();
 8003626:	f7fe fb09 	bl	8001c3c <getRange>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	4b70      	ldr	r3, [pc, #448]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003630:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8003632:	4b70      	ldr	r3, [pc, #448]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a70      	ldr	r2, [pc, #448]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003638:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 800363a:	4b70      	ldr	r3, [pc, #448]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a70      	ldr	r2, [pc, #448]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003640:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 8003642:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4970      	ldr	r1, [pc, #448]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fb73 	bl	8000d34 <__aeabi_fmul>
 800364e:	4603      	mov	r3, r0
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fba3 	bl	8001d9c <_ZSt3absf>
 8003656:	64f8      	str	r0, [r7, #76]	; 0x4c
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	496a      	ldr	r1, [pc, #424]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fb68 	bl	8000d34 <__aeabi_fmul>
 8003664:	4603      	mov	r3, r0
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fb98 	bl	8001d9c <_ZSt3absf>
 800366c:	64b8      	str	r0, [r7, #72]	; 0x48
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 800366e:	4b60      	ldr	r3, [pc, #384]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fb06 	bl	8000c84 <__aeabi_ui2f>
 8003678:	4603      	mov	r3, r0
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc fecc 	bl	8000418 <__aeabi_f2d>
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003686:	f7fd f849 	bl	800071c <__aeabi_ddiv>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4614      	mov	r4, r2
 8003690:	461d      	mov	r5, r3
 8003692:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003694:	f7fe f9ec 	bl	8001a70 <_ZSt3cosf>
 8003698:	4603      	mov	r3, r0
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc febc 	bl	8000418 <__aeabi_f2d>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4620      	mov	r0, r4
 80036a6:	4629      	mov	r1, r5
 80036a8:	f7fc ff0e 	bl	80004c8 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80036b6:	f7fe f9db 	bl	8001a70 <_ZSt3cosf>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fc feab 	bl	8000418 <__aeabi_f2d>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4620      	mov	r0, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	f7fc fefd 	bl	80004c8 <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	f7fd f9cf 	bl	8000a78 <__aeabi_d2f>
 80036da:	4603      	mov	r3, r0
 80036dc:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80036de:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 80036e0:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fa15 	bl	8000b20 <__aeabi_fsub>
 80036f6:	4603      	mov	r3, r0
 80036f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fbce 	bl	8000e9c <__aeabi_fdiv>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003706:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8003708:	4b3c      	ldr	r3, [pc, #240]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fb45 	bl	8001d9c <_ZSt3absf>
 8003712:	4603      	mov	r3, r0
 8003714:	2201      	movs	r2, #1
 8003716:	4614      	mov	r4, r2
 8003718:	493d      	ldr	r1, [pc, #244]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fcc6 	bl	80010ac <__aeabi_fcmpgt>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_PeriodElapsedCallback+0x2ba>
 8003726:	2300      	movs	r3, #0
 8003728:	461c      	mov	r4, r3
 800372a:	b2e3      	uxtb	r3, r4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_PeriodElapsedCallback+0x2d0>
			  sonar_alt = sonar_alt_;
 8003730:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003736:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800373e:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8003740:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4933      	ldr	r1, [pc, #204]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fcb0 	bl	80010ac <__aeabi_fcmpgt>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_TIM_PeriodElapsedCallback+0x2fc>
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fc fe5e 	bl	8000418 <__aeabi_f2d>
 800375c:	a322      	add	r3, pc, #136	; (adr r3, 80037e8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f7fd f923 	bl	80009ac <__aeabi_dcmplt>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_TIM_PeriodElapsedCallback+0x30e>
			  EKF.Qs = 9e9;
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800376e:	4a2b      	ldr	r2, [pc, #172]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003770:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  EKF.salt = 50;
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003776:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8003778:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800377c:	e009      	b.n	8003792 <HAL_TIM_PeriodElapsedCallback+0x322>
		  }

		  else {
			  EKF.Qs = 0.25;
 800377e:	4b26      	ldr	r3, [pc, #152]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003780:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003784:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  EKF.salt = 1;
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800378a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800378e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		  }


		}

		if(get_b_counter() == 1) {
 8003792:	f7fe f949 	bl	8001a28 <get_b_counter>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_TIM_PeriodElapsedCallback+0x33c>
			write_ut();
 80037a6:	f7fd ff3d 	bl	8001624 <write_ut>
 80037aa:	e06b      	b.n	8003884 <HAL_TIM_PeriodElapsedCallback+0x414>
		}

		else if(get_b_counter() == 5) { //5 ms
 80037ac:	f7fe f93c 	bl	8001a28 <get_b_counter>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d033      	beq.n	8003828 <HAL_TIM_PeriodElapsedCallback+0x3b8>
			bmp.uncomp.temp = read_ut ();
 80037c0:	f7fd ff48 	bl	8001654 <read_ut>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fa60 	bl	8000c8c <__aeabi_i2f>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80037d0:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 80037d2:	4814      	ldr	r0, [pc, #80]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80037d4:	f7fd ff58 	bl	8001688 <get_temp>
 80037d8:	4603      	mov	r3, r0
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80037dc:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 80037de:	f7fd ffab 	bl	8001738 <write_up>
 80037e2:	e04f      	b.n	8003884 <HAL_TIM_PeriodElapsedCallback+0x414>
 80037e4:	f3af 8000 	nop.w
 80037e8:	33333333 	.word	0x33333333
 80037ec:	3fd33333 	.word	0x3fd33333
 80037f0:	20001580 	.word	0x20001580
 80037f4:	20001570 	.word	0x20001570
 80037f8:	20001574 	.word	0x20001574
 80037fc:	20001578 	.word	0x20001578
 8003800:	2000157c 	.word	0x2000157c
 8003804:	20000924 	.word	0x20000924
 8003808:	3c8e8a72 	.word	0x3c8e8a72
 800380c:	40590000 	.word	0x40590000
 8003810:	40e00000 	.word	0x40e00000
 8003814:	40c00000 	.word	0x40c00000
 8003818:	20000b58 	.word	0x20000b58
 800381c:	50061c46 	.word	0x50061c46
 8003820:	42480000 	.word	0x42480000
 8003824:	2000158c 	.word	0x2000158c
		}

		else if(get_b_counter() == 12) { //
 8003828:	f7fe f8fe 	bl	8001a28 <get_b_counter>
 800382c:	4603      	mov	r3, r0
 800382e:	2b0c      	cmp	r3, #12
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d023      	beq.n	8003884 <HAL_TIM_PeriodElapsedCallback+0x414>
			bmp.uncomp.press = read_up (bmp.oss);
 800383c:	4ba8      	ldr	r3, [pc, #672]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800383e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003840:	f7fd ff9a 	bl	8001778 <read_up>
 8003844:	4603      	mov	r3, r0
 8003846:	4aa6      	ldr	r2, [pc, #664]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003848:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 800384a:	4ea5      	ldr	r6, [pc, #660]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800384c:	466d      	mov	r5, sp
 800384e:	f106 0410 	add.w	r4, r6, #16
 8003852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800385e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003862:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003866:	f7fd ffb5 	bl	80017d4 <get_pressure>
 800386a:	4603      	mov	r3, r0
 800386c:	4a9c      	ldr	r2, [pc, #624]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8003870:	489b      	ldr	r0, [pc, #620]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003872:	f7fe f87d 	bl	8001970 <get_altitude>
 8003876:	4603      	mov	r3, r0
 8003878:	4a99      	ldr	r2, [pc, #612]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800387a:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 800387c:	4b98      	ldr	r3, [pc, #608]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	4a98      	ldr	r2, [pc, #608]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8003882:	6013      	str	r3, [r2, #0]


		}
#endif

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 8003884:	4b98      	ldr	r3, [pc, #608]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	f040 8384 	bne.w	8003f96 <HAL_TIM_PeriodElapsedCallback+0xb26>
			_controller_timer = controller_timer;
 800388e:	4b97      	ldr	r3, [pc, #604]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a97      	ldr	r2, [pc, #604]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003894:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 8003896:	f001 fb1f 	bl	8004ed8 <HAL_GetTick>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	4b93      	ldr	r3, [pc, #588]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80038a0:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 80038a2:	4b92      	ldr	r3, [pc, #584]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	4a91      	ldr	r2, [pc, #580]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80038ae:	6013      	str	r3, [r2, #0]
			controller_counter = 0;
 80038b0:	4b8d      	ldr	r3, [pc, #564]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	801a      	strh	r2, [r3, #0]


#ifdef UAV1

		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 80038b6:	201d      	movs	r0, #29
 80038b8:	f7ff f95e 	bl	8002b78 <_Z7GyroOkuh>
 80038bc:	4603      	mov	r3, r0
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd f9e4 	bl	8000c8c <__aeabi_i2f>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f7fd f927 	bl	8000b20 <__aeabi_fsub>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4989      	ldr	r1, [pc, #548]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fae0 	bl	8000e9c <__aeabi_fdiv>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	4b87      	ldr	r3, [pc, #540]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80038e2:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 80038e4:	201f      	movs	r0, #31
 80038e6:	f7ff f947 	bl	8002b78 <_Z7GyroOkuh>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd f9cd 	bl	8000c8c <__aeabi_i2f>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b83      	ldr	r3, [pc, #524]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7fd f910 	bl	8000b20 <__aeabi_fsub>
 8003900:	4603      	mov	r3, r0
 8003902:	497e      	ldr	r1, [pc, #504]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fac9 	bl	8000e9c <__aeabi_fdiv>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003910:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8003912:	2021      	movs	r0, #33	; 0x21
 8003914:	f7ff f930 	bl	8002b78 <_Z7GyroOkuh>
 8003918:	4603      	mov	r3, r0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd f9b6 	bl	8000c8c <__aeabi_i2f>
 8003920:	4602      	mov	r2, r0
 8003922:	4b7a      	ldr	r3, [pc, #488]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f7fd f8f9 	bl	8000b20 <__aeabi_fsub>
 800392e:	4603      	mov	r3, r0
 8003930:	4972      	ldr	r1, [pc, #456]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd fab2 	bl	8000e9c <__aeabi_fdiv>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	4b74      	ldr	r3, [pc, #464]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800393e:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8003940:	4b6f      	ldr	r3, [pc, #444]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a73      	ldr	r2, [pc, #460]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003946:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
		  EKF.gyro[1] = -1*gyroY;
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x698>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003952:	4a70      	ldr	r2, [pc, #448]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003954:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.gyro[2] = gyroZ;
 8003958:	4b6d      	ldr	r3, [pc, #436]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6d      	ldr	r2, [pc, #436]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800395e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 8003962:	2032      	movs	r0, #50	; 0x32
 8003964:	f7ff f9e0 	bl	8002d28 <_Z6AccOkuh>
 8003968:	4603      	mov	r3, r0
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd f98e 	bl	8000c8c <__aeabi_i2f>
 8003970:	4603      	mov	r3, r0
 8003972:	4a69      	ldr	r2, [pc, #420]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003974:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 8003976:	2034      	movs	r0, #52	; 0x34
 8003978:	f7ff f9d6 	bl	8002d28 <_Z6AccOkuh>
 800397c:	4603      	mov	r3, r0
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd f984 	bl	8000c8c <__aeabi_i2f>
 8003984:	4603      	mov	r3, r0
 8003986:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003988:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 800398a:	2036      	movs	r0, #54	; 0x36
 800398c:	f7ff f9cc 	bl	8002d28 <_Z6AccOkuh>
 8003990:	4603      	mov	r3, r0
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd f97a 	bl	8000c8c <__aeabi_i2f>
 8003998:	4603      	mov	r3, r0
 800399a:	4a61      	ldr	r2, [pc, #388]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800399c:	6013      	str	r3, [r2, #0]

		  accX = (1+Sx) * accX + bx;
 800399e:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4960      	ldr	r1, [pc, #384]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd f9c5 	bl	8000d34 <__aeabi_fmul>
 80039aa:	4603      	mov	r3, r0
 80039ac:	495e      	ldr	r1, [pc, #376]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd f8b6 	bl	8000b20 <__aeabi_fsub>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b57      	ldr	r3, [pc, #348]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80039ba:	601a      	str	r2, [r3, #0]
		  accY = (1+Sy) * accY + by;
 80039bc:	4b57      	ldr	r3, [pc, #348]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	495a      	ldr	r1, [pc, #360]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd f9b6 	bl	8000d34 <__aeabi_fmul>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4959      	ldr	r1, [pc, #356]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd f8a9 	bl	8000b24 <__addsf3>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b51      	ldr	r3, [pc, #324]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80039d8:	601a      	str	r2, [r3, #0]
		  accZ = (1+Sz) * accZ + bz;
 80039da:	4b51      	ldr	r3, [pc, #324]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4955      	ldr	r1, [pc, #340]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd f9a7 	bl	8000d34 <__aeabi_fmul>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4953      	ldr	r1, [pc, #332]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd f89a 	bl	8000b24 <__addsf3>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80039f6:	601a      	str	r2, [r3, #0]

		  accXc = (float)accX* 0.0078;
 80039f8:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fc fd0b 	bl	8000418 <__aeabi_f2d>
 8003a02:	a335      	add	r3, pc, #212	; (adr r3, 8003ad8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc fd5e 	bl	80004c8 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7fd f830 	bl	8000a78 <__aeabi_d2f>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4a48      	ldr	r2, [pc, #288]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003a1c:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8003a1e:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fc fcf8 	bl	8000418 <__aeabi_f2d>
 8003a28:	a32b      	add	r3, pc, #172	; (adr r3, 8003ad8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fd4b 	bl	80004c8 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7fd f81d 	bl	8000a78 <__aeabi_d2f>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4a3f      	ldr	r2, [pc, #252]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8003a42:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 8003a44:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fce5 	bl	8000418 <__aeabi_f2d>
 8003a4e:	a322      	add	r3, pc, #136	; (adr r3, 8003ad8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fd38 	bl	80004c8 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7fd f80a 	bl	8000a78 <__aeabi_d2f>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4a37      	ldr	r2, [pc, #220]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8003a68:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003a70:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		  EKF.acc[1] = accY;// - AccYh;
 8003a74:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003a7a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		  EKF.acc[2] = accZ;// - AccZh;
 8003a7e:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003a84:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8003a8a:	643b      	str	r3, [r7, #64]	; 0x40
		  float roll_r  = deg2rad*EKF.state.angles[0];
 8003a8c:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003a8e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003a92:	492e      	ldr	r1, [pc, #184]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd f94d 	bl	8000d34 <__aeabi_fmul>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		  float pitch_r = deg2rad*EKF.state.angles[1];
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003aa0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003aa4:	4929      	ldr	r1, [pc, #164]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd f944 	bl	8000d34 <__aeabi_fmul>
 8003aac:	4603      	mov	r3, r0
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38

		  //g body components, Without * g
		  float gx = sin(pitch_r);
 8003ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ab2:	f7fd ffe9 	bl	8001a88 <_ZSt3sinf>
 8003ab6:	6378      	str	r0, [r7, #52]	; 0x34
		  float gy = cos(pitch_r)*sin(roll_r);
 8003ab8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003aba:	f7fd ffd9 	bl	8001a70 <_ZSt3cosf>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ac2:	f7fd ffe1 	bl	8001a88 <_ZSt3sinf>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7fd f932 	bl	8000d34 <__aeabi_fmul>
 8003ad0:	e03e      	b.n	8003b50 <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8003ad2:	bf00      	nop
 8003ad4:	f3af 8000 	nop.w
 8003ad8:	8e8a71de 	.word	0x8e8a71de
 8003adc:	3f7ff2e4 	.word	0x3f7ff2e4
 8003ae0:	2000158c 	.word	0x2000158c
 8003ae4:	2000156c 	.word	0x2000156c
 8003ae8:	20001584 	.word	0x20001584
 8003aec:	200015d0 	.word	0x200015d0
 8003af0:	200015d4 	.word	0x200015d4
 8003af4:	200015d8 	.word	0x200015d8
 8003af8:	200008e8 	.word	0x200008e8
 8003afc:	41660000 	.word	0x41660000
 8003b00:	200008b8 	.word	0x200008b8
 8003b04:	200008ec 	.word	0x200008ec
 8003b08:	200008bc 	.word	0x200008bc
 8003b0c:	200008f0 	.word	0x200008f0
 8003b10:	200008c0 	.word	0x200008c0
 8003b14:	20000b58 	.word	0x20000b58
 8003b18:	200008c4 	.word	0x200008c4
 8003b1c:	200008c8 	.word	0x200008c8
 8003b20:	200008cc 	.word	0x200008cc
 8003b24:	3f7f3b64 	.word	0x3f7f3b64
 8003b28:	3efae148 	.word	0x3efae148
 8003b2c:	3f7e978d 	.word	0x3f7e978d
 8003b30:	414d0a3d 	.word	0x414d0a3d
 8003b34:	3f797f63 	.word	0x3f797f63
 8003b38:	404d1eb8 	.word	0x404d1eb8
 8003b3c:	200008d0 	.word	0x200008d0
 8003b40:	200008d4 	.word	0x200008d4
 8003b44:	200008d8 	.word	0x200008d8
 8003b48:	411cf5c3 	.word	0x411cf5c3
 8003b4c:	3c8e8a72 	.word	0x3c8e8a72
 8003b50:	4603      	mov	r3, r0
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
		  float gz = cos(roll_r)*cos(pitch_r);
 8003b54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b56:	f7fd ff8b 	bl	8001a70 <_ZSt3cosf>
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b5e:	f7fd ff87 	bl	8001a70 <_ZSt3cosf>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4619      	mov	r1, r3
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7fd f8e4 	bl	8000d34 <__aeabi_fmul>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c



		  accXc -= gx;
 8003b70:	4b98      	ldr	r3, [pc, #608]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc ffd2 	bl	8000b20 <__aeabi_fsub>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b94      	ldr	r3, [pc, #592]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003b82:	601a      	str	r2, [r3, #0]
		  accYc -= gy;
 8003b84:	4b94      	ldr	r3, [pc, #592]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc ffc8 	bl	8000b20 <__aeabi_fsub>
 8003b90:	4603      	mov	r3, r0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b90      	ldr	r3, [pc, #576]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003b96:	601a      	str	r2, [r3, #0]
		  accZc -= gz;
 8003b98:	4b90      	ldr	r3, [pc, #576]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc ffbe 	bl	8000b20 <__aeabi_fsub>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b8c      	ldr	r3, [pc, #560]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003baa:	601a      	str	r2, [r3, #0]

		  //Body to Local
		  accXm = accXc*cos(pitch_r) - accZc*cos(roll_r)*sin(pitch_r) - accYc*sin(roll_r)*sin(pitch_r);
 8003bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bae:	f7fd ff5f 	bl	8001a70 <_ZSt3cosf>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4b87      	ldr	r3, [pc, #540]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f7fd f8ba 	bl	8000d34 <__aeabi_fmul>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003bc6:	f7fd ff53 	bl	8001a70 <_ZSt3cosf>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b83      	ldr	r3, [pc, #524]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f7fd f8ae 	bl	8000d34 <__aeabi_fmul>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	461d      	mov	r5, r3
 8003bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bde:	f7fd ff53 	bl	8001a88 <_ZSt3sinf>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4619      	mov	r1, r3
 8003be6:	4628      	mov	r0, r5
 8003be8:	f7fd f8a4 	bl	8000d34 <__aeabi_fmul>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7fc ff95 	bl	8000b20 <__aeabi_fsub>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461c      	mov	r4, r3
 8003bfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003bfc:	f7fd ff44 	bl	8001a88 <_ZSt3sinf>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b75      	ldr	r3, [pc, #468]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7fd f893 	bl	8000d34 <__aeabi_fmul>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	461d      	mov	r5, r3
 8003c12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c14:	f7fd ff38 	bl	8001a88 <_ZSt3sinf>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f7fd f889 	bl	8000d34 <__aeabi_fmul>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4619      	mov	r1, r3
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7fc ff7a 	bl	8000b20 <__aeabi_fsub>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b6b      	ldr	r3, [pc, #428]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003c32:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 8003c34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c36:	f7fd ff1b 	bl	8001a70 <_ZSt3cosf>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b66      	ldr	r3, [pc, #408]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7fd f876 	bl	8000d34 <__aeabi_fmul>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461c      	mov	r4, r3
 8003c4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c4e:	f7fd ff1b 	bl	8001a88 <_ZSt3sinf>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7fd f86a 	bl	8000d34 <__aeabi_fmul>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4619      	mov	r1, r3
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7fc ff5b 	bl	8000b20 <__aeabi_fsub>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003c70:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) + accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 8003c72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c74:	f7fd fefc 	bl	8001a70 <_ZSt3cosf>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f7fd f857 	bl	8000d34 <__aeabi_fmul>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461c      	mov	r4, r3
 8003c8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c8c:	f7fd fef0 	bl	8001a70 <_ZSt3cosf>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4619      	mov	r1, r3
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7fd f84d 	bl	8000d34 <__aeabi_fmul>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461c      	mov	r4, r3
 8003c9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ca0:	f7fd fef2 	bl	8001a88 <_ZSt3sinf>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fd f841 	bl	8000d34 <__aeabi_fmul>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7fc ff34 	bl	8000b24 <__addsf3>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461c      	mov	r4, r3
 8003cc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cc2:	f7fd fed5 	bl	8001a70 <_ZSt3cosf>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7fd f830 	bl	8000d34 <__aeabi_fmul>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cda:	f7fd fed5 	bl	8001a88 <_ZSt3sinf>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f7fd f826 	bl	8000d34 <__aeabi_fmul>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4619      	mov	r1, r3
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7fc ff19 	bl	8000b24 <__addsf3>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b3c      	ldr	r3, [pc, #240]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003cf8:	601a      	str	r2, [r3, #0]


		  accXm *= g; accYm *= g; accZm *= g;
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd f817 	bl	8000d34 <__aeabi_fmul>
 8003d06:	4603      	mov	r3, r0
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f80d 	bl	8000d34 <__aeabi_fmul>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fd f803 	bl	8000d34 <__aeabi_fmul>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003d34:	601a      	str	r2, [r3, #0]

		  EKF.acc_vert = accZm;
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d3c:	f8c2 326c 	str.w	r3, [r2, #620]	; 0x26c

		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 8003d40:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a29      	ldr	r2, [pc, #164]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d46:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		  EKF.accYm = accYm;
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d50:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		  EKF.acc_pos_x = accXm;
 8003d54:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a24      	ldr	r2, [pc, #144]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d5a:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
		  EKF.acc_pos_y = -accYm;
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d66:	4a21      	ldr	r2, [pc, #132]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d68:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

		  EKF.sonar_alt = sonar_alt;
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d72:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
		  EKF.baro_alt = baro_alt;
 8003d76:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d7c:	f8c2 327c 	str.w	r3, [r2, #636]	; 0x27c
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d8a:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc

		  EKF.Run();
 8003d8e:	4817      	ldr	r0, [pc, #92]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d90:	f008 f8e6 	bl	800bf60 <_ZN15Kalman_Filtresi3RunEv>


		  state.angles[0]  	  = EKF.state.angles[0];
 8003d94:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d96:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003d9c:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003da0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003da6:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8003da8:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003daa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003dae:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003db0:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003db4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003db8:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003dba:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003dbe:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003dc4:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003dc8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003dce:	6153      	str	r3, [r2, #20]
 8003dd0:	e016      	b.n	8003e00 <HAL_TIM_PeriodElapsedCallback+0x990>
 8003dd2:	bf00      	nop
 8003dd4:	200008d0 	.word	0x200008d0
 8003dd8:	200008d4 	.word	0x200008d4
 8003ddc:	200008d8 	.word	0x200008d8
 8003de0:	200008dc 	.word	0x200008dc
 8003de4:	200008e0 	.word	0x200008e0
 8003de8:	200008e4 	.word	0x200008e4
 8003dec:	20000b58 	.word	0x20000b58
 8003df0:	20001570 	.word	0x20001570
 8003df4:	2000156c 	.word	0x2000156c
 8003df8:	200015f4 	.word	0x200015f4
 8003dfc:	20000924 	.word	0x20000924


		   checkMode(ch[MOD_CH-1]);
 8003e00:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fb17 	bl	8002438 <_Z9checkModei>

		   controller.z_vel = EKF.vz;
 8003e0a:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8003e0c:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003e10:	4a65      	ldr	r2, [pc, #404]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e12:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		   controller.z = EKF.alt_gnd;
 8003e16:	4b63      	ldr	r3, [pc, #396]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8003e18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8003e1c:	4a62      	ldr	r2, [pc, #392]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e1e:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

		   controller.vx	 = EKF.vx;
 8003e22:	4b60      	ldr	r3, [pc, #384]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8003e24:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003e28:	4a5f      	ldr	r2, [pc, #380]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e2a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
		   controller.x     = EKF.x;
 8003e2e:	4b5d      	ldr	r3, [pc, #372]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8003e30:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003e34:	4a5c      	ldr	r2, [pc, #368]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e36:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

		   controller.vy	 = EKF.vy;
 8003e3a:	4b5a      	ldr	r3, [pc, #360]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8003e3c:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8003e40:	4a59      	ldr	r2, [pc, #356]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e42:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
		   controller.y     = EKF.y;
 8003e46:	4b57      	ldr	r3, [pc, #348]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8003e48:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8003e4c:	4a56      	ldr	r2, [pc, #344]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e4e:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0

		  controller.state = state;
 8003e52:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e54:	4a55      	ldr	r2, [pc, #340]	; (8003fac <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8003e56:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8003e5a:	4615      	mov	r5, r2
 8003e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8003e68:	4b4f      	ldr	r3, [pc, #316]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e6a:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8003e6c:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8003e70:	4615      	mov	r5, r2
 8003e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8003e7e:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc ff02 	bl	8000c8c <__aeabi_i2f>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4a47      	ldr	r2, [pc, #284]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e8c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		  controller.ch2 = ch[1];
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc fef9 	bl	8000c8c <__aeabi_i2f>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003e9e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
		  controller.ch1 = ch[0];
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fef0 	bl	8000c8c <__aeabi_i2f>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003eb0:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
		  controller.Run();
 8003eb4:	483c      	ldr	r0, [pc, #240]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003eb6:	f006 fbb5 	bl	800a624 <_ZN10Controller3RunEv>

		  controller_output[0] = controller.controller_output_pwm[0];
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003ebc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003ec0:	4a3c      	ldr	r2, [pc, #240]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8003ec2:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8003ec4:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003ec6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003eca:	4a3a      	ldr	r2, [pc, #232]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8003ecc:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8003ece:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003ed0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003ed4:	4a37      	ldr	r2, [pc, #220]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8003ed6:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8003ed8:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003eda:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003ede:	4a35      	ldr	r2, [pc, #212]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8003ee0:	60d3      	str	r3, [r2, #12]
#endif
		#ifdef UAV1

		  if(armed) {
 8003ee2:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d031      	beq.n	8003f4e <HAL_TIM_PeriodElapsedCallback+0xade>



			  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f240 52db 	movw	r2, #1499	; 0x5db
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	dc1a      	bgt.n	8003f2c <HAL_TIM_PeriodElapsedCallback+0xabc>
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f240 424c 	movw	r2, #1100	; 0x44c
 8003efe:	4293      	cmp	r3, r2
 8003f00:	dd14      	ble.n	8003f2c <HAL_TIM_PeriodElapsedCallback+0xabc>

				  controller_output_2[0] = controller.controller_output_pwm2[0];
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003f04:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003f08:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f0a:	6013      	str	r3, [r2, #0]
				  controller_output_2[1] = controller.controller_output_pwm2[1];
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003f0e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003f12:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f14:	6053      	str	r3, [r2, #4]
				  controller_output_2[2] = controller.controller_output_pwm2[2];
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003f18:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f1e:	6093      	str	r3, [r2, #8]
				  controller_output_2[3] = controller.controller_output_pwm2[3];
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003f22:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003f26:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f28:	60d3      	str	r3, [r2, #12]
 8003f2a:	e020      	b.n	8003f6e <HAL_TIM_PeriodElapsedCallback+0xafe>

			  }

			  else {
				  controller_output_2[0] = 1000;
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f32:	601a      	str	r2, [r3, #0]
				  controller_output_2[1] = 1000;
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f3a:	605a      	str	r2, [r3, #4]
				  controller_output_2[2] = 1000;
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f42:	609a      	str	r2, [r3, #8]
				  controller_output_2[3] = 1000;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	e00f      	b.n	8003f6e <HAL_TIM_PeriodElapsedCallback+0xafe>
			  }

		  }

		  else {
			  controller_output_2[0] = 1000;
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f54:	601a      	str	r2, [r3, #0]
			  controller_output_2[1] = 1000;
 8003f56:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f5c:	605a      	str	r2, [r3, #4]
			  controller_output_2[2] = 1000;
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f64:	609a      	str	r2, [r3, #8]
			  controller_output_2[3] = 1000;
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8003f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f6c:	60da      	str	r2, [r3, #12]
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003f70:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003f74:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8003f76:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003f7a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8003f80:	6113      	str	r3, [r2, #16]


		  TelemPack();
 8003f82:	f7fe fc63 	bl	800284c <_Z9TelemPackv>
		  CheckFailsafe();
 8003f86:	f7fe fb4d 	bl	8002624 <_Z13CheckFailsafev>
		  CheckSwarm();
 8003f8a:	f7fe fb0b 	bl	80025a4 <_Z10CheckSwarmv>
		  PWMYaz();
 8003f8e:	f7ff f97b 	bl	8003288 <_Z6PWMYazv>
		  SwitchMag();
 8003f92:	f7fe faa1 	bl	80024d8 <_Z9SwitchMagv>

		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 8003f96:	bf00      	nop
 8003f98:	3754      	adds	r7, #84	; 0x54
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20001500 	.word	0x20001500
 8003fa4:	20000b58 	.word	0x20000b58
 8003fa8:	20000ea0 	.word	0x20000ea0
 8003fac:	20000924 	.word	0x20000924
 8003fb0:	20000900 	.word	0x20000900
 8003fb4:	200014d0 	.word	0x200014d0
 8003fb8:	20001569 	.word	0x20001569
 8003fbc:	200014e0 	.word	0x200014e0

08003fc0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a55      	ldr	r2, [pc, #340]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	f040 80a2 	bne.w	8004116 <HAL_TIM_IC_CaptureCallback+0x156>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7f1b      	ldrb	r3, [r3, #28]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	f040 809d 	bne.w	8004116 <HAL_TIM_IC_CaptureCallback+0x156>
	{
				IC_Val1 = IC_Val2;
 8003fdc:	4b51      	ldr	r3, [pc, #324]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a51      	ldr	r2, [pc, #324]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003fe2:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8003fe4:	2108      	movs	r1, #8
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f004 fda2 	bl	8008b30 <HAL_TIM_ReadCapturedValue>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003ff2:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8003ff4:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004000:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0fdb      	lsrs	r3, r3, #31
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004016:	33ff      	adds	r3, #255	; 0xff
 8004018:	4a44      	ldr	r2, [pc, #272]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 800401a:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 800401c:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004024:	db06      	blt.n	8004034 <HAL_TIM_IC_CaptureCallback+0x74>
 8004026:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800402e:	dc01      	bgt.n	8004034 <HAL_TIM_IC_CaptureCallback+0x74>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_TIM_IC_CaptureCallback+0x76>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01c      	beq.n	8004074 <HAL_TIM_IC_CaptureCallback+0xb4>
					#ifdef UAV1
						ch_[i] = ch[i];
 800403a:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b21b      	sxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b21b      	sxth	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x174>)
 800404c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004050:	4a39      	ldr	r2, [pc, #228]	; (8004138 <HAL_TIM_IC_CaptureCallback+0x178>)
 8004052:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b21b      	sxth	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	4b33      	ldr	r3, [pc, #204]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a34      	ldr	r2, [pc, #208]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x174>)
 8004064:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 8004068:	4b34      	ldr	r3, [pc, #208]	; (800413c <HAL_TIM_IC_CaptureCallback+0x17c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	4a33      	ldr	r2, [pc, #204]	; (800413c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e015      	b.n	80040a0 <HAL_TIM_IC_CaptureCallback+0xe0>
						ch_count++;
					#endif

					}

					else if(Diff > CH0) {
 8004074:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	bfcc      	ite	gt
 8004080:	2301      	movgt	r3, #1
 8004082:	2300      	movle	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 800408a:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 800408c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004090:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 8004092:	4b26      	ldr	r3, [pc, #152]	; (800412c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a27      	ldr	r2, [pc, #156]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x174>)
 8004098:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 800409a:	4b29      	ldr	r3, [pc, #164]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x180>)
 800409c:	2201      	movs	r2, #1
 800409e:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 80040a0:	4b24      	ldr	r3, [pc, #144]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x174>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fdda 	bl	8002c60 <_Z7pwm2angt>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4a25      	ldr	r2, [pc, #148]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x184>)
 80040b0:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x174>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fdd1 	bl	8002c60 <_Z7pwm2angt>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x184>)
 80040c2:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 80040c4:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x184>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x174>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fe00 	bl	8002cd8 <_Z8pwm2ratet>
 80040d8:	4603      	mov	r3, r0
 80040da:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x184>)
 80040dc:	6153      	str	r3, [r2, #20]

				i++;
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	b21a      	sxth	r2, r3
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 80040ee:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b21b      	sxth	r3, r3
 80040f6:	4619      	mov	r1, r3
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_TIM_IC_CaptureCallback+0x188>)
 80040fa:	fb83 2301 	smull	r2, r3, r3, r1
 80040fe:	105a      	asrs	r2, r3, #1
 8004100:	17cb      	asrs	r3, r1, #31
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	1aca      	subs	r2, r1, r3
 8004110:	b212      	sxth	r2, r2
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004114:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20001724 	.word	0x20001724
 8004124:	200014f0 	.word	0x200014f0
 8004128:	200014f4 	.word	0x200014f4
 800412c:	200014f8 	.word	0x200014f8
 8004130:	200014fc 	.word	0x200014fc
 8004134:	20001500 	.word	0x20001500
 8004138:	2000152c 	.word	0x2000152c
 800413c:	200015cc 	.word	0x200015cc
 8004140:	20001558 	.word	0x20001558
 8004144:	20000900 	.word	0x20000900
 8004148:	2e8ba2e9 	.word	0x2e8ba2e9

0800414c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004150:	b672      	cpsid	i
}
 8004152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004154:	e7fe      	b.n	8004154 <Error_Handler+0x8>
	...

08004158 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10a      	bne.n	800417e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800416e:	4293      	cmp	r3, r2
 8004170:	d105      	bne.n	800417e <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 8004172:	480c      	ldr	r0, [pc, #48]	; (80041a4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004174:	f006 ff60 	bl	800b038 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 8004178:	480b      	ldr	r0, [pc, #44]	; (80041a8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800417a:	f006 f959 	bl	800a430 <_ZN10ControllerC1Ev>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800418a:	4293      	cmp	r3, r2
 800418c:	d105      	bne.n	800419a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800418e:	4806      	ldr	r0, [pc, #24]	; (80041a8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004190:	f006 ff14 	bl	800afbc <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 8004194:	4803      	ldr	r0, [pc, #12]	; (80041a4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004196:	f007 ffd7 	bl	800c148 <_ZN15Kalman_FiltresiD1Ev>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000b58 	.word	0x20000b58
 80041a8:	20000ea0 	.word	0x20000ea0

080041ac <_GLOBAL__sub_I_gyroX>:
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041b4:	2001      	movs	r0, #1
 80041b6:	f7ff ffcf 	bl	8004158 <_Z41__static_initialization_and_destruction_0ii>
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_GLOBAL__sub_D_gyroX>:
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
 80041c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041c4:	2000      	movs	r0, #0
 80041c6:	f7ff ffc7 	bl	8004158 <_Z41__static_initialization_and_destruction_0ii>
 80041ca:	bd80      	pop	{r7, pc}

080041cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <MX_SPI1_Init+0x64>)
 80041d2:	4a18      	ldr	r2, [pc, #96]	; (8004234 <MX_SPI1_Init+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80041d6:	4b16      	ldr	r3, [pc, #88]	; (8004230 <MX_SPI1_Init+0x64>)
 80041d8:	2200      	movs	r2, #0
 80041da:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <MX_SPI1_Init+0x64>)
 80041de:	2200      	movs	r2, #0
 80041e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <MX_SPI1_Init+0x64>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <MX_SPI1_Init+0x64>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <MX_SPI1_Init+0x64>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <MX_SPI1_Init+0x64>)
 80041f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <MX_SPI1_Init+0x64>)
 80041fe:	2220      	movs	r2, #32
 8004200:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <MX_SPI1_Init+0x64>)
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <MX_SPI1_Init+0x64>)
 800420a:	2200      	movs	r2, #0
 800420c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <MX_SPI1_Init+0x64>)
 8004210:	2200      	movs	r2, #0
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <MX_SPI1_Init+0x64>)
 8004216:	220a      	movs	r2, #10
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800421a:	4805      	ldr	r0, [pc, #20]	; (8004230 <MX_SPI1_Init+0x64>)
 800421c:	f003 fdaa 	bl	8007d74 <HAL_SPI_Init>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8004226:	f7ff ff91 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20001684 	.word	0x20001684
 8004234:	40013000 	.word	0x40013000

08004238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0310 	add.w	r3, r7, #16
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <HAL_SPI_MspInit+0x88>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d12f      	bne.n	80042b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_SPI_MspInit+0x8c>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <HAL_SPI_MspInit+0x8c>)
 800425e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004262:	6193      	str	r3, [r2, #24]
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_SPI_MspInit+0x8c>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_SPI_MspInit+0x8c>)
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <HAL_SPI_MspInit+0x8c>)
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	6193      	str	r3, [r2, #24]
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_SPI_MspInit+0x8c>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004288:	23a0      	movs	r3, #160	; 0xa0
 800428a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	2300      	movs	r3, #0
 8004292:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	4619      	mov	r1, r3
 800429a:	480b      	ldr	r0, [pc, #44]	; (80042c8 <HAL_SPI_MspInit+0x90>)
 800429c:	f001 fa4a 	bl	8005734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042a0:	2340      	movs	r3, #64	; 0x40
 80042a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2302      	movs	r3, #2
 80042a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042a8:	2303      	movs	r3, #3
 80042aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	4619      	mov	r1, r3
 80042b2:	4805      	ldr	r0, [pc, #20]	; (80042c8 <HAL_SPI_MspInit+0x90>)
 80042b4:	f001 fa3e 	bl	8005734 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80042b8:	bf00      	nop
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40013000 	.word	0x40013000
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40010800 	.word	0x40010800

080042cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <HAL_MspInit+0x5c>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <HAL_MspInit+0x5c>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6193      	str	r3, [r2, #24]
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_MspInit+0x5c>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_MspInit+0x5c>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_MspInit+0x5c>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	61d3      	str	r3, [r2, #28]
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_MspInit+0x5c>)
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_MspInit+0x60>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <HAL_MspInit+0x60>)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	40021000 	.word	0x40021000
 800432c:	40010000 	.word	0x40010000

08004330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004334:	e7fe      	b.n	8004334 <NMI_Handler+0x4>
	...

08004338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HardFault_Handler+0x30>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004344:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HardFault_Handler+0x30>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HardFault_Handler+0x30>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800435a:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HardFault_Handler+0x30>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004364:	e7fe      	b.n	8004364 <HardFault_Handler+0x2c>
 8004366:	bf00      	nop
 8004368:	2000176c 	.word	0x2000176c

0800436c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004370:	e7fe      	b.n	8004370 <MemManage_Handler+0x4>

08004372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004376:	e7fe      	b.n	8004376 <BusFault_Handler+0x4>

08004378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800437c:	e7fe      	b.n	800437c <UsageFault_Handler+0x4>

0800437e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
	...

080043a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <SysTick_Handler+0x24>)
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d006      	beq.n	80043c0 <SysTick_Handler+0x1c>
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <SysTick_Handler+0x24>)
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <SysTick_Handler+0x24>)
 80043be:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043c0:	f000 fd78 	bl	8004eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	2000162c 	.word	0x2000162c

080043cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <DMA1_Channel5_IRQHandler+0x10>)
 80043d2:	f001 f87b 	bl	80054cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20001880 	.word	0x20001880

080043e0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <DMA1_Channel6_IRQHandler+0x10>)
 80043e6:	f001 f871 	bl	80054cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200017fc 	.word	0x200017fc

080043f4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80043f8:	4802      	ldr	r0, [pc, #8]	; (8004404 <DMA1_Channel7_IRQHandler+0x10>)
 80043fa:	f001 f867 	bl	80054cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200018c4 	.word	0x200018c4

08004408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <TIM2_IRQHandler+0x10>)
 800440e:	f004 f871 	bl	80084f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200017b4 	.word	0x200017b4

0800441c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <TIM3_IRQHandler+0x10>)
 8004422:	f004 f867 	bl	80084f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20001724 	.word	0x20001724

08004430 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004434:	4802      	ldr	r0, [pc, #8]	; (8004440 <USART2_IRQHandler+0x10>)
 8004436:	f005 fbab 	bl	8009b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20001948 	.word	0x20001948

08004444 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <USART3_IRQHandler+0x14>)
 800444a:	f7fc ff91 	bl	8001370 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800444e:	4802      	ldr	r0, [pc, #8]	; (8004458 <USART3_IRQHandler+0x14>)
 8004450:	f005 fb9e 	bl	8009b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004454:	bf00      	nop
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20001840 	.word	0x20001840

0800445c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b092      	sub	sp, #72	; 0x48
 800446c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800446e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
 8004488:	615a      	str	r2, [r3, #20]
 800448a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	2220      	movs	r2, #32
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f00a fc68 	bl	800ed68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004498:	4b45      	ldr	r3, [pc, #276]	; (80045b0 <MX_TIM1_Init+0x148>)
 800449a:	4a46      	ldr	r2, [pc, #280]	; (80045b4 <MX_TIM1_Init+0x14c>)
 800449c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800449e:	4b44      	ldr	r3, [pc, #272]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044a0:	2247      	movs	r2, #71	; 0x47
 80044a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a4:	4b42      	ldr	r3, [pc, #264]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80044b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044b8:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044be:	4b3c      	ldr	r3, [pc, #240]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044c4:	483a      	ldr	r0, [pc, #232]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044c6:	f003 fdc5 	bl	8008054 <HAL_TIM_PWM_Init>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80044d0:	f7ff fe3c 	bl	800414c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d8:	2300      	movs	r3, #0
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044e0:	4619      	mov	r1, r3
 80044e2:	4833      	ldr	r0, [pc, #204]	; (80045b0 <MX_TIM1_Init+0x148>)
 80044e4:	f004 ffd4 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80044ee:	f7ff fe2d 	bl	800414c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044f2:	2360      	movs	r3, #96	; 0x60
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044fe:	2300      	movs	r3, #0
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800450e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004512:	2200      	movs	r2, #0
 8004514:	4619      	mov	r1, r3
 8004516:	4826      	ldr	r0, [pc, #152]	; (80045b0 <MX_TIM1_Init+0x148>)
 8004518:	f004 f988 	bl	800882c <HAL_TIM_PWM_ConfigChannel>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004522:	f7ff fe13 	bl	800414c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452a:	2204      	movs	r2, #4
 800452c:	4619      	mov	r1, r3
 800452e:	4820      	ldr	r0, [pc, #128]	; (80045b0 <MX_TIM1_Init+0x148>)
 8004530:	f004 f97c 	bl	800882c <HAL_TIM_PWM_ConfigChannel>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800453a:	f7ff fe07 	bl	800414c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800453e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004542:	2208      	movs	r2, #8
 8004544:	4619      	mov	r1, r3
 8004546:	481a      	ldr	r0, [pc, #104]	; (80045b0 <MX_TIM1_Init+0x148>)
 8004548:	f004 f970 	bl	800882c <HAL_TIM_PWM_ConfigChannel>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8004552:	f7ff fdfb 	bl	800414c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455a:	220c      	movs	r2, #12
 800455c:	4619      	mov	r1, r3
 800455e:	4814      	ldr	r0, [pc, #80]	; (80045b0 <MX_TIM1_Init+0x148>)
 8004560:	f004 f964 	bl	800882c <HAL_TIM_PWM_ConfigChannel>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800456a:	f7ff fdef 	bl	800414c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004586:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4807      	ldr	r0, [pc, #28]	; (80045b0 <MX_TIM1_Init+0x148>)
 8004592:	f004 ffdb 	bl	800954c <HAL_TIMEx_ConfigBreakDeadTime>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800459c:	f7ff fdd6 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80045a0:	4803      	ldr	r0, [pc, #12]	; (80045b0 <MX_TIM1_Init+0x148>)
 80045a2:	f000 f9a5 	bl	80048f0 <HAL_TIM_MspPostInit>

}
 80045a6:	bf00      	nop
 80045a8:	3748      	adds	r7, #72	; 0x48
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000176c 	.word	0x2000176c
 80045b4:	40012c00 	.word	0x40012c00

080045b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	605a      	str	r2, [r3, #4]
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045cc:	463b      	mov	r3, r7
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <MX_TIM2_Init+0x94>)
 80045d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <MX_TIM2_Init+0x94>)
 80045de:	2247      	movs	r2, #71	; 0x47
 80045e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <MX_TIM2_Init+0x94>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <MX_TIM2_Init+0x94>)
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f0:	4b16      	ldr	r3, [pc, #88]	; (800464c <MX_TIM2_Init+0x94>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <MX_TIM2_Init+0x94>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045fc:	4813      	ldr	r0, [pc, #76]	; (800464c <MX_TIM2_Init+0x94>)
 80045fe:	f003 fc3d 	bl	8007e7c <HAL_TIM_Base_Init>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004608:	f7ff fda0 	bl	800414c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800460c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004612:	f107 0308 	add.w	r3, r7, #8
 8004616:	4619      	mov	r1, r3
 8004618:	480c      	ldr	r0, [pc, #48]	; (800464c <MX_TIM2_Init+0x94>)
 800461a:	f004 f9c5 	bl	80089a8 <HAL_TIM_ConfigClockSource>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004624:	f7ff fd92 	bl	800414c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004628:	2300      	movs	r3, #0
 800462a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800462c:	2300      	movs	r3, #0
 800462e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004630:	463b      	mov	r3, r7
 8004632:	4619      	mov	r1, r3
 8004634:	4805      	ldr	r0, [pc, #20]	; (800464c <MX_TIM2_Init+0x94>)
 8004636:	f004 ff2b 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004640:	f7ff fd84 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004644:	bf00      	nop
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200017b4 	.word	0x200017b4

08004650 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004656:	f107 0318 	add.w	r3, r7, #24
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	609a      	str	r2, [r3, #8]
 8004662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800466e:	463b      	mov	r3, r7
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <MX_TIM3_Init+0xd8>)
 800467c:	4a2b      	ldr	r2, [pc, #172]	; (800472c <MX_TIM3_Init+0xdc>)
 800467e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <MX_TIM3_Init+0xd8>)
 8004682:	2247      	movs	r2, #71	; 0x47
 8004684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <MX_TIM3_Init+0xd8>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800468c:	4b26      	ldr	r3, [pc, #152]	; (8004728 <MX_TIM3_Init+0xd8>)
 800468e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <MX_TIM3_Init+0xd8>)
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <MX_TIM3_Init+0xd8>)
 800469c:	2200      	movs	r2, #0
 800469e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046a0:	4821      	ldr	r0, [pc, #132]	; (8004728 <MX_TIM3_Init+0xd8>)
 80046a2:	f003 fbeb 	bl	8007e7c <HAL_TIM_Base_Init>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80046ac:	f7ff fd4e 	bl	800414c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046b6:	f107 0318 	add.w	r3, r7, #24
 80046ba:	4619      	mov	r1, r3
 80046bc:	481a      	ldr	r0, [pc, #104]	; (8004728 <MX_TIM3_Init+0xd8>)
 80046be:	f004 f973 	bl	80089a8 <HAL_TIM_ConfigClockSource>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80046c8:	f7ff fd40 	bl	800414c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80046cc:	4816      	ldr	r0, [pc, #88]	; (8004728 <MX_TIM3_Init+0xd8>)
 80046ce:	f003 fdb3 	bl	8008238 <HAL_TIM_IC_Init>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80046d8:	f7ff fd38 	bl	800414c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046e4:	f107 0310 	add.w	r3, r7, #16
 80046e8:	4619      	mov	r1, r3
 80046ea:	480f      	ldr	r0, [pc, #60]	; (8004728 <MX_TIM3_Init+0xd8>)
 80046ec:	f004 fed0 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80046f6:	f7ff fd29 	bl	800414c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80046fa:	2300      	movs	r3, #0
 80046fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80046fe:	2301      	movs	r3, #1
 8004700:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800470a:	463b      	mov	r3, r7
 800470c:	2208      	movs	r2, #8
 800470e:	4619      	mov	r1, r3
 8004710:	4805      	ldr	r0, [pc, #20]	; (8004728 <MX_TIM3_Init+0xd8>)
 8004712:	f003 fff7 	bl	8008704 <HAL_TIM_IC_ConfigChannel>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800471c:	f7ff fd16 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004720:	bf00      	nop
 8004722:	3728      	adds	r7, #40	; 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20001724 	.word	0x20001724
 800472c:	40000400 	.word	0x40000400

08004730 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004744:	463b      	mov	r3, r7
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <MX_TIM4_Init+0x94>)
 800474e:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <MX_TIM4_Init+0x98>)
 8004750:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <MX_TIM4_Init+0x94>)
 8004754:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004758:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <MX_TIM4_Init+0x94>)
 800475c:	2200      	movs	r2, #0
 800475e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8004760:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <MX_TIM4_Init+0x94>)
 8004762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004766:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004768:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <MX_TIM4_Init+0x94>)
 800476a:	2200      	movs	r2, #0
 800476c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <MX_TIM4_Init+0x94>)
 8004770:	2200      	movs	r2, #0
 8004772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004774:	4813      	ldr	r0, [pc, #76]	; (80047c4 <MX_TIM4_Init+0x94>)
 8004776:	f003 fb81 	bl	8007e7c <HAL_TIM_Base_Init>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004780:	f7ff fce4 	bl	800414c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4619      	mov	r1, r3
 8004790:	480c      	ldr	r0, [pc, #48]	; (80047c4 <MX_TIM4_Init+0x94>)
 8004792:	f004 f909 	bl	80089a8 <HAL_TIM_ConfigClockSource>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800479c:	f7ff fcd6 	bl	800414c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80047a8:	463b      	mov	r3, r7
 80047aa:	4619      	mov	r1, r3
 80047ac:	4805      	ldr	r0, [pc, #20]	; (80047c4 <MX_TIM4_Init+0x94>)
 80047ae:	f004 fe6f 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80047b8:	f7ff fcc8 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80047bc:	bf00      	nop
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200016dc 	.word	0x200016dc
 80047c8:	40000800 	.word	0x40000800

080047cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <HAL_TIM_PWM_MspInit+0x34>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10b      	bne.n	80047f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_TIM_PWM_MspInit+0x38>)
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <HAL_TIM_PWM_MspInit+0x38>)
 80047e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047e8:	6193      	str	r3, [r2, #24]
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_TIM_PWM_MspInit+0x38>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40021000 	.word	0x40021000

08004808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004810:	f107 0318 	add.w	r3, r7, #24
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d114      	bne.n	8004852 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004828:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	61d3      	str	r3, [r2, #28]
 8004834:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004840:	2200      	movs	r2, #0
 8004842:	2101      	movs	r1, #1
 8004844:	201c      	movs	r0, #28
 8004846:	f000 fc70 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800484a:	201c      	movs	r0, #28
 800484c:	f000 fc89 	bl	8005162 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004850:	e042      	b.n	80048d8 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <HAL_TIM_Base_MspInit+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d12c      	bne.n	80048b6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800485c:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	61d3      	str	r3, [r2, #28]
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 800487a:	f043 0308 	orr.w	r3, r3, #8
 800487e:	6193      	str	r3, [r2, #24]
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800488c:	2301      	movs	r3, #1
 800488e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	2300      	movs	r3, #0
 8004896:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004898:	f107 0318 	add.w	r3, r7, #24
 800489c:	4619      	mov	r1, r3
 800489e:	4812      	ldr	r0, [pc, #72]	; (80048e8 <HAL_TIM_Base_MspInit+0xe0>)
 80048a0:	f000 ff48 	bl	8005734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048a4:	2200      	movs	r2, #0
 80048a6:	2100      	movs	r1, #0
 80048a8:	201d      	movs	r0, #29
 80048aa:	f000 fc3e 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048ae:	201d      	movs	r0, #29
 80048b0:	f000 fc57 	bl	8005162 <HAL_NVIC_EnableIRQ>
}
 80048b4:	e010      	b.n	80048d8 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <HAL_TIM_Base_MspInit+0xe4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10b      	bne.n	80048d8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 80048c6:	f043 0304 	orr.w	r3, r3, #4
 80048ca:	61d3      	str	r3, [r2, #28]
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <HAL_TIM_Base_MspInit+0xd8>)
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
}
 80048d8:	bf00      	nop
 80048da:	3728      	adds	r7, #40	; 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40010c00 	.word	0x40010c00
 80048ec:	40000800 	.word	0x40000800

080048f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	f107 0310 	add.w	r3, r7, #16
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <HAL_TIM_MspPostInit+0x8c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d131      	bne.n	8004974 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <HAL_TIM_MspPostInit+0x90>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_TIM_MspPostInit+0x90>)
 8004916:	f043 0308 	orr.w	r3, r3, #8
 800491a:	6193      	str	r3, [r2, #24]
 800491c:	4b18      	ldr	r3, [pc, #96]	; (8004980 <HAL_TIM_MspPostInit+0x90>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004928:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_TIM_MspPostInit+0x90>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <HAL_TIM_MspPostInit+0x90>)
 800492e:	f043 0304 	orr.w	r3, r3, #4
 8004932:	6193      	str	r3, [r2, #24]
 8004934:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_TIM_MspPostInit+0x90>)
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004940:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004946:	2302      	movs	r3, #2
 8004948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494a:	2302      	movs	r3, #2
 800494c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494e:	f107 0310 	add.w	r3, r7, #16
 8004952:	4619      	mov	r1, r3
 8004954:	480b      	ldr	r0, [pc, #44]	; (8004984 <HAL_TIM_MspPostInit+0x94>)
 8004956:	f000 feed 	bl	8005734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800495a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800495e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004960:	2302      	movs	r3, #2
 8004962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004964:	2302      	movs	r3, #2
 8004966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004968:	f107 0310 	add.w	r3, r7, #16
 800496c:	4619      	mov	r1, r3
 800496e:	4806      	ldr	r0, [pc, #24]	; (8004988 <HAL_TIM_MspPostInit+0x98>)
 8004970:	f000 fee0 	bl	8005734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004974:	bf00      	nop
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40021000 	.word	0x40021000
 8004984:	40010c00 	.word	0x40010c00
 8004988:	40010800 	.word	0x40010800

0800498c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <MX_USART1_UART_Init+0x50>)
 8004994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 8004998:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800499c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049b2:	220c      	movs	r2, #12
 80049b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049c2:	4805      	ldr	r0, [pc, #20]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049c4:	f004 fe49 	bl	800965a <HAL_UART_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049ce:	f7ff fbbd 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20001908 	.word	0x20001908
 80049dc:	40013800 	.word	0x40013800

080049e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049e6:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <MX_USART2_UART_Init+0x50>)
 80049e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049ec:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80049f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049f2:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a06:	220c      	movs	r2, #12
 8004a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a16:	4805      	ldr	r0, [pc, #20]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a18:	f004 fe1f 	bl	800965a <HAL_UART_Init>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a22:	f7ff fb93 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20001948 	.word	0x20001948
 8004a30:	40004400 	.word	0x40004400

08004a34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a3a:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <MX_USART3_UART_Init+0x50>)
 8004a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a5a:	220c      	movs	r2, #12
 8004a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a6a:	4805      	ldr	r0, [pc, #20]	; (8004a80 <MX_USART3_UART_Init+0x4c>)
 8004a6c:	f004 fdf5 	bl	800965a <HAL_UART_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a76:	f7ff fb69 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20001840 	.word	0x20001840
 8004a84:	40004800 	.word	0x40004800

08004a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08c      	sub	sp, #48	; 0x30
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a90:	f107 0320 	add.w	r3, r7, #32
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a95      	ldr	r2, [pc, #596]	; (8004cf8 <HAL_UART_MspInit+0x270>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d159      	bne.n	8004b5c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004aa8:	4b94      	ldr	r3, [pc, #592]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	4a93      	ldr	r2, [pc, #588]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab2:	6193      	str	r3, [r2, #24]
 8004ab4:	4b91      	ldr	r3, [pc, #580]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac0:	4b8e      	ldr	r3, [pc, #568]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4a8d      	ldr	r2, [pc, #564]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004ac6:	f043 0304 	orr.w	r3, r3, #4
 8004aca:	6193      	str	r3, [r2, #24]
 8004acc:	4b8b      	ldr	r3, [pc, #556]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae6:	f107 0320 	add.w	r3, r7, #32
 8004aea:	4619      	mov	r1, r3
 8004aec:	4884      	ldr	r0, [pc, #528]	; (8004d00 <HAL_UART_MspInit+0x278>)
 8004aee:	f000 fe21 	bl	8005734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b00:	f107 0320 	add.w	r3, r7, #32
 8004b04:	4619      	mov	r1, r3
 8004b06:	487e      	ldr	r0, [pc, #504]	; (8004d00 <HAL_UART_MspInit+0x278>)
 8004b08:	f000 fe14 	bl	8005734 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004b0c:	4b7d      	ldr	r3, [pc, #500]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b0e:	4a7e      	ldr	r2, [pc, #504]	; (8004d08 <HAL_UART_MspInit+0x280>)
 8004b10:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b12:	4b7c      	ldr	r3, [pc, #496]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b18:	4b7a      	ldr	r3, [pc, #488]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b1e:	4b79      	ldr	r3, [pc, #484]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b24:	4b77      	ldr	r3, [pc, #476]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b2a:	4b76      	ldr	r3, [pc, #472]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b30:	4b74      	ldr	r3, [pc, #464]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b32:	2220      	movs	r2, #32
 8004b34:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b36:	4b73      	ldr	r3, [pc, #460]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004b3e:	4871      	ldr	r0, [pc, #452]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b40:	f000 fb38 	bl	80051b4 <HAL_DMA_Init>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004b4a:	f7ff faff 	bl	800414c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a6c      	ldr	r2, [pc, #432]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
 8004b54:	4a6b      	ldr	r2, [pc, #428]	; (8004d04 <HAL_UART_MspInit+0x27c>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004b5a:	e0c9      	b.n	8004cf0 <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a6a      	ldr	r2, [pc, #424]	; (8004d0c <HAL_UART_MspInit+0x284>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f040 8085 	bne.w	8004c72 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b68:	4b64      	ldr	r3, [pc, #400]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4a63      	ldr	r2, [pc, #396]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	61d3      	str	r3, [r2, #28]
 8004b74:	4b61      	ldr	r3, [pc, #388]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b80:	4b5e      	ldr	r3, [pc, #376]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	4a5d      	ldr	r2, [pc, #372]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004b86:	f043 0304 	orr.w	r3, r3, #4
 8004b8a:	6193      	str	r3, [r2, #24]
 8004b8c:	4b5b      	ldr	r3, [pc, #364]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b98:	2304      	movs	r3, #4
 8004b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	f107 0320 	add.w	r3, r7, #32
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4855      	ldr	r0, [pc, #340]	; (8004d00 <HAL_UART_MspInit+0x278>)
 8004bac:	f000 fdc2 	bl	8005734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bbc:	f107 0320 	add.w	r3, r7, #32
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	484f      	ldr	r0, [pc, #316]	; (8004d00 <HAL_UART_MspInit+0x278>)
 8004bc4:	f000 fdb6 	bl	8005734 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004bc8:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004bca:	4a52      	ldr	r2, [pc, #328]	; (8004d14 <HAL_UART_MspInit+0x28c>)
 8004bcc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bce:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bd4:	4b4e      	ldr	r3, [pc, #312]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bda:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004bdc:	2280      	movs	r2, #128	; 0x80
 8004bde:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004be6:	4b4a      	ldr	r3, [pc, #296]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004bec:	4b48      	ldr	r3, [pc, #288]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004bee:	2220      	movs	r2, #32
 8004bf0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004bf8:	4845      	ldr	r0, [pc, #276]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004bfa:	f000 fadb 	bl	80051b4 <HAL_DMA_Init>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8004c04:	f7ff faa2 	bl	800414c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a41      	ldr	r2, [pc, #260]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c0e:	4a40      	ldr	r2, [pc, #256]	; (8004d10 <HAL_UART_MspInit+0x288>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004c14:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c16:	4a41      	ldr	r2, [pc, #260]	; (8004d1c <HAL_UART_MspInit+0x294>)
 8004c18:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c20:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c26:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c2c:	4b3a      	ldr	r3, [pc, #232]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c32:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004c38:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c44:	4834      	ldr	r0, [pc, #208]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c46:	f000 fab5 	bl	80051b4 <HAL_DMA_Init>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8004c50:	f7ff fa7c 	bl	800414c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
 8004c5a:	4a2f      	ldr	r2, [pc, #188]	; (8004d18 <HAL_UART_MspInit+0x290>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2026      	movs	r0, #38	; 0x26
 8004c66:	f000 fa60 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c6a:	2026      	movs	r0, #38	; 0x26
 8004c6c:	f000 fa79 	bl	8005162 <HAL_NVIC_EnableIRQ>
}
 8004c70:	e03e      	b.n	8004cf0 <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART3)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <HAL_UART_MspInit+0x298>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d139      	bne.n	8004cf0 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c7c:	4b1f      	ldr	r3, [pc, #124]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c86:	61d3      	str	r3, [r2, #28]
 8004c88:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004c9a:	f043 0308 	orr.w	r3, r3, #8
 8004c9e:	6193      	str	r3, [r2, #24]
 8004ca0:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <HAL_UART_MspInit+0x274>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cba:	f107 0320 	add.w	r3, r7, #32
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4818      	ldr	r0, [pc, #96]	; (8004d24 <HAL_UART_MspInit+0x29c>)
 8004cc2:	f000 fd37 	bl	8005734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd4:	f107 0320 	add.w	r3, r7, #32
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4812      	ldr	r0, [pc, #72]	; (8004d24 <HAL_UART_MspInit+0x29c>)
 8004cdc:	f000 fd2a 	bl	8005734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2027      	movs	r0, #39	; 0x27
 8004ce6:	f000 fa20 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004cea:	2027      	movs	r0, #39	; 0x27
 8004cec:	f000 fa39 	bl	8005162 <HAL_NVIC_EnableIRQ>
}
 8004cf0:	bf00      	nop
 8004cf2:	3730      	adds	r7, #48	; 0x30
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40013800 	.word	0x40013800
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40010800 	.word	0x40010800
 8004d04:	20001880 	.word	0x20001880
 8004d08:	40020058 	.word	0x40020058
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	200017fc 	.word	0x200017fc
 8004d14:	4002006c 	.word	0x4002006c
 8004d18:	200018c4 	.word	0x200018c4
 8004d1c:	40020080 	.word	0x40020080
 8004d20:	40004800 	.word	0x40004800
 8004d24:	40010c00 	.word	0x40010c00

08004d28 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <HAL_UART_MspDeInit+0x9c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d110      	bne.n	8004d5c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_UART_MspDeInit+0xa0>)
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	4a22      	ldr	r2, [pc, #136]	; (8004dc8 <HAL_UART_MspDeInit+0xa0>)
 8004d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d44:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004d46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d4a:	4820      	ldr	r0, [pc, #128]	; (8004dcc <HAL_UART_MspDeInit+0xa4>)
 8004d4c:	f000 fe76 	bl	8005a3c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa87 	bl	8005268 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8004d5a:	e02f      	b.n	8004dbc <HAL_UART_MspDeInit+0x94>
  else if(uartHandle->Instance==USART2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <HAL_UART_MspDeInit+0xa8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d117      	bne.n	8004d96 <HAL_UART_MspDeInit+0x6e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004d66:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <HAL_UART_MspDeInit+0xa0>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <HAL_UART_MspDeInit+0xa0>)
 8004d6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d70:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004d72:	210c      	movs	r1, #12
 8004d74:	4815      	ldr	r0, [pc, #84]	; (8004dcc <HAL_UART_MspDeInit+0xa4>)
 8004d76:	f000 fe61 	bl	8005a3c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fa72 	bl	8005268 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fa6d 	bl	8005268 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004d8e:	2026      	movs	r0, #38	; 0x26
 8004d90:	f000 f9f5 	bl	800517e <HAL_NVIC_DisableIRQ>
}
 8004d94:	e012      	b.n	8004dbc <HAL_UART_MspDeInit+0x94>
  else if(uartHandle->Instance==USART3)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <HAL_UART_MspDeInit+0xac>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10d      	bne.n	8004dbc <HAL_UART_MspDeInit+0x94>
    __HAL_RCC_USART3_CLK_DISABLE();
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <HAL_UART_MspDeInit+0xa0>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <HAL_UART_MspDeInit+0xa0>)
 8004da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004daa:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8004dac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <HAL_UART_MspDeInit+0xb0>)
 8004db2:	f000 fe43 	bl	8005a3c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8004db6:	2027      	movs	r0, #39	; 0x27
 8004db8:	f000 f9e1 	bl	800517e <HAL_NVIC_DisableIRQ>
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40013800 	.word	0x40013800
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40010800 	.word	0x40010800
 8004dd0:	40004400 	.word	0x40004400
 8004dd4:	40004800 	.word	0x40004800
 8004dd8:	40010c00 	.word	0x40010c00

08004ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004ddc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004dde:	e003      	b.n	8004de8 <LoopCopyDataInit>

08004de0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004de2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004de4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004de6:	3104      	adds	r1, #4

08004de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004de8:	480a      	ldr	r0, [pc, #40]	; (8004e14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004dec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004dee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004df0:	d3f6      	bcc.n	8004de0 <CopyDataInit>
  ldr r2, =_sbss
 8004df2:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004df4:	e002      	b.n	8004dfc <LoopFillZerobss>

08004df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004df6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004df8:	f842 3b04 	str.w	r3, [r2], #4

08004dfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004dfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004e00:	d3f9      	bcc.n	8004df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e02:	f7ff fb2b 	bl	800445c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e06:	f009 ff7d 	bl	800ed04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e0a:	f7fd f861 	bl	8001ed0 <main>
  bx lr
 8004e0e:	4770      	bx	lr
  ldr r3, =_sidata
 8004e10:	0800f2c0 	.word	0x0800f2c0
  ldr r0, =_sdata
 8004e14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004e18:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8004e1c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8004e20:	2000198c 	.word	0x2000198c

08004e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e24:	e7fe      	b.n	8004e24 <ADC1_2_IRQHandler>
	...

08004e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e2c:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_Init+0x28>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <HAL_Init+0x28>)
 8004e32:	f043 0310 	orr.w	r3, r3, #16
 8004e36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e38:	2003      	movs	r0, #3
 8004e3a:	f000 f96b 	bl	8005114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f000 f808 	bl	8004e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e44:	f7ff fa42 	bl	80042cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40022000 	.word	0x40022000

08004e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e5c:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <HAL_InitTick+0x54>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_InitTick+0x58>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f991 	bl	800519a <HAL_SYSTICK_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e00e      	b.n	8004ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d80a      	bhi.n	8004e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e88:	2200      	movs	r2, #0
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	f000 f94b 	bl	800512a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e94:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <HAL_InitTick+0x5c>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000004 	.word	0x20000004
 8004eac:	2000000c 	.word	0x2000000c
 8004eb0:	20000008 	.word	0x20000008

08004eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_IncTick+0x1c>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_IncTick+0x20>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	4a03      	ldr	r2, [pc, #12]	; (8004ed4 <HAL_IncTick+0x20>)
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	2000000c 	.word	0x2000000c
 8004ed4:	20001988 	.word	0x20001988

08004ed8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return uwTick;
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <HAL_GetTick+0x10>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr
 8004ee8:	20001988 	.word	0x20001988

08004eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ef4:	f7ff fff0 	bl	8004ed8 <HAL_GetTick>
 8004ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d005      	beq.n	8004f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_Delay+0x44>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f12:	bf00      	nop
 8004f14:	f7ff ffe0 	bl	8004ed8 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d8f7      	bhi.n	8004f14 <HAL_Delay+0x28>
  {
  }
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	2000000c 	.word	0x2000000c

08004f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <__NVIC_SetPriorityGrouping+0x44>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f50:	4013      	ands	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <__NVIC_SetPriorityGrouping+0x44>)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	60d3      	str	r3, [r2, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <__NVIC_GetPriorityGrouping+0x18>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	f003 0307 	and.w	r3, r3, #7
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000ed00 	.word	0xe000ed00

08004f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	db0b      	blt.n	8004fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	f003 021f 	and.w	r2, r3, #31
 8004fb0:	4906      	ldr	r1, [pc, #24]	; (8004fcc <__NVIC_EnableIRQ+0x34>)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2001      	movs	r0, #1
 8004fba:	fa00 f202 	lsl.w	r2, r0, r2
 8004fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	e000e100 	.word	0xe000e100

08004fd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	db12      	blt.n	8005008 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	490a      	ldr	r1, [pc, #40]	; (8005014 <__NVIC_DisableIRQ+0x44>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff6:	3320      	adds	r3, #32
 8004ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ffc:	f3bf 8f4f 	dsb	sy
}
 8005000:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005002:	f3bf 8f6f 	isb	sy
}
 8005006:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	e000e100 	.word	0xe000e100

08005018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	6039      	str	r1, [r7, #0]
 8005022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005028:	2b00      	cmp	r3, #0
 800502a:	db0a      	blt.n	8005042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	490c      	ldr	r1, [pc, #48]	; (8005064 <__NVIC_SetPriority+0x4c>)
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	0112      	lsls	r2, r2, #4
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	440b      	add	r3, r1
 800503c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005040:	e00a      	b.n	8005058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	4908      	ldr	r1, [pc, #32]	; (8005068 <__NVIC_SetPriority+0x50>)
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	3b04      	subs	r3, #4
 8005050:	0112      	lsls	r2, r2, #4
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	440b      	add	r3, r1
 8005056:	761a      	strb	r2, [r3, #24]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	e000e100 	.word	0xe000e100
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	; 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f1c3 0307 	rsb	r3, r3, #7
 8005086:	2b04      	cmp	r3, #4
 8005088:	bf28      	it	cs
 800508a:	2304      	movcs	r3, #4
 800508c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3304      	adds	r3, #4
 8005092:	2b06      	cmp	r3, #6
 8005094:	d902      	bls.n	800509c <NVIC_EncodePriority+0x30>
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3b03      	subs	r3, #3
 800509a:	e000      	b.n	800509e <NVIC_EncodePriority+0x32>
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a0:	f04f 32ff 	mov.w	r2, #4294967295
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	401a      	ands	r2, r3
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050b4:	f04f 31ff 	mov.w	r1, #4294967295
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	43d9      	mvns	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c4:	4313      	orrs	r3, r2
         );
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3724      	adds	r7, #36	; 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e0:	d301      	bcc.n	80050e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050e2:	2301      	movs	r3, #1
 80050e4:	e00f      	b.n	8005106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050e6:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <SysTick_Config+0x40>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ee:	210f      	movs	r1, #15
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	f7ff ff90 	bl	8005018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <SysTick_Config+0x40>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <SysTick_Config+0x40>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000e010 	.word	0xe000e010

08005114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff09 	bl	8004f34 <__NVIC_SetPriorityGrouping>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	4603      	mov	r3, r0
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800513c:	f7ff ff1e 	bl	8004f7c <__NVIC_GetPriorityGrouping>
 8005140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff90 	bl	800506c <NVIC_EncodePriority>
 800514c:	4602      	mov	r2, r0
 800514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff5f 	bl	8005018 <__NVIC_SetPriority>
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800516c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff ff11 	bl	8004f98 <__NVIC_EnableIRQ>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	4603      	mov	r3, r0
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ff1f 	bl	8004fd0 <__NVIC_DisableIRQ>
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff ff94 	bl	80050d0 <SysTick_Config>
 80051a8:	4603      	mov	r3, r0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e043      	b.n	8005252 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_DMA_Init+0xa8>)
 80051d2:	4413      	add	r3, r2
 80051d4:	4a22      	ldr	r2, [pc, #136]	; (8005260 <HAL_DMA_Init+0xac>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	009a      	lsls	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_DMA_Init+0xb0>)
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80051fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005202:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800520c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005218:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005224:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	bffdfff8 	.word	0xbffdfff8
 8005260:	cccccccd 	.word	0xcccccccd
 8005264:	40020000 	.word	0x40020000

08005268 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e046      	b.n	8005308 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	4b18      	ldr	r3, [pc, #96]	; (8005314 <HAL_DMA_DeInit+0xac>)
 80052b2:	4413      	add	r3, r2
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <HAL_DMA_DeInit+0xb0>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	009a      	lsls	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_DMA_DeInit+0xb4>)
 80052c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	2101      	movs	r1, #1
 80052d2:	fa01 f202 	lsl.w	r2, r1, r2
 80052d6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	bffdfff8 	.word	0xbffdfff8
 8005318:	cccccccd 	.word	0xcccccccd
 800531c:	40020000 	.word	0x40020000

08005320 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_DMA_Start_IT+0x20>
 800533c:	2302      	movs	r3, #2
 800533e:	e04a      	b.n	80053d6 <HAL_DMA_Start_IT+0xb6>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800534e:	2b01      	cmp	r3, #1
 8005350:	d13a      	bne.n	80053c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f9ae 	bl	80056d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 020e 	orr.w	r2, r2, #14
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e00f      	b.n	80053b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0204 	bic.w	r2, r2, #4
 80053a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 020a 	orr.w	r2, r2, #10
 80053b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e005      	b.n	80053d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d005      	beq.n	8005402 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2204      	movs	r2, #4
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	e051      	b.n	80054a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 020e 	bic.w	r2, r2, #14
 8005410:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a22      	ldr	r2, [pc, #136]	; (80054b0 <HAL_DMA_Abort_IT+0xd0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d029      	beq.n	8005480 <HAL_DMA_Abort_IT+0xa0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <HAL_DMA_Abort_IT+0xd4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d022      	beq.n	800547c <HAL_DMA_Abort_IT+0x9c>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <HAL_DMA_Abort_IT+0xd8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01a      	beq.n	8005476 <HAL_DMA_Abort_IT+0x96>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_DMA_Abort_IT+0xdc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d012      	beq.n	8005470 <HAL_DMA_Abort_IT+0x90>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_DMA_Abort_IT+0xe0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00a      	beq.n	800546a <HAL_DMA_Abort_IT+0x8a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_DMA_Abort_IT+0xe4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d102      	bne.n	8005464 <HAL_DMA_Abort_IT+0x84>
 800545e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005462:	e00e      	b.n	8005482 <HAL_DMA_Abort_IT+0xa2>
 8005464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005468:	e00b      	b.n	8005482 <HAL_DMA_Abort_IT+0xa2>
 800546a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800546e:	e008      	b.n	8005482 <HAL_DMA_Abort_IT+0xa2>
 8005470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005474:	e005      	b.n	8005482 <HAL_DMA_Abort_IT+0xa2>
 8005476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800547a:	e002      	b.n	8005482 <HAL_DMA_Abort_IT+0xa2>
 800547c:	2310      	movs	r3, #16
 800547e:	e000      	b.n	8005482 <HAL_DMA_Abort_IT+0xa2>
 8005480:	2301      	movs	r3, #1
 8005482:	4a11      	ldr	r2, [pc, #68]	; (80054c8 <HAL_DMA_Abort_IT+0xe8>)
 8005484:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
    } 
  }
  return status;
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40020008 	.word	0x40020008
 80054b4:	4002001c 	.word	0x4002001c
 80054b8:	40020030 	.word	0x40020030
 80054bc:	40020044 	.word	0x40020044
 80054c0:	40020058 	.word	0x40020058
 80054c4:	4002006c 	.word	0x4002006c
 80054c8:	40020000 	.word	0x40020000

080054cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	2204      	movs	r2, #4
 80054ea:	409a      	lsls	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d04f      	beq.n	8005594 <HAL_DMA_IRQHandler+0xc8>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d04a      	beq.n	8005594 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d107      	bne.n	800551c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a66      	ldr	r2, [pc, #408]	; (80056bc <HAL_DMA_IRQHandler+0x1f0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d029      	beq.n	800557a <HAL_DMA_IRQHandler+0xae>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a65      	ldr	r2, [pc, #404]	; (80056c0 <HAL_DMA_IRQHandler+0x1f4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_IRQHandler+0xaa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a63      	ldr	r2, [pc, #396]	; (80056c4 <HAL_DMA_IRQHandler+0x1f8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01a      	beq.n	8005570 <HAL_DMA_IRQHandler+0xa4>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a62      	ldr	r2, [pc, #392]	; (80056c8 <HAL_DMA_IRQHandler+0x1fc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d012      	beq.n	800556a <HAL_DMA_IRQHandler+0x9e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a60      	ldr	r2, [pc, #384]	; (80056cc <HAL_DMA_IRQHandler+0x200>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00a      	beq.n	8005564 <HAL_DMA_IRQHandler+0x98>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a5f      	ldr	r2, [pc, #380]	; (80056d0 <HAL_DMA_IRQHandler+0x204>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d102      	bne.n	800555e <HAL_DMA_IRQHandler+0x92>
 8005558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800555c:	e00e      	b.n	800557c <HAL_DMA_IRQHandler+0xb0>
 800555e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005562:	e00b      	b.n	800557c <HAL_DMA_IRQHandler+0xb0>
 8005564:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005568:	e008      	b.n	800557c <HAL_DMA_IRQHandler+0xb0>
 800556a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800556e:	e005      	b.n	800557c <HAL_DMA_IRQHandler+0xb0>
 8005570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005574:	e002      	b.n	800557c <HAL_DMA_IRQHandler+0xb0>
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	e000      	b.n	800557c <HAL_DMA_IRQHandler+0xb0>
 800557a:	2304      	movs	r3, #4
 800557c:	4a55      	ldr	r2, [pc, #340]	; (80056d4 <HAL_DMA_IRQHandler+0x208>)
 800557e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8094 	beq.w	80056b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005592:	e08e      	b.n	80056b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	2202      	movs	r2, #2
 800559a:	409a      	lsls	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d056      	beq.n	8005652 <HAL_DMA_IRQHandler+0x186>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d051      	beq.n	8005652 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 020a 	bic.w	r2, r2, #10
 80055ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a38      	ldr	r2, [pc, #224]	; (80056bc <HAL_DMA_IRQHandler+0x1f0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d029      	beq.n	8005632 <HAL_DMA_IRQHandler+0x166>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a37      	ldr	r2, [pc, #220]	; (80056c0 <HAL_DMA_IRQHandler+0x1f4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d022      	beq.n	800562e <HAL_DMA_IRQHandler+0x162>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	; (80056c4 <HAL_DMA_IRQHandler+0x1f8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01a      	beq.n	8005628 <HAL_DMA_IRQHandler+0x15c>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a34      	ldr	r2, [pc, #208]	; (80056c8 <HAL_DMA_IRQHandler+0x1fc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d012      	beq.n	8005622 <HAL_DMA_IRQHandler+0x156>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a32      	ldr	r2, [pc, #200]	; (80056cc <HAL_DMA_IRQHandler+0x200>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00a      	beq.n	800561c <HAL_DMA_IRQHandler+0x150>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a31      	ldr	r2, [pc, #196]	; (80056d0 <HAL_DMA_IRQHandler+0x204>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d102      	bne.n	8005616 <HAL_DMA_IRQHandler+0x14a>
 8005610:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005614:	e00e      	b.n	8005634 <HAL_DMA_IRQHandler+0x168>
 8005616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800561a:	e00b      	b.n	8005634 <HAL_DMA_IRQHandler+0x168>
 800561c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005620:	e008      	b.n	8005634 <HAL_DMA_IRQHandler+0x168>
 8005622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005626:	e005      	b.n	8005634 <HAL_DMA_IRQHandler+0x168>
 8005628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800562c:	e002      	b.n	8005634 <HAL_DMA_IRQHandler+0x168>
 800562e:	2320      	movs	r3, #32
 8005630:	e000      	b.n	8005634 <HAL_DMA_IRQHandler+0x168>
 8005632:	2302      	movs	r3, #2
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_DMA_IRQHandler+0x208>)
 8005636:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	2b00      	cmp	r3, #0
 8005646:	d034      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005650:	e02f      	b.n	80056b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2208      	movs	r2, #8
 8005658:	409a      	lsls	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d028      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x1e8>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d023      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 020e 	bic.w	r2, r2, #14
 800567a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f202 	lsl.w	r2, r1, r2
 800568a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
    }
  }
  return;
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
}
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40020008 	.word	0x40020008
 80056c0:	4002001c 	.word	0x4002001c
 80056c4:	40020030 	.word	0x40020030
 80056c8:	40020044 	.word	0x40020044
 80056cc:	40020058 	.word	0x40020058
 80056d0:	4002006c 	.word	0x4002006c
 80056d4:	40020000 	.word	0x40020000

080056d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	2101      	movs	r1, #1
 80056f0:	fa01 f202 	lsl.w	r2, r1, r2
 80056f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b10      	cmp	r3, #16
 8005704:	d108      	bne.n	8005718 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005716:	e007      	b.n	8005728 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]
}
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr
	...

08005734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005734:	b480      	push	{r7}
 8005736:	b08b      	sub	sp, #44	; 0x2c
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005742:	2300      	movs	r3, #0
 8005744:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005746:	e169      	b.n	8005a1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005748:	2201      	movs	r2, #1
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	4013      	ands	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	429a      	cmp	r2, r3
 8005762:	f040 8158 	bne.w	8005a16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4a9a      	ldr	r2, [pc, #616]	; (80059d4 <HAL_GPIO_Init+0x2a0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d05e      	beq.n	800582e <HAL_GPIO_Init+0xfa>
 8005770:	4a98      	ldr	r2, [pc, #608]	; (80059d4 <HAL_GPIO_Init+0x2a0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d875      	bhi.n	8005862 <HAL_GPIO_Init+0x12e>
 8005776:	4a98      	ldr	r2, [pc, #608]	; (80059d8 <HAL_GPIO_Init+0x2a4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d058      	beq.n	800582e <HAL_GPIO_Init+0xfa>
 800577c:	4a96      	ldr	r2, [pc, #600]	; (80059d8 <HAL_GPIO_Init+0x2a4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d86f      	bhi.n	8005862 <HAL_GPIO_Init+0x12e>
 8005782:	4a96      	ldr	r2, [pc, #600]	; (80059dc <HAL_GPIO_Init+0x2a8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d052      	beq.n	800582e <HAL_GPIO_Init+0xfa>
 8005788:	4a94      	ldr	r2, [pc, #592]	; (80059dc <HAL_GPIO_Init+0x2a8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d869      	bhi.n	8005862 <HAL_GPIO_Init+0x12e>
 800578e:	4a94      	ldr	r2, [pc, #592]	; (80059e0 <HAL_GPIO_Init+0x2ac>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04c      	beq.n	800582e <HAL_GPIO_Init+0xfa>
 8005794:	4a92      	ldr	r2, [pc, #584]	; (80059e0 <HAL_GPIO_Init+0x2ac>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d863      	bhi.n	8005862 <HAL_GPIO_Init+0x12e>
 800579a:	4a92      	ldr	r2, [pc, #584]	; (80059e4 <HAL_GPIO_Init+0x2b0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d046      	beq.n	800582e <HAL_GPIO_Init+0xfa>
 80057a0:	4a90      	ldr	r2, [pc, #576]	; (80059e4 <HAL_GPIO_Init+0x2b0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d85d      	bhi.n	8005862 <HAL_GPIO_Init+0x12e>
 80057a6:	2b12      	cmp	r3, #18
 80057a8:	d82a      	bhi.n	8005800 <HAL_GPIO_Init+0xcc>
 80057aa:	2b12      	cmp	r3, #18
 80057ac:	d859      	bhi.n	8005862 <HAL_GPIO_Init+0x12e>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <HAL_GPIO_Init+0x80>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	0800582f 	.word	0x0800582f
 80057b8:	08005809 	.word	0x08005809
 80057bc:	0800581b 	.word	0x0800581b
 80057c0:	0800585d 	.word	0x0800585d
 80057c4:	08005863 	.word	0x08005863
 80057c8:	08005863 	.word	0x08005863
 80057cc:	08005863 	.word	0x08005863
 80057d0:	08005863 	.word	0x08005863
 80057d4:	08005863 	.word	0x08005863
 80057d8:	08005863 	.word	0x08005863
 80057dc:	08005863 	.word	0x08005863
 80057e0:	08005863 	.word	0x08005863
 80057e4:	08005863 	.word	0x08005863
 80057e8:	08005863 	.word	0x08005863
 80057ec:	08005863 	.word	0x08005863
 80057f0:	08005863 	.word	0x08005863
 80057f4:	08005863 	.word	0x08005863
 80057f8:	08005811 	.word	0x08005811
 80057fc:	08005825 	.word	0x08005825
 8005800:	4a79      	ldr	r2, [pc, #484]	; (80059e8 <HAL_GPIO_Init+0x2b4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005806:	e02c      	b.n	8005862 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	623b      	str	r3, [r7, #32]
          break;
 800580e:	e029      	b.n	8005864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	3304      	adds	r3, #4
 8005816:	623b      	str	r3, [r7, #32]
          break;
 8005818:	e024      	b.n	8005864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	3308      	adds	r3, #8
 8005820:	623b      	str	r3, [r7, #32]
          break;
 8005822:	e01f      	b.n	8005864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	330c      	adds	r3, #12
 800582a:	623b      	str	r3, [r7, #32]
          break;
 800582c:	e01a      	b.n	8005864 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005836:	2304      	movs	r3, #4
 8005838:	623b      	str	r3, [r7, #32]
          break;
 800583a:	e013      	b.n	8005864 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d105      	bne.n	8005850 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005844:	2308      	movs	r3, #8
 8005846:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	611a      	str	r2, [r3, #16]
          break;
 800584e:	e009      	b.n	8005864 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005850:	2308      	movs	r3, #8
 8005852:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	615a      	str	r2, [r3, #20]
          break;
 800585a:	e003      	b.n	8005864 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800585c:	2300      	movs	r3, #0
 800585e:	623b      	str	r3, [r7, #32]
          break;
 8005860:	e000      	b.n	8005864 <HAL_GPIO_Init+0x130>
          break;
 8005862:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2bff      	cmp	r3, #255	; 0xff
 8005868:	d801      	bhi.n	800586e <HAL_GPIO_Init+0x13a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	e001      	b.n	8005872 <HAL_GPIO_Init+0x13e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2bff      	cmp	r3, #255	; 0xff
 8005878:	d802      	bhi.n	8005880 <HAL_GPIO_Init+0x14c>
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	e002      	b.n	8005886 <HAL_GPIO_Init+0x152>
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	3b08      	subs	r3, #8
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	210f      	movs	r1, #15
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	401a      	ands	r2, r3
 8005898:	6a39      	ldr	r1, [r7, #32]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	431a      	orrs	r2, r3
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80b1 	beq.w	8005a16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80058b4:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <HAL_GPIO_Init+0x2b8>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	4a4c      	ldr	r2, [pc, #304]	; (80059ec <HAL_GPIO_Init+0x2b8>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6193      	str	r3, [r2, #24]
 80058c0:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <HAL_GPIO_Init+0x2b8>)
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80058cc:	4a48      	ldr	r2, [pc, #288]	; (80059f0 <HAL_GPIO_Init+0x2bc>)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	089b      	lsrs	r3, r3, #2
 80058d2:	3302      	adds	r3, #2
 80058d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	220f      	movs	r2, #15
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4013      	ands	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <HAL_GPIO_Init+0x2c0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_GPIO_Init+0x1ec>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3f      	ldr	r2, [pc, #252]	; (80059f8 <HAL_GPIO_Init+0x2c4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00d      	beq.n	800591c <HAL_GPIO_Init+0x1e8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <HAL_GPIO_Init+0x2c8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <HAL_GPIO_Init+0x1e4>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3d      	ldr	r2, [pc, #244]	; (8005a00 <HAL_GPIO_Init+0x2cc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d101      	bne.n	8005914 <HAL_GPIO_Init+0x1e0>
 8005910:	2303      	movs	r3, #3
 8005912:	e006      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 8005914:	2304      	movs	r3, #4
 8005916:	e004      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 8005918:	2302      	movs	r3, #2
 800591a:	e002      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 8005920:	2300      	movs	r3, #0
 8005922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005924:	f002 0203 	and.w	r2, r2, #3
 8005928:	0092      	lsls	r2, r2, #2
 800592a:	4093      	lsls	r3, r2
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005932:	492f      	ldr	r1, [pc, #188]	; (80059f0 <HAL_GPIO_Init+0x2bc>)
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	3302      	adds	r3, #2
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800594c:	4b2d      	ldr	r3, [pc, #180]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	492c      	ldr	r1, [pc, #176]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]
 8005958:	e006      	b.n	8005968 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800595a:	4b2a      	ldr	r3, [pc, #168]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	43db      	mvns	r3, r3
 8005962:	4928      	ldr	r1, [pc, #160]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 8005964:	4013      	ands	r3, r2
 8005966:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d006      	beq.n	8005982 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005974:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	4922      	ldr	r1, [pc, #136]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]
 8005980:	e006      	b.n	8005990 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005982:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	43db      	mvns	r3, r3
 800598a:	491e      	ldr	r1, [pc, #120]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 800598c:	4013      	ands	r3, r2
 800598e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	4918      	ldr	r1, [pc, #96]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	608b      	str	r3, [r1, #8]
 80059a8:	e006      	b.n	80059b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	4914      	ldr	r1, [pc, #80]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d021      	beq.n	8005a08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	490e      	ldr	r1, [pc, #56]	; (8005a04 <HAL_GPIO_Init+0x2d0>)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60cb      	str	r3, [r1, #12]
 80059d0:	e021      	b.n	8005a16 <HAL_GPIO_Init+0x2e2>
 80059d2:	bf00      	nop
 80059d4:	10320000 	.word	0x10320000
 80059d8:	10310000 	.word	0x10310000
 80059dc:	10220000 	.word	0x10220000
 80059e0:	10210000 	.word	0x10210000
 80059e4:	10120000 	.word	0x10120000
 80059e8:	10110000 	.word	0x10110000
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40010800 	.word	0x40010800
 80059f8:	40010c00 	.word	0x40010c00
 80059fc:	40011000 	.word	0x40011000
 8005a00:	40011400 	.word	0x40011400
 8005a04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005a08:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <HAL_GPIO_Init+0x304>)
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	4909      	ldr	r1, [pc, #36]	; (8005a38 <HAL_GPIO_Init+0x304>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	3301      	adds	r3, #1
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	fa22 f303 	lsr.w	r3, r2, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f47f ae8e 	bne.w	8005748 <HAL_GPIO_Init+0x14>
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	372c      	adds	r7, #44	; 0x2c
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	40010400 	.word	0x40010400

08005a3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005a4a:	e09a      	b.n	8005b82 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 808d 	beq.w	8005b7c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005a62:	4a4e      	ldr	r2, [pc, #312]	; (8005b9c <HAL_GPIO_DeInit+0x160>)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	3302      	adds	r3, #2
 8005a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	220f      	movs	r2, #15
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4013      	ands	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a46      	ldr	r2, [pc, #280]	; (8005ba0 <HAL_GPIO_DeInit+0x164>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_GPIO_DeInit+0x78>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a45      	ldr	r2, [pc, #276]	; (8005ba4 <HAL_GPIO_DeInit+0x168>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00d      	beq.n	8005ab0 <HAL_GPIO_DeInit+0x74>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a44      	ldr	r2, [pc, #272]	; (8005ba8 <HAL_GPIO_DeInit+0x16c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <HAL_GPIO_DeInit+0x70>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a43      	ldr	r2, [pc, #268]	; (8005bac <HAL_GPIO_DeInit+0x170>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_GPIO_DeInit+0x6c>
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e006      	b.n	8005ab6 <HAL_GPIO_DeInit+0x7a>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	e004      	b.n	8005ab6 <HAL_GPIO_DeInit+0x7a>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e002      	b.n	8005ab6 <HAL_GPIO_DeInit+0x7a>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <HAL_GPIO_DeInit+0x7a>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	f002 0203 	and.w	r2, r2, #3
 8005abc:	0092      	lsls	r2, r2, #2
 8005abe:	4093      	lsls	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d132      	bne.n	8005b2c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	220f      	movs	r2, #15
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005ad6:	4a31      	ldr	r2, [pc, #196]	; (8005b9c <HAL_GPIO_DeInit+0x160>)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	3302      	adds	r3, #2
 8005ade:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	43da      	mvns	r2, r3
 8005ae6:	482d      	ldr	r0, [pc, #180]	; (8005b9c <HAL_GPIO_DeInit+0x160>)
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	400a      	ands	r2, r1
 8005aee:	3302      	adds	r3, #2
 8005af0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005af4:	4b2e      	ldr	r3, [pc, #184]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	43db      	mvns	r3, r3
 8005afc:	492c      	ldr	r1, [pc, #176]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005b02:	4b2b      	ldr	r3, [pc, #172]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	4929      	ldr	r1, [pc, #164]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	43db      	mvns	r3, r3
 8005b18:	4925      	ldr	r1, [pc, #148]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	4922      	ldr	r1, [pc, #136]	; (8005bb0 <HAL_GPIO_DeInit+0x174>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2bff      	cmp	r3, #255	; 0xff
 8005b30:	d801      	bhi.n	8005b36 <HAL_GPIO_DeInit+0xfa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	e001      	b.n	8005b3a <HAL_GPIO_DeInit+0xfe>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2bff      	cmp	r3, #255	; 0xff
 8005b40:	d802      	bhi.n	8005b48 <HAL_GPIO_DeInit+0x10c>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	e002      	b.n	8005b4e <HAL_GPIO_DeInit+0x112>
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3b08      	subs	r3, #8
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	210f      	movs	r1, #15
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	401a      	ands	r2, r3
 8005b60:	2104      	movs	r1, #4
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	fa01 f303 	lsl.w	r3, r1, r3
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f47f af5e 	bne.w	8005a4c <HAL_GPIO_DeInit+0x10>
  }
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr
 8005b9c:	40010000 	.word	0x40010000
 8005ba0:	40010800 	.word	0x40010800
 8005ba4:	40010c00 	.word	0x40010c00
 8005ba8:	40011000 	.word	0x40011000
 8005bac:	40011400 	.word	0x40011400
 8005bb0:	40010400 	.word	0x40010400

08005bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	807b      	strh	r3, [r7, #2]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bc4:	787b      	ldrb	r3, [r7, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bca:	887a      	ldrh	r2, [r7, #2]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005bd0:	e003      	b.n	8005bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	041a      	lsls	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e12b      	b.n	8005e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc f888 	bl	8001d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c48:	f002 f84e 	bl	8007ce8 <HAL_RCC_GetPCLK1Freq>
 8005c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	4a81      	ldr	r2, [pc, #516]	; (8005e58 <HAL_I2C_Init+0x274>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d807      	bhi.n	8005c68 <HAL_I2C_Init+0x84>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a80      	ldr	r2, [pc, #512]	; (8005e5c <HAL_I2C_Init+0x278>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	bf94      	ite	ls
 8005c60:	2301      	movls	r3, #1
 8005c62:	2300      	movhi	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	e006      	b.n	8005c76 <HAL_I2C_Init+0x92>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a7d      	ldr	r2, [pc, #500]	; (8005e60 <HAL_I2C_Init+0x27c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bf94      	ite	ls
 8005c70:	2301      	movls	r3, #1
 8005c72:	2300      	movhi	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0e7      	b.n	8005e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a78      	ldr	r2, [pc, #480]	; (8005e64 <HAL_I2C_Init+0x280>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0c9b      	lsrs	r3, r3, #18
 8005c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4a6a      	ldr	r2, [pc, #424]	; (8005e58 <HAL_I2C_Init+0x274>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d802      	bhi.n	8005cb8 <HAL_I2C_Init+0xd4>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	e009      	b.n	8005ccc <HAL_I2C_Init+0xe8>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	4a69      	ldr	r2, [pc, #420]	; (8005e68 <HAL_I2C_Init+0x284>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	3301      	adds	r3, #1
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	495c      	ldr	r1, [pc, #368]	; (8005e58 <HAL_I2C_Init+0x274>)
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	d819      	bhi.n	8005d20 <HAL_I2C_Init+0x13c>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1e59      	subs	r1, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cfa:	1c59      	adds	r1, r3, #1
 8005cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d00:	400b      	ands	r3, r1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_I2C_Init+0x138>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1e59      	subs	r1, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d14:	3301      	adds	r3, #1
 8005d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d1a:	e051      	b.n	8005dc0 <HAL_I2C_Init+0x1dc>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	e04f      	b.n	8005dc0 <HAL_I2C_Init+0x1dc>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d111      	bne.n	8005d4c <HAL_I2C_Init+0x168>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1e58      	subs	r0, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6859      	ldr	r1, [r3, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	440b      	add	r3, r1
 8005d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	e012      	b.n	8005d72 <HAL_I2C_Init+0x18e>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1e58      	subs	r0, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	0099      	lsls	r1, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d62:	3301      	adds	r3, #1
 8005d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Init+0x196>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e022      	b.n	8005dc0 <HAL_I2C_Init+0x1dc>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10e      	bne.n	8005da0 <HAL_I2C_Init+0x1bc>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1e58      	subs	r0, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6859      	ldr	r1, [r3, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	440b      	add	r3, r1
 8005d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d94:	3301      	adds	r3, #1
 8005d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9e:	e00f      	b.n	8005dc0 <HAL_I2C_Init+0x1dc>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1e58      	subs	r0, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6859      	ldr	r1, [r3, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	0099      	lsls	r1, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db6:	3301      	adds	r3, #1
 8005db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	6809      	ldr	r1, [r1, #0]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69da      	ldr	r2, [r3, #28]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6911      	ldr	r1, [r2, #16]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	68d2      	ldr	r2, [r2, #12]
 8005dfa:	4311      	orrs	r1, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6812      	ldr	r2, [r2, #0]
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695a      	ldr	r2, [r3, #20]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	000186a0 	.word	0x000186a0
 8005e5c:	001e847f 	.word	0x001e847f
 8005e60:	003d08ff 	.word	0x003d08ff
 8005e64:	431bde83 	.word	0x431bde83
 8005e68:	10624dd3 	.word	0x10624dd3

08005e6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	461a      	mov	r2, r3
 8005e78:	460b      	mov	r3, r1
 8005e7a:	817b      	strh	r3, [r7, #10]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e80:	f7ff f82a 	bl	8004ed8 <HAL_GetTick>
 8005e84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	f040 80e0 	bne.w	8006054 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2319      	movs	r3, #25
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4970      	ldr	r1, [pc, #448]	; (8006060 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 f972 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e0d3      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_I2C_Master_Transmit+0x50>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0cc      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d007      	beq.n	8005ee2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2221      	movs	r2, #33	; 0x21
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2210      	movs	r2, #16
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	893a      	ldrh	r2, [r7, #8]
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a50      	ldr	r2, [pc, #320]	; (8006064 <HAL_I2C_Master_Transmit+0x1f8>)
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f24:	8979      	ldrh	r1, [r7, #10]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	6a3a      	ldr	r2, [r7, #32]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fe5e 	bl	8006bec <I2C_MasterRequestWrite>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e08d      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f50:	e066      	b.n	8006020 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	6a39      	ldr	r1, [r7, #32]
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f001 f9ec 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d107      	bne.n	8005f7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e06b      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d11b      	bne.n	8005ff4 <HAL_I2C_Master_Transmit+0x188>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	6a39      	ldr	r1, [r7, #32]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f001 f9dc 	bl	80073b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00d      	beq.n	8006020 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b04      	cmp	r3, #4
 800600a:	d107      	bne.n	800601c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e01a      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d194      	bne.n	8005f52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	00100002 	.word	0x00100002
 8006064:	ffff0000 	.word	0xffff0000

08006068 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08c      	sub	sp, #48	; 0x30
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	607a      	str	r2, [r7, #4]
 8006072:	461a      	mov	r2, r3
 8006074:	460b      	mov	r3, r1
 8006076:	817b      	strh	r3, [r7, #10]
 8006078:	4613      	mov	r3, r2
 800607a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006080:	f7fe ff2a 	bl	8004ed8 <HAL_GetTick>
 8006084:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b20      	cmp	r3, #32
 8006090:	f040 823f 	bne.w	8006512 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	2319      	movs	r3, #25
 800609a:	2201      	movs	r2, #1
 800609c:	497f      	ldr	r1, [pc, #508]	; (800629c <HAL_I2C_Master_Receive+0x234>)
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f001 f872 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80060aa:	2302      	movs	r3, #2
 80060ac:	e232      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_I2C_Master_Receive+0x54>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e22b      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d007      	beq.n	80060e2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0201 	orr.w	r2, r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2222      	movs	r2, #34	; 0x22
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2210      	movs	r2, #16
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	893a      	ldrh	r2, [r7, #8]
 8006112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a5f      	ldr	r2, [pc, #380]	; (80062a0 <HAL_I2C_Master_Receive+0x238>)
 8006122:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006124:	8979      	ldrh	r1, [r7, #10]
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fde0 	bl	8006cf0 <I2C_MasterRequestRead>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1ec      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d113      	bne.n	800616a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e1c0      	b.n	80064ec <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616e:	2b01      	cmp	r3, #1
 8006170:	d11e      	bne.n	80061b0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006180:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006182:	b672      	cpsid	i
}
 8006184:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061ac:	b662      	cpsie	i
}
 80061ae:	e035      	b.n	800621c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d11e      	bne.n	80061f6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061c8:	b672      	cpsid	i
}
 80061ca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061f2:	b662      	cpsie	i
}
 80061f4:	e012      	b.n	800621c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006206:	2300      	movs	r3, #0
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	613b      	str	r3, [r7, #16]
 800621a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800621c:	e166      	b.n	80064ec <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006222:	2b03      	cmp	r3, #3
 8006224:	f200 811f 	bhi.w	8006466 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622c:	2b01      	cmp	r3, #1
 800622e:	d123      	bne.n	8006278 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f001 f8ff 	bl	8007438 <I2C_WaitOnRXNEFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e167      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006276:	e139      	b.n	80064ec <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	2b02      	cmp	r3, #2
 800627e:	d152      	bne.n	8006326 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	2200      	movs	r2, #0
 8006288:	4906      	ldr	r1, [pc, #24]	; (80062a4 <HAL_I2C_Master_Receive+0x23c>)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 ff7c 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d008      	beq.n	80062a8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e13c      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
 800629a:	bf00      	nop
 800629c:	00100002 	.word	0x00100002
 80062a0:	ffff0000 	.word	0xffff0000
 80062a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80062a8:	b672      	cpsid	i
}
 80062aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80062ee:	b662      	cpsie	i
}
 80062f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006324:	e0e2      	b.n	80064ec <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2200      	movs	r2, #0
 800632e:	497b      	ldr	r1, [pc, #492]	; (800651c <HAL_I2C_Master_Receive+0x4b4>)
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 ff29 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e0e9      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006350:	b672      	cpsid	i
}
 8006352:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006386:	4b66      	ldr	r3, [pc, #408]	; (8006520 <HAL_I2C_Master_Receive+0x4b8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	08db      	lsrs	r3, r3, #3
 800638c:	4a65      	ldr	r2, [pc, #404]	; (8006524 <HAL_I2C_Master_Receive+0x4bc>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	0a1a      	lsrs	r2, r3, #8
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	00da      	lsls	r2, r3, #3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d118      	bne.n	80063de <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f043 0220 	orr.w	r2, r3, #32
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80063ce:	b662      	cpsie	i
}
 80063d0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e09a      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d1d9      	bne.n	80063a0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800642e:	b662      	cpsie	i
}
 8006430:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006464:	e042      	b.n	80064ec <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 ffe4 	bl	8007438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e04c      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d118      	bne.n	80064ec <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f ae94 	bne.w	800621e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3728      	adds	r7, #40	; 0x28
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	00010004 	.word	0x00010004
 8006520:	20000004 	.word	0x20000004
 8006524:	14f8b589 	.word	0x14f8b589

08006528 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	4608      	mov	r0, r1
 8006532:	4611      	mov	r1, r2
 8006534:	461a      	mov	r2, r3
 8006536:	4603      	mov	r3, r0
 8006538:	817b      	strh	r3, [r7, #10]
 800653a:	460b      	mov	r3, r1
 800653c:	813b      	strh	r3, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006542:	f7fe fcc9 	bl	8004ed8 <HAL_GetTick>
 8006546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b20      	cmp	r3, #32
 8006552:	f040 80d9 	bne.w	8006708 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	2319      	movs	r3, #25
 800655c:	2201      	movs	r2, #1
 800655e:	496d      	ldr	r1, [pc, #436]	; (8006714 <HAL_I2C_Mem_Write+0x1ec>)
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fe11 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
 800656e:	e0cc      	b.n	800670a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_I2C_Mem_Write+0x56>
 800657a:	2302      	movs	r3, #2
 800657c:	e0c5      	b.n	800670a <HAL_I2C_Mem_Write+0x1e2>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d007      	beq.n	80065a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2221      	movs	r2, #33	; 0x21
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a3a      	ldr	r2, [r7, #32]
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a4d      	ldr	r2, [pc, #308]	; (8006718 <HAL_I2C_Mem_Write+0x1f0>)
 80065e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065e6:	88f8      	ldrh	r0, [r7, #6]
 80065e8:	893a      	ldrh	r2, [r7, #8]
 80065ea:	8979      	ldrh	r1, [r7, #10]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	4603      	mov	r3, r0
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fc48 	bl	8006e8c <I2C_RequestMemoryWrite>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d052      	beq.n	80066a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e081      	b.n	800670a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fe92 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	2b04      	cmp	r3, #4
 800661c:	d107      	bne.n	800662e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e06b      	b.n	800670a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d11b      	bne.n	80066a8 <HAL_I2C_Mem_Write+0x180>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d017      	beq.n	80066a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1aa      	bne.n	8006606 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fe7e 	bl	80073b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00d      	beq.n	80066dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d107      	bne.n	80066d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e016      	b.n	800670a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e000      	b.n	800670a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	00100002 	.word	0x00100002
 8006718:	ffff0000 	.word	0xffff0000

0800671c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08c      	sub	sp, #48	; 0x30
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	4608      	mov	r0, r1
 8006726:	4611      	mov	r1, r2
 8006728:	461a      	mov	r2, r3
 800672a:	4603      	mov	r3, r0
 800672c:	817b      	strh	r3, [r7, #10]
 800672e:	460b      	mov	r3, r1
 8006730:	813b      	strh	r3, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800673a:	f7fe fbcd 	bl	8004ed8 <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b20      	cmp	r3, #32
 800674a:	f040 8244 	bne.w	8006bd6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	2319      	movs	r3, #25
 8006754:	2201      	movs	r2, #1
 8006756:	4982      	ldr	r1, [pc, #520]	; (8006960 <HAL_I2C_Mem_Read+0x244>)
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fd15 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
 8006766:	e237      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_I2C_Mem_Read+0x5a>
 8006772:	2302      	movs	r3, #2
 8006774:	e230      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d007      	beq.n	800679c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2222      	movs	r2, #34	; 0x22
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a62      	ldr	r2, [pc, #392]	; (8006964 <HAL_I2C_Mem_Read+0x248>)
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067de:	88f8      	ldrh	r0, [r7, #6]
 80067e0:	893a      	ldrh	r2, [r7, #8]
 80067e2:	8979      	ldrh	r1, [r7, #10]
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	4603      	mov	r3, r0
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fbe2 	bl	8006fb8 <I2C_RequestMemoryRead>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e1ec      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d113      	bne.n	800682e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	e1c0      	b.n	8006bb0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006832:	2b01      	cmp	r3, #1
 8006834:	d11e      	bne.n	8006874 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006844:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006846:	b672      	cpsid	i
}
 8006848:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006870:	b662      	cpsie	i
}
 8006872:	e035      	b.n	80068e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006878:	2b02      	cmp	r3, #2
 800687a:	d11e      	bne.n	80068ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800688c:	b672      	cpsid	i
}
 800688e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80068b6:	b662      	cpsie	i
}
 80068b8:	e012      	b.n	80068e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80068e0:	e166      	b.n	8006bb0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	f200 811f 	bhi.w	8006b2a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d123      	bne.n	800693c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fd9d 	bl	8007438 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e167      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	855a      	strh	r2, [r3, #42]	; 0x2a
 800693a:	e139      	b.n	8006bb0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006940:	2b02      	cmp	r3, #2
 8006942:	d152      	bne.n	80069ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	2200      	movs	r2, #0
 800694c:	4906      	ldr	r1, [pc, #24]	; (8006968 <HAL_I2C_Mem_Read+0x24c>)
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fc1a 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e13c      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
 800695e:	bf00      	nop
 8006960:	00100002 	.word	0x00100002
 8006964:	ffff0000 	.word	0xffff0000
 8006968:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800696c:	b672      	cpsid	i
}
 800696e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800697e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80069b2:	b662      	cpsie	i
}
 80069b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069e8:	e0e2      	b.n	8006bb0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	2200      	movs	r2, #0
 80069f2:	497b      	ldr	r1, [pc, #492]	; (8006be0 <HAL_I2C_Mem_Read+0x4c4>)
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fbc7 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0e9      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a14:	b672      	cpsid	i
}
 8006a16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a4a:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <HAL_I2C_Mem_Read+0x4c8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	08db      	lsrs	r3, r3, #3
 8006a50:	4a65      	ldr	r2, [pc, #404]	; (8006be8 <HAL_I2C_Mem_Read+0x4cc>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	0a1a      	lsrs	r2, r3, #8
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	00da      	lsls	r2, r3, #3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d118      	bne.n	8006aa2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f043 0220 	orr.w	r2, r3, #32
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006a92:	b662      	cpsie	i
}
 8006a94:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e09a      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d1d9      	bne.n	8006a64 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006af2:	b662      	cpsie	i
}
 8006af4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b28:	e042      	b.n	8006bb0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fc82 	bl	8007438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e04c      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d118      	bne.n	8006bb0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f47f ae94 	bne.w	80068e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
  }
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3728      	adds	r7, #40	; 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	00010004 	.word	0x00010004
 8006be4:	20000004 	.word	0x20000004
 8006be8:	14f8b589 	.word	0x14f8b589

08006bec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d006      	beq.n	8006c16 <I2C_MasterRequestWrite+0x2a>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d003      	beq.n	8006c16 <I2C_MasterRequestWrite+0x2a>
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c14:	d108      	bne.n	8006c28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	e00b      	b.n	8006c40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	2b12      	cmp	r3, #18
 8006c2e:	d107      	bne.n	8006c40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa9b 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c66:	d103      	bne.n	8006c70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e035      	b.n	8006ce0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c7c:	d108      	bne.n	8006c90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c8c:	611a      	str	r2, [r3, #16]
 8006c8e:	e01b      	b.n	8006cc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c90:	897b      	ldrh	r3, [r7, #10]
 8006c92:	11db      	asrs	r3, r3, #7
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0306 	and.w	r3, r3, #6
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f063 030f 	orn	r3, r3, #15
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	490e      	ldr	r1, [pc, #56]	; (8006ce8 <I2C_MasterRequestWrite+0xfc>)
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 fac1 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e010      	b.n	8006ce0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006cbe:	897b      	ldrh	r3, [r7, #10]
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4907      	ldr	r1, [pc, #28]	; (8006cec <I2C_MasterRequestWrite+0x100>)
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fab1 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	00010008 	.word	0x00010008
 8006cec:	00010002 	.word	0x00010002

08006cf0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d006      	beq.n	8006d2a <I2C_MasterRequestRead+0x3a>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d003      	beq.n	8006d2a <I2C_MasterRequestRead+0x3a>
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d28:	d108      	bne.n	8006d3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e00b      	b.n	8006d54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	2b11      	cmp	r3, #17
 8006d42:	d107      	bne.n	8006d54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fa11 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00d      	beq.n	8006d88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7a:	d103      	bne.n	8006d84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e079      	b.n	8006e7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d90:	d108      	bne.n	8006da4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d92:	897b      	ldrh	r3, [r7, #10]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	f043 0301 	orr.w	r3, r3, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	611a      	str	r2, [r3, #16]
 8006da2:	e05f      	b.n	8006e64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006da4:	897b      	ldrh	r3, [r7, #10]
 8006da6:	11db      	asrs	r3, r3, #7
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f003 0306 	and.w	r3, r3, #6
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	f063 030f 	orn	r3, r3, #15
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	4930      	ldr	r1, [pc, #192]	; (8006e84 <I2C_MasterRequestRead+0x194>)
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fa37 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e054      	b.n	8006e7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dd2:	897b      	ldrh	r3, [r7, #10]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	4929      	ldr	r1, [pc, #164]	; (8006e88 <I2C_MasterRequestRead+0x198>)
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fa27 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e044      	b.n	8006e7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f9af 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	d103      	bne.n	8006e48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e017      	b.n	8006e7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006e4c:	897b      	ldrh	r3, [r7, #10]
 8006e4e:	11db      	asrs	r3, r3, #7
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 0306 	and.w	r3, r3, #6
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f063 030e 	orn	r3, r3, #14
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <I2C_MasterRequestRead+0x198>)
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f9e3 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	00010008 	.word	0x00010008
 8006e88:	00010002 	.word	0x00010002

08006e8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	817b      	strh	r3, [r7, #10]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	813b      	strh	r3, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f960 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00d      	beq.n	8006eea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006edc:	d103      	bne.n	8006ee6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e05f      	b.n	8006faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eea:	897b      	ldrh	r3, [r7, #10]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	6a3a      	ldr	r2, [r7, #32]
 8006efe:	492d      	ldr	r1, [pc, #180]	; (8006fb4 <I2C_RequestMemoryWrite+0x128>)
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f998 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e04c      	b.n	8006faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f28:	6a39      	ldr	r1, [r7, #32]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fa02 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d107      	bne.n	8006f4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e02b      	b.n	8006faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d105      	bne.n	8006f64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f58:	893b      	ldrh	r3, [r7, #8]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	611a      	str	r2, [r3, #16]
 8006f62:	e021      	b.n	8006fa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f64:	893b      	ldrh	r3, [r7, #8]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f74:	6a39      	ldr	r1, [r7, #32]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f9dc 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d107      	bne.n	8006f9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e005      	b.n	8006faa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f9e:	893b      	ldrh	r3, [r7, #8]
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	00010002 	.word	0x00010002

08006fb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	817b      	strh	r3, [r7, #10]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	813b      	strh	r3, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fe0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f8c2 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00d      	beq.n	8007026 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007018:	d103      	bne.n	8007022 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007020:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e0aa      	b.n	800717c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007026:	897b      	ldrh	r3, [r7, #10]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	6a3a      	ldr	r2, [r7, #32]
 800703a:	4952      	ldr	r1, [pc, #328]	; (8007184 <I2C_RequestMemoryRead+0x1cc>)
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f8fa 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e097      	b.n	800717c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007064:	6a39      	ldr	r1, [r7, #32]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 f964 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00d      	beq.n	800708e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	2b04      	cmp	r3, #4
 8007078:	d107      	bne.n	800708a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e076      	b.n	800717c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d105      	bne.n	80070a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007094:	893b      	ldrh	r3, [r7, #8]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	611a      	str	r2, [r3, #16]
 800709e:	e021      	b.n	80070e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b0:	6a39      	ldr	r1, [r7, #32]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f93e 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d107      	bne.n	80070d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e050      	b.n	800717c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070da:	893b      	ldrh	r3, [r7, #8]
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e6:	6a39      	ldr	r1, [r7, #32]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f923 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d107      	bne.n	800710c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e035      	b.n	800717c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800711e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	2200      	movs	r2, #0
 8007128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f82b 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00d      	beq.n	8007154 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007146:	d103      	bne.n	8007150 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800714e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e013      	b.n	800717c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007154:	897b      	ldrh	r3, [r7, #10]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	b2da      	uxtb	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	4906      	ldr	r1, [pc, #24]	; (8007184 <I2C_RequestMemoryRead+0x1cc>)
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f863 	bl	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	00010002 	.word	0x00010002

08007188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007198:	e025      	b.n	80071e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d021      	beq.n	80071e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a2:	f7fd fe99 	bl	8004ed8 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d302      	bcc.n	80071b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d116      	bne.n	80071e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f043 0220 	orr.w	r2, r3, #32
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e023      	b.n	800722e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10d      	bne.n	800720c <I2C_WaitOnFlagUntilTimeout+0x84>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	43da      	mvns	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	e00c      	b.n	8007226 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	43da      	mvns	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4013      	ands	r3, r2
 8007218:	b29b      	uxth	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	bf0c      	ite	eq
 800721e:	2301      	moveq	r3, #1
 8007220:	2300      	movne	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	429a      	cmp	r2, r3
 800722a:	d0b6      	beq.n	800719a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007244:	e051      	b.n	80072ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007254:	d123      	bne.n	800729e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007264:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800726e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f043 0204 	orr.w	r2, r3, #4
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e046      	b.n	800732c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d021      	beq.n	80072ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a6:	f7fd fe17 	bl	8004ed8 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d302      	bcc.n	80072bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d116      	bne.n	80072ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0220 	orr.w	r2, r3, #32
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e020      	b.n	800732c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d10c      	bne.n	800730e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	43da      	mvns	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4013      	ands	r3, r2
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	bf14      	ite	ne
 8007306:	2301      	movne	r3, #1
 8007308:	2300      	moveq	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	e00b      	b.n	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	43da      	mvns	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4013      	ands	r3, r2
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf14      	ite	ne
 8007320:	2301      	movne	r3, #1
 8007322:	2300      	moveq	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d18d      	bne.n	8007246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007340:	e02d      	b.n	800739e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f8ce 	bl	80074e4 <I2C_IsAcknowledgeFailed>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e02d      	b.n	80073ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d021      	beq.n	800739e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735a:	f7fd fdbd 	bl	8004ed8 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d116      	bne.n	800739e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e007      	b.n	80073ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d1ca      	bne.n	8007342 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073c2:	e02d      	b.n	8007420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f88d 	bl	80074e4 <I2C_IsAcknowledgeFailed>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e02d      	b.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d021      	beq.n	8007420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073dc:	f7fd fd7c 	bl	8004ed8 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d302      	bcc.n	80073f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d116      	bne.n	8007420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e007      	b.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b04      	cmp	r3, #4
 800742c:	d1ca      	bne.n	80073c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007444:	e042      	b.n	80074cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f003 0310 	and.w	r3, r3, #16
 8007450:	2b10      	cmp	r3, #16
 8007452:	d119      	bne.n	8007488 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0210 	mvn.w	r2, #16
 800745c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e029      	b.n	80074dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007488:	f7fd fd26 	bl	8004ed8 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	d302      	bcc.n	800749e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d116      	bne.n	80074cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e007      	b.n	80074dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d1b5      	bne.n	8007446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074fa:	d11b      	bne.n	8007534 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007504:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	f043 0204 	orr.w	r2, r3, #4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e26c      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8087 	beq.w	800766e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007560:	4b92      	ldr	r3, [pc, #584]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f003 030c 	and.w	r3, r3, #12
 8007568:	2b04      	cmp	r3, #4
 800756a:	d00c      	beq.n	8007586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800756c:	4b8f      	ldr	r3, [pc, #572]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f003 030c 	and.w	r3, r3, #12
 8007574:	2b08      	cmp	r3, #8
 8007576:	d112      	bne.n	800759e <HAL_RCC_OscConfig+0x5e>
 8007578:	4b8c      	ldr	r3, [pc, #560]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007584:	d10b      	bne.n	800759e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007586:	4b89      	ldr	r3, [pc, #548]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d06c      	beq.n	800766c <HAL_RCC_OscConfig+0x12c>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d168      	bne.n	800766c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e246      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a6:	d106      	bne.n	80075b6 <HAL_RCC_OscConfig+0x76>
 80075a8:	4b80      	ldr	r3, [pc, #512]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a7f      	ldr	r2, [pc, #508]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e02e      	b.n	8007614 <HAL_RCC_OscConfig+0xd4>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10c      	bne.n	80075d8 <HAL_RCC_OscConfig+0x98>
 80075be:	4b7b      	ldr	r3, [pc, #492]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a7a      	ldr	r2, [pc, #488]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	4b78      	ldr	r3, [pc, #480]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a77      	ldr	r2, [pc, #476]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e01d      	b.n	8007614 <HAL_RCC_OscConfig+0xd4>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075e0:	d10c      	bne.n	80075fc <HAL_RCC_OscConfig+0xbc>
 80075e2:	4b72      	ldr	r3, [pc, #456]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a71      	ldr	r2, [pc, #452]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a6e      	ldr	r2, [pc, #440]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	e00b      	b.n	8007614 <HAL_RCC_OscConfig+0xd4>
 80075fc:	4b6b      	ldr	r3, [pc, #428]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a6a      	ldr	r2, [pc, #424]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	4b68      	ldr	r3, [pc, #416]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a67      	ldr	r2, [pc, #412]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 800760e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d013      	beq.n	8007644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761c:	f7fd fc5c 	bl	8004ed8 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007624:	f7fd fc58 	bl	8004ed8 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b64      	cmp	r3, #100	; 0x64
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e1fa      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007636:	4b5d      	ldr	r3, [pc, #372]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f0      	beq.n	8007624 <HAL_RCC_OscConfig+0xe4>
 8007642:	e014      	b.n	800766e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007644:	f7fd fc48 	bl	8004ed8 <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764a:	e008      	b.n	800765e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800764c:	f7fd fc44 	bl	8004ed8 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b64      	cmp	r3, #100	; 0x64
 8007658:	d901      	bls.n	800765e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e1e6      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800765e:	4b53      	ldr	r3, [pc, #332]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f0      	bne.n	800764c <HAL_RCC_OscConfig+0x10c>
 800766a:	e000      	b.n	800766e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800766c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d063      	beq.n	8007742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800767a:	4b4c      	ldr	r3, [pc, #304]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f003 030c 	and.w	r3, r3, #12
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007686:	4b49      	ldr	r3, [pc, #292]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f003 030c 	and.w	r3, r3, #12
 800768e:	2b08      	cmp	r3, #8
 8007690:	d11c      	bne.n	80076cc <HAL_RCC_OscConfig+0x18c>
 8007692:	4b46      	ldr	r3, [pc, #280]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d116      	bne.n	80076cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769e:	4b43      	ldr	r3, [pc, #268]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HAL_RCC_OscConfig+0x176>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d001      	beq.n	80076b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e1ba      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b6:	4b3d      	ldr	r3, [pc, #244]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4939      	ldr	r1, [pc, #228]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ca:	e03a      	b.n	8007742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d020      	beq.n	8007716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076d4:	4b36      	ldr	r3, [pc, #216]	; (80077b0 <HAL_RCC_OscConfig+0x270>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076da:	f7fd fbfd 	bl	8004ed8 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076e2:	f7fd fbf9 	bl	8004ed8 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e19b      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f4:	4b2d      	ldr	r3, [pc, #180]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0f0      	beq.n	80076e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007700:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	4927      	ldr	r1, [pc, #156]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007710:	4313      	orrs	r3, r2
 8007712:	600b      	str	r3, [r1, #0]
 8007714:	e015      	b.n	8007742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007716:	4b26      	ldr	r3, [pc, #152]	; (80077b0 <HAL_RCC_OscConfig+0x270>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771c:	f7fd fbdc 	bl	8004ed8 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007724:	f7fd fbd8 	bl	8004ed8 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e17a      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007736:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d03a      	beq.n	80077c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d019      	beq.n	800778a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007756:	4b17      	ldr	r3, [pc, #92]	; (80077b4 <HAL_RCC_OscConfig+0x274>)
 8007758:	2201      	movs	r2, #1
 800775a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800775c:	f7fd fbbc 	bl	8004ed8 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007764:	f7fd fbb8 	bl	8004ed8 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e15a      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <HAL_RCC_OscConfig+0x26c>)
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f0      	beq.n	8007764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007782:	2001      	movs	r0, #1
 8007784:	f000 fad8 	bl	8007d38 <RCC_Delay>
 8007788:	e01c      	b.n	80077c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <HAL_RCC_OscConfig+0x274>)
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007790:	f7fd fba2 	bl	8004ed8 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007796:	e00f      	b.n	80077b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007798:	f7fd fb9e 	bl	8004ed8 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d908      	bls.n	80077b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e140      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
 80077aa:	bf00      	nop
 80077ac:	40021000 	.word	0x40021000
 80077b0:	42420000 	.word	0x42420000
 80077b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b8:	4b9e      	ldr	r3, [pc, #632]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e9      	bne.n	8007798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a6 	beq.w	800791e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077d6:	4b97      	ldr	r3, [pc, #604]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e2:	4b94      	ldr	r3, [pc, #592]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4a93      	ldr	r2, [pc, #588]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80077e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ec:	61d3      	str	r3, [r2, #28]
 80077ee:	4b91      	ldr	r3, [pc, #580]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f6:	60bb      	str	r3, [r7, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077fa:	2301      	movs	r3, #1
 80077fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077fe:	4b8e      	ldr	r3, [pc, #568]	; (8007a38 <HAL_RCC_OscConfig+0x4f8>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007806:	2b00      	cmp	r3, #0
 8007808:	d118      	bne.n	800783c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800780a:	4b8b      	ldr	r3, [pc, #556]	; (8007a38 <HAL_RCC_OscConfig+0x4f8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a8a      	ldr	r2, [pc, #552]	; (8007a38 <HAL_RCC_OscConfig+0x4f8>)
 8007810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007816:	f7fd fb5f 	bl	8004ed8 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800781c:	e008      	b.n	8007830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800781e:	f7fd fb5b 	bl	8004ed8 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b64      	cmp	r3, #100	; 0x64
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e0fd      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007830:	4b81      	ldr	r3, [pc, #516]	; (8007a38 <HAL_RCC_OscConfig+0x4f8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f0      	beq.n	800781e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d106      	bne.n	8007852 <HAL_RCC_OscConfig+0x312>
 8007844:	4b7b      	ldr	r3, [pc, #492]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	4a7a      	ldr	r2, [pc, #488]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800784a:	f043 0301 	orr.w	r3, r3, #1
 800784e:	6213      	str	r3, [r2, #32]
 8007850:	e02d      	b.n	80078ae <HAL_RCC_OscConfig+0x36e>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10c      	bne.n	8007874 <HAL_RCC_OscConfig+0x334>
 800785a:	4b76      	ldr	r3, [pc, #472]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	4a75      	ldr	r2, [pc, #468]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007860:	f023 0301 	bic.w	r3, r3, #1
 8007864:	6213      	str	r3, [r2, #32]
 8007866:	4b73      	ldr	r3, [pc, #460]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	4a72      	ldr	r2, [pc, #456]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800786c:	f023 0304 	bic.w	r3, r3, #4
 8007870:	6213      	str	r3, [r2, #32]
 8007872:	e01c      	b.n	80078ae <HAL_RCC_OscConfig+0x36e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b05      	cmp	r3, #5
 800787a:	d10c      	bne.n	8007896 <HAL_RCC_OscConfig+0x356>
 800787c:	4b6d      	ldr	r3, [pc, #436]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	4a6c      	ldr	r2, [pc, #432]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007882:	f043 0304 	orr.w	r3, r3, #4
 8007886:	6213      	str	r3, [r2, #32]
 8007888:	4b6a      	ldr	r3, [pc, #424]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	4a69      	ldr	r2, [pc, #420]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800788e:	f043 0301 	orr.w	r3, r3, #1
 8007892:	6213      	str	r3, [r2, #32]
 8007894:	e00b      	b.n	80078ae <HAL_RCC_OscConfig+0x36e>
 8007896:	4b67      	ldr	r3, [pc, #412]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	4a66      	ldr	r2, [pc, #408]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800789c:	f023 0301 	bic.w	r3, r3, #1
 80078a0:	6213      	str	r3, [r2, #32]
 80078a2:	4b64      	ldr	r3, [pc, #400]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	4a63      	ldr	r2, [pc, #396]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80078a8:	f023 0304 	bic.w	r3, r3, #4
 80078ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d015      	beq.n	80078e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078b6:	f7fd fb0f 	bl	8004ed8 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078bc:	e00a      	b.n	80078d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078be:	f7fd fb0b 	bl	8004ed8 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e0ab      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d4:	4b57      	ldr	r3, [pc, #348]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0ee      	beq.n	80078be <HAL_RCC_OscConfig+0x37e>
 80078e0:	e014      	b.n	800790c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078e2:	f7fd faf9 	bl	8004ed8 <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e8:	e00a      	b.n	8007900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ea:	f7fd faf5 	bl	8004ed8 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e095      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007900:	4b4c      	ldr	r3, [pc, #304]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1ee      	bne.n	80078ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d105      	bne.n	800791e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007912:	4b48      	ldr	r3, [pc, #288]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	4a47      	ldr	r2, [pc, #284]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800791c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8081 	beq.w	8007a2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 030c 	and.w	r3, r3, #12
 8007930:	2b08      	cmp	r3, #8
 8007932:	d061      	beq.n	80079f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d146      	bne.n	80079ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793c:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <HAL_RCC_OscConfig+0x4fc>)
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007942:	f7fd fac9 	bl	8004ed8 <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007948:	e008      	b.n	800795c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800794a:	f7fd fac5 	bl	8004ed8 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d901      	bls.n	800795c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e067      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800795c:	4b35      	ldr	r3, [pc, #212]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f0      	bne.n	800794a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007970:	d108      	bne.n	8007984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007972:	4b30      	ldr	r3, [pc, #192]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	492d      	ldr	r1, [pc, #180]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007980:	4313      	orrs	r3, r2
 8007982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007984:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a19      	ldr	r1, [r3, #32]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	430b      	orrs	r3, r1
 8007996:	4927      	ldr	r1, [pc, #156]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007998:	4313      	orrs	r3, r2
 800799a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800799c:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <HAL_RCC_OscConfig+0x4fc>)
 800799e:	2201      	movs	r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a2:	f7fd fa99 	bl	8004ed8 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079a8:	e008      	b.n	80079bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079aa:	f7fd fa95 	bl	8004ed8 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e037      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079bc:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0f0      	beq.n	80079aa <HAL_RCC_OscConfig+0x46a>
 80079c8:	e02f      	b.n	8007a2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ca:	4b1c      	ldr	r3, [pc, #112]	; (8007a3c <HAL_RCC_OscConfig+0x4fc>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d0:	f7fd fa82 	bl	8004ed8 <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d8:	f7fd fa7e 	bl	8004ed8 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e020      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0x498>
 80079f6:	e018      	b.n	8007a2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e013      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <HAL_RCC_OscConfig+0x4f4>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d106      	bne.n	8007a26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d001      	beq.n	8007a2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40021000 	.word	0x40021000
 8007a38:	40007000 	.word	0x40007000
 8007a3c:	42420060 	.word	0x42420060

08007a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e0d0      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a54:	4b6a      	ldr	r3, [pc, #424]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d910      	bls.n	8007a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a62:	4b67      	ldr	r3, [pc, #412]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f023 0207 	bic.w	r2, r3, #7
 8007a6a:	4965      	ldr	r1, [pc, #404]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a72:	4b63      	ldr	r3, [pc, #396]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d001      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0b8      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d020      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a9c:	4b59      	ldr	r3, [pc, #356]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4a58      	ldr	r2, [pc, #352]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ab4:	4b53      	ldr	r3, [pc, #332]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a52      	ldr	r2, [pc, #328]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007aba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ac0:	4b50      	ldr	r3, [pc, #320]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	494d      	ldr	r1, [pc, #308]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d040      	beq.n	8007b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae6:	4b47      	ldr	r3, [pc, #284]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d115      	bne.n	8007b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e07f      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d107      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007afe:	4b41      	ldr	r3, [pc, #260]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e073      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b0e:	4b3d      	ldr	r3, [pc, #244]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e06b      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b1e:	4b39      	ldr	r3, [pc, #228]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f023 0203 	bic.w	r2, r3, #3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	4936      	ldr	r1, [pc, #216]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b30:	f7fd f9d2 	bl	8004ed8 <HAL_GetTick>
 8007b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b36:	e00a      	b.n	8007b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b38:	f7fd f9ce 	bl	8004ed8 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e053      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4e:	4b2d      	ldr	r3, [pc, #180]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f003 020c 	and.w	r2, r3, #12
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d1eb      	bne.n	8007b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b60:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d210      	bcs.n	8007b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6e:	4b24      	ldr	r3, [pc, #144]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f023 0207 	bic.w	r2, r3, #7
 8007b76:	4922      	ldr	r1, [pc, #136]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7e:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <HAL_RCC_ClockConfig+0x1c0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d001      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e032      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b9c:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	4916      	ldr	r1, [pc, #88]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bba:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	490e      	ldr	r1, [pc, #56]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bce:	f000 f821 	bl	8007c14 <HAL_RCC_GetSysClockFreq>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	091b      	lsrs	r3, r3, #4
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	490a      	ldr	r1, [pc, #40]	; (8007c08 <HAL_RCC_ClockConfig+0x1c8>)
 8007be0:	5ccb      	ldrb	r3, [r1, r3]
 8007be2:	fa22 f303 	lsr.w	r3, r2, r3
 8007be6:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <HAL_RCC_ClockConfig+0x1cc>)
 8007be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <HAL_RCC_ClockConfig+0x1d0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fd f930 	bl	8004e54 <HAL_InitTick>

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40022000 	.word	0x40022000
 8007c04:	40021000 	.word	0x40021000
 8007c08:	0800edec 	.word	0x0800edec
 8007c0c:	20000004 	.word	0x20000004
 8007c10:	20000008 	.word	0x20000008

08007c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c14:	b490      	push	{r4, r7}
 8007c16:	b08a      	sub	sp, #40	; 0x28
 8007c18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007c1a:	4b2a      	ldr	r3, [pc, #168]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007c1c:	1d3c      	adds	r4, r7, #4
 8007c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007c24:	f240 2301 	movw	r3, #513	; 0x201
 8007c28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	2300      	movs	r3, #0
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007c3e:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 030c 	and.w	r3, r3, #12
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d002      	beq.n	8007c54 <HAL_RCC_GetSysClockFreq+0x40>
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d003      	beq.n	8007c5a <HAL_RCC_GetSysClockFreq+0x46>
 8007c52:	e02d      	b.n	8007cb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c54:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c56:	623b      	str	r3, [r7, #32]
      break;
 8007c58:	e02d      	b.n	8007cb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	0c9b      	lsrs	r3, r3, #18
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007c66:	4413      	add	r3, r2
 8007c68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007c6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d013      	beq.n	8007ca0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c78:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	0c5b      	lsrs	r3, r3, #17
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007c86:	4413      	add	r3, r2
 8007c88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007c8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	4a0e      	ldr	r2, [pc, #56]	; (8007ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c92:	fb02 f203 	mul.w	r2, r2, r3
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	e004      	b.n	8007caa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	4a0b      	ldr	r2, [pc, #44]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ca4:	fb02 f303 	mul.w	r3, r2, r3
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	623b      	str	r3, [r7, #32]
      break;
 8007cae:	e002      	b.n	8007cb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007cb0:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cb2:	623b      	str	r3, [r7, #32]
      break;
 8007cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3728      	adds	r7, #40	; 0x28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc90      	pop	{r4, r7}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	0800eddc 	.word	0x0800eddc
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	007a1200 	.word	0x007a1200
 8007cd0:	003d0900 	.word	0x003d0900

08007cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cd8:	4b02      	ldr	r3, [pc, #8]	; (8007ce4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007cda:	681b      	ldr	r3, [r3, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr
 8007ce4:	20000004 	.word	0x20000004

08007ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cec:	f7ff fff2 	bl	8007cd4 <HAL_RCC_GetHCLKFreq>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	0a1b      	lsrs	r3, r3, #8
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	4903      	ldr	r1, [pc, #12]	; (8007d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cfe:	5ccb      	ldrb	r3, [r1, r3]
 8007d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	0800edfc 	.word	0x0800edfc

08007d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d14:	f7ff ffde 	bl	8007cd4 <HAL_RCC_GetHCLKFreq>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	0adb      	lsrs	r3, r3, #11
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	4903      	ldr	r1, [pc, #12]	; (8007d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d26:	5ccb      	ldrb	r3, [r1, r3]
 8007d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	40021000 	.word	0x40021000
 8007d34:	0800edfc 	.word	0x0800edfc

08007d38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <RCC_Delay+0x34>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a0a      	ldr	r2, [pc, #40]	; (8007d70 <RCC_Delay+0x38>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	0a5b      	lsrs	r3, r3, #9
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	fb02 f303 	mul.w	r3, r2, r3
 8007d52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007d54:	bf00      	nop
  }
  while (Delay --);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1e5a      	subs	r2, r3, #1
 8007d5a:	60fa      	str	r2, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1f9      	bne.n	8007d54 <RCC_Delay+0x1c>
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr
 8007d6c:	20000004 	.word	0x20000004
 8007d70:	10624dd3 	.word	0x10624dd3

08007d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e076      	b.n	8007e74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d108      	bne.n	8007da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d96:	d009      	beq.n	8007dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	61da      	str	r2, [r3, #28]
 8007d9e:	e005      	b.n	8007dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fc fa36 	bl	8004238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e30:	ea42 0103 	orr.w	r1, r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	0c1a      	lsrs	r2, r3, #16
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f002 0204 	and.w	r2, r2, #4
 8007e52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69da      	ldr	r2, [r3, #28]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e041      	b.n	8007f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fc fcb0 	bl	8004808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f000 fe98 	bl	8008bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d001      	beq.n	8007f34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e032      	b.n	8007f9a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_TIM_Base_Start+0x88>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00e      	beq.n	8007f64 <HAL_TIM_Base_Start+0x48>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4e:	d009      	beq.n	8007f64 <HAL_TIM_Base_Start+0x48>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <HAL_TIM_Base_Start+0x8c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d004      	beq.n	8007f64 <HAL_TIM_Base_Start+0x48>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a13      	ldr	r2, [pc, #76]	; (8007fac <HAL_TIM_Base_Start+0x90>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d111      	bne.n	8007f88 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b06      	cmp	r3, #6
 8007f74:	d010      	beq.n	8007f98 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0201 	orr.w	r2, r2, #1
 8007f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f86:	e007      	b.n	8007f98 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800

08007fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d001      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e03a      	b.n	800803e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a18      	ldr	r2, [pc, #96]	; (8008048 <HAL_TIM_Base_Start_IT+0x98>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00e      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x58>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff2:	d009      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x58>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	; (800804c <HAL_TIM_Base_Start_IT+0x9c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d004      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x58>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a13      	ldr	r2, [pc, #76]	; (8008050 <HAL_TIM_Base_Start_IT+0xa0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d111      	bne.n	800802c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b06      	cmp	r3, #6
 8008018:	d010      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0201 	orr.w	r2, r2, #1
 8008028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802a:	e007      	b.n	800803c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr
 8008048:	40012c00 	.word	0x40012c00
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800

08008054 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e041      	b.n	80080ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fc fba6 	bl	80047cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3304      	adds	r3, #4
 8008090:	4619      	mov	r1, r3
 8008092:	4610      	mov	r0, r2
 8008094:	f000 fdac 	bl	8008bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <HAL_TIM_PWM_Start+0x24>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b01      	cmp	r3, #1
 800810e:	bf14      	ite	ne
 8008110:	2301      	movne	r3, #1
 8008112:	2300      	moveq	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e022      	b.n	800815e <HAL_TIM_PWM_Start+0x6a>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b04      	cmp	r3, #4
 800811c:	d109      	bne.n	8008132 <HAL_TIM_PWM_Start+0x3e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b01      	cmp	r3, #1
 8008128:	bf14      	ite	ne
 800812a:	2301      	movne	r3, #1
 800812c:	2300      	moveq	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	e015      	b.n	800815e <HAL_TIM_PWM_Start+0x6a>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b08      	cmp	r3, #8
 8008136:	d109      	bne.n	800814c <HAL_TIM_PWM_Start+0x58>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	bf14      	ite	ne
 8008144:	2301      	movne	r3, #1
 8008146:	2300      	moveq	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	e008      	b.n	800815e <HAL_TIM_PWM_Start+0x6a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b01      	cmp	r3, #1
 8008156:	bf14      	ite	ne
 8008158:	2301      	movne	r3, #1
 800815a:	2300      	moveq	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e05e      	b.n	8008224 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <HAL_TIM_PWM_Start+0x82>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008174:	e013      	b.n	800819e <HAL_TIM_PWM_Start+0xaa>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d104      	bne.n	8008186 <HAL_TIM_PWM_Start+0x92>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008184:	e00b      	b.n	800819e <HAL_TIM_PWM_Start+0xaa>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d104      	bne.n	8008196 <HAL_TIM_PWM_Start+0xa2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008194:	e003      	b.n	800819e <HAL_TIM_PWM_Start+0xaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2202      	movs	r2, #2
 800819a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2201      	movs	r2, #1
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 f8af 	bl	800930a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1e      	ldr	r2, [pc, #120]	; (800822c <HAL_TIM_PWM_Start+0x138>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d107      	bne.n	80081c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a18      	ldr	r2, [pc, #96]	; (800822c <HAL_TIM_PWM_Start+0x138>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00e      	beq.n	80081ee <HAL_TIM_PWM_Start+0xfa>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d8:	d009      	beq.n	80081ee <HAL_TIM_PWM_Start+0xfa>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a14      	ldr	r2, [pc, #80]	; (8008230 <HAL_TIM_PWM_Start+0x13c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d004      	beq.n	80081ee <HAL_TIM_PWM_Start+0xfa>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a12      	ldr	r2, [pc, #72]	; (8008234 <HAL_TIM_PWM_Start+0x140>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d111      	bne.n	8008212 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b06      	cmp	r3, #6
 80081fe:	d010      	beq.n	8008222 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008210:	e007      	b.n	8008222 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0201 	orr.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40012c00 	.word	0x40012c00
 8008230:	40000400 	.word	0x40000400
 8008234:	40000800 	.word	0x40000800

08008238 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e041      	b.n	80082ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f839 	bl	80082d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f000 fcba 	bl	8008bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr

080082e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <HAL_TIM_IC_Start_IT+0x1a>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	e013      	b.n	800832a <HAL_TIM_IC_Start_IT+0x42>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b04      	cmp	r3, #4
 8008306:	d104      	bne.n	8008312 <HAL_TIM_IC_Start_IT+0x2a>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800830e:	b2db      	uxtb	r3, r3
 8008310:	e00b      	b.n	800832a <HAL_TIM_IC_Start_IT+0x42>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d104      	bne.n	8008322 <HAL_TIM_IC_Start_IT+0x3a>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800831e:	b2db      	uxtb	r3, r3
 8008320:	e003      	b.n	800832a <HAL_TIM_IC_Start_IT+0x42>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008328:	b2db      	uxtb	r3, r3
 800832a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d104      	bne.n	800833c <HAL_TIM_IC_Start_IT+0x54>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008338:	b2db      	uxtb	r3, r3
 800833a:	e013      	b.n	8008364 <HAL_TIM_IC_Start_IT+0x7c>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b04      	cmp	r3, #4
 8008340:	d104      	bne.n	800834c <HAL_TIM_IC_Start_IT+0x64>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008348:	b2db      	uxtb	r3, r3
 800834a:	e00b      	b.n	8008364 <HAL_TIM_IC_Start_IT+0x7c>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b08      	cmp	r3, #8
 8008350:	d104      	bne.n	800835c <HAL_TIM_IC_Start_IT+0x74>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008358:	b2db      	uxtb	r3, r3
 800835a:	e003      	b.n	8008364 <HAL_TIM_IC_Start_IT+0x7c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008362:	b2db      	uxtb	r3, r3
 8008364:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d102      	bne.n	8008372 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d001      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e0b3      	b.n	80084de <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <HAL_TIM_IC_Start_IT+0x9e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008384:	e013      	b.n	80083ae <HAL_TIM_IC_Start_IT+0xc6>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b04      	cmp	r3, #4
 800838a:	d104      	bne.n	8008396 <HAL_TIM_IC_Start_IT+0xae>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008394:	e00b      	b.n	80083ae <HAL_TIM_IC_Start_IT+0xc6>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b08      	cmp	r3, #8
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_IC_Start_IT+0xbe>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083a4:	e003      	b.n	80083ae <HAL_TIM_IC_Start_IT+0xc6>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2202      	movs	r2, #2
 80083aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d104      	bne.n	80083be <HAL_TIM_IC_Start_IT+0xd6>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083bc:	e013      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0xfe>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d104      	bne.n	80083ce <HAL_TIM_IC_Start_IT+0xe6>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083cc:	e00b      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0xfe>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d104      	bne.n	80083de <HAL_TIM_IC_Start_IT+0xf6>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083dc:	e003      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0xfe>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2202      	movs	r2, #2
 80083e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b0c      	cmp	r3, #12
 80083ea:	d841      	bhi.n	8008470 <HAL_TIM_IC_Start_IT+0x188>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <HAL_TIM_IC_Start_IT+0x10c>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008429 	.word	0x08008429
 80083f8:	08008471 	.word	0x08008471
 80083fc:	08008471 	.word	0x08008471
 8008400:	08008471 	.word	0x08008471
 8008404:	0800843b 	.word	0x0800843b
 8008408:	08008471 	.word	0x08008471
 800840c:	08008471 	.word	0x08008471
 8008410:	08008471 	.word	0x08008471
 8008414:	0800844d 	.word	0x0800844d
 8008418:	08008471 	.word	0x08008471
 800841c:	08008471 	.word	0x08008471
 8008420:	08008471 	.word	0x08008471
 8008424:	0800845f 	.word	0x0800845f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0202 	orr.w	r2, r2, #2
 8008436:	60da      	str	r2, [r3, #12]
      break;
 8008438:	e01b      	b.n	8008472 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0204 	orr.w	r2, r2, #4
 8008448:	60da      	str	r2, [r3, #12]
      break;
 800844a:	e012      	b.n	8008472 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0208 	orr.w	r2, r2, #8
 800845a:	60da      	str	r2, [r3, #12]
      break;
 800845c:	e009      	b.n	8008472 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0210 	orr.w	r2, r2, #16
 800846c:	60da      	str	r2, [r3, #12]
      break;
 800846e:	e000      	b.n	8008472 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8008470:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2201      	movs	r2, #1
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 ff45 	bl	800930a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <HAL_TIM_IC_Start_IT+0x200>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00e      	beq.n	80084a8 <HAL_TIM_IC_Start_IT+0x1c0>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d009      	beq.n	80084a8 <HAL_TIM_IC_Start_IT+0x1c0>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a14      	ldr	r2, [pc, #80]	; (80084ec <HAL_TIM_IC_Start_IT+0x204>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <HAL_TIM_IC_Start_IT+0x1c0>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <HAL_TIM_IC_Start_IT+0x208>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d111      	bne.n	80084cc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b06      	cmp	r3, #6
 80084b8:	d010      	beq.n	80084dc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 0201 	orr.w	r2, r2, #1
 80084c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ca:	e007      	b.n	80084dc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800

080084f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b02      	cmp	r3, #2
 8008508:	d122      	bne.n	8008550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b02      	cmp	r3, #2
 8008516:	d11b      	bne.n	8008550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0202 	mvn.w	r2, #2
 8008520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7fb fd42 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fb3a 	bl	8008bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fb40 	bl	8008bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b04      	cmp	r3, #4
 800855c:	d122      	bne.n	80085a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b04      	cmp	r3, #4
 800856a:	d11b      	bne.n	80085a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0204 	mvn.w	r2, #4
 8008574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fb fd18 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 8008590:	e005      	b.n	800859e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fb10 	bl	8008bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fb16 	bl	8008bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b08      	cmp	r3, #8
 80085b0:	d122      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f003 0308 	and.w	r3, r3, #8
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d11b      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f06f 0208 	mvn.w	r2, #8
 80085c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2204      	movs	r2, #4
 80085ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fb fcee 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 80085e4:	e005      	b.n	80085f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fae6 	bl	8008bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 faec 	bl	8008bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b10      	cmp	r3, #16
 8008604:	d122      	bne.n	800864c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b10      	cmp	r3, #16
 8008612:	d11b      	bne.n	800864c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0210 	mvn.w	r2, #16
 800861c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2208      	movs	r2, #8
 8008622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fb fcc4 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 8008638:	e005      	b.n	8008646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fabc 	bl	8008bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fac2 	bl	8008bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b01      	cmp	r3, #1
 8008658:	d10e      	bne.n	8008678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b01      	cmp	r3, #1
 8008666:	d107      	bne.n	8008678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0201 	mvn.w	r2, #1
 8008670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fa fefc 	bl	8003470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008682:	2b80      	cmp	r3, #128	; 0x80
 8008684:	d10e      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008690:	2b80      	cmp	r3, #128	; 0x80
 8008692:	d107      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800869c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 ffae 	bl	8009600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ae:	2b40      	cmp	r3, #64	; 0x40
 80086b0:	d10e      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086bc:	2b40      	cmp	r3, #64	; 0x40
 80086be:	d107      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa86 	bl	8008bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d10e      	bne.n	80086fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d107      	bne.n	80086fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0220 	mvn.w	r2, #32
 80086f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 ff79 	bl	80095ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008716:	2b01      	cmp	r3, #1
 8008718:	d101      	bne.n	800871e <HAL_TIM_IC_ConfigChannel+0x1a>
 800871a:	2302      	movs	r3, #2
 800871c:	e082      	b.n	8008824 <HAL_TIM_IC_ConfigChannel+0x120>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d11b      	bne.n	8008764 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f000 fc42 	bl	8008fc4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699a      	ldr	r2, [r3, #24]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 020c 	bic.w	r2, r2, #12
 800874e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6999      	ldr	r1, [r3, #24]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	619a      	str	r2, [r3, #24]
 8008762:	e05a      	b.n	800881a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b04      	cmp	r3, #4
 8008768:	d11c      	bne.n	80087a4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6819      	ldr	r1, [r3, #0]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f000 fcab 	bl	80090d4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800878c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6999      	ldr	r1, [r3, #24]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	021a      	lsls	r2, r3, #8
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	619a      	str	r2, [r3, #24]
 80087a2:	e03a      	b.n	800881a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d11b      	bne.n	80087e2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6818      	ldr	r0, [r3, #0]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f000 fcf6 	bl	80091aa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69da      	ldr	r2, [r3, #28]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 020c 	bic.w	r2, r2, #12
 80087cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69d9      	ldr	r1, [r3, #28]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	61da      	str	r2, [r3, #28]
 80087e0:	e01b      	b.n	800881a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6819      	ldr	r1, [r3, #0]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f000 fd15 	bl	8009220 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69da      	ldr	r2, [r3, #28]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008804:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69d9      	ldr	r1, [r3, #28]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	021a      	lsls	r2, r3, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008842:	2302      	movs	r3, #2
 8008844:	e0ac      	b.n	80089a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b0c      	cmp	r3, #12
 8008852:	f200 809f 	bhi.w	8008994 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008891 	.word	0x08008891
 8008860:	08008995 	.word	0x08008995
 8008864:	08008995 	.word	0x08008995
 8008868:	08008995 	.word	0x08008995
 800886c:	080088d1 	.word	0x080088d1
 8008870:	08008995 	.word	0x08008995
 8008874:	08008995 	.word	0x08008995
 8008878:	08008995 	.word	0x08008995
 800887c:	08008913 	.word	0x08008913
 8008880:	08008995 	.word	0x08008995
 8008884:	08008995 	.word	0x08008995
 8008888:	08008995 	.word	0x08008995
 800888c:	08008953 	.word	0x08008953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fa0c 	bl	8008cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0208 	orr.w	r2, r2, #8
 80088aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0204 	bic.w	r2, r2, #4
 80088ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6999      	ldr	r1, [r3, #24]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	619a      	str	r2, [r3, #24]
      break;
 80088ce:	e062      	b.n	8008996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fa52 	bl	8008d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6999      	ldr	r1, [r3, #24]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	619a      	str	r2, [r3, #24]
      break;
 8008910:	e041      	b.n	8008996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fa9b 	bl	8008e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0208 	orr.w	r2, r2, #8
 800892c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69da      	ldr	r2, [r3, #28]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0204 	bic.w	r2, r2, #4
 800893c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69d9      	ldr	r1, [r3, #28]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	61da      	str	r2, [r3, #28]
      break;
 8008950:	e021      	b.n	8008996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fae5 	bl	8008f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800896c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69da      	ldr	r2, [r3, #28]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69d9      	ldr	r1, [r3, #28]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	021a      	lsls	r2, r3, #8
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	61da      	str	r2, [r3, #28]
      break;
 8008992:	e000      	b.n	8008996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_TIM_ConfigClockSource+0x18>
 80089bc:	2302      	movs	r3, #2
 80089be:	e0b3      	b.n	8008b28 <HAL_TIM_ConfigClockSource+0x180>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f8:	d03e      	beq.n	8008a78 <HAL_TIM_ConfigClockSource+0xd0>
 80089fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fe:	f200 8087 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a06:	f000 8085 	beq.w	8008b14 <HAL_TIM_ConfigClockSource+0x16c>
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	d87f      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a10:	2b70      	cmp	r3, #112	; 0x70
 8008a12:	d01a      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0xa2>
 8008a14:	2b70      	cmp	r3, #112	; 0x70
 8008a16:	d87b      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a18:	2b60      	cmp	r3, #96	; 0x60
 8008a1a:	d050      	beq.n	8008abe <HAL_TIM_ConfigClockSource+0x116>
 8008a1c:	2b60      	cmp	r3, #96	; 0x60
 8008a1e:	d877      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a20:	2b50      	cmp	r3, #80	; 0x50
 8008a22:	d03c      	beq.n	8008a9e <HAL_TIM_ConfigClockSource+0xf6>
 8008a24:	2b50      	cmp	r3, #80	; 0x50
 8008a26:	d873      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d058      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x136>
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	d86f      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a30:	2b30      	cmp	r3, #48	; 0x30
 8008a32:	d064      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x156>
 8008a34:	2b30      	cmp	r3, #48	; 0x30
 8008a36:	d86b      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d060      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x156>
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d867      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d05c      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x156>
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	d05a      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008a48:	e062      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6899      	ldr	r1, [r3, #8]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f000 fc37 	bl	80092cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	609a      	str	r2, [r3, #8]
      break;
 8008a76:	e04e      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	6899      	ldr	r1, [r3, #8]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f000 fc20 	bl	80092cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a9a:	609a      	str	r2, [r3, #8]
      break;
 8008a9c:	e03b      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	6859      	ldr	r1, [r3, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f000 fae4 	bl	8009078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2150      	movs	r1, #80	; 0x50
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fbee 	bl	8009298 <TIM_ITRx_SetConfig>
      break;
 8008abc:	e02b      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6859      	ldr	r1, [r3, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f000 fb3e 	bl	800914c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2160      	movs	r1, #96	; 0x60
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fbde 	bl	8009298 <TIM_ITRx_SetConfig>
      break;
 8008adc:	e01b      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6859      	ldr	r1, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f000 fac4 	bl	8009078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2140      	movs	r1, #64	; 0x40
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fbce 	bl	8009298 <TIM_ITRx_SetConfig>
      break;
 8008afc:	e00b      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f000 fbc5 	bl	8009298 <TIM_ITRx_SetConfig>
        break;
 8008b0e:	e002      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008b10:	bf00      	nop
 8008b12:	e000      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008b14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b0c      	cmp	r3, #12
 8008b42:	d831      	bhi.n	8008ba8 <HAL_TIM_ReadCapturedValue+0x78>
 8008b44:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008b81 	.word	0x08008b81
 8008b50:	08008ba9 	.word	0x08008ba9
 8008b54:	08008ba9 	.word	0x08008ba9
 8008b58:	08008ba9 	.word	0x08008ba9
 8008b5c:	08008b8b 	.word	0x08008b8b
 8008b60:	08008ba9 	.word	0x08008ba9
 8008b64:	08008ba9 	.word	0x08008ba9
 8008b68:	08008ba9 	.word	0x08008ba9
 8008b6c:	08008b95 	.word	0x08008b95
 8008b70:	08008ba9 	.word	0x08008ba9
 8008b74:	08008ba9 	.word	0x08008ba9
 8008b78:	08008ba9 	.word	0x08008ba9
 8008b7c:	08008b9f 	.word	0x08008b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b86:	60fb      	str	r3, [r7, #12]

      break;
 8008b88:	e00f      	b.n	8008baa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	60fb      	str	r3, [r7, #12]

      break;
 8008b92:	e00a      	b.n	8008baa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	60fb      	str	r3, [r7, #12]

      break;
 8008b9c:	e005      	b.n	8008baa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba4:	60fb      	str	r3, [r7, #12]

      break;
 8008ba6:	e000      	b.n	8008baa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008ba8:	bf00      	nop
  }

  return tmpreg;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop

08008bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bc80      	pop	{r7}
 8008bc8:	4770      	bx	lr

08008bca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
	...

08008bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a29      	ldr	r2, [pc, #164]	; (8008ca8 <TIM_Base_SetConfig+0xb8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d00b      	beq.n	8008c20 <TIM_Base_SetConfig+0x30>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0e:	d007      	beq.n	8008c20 <TIM_Base_SetConfig+0x30>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a26      	ldr	r2, [pc, #152]	; (8008cac <TIM_Base_SetConfig+0xbc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_Base_SetConfig+0x30>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a25      	ldr	r2, [pc, #148]	; (8008cb0 <TIM_Base_SetConfig+0xc0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d108      	bne.n	8008c32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a1c      	ldr	r2, [pc, #112]	; (8008ca8 <TIM_Base_SetConfig+0xb8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d00b      	beq.n	8008c52 <TIM_Base_SetConfig+0x62>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c40:	d007      	beq.n	8008c52 <TIM_Base_SetConfig+0x62>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a19      	ldr	r2, [pc, #100]	; (8008cac <TIM_Base_SetConfig+0xbc>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_Base_SetConfig+0x62>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a18      	ldr	r2, [pc, #96]	; (8008cb0 <TIM_Base_SetConfig+0xc0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d108      	bne.n	8008c64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a07      	ldr	r2, [pc, #28]	; (8008ca8 <TIM_Base_SetConfig+0xb8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d103      	bne.n	8008c98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691a      	ldr	r2, [r3, #16]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	615a      	str	r2, [r3, #20]
}
 8008c9e:	bf00      	nop
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr
 8008ca8:	40012c00 	.word	0x40012c00
 8008cac:	40000400 	.word	0x40000400
 8008cb0:	40000800 	.word	0x40000800

08008cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	f023 0201 	bic.w	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 0302 	bic.w	r3, r3, #2
 8008cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	; (8008d7c <TIM_OC1_SetConfig+0xc8>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10c      	bne.n	8008d2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0308 	bic.w	r3, r3, #8
 8008d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f023 0304 	bic.w	r3, r3, #4
 8008d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a13      	ldr	r2, [pc, #76]	; (8008d7c <TIM_OC1_SetConfig+0xc8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d111      	bne.n	8008d56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	621a      	str	r2, [r3, #32]
}
 8008d70:	bf00      	nop
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	40012c00 	.word	0x40012c00

08008d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f023 0210 	bic.w	r2, r3, #16
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f023 0320 	bic.w	r3, r3, #32
 8008dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a1d      	ldr	r2, [pc, #116]	; (8008e50 <TIM_OC2_SetConfig+0xd0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d10d      	bne.n	8008dfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a14      	ldr	r2, [pc, #80]	; (8008e50 <TIM_OC2_SetConfig+0xd0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d113      	bne.n	8008e2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr
 8008e50:	40012c00 	.word	0x40012c00

08008e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a1d      	ldr	r2, [pc, #116]	; (8008f24 <TIM_OC3_SetConfig+0xd0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d10d      	bne.n	8008ece <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a14      	ldr	r2, [pc, #80]	; (8008f24 <TIM_OC3_SetConfig+0xd0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d113      	bne.n	8008efe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	621a      	str	r2, [r3, #32]
}
 8008f18:	bf00      	nop
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	40012c00 	.word	0x40012c00

08008f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	031b      	lsls	r3, r3, #12
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <TIM_OC4_SetConfig+0x98>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d109      	bne.n	8008f9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	019b      	lsls	r3, r3, #6
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	621a      	str	r2, [r3, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	371c      	adds	r7, #28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bc80      	pop	{r7}
 8008fbe:	4770      	bx	lr
 8008fc0:	40012c00 	.word	0x40012c00

08008fc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f023 0201 	bic.w	r2, r3, #1
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4a1f      	ldr	r2, [pc, #124]	; (800906c <TIM_TI1_SetConfig+0xa8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d00b      	beq.n	800900a <TIM_TI1_SetConfig+0x46>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff8:	d007      	beq.n	800900a <TIM_TI1_SetConfig+0x46>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <TIM_TI1_SetConfig+0xac>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d003      	beq.n	800900a <TIM_TI1_SetConfig+0x46>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <TIM_TI1_SetConfig+0xb0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d101      	bne.n	800900e <TIM_TI1_SetConfig+0x4a>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <TIM_TI1_SetConfig+0x4c>
 800900e:	2300      	movs	r3, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d008      	beq.n	8009026 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f023 0303 	bic.w	r3, r3, #3
 800901a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	e003      	b.n	800902e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f043 0301 	orr.w	r3, r3, #1
 800902c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	b2db      	uxtb	r3, r3
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f023 030a 	bic.w	r3, r3, #10
 8009048:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f003 030a 	and.w	r3, r3, #10
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	621a      	str	r2, [r3, #32]
}
 8009062:	bf00      	nop
 8009064:	371c      	adds	r7, #28
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr
 800906c:	40012c00 	.word	0x40012c00
 8009070:	40000400 	.word	0x40000400
 8009074:	40000800 	.word	0x40000800

08009078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	f023 0201 	bic.w	r2, r3, #1
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f023 030a 	bic.w	r3, r3, #10
 80090b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	621a      	str	r2, [r3, #32]
}
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr

080090d4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	f023 0210 	bic.w	r2, r3, #16
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	021b      	lsls	r3, r3, #8
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	031b      	lsls	r3, r3, #12
 8009118:	b29b      	uxth	r3, r3
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4313      	orrs	r3, r2
 800911e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009126:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	4313      	orrs	r3, r2
 8009134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	621a      	str	r2, [r3, #32]
}
 8009142:	bf00      	nop
 8009144:	371c      	adds	r7, #28
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	f023 0210 	bic.w	r2, r3, #16
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009176:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	031b      	lsls	r3, r3, #12
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009188:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4313      	orrs	r3, r2
 8009192:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	621a      	str	r2, [r3, #32]
}
 80091a0:	bf00      	nop
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr

080091aa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b087      	sub	sp, #28
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f023 0303 	bic.w	r3, r3, #3
 80091d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	021b      	lsls	r3, r3, #8
 8009200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	621a      	str	r2, [r3, #32]
}
 8009216:	bf00      	nop
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	bc80      	pop	{r7}
 800921e:	4770      	bx	lr

08009220 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800924c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800925e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	031b      	lsls	r3, r3, #12
 8009264:	b29b      	uxth	r3, r3
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009272:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	031b      	lsls	r3, r3, #12
 8009278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	4313      	orrs	r3, r2
 8009280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	621a      	str	r2, [r3, #32]
}
 800928e:	bf00      	nop
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	bc80      	pop	{r7}
 8009296:	4770      	bx	lr

08009298 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f043 0307 	orr.w	r3, r3, #7
 80092ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	609a      	str	r2, [r3, #8]
}
 80092c2:	bf00      	nop
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bc80      	pop	{r7}
 80092ca:	4770      	bx	lr

080092cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	021a      	lsls	r2, r3, #8
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	431a      	orrs	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	609a      	str	r2, [r3, #8]
}
 8009300:	bf00      	nop
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr

0800930a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800930a:	b480      	push	{r7}
 800930c:	b087      	sub	sp, #28
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f003 031f 	and.w	r3, r3, #31
 800931c:	2201      	movs	r2, #1
 800931e:	fa02 f303 	lsl.w	r3, r2, r3
 8009322:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6a1a      	ldr	r2, [r3, #32]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	43db      	mvns	r3, r3
 800932c:	401a      	ands	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6a1a      	ldr	r2, [r3, #32]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f003 031f 	and.w	r3, r3, #31
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	fa01 f303 	lsl.w	r3, r1, r3
 8009342:	431a      	orrs	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	621a      	str	r2, [r3, #32]
}
 8009348:	bf00      	nop
 800934a:	371c      	adds	r7, #28
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr
	...

08009354 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d109      	bne.n	8009378 <HAL_TIMEx_PWMN_Start+0x24>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b01      	cmp	r3, #1
 800936e:	bf14      	ite	ne
 8009370:	2301      	movne	r3, #1
 8009372:	2300      	moveq	r3, #0
 8009374:	b2db      	uxtb	r3, r3
 8009376:	e022      	b.n	80093be <HAL_TIMEx_PWMN_Start+0x6a>
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b04      	cmp	r3, #4
 800937c:	d109      	bne.n	8009392 <HAL_TIMEx_PWMN_Start+0x3e>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b01      	cmp	r3, #1
 8009388:	bf14      	ite	ne
 800938a:	2301      	movne	r3, #1
 800938c:	2300      	moveq	r3, #0
 800938e:	b2db      	uxtb	r3, r3
 8009390:	e015      	b.n	80093be <HAL_TIMEx_PWMN_Start+0x6a>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b08      	cmp	r3, #8
 8009396:	d109      	bne.n	80093ac <HAL_TIMEx_PWMN_Start+0x58>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	bf14      	ite	ne
 80093a4:	2301      	movne	r3, #1
 80093a6:	2300      	moveq	r3, #0
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	e008      	b.n	80093be <HAL_TIMEx_PWMN_Start+0x6a>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	bf14      	ite	ne
 80093b8:	2301      	movne	r3, #1
 80093ba:	2300      	moveq	r3, #0
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e059      	b.n	800947a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <HAL_TIMEx_PWMN_Start+0x82>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093d4:	e013      	b.n	80093fe <HAL_TIMEx_PWMN_Start+0xaa>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d104      	bne.n	80093e6 <HAL_TIMEx_PWMN_Start+0x92>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093e4:	e00b      	b.n	80093fe <HAL_TIMEx_PWMN_Start+0xaa>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d104      	bne.n	80093f6 <HAL_TIMEx_PWMN_Start+0xa2>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093f4:	e003      	b.n	80093fe <HAL_TIMEx_PWMN_Start+0xaa>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2204      	movs	r2, #4
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f903 	bl	8009612 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800941a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a18      	ldr	r2, [pc, #96]	; (8009484 <HAL_TIMEx_PWMN_Start+0x130>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d00e      	beq.n	8009444 <HAL_TIMEx_PWMN_Start+0xf0>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942e:	d009      	beq.n	8009444 <HAL_TIMEx_PWMN_Start+0xf0>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a14      	ldr	r2, [pc, #80]	; (8009488 <HAL_TIMEx_PWMN_Start+0x134>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d004      	beq.n	8009444 <HAL_TIMEx_PWMN_Start+0xf0>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a13      	ldr	r2, [pc, #76]	; (800948c <HAL_TIMEx_PWMN_Start+0x138>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d111      	bne.n	8009468 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b06      	cmp	r3, #6
 8009454:	d010      	beq.n	8009478 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0201 	orr.w	r2, r2, #1
 8009464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009466:	e007      	b.n	8009478 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	40012c00 	.word	0x40012c00
 8009488:	40000400 	.word	0x40000400
 800948c:	40000800 	.word	0x40000800

08009490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e046      	b.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a16      	ldr	r2, [pc, #88]	; (8009540 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00e      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f4:	d009      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a12      	ldr	r2, [pc, #72]	; (8009544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d004      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a10      	ldr	r2, [pc, #64]	; (8009548 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d10c      	bne.n	8009524 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	4313      	orrs	r3, r2
 800951a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	bc80      	pop	{r7}
 800953e:	4770      	bx	lr
 8009540:	40012c00 	.word	0x40012c00
 8009544:	40000400 	.word	0x40000400
 8009548:	40000800 	.word	0x40000800

0800954c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009560:	2b01      	cmp	r3, #1
 8009562:	d101      	bne.n	8009568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009564:	2302      	movs	r3, #2
 8009566:	e03d      	b.n	80095e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	4313      	orrs	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr

080095ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bc80      	pop	{r7}
 80095fe:	4770      	bx	lr

08009600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr

08009612 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009612:	b480      	push	{r7}
 8009614:	b087      	sub	sp, #28
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	2204      	movs	r2, #4
 8009626:	fa02 f303 	lsl.w	r3, r2, r3
 800962a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a1a      	ldr	r2, [r3, #32]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	43db      	mvns	r3, r3
 8009634:	401a      	ands	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a1a      	ldr	r2, [r3, #32]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	fa01 f303 	lsl.w	r3, r1, r3
 800964a:	431a      	orrs	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	621a      	str	r2, [r3, #32]
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr

0800965a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e03f      	b.n	80096ec <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d106      	bne.n	8009686 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fb fa01 	bl	8004a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2224      	movs	r2, #36	; 0x24
 800968a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800969c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fe38 	bl	800a314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695a      	ldr	r2, [r3, #20]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2220      	movs	r2, #32
 80096e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e01e      	b.n	8009744 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2224      	movs	r2, #36	; 0x24
 800970a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800971c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7fb fb02 	bl	8004d28 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af02      	add	r7, sp, #8
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	4613      	mov	r3, r2
 800975a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b20      	cmp	r3, #32
 800976a:	d17c      	bne.n	8009866 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <HAL_UART_Transmit+0x2c>
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e075      	b.n	8009868 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009782:	2b01      	cmp	r3, #1
 8009784:	d101      	bne.n	800978a <HAL_UART_Transmit+0x3e>
 8009786:	2302      	movs	r3, #2
 8009788:	e06e      	b.n	8009868 <HAL_UART_Transmit+0x11c>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2221      	movs	r2, #33	; 0x21
 800979c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80097a0:	f7fb fb9a 	bl	8004ed8 <HAL_GetTick>
 80097a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ba:	d108      	bne.n	80097ce <HAL_UART_Transmit+0x82>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	61bb      	str	r3, [r7, #24]
 80097cc:	e003      	b.n	80097d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80097de:	e02a      	b.n	8009836 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2200      	movs	r2, #0
 80097e8:	2180      	movs	r1, #128	; 0x80
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 fbc0 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e036      	b.n	8009868 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10b      	bne.n	8009818 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800980e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	3302      	adds	r3, #2
 8009814:	61bb      	str	r3, [r7, #24]
 8009816:	e007      	b.n	8009828 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	781a      	ldrb	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800983a:	b29b      	uxth	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1cf      	bne.n	80097e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2200      	movs	r2, #0
 8009848:	2140      	movs	r1, #64	; 0x40
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 fb90 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e006      	b.n	8009868 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2220      	movs	r2, #32
 800985e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	e000      	b.n	8009868 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009866:	2302      	movs	r3, #2
  }
}
 8009868:	4618      	mov	r0, r3
 800986a:	3720      	adds	r7, #32
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b20      	cmp	r3, #32
 8009888:	d153      	bne.n	8009932 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <HAL_UART_Transmit_DMA+0x26>
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e04c      	b.n	8009934 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d101      	bne.n	80098a8 <HAL_UART_Transmit_DMA+0x38>
 80098a4:	2302      	movs	r3, #2
 80098a6:	e045      	b.n	8009934 <HAL_UART_Transmit_DMA+0xc4>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	88fa      	ldrh	r2, [r7, #6]
 80098ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	88fa      	ldrh	r2, [r7, #6]
 80098c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2221      	movs	r2, #33	; 0x21
 80098cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	4a19      	ldr	r2, [pc, #100]	; (800993c <HAL_UART_Transmit_DMA+0xcc>)
 80098d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098dc:	4a18      	ldr	r2, [pc, #96]	; (8009940 <HAL_UART_Transmit_DMA+0xd0>)
 80098de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e4:	4a17      	ldr	r2, [pc, #92]	; (8009944 <HAL_UART_Transmit_DMA+0xd4>)
 80098e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ec:	2200      	movs	r2, #0
 80098ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80098f0:	f107 0308 	add.w	r3, r7, #8
 80098f4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	6819      	ldr	r1, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3304      	adds	r3, #4
 8009904:	461a      	mov	r2, r3
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	f7fb fd0a 	bl	8005320 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009914:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695a      	ldr	r2, [r3, #20]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800992c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	e000      	b.n	8009934 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009932:	2302      	movs	r3, #2
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	08009deb 	.word	0x08009deb
 8009940:	08009e3d 	.word	0x08009e3d
 8009944:	08009edd 	.word	0x08009edd

08009948 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b20      	cmp	r3, #32
 8009960:	d166      	bne.n	8009a30 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <HAL_UART_Receive_DMA+0x26>
 8009968:	88fb      	ldrh	r3, [r7, #6]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e05f      	b.n	8009a32 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_UART_Receive_DMA+0x38>
 800997c:	2302      	movs	r3, #2
 800997e:	e058      	b.n	8009a32 <HAL_UART_Receive_DMA+0xea>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	88fa      	ldrh	r2, [r7, #6]
 8009992:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2222      	movs	r2, #34	; 0x22
 800999e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a6:	4a25      	ldr	r2, [pc, #148]	; (8009a3c <HAL_UART_Receive_DMA+0xf4>)
 80099a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ae:	4a24      	ldr	r2, [pc, #144]	; (8009a40 <HAL_UART_Receive_DMA+0xf8>)
 80099b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b6:	4a23      	ldr	r2, [pc, #140]	; (8009a44 <HAL_UART_Receive_DMA+0xfc>)
 80099b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099be:	2200      	movs	r2, #0
 80099c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80099c2:	f107 0308 	add.w	r3, r7, #8
 80099c6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3304      	adds	r3, #4
 80099d2:	4619      	mov	r1, r3
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	f7fb fca1 	bl	8005320 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80099de:	2300      	movs	r3, #0
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a0a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695a      	ldr	r2, [r3, #20]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f042 0201 	orr.w	r2, r2, #1
 8009a1a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695a      	ldr	r2, [r3, #20]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a2a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	e000      	b.n	8009a32 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009a30:	2302      	movs	r3, #2
  }
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	08009e59 	.word	0x08009e59
 8009a40:	08009ec1 	.word	0x08009ec1
 8009a44:	08009edd 	.word	0x08009edd

08009a48 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8009a50:	2301      	movs	r3, #1
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68da      	ldr	r2, [r3, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8009a62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695a      	ldr	r2, [r3, #20]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0201 	bic.w	r2, r2, #1
 8009a72:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00f      	beq.n	8009a9c <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	4a3e      	ldr	r2, [pc, #248]	; (8009b88 <HAL_UART_Abort_IT+0x140>)
 8009a90:	635a      	str	r2, [r3, #52]	; 0x34
 8009a92:	e003      	b.n	8009a9c <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a98:	2200      	movs	r2, #0
 8009a9a:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00f      	beq.n	8009ac4 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d004      	beq.n	8009abc <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab6:	4a35      	ldr	r2, [pc, #212]	; (8009b8c <HAL_UART_Abort_IT+0x144>)
 8009ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8009aba:	e003      	b.n	8009ac4 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01a      	beq.n	8009b08 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	695a      	ldr	r2, [r3, #20]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00e      	beq.n	8009b08 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fb fc76 	bl	80053e0 <HAL_DMA_Abort_IT>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d004      	beq.n	8009b04 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afe:	2200      	movs	r2, #0
 8009b00:	635a      	str	r2, [r3, #52]	; 0x34
 8009b02:	e001      	b.n	8009b08 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d01c      	beq.n	8009b50 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	695a      	ldr	r2, [r3, #20]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b24:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d010      	beq.n	8009b50 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fb fc54 	bl	80053e0 <HAL_DMA_Abort_IT>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d006      	beq.n	8009b4c <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	2200      	movs	r2, #0
 8009b44:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 8009b46:	2301      	movs	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	e001      	b.n	8009b50 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d113      	bne.n	8009b7e <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f92d 	bl	8009dd8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	0800a091 	.word	0x0800a091
 8009b8c:	0800a0eb 	.word	0x0800a0eb

08009b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	f003 030f 	and.w	r3, r3, #15
 8009bbe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10d      	bne.n	8009be2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f003 0320 	and.w	r3, r3, #32
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d008      	beq.n	8009be2 <HAL_UART_IRQHandler+0x52>
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fb19 	bl	800a212 <UART_Receive_IT>
      return;
 8009be0:	e0d0      	b.n	8009d84 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80b0 	beq.w	8009d4a <HAL_UART_IRQHandler+0x1ba>
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d105      	bne.n	8009c00 <HAL_UART_IRQHandler+0x70>
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 80a5 	beq.w	8009d4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <HAL_UART_IRQHandler+0x90>
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d005      	beq.n	8009c20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c18:	f043 0201 	orr.w	r2, r3, #1
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <HAL_UART_IRQHandler+0xb0>
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d005      	beq.n	8009c40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c38:	f043 0202 	orr.w	r2, r3, #2
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00a      	beq.n	8009c60 <HAL_UART_IRQHandler+0xd0>
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d005      	beq.n	8009c60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c58:	f043 0204 	orr.w	r2, r3, #4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	f003 0308 	and.w	r3, r3, #8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00f      	beq.n	8009c8a <HAL_UART_IRQHandler+0xfa>
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <HAL_UART_IRQHandler+0xee>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c82:	f043 0208 	orr.w	r2, r3, #8
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d077      	beq.n	8009d82 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	f003 0320 	and.w	r3, r3, #32
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d007      	beq.n	8009cac <HAL_UART_IRQHandler+0x11c>
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	f003 0320 	and.w	r3, r3, #32
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fab3 	bl	800a212 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	bf14      	ite	ne
 8009cba:	2301      	movne	r3, #1
 8009cbc:	2300      	moveq	r3, #0
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d102      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x144>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d031      	beq.n	8009d38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f9aa 	bl	800a02e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d023      	beq.n	8009d30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695a      	ldr	r2, [r3, #20]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cf6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d013      	beq.n	8009d28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d04:	4a21      	ldr	r2, [pc, #132]	; (8009d8c <HAL_UART_IRQHandler+0x1fc>)
 8009d06:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fb fb67 	bl	80053e0 <HAL_DMA_Abort_IT>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d016      	beq.n	8009d46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d22:	4610      	mov	r0, r2
 8009d24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d26:	e00e      	b.n	8009d46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f84c 	bl	8009dc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2e:	e00a      	b.n	8009d46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f848 	bl	8009dc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d36:	e006      	b.n	8009d46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f844 	bl	8009dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009d44:	e01d      	b.n	8009d82 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d46:	bf00      	nop
    return;
 8009d48:	e01b      	b.n	8009d82 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d008      	beq.n	8009d66 <HAL_UART_IRQHandler+0x1d6>
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f9f0 	bl	800a144 <UART_Transmit_IT>
    return;
 8009d64:	e00e      	b.n	8009d84 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d009      	beq.n	8009d84 <HAL_UART_IRQHandler+0x1f4>
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fa31 	bl	800a1e2 <UART_EndTransmit_IT>
    return;
 8009d80:	e000      	b.n	8009d84 <HAL_UART_IRQHandler+0x1f4>
    return;
 8009d82:	bf00      	nop
  }
}
 8009d84:	3720      	adds	r7, #32
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0800a069 	.word	0x0800a069

08009d90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bc80      	pop	{r7}
 8009da0:	4770      	bx	lr

08009da2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009daa:	bf00      	nop
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bc80      	pop	{r7}
 8009db2:	4770      	bx	lr

08009db4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr

08009dc6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bc80      	pop	{r7}
 8009de8:	4770      	bx	lr

08009dea <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d113      	bne.n	8009e2e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e1a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e2a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e2c:	e002      	b.n	8009e34 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7f7 fff2 	bl	8001e18 <HAL_UART_TxCpltCallback>
}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff ffa0 	bl	8009d90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e50:	bf00      	nop
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11e      	bne.n	8009eb2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e88:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	695a      	ldr	r2, [r3, #20]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0201 	bic.w	r2, r2, #1
 8009e98:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	695a      	ldr	r2, [r3, #20]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ea8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff ff75 	bl	8009da2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eb8:	bf00      	nop
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7ff ff70 	bl	8009db4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bf14      	ite	ne
 8009efc:	2301      	movne	r3, #1
 8009efe:	2300      	moveq	r3, #0
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b21      	cmp	r3, #33	; 0x21
 8009f0e:	d108      	bne.n	8009f22 <UART_DMAError+0x46>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009f1c:	68b8      	ldr	r0, [r7, #8]
 8009f1e:	f000 f871 	bl	800a004 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bf14      	ite	ne
 8009f30:	2301      	movne	r3, #1
 8009f32:	2300      	moveq	r3, #0
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b22      	cmp	r3, #34	; 0x22
 8009f42:	d108      	bne.n	8009f56 <UART_DMAError+0x7a>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f50:	68b8      	ldr	r0, [r7, #8]
 8009f52:	f000 f86c 	bl	800a02e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5a:	f043 0210 	orr.w	r2, r3, #16
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f62:	68b8      	ldr	r0, [r7, #8]
 8009f64:	f7ff ff2f 	bl	8009dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f80:	e02c      	b.n	8009fdc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d028      	beq.n	8009fdc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d007      	beq.n	8009fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f90:	f7fa ffa2 	bl	8004ed8 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d21d      	bcs.n	8009fdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	695a      	ldr	r2, [r3, #20]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0201 	bic.w	r2, r2, #1
 8009fbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2220      	movs	r2, #32
 8009fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e00f      	b.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	bf0c      	ite	eq
 8009fec:	2301      	moveq	r3, #1
 8009fee:	2300      	movne	r3, #0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d0c3      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a01a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2220      	movs	r2, #32
 800a020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr

0800a02e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a044:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	695a      	ldr	r2, [r3, #20]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 0201 	bic.w	r2, r2, #1
 800a054:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	bc80      	pop	{r7}
 800a066:	4770      	bx	lr

0800a068 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff fe9f 	bl	8009dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a088:	bf00      	nop
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d004      	beq.n	800a0b8 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d114      	bne.n	800a0e2 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff fe7c 	bl	8009dd8 <HAL_UART_AbortCpltCallback>
 800a0e0:	e000      	b.n	800a0e4 <UART_DMATxAbortCallback+0x54>
      return;
 800a0e2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d114      	bne.n	800a13c <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2220      	movs	r2, #32
 800a128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2220      	movs	r2, #32
 800a130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff fe4f 	bl	8009dd8 <HAL_UART_AbortCpltCallback>
 800a13a:	e000      	b.n	800a13e <UART_DMARxAbortCallback+0x54>
      return;
 800a13c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b21      	cmp	r3, #33	; 0x21
 800a156:	d13e      	bne.n	800a1d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a160:	d114      	bne.n	800a18c <UART_Transmit_IT+0x48>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d110      	bne.n	800a18c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a17e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	1c9a      	adds	r2, r3, #2
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	621a      	str	r2, [r3, #32]
 800a18a:	e008      	b.n	800a19e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	1c59      	adds	r1, r3, #1
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	6211      	str	r1, [r2, #32]
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10f      	bne.n	800a1d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	e000      	b.n	800a1d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a1d6:	2302      	movs	r3, #2
  }
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr

0800a1e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7f7 fe08 	bl	8001e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b22      	cmp	r3, #34	; 0x22
 800a224:	d170      	bne.n	800a308 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a22e:	d117      	bne.n	800a260 <UART_Receive_IT+0x4e>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d113      	bne.n	800a260 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800a238:	2300      	movs	r3, #0
 800a23a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24e:	b29a      	uxth	r2, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a258:	1c9a      	adds	r2, r3, #2
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	629a      	str	r2, [r3, #40]	; 0x28
 800a25e:	e026      	b.n	800a2ae <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a272:	d007      	beq.n	800a284 <UART_Receive_IT+0x72>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <UART_Receive_IT+0x80>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d106      	bne.n	800a292 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	e008      	b.n	800a2a4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d120      	bne.n	800a304 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68da      	ldr	r2, [r3, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0220 	bic.w	r2, r2, #32
 800a2d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	695a      	ldr	r2, [r3, #20]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0201 	bic.w	r2, r2, #1
 800a2f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff fd51 	bl	8009da2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	e002      	b.n	800a30a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	e000      	b.n	800a30a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800a308:	2302      	movs	r3, #2
  }
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689a      	ldr	r2, [r3, #8]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a34e:	f023 030c 	bic.w	r3, r3, #12
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	6812      	ldr	r2, [r2, #0]
 800a356:	68b9      	ldr	r1, [r7, #8]
 800a358:	430b      	orrs	r3, r1
 800a35a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	699a      	ldr	r2, [r3, #24]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a2c      	ldr	r2, [pc, #176]	; (800a428 <UART_SetConfig+0x114>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d103      	bne.n	800a384 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a37c:	f7fd fcc8 	bl	8007d10 <HAL_RCC_GetPCLK2Freq>
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	e002      	b.n	800a38a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a384:	f7fd fcb0 	bl	8007ce8 <HAL_RCC_GetPCLK1Freq>
 800a388:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	4613      	mov	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	009a      	lsls	r2, r3, #2
 800a394:	441a      	add	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a0:	4a22      	ldr	r2, [pc, #136]	; (800a42c <UART_SetConfig+0x118>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	095b      	lsrs	r3, r3, #5
 800a3a8:	0119      	lsls	r1, r3, #4
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009a      	lsls	r2, r3, #2
 800a3b4:	441a      	add	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3c0:	4b1a      	ldr	r3, [pc, #104]	; (800a42c <UART_SetConfig+0x118>)
 800a3c2:	fba3 0302 	umull	r0, r3, r3, r2
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	2064      	movs	r0, #100	; 0x64
 800a3ca:	fb00 f303 	mul.w	r3, r0, r3
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	011b      	lsls	r3, r3, #4
 800a3d2:	3332      	adds	r3, #50	; 0x32
 800a3d4:	4a15      	ldr	r2, [pc, #84]	; (800a42c <UART_SetConfig+0x118>)
 800a3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3e0:	4419      	add	r1, r3
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009a      	lsls	r2, r3, #2
 800a3ec:	441a      	add	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3f8:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <UART_SetConfig+0x118>)
 800a3fa:	fba3 0302 	umull	r0, r3, r3, r2
 800a3fe:	095b      	lsrs	r3, r3, #5
 800a400:	2064      	movs	r0, #100	; 0x64
 800a402:	fb00 f303 	mul.w	r3, r0, r3
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	011b      	lsls	r3, r3, #4
 800a40a:	3332      	adds	r3, #50	; 0x32
 800a40c:	4a07      	ldr	r2, [pc, #28]	; (800a42c <UART_SetConfig+0x118>)
 800a40e:	fba2 2303 	umull	r2, r3, r2, r3
 800a412:	095b      	lsrs	r3, r3, #5
 800a414:	f003 020f 	and.w	r2, r3, #15
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	440a      	add	r2, r1
 800a41e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a420:	bf00      	nop
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	40013800 	.word	0x40013800
 800a42c:	51eb851f 	.word	0x51eb851f

0800a430 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af04      	add	r7, sp, #16
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a6b      	ldr	r2, [pc, #428]	; (800a5e8 <_ZN10ControllerC1Ev+0x1b8>)
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a6a      	ldr	r2, [pc, #424]	; (800a5ec <_ZN10ControllerC1Ev+0x1bc>)
 800a442:	63da      	str	r2, [r3, #60]	; 0x3c
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	22c8      	movs	r2, #200	; 0xc8
 800a448:	641a      	str	r2, [r3, #64]	; 0x40
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	4618      	mov	r0, r3
 800a450:	f7f6 fc1c 	bl	8000c8c <__aeabi_i2f>
 800a454:	4603      	mov	r3, r0
 800a456:	4619      	mov	r1, r3
 800a458:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a45c:	f7f6 fd1e 	bl	8000e9c <__aeabi_fdiv>
 800a460:	4603      	mov	r3, r0
 800a462:	461a      	mov	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	645a      	str	r2, [r3, #68]	; 0x44
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a61      	ldr	r2, [pc, #388]	; (800a5f0 <_ZN10ControllerC1Ev+0x1c0>)
 800a46c:	649a      	str	r2, [r3, #72]	; 0x48
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a60      	ldr	r2, [pc, #384]	; (800a5f4 <_ZN10ControllerC1Ev+0x1c4>)
 800a472:	64da      	str	r2, [r3, #76]	; 0x4c
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a60      	ldr	r2, [pc, #384]	; (800a5f8 <_ZN10ControllerC1Ev+0x1c8>)
 800a478:	651a      	str	r2, [r3, #80]	; 0x50
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	655a      	str	r2, [r3, #84]	; 0x54
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a5d      	ldr	r2, [pc, #372]	; (800a5fc <_ZN10ControllerC1Ev+0x1cc>)
 800a486:	659a      	str	r2, [r3, #88]	; 0x58
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a5d      	ldr	r2, [pc, #372]	; (800a600 <_ZN10ControllerC1Ev+0x1d0>)
 800a48c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a5c      	ldr	r2, [pc, #368]	; (800a604 <_ZN10ControllerC1Ev+0x1d4>)
 800a492:	661a      	str	r2, [r3, #96]	; 0x60
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	665a      	str	r2, [r3, #100]	; 0x64
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	669a      	str	r2, [r3, #104]	; 0x68
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	66da      	str	r2, [r3, #108]	; 0x6c
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a56      	ldr	r2, [pc, #344]	; (800a608 <_ZN10ControllerC1Ev+0x1d8>)
 800a4b0:	671a      	str	r2, [r3, #112]	; 0x70
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a55      	ldr	r2, [pc, #340]	; (800a60c <_ZN10ControllerC1Ev+0x1dc>)
 800a4b6:	675a      	str	r2, [r3, #116]	; 0x74
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a55      	ldr	r2, [pc, #340]	; (800a610 <_ZN10ControllerC1Ev+0x1e0>)
 800a4bc:	679a      	str	r2, [r3, #120]	; 0x78
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a54      	ldr	r2, [pc, #336]	; (800a614 <_ZN10ControllerC1Ev+0x1e4>)
 800a4c2:	67da      	str	r2, [r3, #124]	; 0x7c
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a54      	ldr	r2, [pc, #336]	; (800a618 <_ZN10ControllerC1Ev+0x1e8>)
 800a4c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a53      	ldr	r2, [pc, #332]	; (800a61c <_ZN10ControllerC1Ev+0x1ec>)
 800a4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a52      	ldr	r2, [pc, #328]	; (800a620 <_ZN10ControllerC1Ev+0x1f0>)
 800a4d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f04f 0200 	mov.w	r2, #0
 800a4e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f04f 0200 	mov.w	r2, #0
 800a4ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800a4f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f04f 0200 	mov.w	r2, #0
 800a500:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f04f 0200 	mov.w	r2, #0
 800a50a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800a514:	a330      	add	r3, pc, #192	; (adr r3, 800a5d8 <_ZN10ControllerC1Ev+0x1a8>)
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a51e:	a32e      	add	r3, pc, #184	; (adr r3, 800a5d8 <_ZN10ControllerC1Ev+0x1a8>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	e9cd 2300 	strd	r2, r3, [sp]
 800a528:	a32d      	add	r3, pc, #180	; (adr r3, 800a5e0 <_ZN10ControllerC1Ev+0x1b0>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	4608      	mov	r0, r1
 800a530:	f002 fa2c 	bl	800c98c <_ZN3lpfC1Eddd>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 800a53a:	a327      	add	r3, pc, #156	; (adr r3, 800a5d8 <_ZN10ControllerC1Ev+0x1a8>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a544:	a324      	add	r3, pc, #144	; (adr r3, 800a5d8 <_ZN10ControllerC1Ev+0x1a8>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	e9cd 2300 	strd	r2, r3, [sp]
 800a54e:	a324      	add	r3, pc, #144	; (adr r3, 800a5e0 <_ZN10ControllerC1Ev+0x1b0>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	4608      	mov	r0, r1
 800a556:	f002 fa19 	bl	800c98c <_ZN3lpfC1Eddd>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800a560:	a31d      	add	r3, pc, #116	; (adr r3, 800a5d8 <_ZN10ControllerC1Ev+0x1a8>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a56a:	a31b      	add	r3, pc, #108	; (adr r3, 800a5d8 <_ZN10ControllerC1Ev+0x1a8>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	e9cd 2300 	strd	r2, r3, [sp]
 800a574:	a31a      	add	r3, pc, #104	; (adr r3, 800a5e0 <_ZN10ControllerC1Ev+0x1b0>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	4608      	mov	r0, r1
 800a57c:	f002 fa06 	bl	800c98c <_ZN3lpfC1Eddd>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fdfa 	bl	800c180 <_ZN3PIDC1Ev>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a592:	4618      	mov	r0, r3
 800a594:	f001 fdf4 	bl	800c180 <_ZN3PIDC1Ev>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 fdee 	bl	800c180 <_ZN3PIDC1Ev>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f001 fde8 	bl	800c180 <_ZN3PIDC1Ev>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f001 fde2 	bl	800c180 <_ZN3PIDC1Ev>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f001 fddc 	bl	800c180 <_ZN3PIDC1Ev>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	fc3b4f61 	.word	0xfc3b4f61
 800a5dc:	3fa35935 	.word	0x3fa35935
 800a5e0:	4f0d844d 	.word	0x4f0d844d
 800a5e4:	3fed94af 	.word	0x3fed94af
 800a5e8:	44c1c000 	.word	0x44c1c000
 800a5ec:	42654ca3 	.word	0x42654ca3
 800a5f0:	3fb33333 	.word	0x3fb33333
 800a5f4:	411cf5c3 	.word	0x411cf5c3
 800a5f8:	41f9d70a 	.word	0x41f9d70a
 800a5fc:	3e6147ae 	.word	0x3e6147ae
 800a600:	3d4ccccd 	.word	0x3d4ccccd
 800a604:	3cf5c28f 	.word	0x3cf5c28f
 800a608:	40a00000 	.word	0x40a00000
 800a60c:	41100000 	.word	0x41100000
 800a610:	41400000 	.word	0x41400000
 800a614:	40400000 	.word	0x40400000
 800a618:	41200000 	.word	0x41200000
 800a61c:	41700000 	.word	0x41700000
 800a620:	c0800000 	.word	0xc0800000

0800a624 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800a624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a628:	b092      	sub	sp, #72	; 0x48
 800a62a:	af04      	add	r7, sp, #16
 800a62c:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
		vel_controller_counter++;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	625a      	str	r2, [r3, #36]	; 0x24

        roll  = state.angles[0];
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	609a      	str	r2, [r3, #8]
        
    if(!swarm) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800a698:	f083 0301 	eor.w	r3, r3, #1
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d01b      	beq.n	800a6da <_ZN10Controller3RunEv+0xb6>
         Kp_roll = 0.28; //0.3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a52      	ldr	r2, [pc, #328]	; (800a7f0 <_ZN10Controller3RunEv+0x1cc>)
 800a6a6:	659a      	str	r2, [r3, #88]	; 0x58
         Ki_roll = 0.02;  //0.008
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a52      	ldr	r2, [pc, #328]	; (800a7f4 <_ZN10Controller3RunEv+0x1d0>)
 800a6ac:	65da      	str	r2, [r3, #92]	; 0x5c
         Kd_roll = 0.03; //0.007 0.01
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a51      	ldr	r2, [pc, #324]	; (800a7f8 <_ZN10Controller3RunEv+0x1d4>)
 800a6b2:	661a      	str	r2, [r3, #96]	; 0x60

         Kp_pitch = Kp_roll;	//0.8
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	665a      	str	r2, [r3, #100]	; 0x64
         Ki_pitch = Ki_roll;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	669a      	str	r2, [r3, #104]	; 0x68
         Kd_pitch = Kd_roll;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	66da      	str	r2, [r3, #108]	; 0x6c

         Kp_yaw = 5.0;// 1;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a4b      	ldr	r2, [pc, #300]	; (800a7fc <_ZN10Controller3RunEv+0x1d8>)
 800a6d0:	671a      	str	r2, [r3, #112]	; 0x70
         Ki_yaw = 12;// 1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a4a      	ldr	r2, [pc, #296]	; (800a800 <_ZN10Controller3RunEv+0x1dc>)
 800a6d6:	675a      	str	r2, [r3, #116]	; 0x74
 800a6d8:	e01b      	b.n	800a712 <_ZN10Controller3RunEv+0xee>
    }

    else {
        Kp_roll = 0.9; //0.3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a49      	ldr	r2, [pc, #292]	; (800a804 <_ZN10Controller3RunEv+0x1e0>)
 800a6de:	659a      	str	r2, [r3, #88]	; 0x58
        Ki_roll = 0.00;  //0.008
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f04f 0200 	mov.w	r2, #0
 800a6e6:	65da      	str	r2, [r3, #92]	; 0x5c
        Kd_roll = 0.03; //0.007 0.01
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a43      	ldr	r2, [pc, #268]	; (800a7f8 <_ZN10Controller3RunEv+0x1d4>)
 800a6ec:	661a      	str	r2, [r3, #96]	; 0x60

        Kp_pitch = Kp_roll;	//0.8
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	665a      	str	r2, [r3, #100]	; 0x64
        Ki_pitch = Ki_roll;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	669a      	str	r2, [r3, #104]	; 0x68
        Kd_pitch = Kd_roll;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	66da      	str	r2, [r3, #108]	; 0x6c

        Kp_yaw = 5.0;// 1;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a3c      	ldr	r2, [pc, #240]	; (800a7fc <_ZN10Controller3RunEv+0x1d8>)
 800a70a:	671a      	str	r2, [r3, #112]	; 0x70
        Ki_yaw = 12;// 1;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a3c      	ldr	r2, [pc, #240]	; (800a800 <_ZN10Controller3RunEv+0x1dc>)
 800a710:	675a      	str	r2, [r3, #116]	; 0x74
    }

    int thr;
    int thr2 = pid_roll.Sat(ch3, 2000, 1000);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800a71e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a722:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a726:	f002 f8bb 	bl	800c8a0 <_ZN3PID3SatEfii>
 800a72a:	4603      	mov	r3, r0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f6 fcdd 	bl	80010ec <__aeabi_f2iz>
 800a732:	4603      	mov	r3, r0
 800a734:	633b      	str	r3, [r7, #48]	; 0x30

    switch(mod) {
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	f000 8153 	beq.w	800a9e8 <_ZN10Controller3RunEv+0x3c4>
 800a742:	2b02      	cmp	r3, #2
 800a744:	f300 81d4 	bgt.w	800aaf0 <_ZN10Controller3RunEv+0x4cc>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <_ZN10Controller3RunEv+0x12e>
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d05b      	beq.n	800a808 <_ZN10Controller3RunEv+0x1e4>
 800a750:	e1ce      	b.n	800aaf0 <_ZN10Controller3RunEv+0x4cc>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800a75e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a762:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800a766:	f002 f89b 	bl	800c8a0 <_ZN3PID3SatEfii>
 800a76a:	4603      	mov	r3, r0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7f6 fcbd 	bl	80010ec <__aeabi_f2iz>
 800a772:	4603      	mov	r3, r0
 800a774:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f002 f90a 	bl	800c9c2 <_ZN3lpf3RunEf>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	f002 f8fc 	bl	800c9c2 <_ZN3lpf3RunEf>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	f002 f8ee 	bl	800c9c2 <_ZN3lpf3RunEf>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    	    break;
 800a7ee:	e17f      	b.n	800aaf0 <_ZN10Controller3RunEv+0x4cc>
 800a7f0:	3e8f5c29 	.word	0x3e8f5c29
 800a7f4:	3ca3d70a 	.word	0x3ca3d70a
 800a7f8:	3cf5c28f 	.word	0x3cf5c28f
 800a7fc:	40a00000 	.word	0x40a00000
 800a800:	41400000 	.word	0x41400000
 800a804:	3f666666 	.word	0x3f666666
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 819c 	ldr.w	r8, [r3, #412]	; 0x19c
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 91a0 	ldr.w	r9, [r3, #416]	; 0x1a0
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 a198 	ldr.w	sl, [r3, #408]	; 0x198
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a832:	4618      	mov	r0, r3
 800a834:	f7f6 fc80 	bl	8001138 <__aeabi_f2uiz>
 800a838:	4603      	mov	r3, r0
 800a83a:	9302      	str	r3, [sp, #8]
 800a83c:	9501      	str	r5, [sp, #4]
 800a83e:	9400      	str	r4, [sp, #0]
 800a840:	4653      	mov	r3, sl
 800a842:	464a      	mov	r2, r9
 800a844:	4641      	mov	r1, r8
 800a846:	4630      	mov	r0, r6
 800a848:	f001 fd34 	bl	800c2b4 <_ZN3PID6PI_VelEfffffj>
 800a84c:	4604      	mov	r4, r0
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a856:	4619      	mov	r1, r3
 800a858:	4610      	mov	r0, r2
 800a85a:	f7f6 fa6b 	bl	8000d34 <__aeabi_fmul>
 800a85e:	4603      	mov	r3, r0
 800a860:	4619      	mov	r1, r3
 800a862:	4620      	mov	r0, r4
 800a864:	f7f6 f95e 	bl	8000b24 <__addsf3>
 800a868:	4603      	mov	r3, r0
 800a86a:	461a      	mov	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			float deg2rad = 0.0175;
 800a872:	4b5c      	ldr	r3, [pc, #368]	; (800a9e4 <_ZN10Controller3RunEv+0x3c0>)
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
			float roll_r = roll * deg2rad;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	4619      	mov	r1, r3
 800a87c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a87e:	f7f6 fa59 	bl	8000d34 <__aeabi_fmul>
 800a882:	4603      	mov	r3, r0
 800a884:	62bb      	str	r3, [r7, #40]	; 0x28
			float pitch_r = pitch * deg2rad;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a88e:	f7f6 fa51 	bl	8000d34 <__aeabi_fmul>
 800a892:	4603      	mov	r3, r0
 800a894:	627b      	str	r3, [r7, #36]	; 0x24
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800a896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a898:	f7f7 f8ea 	bl	8001a70 <_ZSt3cosf>
 800a89c:	4603      	mov	r3, r0
 800a89e:	4619      	mov	r1, r3
 800a8a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a8a4:	f7f6 fafa 	bl	8000e9c <__aeabi_fdiv>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	461c      	mov	r4, r3
 800a8ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8ae:	f7f7 f8df 	bl	8001a70 <_ZSt3cosf>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f7f6 faf0 	bl	8000e9c <__aeabi_fdiv>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	623b      	str	r3, [r7, #32]

			F = F * b2e ; // Body to Earth
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a8c6:	6a39      	ldr	r1, [r7, #32]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f6 fa33 	bl	8000d34 <__aeabi_fmul>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			F = p_alt.Sat(F, F_max, F_min);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7f6 fbff 	bl	80010ec <__aeabi_f2iz>
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7f6 fbf9 	bl	80010ec <__aeabi_f2iz>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4632      	mov	r2, r6
 800a8fe:	4629      	mov	r1, r5
 800a900:	4620      	mov	r0, r4
 800a902:	f001 ffcd 	bl	800c8a0 <_ZN3PID3SatEfii>
 800a906:	4602      	mov	r2, r0
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			thr = p_alt.F2thr(F);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a91a:	4619      	mov	r1, r3
 800a91c:	4610      	mov	r0, r2
 800a91e:	f001 ffef 	bl	800c900 <_ZN3PID5F2thrEf>
 800a922:	4603      	mov	r3, r0
 800a924:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800a92c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a92e:	f7f6 f9ad 	bl	8000c8c <__aeabi_i2f>
 800a932:	4601      	mov	r1, r0
 800a934:	f240 434c 	movw	r3, #1100	; 0x44c
 800a938:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800a93c:	4620      	mov	r0, r4
 800a93e:	f001 ffaf 	bl	800c8a0 <_ZN3PID3SatEfii>
 800a942:	4603      	mov	r3, r0
 800a944:	4618      	mov	r0, r3
 800a946:	f7f6 fbd1 	bl	80010ec <__aeabi_f2iz>
 800a94a:	4603      	mov	r3, r0
 800a94c:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800a94e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a950:	f7f6 f99c 	bl	8000c8c <__aeabi_i2f>
 800a954:	4602      	mov	r2, r0
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
			z0 = p_alt.zi;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des     = state_des.angles[0];
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a998:	4619      	mov	r1, r3
 800a99a:	4610      	mov	r0, r2
 800a99c:	f002 f811 	bl	800c9c2 <_ZN3lpf3RunEf>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	f002 f803 	bl	800c9c2 <_ZN3lpf3RunEf>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f001 fff5 	bl	800c9c2 <_ZN3lpf3RunEf>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			break;
 800a9e0:	e086      	b.n	800aaf0 <_ZN10Controller3RunEv+0x4cc>
 800a9e2:	bf00      	nop
 800a9e4:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800a9f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9f8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800a9fc:	f001 ff50 	bl	800c8a0 <_ZN3PID3SatEfii>
 800aa00:	4603      	mov	r3, r0
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f6 fb72 	bl	80010ec <__aeabi_f2iz>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	637b      	str	r3, [r7, #52]	; 0x34

    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);

    	    if(vel_controller_counter >= 10) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b09      	cmp	r3, #9
 800aa12:	d958      	bls.n	800aac6 <_ZN10Controller3RunEv+0x4a2>
    	    	//PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd)
    	    	vel_controller_counter = 0;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	625a      	str	r2, [r3, #36]	; 0x24
        		pitch_des = p_velx.PID_Pos(x0,x,Kp_velx,Ki_velx,Kd_velx);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800aa3e:	9201      	str	r2, [sp, #4]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	462b      	mov	r3, r5
 800aa44:	4622      	mov	r2, r4
 800aa46:	f001 fd8b 	bl	800c560 <_ZN3PID7PID_PosEfffff>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des  = p_vely.PID_Pos(y0,y,Kp_vely,Ki_vely,Kd_vely);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 41c0 	ldr.w	r4, [r3, #448]	; 0x1c0
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800aa76:	9201      	str	r2, [sp, #4]
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	f001 fd6f 	bl	800c560 <_ZN3PID7PID_PosEfffff>
 800aa82:	4602      	mov	r2, r0
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

        		pitch_des = p_velx.Sat(pitch_des, 20, -20);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800aa96:	f06f 0313 	mvn.w	r3, #19
 800aa9a:	2214      	movs	r2, #20
 800aa9c:	f001 ff00 	bl	800c8a0 <_ZN3PID3SatEfii>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des = p_vely.Sat(roll_des, 20, -20);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800aab4:	f06f 0313 	mvn.w	r3, #19
 800aab8:	2214      	movs	r2, #20
 800aaba:	f001 fef1 	bl	800c8a0 <_ZN3PID3SatEfii>
 800aabe:	4602      	mov	r2, r0
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

    	    }

            yaw_rate_des = state_des.rates[2];
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f001 ff6e 	bl	800c9c2 <_ZN3lpf3RunEf>
 800aae6:	4602      	mov	r2, r0
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    		break;
 800aaee:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	4623      	mov	r3, r4
 800ab0c:	f001 fb94 	bl	800c238 <_ZN3PID7P_AngleEffff>
 800ab10:	4602      	mov	r2, r0
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f7f6 f802 	bl	8000b24 <__addsf3>
 800ab20:	4603      	mov	r3, r0
 800ab22:	461a      	mov	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691a      	ldr	r2, [r3, #16]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	4623      	mov	r3, r4
 800ab46:	f001 fb77 	bl	800c238 <_ZN3PID7P_AngleEffff>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7f5 ffe5 	bl	8000b24 <__addsf3>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ab70:	4619      	mov	r1, r3
 800ab72:	4610      	mov	r0, r2
 800ab74:	f001 fbfc 	bl	800c370 <_ZN3PID6RateFFEf>
 800ab78:	61f8      	str	r0, [r7, #28]
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ab86:	4619      	mov	r1, r3
 800ab88:	4610      	mov	r0, r2
 800ab8a:	f001 fbf1 	bl	800c370 <_ZN3PID6RateFFEf>
 800ab8e:	61b8      	str	r0, [r7, #24]

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);// + pd_roll_ff;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699e      	ldr	r6, [r3, #24]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800abb6:	9003      	str	r0, [sp, #12]
 800abb8:	9102      	str	r1, [sp, #8]
 800abba:	9201      	str	r2, [sp, #4]
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	4663      	mov	r3, ip
 800abc0:	4632      	mov	r2, r6
 800abc2:	4629      	mov	r1, r5
 800abc4:	4620      	mov	r0, r4
 800abc6:	f001 fc23 	bl	800c410 <_ZN3PID9PID_Rate2Efffffff>
 800abca:	4602      	mov	r2, r0
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);// + pd_pitch_ff;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69de      	ldr	r6, [r3, #28]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800abf8:	9003      	str	r0, [sp, #12]
 800abfa:	9102      	str	r1, [sp, #8]
 800abfc:	9201      	str	r2, [sp, #4]
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	4663      	mov	r3, ip
 800ac02:	4632      	mov	r2, r6
 800ac04:	4629      	mov	r1, r5
 800ac06:	4620      	mov	r0, r4
 800ac08:	f001 fc02 	bl	800c410 <_ZN3PID9PID_Rate2Efffffff>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f503 7052 	add.w	r0, r3, #840	; 0x348
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1a      	ldr	r2, [r3, #32]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac2c:	f04f 0500 	mov.w	r5, #0
 800ac30:	9501      	str	r5, [sp, #4]
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	4623      	mov	r3, r4
 800ac36:	f001 fcd1 	bl	800c5dc <_ZN3PID7PD_RateEfffff>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140


#ifdef UAV1


    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800ac42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac44:	f7f6 f822 	bl	8000c8c <__aeabi_i2f>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7f5 ff66 	bl	8000b24 <__addsf3>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7f5 ff5b 	bl	8000b20 <__aeabi_fsub>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ac74:	4619      	mov	r1, r3
 800ac76:	4610      	mov	r0, r2
 800ac78:	f7f5 ff52 	bl	8000b20 <__aeabi_fsub>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	4982      	ldr	r1, [pc, #520]	; (800ae88 <_ZN10Controller3RunEv+0x864>)
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7f5 ff4f 	bl	8000b24 <__addsf3>
 800ac86:	4603      	mov	r3, r0
 800ac88:	4980      	ldr	r1, [pc, #512]	; (800ae8c <_ZN10Controller3RunEv+0x868>)
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f5 ff48 	bl	8000b20 <__aeabi_fsub>
 800ac90:	4603      	mov	r3, r0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f6 fa2a 	bl	80010ec <__aeabi_f2iz>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	617b      	str	r3, [r7, #20]
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 800ac9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac9e:	f7f5 fff5 	bl	8000c8c <__aeabi_i2f>
 800aca2:	4602      	mov	r2, r0
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f7f5 ff37 	bl	8000b20 <__aeabi_fsub>
 800acb2:	4603      	mov	r3, r0
 800acb4:	461a      	mov	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7f5 ff30 	bl	8000b24 <__addsf3>
 800acc4:	4603      	mov	r3, r0
 800acc6:	461a      	mov	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800acce:	4619      	mov	r1, r3
 800acd0:	4610      	mov	r0, r2
 800acd2:	f7f5 ff25 	bl	8000b20 <__aeabi_fsub>
 800acd6:	4603      	mov	r3, r0
 800acd8:	496b      	ldr	r1, [pc, #428]	; (800ae88 <_ZN10Controller3RunEv+0x864>)
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f5 ff20 	bl	8000b20 <__aeabi_fsub>
 800ace0:	4603      	mov	r3, r0
 800ace2:	496a      	ldr	r1, [pc, #424]	; (800ae8c <_ZN10Controller3RunEv+0x868>)
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7f5 ff1d 	bl	8000b24 <__addsf3>
 800acea:	4603      	mov	r3, r0
 800acec:	4618      	mov	r0, r3
 800acee:	f7f6 f9fd 	bl	80010ec <__aeabi_f2iz>
 800acf2:	4603      	mov	r3, r0
 800acf4:	613b      	str	r3, [r7, #16]
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800acf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800acf8:	f7f5 ffc8 	bl	8000c8c <__aeabi_i2f>
 800acfc:	4602      	mov	r2, r0
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7f5 ff0c 	bl	8000b24 <__addsf3>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	461a      	mov	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f7f5 ff03 	bl	8000b24 <__addsf3>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	461a      	mov	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f7f5 fefa 	bl	8000b24 <__addsf3>
 800ad30:	4603      	mov	r3, r0
 800ad32:	4955      	ldr	r1, [pc, #340]	; (800ae88 <_ZN10Controller3RunEv+0x864>)
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7f5 fef5 	bl	8000b24 <__addsf3>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	4953      	ldr	r1, [pc, #332]	; (800ae8c <_ZN10Controller3RunEv+0x868>)
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7f5 fef0 	bl	8000b24 <__addsf3>
 800ad44:	4603      	mov	r3, r0
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f6 f9d0 	bl	80010ec <__aeabi_f2iz>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	60fb      	str	r3, [r7, #12]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800ad50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad52:	f7f5 ff9b 	bl	8000c8c <__aeabi_i2f>
 800ad56:	4602      	mov	r2, r0
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f7f5 fedd 	bl	8000b20 <__aeabi_fsub>
 800ad66:	4603      	mov	r3, r0
 800ad68:	461a      	mov	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f7f5 fed4 	bl	8000b20 <__aeabi_fsub>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad82:	4619      	mov	r1, r3
 800ad84:	4610      	mov	r0, r2
 800ad86:	f7f5 fecd 	bl	8000b24 <__addsf3>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	493e      	ldr	r1, [pc, #248]	; (800ae88 <_ZN10Controller3RunEv+0x864>)
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f5 fec6 	bl	8000b20 <__aeabi_fsub>
 800ad94:	4603      	mov	r3, r0
 800ad96:	493d      	ldr	r1, [pc, #244]	; (800ae8c <_ZN10Controller3RunEv+0x868>)
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7f5 fec1 	bl	8000b20 <__aeabi_fsub>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7f6 f9a3 	bl	80010ec <__aeabi_f2iz>
 800ada6:	4603      	mov	r3, r0
 800ada8:	60bb      	str	r3, [r7, #8]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;

#endif

    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800adb0:	6978      	ldr	r0, [r7, #20]
 800adb2:	f7f5 ff6b 	bl	8000c8c <__aeabi_i2f>
 800adb6:	4601      	mov	r1, r0
 800adb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	f240 434c 	movw	r3, #1100	; 0x44c
 800adc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800adc4:	4620      	mov	r0, r4
 800adc6:	f001 fd31 	bl	800c82c <_ZN3PID3SatEfiii>
 800adca:	4603      	mov	r3, r0
 800adcc:	4618      	mov	r0, r3
 800adce:	f7f6 f98d 	bl	80010ec <__aeabi_f2iz>
 800add2:	4603      	mov	r3, r0
 800add4:	617b      	str	r3, [r7, #20]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800addc:	6938      	ldr	r0, [r7, #16]
 800adde:	f7f5 ff55 	bl	8000c8c <__aeabi_i2f>
 800ade2:	4601      	mov	r1, r0
 800ade4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	f240 434c 	movw	r3, #1100	; 0x44c
 800adec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800adf0:	4620      	mov	r0, r4
 800adf2:	f001 fd1b 	bl	800c82c <_ZN3PID3SatEfiii>
 800adf6:	4603      	mov	r3, r0
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7f6 f977 	bl	80010ec <__aeabi_f2iz>
 800adfe:	4603      	mov	r3, r0
 800ae00:	613b      	str	r3, [r7, #16]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7f5 ff3f 	bl	8000c8c <__aeabi_i2f>
 800ae0e:	4601      	mov	r1, r0
 800ae10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	f240 434c 	movw	r3, #1100	; 0x44c
 800ae18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f001 fd05 	bl	800c82c <_ZN3PID3SatEfiii>
 800ae22:	4603      	mov	r3, r0
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7f6 f961 	bl	80010ec <__aeabi_f2iz>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	60fb      	str	r3, [r7, #12]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800ae34:	68b8      	ldr	r0, [r7, #8]
 800ae36:	f7f5 ff29 	bl	8000c8c <__aeabi_i2f>
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	f240 434c 	movw	r3, #1100	; 0x44c
 800ae44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f001 fcef 	bl	800c82c <_ZN3PID3SatEfiii>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7f6 f94b 	bl	80010ec <__aeabi_f2iz>
 800ae56:	4603      	mov	r3, r0
 800ae58:	60bb      	str	r3, [r7, #8]
    controller_output_pwm2[1] = thr - pd_pitch + pd_roll  + p_yaw;
    controller_output_pwm2[2] = thr + pd_pitch + pd_roll  - p_yaw;
    controller_output_pwm2[3] = thr - pd_pitch - pd_roll  - p_yaw;
    */

    if(swarm) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d015      	beq.n	800ae90 <_ZN10Controller3RunEv+0x86c>
        controller_output_pwm2[0] = thr2;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae68:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = thr2;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae70:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = thr2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae78:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = thr2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae80:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800ae84:	e018      	b.n	800aeb8 <_ZN10Controller3RunEv+0x894>
 800ae86:	bf00      	nop
 800ae88:	41f00000 	.word	0x41f00000
 800ae8c:	41500000 	.word	0x41500000
    }

    else {
        controller_output_pwm2[0] = 1000;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae96:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = 1000;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aea0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = 1000;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aeaa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = 1000;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aeb4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }



    //Saturate pwm values
    controller_output_pwm2[0] = (int)pid_roll.Sat(controller_output_pwm2[0],PWM_UPPER,1000,thr);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7f5 fee1 	bl	8000c8c <__aeabi_i2f>
 800aeca:	4601      	mov	r1, r0
 800aecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aed4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aed8:	4620      	mov	r0, r4
 800aeda:	f001 fca7 	bl	800c82c <_ZN3PID3SatEfiii>
 800aede:	4603      	mov	r3, r0
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f6 f903 	bl	80010ec <__aeabi_f2iz>
 800aee6:	4602      	mov	r2, r0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm2[1] = (int)pid_roll.Sat(controller_output_pwm2[1],PWM_UPPER,1000,thr);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f5 fec6 	bl	8000c8c <__aeabi_i2f>
 800af00:	4601      	mov	r1, r0
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af0e:	4620      	mov	r0, r4
 800af10:	f001 fc8c 	bl	800c82c <_ZN3PID3SatEfiii>
 800af14:	4603      	mov	r3, r0
 800af16:	4618      	mov	r0, r3
 800af18:	f7f6 f8e8 	bl	80010ec <__aeabi_f2iz>
 800af1c:	4602      	mov	r2, r0
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm2[2] = (int)pid_roll.Sat(controller_output_pwm2[2],PWM_UPPER,1000,thr);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800af30:	4618      	mov	r0, r3
 800af32:	f7f5 feab 	bl	8000c8c <__aeabi_i2f>
 800af36:	4601      	mov	r1, r0
 800af38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af44:	4620      	mov	r0, r4
 800af46:	f001 fc71 	bl	800c82c <_ZN3PID3SatEfiii>
 800af4a:	4603      	mov	r3, r0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f6 f8cd 	bl	80010ec <__aeabi_f2iz>
 800af52:	4602      	mov	r2, r0
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    controller_output_pwm2[3] = (int)pid_roll.Sat(controller_output_pwm2[3],PWM_UPPER,1000,thr);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800af66:	4618      	mov	r0, r3
 800af68:	f7f5 fe90 	bl	8000c8c <__aeabi_i2f>
 800af6c:	4601      	mov	r1, r0
 800af6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af7a:	4620      	mov	r0, r4
 800af7c:	f001 fc56 	bl	800c82c <_ZN3PID3SatEfiii>
 800af80:	4603      	mov	r3, r0
 800af82:	4618      	mov	r0, r3
 800af84:	f7f6 f8b2 	bl	80010ec <__aeabi_f2iz>
 800af88:	4602      	mov	r2, r0
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    controller_output_pwm[1] = pwm2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    controller_output_pwm[2] = pwm3;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    controller_output_pwm[3] = pwm4;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  //  return controller_output;
}
 800afb0:	bf00      	nop
 800afb2:	3738      	adds	r7, #56	; 0x38
 800afb4:	46bd      	mov	sp, r7
 800afb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afba:	bf00      	nop

0800afbc <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800afca:	4618      	mov	r0, r3
 800afcc:	f001 fcd0 	bl	800c970 <_ZN3PIDD1Ev>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800afd6:	4618      	mov	r0, r3
 800afd8:	f001 fcca 	bl	800c970 <_ZN3PIDD1Ev>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 fcc4 	bl	800c970 <_ZN3PIDD1Ev>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 fcbe 	bl	800c970 <_ZN3PIDD1Ev>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800affa:	4618      	mov	r0, r3
 800affc:	f001 fcb8 	bl	800c970 <_ZN3PIDD1Ev>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b006:	4618      	mov	r0, r3
 800b008:	f001 fcb2 	bl	800c970 <_ZN3PIDD1Ev>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	33f0      	adds	r3, #240	; 0xf0
 800b010:	4618      	mov	r0, r3
 800b012:	f001 fd2c 	bl	800ca6e <_ZN3lpfD1Ev>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	33c8      	adds	r3, #200	; 0xc8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 fd27 	bl	800ca6e <_ZN3lpfD1Ev>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	33a0      	adds	r3, #160	; 0xa0
 800b024:	4618      	mov	r0, r3
 800b026:	f001 fd22 	bl	800ca6e <_ZN3lpfD1Ev>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	0000      	movs	r0, r0
	...

0800b038 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af04      	add	r7, sp, #16
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f04f 0200 	mov.w	r2, #0
 800b046:	611a      	str	r2, [r3, #16]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a89      	ldr	r2, [pc, #548]	; (800b270 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800b04c:	615a      	str	r2, [r3, #20]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f04f 0200 	mov.w	r2, #0
 800b054:	631a      	str	r2, [r3, #48]	; 0x30
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	635a      	str	r2, [r3, #52]	; 0x34
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f04f 0200 	mov.w	r2, #0
 800b064:	639a      	str	r2, [r3, #56]	; 0x38
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a82      	ldr	r2, [pc, #520]	; (800b274 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800b06a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a82      	ldr	r2, [pc, #520]	; (800b278 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800b070:	655a      	str	r2, [r3, #84]	; 0x54
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a80      	ldr	r2, [pc, #512]	; (800b278 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800b076:	659a      	str	r2, [r3, #88]	; 0x58
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b07e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f04f 0200 	mov.w	r2, #0
 800b086:	661a      	str	r2, [r3, #96]	; 0x60
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f04f 0200 	mov.w	r2, #0
 800b08e:	665a      	str	r2, [r3, #100]	; 0x64
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	669a      	str	r2, [r3, #104]	; 0x68
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a76      	ldr	r2, [pc, #472]	; (800b274 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800b09c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a76      	ldr	r2, [pc, #472]	; (800b27c <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800b0a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f04f 0200 	mov.w	r2, #0
 800b0ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f04f 0200 	mov.w	r2, #0
 800b0b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a6d      	ldr	r2, [pc, #436]	; (800b274 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800b0be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a6e      	ldr	r2, [pc, #440]	; (800b280 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800b0c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a6d      	ldr	r2, [pc, #436]	; (800b284 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800b0ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a6b      	ldr	r2, [pc, #428]	; (800b284 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800b0d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a6a      	ldr	r2, [pc, #424]	; (800b288 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 800b0de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a69      	ldr	r2, [pc, #420]	; (800b28c <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800b0e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b0f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a66      	ldr	r2, [pc, #408]	; (800b290 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800b0f8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a65      	ldr	r2, [pc, #404]	; (800b294 <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800b100:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b10a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a61      	ldr	r2, [pc, #388]	; (800b298 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800b112:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	22c8      	movs	r2, #200	; 0xc8
 800b11a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800b124:	4618      	mov	r0, r3
 800b126:	f7f5 fdb1 	bl	8000c8c <__aeabi_i2f>
 800b12a:	4603      	mov	r3, r0
 800b12c:	4619      	mov	r1, r3
 800b12e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b132:	f7f5 feb3 	bl	8000e9c <__aeabi_fdiv>
 800b136:	4603      	mov	r3, r0
 800b138:	4618      	mov	r0, r3
 800b13a:	f7f5 f96d 	bl	8000418 <__aeabi_f2d>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a54      	ldr	r2, [pc, #336]	; (800b29c <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800b14c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a53      	ldr	r2, [pc, #332]	; (800b2a0 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800b154:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a52      	ldr	r2, [pc, #328]	; (800b2a4 <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800b15c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a51      	ldr	r2, [pc, #324]	; (800b2a8 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800b164:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a4f      	ldr	r2, [pc, #316]	; (800b2a8 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800b16c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a4e      	ldr	r2, [pc, #312]	; (800b2ac <_ZN15Kalman_FiltresiC1Ev+0x274>)
 800b174:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800b17e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a4a      	ldr	r2, [pc, #296]	; (800b2b0 <_ZN15Kalman_FiltresiC1Ev+0x278>)
 800b186:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b190:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a47      	ldr	r2, [pc, #284]	; (800b2b4 <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 800b198:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a46      	ldr	r2, [pc, #280]	; (800b2b8 <_ZN15Kalman_FiltresiC1Ev+0x280>)
 800b1a0:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a34      	ldr	r2, [pc, #208]	; (800b278 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800b1a8:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b1b2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b1bc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 800b1c6:	a31e      	add	r3, pc, #120	; (adr r3, 800b240 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1d0:	a31b      	add	r3, pc, #108	; (adr r3, 800b240 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	e9cd 2300 	strd	r2, r3, [sp]
 800b1da:	a31b      	add	r3, pc, #108	; (adr r3, 800b248 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 800b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	f001 fbd3 	bl	800c98c <_ZN3lpfC1Eddd>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800b1ec:	a318      	add	r3, pc, #96	; (adr r3, 800b250 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1f6:	a316      	add	r3, pc, #88	; (adr r3, 800b250 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	e9cd 2300 	strd	r2, r3, [sp]
 800b200:	a315      	add	r3, pc, #84	; (adr r3, 800b258 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	4608      	mov	r0, r1
 800b208:	f001 fbc0 	bl	800c98c <_ZN3lpfC1Eddd>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f503 7148 	add.w	r1, r3, #800	; 0x320
 800b212:	a313      	add	r3, pc, #76	; (adr r3, 800b260 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b21c:	a310      	add	r3, pc, #64	; (adr r3, 800b260 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	e9cd 2300 	strd	r2, r3, [sp]
 800b226:	a310      	add	r3, pc, #64	; (adr r3, 800b268 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	4608      	mov	r0, r1
 800b22e:	f001 fbad 	bl	800c98c <_ZN3lpfC1Eddd>

}
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	f3af 8000 	nop.w
 800b240:	de7ea5f8 	.word	0xde7ea5f8
 800b244:	3fb2a454 	.word	0x3fb2a454
 800b248:	ab367a10 	.word	0xab367a10
 800b24c:	3feb573e 	.word	0x3feb573e
 800b250:	fc3b4f61 	.word	0xfc3b4f61
 800b254:	3fa35935 	.word	0x3fa35935
 800b258:	4f0d844d 	.word	0x4f0d844d
 800b25c:	3fed94af 	.word	0x3fed94af
 800b260:	e5c91d15 	.word	0xe5c91d15
 800b264:	3feda43f 	.word	0x3feda43f
 800b268:	cb923a2a 	.word	0xcb923a2a
 800b26c:	bfeb487f 	.word	0xbfeb487f
 800b270:	3ca3d70a 	.word	0x3ca3d70a
 800b274:	3c23d70a 	.word	0x3c23d70a
 800b278:	322bcc77 	.word	0x322bcc77
 800b27c:	47c35000 	.word	0x47c35000
 800b280:	461c4000 	.word	0x461c4000
 800b284:	4e6e6b28 	.word	0x4e6e6b28
 800b288:	41200000 	.word	0x41200000
 800b28c:	4b189680 	.word	0x4b189680
 800b290:	40a00000 	.word	0x40a00000
 800b294:	42480000 	.word	0x42480000
 800b298:	42654ca3 	.word	0x42654ca3
 800b29c:	bd824c8c 	.word	0xbd824c8c
 800b2a0:	3c8d8029 	.word	0x3c8d8029
 800b2a4:	3c16a355 	.word	0x3c16a355
 800b2a8:	40400000 	.word	0x40400000
 800b2ac:	41a00000 	.word	0x41a00000
 800b2b0:	3cdd2f1b 	.word	0x3cdd2f1b
 800b2b4:	48f42400 	.word	0x48f42400
 800b2b8:	3727c5ac 	.word	0x3727c5ac

0800b2bc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:
	}


}

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800b2bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b2c0:	b0aa      	sub	sp, #168	; 0xa8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
	  float accY = acc[1];
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b2d8:	66bb      	str	r3, [r7, #104]	; 0x68
	  float accZ = acc[2];
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b2e0:	667b      	str	r3, [r7, #100]	; 0x64

	  float gyroX = gyro[0];
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800b2e8:	663b      	str	r3, [r7, #96]	; 0x60
	  float gyroY = gyro[1];
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float gyroZ = gyro[2];
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b2f8:	65bb      	str	r3, [r7, #88]	; 0x58

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800b2fa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b2fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2fe:	f7f5 fd19 	bl	8000d34 <__aeabi_fmul>
 800b302:	4603      	mov	r3, r0
 800b304:	461c      	mov	r4, r3
 800b306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b308:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800b30a:	f7f5 fd13 	bl	8000d34 <__aeabi_fmul>
 800b30e:	4603      	mov	r3, r0
 800b310:	4619      	mov	r1, r3
 800b312:	4620      	mov	r0, r4
 800b314:	f7f5 fc06 	bl	8000b24 <__addsf3>
 800b318:	4603      	mov	r3, r0
 800b31a:	461c      	mov	r4, r3
 800b31c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b31e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b320:	f7f5 fd08 	bl	8000d34 <__aeabi_fmul>
 800b324:	4603      	mov	r3, r0
 800b326:	4619      	mov	r1, r3
 800b328:	4620      	mov	r0, r4
 800b32a:	f7f5 fbfb 	bl	8000b24 <__addsf3>
 800b32e:	4603      	mov	r3, r0
 800b330:	4618      	mov	r0, r3
 800b332:	f7f6 fd65 	bl	8001e00 <_ZSt4sqrtf>
 800b336:	6578      	str	r0, [r7, #84]	; 0x54

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800b338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b33a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b33c:	f7f5 fdae 	bl	8000e9c <__aeabi_fdiv>
 800b340:	4603      	mov	r3, r0
 800b342:	4618      	mov	r0, r3
 800b344:	f7f6 fd36 	bl	8001db4 <_ZSt4asinf>
 800b348:	4602      	mov	r2, r0
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f7f5 fcee 	bl	8000d34 <__aeabi_fmul>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b362:	4619      	mov	r1, r3
 800b364:	4610      	mov	r0, r2
 800b366:	f7f5 fbdd 	bl	8000b24 <__addsf3>
 800b36a:	4603      	mov	r3, r0
 800b36c:	461a      	mov	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800b374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b376:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800b378:	f7f5 fd90 	bl	8000e9c <__aeabi_fdiv>
 800b37c:	4603      	mov	r3, r0
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f6 fd18 	bl	8001db4 <_ZSt4asinf>
 800b384:	4602      	mov	r2, r0
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b38c:	4619      	mov	r1, r3
 800b38e:	4610      	mov	r0, r2
 800b390:	f7f5 fcd0 	bl	8000d34 <__aeabi_fmul>
 800b394:	4603      	mov	r3, r0
 800b396:	461a      	mov	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7f5 fbbf 	bl	8000b24 <__addsf3>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;

	if(!armed) {
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800b3b6:	f083 0301 	eor.w	r3, r3, #1
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d008      	beq.n	800b3d2 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x116>
	    Qa = 3;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a78      	ldr	r2, [pc, #480]	; (800b5a4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2e8>)
 800b3c4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	    Qg = 1e-2;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a77      	ldr	r2, [pc, #476]	; (800b5a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2ec>)
 800b3cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800b3d0:	e007      	b.n	800b3e2 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x126>

	}

	else {
	    Qa = 2e2;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a75      	ldr	r2, [pc, #468]	; (800b5ac <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f0>)
 800b3d6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	    Qg = 3e1;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a74      	ldr	r2, [pc, #464]	; (800b5b0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f4>)
 800b3de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

	}


	//ANGLE PREDICTION
	switch(euler_angle) {
 800b3e2:	78fb      	ldrb	r3, [r7, #3]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	f000 809d 	beq.w	800b524 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x268>
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	f300 80e3 	bgt.w	800b5b6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x13e>
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d05e      	beq.n	800b4b6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1fa>
 800b3f8:	e0dd      	b.n	800b5b6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>
		case ROLL:
			angle_ekf = roll_ekf;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800b400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = roll_rate;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = roll_bias;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = roll_acc;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b41c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroX;
 800b420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			S11_angle = S11_roll;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b42a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_roll;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_roll;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_roll;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_roll;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_roll;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b452:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_roll;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b458:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_roll;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b45e:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_roll;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b466:	673b      	str	r3, [r7, #112]	; 0x70
			if(armed) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 80a0 	beq.w	800b5b4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
				roll_int = roll_int + roll_rate*st;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7f4 ffcd 	bl	8000418 <__aeabi_f2d>
 800b47e:	4604      	mov	r4, r0
 800b480:	460d      	mov	r5, r1
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	4618      	mov	r0, r3
 800b488:	f7f4 ffc6 	bl	8000418 <__aeabi_f2d>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800b492:	f7f5 f819 	bl	80004c8 <__aeabi_dmul>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	4620      	mov	r0, r4
 800b49c:	4629      	mov	r1, r5
 800b49e:	f7f4 fe5d 	bl	800015c <__adddf3>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f7f5 fae5 	bl	8000a78 <__aeabi_d2f>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	601a      	str	r2, [r3, #0]
			}
			break;
 800b4b4:	e07e      	b.n	800b5b4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case PITCH:
			angle_ekf = pitch_ekf;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800b4bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = pitch_rate;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = pitch_bias;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = pitch_acc;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800b4d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroY;
 800b4dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			S11_angle = S11_pitch;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_pitch;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_pitch;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_pitch;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_pitch;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_pitch;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b50e:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_pitch;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b514:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_pitch;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b51a:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_pitch;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b520:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800b522:	e048      	b.n	800b5b6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>

		case YAW:
			angle_ekf = yaw_ekf;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800b52a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = yaw_rate;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = yaw_bias;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b53c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = yaw_acc;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800b546:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroZ;
 800b54a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b54c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


			S11_angle = S11_yaw;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_yaw;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_yaw;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b56a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_yaw;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_yaw;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b57e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_yaw;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b588:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_yaw;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b590:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_yaw;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b598:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_yaw;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5a0:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800b5a2:	e008      	b.n	800b5b6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>
 800b5a4:	40400000 	.word	0x40400000
 800b5a8:	3c23d70a 	.word	0x3c23d70a
 800b5ac:	43480000 	.word	0x43480000
 800b5b0:	41f00000 	.word	0x41f00000
			break;
 800b5b4:	bf00      	nop

	}

    angle_ekf = (angle_ekf) + st*(angle_rate);
 800b5b6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800b5ba:	f7f4 ff2d 	bl	8000418 <__aeabi_f2d>
 800b5be:	4680      	mov	r8, r0
 800b5c0:	4689      	mov	r9, r1
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	e9d3 4560 	ldrd	r4, r5, [r3, #384]	; 0x180
 800b5c8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800b5cc:	f7f4 ff24 	bl	8000418 <__aeabi_f2d>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f7f4 ff76 	bl	80004c8 <__aeabi_dmul>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7f4 fdba 	bl	800015c <__adddf3>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	f7f5 fa42 	bl	8000a78 <__aeabi_d2f>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    float CS_m11 = S13_angle + S33_angle*st;
 800b5fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800b5fe:	f7f4 ff0b 	bl	8000418 <__aeabi_f2d>
 800b602:	4604      	mov	r4, r0
 800b604:	460d      	mov	r5, r1
 800b606:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b608:	f7f4 ff06 	bl	8000418 <__aeabi_f2d>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800b612:	f7f4 ff59 	bl	80004c8 <__aeabi_dmul>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4620      	mov	r0, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	f7f4 fd9d 	bl	800015c <__adddf3>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4610      	mov	r0, r2
 800b628:	4619      	mov	r1, r3
 800b62a:	f7f5 fa25 	bl	8000a78 <__aeabi_d2f>
 800b62e:	4603      	mov	r3, r0
 800b630:	653b      	str	r3, [r7, #80]	; 0x50

    S11_angle = S11_angle + sa + CS_m11*st + S31_angle*st;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b636:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f5 fa72 	bl	8000b24 <__addsf3>
 800b640:	4603      	mov	r3, r0
 800b642:	4618      	mov	r0, r3
 800b644:	f7f4 fee8 	bl	8000418 <__aeabi_f2d>
 800b648:	4604      	mov	r4, r0
 800b64a:	460d      	mov	r5, r1
 800b64c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b64e:	f7f4 fee3 	bl	8000418 <__aeabi_f2d>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800b658:	f7f4 ff36 	bl	80004c8 <__aeabi_dmul>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4620      	mov	r0, r4
 800b662:	4629      	mov	r1, r5
 800b664:	f7f4 fd7a 	bl	800015c <__adddf3>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4614      	mov	r4, r2
 800b66e:	461d      	mov	r5, r3
 800b670:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b672:	f7f4 fed1 	bl	8000418 <__aeabi_f2d>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800b67c:	f7f4 ff24 	bl	80004c8 <__aeabi_dmul>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4620      	mov	r0, r4
 800b686:	4629      	mov	r1, r5
 800b688:	f7f4 fd68 	bl	800015c <__adddf3>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4610      	mov	r0, r2
 800b692:	4619      	mov	r1, r3
 800b694:	f7f5 f9f0 	bl	8000a78 <__aeabi_d2f>
 800b698:	4603      	mov	r3, r0
 800b69a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    S12_angle = S12_angle + S32_angle*st;
 800b69e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b6a2:	f7f4 feb9 	bl	8000418 <__aeabi_f2d>
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	460d      	mov	r5, r1
 800b6aa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b6ac:	f7f4 feb4 	bl	8000418 <__aeabi_f2d>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800b6b6:	f7f4 ff07 	bl	80004c8 <__aeabi_dmul>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4620      	mov	r0, r4
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	f7f4 fd4b 	bl	800015c <__adddf3>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7f5 f9d3 	bl	8000a78 <__aeabi_d2f>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    S13_angle = CS_m11;
 800b6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    S21_angle = S21_angle + S23_angle*st;
 800b6de:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b6e2:	f7f4 fe99 	bl	8000418 <__aeabi_f2d>
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b6ec:	f7f4 fe94 	bl	8000418 <__aeabi_f2d>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800b6f6:	f7f4 fee7 	bl	80004c8 <__aeabi_dmul>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4620      	mov	r0, r4
 800b700:	4629      	mov	r1, r5
 800b702:	f7f4 fd2b 	bl	800015c <__adddf3>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4610      	mov	r0, r2
 800b70c:	4619      	mov	r1, r3
 800b70e:	f7f5 f9b3 	bl	8000a78 <__aeabi_d2f>
 800b712:	4603      	mov	r3, r0
 800b714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    S22_angle = S22_angle + sb;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b71c:	4619      	mov	r1, r3
 800b71e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800b722:	f7f5 f9ff 	bl	8000b24 <__addsf3>
 800b726:	4603      	mov	r3, r0
 800b728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    S23_angle = S23_angle;
    S31_angle = S31_angle + S33_angle*st;
 800b72c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b72e:	f7f4 fe73 	bl	8000418 <__aeabi_f2d>
 800b732:	4604      	mov	r4, r0
 800b734:	460d      	mov	r5, r1
 800b736:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b738:	f7f4 fe6e 	bl	8000418 <__aeabi_f2d>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800b742:	f7f4 fec1 	bl	80004c8 <__aeabi_dmul>
 800b746:	4602      	mov	r2, r0
 800b748:	460b      	mov	r3, r1
 800b74a:	4620      	mov	r0, r4
 800b74c:	4629      	mov	r1, r5
 800b74e:	f7f4 fd05 	bl	800015c <__adddf3>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4610      	mov	r0, r2
 800b758:	4619      	mov	r1, r3
 800b75a:	f7f5 f98d 	bl	8000a78 <__aeabi_d2f>
 800b75e:	4603      	mov	r3, r0
 800b760:	67bb      	str	r3, [r7, #120]	; 0x78
    S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b766:	4619      	mov	r1, r3
 800b768:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b76a:	f7f5 f9db 	bl	8000b24 <__addsf3>
 800b76e:	4603      	mov	r3, r0
 800b770:	673b      	str	r3, [r7, #112]	; 0x70

    //ANGLE CORRECTION
    float CK11 = 1/(Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b77e:	4619      	mov	r1, r3
 800b780:	4610      	mov	r0, r2
 800b782:	f7f5 fad7 	bl	8000d34 <__aeabi_fmul>
 800b786:	4603      	mov	r3, r0
 800b788:	461c      	mov	r4, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b790:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800b794:	4618      	mov	r0, r3
 800b796:	f7f5 facd 	bl	8000d34 <__aeabi_fmul>
 800b79a:	4603      	mov	r3, r0
 800b79c:	4619      	mov	r1, r3
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7f5 f9c0 	bl	8000b24 <__addsf3>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b7ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7f5 fabf 	bl	8000d34 <__aeabi_fmul>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f7f5 f9b2 	bl	8000b24 <__addsf3>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	461c      	mov	r4, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b7ca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f5 fab1 	bl	8000d34 <__aeabi_fmul>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f7f5 f9a4 	bl	8000b24 <__addsf3>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	461c      	mov	r4, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b7e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f5 faa3 	bl	8000d34 <__aeabi_fmul>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f7f5 f996 	bl	8000b24 <__addsf3>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	461c      	mov	r4, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b806:	4618      	mov	r0, r3
 800b808:	f7f5 fa94 	bl	8000d34 <__aeabi_fmul>
 800b80c:	4603      	mov	r3, r0
 800b80e:	4619      	mov	r1, r3
 800b810:	4620      	mov	r0, r4
 800b812:	f7f5 f987 	bl	8000b24 <__addsf3>
 800b816:	4603      	mov	r3, r0
 800b818:	461c      	mov	r4, r3
 800b81a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800b81e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b822:	f7f5 fa87 	bl	8000d34 <__aeabi_fmul>
 800b826:	4603      	mov	r3, r0
 800b828:	4619      	mov	r1, r3
 800b82a:	4620      	mov	r0, r4
 800b82c:	f7f5 f97a 	bl	8000b24 <__addsf3>
 800b830:	4603      	mov	r3, r0
 800b832:	461c      	mov	r4, r3
 800b834:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b838:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b83c:	f7f5 fa7a 	bl	8000d34 <__aeabi_fmul>
 800b840:	4603      	mov	r3, r0
 800b842:	4619      	mov	r1, r3
 800b844:	4620      	mov	r0, r4
 800b846:	f7f5 f96b 	bl	8000b20 <__aeabi_fsub>
 800b84a:	4603      	mov	r3, r0
 800b84c:	461c      	mov	r4, r3
 800b84e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b850:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b854:	f7f5 fa6e 	bl	8000d34 <__aeabi_fmul>
 800b858:	4603      	mov	r3, r0
 800b85a:	4619      	mov	r1, r3
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7f5 f961 	bl	8000b24 <__addsf3>
 800b862:	4603      	mov	r3, r0
 800b864:	461c      	mov	r4, r3
 800b866:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b86a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800b86e:	f7f5 fa61 	bl	8000d34 <__aeabi_fmul>
 800b872:	4603      	mov	r3, r0
 800b874:	4619      	mov	r1, r3
 800b876:	4620      	mov	r0, r4
 800b878:	f7f5 f952 	bl	8000b20 <__aeabi_fsub>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461c      	mov	r4, r3
 800b880:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b882:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b886:	f7f5 fa55 	bl	8000d34 <__aeabi_fmul>
 800b88a:	4603      	mov	r3, r0
 800b88c:	4619      	mov	r1, r3
 800b88e:	4620      	mov	r0, r4
 800b890:	f7f5 f948 	bl	8000b24 <__addsf3>
 800b894:	4603      	mov	r3, r0
 800b896:	461c      	mov	r4, r3
 800b898:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b89a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b89e:	f7f5 fa49 	bl	8000d34 <__aeabi_fmul>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f7f5 f93a 	bl	8000b20 <__aeabi_fsub>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	461c      	mov	r4, r3
 800b8b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b8b2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b8b6:	f7f5 fa3d 	bl	8000d34 <__aeabi_fmul>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f7f5 f930 	bl	8000b24 <__addsf3>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461c      	mov	r4, r3
 800b8c8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b8ca:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800b8ce:	f7f5 fa31 	bl	8000d34 <__aeabi_fmul>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7f5 f922 	bl	8000b20 <__aeabi_fsub>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	4619      	mov	r1, r3
 800b8e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b8e4:	f7f5 fada 	bl	8000e9c <__aeabi_fdiv>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    float CK12 = Qg + S22_angle + S23_angle + S32_angle + S33_angle;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b8f2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7f5 f914 	bl	8000b24 <__addsf3>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b900:	4618      	mov	r0, r3
 800b902:	f7f5 f90f 	bl	8000b24 <__addsf3>
 800b906:	4603      	mov	r3, r0
 800b908:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f5 f90a 	bl	8000b24 <__addsf3>
 800b910:	4603      	mov	r3, r0
 800b912:	4619      	mov	r1, r3
 800b914:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b916:	f7f5 f905 	bl	8000b24 <__addsf3>
 800b91a:	4603      	mov	r3, r0
 800b91c:	64bb      	str	r3, [r7, #72]	; 0x48
    float CK13 = S12_angle + S13_angle;
 800b91e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b922:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b926:	f7f5 f8fd 	bl	8000b24 <__addsf3>
 800b92a:	4603      	mov	r3, r0
 800b92c:	647b      	str	r3, [r7, #68]	; 0x44
    float CK14 = S21_angle + S31_angle;
 800b92e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b930:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b934:	f7f5 f8f6 	bl	8000b24 <__addsf3>
 800b938:	4603      	mov	r3, r0
 800b93a:	643b      	str	r3, [r7, #64]	; 0x40
    float CK15 = Qa + S11_angle;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b942:	4619      	mov	r1, r3
 800b944:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b948:	f7f5 f8ec 	bl	8000b24 <__addsf3>
 800b94c:	4603      	mov	r3, r0
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
    float CK16 = S32_angle + S33_angle;
 800b950:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b952:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b954:	f7f5 f8e6 	bl	8000b24 <__addsf3>
 800b958:	4603      	mov	r3, r0
 800b95a:	63bb      	str	r3, [r7, #56]	; 0x38
    float CK17 = S22_angle + S23_angle;
 800b95c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b95e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800b962:	f7f5 f8df 	bl	8000b24 <__addsf3>
 800b966:	4603      	mov	r3, r0
 800b968:	637b      	str	r3, [r7, #52]	; 0x34

    float Kt11 = CK11*CK12*S11_angle - CK11*CK13*CK14;
 800b96a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b96c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b96e:	f7f5 f9e1 	bl	8000d34 <__aeabi_fmul>
 800b972:	4603      	mov	r3, r0
 800b974:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b978:	4618      	mov	r0, r3
 800b97a:	f7f5 f9db 	bl	8000d34 <__aeabi_fmul>
 800b97e:	4603      	mov	r3, r0
 800b980:	461c      	mov	r4, r3
 800b982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b984:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b986:	f7f5 f9d5 	bl	8000d34 <__aeabi_fmul>
 800b98a:	4603      	mov	r3, r0
 800b98c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f5 f9d0 	bl	8000d34 <__aeabi_fmul>
 800b994:	4603      	mov	r3, r0
 800b996:	4619      	mov	r1, r3
 800b998:	4620      	mov	r0, r4
 800b99a:	f7f5 f8c1 	bl	8000b20 <__aeabi_fsub>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	633b      	str	r3, [r7, #48]	; 0x30
    float Kt12 = CK11*CK13*CK15 - CK11*CK13*S11_angle;
 800b9a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b9a6:	f7f5 f9c5 	bl	8000d34 <__aeabi_fmul>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f5 f9c0 	bl	8000d34 <__aeabi_fmul>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	461c      	mov	r4, r3
 800b9b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b9bc:	f7f5 f9ba 	bl	8000d34 <__aeabi_fmul>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7f5 f9b4 	bl	8000d34 <__aeabi_fmul>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f7f5 f8a5 	bl	8000b20 <__aeabi_fsub>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    float Kt21 = CK11*CK12*S21_angle - CK11*CK14*CK17;
 800b9da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b9dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b9de:	f7f5 f9a9 	bl	8000d34 <__aeabi_fmul>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7f5 f9a3 	bl	8000d34 <__aeabi_fmul>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	461c      	mov	r4, r3
 800b9f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b9f6:	f7f5 f99d 	bl	8000d34 <__aeabi_fmul>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7f5 f998 	bl	8000d34 <__aeabi_fmul>
 800ba04:	4603      	mov	r3, r0
 800ba06:	4619      	mov	r1, r3
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f7f5 f889 	bl	8000b20 <__aeabi_fsub>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
    float Kt22 = CK11*CK15*CK17 - CK11*CK13*S21_angle;
 800ba12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba16:	f7f5 f98d 	bl	8000d34 <__aeabi_fmul>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f5 f988 	bl	8000d34 <__aeabi_fmul>
 800ba24:	4603      	mov	r3, r0
 800ba26:	461c      	mov	r4, r3
 800ba28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba2c:	f7f5 f982 	bl	8000d34 <__aeabi_fmul>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7f5 f97c 	bl	8000d34 <__aeabi_fmul>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4620      	mov	r0, r4
 800ba42:	f7f5 f86d 	bl	8000b20 <__aeabi_fsub>
 800ba46:	4603      	mov	r3, r0
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
    float Kt31 = CK11*CK12*S31_angle - CK11*CK14*CK16;
 800ba4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba4c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba4e:	f7f5 f971 	bl	8000d34 <__aeabi_fmul>
 800ba52:	4603      	mov	r3, r0
 800ba54:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f5 f96c 	bl	8000d34 <__aeabi_fmul>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461c      	mov	r4, r3
 800ba60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba64:	f7f5 f966 	bl	8000d34 <__aeabi_fmul>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7f5 f961 	bl	8000d34 <__aeabi_fmul>
 800ba72:	4603      	mov	r3, r0
 800ba74:	4619      	mov	r1, r3
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7f5 f852 	bl	8000b20 <__aeabi_fsub>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	623b      	str	r3, [r7, #32]
    float Kt32 = CK11*CK15*CK16 - CK11*CK13*S31_angle;
 800ba80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba84:	f7f5 f956 	bl	8000d34 <__aeabi_fmul>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7f5 f951 	bl	8000d34 <__aeabi_fmul>
 800ba92:	4603      	mov	r3, r0
 800ba94:	461c      	mov	r4, r3
 800ba96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba9a:	f7f5 f94b 	bl	8000d34 <__aeabi_fmul>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f5 f946 	bl	8000d34 <__aeabi_fmul>
 800baa8:	4603      	mov	r3, r0
 800baaa:	4619      	mov	r1, r3
 800baac:	4620      	mov	r0, r4
 800baae:	f7f5 f837 	bl	8000b20 <__aeabi_fsub>
 800bab2:	4603      	mov	r3, r0
 800bab4:	61fb      	str	r3, [r7, #28]

    float Cx11 = angle_bias - gyro + angle_rate;
 800bab6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800baba:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800babe:	f7f5 f82f 	bl	8000b20 <__aeabi_fsub>
 800bac2:	4603      	mov	r3, r0
 800bac4:	4619      	mov	r1, r3
 800bac6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800baca:	f7f5 f82b 	bl	8000b24 <__addsf3>
 800bace:	4603      	mov	r3, r0
 800bad0:	61bb      	str	r3, [r7, #24]
    float Cx12 = angle_acc - angle_ekf;
 800bad2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bad6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800bada:	f7f5 f821 	bl	8000b20 <__aeabi_fsub>
 800bade:	4603      	mov	r3, r0
 800bae0:	617b      	str	r3, [r7, #20]

    angle_ekf = angle_ekf - Cx11*Kt12 + Cx12*Kt11;
 800bae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bae4:	69b8      	ldr	r0, [r7, #24]
 800bae6:	f7f5 f925 	bl	8000d34 <__aeabi_fmul>
 800baea:	4603      	mov	r3, r0
 800baec:	4619      	mov	r1, r3
 800baee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800baf2:	f7f5 f815 	bl	8000b20 <__aeabi_fsub>
 800baf6:	4603      	mov	r3, r0
 800baf8:	461c      	mov	r4, r3
 800bafa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bafc:	6978      	ldr	r0, [r7, #20]
 800bafe:	f7f5 f919 	bl	8000d34 <__aeabi_fmul>
 800bb02:	4603      	mov	r3, r0
 800bb04:	4619      	mov	r1, r3
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7f5 f80c 	bl	8000b24 <__addsf3>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    angle_bias = angle_bias - Cx11*Kt22 + Cx12*Kt21;
 800bb12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb14:	69b8      	ldr	r0, [r7, #24]
 800bb16:	f7f5 f90d 	bl	8000d34 <__aeabi_fmul>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800bb22:	f7f4 fffd 	bl	8000b20 <__aeabi_fsub>
 800bb26:	4603      	mov	r3, r0
 800bb28:	461c      	mov	r4, r3
 800bb2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb2c:	6978      	ldr	r0, [r7, #20]
 800bb2e:	f7f5 f901 	bl	8000d34 <__aeabi_fmul>
 800bb32:	4603      	mov	r3, r0
 800bb34:	4619      	mov	r1, r3
 800bb36:	4620      	mov	r0, r4
 800bb38:	f7f4 fff4 	bl	8000b24 <__addsf3>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    angle_rate = angle_rate - Cx11*Kt32 + Cx12*Kt31;
 800bb42:	69f9      	ldr	r1, [r7, #28]
 800bb44:	69b8      	ldr	r0, [r7, #24]
 800bb46:	f7f5 f8f5 	bl	8000d34 <__aeabi_fmul>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800bb52:	f7f4 ffe5 	bl	8000b20 <__aeabi_fsub>
 800bb56:	4603      	mov	r3, r0
 800bb58:	461c      	mov	r4, r3
 800bb5a:	6a39      	ldr	r1, [r7, #32]
 800bb5c:	6978      	ldr	r0, [r7, #20]
 800bb5e:	f7f5 f8e9 	bl	8000d34 <__aeabi_fmul>
 800bb62:	4603      	mov	r3, r0
 800bb64:	4619      	mov	r1, r3
 800bb66:	4620      	mov	r0, r4
 800bb68:	f7f4 ffdc 	bl	8000b24 <__addsf3>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    float CS11 = Kt32 - 1;
 800bb72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb76:	69f8      	ldr	r0, [r7, #28]
 800bb78:	f7f4 ffd2 	bl	8000b20 <__aeabi_fsub>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	613b      	str	r3, [r7, #16]
    float CS12 = Kt22 - 1;
 800bb80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb86:	f7f4 ffcb 	bl	8000b20 <__aeabi_fsub>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	60fb      	str	r3, [r7, #12]
    float CS13 = Kt11 - 1;
 800bb8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb94:	f7f4 ffc4 	bl	8000b20 <__aeabi_fsub>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	60bb      	str	r3, [r7, #8]

    S11_angle = - CS13*S11_angle - Kt12*S21_angle - Kt12*S31_angle;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7f5 f8c4 	bl	8000d34 <__aeabi_fmul>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461c      	mov	r4, r3
 800bbb0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800bbb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbb6:	f7f5 f8bd 	bl	8000d34 <__aeabi_fmul>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f7f4 ffae 	bl	8000b20 <__aeabi_fsub>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461c      	mov	r4, r3
 800bbc8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bbca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbcc:	f7f5 f8b2 	bl	8000d34 <__aeabi_fmul>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f7f4 ffa3 	bl	8000b20 <__aeabi_fsub>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    S12_angle = - CS13*S12_angle - Kt12*S22_angle - Kt12*S32_angle;
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bbe6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7f5 f8a2 	bl	8000d34 <__aeabi_fmul>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	461c      	mov	r4, r3
 800bbf4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800bbf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbfa:	f7f5 f89b 	bl	8000d34 <__aeabi_fmul>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	4619      	mov	r1, r3
 800bc02:	4620      	mov	r0, r4
 800bc04:	f7f4 ff8c 	bl	8000b20 <__aeabi_fsub>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	461c      	mov	r4, r3
 800bc0c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bc0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc10:	f7f5 f890 	bl	8000d34 <__aeabi_fmul>
 800bc14:	4603      	mov	r3, r0
 800bc16:	4619      	mov	r1, r3
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f7f4 ff81 	bl	8000b20 <__aeabi_fsub>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    S13_angle = - CS13*S13_angle - Kt12*S23_angle - Kt12*S33_angle;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bc2a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f5 f880 	bl	8000d34 <__aeabi_fmul>
 800bc34:	4603      	mov	r3, r0
 800bc36:	461c      	mov	r4, r3
 800bc38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc3c:	f7f5 f87a 	bl	8000d34 <__aeabi_fmul>
 800bc40:	4603      	mov	r3, r0
 800bc42:	4619      	mov	r1, r3
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7f4 ff6b 	bl	8000b20 <__aeabi_fsub>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	461c      	mov	r4, r3
 800bc4e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bc50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc52:	f7f5 f86f 	bl	8000d34 <__aeabi_fmul>
 800bc56:	4603      	mov	r3, r0
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f7f4 ff60 	bl	8000b20 <__aeabi_fsub>
 800bc60:	4603      	mov	r3, r0
 800bc62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    S21_angle = - CS12*S21_angle - Kt21*S11_angle - Kt22*S31_angle;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bc6c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f5 f85f 	bl	8000d34 <__aeabi_fmul>
 800bc76:	4603      	mov	r3, r0
 800bc78:	461c      	mov	r4, r3
 800bc7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc80:	f7f5 f858 	bl	8000d34 <__aeabi_fmul>
 800bc84:	4603      	mov	r3, r0
 800bc86:	4619      	mov	r1, r3
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f7f4 ff49 	bl	8000b20 <__aeabi_fsub>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	461c      	mov	r4, r3
 800bc92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bc94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc96:	f7f5 f84d 	bl	8000d34 <__aeabi_fmul>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f7f4 ff3e 	bl	8000b20 <__aeabi_fsub>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    S22_angle = - CS12*S22_angle - Kt21*S12_angle - Kt22*S32_angle;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bcb0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f5 f83d 	bl	8000d34 <__aeabi_fmul>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	461c      	mov	r4, r3
 800bcbe:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bcc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc4:	f7f5 f836 	bl	8000d34 <__aeabi_fmul>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	4619      	mov	r1, r3
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7f4 ff27 	bl	8000b20 <__aeabi_fsub>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	461c      	mov	r4, r3
 800bcd6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bcd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcda:	f7f5 f82b 	bl	8000d34 <__aeabi_fmul>
 800bcde:	4603      	mov	r3, r0
 800bce0:	4619      	mov	r1, r3
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7f4 ff1c 	bl	8000b20 <__aeabi_fsub>
 800bce8:	4603      	mov	r3, r0
 800bcea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    S23_angle = - CS12*S23_angle - Kt21*S13_angle - Kt22*S33_angle;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bcf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7f5 f81c 	bl	8000d34 <__aeabi_fmul>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	461c      	mov	r4, r3
 800bd00:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bd04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd06:	f7f5 f815 	bl	8000d34 <__aeabi_fmul>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f7f4 ff06 	bl	8000b20 <__aeabi_fsub>
 800bd14:	4603      	mov	r3, r0
 800bd16:	461c      	mov	r4, r3
 800bd18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bd1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd1c:	f7f5 f80a 	bl	8000d34 <__aeabi_fmul>
 800bd20:	4603      	mov	r3, r0
 800bd22:	4619      	mov	r1, r3
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7f4 fefb 	bl	8000b20 <__aeabi_fsub>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    S31_angle = - CS11*S31_angle - Kt31*S11_angle - Kt32*S21_angle;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd34:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7f4 fffc 	bl	8000d34 <__aeabi_fmul>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	461c      	mov	r4, r3
 800bd40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd44:	6a38      	ldr	r0, [r7, #32]
 800bd46:	f7f4 fff5 	bl	8000d34 <__aeabi_fmul>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f7f4 fee6 	bl	8000b20 <__aeabi_fsub>
 800bd54:	4603      	mov	r3, r0
 800bd56:	461c      	mov	r4, r3
 800bd58:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800bd5c:	69f8      	ldr	r0, [r7, #28]
 800bd5e:	f7f4 ffe9 	bl	8000d34 <__aeabi_fmul>
 800bd62:	4603      	mov	r3, r0
 800bd64:	4619      	mov	r1, r3
 800bd66:	4620      	mov	r0, r4
 800bd68:	f7f4 feda 	bl	8000b20 <__aeabi_fsub>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	67bb      	str	r3, [r7, #120]	; 0x78
    S32_angle = - CS11*S32_angle - Kt31*S12_angle - Kt32*S22_angle;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7f4 ffdb 	bl	8000d34 <__aeabi_fmul>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	461c      	mov	r4, r3
 800bd82:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bd86:	6a38      	ldr	r0, [r7, #32]
 800bd88:	f7f4 ffd4 	bl	8000d34 <__aeabi_fmul>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7f4 fec5 	bl	8000b20 <__aeabi_fsub>
 800bd96:	4603      	mov	r3, r0
 800bd98:	461c      	mov	r4, r3
 800bd9a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800bd9e:	69f8      	ldr	r0, [r7, #28]
 800bda0:	f7f4 ffc8 	bl	8000d34 <__aeabi_fmul>
 800bda4:	4603      	mov	r3, r0
 800bda6:	4619      	mov	r1, r3
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f7f4 feb9 	bl	8000b20 <__aeabi_fsub>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	677b      	str	r3, [r7, #116]	; 0x74
    S33_angle = - CS11*S33_angle - Kt31*S13_angle - Kt32*S23_angle;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bdb8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7f4 ffba 	bl	8000d34 <__aeabi_fmul>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	461c      	mov	r4, r3
 800bdc4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bdc8:	6a38      	ldr	r0, [r7, #32]
 800bdca:	f7f4 ffb3 	bl	8000d34 <__aeabi_fmul>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7f4 fea4 	bl	8000b20 <__aeabi_fsub>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461c      	mov	r4, r3
 800bddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bdde:	69f8      	ldr	r0, [r7, #28]
 800bde0:	f7f4 ffa8 	bl	8000d34 <__aeabi_fmul>
 800bde4:	4603      	mov	r3, r0
 800bde6:	4619      	mov	r1, r3
 800bde8:	4620      	mov	r0, r4
 800bdea:	f7f4 fe99 	bl	8000b20 <__aeabi_fsub>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	673b      	str	r3, [r7, #112]	; 0x70

    switch(euler_angle) {
 800bdf2:	78fb      	ldrb	r3, [r7, #3]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d070      	beq.n	800beda <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc1e>
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	f300 80ab 	bgt.w	800bf54 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d002      	beq.n	800be08 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xb4c>
 800be02:	2b01      	cmp	r3, #1
 800be04:	d035      	beq.n	800be72 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xbb6>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 800be06:	e0a5      	b.n	800bf54 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
    			 roll_ekf = angle_ekf ;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800be0e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    			 roll_rate = angle_rate;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800be18:	625a      	str	r2, [r3, #36]	; 0x24
    			 roll_bias = angle_bias;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800be20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    			 roll_acc = angle_acc ;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800be2a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    			 S11_roll = S11_angle;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800be34:	661a      	str	r2, [r3, #96]	; 0x60
    			 S12_roll = S12_angle;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800be3c:	665a      	str	r2, [r3, #100]	; 0x64
    			 S13_roll = S13_angle;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800be44:	671a      	str	r2, [r3, #112]	; 0x70
    			 S21_roll = S21_angle;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800be4c:	669a      	str	r2, [r3, #104]	; 0x68
    			 S22_roll = S22_angle;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be54:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S23_roll = S23_angle;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800be5a:	675a      	str	r2, [r3, #116]	; 0x74
    			 S31_roll = S31_angle;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be60:	679a      	str	r2, [r3, #120]	; 0x78
    			 S32_roll = S32_angle;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800be66:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S33_roll = S33_angle;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			break;
 800be70:	e070      	b.n	800bf54 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
    			 pitch_ekf = angle_ekf ;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800be78:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    			 pitch_rate = angle_rate;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800be82:	629a      	str	r2, [r3, #40]	; 0x28
    			 pitch_bias = angle_bias;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800be8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    			 pitch_acc = angle_acc ;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800be94:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    			 S11_pitch = S11_angle;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800be9e:	631a      	str	r2, [r3, #48]	; 0x30
    			 S12_pitch = S12_angle;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bea6:	635a      	str	r2, [r3, #52]	; 0x34
    			 S13_pitch = S13_angle;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800beae:	641a      	str	r2, [r3, #64]	; 0x40
    			 S21_pitch = S21_angle;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800beb6:	639a      	str	r2, [r3, #56]	; 0x38
    			 S22_pitch = S22_angle;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bebe:	63da      	str	r2, [r3, #60]	; 0x3c
    			 S23_pitch = S23_angle;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bec4:	645a      	str	r2, [r3, #68]	; 0x44
    			 S31_pitch = S31_angle;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800beca:	649a      	str	r2, [r3, #72]	; 0x48
    			 S32_pitch = S32_angle;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bed0:	64da      	str	r2, [r3, #76]	; 0x4c
    			 S33_pitch = S33_angle;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bed6:	651a      	str	r2, [r3, #80]	; 0x50
    			break;
 800bed8:	e03c      	b.n	800bf54 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
    			 yaw_ekf = angle_ekf ;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bee0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
    			 yaw_rate = angle_rate;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800beea:	62da      	str	r2, [r3, #44]	; 0x2c
    			 yaw_bias = angle_bias;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bef2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    			 yaw_acc = angle_acc ;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800befc:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    			 S11_yaw = S11_angle;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bf06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S12_yaw = S12_angle;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bf10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			 S13_yaw = S13_angle;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bf1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    			 S21_yaw = S21_angle;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bf24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    			 S22_yaw = S22_angle;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    			 S23_yaw = S23_angle;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf36:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    			 S31_yaw = S31_angle;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    			 S32_yaw = S32_angle;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    			 S33_yaw = S33_angle;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bf4e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    			break;
 800bf52:	bf00      	nop
}
 800bf54:	bf00      	nop
 800bf56:	37a8      	adds	r7, #168	; 0xa8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bf5e:	bf00      	nop

0800bf60 <_ZN15Kalman_Filtresi3RunEv>:

	xgps = xbody;
	ygps = ybody;

}
void Kalman_Filtresi::Run() {
 800bf60:	b590      	push	{r4, r7, lr}
 800bf62:	b08b      	sub	sp, #44	; 0x2c
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]

  acc_pos_x_med += acc_pos_x;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7f4 fdd5 	bl	8000b24 <__addsf3>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	605a      	str	r2, [r3, #4]
  float accX = acc[0];
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bf88:	623b      	str	r3, [r7, #32]
  float accY = acc[1];
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bf90:	61fb      	str	r3, [r7, #28]
  float accZ = acc[2];
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bf98:	61bb      	str	r3, [r7, #24]




    if(gyro_ready) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d011      	beq.n	800bfc8 <_ZN15Kalman_Filtresi3RunEv+0x68>

    pos_ekf_counter++;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	609a      	str	r2, [r3, #8]
    EKF_Attitude(ROLL);
 800bfae:	2100      	movs	r1, #0
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff f983 	bl	800b2bc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff f97f 	bl	800b2bc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 800bfbe:	2102      	movs	r1, #2
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff f97b 	bl	800b2bc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
 800bfc6:	e084      	b.n	800c0d2 <_ZN15Kalman_Filtresi3RunEv+0x172>
    }


    else {

    	for(int i=0; i<2000; i++) {
 800bfc8:	2300      	movs	r3, #0
 800bfca:	627b      	str	r3, [r7, #36]	; 0x24
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bfd2:	da5e      	bge.n	800c092 <_ZN15Kalman_Filtresi3RunEv+0x132>
    		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800bfd4:	6a39      	ldr	r1, [r7, #32]
 800bfd6:	6a38      	ldr	r0, [r7, #32]
 800bfd8:	f7f4 feac 	bl	8000d34 <__aeabi_fmul>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	461c      	mov	r4, r3
 800bfe0:	69f9      	ldr	r1, [r7, #28]
 800bfe2:	69f8      	ldr	r0, [r7, #28]
 800bfe4:	f7f4 fea6 	bl	8000d34 <__aeabi_fmul>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	4619      	mov	r1, r3
 800bfec:	4620      	mov	r0, r4
 800bfee:	f7f4 fd99 	bl	8000b24 <__addsf3>
 800bff2:	4603      	mov	r3, r0
 800bff4:	461c      	mov	r4, r3
 800bff6:	69b9      	ldr	r1, [r7, #24]
 800bff8:	69b8      	ldr	r0, [r7, #24]
 800bffa:	f7f4 fe9b 	bl	8000d34 <__aeabi_fmul>
 800bffe:	4603      	mov	r3, r0
 800c000:	4619      	mov	r1, r3
 800c002:	4620      	mov	r0, r4
 800c004:	f7f4 fd8e 	bl	8000b24 <__addsf3>
 800c008:	4603      	mov	r3, r0
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7f5 fef8 	bl	8001e00 <_ZSt4sqrtf>
 800c010:	6178      	str	r0, [r7, #20]

    		  float pitch_acc =  asin(accX/acctop)*rad2deg;
 800c012:	6979      	ldr	r1, [r7, #20]
 800c014:	6a38      	ldr	r0, [r7, #32]
 800c016:	f7f4 ff41 	bl	8000e9c <__aeabi_fdiv>
 800c01a:	4603      	mov	r3, r0
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7f5 fec9 	bl	8001db4 <_ZSt4asinf>
 800c022:	4602      	mov	r2, r0
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800c02a:	4619      	mov	r1, r3
 800c02c:	4610      	mov	r0, r2
 800c02e:	f7f4 fe81 	bl	8000d34 <__aeabi_fmul>
 800c032:	4603      	mov	r3, r0
 800c034:	613b      	str	r3, [r7, #16]
    		  float roll_acc  =  asin(accY/acctop)*rad2deg ;
 800c036:	6979      	ldr	r1, [r7, #20]
 800c038:	69f8      	ldr	r0, [r7, #28]
 800c03a:	f7f4 ff2f 	bl	8000e9c <__aeabi_fdiv>
 800c03e:	4603      	mov	r3, r0
 800c040:	4618      	mov	r0, r3
 800c042:	f7f5 feb7 	bl	8001db4 <_ZSt4asinf>
 800c046:	4602      	mov	r2, r0
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7f4 fe6f 	bl	8000d34 <__aeabi_fmul>
 800c056:	4603      	mov	r3, r0
 800c058:	60fb      	str	r3, [r7, #12]

        	ROLL_OFFSET += roll_acc;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c060:	68f9      	ldr	r1, [r7, #12]
 800c062:	4618      	mov	r0, r3
 800c064:	f7f4 fd5e 	bl	8000b24 <__addsf3>
 800c068:	4603      	mov	r3, r0
 800c06a:	461a      	mov	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
        	PITCH_OFFSET += pitch_acc;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c078:	6939      	ldr	r1, [r7, #16]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7f4 fd52 	bl	8000b24 <__addsf3>
 800c080:	4603      	mov	r3, r0
 800c082:	461a      	mov	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    	for(int i=0; i<2000; i++) {
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	3301      	adds	r3, #1
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
 800c090:	e79c      	b.n	800bfcc <_ZN15Kalman_Filtresi3RunEv+0x6c>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c098:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c09c:	4929      	ldr	r1, [pc, #164]	; (800c144 <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f4 fefc 	bl	8000e9c <__aeabi_fdiv>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c0b8:	4922      	ldr	r1, [pc, #136]	; (800c144 <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7f4 feee 	bl	8000e9c <__aeabi_fdiv>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

    	gyro_ready = true;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    state.angles[1] = pitch_ekf;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    state.angles[2] = -1*yaw_ekf;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800c0f0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

    state.rates[0] = roll_rate;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    state.rates[1] = pitch_rate;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    state.rates[2] = yaw_rate;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    state.bias[0] = roll_bias;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    state.bias[1] = pitch_bias;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    state.bias[2] = yaw_bias;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

}
 800c13c:	bf00      	nop
 800c13e:	372c      	adds	r7, #44	; 0x2c
 800c140:	46bd      	mov	sp, r7
 800c142:	bd90      	pop	{r4, r7, pc}
 800c144:	44fa0000 	.word	0x44fa0000

0800c148 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fc89 	bl	800ca6e <_ZN3lpfD1Ev>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800c162:	4618      	mov	r0, r3
 800c164:	f000 fc83 	bl	800ca6e <_ZN3lpfD1Ev>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 fc7d 	bl	800ca6e <_ZN3lpfD1Ev>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af04      	add	r7, sp, #16
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a27      	ldr	r2, [pc, #156]	; (800c228 <_ZN3PIDC1Ev+0xa8>)
 800c18c:	609a      	str	r2, [r3, #8]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a26      	ldr	r2, [pc, #152]	; (800c22c <_ZN3PIDC1Ev+0xac>)
 800c192:	60da      	str	r2, [r3, #12]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a26      	ldr	r2, [pc, #152]	; (800c230 <_ZN3PIDC1Ev+0xb0>)
 800c198:	611a      	str	r2, [r3, #16]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	22c8      	movs	r2, #200	; 0xc8
 800c19e:	615a      	str	r2, [r3, #20]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7f4 fd71 	bl	8000c8c <__aeabi_i2f>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c1b2:	f7f4 fe73 	bl	8000e9c <__aeabi_fdiv>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	619a      	str	r2, [r3, #24]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a1c      	ldr	r2, [pc, #112]	; (800c234 <_ZN3PIDC1Ev+0xb4>)
 800c1c2:	61da      	str	r2, [r3, #28]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	69da      	ldr	r2, [r3, #28]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	f7f4 fdb0 	bl	8000d34 <__aeabi_fmul>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	621a      	str	r2, [r3, #32]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c1e2:	a30d      	add	r3, pc, #52	; (adr r3, 800c218 <_ZN3PIDC1Ev+0x98>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1ec:	a30a      	add	r3, pc, #40	; (adr r3, 800c218 <_ZN3PIDC1Ev+0x98>)
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	e9cd 2300 	strd	r2, r3, [sp]
 800c1f6:	a30a      	add	r3, pc, #40	; (adr r3, 800c220 <_ZN3PIDC1Ev+0xa0>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	f000 fbc5 	bl	800c98c <_ZN3lpfC1Eddd>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c208:	669a      	str	r2, [r3, #104]	; 0x68
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	f3af 8000 	nop.w
 800c218:	de7ea5f8 	.word	0xde7ea5f8
 800c21c:	3fb2a454 	.word	0x3fb2a454
 800c220:	ab367a10 	.word	0xab367a10
 800c224:	3feb573e 	.word	0x3feb573e
 800c228:	3d4ccccd 	.word	0x3d4ccccd
 800c22c:	42f00000 	.word	0x42f00000
 800c230:	c2f00000 	.word	0xc2f00000
 800c234:	3e99999a 	.word	0x3e99999a

0800c238 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 800c238:	b590      	push	{r4, r7, lr}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 800c246:	6879      	ldr	r1, [r7, #4]
 800c248:	68b8      	ldr	r0, [r7, #8]
 800c24a:	f7f4 fc69 	bl	8000b20 <__aeabi_fsub>
 800c24e:	4603      	mov	r3, r0
 800c250:	461a      	mov	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ie_roll += e_angle*st;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	4619      	mov	r1, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	f7f4 fd63 	bl	8000d34 <__aeabi_fmul>
 800c26e:	4603      	mov	r3, r0
 800c270:	4619      	mov	r1, r3
 800c272:	4620      	mov	r0, r4
 800c274:	f7f4 fc56 	bl	8000b24 <__addsf3>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	67da      	str	r2, [r3, #124]	; 0x7c
	P = Kp_angle*e_angle;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c286:	4619      	mov	r1, r3
 800c288:	6838      	ldr	r0, [r7, #0]
 800c28a:	f7f4 fd53 	bl	8000d34 <__aeabi_fmul>
 800c28e:	4603      	mov	r3, r0
 800c290:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c296:	4619      	mov	r1, r3
 800c298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c29a:	f7f4 fd4b 	bl	8000d34 <__aeabi_fmul>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	613b      	str	r3, [r7, #16]
    return P+I;
 800c2a2:	6939      	ldr	r1, [r7, #16]
 800c2a4:	6978      	ldr	r0, [r7, #20]
 800c2a6:	f7f4 fc3d 	bl	8000b24 <__addsf3>
 800c2aa:	4603      	mov	r3, r0

}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	371c      	adds	r7, #28
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd90      	pop	{r4, r7, pc}

0800c2b4 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b08a      	sub	sp, #40	; 0x28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d90e      	bls.n	800c2ea <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	68b9      	ldr	r1, [r7, #8]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f4 fc26 	bl	8000b24 <__addsf3>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	461a      	mov	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = vz_def;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	69db      	ldr	r3, [r3, #28]
 800c2e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c2e8:	e01c      	b.n	800c324 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	f240 5213 	movw	r2, #1299	; 0x513
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d810      	bhi.n	800c316 <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6a1b      	ldr	r3, [r3, #32]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	68b8      	ldr	r0, [r7, #8]
 800c2fc:	f7f4 fc10 	bl	8000b20 <__aeabi_fsub>
 800c300:	4603      	mov	r3, r0
 800c302:	461a      	mov	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = -1 * vz_def;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	69db      	ldr	r3, [r3, #28]
 800c30e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
 800c314:	e006      	b.n	800c324 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = 0;
 800c31e:	f04f 0300 	mov.w	r3, #0
 800c322:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c328:	f7f4 fbfa 	bl	8000b20 <__aeabi_fsub>
 800c32c:	4603      	mov	r3, r0
 800c32e:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800c330:	6a39      	ldr	r1, [r7, #32]
 800c332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c334:	f7f4 fcfe 	bl	8000d34 <__aeabi_fmul>
 800c338:	4603      	mov	r3, r0
 800c33a:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800c33c:	6879      	ldr	r1, [r7, #4]
 800c33e:	68b8      	ldr	r0, [r7, #8]
 800c340:	f7f4 fbee 	bl	8000b20 <__aeabi_fsub>
 800c344:	4603      	mov	r3, r0
 800c346:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800c348:	69b9      	ldr	r1, [r7, #24]
 800c34a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c34c:	f7f4 fcf2 	bl	8000d34 <__aeabi_fmul>
 800c350:	4603      	mov	r3, r0
 800c352:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800c354:	6979      	ldr	r1, [r7, #20]
 800c356:	69f8      	ldr	r0, [r7, #28]
 800c358:	f7f4 fbe4 	bl	8000b24 <__addsf3>
 800c35c:	4603      	mov	r3, r0
 800c35e:	613b      	str	r3, [r7, #16]
    return PI;
 800c360:	693b      	ldr	r3, [r7, #16]

}
 800c362:	4618      	mov	r0, r3
 800c364:	3728      	adds	r7, #40	; 0x28
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	0000      	movs	r0, r0
 800c36c:	0000      	movs	r0, r0
	...

0800c370 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 800c370:	b5b0      	push	{r4, r5, r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c37e:	4618      	mov	r0, r3
 800c380:	f7f4 f84a 	bl	8000418 <__aeabi_f2d>
 800c384:	a31e      	add	r3, pc, #120	; (adr r3, 800c400 <_ZN3PID6RateFFEf+0x90>)
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f7f4 f89d 	bl	80004c8 <__aeabi_dmul>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	4614      	mov	r4, r2
 800c394:	461d      	mov	r5, r3
 800c396:	6838      	ldr	r0, [r7, #0]
 800c398:	f7f4 f83e 	bl	8000418 <__aeabi_f2d>
 800c39c:	a31a      	add	r3, pc, #104	; (adr r3, 800c408 <_ZN3PID6RateFFEf+0x98>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	f7f4 f891 	bl	80004c8 <__aeabi_dmul>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7f3 fed5 	bl	800015c <__adddf3>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4614      	mov	r4, r2
 800c3b8:	461d      	mov	r5, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f4 f82a 	bl	8000418 <__aeabi_f2d>
 800c3c4:	a310      	add	r3, pc, #64	; (adr r3, 800c408 <_ZN3PID6RateFFEf+0x98>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f4 f87d 	bl	80004c8 <__aeabi_dmul>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7f3 febf 	bl	8000158 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4610      	mov	r0, r2
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f7f4 fb49 	bl	8000a78 <__aeabi_d2f>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3ee:	68f9      	ldr	r1, [r7, #12]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7f4 fc9f 	bl	8000d34 <__aeabi_fmul>
 800c3f6:	4603      	mov	r3, r0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c400:	1eb851ec 	.word	0x1eb851ec
 800c404:	3fefeb85 	.word	0x3fefeb85
 800c408:	538ef34d 	.word	0x538ef34d
 800c40c:	3fb72474 	.word	0x3fb72474

0800c410 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800c410:	b590      	push	{r4, r7, lr}
 800c412:	b087      	sub	sp, #28
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	68b8      	ldr	r0, [r7, #8]
 800c422:	f7f4 fb7d 	bl	8000b20 <__aeabi_fsub>
 800c426:	4603      	mov	r3, r0
 800c428:	461a      	mov	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate += e_roll*st;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	4619      	mov	r1, r3
 800c43e:	4610      	mov	r0, r2
 800c440:	f7f4 fc78 	bl	8000d34 <__aeabi_fmul>
 800c444:	4603      	mov	r3, r0
 800c446:	4619      	mov	r1, r3
 800c448:	4620      	mov	r0, r4
 800c44a:	f7f4 fb6b 	bl	8000b24 <__addsf3>
 800c44e:	4603      	mov	r3, r0
 800c450:	461a      	mov	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	P = Kp * e_roll;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f4 fc68 	bl	8000d34 <__aeabi_fmul>
 800c464:	4603      	mov	r3, r0
 800c466:	461a      	mov	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c476:	4618      	mov	r0, r3
 800c478:	f7f4 fc5c 	bl	8000d34 <__aeabi_fmul>
 800c47c:	4603      	mov	r3, r0
 800c47e:	461a      	mov	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7f4 fb47 	bl	8000b20 <__aeabi_fsub>
 800c492:	4603      	mov	r3, r0
 800c494:	461a      	mov	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	f7f4 fcfd 	bl	8000e9c <__aeabi_fdiv>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3338      	adds	r3, #56	; 0x38
 800c4aa:	6979      	ldr	r1, [r7, #20]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 fa88 	bl	800c9c2 <_ZN3lpf3RunEf>
 800c4b2:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c4ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7f4 fc39 	bl	8000d34 <__aeabi_fmul>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	6979      	ldr	r1, [r7, #20]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7f4 fb2a 	bl	8000b20 <__aeabi_fsub>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7f4 fc2f 	bl	8000d34 <__aeabi_fmul>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	461a      	mov	r2, r3
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	f7f4 fb18 	bl	8000b24 <__addsf3>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c4fe:	4619      	mov	r1, r3
 800c500:	4610      	mov	r0, r2
 800c502:	f7f4 fb0f 	bl	8000b24 <__addsf3>
 800c506:	4603      	mov	r3, r0
 800c508:	461a      	mov	r2, r3
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800c520:	4b0e      	ldr	r3, [pc, #56]	; (800c55c <_ZN3PID9PID_Rate2Efffffff+0x14c>)
 800c522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 f9ba 	bl	800c8a0 <_ZN3PID3SatEfii>
 800c52c:	4602      	mov	r2, r0
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	alpha_dot_des_ = alpha_dot_des;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	62da      	str	r2, [r3, #44]	; 0x2c
	alpha_dot_ = alpha_dot;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	631a      	str	r2, [r3, #48]	; 0x30
	return pd;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 800c552:	4618      	mov	r0, r3
 800c554:	371c      	adds	r7, #28
 800c556:	46bd      	mov	sp, r7
 800c558:	bd90      	pop	{r4, r7, pc}
 800c55a:	bf00      	nop
 800c55c:	fffffed4 	.word	0xfffffed4

0800c560 <_ZN3PID7PID_PosEfffff>:

float PID::PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd) {
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	603b      	str	r3, [r7, #0]
	_e_pos = e_pos;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	601a      	str	r2, [r3, #0]
	e_pos = pos_des - pos;
 800c576:	6879      	ldr	r1, [r7, #4]
 800c578:	68b8      	ldr	r0, [r7, #8]
 800c57a:	f7f4 fad1 	bl	8000b20 <__aeabi_fsub>
 800c57e:	4603      	mov	r3, r0
 800c580:	461a      	mov	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	605a      	str	r2, [r3, #4]
	float P = Kp * e_pos;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	4619      	mov	r1, r3
 800c58c:	6838      	ldr	r0, [r7, #0]
 800c58e:	f7f4 fbd1 	bl	8000d34 <__aeabi_fmul>
 800c592:	4603      	mov	r3, r0
 800c594:	61fb      	str	r3, [r7, #28]

	float e_pos_dot = (e_pos - _e_pos)/st_pos;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	f7f4 fabd 	bl	8000b20 <__aeabi_fsub>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	f7f4 fc73 	bl	8000e9c <__aeabi_fdiv>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	61bb      	str	r3, [r7, #24]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	//alpha_dot_dot = d_filt.Run(alpha_dot_dot);

	float D = Kd * e_pos_dot;
 800c5ba:	69b9      	ldr	r1, [r7, #24]
 800c5bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5be:	f7f4 fbb9 	bl	8000d34 <__aeabi_fmul>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	617b      	str	r3, [r7, #20]
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	float pd = P + D;
 800c5c6:	6979      	ldr	r1, [r7, #20]
 800c5c8:	69f8      	ldr	r0, [r7, #28]
 800c5ca:	f7f4 faab 	bl	8000b24 <__addsf3>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	613b      	str	r3, [r7, #16]
	return pd;
 800c5d2:	693b      	ldr	r3, [r7, #16]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3720      	adds	r7, #32
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800c5dc:	b590      	push	{r4, r7, lr}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	68b8      	ldr	r0, [r7, #8]
 800c5ee:	f7f4 fa97 	bl	8000b20 <__aeabi_fsub>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	66da      	str	r2, [r3, #108]	; 0x6c
  float e_roll_der = - alpha_dot;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c600:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c606:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7f4 fd6d 	bl	80010ec <__aeabi_f2iz>
 800c612:	4604      	mov	r4, r0
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7f4 fd66 	bl	80010ec <__aeabi_f2iz>
 800c620:	4603      	mov	r3, r0
 800c622:	429c      	cmp	r4, r3
 800c624:	d019      	beq.n	800c65a <_ZN3PID7PD_RateEfffff+0x7e>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f8df 	bl	800c7f0 <_ZN3PID3sgnEf>
 800c632:	4603      	mov	r3, r0
 800c634:	461c      	mov	r4, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c63c:	4619      	mov	r1, r3
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 f8d6 	bl	800c7f0 <_ZN3PID3sgnEf>
 800c644:	4603      	mov	r3, r0
 800c646:	429c      	cmp	r4, r3
 800c648:	bf0c      	ite	eq
 800c64a:	2301      	moveq	r3, #1
 800c64c:	2300      	movne	r3, #0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <_ZN3PID7PD_RateEfffff+0x7e>
      e_roll_int = 0;
 800c654:	f04f 0300 	mov.w	r3, #0
 800c658:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c65e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c660:	4618      	mov	r0, r3
 800c662:	f7f4 fb67 	bl	8000d34 <__aeabi_fmul>
 800c666:	4603      	mov	r3, r0
 800c668:	461a      	mov	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c670:	4619      	mov	r1, r3
 800c672:	4610      	mov	r0, r2
 800c674:	f7f4 fa54 	bl	8000b20 <__aeabi_fsub>
 800c678:	4603      	mov	r3, r0
 800c67a:	494d      	ldr	r1, [pc, #308]	; (800c7b0 <_ZN3PID7PD_RateEfffff+0x1d4>)
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7f4 fb59 	bl	8000d34 <__aeabi_fmul>
 800c682:	4603      	mov	r3, r0
 800c684:	461a      	mov	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_int += de_filt*st;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	4619      	mov	r1, r3
 800c69e:	4610      	mov	r0, r2
 800c6a0:	f7f4 fb48 	bl	8000d34 <__aeabi_fmul>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f7f4 fa3b 	bl	8000b24 <__addsf3>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	de = e_roll - e_eski_roll;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f7f4 fa2c 	bl	8000b20 <__aeabi_fsub>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	e_eski_roll = e_roll;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	675a      	str	r2, [r3, #116]	; 0x74

  ie_roll += e_roll_int*st;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	6979      	ldr	r1, [r7, #20]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7f4 fb25 	bl	8000d34 <__aeabi_fmul>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f7f4 fa18 	bl	8000b24 <__addsf3>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	67da      	str	r2, [r3, #124]	; 0x7c

  ie_roll_sat = ie_roll;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7f4 fb11 	bl	8000d34 <__aeabi_fmul>
 800c712:	4603      	mov	r3, r0
 800c714:	461a      	mov	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c72e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c730:	4618      	mov	r0, r3
 800c732:	f7f4 faff 	bl	8000d34 <__aeabi_fmul>
 800c736:	4603      	mov	r3, r0
 800c738:	461a      	mov	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//D = lpf.update(D);
	pd = P + I + D;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7f4 f9e8 	bl	8000b24 <__addsf3>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c75e:	4619      	mov	r1, r3
 800c760:	4610      	mov	r0, r2
 800c762:	f7f4 f9df 	bl	8000b24 <__addsf3>
 800c766:	4603      	mov	r3, r0
 800c768:	461a      	mov	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800c780:	4b0c      	ldr	r3, [pc, #48]	; (800c7b4 <_ZN3PID7PD_RateEfffff+0x1d8>)
 800c782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 f88a 	bl	800c8a0 <_ZN3PID3SatEfii>
 800c78c:	4602      	mov	r2, r0
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return pd;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8

}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	371c      	adds	r7, #28
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd90      	pop	{r4, r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	42c80000 	.word	0x42c80000
 800c7b4:	fffffed4 	.word	0xfffffed4

0800c7b8 <_ZN3PID5resetEv>:

void PID::reset() {
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f04f 0200 	mov.w	r2, #0
 800c7c6:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f04f 0200 	mov.w	r2, #0
 800c7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f04f 0200 	mov.w	r2, #0
 800c7d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f04f 0200 	mov.w	r2, #0
 800c7e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bc80      	pop	{r7}
 800c7ee:	4770      	bx	lr

0800c7f0 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800c7fa:	f04f 0100 	mov.w	r1, #0
 800c7fe:	6838      	ldr	r0, [r7, #0]
 800c800:	f7f4 fc36 	bl	8001070 <__aeabi_fcmplt>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <_ZN3PID3sgnEf+0x1e>
 800c80a:	23ff      	movs	r3, #255	; 0xff
 800c80c:	e00a      	b.n	800c824 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800c80e:	f04f 0100 	mov.w	r1, #0
 800c812:	6838      	ldr	r0, [r7, #0]
 800c814:	f7f4 fc4a 	bl	80010ac <__aeabi_fcmpgt>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <_ZN3PID3sgnEf+0x32>
 800c81e:	2301      	movs	r3, #1
 800c820:	e000      	b.n	800c824 <_ZN3PID3sgnEf+0x34>
  return 0;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	607a      	str	r2, [r7, #4]
 800c838:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800c83a:	6a3b      	ldr	r3, [r7, #32]
 800c83c:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800c840:	dd24      	ble.n	800c88c <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7f4 fa22 	bl	8000c8c <__aeabi_i2f>
 800c848:	4603      	mov	r3, r0
 800c84a:	4619      	mov	r1, r3
 800c84c:	68b8      	ldr	r0, [r7, #8]
 800c84e:	f7f4 fc2d 	bl	80010ac <__aeabi_fcmpgt>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d005      	beq.n	800c864 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7f4 fa17 	bl	8000c8c <__aeabi_i2f>
 800c85e:	4603      	mov	r3, r0
 800c860:	617b      	str	r3, [r7, #20]
 800c862:	e015      	b.n	800c890 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800c864:	6838      	ldr	r0, [r7, #0]
 800c866:	f7f4 fa11 	bl	8000c8c <__aeabi_i2f>
 800c86a:	4603      	mov	r3, r0
 800c86c:	4619      	mov	r1, r3
 800c86e:	68b8      	ldr	r0, [r7, #8]
 800c870:	f7f4 fbfe 	bl	8001070 <__aeabi_fcmplt>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d005      	beq.n	800c886 <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800c87a:	6838      	ldr	r0, [r7, #0]
 800c87c:	f7f4 fa06 	bl	8000c8c <__aeabi_i2f>
 800c880:	4603      	mov	r3, r0
 800c882:	617b      	str	r3, [r7, #20]
 800c884:	e004      	b.n	800c890 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	617b      	str	r3, [r7, #20]
 800c88a:	e001      	b.n	800c890 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800c88c:	4b03      	ldr	r3, [pc, #12]	; (800c89c <_ZN3PID3SatEfiii+0x70>)
 800c88e:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800c890:	697b      	ldr	r3, [r7, #20]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3718      	adds	r7, #24
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	447a0000 	.word	0x447a0000

0800c8a0 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
 800c8ac:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7f4 f9ec 	bl	8000c8c <__aeabi_i2f>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	68b8      	ldr	r0, [r7, #8]
 800c8ba:	f7f4 fbf7 	bl	80010ac <__aeabi_fcmpgt>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d005      	beq.n	800c8d0 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7f4 f9e1 	bl	8000c8c <__aeabi_i2f>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	617b      	str	r3, [r7, #20]
 800c8ce:	e012      	b.n	800c8f6 <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800c8d0:	6838      	ldr	r0, [r7, #0]
 800c8d2:	f7f4 f9db 	bl	8000c8c <__aeabi_i2f>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	4619      	mov	r1, r3
 800c8da:	68b8      	ldr	r0, [r7, #8]
 800c8dc:	f7f4 fbc8 	bl	8001070 <__aeabi_fcmplt>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d005      	beq.n	800c8f2 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800c8e6:	6838      	ldr	r0, [r7, #0]
 800c8e8:	f7f4 f9d0 	bl	8000c8c <__aeabi_i2f>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	617b      	str	r3, [r7, #20]
 800c8f0:	e001      	b.n	800c8f6 <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800c8f6:	697b      	ldr	r3, [r7, #20]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3718      	adds	r7, #24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800c90a:	4b16      	ldr	r3, [pc, #88]	; (800c964 <_ZN3PID5F2thrEf+0x64>)
 800c90c:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800c90e:	4b16      	ldr	r3, [pc, #88]	; (800c968 <_ZN3PID5F2thrEf+0x68>)
 800c910:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800c912:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c916:	6838      	ldr	r0, [r7, #0]
 800c918:	f7f4 fac0 	bl	8000e9c <__aeabi_fdiv>
 800c91c:	4603      	mov	r3, r0
 800c91e:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800c920:	69f9      	ldr	r1, [r7, #28]
 800c922:	6978      	ldr	r0, [r7, #20]
 800c924:	f7f4 faba 	bl	8000e9c <__aeabi_fdiv>
 800c928:	4603      	mov	r3, r0
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7f5 fa68 	bl	8001e00 <_ZSt4sqrtf>
 800c930:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800c932:	490e      	ldr	r1, [pc, #56]	; (800c96c <_ZN3PID5F2thrEf+0x6c>)
 800c934:	6938      	ldr	r0, [r7, #16]
 800c936:	f7f4 f9fd 	bl	8000d34 <__aeabi_fmul>
 800c93a:	4603      	mov	r3, r0
 800c93c:	69b9      	ldr	r1, [r7, #24]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f4 faac 	bl	8000e9c <__aeabi_fdiv>
 800c944:	4603      	mov	r3, r0
 800c946:	4909      	ldr	r1, [pc, #36]	; (800c96c <_ZN3PID5F2thrEf+0x6c>)
 800c948:	4618      	mov	r0, r3
 800c94a:	f7f4 f8eb 	bl	8000b24 <__addsf3>
 800c94e:	4603      	mov	r3, r0
 800c950:	4618      	mov	r0, r3
 800c952:	f7f4 fbf1 	bl	8001138 <__aeabi_f2uiz>
 800c956:	4603      	mov	r3, r0
 800c958:	60fb      	str	r3, [r7, #12]
	return thr;
 800c95a:	68fb      	ldr	r3, [r7, #12]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3720      	adds	r7, #32
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	3359f513 	.word	0x3359f513
 800c968:	46896e00 	.word	0x46896e00
 800c96c:	447a0000 	.word	0x447a0000

0800c970 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3338      	adds	r3, #56	; 0x38
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 f876 	bl	800ca6e <_ZN3lpfD1Ev>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800c998:	68f9      	ldr	r1, [r7, #12]
 800c99a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c99e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800c9a2:	68f9      	ldr	r1, [r7, #12]
 800c9a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800c9ac:	68f9      	ldr	r1, [r7, #12]
 800c9ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c9b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bc80      	pop	{r7}
 800c9c0:	4770      	bx	lr

0800c9c2 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800c9c2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f3 fd1d 	bl	8000418 <__aeabi_f2d>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	f7f3 fd6f 	bl	80004c8 <__aeabi_dmul>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4690      	mov	r8, r2
 800c9f0:	4699      	mov	r9, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c9f8:	6838      	ldr	r0, [r7, #0]
 800c9fa:	f7f3 fd0d 	bl	8000418 <__aeabi_f2d>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	4620      	mov	r0, r4
 800ca04:	4629      	mov	r1, r5
 800ca06:	f7f3 fd5f 	bl	80004c8 <__aeabi_dmul>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4649      	mov	r1, r9
 800ca12:	f7f3 fba3 	bl	800015c <__adddf3>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4690      	mov	r8, r2
 800ca1c:	4699      	mov	r9, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7f3 fcf5 	bl	8000418 <__aeabi_f2d>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	4620      	mov	r0, r4
 800ca34:	4629      	mov	r1, r5
 800ca36:	f7f3 fd47 	bl	80004c8 <__aeabi_dmul>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4640      	mov	r0, r8
 800ca40:	4649      	mov	r1, r9
 800ca42:	f7f3 fb8b 	bl	800015c <__adddf3>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f7f4 f813 	bl	8000a78 <__aeabi_d2f>
 800ca52:	4603      	mov	r3, r0
 800ca54:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	601a      	str	r2, [r3, #0]
	y_ = y;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	605a      	str	r2, [r3, #4]
	return y;
 800ca62:	68fb      	ldr	r3, [r7, #12]

}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ca6e <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bc80      	pop	{r7}
 800ca80:	4770      	bx	lr
	...

0800ca84 <atanf>:
 800ca84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca88:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800ca8c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800ca90:	4604      	mov	r4, r0
 800ca92:	4680      	mov	r8, r0
 800ca94:	db0e      	blt.n	800cab4 <atanf+0x30>
 800ca96:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ca9a:	dd04      	ble.n	800caa6 <atanf+0x22>
 800ca9c:	4601      	mov	r1, r0
 800ca9e:	f7f4 f841 	bl	8000b24 <__addsf3>
 800caa2:	4604      	mov	r4, r0
 800caa4:	e003      	b.n	800caae <atanf+0x2a>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f300 80ce 	bgt.w	800cc48 <atanf+0x1c4>
 800caac:	4c67      	ldr	r4, [pc, #412]	; (800cc4c <atanf+0x1c8>)
 800caae:	4620      	mov	r0, r4
 800cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab4:	4b66      	ldr	r3, [pc, #408]	; (800cc50 <atanf+0x1cc>)
 800cab6:	429d      	cmp	r5, r3
 800cab8:	dc0e      	bgt.n	800cad8 <atanf+0x54>
 800caba:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800cabe:	da08      	bge.n	800cad2 <atanf+0x4e>
 800cac0:	4964      	ldr	r1, [pc, #400]	; (800cc54 <atanf+0x1d0>)
 800cac2:	f7f4 f82f 	bl	8000b24 <__addsf3>
 800cac6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800caca:	f7f4 faef 	bl	80010ac <__aeabi_fcmpgt>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d1ed      	bne.n	800caae <atanf+0x2a>
 800cad2:	f04f 36ff 	mov.w	r6, #4294967295
 800cad6:	e01c      	b.n	800cb12 <atanf+0x8e>
 800cad8:	f000 f914 	bl	800cd04 <fabsf>
 800cadc:	4b5e      	ldr	r3, [pc, #376]	; (800cc58 <atanf+0x1d4>)
 800cade:	4604      	mov	r4, r0
 800cae0:	429d      	cmp	r5, r3
 800cae2:	dc7c      	bgt.n	800cbde <atanf+0x15a>
 800cae4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cae8:	429d      	cmp	r5, r3
 800caea:	dc67      	bgt.n	800cbbc <atanf+0x138>
 800caec:	4601      	mov	r1, r0
 800caee:	f7f4 f819 	bl	8000b24 <__addsf3>
 800caf2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800caf6:	f7f4 f813 	bl	8000b20 <__aeabi_fsub>
 800cafa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cafe:	4605      	mov	r5, r0
 800cb00:	4620      	mov	r0, r4
 800cb02:	f7f4 f80f 	bl	8000b24 <__addsf3>
 800cb06:	4601      	mov	r1, r0
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f7f4 f9c7 	bl	8000e9c <__aeabi_fdiv>
 800cb0e:	2600      	movs	r6, #0
 800cb10:	4604      	mov	r4, r0
 800cb12:	4621      	mov	r1, r4
 800cb14:	4620      	mov	r0, r4
 800cb16:	f7f4 f90d 	bl	8000d34 <__aeabi_fmul>
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	f7f4 f909 	bl	8000d34 <__aeabi_fmul>
 800cb22:	4605      	mov	r5, r0
 800cb24:	494d      	ldr	r1, [pc, #308]	; (800cc5c <atanf+0x1d8>)
 800cb26:	f7f4 f905 	bl	8000d34 <__aeabi_fmul>
 800cb2a:	494d      	ldr	r1, [pc, #308]	; (800cc60 <atanf+0x1dc>)
 800cb2c:	f7f3 fffa 	bl	8000b24 <__addsf3>
 800cb30:	4629      	mov	r1, r5
 800cb32:	f7f4 f8ff 	bl	8000d34 <__aeabi_fmul>
 800cb36:	494b      	ldr	r1, [pc, #300]	; (800cc64 <atanf+0x1e0>)
 800cb38:	f7f3 fff4 	bl	8000b24 <__addsf3>
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f7f4 f8f9 	bl	8000d34 <__aeabi_fmul>
 800cb42:	4949      	ldr	r1, [pc, #292]	; (800cc68 <atanf+0x1e4>)
 800cb44:	f7f3 ffee 	bl	8000b24 <__addsf3>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7f4 f8f3 	bl	8000d34 <__aeabi_fmul>
 800cb4e:	4947      	ldr	r1, [pc, #284]	; (800cc6c <atanf+0x1e8>)
 800cb50:	f7f3 ffe8 	bl	8000b24 <__addsf3>
 800cb54:	4629      	mov	r1, r5
 800cb56:	f7f4 f8ed 	bl	8000d34 <__aeabi_fmul>
 800cb5a:	4945      	ldr	r1, [pc, #276]	; (800cc70 <atanf+0x1ec>)
 800cb5c:	f7f3 ffe2 	bl	8000b24 <__addsf3>
 800cb60:	4639      	mov	r1, r7
 800cb62:	f7f4 f8e7 	bl	8000d34 <__aeabi_fmul>
 800cb66:	4943      	ldr	r1, [pc, #268]	; (800cc74 <atanf+0x1f0>)
 800cb68:	4607      	mov	r7, r0
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7f4 f8e2 	bl	8000d34 <__aeabi_fmul>
 800cb70:	4941      	ldr	r1, [pc, #260]	; (800cc78 <atanf+0x1f4>)
 800cb72:	f7f3 ffd5 	bl	8000b20 <__aeabi_fsub>
 800cb76:	4629      	mov	r1, r5
 800cb78:	f7f4 f8dc 	bl	8000d34 <__aeabi_fmul>
 800cb7c:	493f      	ldr	r1, [pc, #252]	; (800cc7c <atanf+0x1f8>)
 800cb7e:	f7f3 ffcf 	bl	8000b20 <__aeabi_fsub>
 800cb82:	4629      	mov	r1, r5
 800cb84:	f7f4 f8d6 	bl	8000d34 <__aeabi_fmul>
 800cb88:	493d      	ldr	r1, [pc, #244]	; (800cc80 <atanf+0x1fc>)
 800cb8a:	f7f3 ffc9 	bl	8000b20 <__aeabi_fsub>
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f4 f8d0 	bl	8000d34 <__aeabi_fmul>
 800cb94:	493b      	ldr	r1, [pc, #236]	; (800cc84 <atanf+0x200>)
 800cb96:	f7f3 ffc3 	bl	8000b20 <__aeabi_fsub>
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	f7f4 f8ca 	bl	8000d34 <__aeabi_fmul>
 800cba0:	4601      	mov	r1, r0
 800cba2:	4638      	mov	r0, r7
 800cba4:	f7f3 ffbe 	bl	8000b24 <__addsf3>
 800cba8:	4621      	mov	r1, r4
 800cbaa:	f7f4 f8c3 	bl	8000d34 <__aeabi_fmul>
 800cbae:	1c73      	adds	r3, r6, #1
 800cbb0:	4601      	mov	r1, r0
 800cbb2:	d133      	bne.n	800cc1c <atanf+0x198>
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f7f3 ffb3 	bl	8000b20 <__aeabi_fsub>
 800cbba:	e772      	b.n	800caa2 <atanf+0x1e>
 800cbbc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cbc0:	f7f3 ffae 	bl	8000b20 <__aeabi_fsub>
 800cbc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cbc8:	4605      	mov	r5, r0
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7f3 ffaa 	bl	8000b24 <__addsf3>
 800cbd0:	4601      	mov	r1, r0
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f7f4 f962 	bl	8000e9c <__aeabi_fdiv>
 800cbd8:	2601      	movs	r6, #1
 800cbda:	4604      	mov	r4, r0
 800cbdc:	e799      	b.n	800cb12 <atanf+0x8e>
 800cbde:	4b2a      	ldr	r3, [pc, #168]	; (800cc88 <atanf+0x204>)
 800cbe0:	429d      	cmp	r5, r3
 800cbe2:	dc14      	bgt.n	800cc0e <atanf+0x18a>
 800cbe4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cbe8:	f7f3 ff9a 	bl	8000b20 <__aeabi_fsub>
 800cbec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f7f4 f89e 	bl	8000d34 <__aeabi_fmul>
 800cbf8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cbfc:	f7f3 ff92 	bl	8000b24 <__addsf3>
 800cc00:	4601      	mov	r1, r0
 800cc02:	4628      	mov	r0, r5
 800cc04:	f7f4 f94a 	bl	8000e9c <__aeabi_fdiv>
 800cc08:	2602      	movs	r6, #2
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	e781      	b.n	800cb12 <atanf+0x8e>
 800cc0e:	4601      	mov	r1, r0
 800cc10:	481e      	ldr	r0, [pc, #120]	; (800cc8c <atanf+0x208>)
 800cc12:	f7f4 f943 	bl	8000e9c <__aeabi_fdiv>
 800cc16:	2603      	movs	r6, #3
 800cc18:	4604      	mov	r4, r0
 800cc1a:	e77a      	b.n	800cb12 <atanf+0x8e>
 800cc1c:	4b1c      	ldr	r3, [pc, #112]	; (800cc90 <atanf+0x20c>)
 800cc1e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800cc22:	f7f3 ff7d 	bl	8000b20 <__aeabi_fsub>
 800cc26:	4621      	mov	r1, r4
 800cc28:	f7f3 ff7a 	bl	8000b20 <__aeabi_fsub>
 800cc2c:	4b19      	ldr	r3, [pc, #100]	; (800cc94 <atanf+0x210>)
 800cc2e:	4601      	mov	r1, r0
 800cc30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cc34:	f7f3 ff74 	bl	8000b20 <__aeabi_fsub>
 800cc38:	f1b8 0f00 	cmp.w	r8, #0
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	f6bf af36 	bge.w	800caae <atanf+0x2a>
 800cc42:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cc46:	e72c      	b.n	800caa2 <atanf+0x1e>
 800cc48:	4c13      	ldr	r4, [pc, #76]	; (800cc98 <atanf+0x214>)
 800cc4a:	e730      	b.n	800caae <atanf+0x2a>
 800cc4c:	bfc90fdb 	.word	0xbfc90fdb
 800cc50:	3edfffff 	.word	0x3edfffff
 800cc54:	7149f2ca 	.word	0x7149f2ca
 800cc58:	3f97ffff 	.word	0x3f97ffff
 800cc5c:	3c8569d7 	.word	0x3c8569d7
 800cc60:	3d4bda59 	.word	0x3d4bda59
 800cc64:	3d886b35 	.word	0x3d886b35
 800cc68:	3dba2e6e 	.word	0x3dba2e6e
 800cc6c:	3e124925 	.word	0x3e124925
 800cc70:	3eaaaaab 	.word	0x3eaaaaab
 800cc74:	bd15a221 	.word	0xbd15a221
 800cc78:	3d6ef16b 	.word	0x3d6ef16b
 800cc7c:	3d9d8795 	.word	0x3d9d8795
 800cc80:	3de38e38 	.word	0x3de38e38
 800cc84:	3e4ccccd 	.word	0x3e4ccccd
 800cc88:	401bffff 	.word	0x401bffff
 800cc8c:	bf800000 	.word	0xbf800000
 800cc90:	0800ee14 	.word	0x0800ee14
 800cc94:	0800ee04 	.word	0x0800ee04
 800cc98:	3fc90fdb 	.word	0x3fc90fdb

0800cc9c <cosf>:
 800cc9c:	b507      	push	{r0, r1, r2, lr}
 800cc9e:	4a18      	ldr	r2, [pc, #96]	; (800cd00 <cosf+0x64>)
 800cca0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cca4:	4293      	cmp	r3, r2
 800cca6:	4601      	mov	r1, r0
 800cca8:	dc03      	bgt.n	800ccb2 <cosf+0x16>
 800ccaa:	2100      	movs	r1, #0
 800ccac:	f001 fac4 	bl	800e238 <__kernel_cosf>
 800ccb0:	e004      	b.n	800ccbc <cosf+0x20>
 800ccb2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ccb6:	db04      	blt.n	800ccc2 <cosf+0x26>
 800ccb8:	f7f3 ff32 	bl	8000b20 <__aeabi_fsub>
 800ccbc:	b003      	add	sp, #12
 800ccbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccc2:	4669      	mov	r1, sp
 800ccc4:	f001 f908 	bl	800ded8 <__ieee754_rem_pio2f>
 800ccc8:	f000 0203 	and.w	r2, r0, #3
 800cccc:	2a01      	cmp	r2, #1
 800ccce:	d005      	beq.n	800ccdc <cosf+0x40>
 800ccd0:	2a02      	cmp	r2, #2
 800ccd2:	d00a      	beq.n	800ccea <cosf+0x4e>
 800ccd4:	b972      	cbnz	r2, 800ccf4 <cosf+0x58>
 800ccd6:	9901      	ldr	r1, [sp, #4]
 800ccd8:	9800      	ldr	r0, [sp, #0]
 800ccda:	e7e7      	b.n	800ccac <cosf+0x10>
 800ccdc:	9901      	ldr	r1, [sp, #4]
 800ccde:	9800      	ldr	r0, [sp, #0]
 800cce0:	f001 fde0 	bl	800e8a4 <__kernel_sinf>
 800cce4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cce8:	e7e8      	b.n	800ccbc <cosf+0x20>
 800ccea:	9901      	ldr	r1, [sp, #4]
 800ccec:	9800      	ldr	r0, [sp, #0]
 800ccee:	f001 faa3 	bl	800e238 <__kernel_cosf>
 800ccf2:	e7f7      	b.n	800cce4 <cosf+0x48>
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	9901      	ldr	r1, [sp, #4]
 800ccf8:	9800      	ldr	r0, [sp, #0]
 800ccfa:	f001 fdd3 	bl	800e8a4 <__kernel_sinf>
 800ccfe:	e7dd      	b.n	800ccbc <cosf+0x20>
 800cd00:	3f490fd8 	.word	0x3f490fd8

0800cd04 <fabsf>:
 800cd04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cd08:	4770      	bx	lr
	...

0800cd0c <sinf>:
 800cd0c:	b507      	push	{r0, r1, r2, lr}
 800cd0e:	4a19      	ldr	r2, [pc, #100]	; (800cd74 <sinf+0x68>)
 800cd10:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cd14:	4293      	cmp	r3, r2
 800cd16:	4601      	mov	r1, r0
 800cd18:	dc04      	bgt.n	800cd24 <sinf+0x18>
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	f001 fdc1 	bl	800e8a4 <__kernel_sinf>
 800cd22:	e004      	b.n	800cd2e <sinf+0x22>
 800cd24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd28:	db04      	blt.n	800cd34 <sinf+0x28>
 800cd2a:	f7f3 fef9 	bl	8000b20 <__aeabi_fsub>
 800cd2e:	b003      	add	sp, #12
 800cd30:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd34:	4669      	mov	r1, sp
 800cd36:	f001 f8cf 	bl	800ded8 <__ieee754_rem_pio2f>
 800cd3a:	f000 0003 	and.w	r0, r0, #3
 800cd3e:	2801      	cmp	r0, #1
 800cd40:	d006      	beq.n	800cd50 <sinf+0x44>
 800cd42:	2802      	cmp	r0, #2
 800cd44:	d009      	beq.n	800cd5a <sinf+0x4e>
 800cd46:	b980      	cbnz	r0, 800cd6a <sinf+0x5e>
 800cd48:	2201      	movs	r2, #1
 800cd4a:	9901      	ldr	r1, [sp, #4]
 800cd4c:	9800      	ldr	r0, [sp, #0]
 800cd4e:	e7e6      	b.n	800cd1e <sinf+0x12>
 800cd50:	9901      	ldr	r1, [sp, #4]
 800cd52:	9800      	ldr	r0, [sp, #0]
 800cd54:	f001 fa70 	bl	800e238 <__kernel_cosf>
 800cd58:	e7e9      	b.n	800cd2e <sinf+0x22>
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	9901      	ldr	r1, [sp, #4]
 800cd5e:	9800      	ldr	r0, [sp, #0]
 800cd60:	f001 fda0 	bl	800e8a4 <__kernel_sinf>
 800cd64:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cd68:	e7e1      	b.n	800cd2e <sinf+0x22>
 800cd6a:	9901      	ldr	r1, [sp, #4]
 800cd6c:	9800      	ldr	r0, [sp, #0]
 800cd6e:	f001 fa63 	bl	800e238 <__kernel_cosf>
 800cd72:	e7f7      	b.n	800cd64 <sinf+0x58>
 800cd74:	3f490fd8 	.word	0x3f490fd8

0800cd78 <pow>:
 800cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	461f      	mov	r7, r3
 800cd7e:	4680      	mov	r8, r0
 800cd80:	4689      	mov	r9, r1
 800cd82:	4616      	mov	r6, r2
 800cd84:	f000 f91c 	bl	800cfc0 <__ieee754_pow>
 800cd88:	4b4d      	ldr	r3, [pc, #308]	; (800cec0 <pow+0x148>)
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	f993 3000 	ldrsb.w	r3, [r3]
 800cd90:	460d      	mov	r5, r1
 800cd92:	3301      	adds	r3, #1
 800cd94:	d015      	beq.n	800cdc2 <pow+0x4a>
 800cd96:	4632      	mov	r2, r6
 800cd98:	463b      	mov	r3, r7
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	f7f3 fe2d 	bl	80009fc <__aeabi_dcmpun>
 800cda2:	b970      	cbnz	r0, 800cdc2 <pow+0x4a>
 800cda4:	4642      	mov	r2, r8
 800cda6:	464b      	mov	r3, r9
 800cda8:	4640      	mov	r0, r8
 800cdaa:	4649      	mov	r1, r9
 800cdac:	f7f3 fe26 	bl	80009fc <__aeabi_dcmpun>
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	b148      	cbz	r0, 800cdca <pow+0x52>
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4639      	mov	r1, r7
 800cdba:	f7f3 fded 	bl	8000998 <__aeabi_dcmpeq>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d17b      	bne.n	800ceba <pow+0x142>
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdca:	4640      	mov	r0, r8
 800cdcc:	4649      	mov	r1, r9
 800cdce:	f7f3 fde3 	bl	8000998 <__aeabi_dcmpeq>
 800cdd2:	b1e0      	cbz	r0, 800ce0e <pow+0x96>
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	4630      	mov	r0, r6
 800cdda:	4639      	mov	r1, r7
 800cddc:	f7f3 fddc 	bl	8000998 <__aeabi_dcmpeq>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d16a      	bne.n	800ceba <pow+0x142>
 800cde4:	4630      	mov	r0, r6
 800cde6:	4639      	mov	r1, r7
 800cde8:	f001 fdd5 	bl	800e996 <finite>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d0e8      	beq.n	800cdc2 <pow+0x4a>
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	4639      	mov	r1, r7
 800cdf8:	f7f3 fdd8 	bl	80009ac <__aeabi_dcmplt>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d0e0      	beq.n	800cdc2 <pow+0x4a>
 800ce00:	f001 ff7a 	bl	800ecf8 <__errno>
 800ce04:	2321      	movs	r3, #33	; 0x21
 800ce06:	2400      	movs	r4, #0
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	4d2e      	ldr	r5, [pc, #184]	; (800cec4 <pow+0x14c>)
 800ce0c:	e7d9      	b.n	800cdc2 <pow+0x4a>
 800ce0e:	4620      	mov	r0, r4
 800ce10:	4629      	mov	r1, r5
 800ce12:	f001 fdc0 	bl	800e996 <finite>
 800ce16:	bba8      	cbnz	r0, 800ce84 <pow+0x10c>
 800ce18:	4640      	mov	r0, r8
 800ce1a:	4649      	mov	r1, r9
 800ce1c:	f001 fdbb 	bl	800e996 <finite>
 800ce20:	b380      	cbz	r0, 800ce84 <pow+0x10c>
 800ce22:	4630      	mov	r0, r6
 800ce24:	4639      	mov	r1, r7
 800ce26:	f001 fdb6 	bl	800e996 <finite>
 800ce2a:	b358      	cbz	r0, 800ce84 <pow+0x10c>
 800ce2c:	4622      	mov	r2, r4
 800ce2e:	462b      	mov	r3, r5
 800ce30:	4620      	mov	r0, r4
 800ce32:	4629      	mov	r1, r5
 800ce34:	f7f3 fde2 	bl	80009fc <__aeabi_dcmpun>
 800ce38:	b160      	cbz	r0, 800ce54 <pow+0xdc>
 800ce3a:	f001 ff5d 	bl	800ecf8 <__errno>
 800ce3e:	2321      	movs	r3, #33	; 0x21
 800ce40:	2200      	movs	r2, #0
 800ce42:	6003      	str	r3, [r0, #0]
 800ce44:	2300      	movs	r3, #0
 800ce46:	4610      	mov	r0, r2
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f7f3 fc67 	bl	800071c <__aeabi_ddiv>
 800ce4e:	4604      	mov	r4, r0
 800ce50:	460d      	mov	r5, r1
 800ce52:	e7b6      	b.n	800cdc2 <pow+0x4a>
 800ce54:	f001 ff50 	bl	800ecf8 <__errno>
 800ce58:	2322      	movs	r3, #34	; 0x22
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	6003      	str	r3, [r0, #0]
 800ce5e:	4649      	mov	r1, r9
 800ce60:	2300      	movs	r3, #0
 800ce62:	4640      	mov	r0, r8
 800ce64:	f7f3 fda2 	bl	80009ac <__aeabi_dcmplt>
 800ce68:	2400      	movs	r4, #0
 800ce6a:	b148      	cbz	r0, 800ce80 <pow+0x108>
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	4639      	mov	r1, r7
 800ce70:	f001 fd9e 	bl	800e9b0 <rint>
 800ce74:	4632      	mov	r2, r6
 800ce76:	463b      	mov	r3, r7
 800ce78:	f7f3 fd8e 	bl	8000998 <__aeabi_dcmpeq>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d0c4      	beq.n	800ce0a <pow+0x92>
 800ce80:	4d11      	ldr	r5, [pc, #68]	; (800cec8 <pow+0x150>)
 800ce82:	e79e      	b.n	800cdc2 <pow+0x4a>
 800ce84:	2200      	movs	r2, #0
 800ce86:	2300      	movs	r3, #0
 800ce88:	4620      	mov	r0, r4
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	f7f3 fd84 	bl	8000998 <__aeabi_dcmpeq>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d096      	beq.n	800cdc2 <pow+0x4a>
 800ce94:	4640      	mov	r0, r8
 800ce96:	4649      	mov	r1, r9
 800ce98:	f001 fd7d 	bl	800e996 <finite>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d090      	beq.n	800cdc2 <pow+0x4a>
 800cea0:	4630      	mov	r0, r6
 800cea2:	4639      	mov	r1, r7
 800cea4:	f001 fd77 	bl	800e996 <finite>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d08a      	beq.n	800cdc2 <pow+0x4a>
 800ceac:	f001 ff24 	bl	800ecf8 <__errno>
 800ceb0:	2322      	movs	r3, #34	; 0x22
 800ceb2:	2400      	movs	r4, #0
 800ceb4:	2500      	movs	r5, #0
 800ceb6:	6003      	str	r3, [r0, #0]
 800ceb8:	e783      	b.n	800cdc2 <pow+0x4a>
 800ceba:	2400      	movs	r4, #0
 800cebc:	4d03      	ldr	r5, [pc, #12]	; (800cecc <pow+0x154>)
 800cebe:	e780      	b.n	800cdc2 <pow+0x4a>
 800cec0:	2000000d 	.word	0x2000000d
 800cec4:	fff00000 	.word	0xfff00000
 800cec8:	7ff00000 	.word	0x7ff00000
 800cecc:	3ff00000 	.word	0x3ff00000

0800ced0 <sqrt>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	4606      	mov	r6, r0
 800ced4:	460f      	mov	r7, r1
 800ced6:	f000 fd89 	bl	800d9ec <__ieee754_sqrt>
 800ceda:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <sqrt+0x54>)
 800cedc:	4604      	mov	r4, r0
 800cede:	f993 3000 	ldrsb.w	r3, [r3]
 800cee2:	460d      	mov	r5, r1
 800cee4:	3301      	adds	r3, #1
 800cee6:	d019      	beq.n	800cf1c <sqrt+0x4c>
 800cee8:	4632      	mov	r2, r6
 800ceea:	463b      	mov	r3, r7
 800ceec:	4630      	mov	r0, r6
 800ceee:	4639      	mov	r1, r7
 800cef0:	f7f3 fd84 	bl	80009fc <__aeabi_dcmpun>
 800cef4:	b990      	cbnz	r0, 800cf1c <sqrt+0x4c>
 800cef6:	2200      	movs	r2, #0
 800cef8:	2300      	movs	r3, #0
 800cefa:	4630      	mov	r0, r6
 800cefc:	4639      	mov	r1, r7
 800cefe:	f7f3 fd55 	bl	80009ac <__aeabi_dcmplt>
 800cf02:	b158      	cbz	r0, 800cf1c <sqrt+0x4c>
 800cf04:	f001 fef8 	bl	800ecf8 <__errno>
 800cf08:	2321      	movs	r3, #33	; 0x21
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	6003      	str	r3, [r0, #0]
 800cf0e:	2300      	movs	r3, #0
 800cf10:	4610      	mov	r0, r2
 800cf12:	4619      	mov	r1, r3
 800cf14:	f7f3 fc02 	bl	800071c <__aeabi_ddiv>
 800cf18:	4604      	mov	r4, r0
 800cf1a:	460d      	mov	r5, r1
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	4629      	mov	r1, r5
 800cf20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf22:	bf00      	nop
 800cf24:	2000000d 	.word	0x2000000d

0800cf28 <asinf>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	f000 fe0a 	bl	800db44 <__ieee754_asinf>
 800cf30:	4b0e      	ldr	r3, [pc, #56]	; (800cf6c <asinf+0x44>)
 800cf32:	4605      	mov	r5, r0
 800cf34:	f993 3000 	ldrsb.w	r3, [r3]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	d015      	beq.n	800cf68 <asinf+0x40>
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f7f4 f8be 	bl	80010c0 <__aeabi_fcmpun>
 800cf44:	b980      	cbnz	r0, 800cf68 <asinf+0x40>
 800cf46:	4620      	mov	r0, r4
 800cf48:	f7ff fedc 	bl	800cd04 <fabsf>
 800cf4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf50:	f7f4 f8ac 	bl	80010ac <__aeabi_fcmpgt>
 800cf54:	b140      	cbz	r0, 800cf68 <asinf+0x40>
 800cf56:	f001 fecf 	bl	800ecf8 <__errno>
 800cf5a:	2321      	movs	r3, #33	; 0x21
 800cf5c:	6003      	str	r3, [r0, #0]
 800cf5e:	4804      	ldr	r0, [pc, #16]	; (800cf70 <asinf+0x48>)
 800cf60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf64:	f001 be78 	b.w	800ec58 <nanf>
 800cf68:	4628      	mov	r0, r5
 800cf6a:	bd38      	pop	{r3, r4, r5, pc}
 800cf6c:	2000000d 	.word	0x2000000d
 800cf70:	0800ee24 	.word	0x0800ee24

0800cf74 <atan2f>:
 800cf74:	f000 bf2a 	b.w	800ddcc <__ieee754_atan2f>

0800cf78 <sqrtf>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	f001 f90a 	bl	800e194 <__ieee754_sqrtf>
 800cf80:	4b0d      	ldr	r3, [pc, #52]	; (800cfb8 <sqrtf+0x40>)
 800cf82:	4604      	mov	r4, r0
 800cf84:	f993 3000 	ldrsb.w	r3, [r3]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	d012      	beq.n	800cfb2 <sqrtf+0x3a>
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	4628      	mov	r0, r5
 800cf90:	f7f4 f896 	bl	80010c0 <__aeabi_fcmpun>
 800cf94:	b968      	cbnz	r0, 800cfb2 <sqrtf+0x3a>
 800cf96:	2100      	movs	r1, #0
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f7f4 f869 	bl	8001070 <__aeabi_fcmplt>
 800cf9e:	b140      	cbz	r0, 800cfb2 <sqrtf+0x3a>
 800cfa0:	f001 feaa 	bl	800ecf8 <__errno>
 800cfa4:	2321      	movs	r3, #33	; 0x21
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	6003      	str	r3, [r0, #0]
 800cfaa:	4608      	mov	r0, r1
 800cfac:	f7f3 ff76 	bl	8000e9c <__aeabi_fdiv>
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	bd38      	pop	{r3, r4, r5, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2000000d 	.word	0x2000000d
 800cfbc:	00000000 	.word	0x00000000

0800cfc0 <__ieee754_pow>:
 800cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc4:	b093      	sub	sp, #76	; 0x4c
 800cfc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfca:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800cfce:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cfd2:	ea55 0302 	orrs.w	r3, r5, r2
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	4688      	mov	r8, r1
 800cfda:	f000 84bf 	beq.w	800d95c <__ieee754_pow+0x99c>
 800cfde:	4b7e      	ldr	r3, [pc, #504]	; (800d1d8 <__ieee754_pow+0x218>)
 800cfe0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cfe4:	429c      	cmp	r4, r3
 800cfe6:	4689      	mov	r9, r1
 800cfe8:	4682      	mov	sl, r0
 800cfea:	dc09      	bgt.n	800d000 <__ieee754_pow+0x40>
 800cfec:	d103      	bne.n	800cff6 <__ieee754_pow+0x36>
 800cfee:	b978      	cbnz	r0, 800d010 <__ieee754_pow+0x50>
 800cff0:	42a5      	cmp	r5, r4
 800cff2:	dd02      	ble.n	800cffa <__ieee754_pow+0x3a>
 800cff4:	e00c      	b.n	800d010 <__ieee754_pow+0x50>
 800cff6:	429d      	cmp	r5, r3
 800cff8:	dc02      	bgt.n	800d000 <__ieee754_pow+0x40>
 800cffa:	429d      	cmp	r5, r3
 800cffc:	d10e      	bne.n	800d01c <__ieee754_pow+0x5c>
 800cffe:	b16a      	cbz	r2, 800d01c <__ieee754_pow+0x5c>
 800d000:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d004:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d008:	ea54 030a 	orrs.w	r3, r4, sl
 800d00c:	f000 84a6 	beq.w	800d95c <__ieee754_pow+0x99c>
 800d010:	4872      	ldr	r0, [pc, #456]	; (800d1dc <__ieee754_pow+0x21c>)
 800d012:	b013      	add	sp, #76	; 0x4c
 800d014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	f001 bcc4 	b.w	800e9a4 <nan>
 800d01c:	f1b9 0f00 	cmp.w	r9, #0
 800d020:	da39      	bge.n	800d096 <__ieee754_pow+0xd6>
 800d022:	4b6f      	ldr	r3, [pc, #444]	; (800d1e0 <__ieee754_pow+0x220>)
 800d024:	429d      	cmp	r5, r3
 800d026:	dc54      	bgt.n	800d0d2 <__ieee754_pow+0x112>
 800d028:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d02c:	429d      	cmp	r5, r3
 800d02e:	f340 84a6 	ble.w	800d97e <__ieee754_pow+0x9be>
 800d032:	152b      	asrs	r3, r5, #20
 800d034:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d038:	2b14      	cmp	r3, #20
 800d03a:	dd0f      	ble.n	800d05c <__ieee754_pow+0x9c>
 800d03c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d040:	fa22 f103 	lsr.w	r1, r2, r3
 800d044:	fa01 f303 	lsl.w	r3, r1, r3
 800d048:	4293      	cmp	r3, r2
 800d04a:	f040 8498 	bne.w	800d97e <__ieee754_pow+0x9be>
 800d04e:	f001 0101 	and.w	r1, r1, #1
 800d052:	f1c1 0302 	rsb	r3, r1, #2
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	b182      	cbz	r2, 800d07c <__ieee754_pow+0xbc>
 800d05a:	e05e      	b.n	800d11a <__ieee754_pow+0x15a>
 800d05c:	2a00      	cmp	r2, #0
 800d05e:	d15a      	bne.n	800d116 <__ieee754_pow+0x156>
 800d060:	f1c3 0314 	rsb	r3, r3, #20
 800d064:	fa45 f103 	asr.w	r1, r5, r3
 800d068:	fa01 f303 	lsl.w	r3, r1, r3
 800d06c:	42ab      	cmp	r3, r5
 800d06e:	f040 8483 	bne.w	800d978 <__ieee754_pow+0x9b8>
 800d072:	f001 0101 	and.w	r1, r1, #1
 800d076:	f1c1 0302 	rsb	r3, r1, #2
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	4b59      	ldr	r3, [pc, #356]	; (800d1e4 <__ieee754_pow+0x224>)
 800d07e:	429d      	cmp	r5, r3
 800d080:	d130      	bne.n	800d0e4 <__ieee754_pow+0x124>
 800d082:	2e00      	cmp	r6, #0
 800d084:	f280 8474 	bge.w	800d970 <__ieee754_pow+0x9b0>
 800d088:	463a      	mov	r2, r7
 800d08a:	4643      	mov	r3, r8
 800d08c:	2000      	movs	r0, #0
 800d08e:	4955      	ldr	r1, [pc, #340]	; (800d1e4 <__ieee754_pow+0x224>)
 800d090:	f7f3 fb44 	bl	800071c <__aeabi_ddiv>
 800d094:	e02f      	b.n	800d0f6 <__ieee754_pow+0x136>
 800d096:	2300      	movs	r3, #0
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	2a00      	cmp	r2, #0
 800d09c:	d13d      	bne.n	800d11a <__ieee754_pow+0x15a>
 800d09e:	4b4e      	ldr	r3, [pc, #312]	; (800d1d8 <__ieee754_pow+0x218>)
 800d0a0:	429d      	cmp	r5, r3
 800d0a2:	d1eb      	bne.n	800d07c <__ieee754_pow+0xbc>
 800d0a4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d0a8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d0ac:	ea53 030a 	orrs.w	r3, r3, sl
 800d0b0:	f000 8454 	beq.w	800d95c <__ieee754_pow+0x99c>
 800d0b4:	4b4c      	ldr	r3, [pc, #304]	; (800d1e8 <__ieee754_pow+0x228>)
 800d0b6:	429c      	cmp	r4, r3
 800d0b8:	dd0d      	ble.n	800d0d6 <__ieee754_pow+0x116>
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	f280 8454 	bge.w	800d968 <__ieee754_pow+0x9a8>
 800d0c0:	f04f 0b00 	mov.w	fp, #0
 800d0c4:	f04f 0c00 	mov.w	ip, #0
 800d0c8:	4658      	mov	r0, fp
 800d0ca:	4661      	mov	r1, ip
 800d0cc:	b013      	add	sp, #76	; 0x4c
 800d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	e7e0      	b.n	800d098 <__ieee754_pow+0xd8>
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	daf2      	bge.n	800d0c0 <__ieee754_pow+0x100>
 800d0da:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800d0de:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800d0e2:	e7f1      	b.n	800d0c8 <__ieee754_pow+0x108>
 800d0e4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800d0e8:	d108      	bne.n	800d0fc <__ieee754_pow+0x13c>
 800d0ea:	463a      	mov	r2, r7
 800d0ec:	4643      	mov	r3, r8
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	4641      	mov	r1, r8
 800d0f2:	f7f3 f9e9 	bl	80004c8 <__aeabi_dmul>
 800d0f6:	4683      	mov	fp, r0
 800d0f8:	468c      	mov	ip, r1
 800d0fa:	e7e5      	b.n	800d0c8 <__ieee754_pow+0x108>
 800d0fc:	4b3b      	ldr	r3, [pc, #236]	; (800d1ec <__ieee754_pow+0x22c>)
 800d0fe:	429e      	cmp	r6, r3
 800d100:	d10b      	bne.n	800d11a <__ieee754_pow+0x15a>
 800d102:	f1b9 0f00 	cmp.w	r9, #0
 800d106:	db08      	blt.n	800d11a <__ieee754_pow+0x15a>
 800d108:	4638      	mov	r0, r7
 800d10a:	4641      	mov	r1, r8
 800d10c:	b013      	add	sp, #76	; 0x4c
 800d10e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d112:	f000 bc6b 	b.w	800d9ec <__ieee754_sqrt>
 800d116:	2300      	movs	r3, #0
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	4638      	mov	r0, r7
 800d11c:	4641      	mov	r1, r8
 800d11e:	f001 fc37 	bl	800e990 <fabs>
 800d122:	4683      	mov	fp, r0
 800d124:	468c      	mov	ip, r1
 800d126:	f1ba 0f00 	cmp.w	sl, #0
 800d12a:	d129      	bne.n	800d180 <__ieee754_pow+0x1c0>
 800d12c:	b124      	cbz	r4, 800d138 <__ieee754_pow+0x178>
 800d12e:	4b2d      	ldr	r3, [pc, #180]	; (800d1e4 <__ieee754_pow+0x224>)
 800d130:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800d134:	429a      	cmp	r2, r3
 800d136:	d123      	bne.n	800d180 <__ieee754_pow+0x1c0>
 800d138:	2e00      	cmp	r6, #0
 800d13a:	da07      	bge.n	800d14c <__ieee754_pow+0x18c>
 800d13c:	465a      	mov	r2, fp
 800d13e:	4663      	mov	r3, ip
 800d140:	2000      	movs	r0, #0
 800d142:	4928      	ldr	r1, [pc, #160]	; (800d1e4 <__ieee754_pow+0x224>)
 800d144:	f7f3 faea 	bl	800071c <__aeabi_ddiv>
 800d148:	4683      	mov	fp, r0
 800d14a:	468c      	mov	ip, r1
 800d14c:	f1b9 0f00 	cmp.w	r9, #0
 800d150:	daba      	bge.n	800d0c8 <__ieee754_pow+0x108>
 800d152:	9b00      	ldr	r3, [sp, #0]
 800d154:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d158:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d15c:	4323      	orrs	r3, r4
 800d15e:	d108      	bne.n	800d172 <__ieee754_pow+0x1b2>
 800d160:	465a      	mov	r2, fp
 800d162:	4663      	mov	r3, ip
 800d164:	4658      	mov	r0, fp
 800d166:	4661      	mov	r1, ip
 800d168:	f7f2 fff6 	bl	8000158 <__aeabi_dsub>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	e78e      	b.n	800d090 <__ieee754_pow+0xd0>
 800d172:	9b00      	ldr	r3, [sp, #0]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d1a7      	bne.n	800d0c8 <__ieee754_pow+0x108>
 800d178:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800d17c:	469c      	mov	ip, r3
 800d17e:	e7a3      	b.n	800d0c8 <__ieee754_pow+0x108>
 800d180:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800d184:	3b01      	subs	r3, #1
 800d186:	930c      	str	r3, [sp, #48]	; 0x30
 800d188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d18a:	9b00      	ldr	r3, [sp, #0]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	d104      	bne.n	800d19a <__ieee754_pow+0x1da>
 800d190:	463a      	mov	r2, r7
 800d192:	4643      	mov	r3, r8
 800d194:	4638      	mov	r0, r7
 800d196:	4641      	mov	r1, r8
 800d198:	e7e6      	b.n	800d168 <__ieee754_pow+0x1a8>
 800d19a:	4b15      	ldr	r3, [pc, #84]	; (800d1f0 <__ieee754_pow+0x230>)
 800d19c:	429d      	cmp	r5, r3
 800d19e:	f340 80f9 	ble.w	800d394 <__ieee754_pow+0x3d4>
 800d1a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d1a6:	429d      	cmp	r5, r3
 800d1a8:	4b0f      	ldr	r3, [pc, #60]	; (800d1e8 <__ieee754_pow+0x228>)
 800d1aa:	dd09      	ble.n	800d1c0 <__ieee754_pow+0x200>
 800d1ac:	429c      	cmp	r4, r3
 800d1ae:	dc0c      	bgt.n	800d1ca <__ieee754_pow+0x20a>
 800d1b0:	2e00      	cmp	r6, #0
 800d1b2:	da85      	bge.n	800d0c0 <__ieee754_pow+0x100>
 800d1b4:	a306      	add	r3, pc, #24	; (adr r3, 800d1d0 <__ieee754_pow+0x210>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	4619      	mov	r1, r3
 800d1be:	e798      	b.n	800d0f2 <__ieee754_pow+0x132>
 800d1c0:	429c      	cmp	r4, r3
 800d1c2:	dbf5      	blt.n	800d1b0 <__ieee754_pow+0x1f0>
 800d1c4:	4b07      	ldr	r3, [pc, #28]	; (800d1e4 <__ieee754_pow+0x224>)
 800d1c6:	429c      	cmp	r4, r3
 800d1c8:	dd14      	ble.n	800d1f4 <__ieee754_pow+0x234>
 800d1ca:	2e00      	cmp	r6, #0
 800d1cc:	dcf2      	bgt.n	800d1b4 <__ieee754_pow+0x1f4>
 800d1ce:	e777      	b.n	800d0c0 <__ieee754_pow+0x100>
 800d1d0:	8800759c 	.word	0x8800759c
 800d1d4:	7e37e43c 	.word	0x7e37e43c
 800d1d8:	7ff00000 	.word	0x7ff00000
 800d1dc:	0800ee24 	.word	0x0800ee24
 800d1e0:	433fffff 	.word	0x433fffff
 800d1e4:	3ff00000 	.word	0x3ff00000
 800d1e8:	3fefffff 	.word	0x3fefffff
 800d1ec:	3fe00000 	.word	0x3fe00000
 800d1f0:	41e00000 	.word	0x41e00000
 800d1f4:	4661      	mov	r1, ip
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	4658      	mov	r0, fp
 800d1fa:	4b61      	ldr	r3, [pc, #388]	; (800d380 <__ieee754_pow+0x3c0>)
 800d1fc:	f7f2 ffac 	bl	8000158 <__aeabi_dsub>
 800d200:	a355      	add	r3, pc, #340	; (adr r3, 800d358 <__ieee754_pow+0x398>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	4604      	mov	r4, r0
 800d208:	460d      	mov	r5, r1
 800d20a:	f7f3 f95d 	bl	80004c8 <__aeabi_dmul>
 800d20e:	a354      	add	r3, pc, #336	; (adr r3, 800d360 <__ieee754_pow+0x3a0>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	4606      	mov	r6, r0
 800d216:	460f      	mov	r7, r1
 800d218:	4620      	mov	r0, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	f7f3 f954 	bl	80004c8 <__aeabi_dmul>
 800d220:	2200      	movs	r2, #0
 800d222:	4682      	mov	sl, r0
 800d224:	468b      	mov	fp, r1
 800d226:	4620      	mov	r0, r4
 800d228:	4629      	mov	r1, r5
 800d22a:	4b56      	ldr	r3, [pc, #344]	; (800d384 <__ieee754_pow+0x3c4>)
 800d22c:	f7f3 f94c 	bl	80004c8 <__aeabi_dmul>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	a14c      	add	r1, pc, #304	; (adr r1, 800d368 <__ieee754_pow+0x3a8>)
 800d236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d23a:	f7f2 ff8d 	bl	8000158 <__aeabi_dsub>
 800d23e:	4622      	mov	r2, r4
 800d240:	462b      	mov	r3, r5
 800d242:	f7f3 f941 	bl	80004c8 <__aeabi_dmul>
 800d246:	4602      	mov	r2, r0
 800d248:	460b      	mov	r3, r1
 800d24a:	2000      	movs	r0, #0
 800d24c:	494e      	ldr	r1, [pc, #312]	; (800d388 <__ieee754_pow+0x3c8>)
 800d24e:	f7f2 ff83 	bl	8000158 <__aeabi_dsub>
 800d252:	4622      	mov	r2, r4
 800d254:	462b      	mov	r3, r5
 800d256:	4680      	mov	r8, r0
 800d258:	4689      	mov	r9, r1
 800d25a:	4620      	mov	r0, r4
 800d25c:	4629      	mov	r1, r5
 800d25e:	f7f3 f933 	bl	80004c8 <__aeabi_dmul>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4640      	mov	r0, r8
 800d268:	4649      	mov	r1, r9
 800d26a:	f7f3 f92d 	bl	80004c8 <__aeabi_dmul>
 800d26e:	a340      	add	r3, pc, #256	; (adr r3, 800d370 <__ieee754_pow+0x3b0>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	f7f3 f928 	bl	80004c8 <__aeabi_dmul>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	4650      	mov	r0, sl
 800d27e:	4659      	mov	r1, fp
 800d280:	f7f2 ff6a 	bl	8000158 <__aeabi_dsub>
 800d284:	f04f 0a00 	mov.w	sl, #0
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	4630      	mov	r0, r6
 800d292:	4639      	mov	r1, r7
 800d294:	f7f2 ff62 	bl	800015c <__adddf3>
 800d298:	4632      	mov	r2, r6
 800d29a:	463b      	mov	r3, r7
 800d29c:	4650      	mov	r0, sl
 800d29e:	468b      	mov	fp, r1
 800d2a0:	f7f2 ff5a 	bl	8000158 <__aeabi_dsub>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f7f2 ff54 	bl	8000158 <__aeabi_dsub>
 800d2b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d2b4:	9b00      	ldr	r3, [sp, #0]
 800d2b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	f04f 0600 	mov.w	r6, #0
 800d2c0:	f04f 0200 	mov.w	r2, #0
 800d2c4:	bf0c      	ite	eq
 800d2c6:	4b31      	ldreq	r3, [pc, #196]	; (800d38c <__ieee754_pow+0x3cc>)
 800d2c8:	4b2d      	ldrne	r3, [pc, #180]	; (800d380 <__ieee754_pow+0x3c0>)
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	460d      	mov	r5, r1
 800d2ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2d2:	e9cd 2300 	strd	r2, r3, [sp]
 800d2d6:	4632      	mov	r2, r6
 800d2d8:	463b      	mov	r3, r7
 800d2da:	f7f2 ff3d 	bl	8000158 <__aeabi_dsub>
 800d2de:	4652      	mov	r2, sl
 800d2e0:	465b      	mov	r3, fp
 800d2e2:	f7f3 f8f1 	bl	80004c8 <__aeabi_dmul>
 800d2e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2ea:	4680      	mov	r8, r0
 800d2ec:	4689      	mov	r9, r1
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	f7f3 f8e9 	bl	80004c8 <__aeabi_dmul>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	f7f2 ff2d 	bl	800015c <__adddf3>
 800d302:	4632      	mov	r2, r6
 800d304:	463b      	mov	r3, r7
 800d306:	4680      	mov	r8, r0
 800d308:	4689      	mov	r9, r1
 800d30a:	4650      	mov	r0, sl
 800d30c:	4659      	mov	r1, fp
 800d30e:	f7f3 f8db 	bl	80004c8 <__aeabi_dmul>
 800d312:	4604      	mov	r4, r0
 800d314:	460d      	mov	r5, r1
 800d316:	460b      	mov	r3, r1
 800d318:	4602      	mov	r2, r0
 800d31a:	4649      	mov	r1, r9
 800d31c:	4640      	mov	r0, r8
 800d31e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d322:	f7f2 ff1b 	bl	800015c <__adddf3>
 800d326:	4b1a      	ldr	r3, [pc, #104]	; (800d390 <__ieee754_pow+0x3d0>)
 800d328:	4682      	mov	sl, r0
 800d32a:	4299      	cmp	r1, r3
 800d32c:	460f      	mov	r7, r1
 800d32e:	460e      	mov	r6, r1
 800d330:	f340 82ed 	ble.w	800d90e <__ieee754_pow+0x94e>
 800d334:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d338:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d33c:	4303      	orrs	r3, r0
 800d33e:	f000 81e7 	beq.w	800d710 <__ieee754_pow+0x750>
 800d342:	a30d      	add	r3, pc, #52	; (adr r3, 800d378 <__ieee754_pow+0x3b8>)
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d34c:	f7f3 f8bc 	bl	80004c8 <__aeabi_dmul>
 800d350:	a309      	add	r3, pc, #36	; (adr r3, 800d378 <__ieee754_pow+0x3b8>)
 800d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d356:	e6cc      	b.n	800d0f2 <__ieee754_pow+0x132>
 800d358:	60000000 	.word	0x60000000
 800d35c:	3ff71547 	.word	0x3ff71547
 800d360:	f85ddf44 	.word	0xf85ddf44
 800d364:	3e54ae0b 	.word	0x3e54ae0b
 800d368:	55555555 	.word	0x55555555
 800d36c:	3fd55555 	.word	0x3fd55555
 800d370:	652b82fe 	.word	0x652b82fe
 800d374:	3ff71547 	.word	0x3ff71547
 800d378:	8800759c 	.word	0x8800759c
 800d37c:	7e37e43c 	.word	0x7e37e43c
 800d380:	3ff00000 	.word	0x3ff00000
 800d384:	3fd00000 	.word	0x3fd00000
 800d388:	3fe00000 	.word	0x3fe00000
 800d38c:	bff00000 	.word	0xbff00000
 800d390:	408fffff 	.word	0x408fffff
 800d394:	4bd4      	ldr	r3, [pc, #848]	; (800d6e8 <__ieee754_pow+0x728>)
 800d396:	2200      	movs	r2, #0
 800d398:	ea09 0303 	and.w	r3, r9, r3
 800d39c:	b943      	cbnz	r3, 800d3b0 <__ieee754_pow+0x3f0>
 800d39e:	4658      	mov	r0, fp
 800d3a0:	4661      	mov	r1, ip
 800d3a2:	4bd2      	ldr	r3, [pc, #840]	; (800d6ec <__ieee754_pow+0x72c>)
 800d3a4:	f7f3 f890 	bl	80004c8 <__aeabi_dmul>
 800d3a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d3ac:	4683      	mov	fp, r0
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	1523      	asrs	r3, r4, #20
 800d3b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d3b6:	4413      	add	r3, r2
 800d3b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3ba:	4bcd      	ldr	r3, [pc, #820]	; (800d6f0 <__ieee754_pow+0x730>)
 800d3bc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d3c0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d3c4:	429c      	cmp	r4, r3
 800d3c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d3ca:	dd08      	ble.n	800d3de <__ieee754_pow+0x41e>
 800d3cc:	4bc9      	ldr	r3, [pc, #804]	; (800d6f4 <__ieee754_pow+0x734>)
 800d3ce:	429c      	cmp	r4, r3
 800d3d0:	f340 819c 	ble.w	800d70c <__ieee754_pow+0x74c>
 800d3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d3da:	3301      	adds	r3, #1
 800d3dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3de:	2600      	movs	r6, #0
 800d3e0:	00f3      	lsls	r3, r6, #3
 800d3e2:	930d      	str	r3, [sp, #52]	; 0x34
 800d3e4:	4bc4      	ldr	r3, [pc, #784]	; (800d6f8 <__ieee754_pow+0x738>)
 800d3e6:	4658      	mov	r0, fp
 800d3e8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d3ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d3f8:	4623      	mov	r3, r4
 800d3fa:	f7f2 fead 	bl	8000158 <__aeabi_dsub>
 800d3fe:	46da      	mov	sl, fp
 800d400:	462b      	mov	r3, r5
 800d402:	4652      	mov	r2, sl
 800d404:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d408:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d40c:	f7f2 fea6 	bl	800015c <__adddf3>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	2000      	movs	r0, #0
 800d416:	49b9      	ldr	r1, [pc, #740]	; (800d6fc <__ieee754_pow+0x73c>)
 800d418:	f7f3 f980 	bl	800071c <__aeabi_ddiv>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d424:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d428:	f7f3 f84e 	bl	80004c8 <__aeabi_dmul>
 800d42c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d430:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d434:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d438:	2300      	movs	r3, #0
 800d43a:	2200      	movs	r2, #0
 800d43c:	46ab      	mov	fp, r5
 800d43e:	106d      	asrs	r5, r5, #1
 800d440:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d444:	9304      	str	r3, [sp, #16]
 800d446:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d44a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d44e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d452:	4640      	mov	r0, r8
 800d454:	4649      	mov	r1, r9
 800d456:	4614      	mov	r4, r2
 800d458:	461d      	mov	r5, r3
 800d45a:	f7f3 f835 	bl	80004c8 <__aeabi_dmul>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d466:	f7f2 fe77 	bl	8000158 <__aeabi_dsub>
 800d46a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d46e:	4606      	mov	r6, r0
 800d470:	460f      	mov	r7, r1
 800d472:	4620      	mov	r0, r4
 800d474:	4629      	mov	r1, r5
 800d476:	f7f2 fe6f 	bl	8000158 <__aeabi_dsub>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4650      	mov	r0, sl
 800d480:	4659      	mov	r1, fp
 800d482:	f7f2 fe69 	bl	8000158 <__aeabi_dsub>
 800d486:	4642      	mov	r2, r8
 800d488:	464b      	mov	r3, r9
 800d48a:	f7f3 f81d 	bl	80004c8 <__aeabi_dmul>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4630      	mov	r0, r6
 800d494:	4639      	mov	r1, r7
 800d496:	f7f2 fe5f 	bl	8000158 <__aeabi_dsub>
 800d49a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d49e:	f7f3 f813 	bl	80004c8 <__aeabi_dmul>
 800d4a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	f7f3 f80b 	bl	80004c8 <__aeabi_dmul>
 800d4b2:	a37b      	add	r3, pc, #492	; (adr r3, 800d6a0 <__ieee754_pow+0x6e0>)
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	460d      	mov	r5, r1
 800d4bc:	f7f3 f804 	bl	80004c8 <__aeabi_dmul>
 800d4c0:	a379      	add	r3, pc, #484	; (adr r3, 800d6a8 <__ieee754_pow+0x6e8>)
 800d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c6:	f7f2 fe49 	bl	800015c <__adddf3>
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	462b      	mov	r3, r5
 800d4ce:	f7f2 fffb 	bl	80004c8 <__aeabi_dmul>
 800d4d2:	a377      	add	r3, pc, #476	; (adr r3, 800d6b0 <__ieee754_pow+0x6f0>)
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	f7f2 fe40 	bl	800015c <__adddf3>
 800d4dc:	4622      	mov	r2, r4
 800d4de:	462b      	mov	r3, r5
 800d4e0:	f7f2 fff2 	bl	80004c8 <__aeabi_dmul>
 800d4e4:	a374      	add	r3, pc, #464	; (adr r3, 800d6b8 <__ieee754_pow+0x6f8>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f2 fe37 	bl	800015c <__adddf3>
 800d4ee:	4622      	mov	r2, r4
 800d4f0:	462b      	mov	r3, r5
 800d4f2:	f7f2 ffe9 	bl	80004c8 <__aeabi_dmul>
 800d4f6:	a372      	add	r3, pc, #456	; (adr r3, 800d6c0 <__ieee754_pow+0x700>)
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	f7f2 fe2e 	bl	800015c <__adddf3>
 800d500:	4622      	mov	r2, r4
 800d502:	462b      	mov	r3, r5
 800d504:	f7f2 ffe0 	bl	80004c8 <__aeabi_dmul>
 800d508:	a36f      	add	r3, pc, #444	; (adr r3, 800d6c8 <__ieee754_pow+0x708>)
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	f7f2 fe25 	bl	800015c <__adddf3>
 800d512:	4622      	mov	r2, r4
 800d514:	4606      	mov	r6, r0
 800d516:	460f      	mov	r7, r1
 800d518:	462b      	mov	r3, r5
 800d51a:	4620      	mov	r0, r4
 800d51c:	4629      	mov	r1, r5
 800d51e:	f7f2 ffd3 	bl	80004c8 <__aeabi_dmul>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	4630      	mov	r0, r6
 800d528:	4639      	mov	r1, r7
 800d52a:	f7f2 ffcd 	bl	80004c8 <__aeabi_dmul>
 800d52e:	4604      	mov	r4, r0
 800d530:	460d      	mov	r5, r1
 800d532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d536:	4642      	mov	r2, r8
 800d538:	464b      	mov	r3, r9
 800d53a:	f7f2 fe0f 	bl	800015c <__adddf3>
 800d53e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d542:	f7f2 ffc1 	bl	80004c8 <__aeabi_dmul>
 800d546:	4622      	mov	r2, r4
 800d548:	462b      	mov	r3, r5
 800d54a:	f7f2 fe07 	bl	800015c <__adddf3>
 800d54e:	4642      	mov	r2, r8
 800d550:	4606      	mov	r6, r0
 800d552:	460f      	mov	r7, r1
 800d554:	464b      	mov	r3, r9
 800d556:	4640      	mov	r0, r8
 800d558:	4649      	mov	r1, r9
 800d55a:	f7f2 ffb5 	bl	80004c8 <__aeabi_dmul>
 800d55e:	2200      	movs	r2, #0
 800d560:	4b67      	ldr	r3, [pc, #412]	; (800d700 <__ieee754_pow+0x740>)
 800d562:	4682      	mov	sl, r0
 800d564:	468b      	mov	fp, r1
 800d566:	f7f2 fdf9 	bl	800015c <__adddf3>
 800d56a:	4632      	mov	r2, r6
 800d56c:	463b      	mov	r3, r7
 800d56e:	f7f2 fdf5 	bl	800015c <__adddf3>
 800d572:	9c04      	ldr	r4, [sp, #16]
 800d574:	460d      	mov	r5, r1
 800d576:	4622      	mov	r2, r4
 800d578:	460b      	mov	r3, r1
 800d57a:	4640      	mov	r0, r8
 800d57c:	4649      	mov	r1, r9
 800d57e:	f7f2 ffa3 	bl	80004c8 <__aeabi_dmul>
 800d582:	2200      	movs	r2, #0
 800d584:	4680      	mov	r8, r0
 800d586:	4689      	mov	r9, r1
 800d588:	4620      	mov	r0, r4
 800d58a:	4629      	mov	r1, r5
 800d58c:	4b5c      	ldr	r3, [pc, #368]	; (800d700 <__ieee754_pow+0x740>)
 800d58e:	f7f2 fde3 	bl	8000158 <__aeabi_dsub>
 800d592:	4652      	mov	r2, sl
 800d594:	465b      	mov	r3, fp
 800d596:	f7f2 fddf 	bl	8000158 <__aeabi_dsub>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f2 fdd9 	bl	8000158 <__aeabi_dsub>
 800d5a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5aa:	f7f2 ff8d 	bl	80004c8 <__aeabi_dmul>
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	460f      	mov	r7, r1
 800d5b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d5b8:	462b      	mov	r3, r5
 800d5ba:	f7f2 ff85 	bl	80004c8 <__aeabi_dmul>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	4639      	mov	r1, r7
 800d5c6:	f7f2 fdc9 	bl	800015c <__adddf3>
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	4649      	mov	r1, r9
 800d5d6:	f7f2 fdc1 	bl	800015c <__adddf3>
 800d5da:	a33d      	add	r3, pc, #244	; (adr r3, 800d6d0 <__ieee754_pow+0x710>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	9c04      	ldr	r4, [sp, #16]
 800d5e2:	460d      	mov	r5, r1
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f7f2 ff6f 	bl	80004c8 <__aeabi_dmul>
 800d5ea:	4642      	mov	r2, r8
 800d5ec:	464b      	mov	r3, r9
 800d5ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	f7f2 fdaf 	bl	8000158 <__aeabi_dsub>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	4630      	mov	r0, r6
 800d600:	4639      	mov	r1, r7
 800d602:	f7f2 fda9 	bl	8000158 <__aeabi_dsub>
 800d606:	a334      	add	r3, pc, #208	; (adr r3, 800d6d8 <__ieee754_pow+0x718>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f7f2 ff5c 	bl	80004c8 <__aeabi_dmul>
 800d610:	a333      	add	r3, pc, #204	; (adr r3, 800d6e0 <__ieee754_pow+0x720>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	4606      	mov	r6, r0
 800d618:	460f      	mov	r7, r1
 800d61a:	4620      	mov	r0, r4
 800d61c:	4629      	mov	r1, r5
 800d61e:	f7f2 ff53 	bl	80004c8 <__aeabi_dmul>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	4630      	mov	r0, r6
 800d628:	4639      	mov	r1, r7
 800d62a:	f7f2 fd97 	bl	800015c <__adddf3>
 800d62e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d630:	4b34      	ldr	r3, [pc, #208]	; (800d704 <__ieee754_pow+0x744>)
 800d632:	4413      	add	r3, r2
 800d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d638:	f7f2 fd90 	bl	800015c <__adddf3>
 800d63c:	4680      	mov	r8, r0
 800d63e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d640:	4689      	mov	r9, r1
 800d642:	f7f2 fed7 	bl	80003f4 <__aeabi_i2d>
 800d646:	4604      	mov	r4, r0
 800d648:	460d      	mov	r5, r1
 800d64a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d64c:	4b2e      	ldr	r3, [pc, #184]	; (800d708 <__ieee754_pow+0x748>)
 800d64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d652:	4413      	add	r3, r2
 800d654:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d658:	4642      	mov	r2, r8
 800d65a:	464b      	mov	r3, r9
 800d65c:	f7f2 fd7e 	bl	800015c <__adddf3>
 800d660:	4632      	mov	r2, r6
 800d662:	463b      	mov	r3, r7
 800d664:	f7f2 fd7a 	bl	800015c <__adddf3>
 800d668:	4622      	mov	r2, r4
 800d66a:	462b      	mov	r3, r5
 800d66c:	f7f2 fd76 	bl	800015c <__adddf3>
 800d670:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d674:	4622      	mov	r2, r4
 800d676:	462b      	mov	r3, r5
 800d678:	4650      	mov	r0, sl
 800d67a:	468b      	mov	fp, r1
 800d67c:	f7f2 fd6c 	bl	8000158 <__aeabi_dsub>
 800d680:	4632      	mov	r2, r6
 800d682:	463b      	mov	r3, r7
 800d684:	f7f2 fd68 	bl	8000158 <__aeabi_dsub>
 800d688:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d68c:	f7f2 fd64 	bl	8000158 <__aeabi_dsub>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	4640      	mov	r0, r8
 800d696:	4649      	mov	r1, r9
 800d698:	e608      	b.n	800d2ac <__ieee754_pow+0x2ec>
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w
 800d6a0:	4a454eef 	.word	0x4a454eef
 800d6a4:	3fca7e28 	.word	0x3fca7e28
 800d6a8:	93c9db65 	.word	0x93c9db65
 800d6ac:	3fcd864a 	.word	0x3fcd864a
 800d6b0:	a91d4101 	.word	0xa91d4101
 800d6b4:	3fd17460 	.word	0x3fd17460
 800d6b8:	518f264d 	.word	0x518f264d
 800d6bc:	3fd55555 	.word	0x3fd55555
 800d6c0:	db6fabff 	.word	0xdb6fabff
 800d6c4:	3fdb6db6 	.word	0x3fdb6db6
 800d6c8:	33333303 	.word	0x33333303
 800d6cc:	3fe33333 	.word	0x3fe33333
 800d6d0:	e0000000 	.word	0xe0000000
 800d6d4:	3feec709 	.word	0x3feec709
 800d6d8:	dc3a03fd 	.word	0xdc3a03fd
 800d6dc:	3feec709 	.word	0x3feec709
 800d6e0:	145b01f5 	.word	0x145b01f5
 800d6e4:	be3e2fe0 	.word	0xbe3e2fe0
 800d6e8:	7ff00000 	.word	0x7ff00000
 800d6ec:	43400000 	.word	0x43400000
 800d6f0:	0003988e 	.word	0x0003988e
 800d6f4:	000bb679 	.word	0x000bb679
 800d6f8:	0800ee28 	.word	0x0800ee28
 800d6fc:	3ff00000 	.word	0x3ff00000
 800d700:	40080000 	.word	0x40080000
 800d704:	0800ee48 	.word	0x0800ee48
 800d708:	0800ee38 	.word	0x0800ee38
 800d70c:	2601      	movs	r6, #1
 800d70e:	e667      	b.n	800d3e0 <__ieee754_pow+0x420>
 800d710:	a39d      	add	r3, pc, #628	; (adr r3, 800d988 <__ieee754_pow+0x9c8>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	4640      	mov	r0, r8
 800d718:	4649      	mov	r1, r9
 800d71a:	f7f2 fd1f 	bl	800015c <__adddf3>
 800d71e:	4622      	mov	r2, r4
 800d720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d724:	462b      	mov	r3, r5
 800d726:	4650      	mov	r0, sl
 800d728:	4639      	mov	r1, r7
 800d72a:	f7f2 fd15 	bl	8000158 <__aeabi_dsub>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d736:	f7f3 f957 	bl	80009e8 <__aeabi_dcmpgt>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	f47f ae01 	bne.w	800d342 <__ieee754_pow+0x382>
 800d740:	4aa5      	ldr	r2, [pc, #660]	; (800d9d8 <__ieee754_pow+0xa18>)
 800d742:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d746:	4293      	cmp	r3, r2
 800d748:	f340 8103 	ble.w	800d952 <__ieee754_pow+0x992>
 800d74c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d750:	2000      	movs	r0, #0
 800d752:	151b      	asrs	r3, r3, #20
 800d754:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d758:	fa4a f303 	asr.w	r3, sl, r3
 800d75c:	4433      	add	r3, r6
 800d75e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d762:	4f9e      	ldr	r7, [pc, #632]	; (800d9dc <__ieee754_pow+0xa1c>)
 800d764:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d768:	4117      	asrs	r7, r2
 800d76a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d76e:	ea23 0107 	bic.w	r1, r3, r7
 800d772:	f1c2 0214 	rsb	r2, r2, #20
 800d776:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d77a:	460b      	mov	r3, r1
 800d77c:	fa4a fa02 	asr.w	sl, sl, r2
 800d780:	2e00      	cmp	r6, #0
 800d782:	4602      	mov	r2, r0
 800d784:	4629      	mov	r1, r5
 800d786:	4620      	mov	r0, r4
 800d788:	bfb8      	it	lt
 800d78a:	f1ca 0a00 	rsblt	sl, sl, #0
 800d78e:	f7f2 fce3 	bl	8000158 <__aeabi_dsub>
 800d792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d79a:	2400      	movs	r4, #0
 800d79c:	4642      	mov	r2, r8
 800d79e:	464b      	mov	r3, r9
 800d7a0:	f7f2 fcdc 	bl	800015c <__adddf3>
 800d7a4:	a37a      	add	r3, pc, #488	; (adr r3, 800d990 <__ieee754_pow+0x9d0>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	460d      	mov	r5, r1
 800d7ae:	f7f2 fe8b 	bl	80004c8 <__aeabi_dmul>
 800d7b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	460f      	mov	r7, r1
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7f2 fccb 	bl	8000158 <__aeabi_dsub>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4640      	mov	r0, r8
 800d7c8:	4649      	mov	r1, r9
 800d7ca:	f7f2 fcc5 	bl	8000158 <__aeabi_dsub>
 800d7ce:	a372      	add	r3, pc, #456	; (adr r3, 800d998 <__ieee754_pow+0x9d8>)
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	f7f2 fe78 	bl	80004c8 <__aeabi_dmul>
 800d7d8:	a371      	add	r3, pc, #452	; (adr r3, 800d9a0 <__ieee754_pow+0x9e0>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4689      	mov	r9, r1
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	f7f2 fe6f 	bl	80004c8 <__aeabi_dmul>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	4640      	mov	r0, r8
 800d7f0:	4649      	mov	r1, r9
 800d7f2:	f7f2 fcb3 	bl	800015c <__adddf3>
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4630      	mov	r0, r6
 800d800:	4639      	mov	r1, r7
 800d802:	f7f2 fcab 	bl	800015c <__adddf3>
 800d806:	4632      	mov	r2, r6
 800d808:	463b      	mov	r3, r7
 800d80a:	4680      	mov	r8, r0
 800d80c:	4689      	mov	r9, r1
 800d80e:	f7f2 fca3 	bl	8000158 <__aeabi_dsub>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	f7f2 fc9d 	bl	8000158 <__aeabi_dsub>
 800d81e:	4642      	mov	r2, r8
 800d820:	4606      	mov	r6, r0
 800d822:	460f      	mov	r7, r1
 800d824:	464b      	mov	r3, r9
 800d826:	4640      	mov	r0, r8
 800d828:	4649      	mov	r1, r9
 800d82a:	f7f2 fe4d 	bl	80004c8 <__aeabi_dmul>
 800d82e:	a35e      	add	r3, pc, #376	; (adr r3, 800d9a8 <__ieee754_pow+0x9e8>)
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	4604      	mov	r4, r0
 800d836:	460d      	mov	r5, r1
 800d838:	f7f2 fe46 	bl	80004c8 <__aeabi_dmul>
 800d83c:	a35c      	add	r3, pc, #368	; (adr r3, 800d9b0 <__ieee754_pow+0x9f0>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	f7f2 fc89 	bl	8000158 <__aeabi_dsub>
 800d846:	4622      	mov	r2, r4
 800d848:	462b      	mov	r3, r5
 800d84a:	f7f2 fe3d 	bl	80004c8 <__aeabi_dmul>
 800d84e:	a35a      	add	r3, pc, #360	; (adr r3, 800d9b8 <__ieee754_pow+0x9f8>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f7f2 fc82 	bl	800015c <__adddf3>
 800d858:	4622      	mov	r2, r4
 800d85a:	462b      	mov	r3, r5
 800d85c:	f7f2 fe34 	bl	80004c8 <__aeabi_dmul>
 800d860:	a357      	add	r3, pc, #348	; (adr r3, 800d9c0 <__ieee754_pow+0xa00>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	f7f2 fc77 	bl	8000158 <__aeabi_dsub>
 800d86a:	4622      	mov	r2, r4
 800d86c:	462b      	mov	r3, r5
 800d86e:	f7f2 fe2b 	bl	80004c8 <__aeabi_dmul>
 800d872:	a355      	add	r3, pc, #340	; (adr r3, 800d9c8 <__ieee754_pow+0xa08>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	f7f2 fc70 	bl	800015c <__adddf3>
 800d87c:	4622      	mov	r2, r4
 800d87e:	462b      	mov	r3, r5
 800d880:	f7f2 fe22 	bl	80004c8 <__aeabi_dmul>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	4640      	mov	r0, r8
 800d88a:	4649      	mov	r1, r9
 800d88c:	f7f2 fc64 	bl	8000158 <__aeabi_dsub>
 800d890:	4604      	mov	r4, r0
 800d892:	460d      	mov	r5, r1
 800d894:	4602      	mov	r2, r0
 800d896:	460b      	mov	r3, r1
 800d898:	4640      	mov	r0, r8
 800d89a:	4649      	mov	r1, r9
 800d89c:	f7f2 fe14 	bl	80004c8 <__aeabi_dmul>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	4629      	mov	r1, r5
 800d8ae:	f7f2 fc53 	bl	8000158 <__aeabi_dsub>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ba:	f7f2 ff2f 	bl	800071c <__aeabi_ddiv>
 800d8be:	4632      	mov	r2, r6
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	463b      	mov	r3, r7
 800d8c6:	4640      	mov	r0, r8
 800d8c8:	4649      	mov	r1, r9
 800d8ca:	f7f2 fdfd 	bl	80004c8 <__aeabi_dmul>
 800d8ce:	4632      	mov	r2, r6
 800d8d0:	463b      	mov	r3, r7
 800d8d2:	f7f2 fc43 	bl	800015c <__adddf3>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4620      	mov	r0, r4
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7f2 fc3b 	bl	8000158 <__aeabi_dsub>
 800d8e2:	4642      	mov	r2, r8
 800d8e4:	464b      	mov	r3, r9
 800d8e6:	f7f2 fc37 	bl	8000158 <__aeabi_dsub>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	493b      	ldr	r1, [pc, #236]	; (800d9e0 <__ieee754_pow+0xa20>)
 800d8f2:	f7f2 fc31 	bl	8000158 <__aeabi_dsub>
 800d8f6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d8fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d8fe:	da2b      	bge.n	800d958 <__ieee754_pow+0x998>
 800d900:	4652      	mov	r2, sl
 800d902:	f001 f8e1 	bl	800eac8 <scalbn>
 800d906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d90a:	f7ff bbf2 	b.w	800d0f2 <__ieee754_pow+0x132>
 800d90e:	4b35      	ldr	r3, [pc, #212]	; (800d9e4 <__ieee754_pow+0xa24>)
 800d910:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d914:	429f      	cmp	r7, r3
 800d916:	f77f af13 	ble.w	800d740 <__ieee754_pow+0x780>
 800d91a:	4b33      	ldr	r3, [pc, #204]	; (800d9e8 <__ieee754_pow+0xa28>)
 800d91c:	440b      	add	r3, r1
 800d91e:	4303      	orrs	r3, r0
 800d920:	d00b      	beq.n	800d93a <__ieee754_pow+0x97a>
 800d922:	a32b      	add	r3, pc, #172	; (adr r3, 800d9d0 <__ieee754_pow+0xa10>)
 800d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d928:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d92c:	f7f2 fdcc 	bl	80004c8 <__aeabi_dmul>
 800d930:	a327      	add	r3, pc, #156	; (adr r3, 800d9d0 <__ieee754_pow+0xa10>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7ff bbdc 	b.w	800d0f2 <__ieee754_pow+0x132>
 800d93a:	4622      	mov	r2, r4
 800d93c:	462b      	mov	r3, r5
 800d93e:	f7f2 fc0b 	bl	8000158 <__aeabi_dsub>
 800d942:	4642      	mov	r2, r8
 800d944:	464b      	mov	r3, r9
 800d946:	f7f3 f845 	bl	80009d4 <__aeabi_dcmpge>
 800d94a:	2800      	cmp	r0, #0
 800d94c:	f43f aef8 	beq.w	800d740 <__ieee754_pow+0x780>
 800d950:	e7e7      	b.n	800d922 <__ieee754_pow+0x962>
 800d952:	f04f 0a00 	mov.w	sl, #0
 800d956:	e71e      	b.n	800d796 <__ieee754_pow+0x7d6>
 800d958:	4621      	mov	r1, r4
 800d95a:	e7d4      	b.n	800d906 <__ieee754_pow+0x946>
 800d95c:	f04f 0b00 	mov.w	fp, #0
 800d960:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d9e0 <__ieee754_pow+0xa20>
 800d964:	f7ff bbb0 	b.w	800d0c8 <__ieee754_pow+0x108>
 800d968:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d96c:	f7ff bbac 	b.w	800d0c8 <__ieee754_pow+0x108>
 800d970:	4638      	mov	r0, r7
 800d972:	4641      	mov	r1, r8
 800d974:	f7ff bbbf 	b.w	800d0f6 <__ieee754_pow+0x136>
 800d978:	9200      	str	r2, [sp, #0]
 800d97a:	f7ff bb7f 	b.w	800d07c <__ieee754_pow+0xbc>
 800d97e:	2300      	movs	r3, #0
 800d980:	f7ff bb69 	b.w	800d056 <__ieee754_pow+0x96>
 800d984:	f3af 8000 	nop.w
 800d988:	652b82fe 	.word	0x652b82fe
 800d98c:	3c971547 	.word	0x3c971547
 800d990:	00000000 	.word	0x00000000
 800d994:	3fe62e43 	.word	0x3fe62e43
 800d998:	fefa39ef 	.word	0xfefa39ef
 800d99c:	3fe62e42 	.word	0x3fe62e42
 800d9a0:	0ca86c39 	.word	0x0ca86c39
 800d9a4:	be205c61 	.word	0xbe205c61
 800d9a8:	72bea4d0 	.word	0x72bea4d0
 800d9ac:	3e663769 	.word	0x3e663769
 800d9b0:	c5d26bf1 	.word	0xc5d26bf1
 800d9b4:	3ebbbd41 	.word	0x3ebbbd41
 800d9b8:	af25de2c 	.word	0xaf25de2c
 800d9bc:	3f11566a 	.word	0x3f11566a
 800d9c0:	16bebd93 	.word	0x16bebd93
 800d9c4:	3f66c16c 	.word	0x3f66c16c
 800d9c8:	5555553e 	.word	0x5555553e
 800d9cc:	3fc55555 	.word	0x3fc55555
 800d9d0:	c2f8f359 	.word	0xc2f8f359
 800d9d4:	01a56e1f 	.word	0x01a56e1f
 800d9d8:	3fe00000 	.word	0x3fe00000
 800d9dc:	000fffff 	.word	0x000fffff
 800d9e0:	3ff00000 	.word	0x3ff00000
 800d9e4:	4090cbff 	.word	0x4090cbff
 800d9e8:	3f6f3400 	.word	0x3f6f3400

0800d9ec <__ieee754_sqrt>:
 800d9ec:	f8df c150 	ldr.w	ip, [pc, #336]	; 800db40 <__ieee754_sqrt+0x154>
 800d9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f4:	ea3c 0c01 	bics.w	ip, ip, r1
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	460d      	mov	r5, r1
 800d9fe:	460a      	mov	r2, r1
 800da00:	4607      	mov	r7, r0
 800da02:	4604      	mov	r4, r0
 800da04:	d10e      	bne.n	800da24 <__ieee754_sqrt+0x38>
 800da06:	4602      	mov	r2, r0
 800da08:	f7f2 fd5e 	bl	80004c8 <__aeabi_dmul>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	4630      	mov	r0, r6
 800da12:	4629      	mov	r1, r5
 800da14:	f7f2 fba2 	bl	800015c <__adddf3>
 800da18:	4606      	mov	r6, r0
 800da1a:	460d      	mov	r5, r1
 800da1c:	4630      	mov	r0, r6
 800da1e:	4629      	mov	r1, r5
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da24:	2900      	cmp	r1, #0
 800da26:	dc0d      	bgt.n	800da44 <__ieee754_sqrt+0x58>
 800da28:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800da2c:	ea5c 0707 	orrs.w	r7, ip, r7
 800da30:	d0f4      	beq.n	800da1c <__ieee754_sqrt+0x30>
 800da32:	b139      	cbz	r1, 800da44 <__ieee754_sqrt+0x58>
 800da34:	4602      	mov	r2, r0
 800da36:	f7f2 fb8f 	bl	8000158 <__aeabi_dsub>
 800da3a:	4602      	mov	r2, r0
 800da3c:	460b      	mov	r3, r1
 800da3e:	f7f2 fe6d 	bl	800071c <__aeabi_ddiv>
 800da42:	e7e9      	b.n	800da18 <__ieee754_sqrt+0x2c>
 800da44:	1512      	asrs	r2, r2, #20
 800da46:	d074      	beq.n	800db32 <__ieee754_sqrt+0x146>
 800da48:	2000      	movs	r0, #0
 800da4a:	07d5      	lsls	r5, r2, #31
 800da4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da50:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800da54:	bf5e      	ittt	pl
 800da56:	0fe3      	lsrpl	r3, r4, #31
 800da58:	0064      	lslpl	r4, r4, #1
 800da5a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800da5e:	0fe3      	lsrs	r3, r4, #31
 800da60:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800da64:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800da68:	2516      	movs	r5, #22
 800da6a:	4601      	mov	r1, r0
 800da6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800da70:	1076      	asrs	r6, r6, #1
 800da72:	0064      	lsls	r4, r4, #1
 800da74:	188f      	adds	r7, r1, r2
 800da76:	429f      	cmp	r7, r3
 800da78:	bfde      	ittt	le
 800da7a:	1bdb      	suble	r3, r3, r7
 800da7c:	18b9      	addle	r1, r7, r2
 800da7e:	1880      	addle	r0, r0, r2
 800da80:	005b      	lsls	r3, r3, #1
 800da82:	3d01      	subs	r5, #1
 800da84:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800da88:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800da8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800da90:	d1f0      	bne.n	800da74 <__ieee754_sqrt+0x88>
 800da92:	462a      	mov	r2, r5
 800da94:	f04f 0e20 	mov.w	lr, #32
 800da98:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800da9c:	428b      	cmp	r3, r1
 800da9e:	eb07 0c05 	add.w	ip, r7, r5
 800daa2:	dc02      	bgt.n	800daaa <__ieee754_sqrt+0xbe>
 800daa4:	d113      	bne.n	800dace <__ieee754_sqrt+0xe2>
 800daa6:	45a4      	cmp	ip, r4
 800daa8:	d811      	bhi.n	800dace <__ieee754_sqrt+0xe2>
 800daaa:	f1bc 0f00 	cmp.w	ip, #0
 800daae:	eb0c 0507 	add.w	r5, ip, r7
 800dab2:	da43      	bge.n	800db3c <__ieee754_sqrt+0x150>
 800dab4:	2d00      	cmp	r5, #0
 800dab6:	db41      	blt.n	800db3c <__ieee754_sqrt+0x150>
 800dab8:	f101 0801 	add.w	r8, r1, #1
 800dabc:	1a5b      	subs	r3, r3, r1
 800dabe:	4641      	mov	r1, r8
 800dac0:	45a4      	cmp	ip, r4
 800dac2:	bf88      	it	hi
 800dac4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dac8:	eba4 040c 	sub.w	r4, r4, ip
 800dacc:	443a      	add	r2, r7
 800dace:	005b      	lsls	r3, r3, #1
 800dad0:	f1be 0e01 	subs.w	lr, lr, #1
 800dad4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800dad8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800dadc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dae0:	d1dc      	bne.n	800da9c <__ieee754_sqrt+0xb0>
 800dae2:	4323      	orrs	r3, r4
 800dae4:	d006      	beq.n	800daf4 <__ieee754_sqrt+0x108>
 800dae6:	1c54      	adds	r4, r2, #1
 800dae8:	bf0b      	itete	eq
 800daea:	4672      	moveq	r2, lr
 800daec:	3201      	addne	r2, #1
 800daee:	3001      	addeq	r0, #1
 800daf0:	f022 0201 	bicne.w	r2, r2, #1
 800daf4:	1043      	asrs	r3, r0, #1
 800daf6:	07c1      	lsls	r1, r0, #31
 800daf8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dafc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800db00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800db04:	bf48      	it	mi
 800db06:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800db0a:	4610      	mov	r0, r2
 800db0c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800db10:	e782      	b.n	800da18 <__ieee754_sqrt+0x2c>
 800db12:	0ae3      	lsrs	r3, r4, #11
 800db14:	3915      	subs	r1, #21
 800db16:	0564      	lsls	r4, r4, #21
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d0fa      	beq.n	800db12 <__ieee754_sqrt+0x126>
 800db1c:	02de      	lsls	r6, r3, #11
 800db1e:	d50a      	bpl.n	800db36 <__ieee754_sqrt+0x14a>
 800db20:	f1c2 0020 	rsb	r0, r2, #32
 800db24:	fa24 f000 	lsr.w	r0, r4, r0
 800db28:	1e55      	subs	r5, r2, #1
 800db2a:	4094      	lsls	r4, r2
 800db2c:	4303      	orrs	r3, r0
 800db2e:	1b4a      	subs	r2, r1, r5
 800db30:	e78a      	b.n	800da48 <__ieee754_sqrt+0x5c>
 800db32:	4611      	mov	r1, r2
 800db34:	e7f0      	b.n	800db18 <__ieee754_sqrt+0x12c>
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	3201      	adds	r2, #1
 800db3a:	e7ef      	b.n	800db1c <__ieee754_sqrt+0x130>
 800db3c:	4688      	mov	r8, r1
 800db3e:	e7bd      	b.n	800dabc <__ieee754_sqrt+0xd0>
 800db40:	7ff00000 	.word	0x7ff00000

0800db44 <__ieee754_asinf>:
 800db44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db48:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800db4c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800db50:	4604      	mov	r4, r0
 800db52:	4605      	mov	r5, r0
 800db54:	d10c      	bne.n	800db70 <__ieee754_asinf+0x2c>
 800db56:	498d      	ldr	r1, [pc, #564]	; (800dd8c <__ieee754_asinf+0x248>)
 800db58:	f7f3 f8ec 	bl	8000d34 <__aeabi_fmul>
 800db5c:	498c      	ldr	r1, [pc, #560]	; (800dd90 <__ieee754_asinf+0x24c>)
 800db5e:	4605      	mov	r5, r0
 800db60:	4620      	mov	r0, r4
 800db62:	f7f3 f8e7 	bl	8000d34 <__aeabi_fmul>
 800db66:	4601      	mov	r1, r0
 800db68:	4628      	mov	r0, r5
 800db6a:	f7f2 ffdb 	bl	8000b24 <__addsf3>
 800db6e:	e006      	b.n	800db7e <__ieee754_asinf+0x3a>
 800db70:	dd07      	ble.n	800db82 <__ieee754_asinf+0x3e>
 800db72:	4601      	mov	r1, r0
 800db74:	f7f2 ffd4 	bl	8000b20 <__aeabi_fsub>
 800db78:	4601      	mov	r1, r0
 800db7a:	f7f3 f98f 	bl	8000e9c <__aeabi_fdiv>
 800db7e:	4604      	mov	r4, r0
 800db80:	e00e      	b.n	800dba0 <__ieee754_asinf+0x5c>
 800db82:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800db86:	da58      	bge.n	800dc3a <__ieee754_asinf+0xf6>
 800db88:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800db8c:	da0b      	bge.n	800dba6 <__ieee754_asinf+0x62>
 800db8e:	4981      	ldr	r1, [pc, #516]	; (800dd94 <__ieee754_asinf+0x250>)
 800db90:	f7f2 ffc8 	bl	8000b24 <__addsf3>
 800db94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db98:	f7f3 fa88 	bl	80010ac <__aeabi_fcmpgt>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	d04c      	beq.n	800dc3a <__ieee754_asinf+0xf6>
 800dba0:	4620      	mov	r0, r4
 800dba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba6:	4601      	mov	r1, r0
 800dba8:	f7f3 f8c4 	bl	8000d34 <__aeabi_fmul>
 800dbac:	4605      	mov	r5, r0
 800dbae:	497a      	ldr	r1, [pc, #488]	; (800dd98 <__ieee754_asinf+0x254>)
 800dbb0:	f7f3 f8c0 	bl	8000d34 <__aeabi_fmul>
 800dbb4:	4979      	ldr	r1, [pc, #484]	; (800dd9c <__ieee754_asinf+0x258>)
 800dbb6:	f7f2 ffb5 	bl	8000b24 <__addsf3>
 800dbba:	4629      	mov	r1, r5
 800dbbc:	f7f3 f8ba 	bl	8000d34 <__aeabi_fmul>
 800dbc0:	4977      	ldr	r1, [pc, #476]	; (800dda0 <__ieee754_asinf+0x25c>)
 800dbc2:	f7f2 ffad 	bl	8000b20 <__aeabi_fsub>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	f7f3 f8b4 	bl	8000d34 <__aeabi_fmul>
 800dbcc:	4975      	ldr	r1, [pc, #468]	; (800dda4 <__ieee754_asinf+0x260>)
 800dbce:	f7f2 ffa9 	bl	8000b24 <__addsf3>
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	f7f3 f8ae 	bl	8000d34 <__aeabi_fmul>
 800dbd8:	4973      	ldr	r1, [pc, #460]	; (800dda8 <__ieee754_asinf+0x264>)
 800dbda:	f7f2 ffa1 	bl	8000b20 <__aeabi_fsub>
 800dbde:	4629      	mov	r1, r5
 800dbe0:	f7f3 f8a8 	bl	8000d34 <__aeabi_fmul>
 800dbe4:	4971      	ldr	r1, [pc, #452]	; (800ddac <__ieee754_asinf+0x268>)
 800dbe6:	f7f2 ff9d 	bl	8000b24 <__addsf3>
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f3 f8a2 	bl	8000d34 <__aeabi_fmul>
 800dbf0:	496f      	ldr	r1, [pc, #444]	; (800ddb0 <__ieee754_asinf+0x26c>)
 800dbf2:	4606      	mov	r6, r0
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	f7f3 f89d 	bl	8000d34 <__aeabi_fmul>
 800dbfa:	496e      	ldr	r1, [pc, #440]	; (800ddb4 <__ieee754_asinf+0x270>)
 800dbfc:	f7f2 ff90 	bl	8000b20 <__aeabi_fsub>
 800dc00:	4629      	mov	r1, r5
 800dc02:	f7f3 f897 	bl	8000d34 <__aeabi_fmul>
 800dc06:	496c      	ldr	r1, [pc, #432]	; (800ddb8 <__ieee754_asinf+0x274>)
 800dc08:	f7f2 ff8c 	bl	8000b24 <__addsf3>
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	f7f3 f891 	bl	8000d34 <__aeabi_fmul>
 800dc12:	496a      	ldr	r1, [pc, #424]	; (800ddbc <__ieee754_asinf+0x278>)
 800dc14:	f7f2 ff84 	bl	8000b20 <__aeabi_fsub>
 800dc18:	4629      	mov	r1, r5
 800dc1a:	f7f3 f88b 	bl	8000d34 <__aeabi_fmul>
 800dc1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc22:	f7f2 ff7f 	bl	8000b24 <__addsf3>
 800dc26:	4601      	mov	r1, r0
 800dc28:	4630      	mov	r0, r6
 800dc2a:	f7f3 f937 	bl	8000e9c <__aeabi_fdiv>
 800dc2e:	4621      	mov	r1, r4
 800dc30:	f7f3 f880 	bl	8000d34 <__aeabi_fmul>
 800dc34:	4601      	mov	r1, r0
 800dc36:	4620      	mov	r0, r4
 800dc38:	e797      	b.n	800db6a <__ieee754_asinf+0x26>
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f7ff f862 	bl	800cd04 <fabsf>
 800dc40:	4601      	mov	r1, r0
 800dc42:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dc46:	f7f2 ff6b 	bl	8000b20 <__aeabi_fsub>
 800dc4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dc4e:	f7f3 f871 	bl	8000d34 <__aeabi_fmul>
 800dc52:	4606      	mov	r6, r0
 800dc54:	4950      	ldr	r1, [pc, #320]	; (800dd98 <__ieee754_asinf+0x254>)
 800dc56:	f7f3 f86d 	bl	8000d34 <__aeabi_fmul>
 800dc5a:	4950      	ldr	r1, [pc, #320]	; (800dd9c <__ieee754_asinf+0x258>)
 800dc5c:	f7f2 ff62 	bl	8000b24 <__addsf3>
 800dc60:	4631      	mov	r1, r6
 800dc62:	f7f3 f867 	bl	8000d34 <__aeabi_fmul>
 800dc66:	494e      	ldr	r1, [pc, #312]	; (800dda0 <__ieee754_asinf+0x25c>)
 800dc68:	f7f2 ff5a 	bl	8000b20 <__aeabi_fsub>
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	f7f3 f861 	bl	8000d34 <__aeabi_fmul>
 800dc72:	494c      	ldr	r1, [pc, #304]	; (800dda4 <__ieee754_asinf+0x260>)
 800dc74:	f7f2 ff56 	bl	8000b24 <__addsf3>
 800dc78:	4631      	mov	r1, r6
 800dc7a:	f7f3 f85b 	bl	8000d34 <__aeabi_fmul>
 800dc7e:	494a      	ldr	r1, [pc, #296]	; (800dda8 <__ieee754_asinf+0x264>)
 800dc80:	f7f2 ff4e 	bl	8000b20 <__aeabi_fsub>
 800dc84:	4631      	mov	r1, r6
 800dc86:	f7f3 f855 	bl	8000d34 <__aeabi_fmul>
 800dc8a:	4948      	ldr	r1, [pc, #288]	; (800ddac <__ieee754_asinf+0x268>)
 800dc8c:	f7f2 ff4a 	bl	8000b24 <__addsf3>
 800dc90:	4631      	mov	r1, r6
 800dc92:	f7f3 f84f 	bl	8000d34 <__aeabi_fmul>
 800dc96:	4946      	ldr	r1, [pc, #280]	; (800ddb0 <__ieee754_asinf+0x26c>)
 800dc98:	4681      	mov	r9, r0
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f7f3 f84a 	bl	8000d34 <__aeabi_fmul>
 800dca0:	4944      	ldr	r1, [pc, #272]	; (800ddb4 <__ieee754_asinf+0x270>)
 800dca2:	f7f2 ff3d 	bl	8000b20 <__aeabi_fsub>
 800dca6:	4631      	mov	r1, r6
 800dca8:	f7f3 f844 	bl	8000d34 <__aeabi_fmul>
 800dcac:	4942      	ldr	r1, [pc, #264]	; (800ddb8 <__ieee754_asinf+0x274>)
 800dcae:	f7f2 ff39 	bl	8000b24 <__addsf3>
 800dcb2:	4631      	mov	r1, r6
 800dcb4:	f7f3 f83e 	bl	8000d34 <__aeabi_fmul>
 800dcb8:	4940      	ldr	r1, [pc, #256]	; (800ddbc <__ieee754_asinf+0x278>)
 800dcba:	f7f2 ff31 	bl	8000b20 <__aeabi_fsub>
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	f7f3 f838 	bl	8000d34 <__aeabi_fmul>
 800dcc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dcc8:	f7f2 ff2c 	bl	8000b24 <__addsf3>
 800dccc:	4682      	mov	sl, r0
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f000 fa60 	bl	800e194 <__ieee754_sqrtf>
 800dcd4:	4b3a      	ldr	r3, [pc, #232]	; (800ddc0 <__ieee754_asinf+0x27c>)
 800dcd6:	4607      	mov	r7, r0
 800dcd8:	4598      	cmp	r8, r3
 800dcda:	dd1a      	ble.n	800dd12 <__ieee754_asinf+0x1ce>
 800dcdc:	4651      	mov	r1, sl
 800dcde:	4648      	mov	r0, r9
 800dce0:	f7f3 f8dc 	bl	8000e9c <__aeabi_fdiv>
 800dce4:	4639      	mov	r1, r7
 800dce6:	f7f3 f825 	bl	8000d34 <__aeabi_fmul>
 800dcea:	4639      	mov	r1, r7
 800dcec:	f7f2 ff1a 	bl	8000b24 <__addsf3>
 800dcf0:	4601      	mov	r1, r0
 800dcf2:	f7f2 ff17 	bl	8000b24 <__addsf3>
 800dcf6:	4933      	ldr	r1, [pc, #204]	; (800ddc4 <__ieee754_asinf+0x280>)
 800dcf8:	f7f2 ff14 	bl	8000b24 <__addsf3>
 800dcfc:	4601      	mov	r1, r0
 800dcfe:	4823      	ldr	r0, [pc, #140]	; (800dd8c <__ieee754_asinf+0x248>)
 800dd00:	f7f2 ff0e 	bl	8000b20 <__aeabi_fsub>
 800dd04:	2d00      	cmp	r5, #0
 800dd06:	4604      	mov	r4, r0
 800dd08:	f73f af4a 	bgt.w	800dba0 <__ieee754_asinf+0x5c>
 800dd0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dd10:	e735      	b.n	800db7e <__ieee754_asinf+0x3a>
 800dd12:	4601      	mov	r1, r0
 800dd14:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800dd18:	f7f2 ff04 	bl	8000b24 <__addsf3>
 800dd1c:	4651      	mov	r1, sl
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4648      	mov	r0, r9
 800dd22:	f7f3 f8bb 	bl	8000e9c <__aeabi_fdiv>
 800dd26:	4601      	mov	r1, r0
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f7f3 f803 	bl	8000d34 <__aeabi_fmul>
 800dd2e:	f028 080f 	bic.w	r8, r8, #15
 800dd32:	4681      	mov	r9, r0
 800dd34:	4641      	mov	r1, r8
 800dd36:	4640      	mov	r0, r8
 800dd38:	f7f2 fffc 	bl	8000d34 <__aeabi_fmul>
 800dd3c:	4601      	mov	r1, r0
 800dd3e:	4630      	mov	r0, r6
 800dd40:	f7f2 feee 	bl	8000b20 <__aeabi_fsub>
 800dd44:	4641      	mov	r1, r8
 800dd46:	4604      	mov	r4, r0
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f7f2 feeb 	bl	8000b24 <__addsf3>
 800dd4e:	4601      	mov	r1, r0
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7f3 f8a3 	bl	8000e9c <__aeabi_fdiv>
 800dd56:	4601      	mov	r1, r0
 800dd58:	f7f2 fee4 	bl	8000b24 <__addsf3>
 800dd5c:	4601      	mov	r1, r0
 800dd5e:	480c      	ldr	r0, [pc, #48]	; (800dd90 <__ieee754_asinf+0x24c>)
 800dd60:	f7f2 fede 	bl	8000b20 <__aeabi_fsub>
 800dd64:	4601      	mov	r1, r0
 800dd66:	4648      	mov	r0, r9
 800dd68:	f7f2 feda 	bl	8000b20 <__aeabi_fsub>
 800dd6c:	4641      	mov	r1, r8
 800dd6e:	4604      	mov	r4, r0
 800dd70:	4640      	mov	r0, r8
 800dd72:	f7f2 fed7 	bl	8000b24 <__addsf3>
 800dd76:	4601      	mov	r1, r0
 800dd78:	4813      	ldr	r0, [pc, #76]	; (800ddc8 <__ieee754_asinf+0x284>)
 800dd7a:	f7f2 fed1 	bl	8000b20 <__aeabi_fsub>
 800dd7e:	4601      	mov	r1, r0
 800dd80:	4620      	mov	r0, r4
 800dd82:	f7f2 fecd 	bl	8000b20 <__aeabi_fsub>
 800dd86:	4601      	mov	r1, r0
 800dd88:	480f      	ldr	r0, [pc, #60]	; (800ddc8 <__ieee754_asinf+0x284>)
 800dd8a:	e7b9      	b.n	800dd00 <__ieee754_asinf+0x1bc>
 800dd8c:	3fc90fdb 	.word	0x3fc90fdb
 800dd90:	b33bbd2e 	.word	0xb33bbd2e
 800dd94:	7149f2ca 	.word	0x7149f2ca
 800dd98:	3811ef08 	.word	0x3811ef08
 800dd9c:	3a4f7f04 	.word	0x3a4f7f04
 800dda0:	3d241146 	.word	0x3d241146
 800dda4:	3e4e0aa8 	.word	0x3e4e0aa8
 800dda8:	3ea6b090 	.word	0x3ea6b090
 800ddac:	3e2aaaab 	.word	0x3e2aaaab
 800ddb0:	3d9dc62e 	.word	0x3d9dc62e
 800ddb4:	3f303361 	.word	0x3f303361
 800ddb8:	4001572d 	.word	0x4001572d
 800ddbc:	4019d139 	.word	0x4019d139
 800ddc0:	3f799999 	.word	0x3f799999
 800ddc4:	333bbd2e 	.word	0x333bbd2e
 800ddc8:	3f490fdb 	.word	0x3f490fdb

0800ddcc <__ieee754_atan2f>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ddd2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	dc05      	bgt.n	800dde6 <__ieee754_atan2f+0x1a>
 800ddda:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ddde:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dde2:	4607      	mov	r7, r0
 800dde4:	dd04      	ble.n	800ddf0 <__ieee754_atan2f+0x24>
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7f2 fe9c 	bl	8000b24 <__addsf3>
 800ddec:	4603      	mov	r3, r0
 800ddee:	e011      	b.n	800de14 <__ieee754_atan2f+0x48>
 800ddf0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ddf4:	d103      	bne.n	800ddfe <__ieee754_atan2f+0x32>
 800ddf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ddfa:	f7fe be43 	b.w	800ca84 <atanf>
 800ddfe:	178c      	asrs	r4, r1, #30
 800de00:	f004 0402 	and.w	r4, r4, #2
 800de04:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800de08:	b932      	cbnz	r2, 800de18 <__ieee754_atan2f+0x4c>
 800de0a:	2c02      	cmp	r4, #2
 800de0c:	d04c      	beq.n	800dea8 <__ieee754_atan2f+0xdc>
 800de0e:	2c03      	cmp	r4, #3
 800de10:	d100      	bne.n	800de14 <__ieee754_atan2f+0x48>
 800de12:	4b29      	ldr	r3, [pc, #164]	; (800deb8 <__ieee754_atan2f+0xec>)
 800de14:	4618      	mov	r0, r3
 800de16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de18:	b91e      	cbnz	r6, 800de22 <__ieee754_atan2f+0x56>
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	da4a      	bge.n	800deb4 <__ieee754_atan2f+0xe8>
 800de1e:	4b27      	ldr	r3, [pc, #156]	; (800debc <__ieee754_atan2f+0xf0>)
 800de20:	e7f8      	b.n	800de14 <__ieee754_atan2f+0x48>
 800de22:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800de26:	d10e      	bne.n	800de46 <__ieee754_atan2f+0x7a>
 800de28:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800de2c:	f104 34ff 	add.w	r4, r4, #4294967295
 800de30:	d105      	bne.n	800de3e <__ieee754_atan2f+0x72>
 800de32:	2c02      	cmp	r4, #2
 800de34:	d83a      	bhi.n	800deac <__ieee754_atan2f+0xe0>
 800de36:	4b22      	ldr	r3, [pc, #136]	; (800dec0 <__ieee754_atan2f+0xf4>)
 800de38:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800de3c:	e7ea      	b.n	800de14 <__ieee754_atan2f+0x48>
 800de3e:	2c02      	cmp	r4, #2
 800de40:	d836      	bhi.n	800deb0 <__ieee754_atan2f+0xe4>
 800de42:	4b20      	ldr	r3, [pc, #128]	; (800dec4 <__ieee754_atan2f+0xf8>)
 800de44:	e7f8      	b.n	800de38 <__ieee754_atan2f+0x6c>
 800de46:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800de4a:	d0e6      	beq.n	800de1a <__ieee754_atan2f+0x4e>
 800de4c:	1b92      	subs	r2, r2, r6
 800de4e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800de52:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800de56:	da17      	bge.n	800de88 <__ieee754_atan2f+0xbc>
 800de58:	2900      	cmp	r1, #0
 800de5a:	da01      	bge.n	800de60 <__ieee754_atan2f+0x94>
 800de5c:	303c      	adds	r0, #60	; 0x3c
 800de5e:	db15      	blt.n	800de8c <__ieee754_atan2f+0xc0>
 800de60:	4618      	mov	r0, r3
 800de62:	f7f3 f81b 	bl	8000e9c <__aeabi_fdiv>
 800de66:	f7fe ff4d 	bl	800cd04 <fabsf>
 800de6a:	f7fe fe0b 	bl	800ca84 <atanf>
 800de6e:	4603      	mov	r3, r0
 800de70:	2c01      	cmp	r4, #1
 800de72:	d00d      	beq.n	800de90 <__ieee754_atan2f+0xc4>
 800de74:	2c02      	cmp	r4, #2
 800de76:	d00e      	beq.n	800de96 <__ieee754_atan2f+0xca>
 800de78:	2c00      	cmp	r4, #0
 800de7a:	d0cb      	beq.n	800de14 <__ieee754_atan2f+0x48>
 800de7c:	4912      	ldr	r1, [pc, #72]	; (800dec8 <__ieee754_atan2f+0xfc>)
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f2 fe50 	bl	8000b24 <__addsf3>
 800de84:	4911      	ldr	r1, [pc, #68]	; (800decc <__ieee754_atan2f+0x100>)
 800de86:	e00c      	b.n	800dea2 <__ieee754_atan2f+0xd6>
 800de88:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <__ieee754_atan2f+0x104>)
 800de8a:	e7f1      	b.n	800de70 <__ieee754_atan2f+0xa4>
 800de8c:	2300      	movs	r3, #0
 800de8e:	e7ef      	b.n	800de70 <__ieee754_atan2f+0xa4>
 800de90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de94:	e7be      	b.n	800de14 <__ieee754_atan2f+0x48>
 800de96:	490c      	ldr	r1, [pc, #48]	; (800dec8 <__ieee754_atan2f+0xfc>)
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f2 fe43 	bl	8000b24 <__addsf3>
 800de9e:	4601      	mov	r1, r0
 800dea0:	480a      	ldr	r0, [pc, #40]	; (800decc <__ieee754_atan2f+0x100>)
 800dea2:	f7f2 fe3d 	bl	8000b20 <__aeabi_fsub>
 800dea6:	e7a1      	b.n	800ddec <__ieee754_atan2f+0x20>
 800dea8:	4b08      	ldr	r3, [pc, #32]	; (800decc <__ieee754_atan2f+0x100>)
 800deaa:	e7b3      	b.n	800de14 <__ieee754_atan2f+0x48>
 800deac:	4b09      	ldr	r3, [pc, #36]	; (800ded4 <__ieee754_atan2f+0x108>)
 800deae:	e7b1      	b.n	800de14 <__ieee754_atan2f+0x48>
 800deb0:	2300      	movs	r3, #0
 800deb2:	e7af      	b.n	800de14 <__ieee754_atan2f+0x48>
 800deb4:	4b06      	ldr	r3, [pc, #24]	; (800ded0 <__ieee754_atan2f+0x104>)
 800deb6:	e7ad      	b.n	800de14 <__ieee754_atan2f+0x48>
 800deb8:	c0490fdb 	.word	0xc0490fdb
 800debc:	bfc90fdb 	.word	0xbfc90fdb
 800dec0:	0800ee58 	.word	0x0800ee58
 800dec4:	0800ee64 	.word	0x0800ee64
 800dec8:	33bbbd2e 	.word	0x33bbbd2e
 800decc:	40490fdb 	.word	0x40490fdb
 800ded0:	3fc90fdb 	.word	0x3fc90fdb
 800ded4:	3f490fdb 	.word	0x3f490fdb

0800ded8 <__ieee754_rem_pio2f>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	4aa0      	ldr	r2, [pc, #640]	; (800e160 <__ieee754_rem_pio2f+0x288>)
 800dede:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800dee2:	4296      	cmp	r6, r2
 800dee4:	460c      	mov	r4, r1
 800dee6:	4682      	mov	sl, r0
 800dee8:	b087      	sub	sp, #28
 800deea:	dc04      	bgt.n	800def6 <__ieee754_rem_pio2f+0x1e>
 800deec:	2300      	movs	r3, #0
 800deee:	6008      	str	r0, [r1, #0]
 800def0:	604b      	str	r3, [r1, #4]
 800def2:	2500      	movs	r5, #0
 800def4:	e01a      	b.n	800df2c <__ieee754_rem_pio2f+0x54>
 800def6:	4a9b      	ldr	r2, [pc, #620]	; (800e164 <__ieee754_rem_pio2f+0x28c>)
 800def8:	4296      	cmp	r6, r2
 800defa:	dc4b      	bgt.n	800df94 <__ieee754_rem_pio2f+0xbc>
 800defc:	2800      	cmp	r0, #0
 800defe:	499a      	ldr	r1, [pc, #616]	; (800e168 <__ieee754_rem_pio2f+0x290>)
 800df00:	4f9a      	ldr	r7, [pc, #616]	; (800e16c <__ieee754_rem_pio2f+0x294>)
 800df02:	f026 060f 	bic.w	r6, r6, #15
 800df06:	dd23      	ble.n	800df50 <__ieee754_rem_pio2f+0x78>
 800df08:	f7f2 fe0a 	bl	8000b20 <__aeabi_fsub>
 800df0c:	42be      	cmp	r6, r7
 800df0e:	4605      	mov	r5, r0
 800df10:	d010      	beq.n	800df34 <__ieee754_rem_pio2f+0x5c>
 800df12:	4997      	ldr	r1, [pc, #604]	; (800e170 <__ieee754_rem_pio2f+0x298>)
 800df14:	f7f2 fe04 	bl	8000b20 <__aeabi_fsub>
 800df18:	4601      	mov	r1, r0
 800df1a:	6020      	str	r0, [r4, #0]
 800df1c:	4628      	mov	r0, r5
 800df1e:	f7f2 fdff 	bl	8000b20 <__aeabi_fsub>
 800df22:	4993      	ldr	r1, [pc, #588]	; (800e170 <__ieee754_rem_pio2f+0x298>)
 800df24:	f7f2 fdfc 	bl	8000b20 <__aeabi_fsub>
 800df28:	2501      	movs	r5, #1
 800df2a:	6060      	str	r0, [r4, #4]
 800df2c:	4628      	mov	r0, r5
 800df2e:	b007      	add	sp, #28
 800df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df34:	498f      	ldr	r1, [pc, #572]	; (800e174 <__ieee754_rem_pio2f+0x29c>)
 800df36:	f7f2 fdf3 	bl	8000b20 <__aeabi_fsub>
 800df3a:	498f      	ldr	r1, [pc, #572]	; (800e178 <__ieee754_rem_pio2f+0x2a0>)
 800df3c:	4605      	mov	r5, r0
 800df3e:	f7f2 fdef 	bl	8000b20 <__aeabi_fsub>
 800df42:	4601      	mov	r1, r0
 800df44:	6020      	str	r0, [r4, #0]
 800df46:	4628      	mov	r0, r5
 800df48:	f7f2 fdea 	bl	8000b20 <__aeabi_fsub>
 800df4c:	498a      	ldr	r1, [pc, #552]	; (800e178 <__ieee754_rem_pio2f+0x2a0>)
 800df4e:	e7e9      	b.n	800df24 <__ieee754_rem_pio2f+0x4c>
 800df50:	f7f2 fde8 	bl	8000b24 <__addsf3>
 800df54:	42be      	cmp	r6, r7
 800df56:	4605      	mov	r5, r0
 800df58:	d00e      	beq.n	800df78 <__ieee754_rem_pio2f+0xa0>
 800df5a:	4985      	ldr	r1, [pc, #532]	; (800e170 <__ieee754_rem_pio2f+0x298>)
 800df5c:	f7f2 fde2 	bl	8000b24 <__addsf3>
 800df60:	4601      	mov	r1, r0
 800df62:	6020      	str	r0, [r4, #0]
 800df64:	4628      	mov	r0, r5
 800df66:	f7f2 fddb 	bl	8000b20 <__aeabi_fsub>
 800df6a:	4981      	ldr	r1, [pc, #516]	; (800e170 <__ieee754_rem_pio2f+0x298>)
 800df6c:	f7f2 fdda 	bl	8000b24 <__addsf3>
 800df70:	f04f 35ff 	mov.w	r5, #4294967295
 800df74:	6060      	str	r0, [r4, #4]
 800df76:	e7d9      	b.n	800df2c <__ieee754_rem_pio2f+0x54>
 800df78:	497e      	ldr	r1, [pc, #504]	; (800e174 <__ieee754_rem_pio2f+0x29c>)
 800df7a:	f7f2 fdd3 	bl	8000b24 <__addsf3>
 800df7e:	497e      	ldr	r1, [pc, #504]	; (800e178 <__ieee754_rem_pio2f+0x2a0>)
 800df80:	4605      	mov	r5, r0
 800df82:	f7f2 fdcf 	bl	8000b24 <__addsf3>
 800df86:	4601      	mov	r1, r0
 800df88:	6020      	str	r0, [r4, #0]
 800df8a:	4628      	mov	r0, r5
 800df8c:	f7f2 fdc8 	bl	8000b20 <__aeabi_fsub>
 800df90:	4979      	ldr	r1, [pc, #484]	; (800e178 <__ieee754_rem_pio2f+0x2a0>)
 800df92:	e7eb      	b.n	800df6c <__ieee754_rem_pio2f+0x94>
 800df94:	4a79      	ldr	r2, [pc, #484]	; (800e17c <__ieee754_rem_pio2f+0x2a4>)
 800df96:	4296      	cmp	r6, r2
 800df98:	f300 8091 	bgt.w	800e0be <__ieee754_rem_pio2f+0x1e6>
 800df9c:	f7fe feb2 	bl	800cd04 <fabsf>
 800dfa0:	4977      	ldr	r1, [pc, #476]	; (800e180 <__ieee754_rem_pio2f+0x2a8>)
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	f7f2 fec6 	bl	8000d34 <__aeabi_fmul>
 800dfa8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dfac:	f7f2 fdba 	bl	8000b24 <__addsf3>
 800dfb0:	f7f3 f89c 	bl	80010ec <__aeabi_f2iz>
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	f7f2 fe69 	bl	8000c8c <__aeabi_i2f>
 800dfba:	496b      	ldr	r1, [pc, #428]	; (800e168 <__ieee754_rem_pio2f+0x290>)
 800dfbc:	4681      	mov	r9, r0
 800dfbe:	f7f2 feb9 	bl	8000d34 <__aeabi_fmul>
 800dfc2:	4601      	mov	r1, r0
 800dfc4:	4638      	mov	r0, r7
 800dfc6:	f7f2 fdab 	bl	8000b20 <__aeabi_fsub>
 800dfca:	4969      	ldr	r1, [pc, #420]	; (800e170 <__ieee754_rem_pio2f+0x298>)
 800dfcc:	4680      	mov	r8, r0
 800dfce:	4648      	mov	r0, r9
 800dfd0:	f7f2 feb0 	bl	8000d34 <__aeabi_fmul>
 800dfd4:	2d1f      	cmp	r5, #31
 800dfd6:	4607      	mov	r7, r0
 800dfd8:	dc0c      	bgt.n	800dff4 <__ieee754_rem_pio2f+0x11c>
 800dfda:	4a6a      	ldr	r2, [pc, #424]	; (800e184 <__ieee754_rem_pio2f+0x2ac>)
 800dfdc:	1e69      	subs	r1, r5, #1
 800dfde:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dfe2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d004      	beq.n	800dff4 <__ieee754_rem_pio2f+0x11c>
 800dfea:	4639      	mov	r1, r7
 800dfec:	4640      	mov	r0, r8
 800dfee:	f7f2 fd97 	bl	8000b20 <__aeabi_fsub>
 800dff2:	e00b      	b.n	800e00c <__ieee754_rem_pio2f+0x134>
 800dff4:	4639      	mov	r1, r7
 800dff6:	4640      	mov	r0, r8
 800dff8:	f7f2 fd92 	bl	8000b20 <__aeabi_fsub>
 800dffc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e000:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e004:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e008:	2e08      	cmp	r6, #8
 800e00a:	dc01      	bgt.n	800e010 <__ieee754_rem_pio2f+0x138>
 800e00c:	6020      	str	r0, [r4, #0]
 800e00e:	e026      	b.n	800e05e <__ieee754_rem_pio2f+0x186>
 800e010:	4958      	ldr	r1, [pc, #352]	; (800e174 <__ieee754_rem_pio2f+0x29c>)
 800e012:	4648      	mov	r0, r9
 800e014:	f7f2 fe8e 	bl	8000d34 <__aeabi_fmul>
 800e018:	4607      	mov	r7, r0
 800e01a:	4601      	mov	r1, r0
 800e01c:	4640      	mov	r0, r8
 800e01e:	f7f2 fd7f 	bl	8000b20 <__aeabi_fsub>
 800e022:	4601      	mov	r1, r0
 800e024:	4606      	mov	r6, r0
 800e026:	4640      	mov	r0, r8
 800e028:	f7f2 fd7a 	bl	8000b20 <__aeabi_fsub>
 800e02c:	4639      	mov	r1, r7
 800e02e:	f7f2 fd77 	bl	8000b20 <__aeabi_fsub>
 800e032:	4607      	mov	r7, r0
 800e034:	4950      	ldr	r1, [pc, #320]	; (800e178 <__ieee754_rem_pio2f+0x2a0>)
 800e036:	4648      	mov	r0, r9
 800e038:	f7f2 fe7c 	bl	8000d34 <__aeabi_fmul>
 800e03c:	4639      	mov	r1, r7
 800e03e:	f7f2 fd6f 	bl	8000b20 <__aeabi_fsub>
 800e042:	4601      	mov	r1, r0
 800e044:	4607      	mov	r7, r0
 800e046:	4630      	mov	r0, r6
 800e048:	f7f2 fd6a 	bl	8000b20 <__aeabi_fsub>
 800e04c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e050:	ebab 0b03 	sub.w	fp, fp, r3
 800e054:	f1bb 0f19 	cmp.w	fp, #25
 800e058:	dc16      	bgt.n	800e088 <__ieee754_rem_pio2f+0x1b0>
 800e05a:	46b0      	mov	r8, r6
 800e05c:	6020      	str	r0, [r4, #0]
 800e05e:	6826      	ldr	r6, [r4, #0]
 800e060:	4640      	mov	r0, r8
 800e062:	4631      	mov	r1, r6
 800e064:	f7f2 fd5c 	bl	8000b20 <__aeabi_fsub>
 800e068:	4639      	mov	r1, r7
 800e06a:	f7f2 fd59 	bl	8000b20 <__aeabi_fsub>
 800e06e:	f1ba 0f00 	cmp.w	sl, #0
 800e072:	6060      	str	r0, [r4, #4]
 800e074:	f6bf af5a 	bge.w	800df2c <__ieee754_rem_pio2f+0x54>
 800e078:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e07c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e080:	6026      	str	r6, [r4, #0]
 800e082:	6060      	str	r0, [r4, #4]
 800e084:	426d      	negs	r5, r5
 800e086:	e751      	b.n	800df2c <__ieee754_rem_pio2f+0x54>
 800e088:	493f      	ldr	r1, [pc, #252]	; (800e188 <__ieee754_rem_pio2f+0x2b0>)
 800e08a:	4648      	mov	r0, r9
 800e08c:	f7f2 fe52 	bl	8000d34 <__aeabi_fmul>
 800e090:	4607      	mov	r7, r0
 800e092:	4601      	mov	r1, r0
 800e094:	4630      	mov	r0, r6
 800e096:	f7f2 fd43 	bl	8000b20 <__aeabi_fsub>
 800e09a:	4601      	mov	r1, r0
 800e09c:	4680      	mov	r8, r0
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7f2 fd3e 	bl	8000b20 <__aeabi_fsub>
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 fd3b 	bl	8000b20 <__aeabi_fsub>
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	4937      	ldr	r1, [pc, #220]	; (800e18c <__ieee754_rem_pio2f+0x2b4>)
 800e0ae:	4648      	mov	r0, r9
 800e0b0:	f7f2 fe40 	bl	8000d34 <__aeabi_fmul>
 800e0b4:	4631      	mov	r1, r6
 800e0b6:	f7f2 fd33 	bl	8000b20 <__aeabi_fsub>
 800e0ba:	4607      	mov	r7, r0
 800e0bc:	e795      	b.n	800dfea <__ieee754_rem_pio2f+0x112>
 800e0be:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e0c2:	db05      	blt.n	800e0d0 <__ieee754_rem_pio2f+0x1f8>
 800e0c4:	4601      	mov	r1, r0
 800e0c6:	f7f2 fd2b 	bl	8000b20 <__aeabi_fsub>
 800e0ca:	6060      	str	r0, [r4, #4]
 800e0cc:	6020      	str	r0, [r4, #0]
 800e0ce:	e710      	b.n	800def2 <__ieee754_rem_pio2f+0x1a>
 800e0d0:	15f7      	asrs	r7, r6, #23
 800e0d2:	3f86      	subs	r7, #134	; 0x86
 800e0d4:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f7f3 f807 	bl	80010ec <__aeabi_f2iz>
 800e0de:	f7f2 fdd5 	bl	8000c8c <__aeabi_i2f>
 800e0e2:	4601      	mov	r1, r0
 800e0e4:	9003      	str	r0, [sp, #12]
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7f2 fd1a 	bl	8000b20 <__aeabi_fsub>
 800e0ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e0f0:	f7f2 fe20 	bl	8000d34 <__aeabi_fmul>
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	f7f2 fff9 	bl	80010ec <__aeabi_f2iz>
 800e0fa:	f7f2 fdc7 	bl	8000c8c <__aeabi_i2f>
 800e0fe:	4601      	mov	r1, r0
 800e100:	9004      	str	r0, [sp, #16]
 800e102:	4605      	mov	r5, r0
 800e104:	4630      	mov	r0, r6
 800e106:	f7f2 fd0b 	bl	8000b20 <__aeabi_fsub>
 800e10a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e10e:	f7f2 fe11 	bl	8000d34 <__aeabi_fmul>
 800e112:	2100      	movs	r1, #0
 800e114:	9005      	str	r0, [sp, #20]
 800e116:	f7f2 ffa1 	bl	800105c <__aeabi_fcmpeq>
 800e11a:	b1f0      	cbz	r0, 800e15a <__ieee754_rem_pio2f+0x282>
 800e11c:	2100      	movs	r1, #0
 800e11e:	4628      	mov	r0, r5
 800e120:	f7f2 ff9c 	bl	800105c <__aeabi_fcmpeq>
 800e124:	2800      	cmp	r0, #0
 800e126:	bf14      	ite	ne
 800e128:	2301      	movne	r3, #1
 800e12a:	2302      	moveq	r3, #2
 800e12c:	4a18      	ldr	r2, [pc, #96]	; (800e190 <__ieee754_rem_pio2f+0x2b8>)
 800e12e:	4621      	mov	r1, r4
 800e130:	9201      	str	r2, [sp, #4]
 800e132:	2202      	movs	r2, #2
 800e134:	a803      	add	r0, sp, #12
 800e136:	9200      	str	r2, [sp, #0]
 800e138:	463a      	mov	r2, r7
 800e13a:	f000 f8fd 	bl	800e338 <__kernel_rem_pio2f>
 800e13e:	f1ba 0f00 	cmp.w	sl, #0
 800e142:	4605      	mov	r5, r0
 800e144:	f6bf aef2 	bge.w	800df2c <__ieee754_rem_pio2f+0x54>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e14e:	6023      	str	r3, [r4, #0]
 800e150:	6863      	ldr	r3, [r4, #4]
 800e152:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e156:	6063      	str	r3, [r4, #4]
 800e158:	e794      	b.n	800e084 <__ieee754_rem_pio2f+0x1ac>
 800e15a:	2303      	movs	r3, #3
 800e15c:	e7e6      	b.n	800e12c <__ieee754_rem_pio2f+0x254>
 800e15e:	bf00      	nop
 800e160:	3f490fd8 	.word	0x3f490fd8
 800e164:	4016cbe3 	.word	0x4016cbe3
 800e168:	3fc90f80 	.word	0x3fc90f80
 800e16c:	3fc90fd0 	.word	0x3fc90fd0
 800e170:	37354443 	.word	0x37354443
 800e174:	37354400 	.word	0x37354400
 800e178:	2e85a308 	.word	0x2e85a308
 800e17c:	43490f80 	.word	0x43490f80
 800e180:	3f22f984 	.word	0x3f22f984
 800e184:	0800ee70 	.word	0x0800ee70
 800e188:	2e85a300 	.word	0x2e85a300
 800e18c:	248d3132 	.word	0x248d3132
 800e190:	0800eef0 	.word	0x0800eef0

0800e194 <__ieee754_sqrtf>:
 800e194:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e198:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e19c:	b570      	push	{r4, r5, r6, lr}
 800e19e:	4603      	mov	r3, r0
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	d309      	bcc.n	800e1b8 <__ieee754_sqrtf+0x24>
 800e1a4:	4601      	mov	r1, r0
 800e1a6:	f7f2 fdc5 	bl	8000d34 <__aeabi_fmul>
 800e1aa:	4601      	mov	r1, r0
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f7f2 fcb9 	bl	8000b24 <__addsf3>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	bd70      	pop	{r4, r5, r6, pc}
 800e1b8:	2a00      	cmp	r2, #0
 800e1ba:	d0fb      	beq.n	800e1b4 <__ieee754_sqrtf+0x20>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	da06      	bge.n	800e1ce <__ieee754_sqrtf+0x3a>
 800e1c0:	4601      	mov	r1, r0
 800e1c2:	f7f2 fcad 	bl	8000b20 <__aeabi_fsub>
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	f7f2 fe68 	bl	8000e9c <__aeabi_fdiv>
 800e1cc:	e7f1      	b.n	800e1b2 <__ieee754_sqrtf+0x1e>
 800e1ce:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e1d2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e1d6:	d029      	beq.n	800e22c <__ieee754_sqrtf+0x98>
 800e1d8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e1dc:	07cb      	lsls	r3, r1, #31
 800e1de:	f04f 0300 	mov.w	r3, #0
 800e1e2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e1e6:	f04f 0419 	mov.w	r4, #25
 800e1ea:	461e      	mov	r6, r3
 800e1ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e1f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e1f4:	bf58      	it	pl
 800e1f6:	0052      	lslpl	r2, r2, #1
 800e1f8:	1040      	asrs	r0, r0, #1
 800e1fa:	0052      	lsls	r2, r2, #1
 800e1fc:	1875      	adds	r5, r6, r1
 800e1fe:	4295      	cmp	r5, r2
 800e200:	bfde      	ittt	le
 800e202:	186e      	addle	r6, r5, r1
 800e204:	1b52      	suble	r2, r2, r5
 800e206:	185b      	addle	r3, r3, r1
 800e208:	3c01      	subs	r4, #1
 800e20a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e20e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e212:	d1f3      	bne.n	800e1fc <__ieee754_sqrtf+0x68>
 800e214:	b112      	cbz	r2, 800e21c <__ieee754_sqrtf+0x88>
 800e216:	3301      	adds	r3, #1
 800e218:	f023 0301 	bic.w	r3, r3, #1
 800e21c:	105c      	asrs	r4, r3, #1
 800e21e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e222:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e226:	e7c5      	b.n	800e1b4 <__ieee754_sqrtf+0x20>
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	3201      	adds	r2, #1
 800e22c:	0218      	lsls	r0, r3, #8
 800e22e:	d5fb      	bpl.n	800e228 <__ieee754_sqrtf+0x94>
 800e230:	3a01      	subs	r2, #1
 800e232:	1a89      	subs	r1, r1, r2
 800e234:	e7d0      	b.n	800e1d8 <__ieee754_sqrtf+0x44>
	...

0800e238 <__kernel_cosf>:
 800e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800e240:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e244:	4606      	mov	r6, r0
 800e246:	4688      	mov	r8, r1
 800e248:	da03      	bge.n	800e252 <__kernel_cosf+0x1a>
 800e24a:	f7f2 ff4f 	bl	80010ec <__aeabi_f2iz>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d05c      	beq.n	800e30c <__kernel_cosf+0xd4>
 800e252:	4631      	mov	r1, r6
 800e254:	4630      	mov	r0, r6
 800e256:	f7f2 fd6d 	bl	8000d34 <__aeabi_fmul>
 800e25a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e25e:	4605      	mov	r5, r0
 800e260:	f7f2 fd68 	bl	8000d34 <__aeabi_fmul>
 800e264:	492b      	ldr	r1, [pc, #172]	; (800e314 <__kernel_cosf+0xdc>)
 800e266:	4607      	mov	r7, r0
 800e268:	4628      	mov	r0, r5
 800e26a:	f7f2 fd63 	bl	8000d34 <__aeabi_fmul>
 800e26e:	492a      	ldr	r1, [pc, #168]	; (800e318 <__kernel_cosf+0xe0>)
 800e270:	f7f2 fc58 	bl	8000b24 <__addsf3>
 800e274:	4629      	mov	r1, r5
 800e276:	f7f2 fd5d 	bl	8000d34 <__aeabi_fmul>
 800e27a:	4928      	ldr	r1, [pc, #160]	; (800e31c <__kernel_cosf+0xe4>)
 800e27c:	f7f2 fc50 	bl	8000b20 <__aeabi_fsub>
 800e280:	4629      	mov	r1, r5
 800e282:	f7f2 fd57 	bl	8000d34 <__aeabi_fmul>
 800e286:	4926      	ldr	r1, [pc, #152]	; (800e320 <__kernel_cosf+0xe8>)
 800e288:	f7f2 fc4c 	bl	8000b24 <__addsf3>
 800e28c:	4629      	mov	r1, r5
 800e28e:	f7f2 fd51 	bl	8000d34 <__aeabi_fmul>
 800e292:	4924      	ldr	r1, [pc, #144]	; (800e324 <__kernel_cosf+0xec>)
 800e294:	f7f2 fc44 	bl	8000b20 <__aeabi_fsub>
 800e298:	4629      	mov	r1, r5
 800e29a:	f7f2 fd4b 	bl	8000d34 <__aeabi_fmul>
 800e29e:	4922      	ldr	r1, [pc, #136]	; (800e328 <__kernel_cosf+0xf0>)
 800e2a0:	f7f2 fc40 	bl	8000b24 <__addsf3>
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	f7f2 fd45 	bl	8000d34 <__aeabi_fmul>
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	f7f2 fd42 	bl	8000d34 <__aeabi_fmul>
 800e2b0:	4641      	mov	r1, r8
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f7f2 fd3d 	bl	8000d34 <__aeabi_fmul>
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	4628      	mov	r0, r5
 800e2be:	f7f2 fc2f 	bl	8000b20 <__aeabi_fsub>
 800e2c2:	4b1a      	ldr	r3, [pc, #104]	; (800e32c <__kernel_cosf+0xf4>)
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	429c      	cmp	r4, r3
 800e2c8:	dc0a      	bgt.n	800e2e0 <__kernel_cosf+0xa8>
 800e2ca:	4601      	mov	r1, r0
 800e2cc:	4638      	mov	r0, r7
 800e2ce:	f7f2 fc27 	bl	8000b20 <__aeabi_fsub>
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e2d8:	f7f2 fc22 	bl	8000b20 <__aeabi_fsub>
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	4b13      	ldr	r3, [pc, #76]	; (800e330 <__kernel_cosf+0xf8>)
 800e2e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e2e6:	429c      	cmp	r4, r3
 800e2e8:	bfcc      	ite	gt
 800e2ea:	4c12      	ldrgt	r4, [pc, #72]	; (800e334 <__kernel_cosf+0xfc>)
 800e2ec:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	f7f2 fc15 	bl	8000b20 <__aeabi_fsub>
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4606      	mov	r6, r0
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	f7f2 fc10 	bl	8000b20 <__aeabi_fsub>
 800e300:	4629      	mov	r1, r5
 800e302:	f7f2 fc0d 	bl	8000b20 <__aeabi_fsub>
 800e306:	4601      	mov	r1, r0
 800e308:	4630      	mov	r0, r6
 800e30a:	e7e5      	b.n	800e2d8 <__kernel_cosf+0xa0>
 800e30c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e310:	e7e4      	b.n	800e2dc <__kernel_cosf+0xa4>
 800e312:	bf00      	nop
 800e314:	ad47d74e 	.word	0xad47d74e
 800e318:	310f74f6 	.word	0x310f74f6
 800e31c:	3493f27c 	.word	0x3493f27c
 800e320:	37d00d01 	.word	0x37d00d01
 800e324:	3ab60b61 	.word	0x3ab60b61
 800e328:	3d2aaaab 	.word	0x3d2aaaab
 800e32c:	3e999999 	.word	0x3e999999
 800e330:	3f480000 	.word	0x3f480000
 800e334:	3e900000 	.word	0x3e900000

0800e338 <__kernel_rem_pio2f>:
 800e338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33c:	b0db      	sub	sp, #364	; 0x16c
 800e33e:	9202      	str	r2, [sp, #8]
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e344:	4bc5      	ldr	r3, [pc, #788]	; (800e65c <__kernel_rem_pio2f+0x324>)
 800e346:	9005      	str	r0, [sp, #20]
 800e348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34c:	9100      	str	r1, [sp, #0]
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	9b04      	ldr	r3, [sp, #16]
 800e352:	3b01      	subs	r3, #1
 800e354:	9303      	str	r3, [sp, #12]
 800e356:	9b02      	ldr	r3, [sp, #8]
 800e358:	1d1a      	adds	r2, r3, #4
 800e35a:	f2c0 809b 	blt.w	800e494 <__kernel_rem_pio2f+0x15c>
 800e35e:	1edc      	subs	r4, r3, #3
 800e360:	bf48      	it	mi
 800e362:	1d1c      	addmi	r4, r3, #4
 800e364:	10e4      	asrs	r4, r4, #3
 800e366:	2500      	movs	r5, #0
 800e368:	f04f 0a00 	mov.w	sl, #0
 800e36c:	1c67      	adds	r7, r4, #1
 800e36e:	00fb      	lsls	r3, r7, #3
 800e370:	9306      	str	r3, [sp, #24]
 800e372:	9b02      	ldr	r3, [sp, #8]
 800e374:	9a03      	ldr	r2, [sp, #12]
 800e376:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800e37a:	9b01      	ldr	r3, [sp, #4]
 800e37c:	1aa6      	subs	r6, r4, r2
 800e37e:	eb03 0802 	add.w	r8, r3, r2
 800e382:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e384:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800e388:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800e38c:	4545      	cmp	r5, r8
 800e38e:	f340 8083 	ble.w	800e498 <__kernel_rem_pio2f+0x160>
 800e392:	f04f 0800 	mov.w	r8, #0
 800e396:	f04f 0b00 	mov.w	fp, #0
 800e39a:	9b04      	ldr	r3, [sp, #16]
 800e39c:	aa1e      	add	r2, sp, #120	; 0x78
 800e39e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e3a2:	ab46      	add	r3, sp, #280	; 0x118
 800e3a4:	9a01      	ldr	r2, [sp, #4]
 800e3a6:	4590      	cmp	r8, r2
 800e3a8:	f340 809c 	ble.w	800e4e4 <__kernel_rem_pio2f+0x1ac>
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	aa0a      	add	r2, sp, #40	; 0x28
 800e3b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3b4:	9308      	str	r3, [sp, #32]
 800e3b6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e3b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e3bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e3c0:	9307      	str	r3, [sp, #28]
 800e3c2:	ad0a      	add	r5, sp, #40	; 0x28
 800e3c4:	462e      	mov	r6, r5
 800e3c6:	46c3      	mov	fp, r8
 800e3c8:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800e3cc:	ab5a      	add	r3, sp, #360	; 0x168
 800e3ce:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e3d2:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800e3d6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800e3da:	f1bb 0f00 	cmp.w	fp, #0
 800e3de:	f300 8086 	bgt.w	800e4ee <__kernel_rem_pio2f+0x1b6>
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f000 fc3b 	bl	800ec60 <scalbnf>
 800e3ea:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	f7f2 fca0 	bl	8000d34 <__aeabi_fmul>
 800e3f4:	f000 fbee 	bl	800ebd4 <floorf>
 800e3f8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800e3fc:	f7f2 fc9a 	bl	8000d34 <__aeabi_fmul>
 800e400:	4601      	mov	r1, r0
 800e402:	4620      	mov	r0, r4
 800e404:	f7f2 fb8c 	bl	8000b20 <__aeabi_fsub>
 800e408:	4604      	mov	r4, r0
 800e40a:	f7f2 fe6f 	bl	80010ec <__aeabi_f2iz>
 800e40e:	4606      	mov	r6, r0
 800e410:	f7f2 fc3c 	bl	8000c8c <__aeabi_i2f>
 800e414:	4601      	mov	r1, r0
 800e416:	4620      	mov	r0, r4
 800e418:	f7f2 fb82 	bl	8000b20 <__aeabi_fsub>
 800e41c:	2f00      	cmp	r7, #0
 800e41e:	4681      	mov	r9, r0
 800e420:	f340 8084 	ble.w	800e52c <__kernel_rem_pio2f+0x1f4>
 800e424:	f108 32ff 	add.w	r2, r8, #4294967295
 800e428:	ab0a      	add	r3, sp, #40	; 0x28
 800e42a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800e42e:	f1c7 0108 	rsb	r1, r7, #8
 800e432:	fa44 f301 	asr.w	r3, r4, r1
 800e436:	441e      	add	r6, r3
 800e438:	408b      	lsls	r3, r1
 800e43a:	1ae4      	subs	r4, r4, r3
 800e43c:	f1c7 0007 	rsb	r0, r7, #7
 800e440:	ab0a      	add	r3, sp, #40	; 0x28
 800e442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e446:	4104      	asrs	r4, r0
 800e448:	2c00      	cmp	r4, #0
 800e44a:	dd7e      	ble.n	800e54a <__kernel_rem_pio2f+0x212>
 800e44c:	2200      	movs	r2, #0
 800e44e:	4692      	mov	sl, r2
 800e450:	3601      	adds	r6, #1
 800e452:	4590      	cmp	r8, r2
 800e454:	f300 80b0 	bgt.w	800e5b8 <__kernel_rem_pio2f+0x280>
 800e458:	2f00      	cmp	r7, #0
 800e45a:	dd05      	ble.n	800e468 <__kernel_rem_pio2f+0x130>
 800e45c:	2f01      	cmp	r7, #1
 800e45e:	f000 80bd 	beq.w	800e5dc <__kernel_rem_pio2f+0x2a4>
 800e462:	2f02      	cmp	r7, #2
 800e464:	f000 80c5 	beq.w	800e5f2 <__kernel_rem_pio2f+0x2ba>
 800e468:	2c02      	cmp	r4, #2
 800e46a:	d16e      	bne.n	800e54a <__kernel_rem_pio2f+0x212>
 800e46c:	4649      	mov	r1, r9
 800e46e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e472:	f7f2 fb55 	bl	8000b20 <__aeabi_fsub>
 800e476:	4681      	mov	r9, r0
 800e478:	f1ba 0f00 	cmp.w	sl, #0
 800e47c:	d065      	beq.n	800e54a <__kernel_rem_pio2f+0x212>
 800e47e:	4639      	mov	r1, r7
 800e480:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e484:	f000 fbec 	bl	800ec60 <scalbnf>
 800e488:	4601      	mov	r1, r0
 800e48a:	4648      	mov	r0, r9
 800e48c:	f7f2 fb48 	bl	8000b20 <__aeabi_fsub>
 800e490:	4681      	mov	r9, r0
 800e492:	e05a      	b.n	800e54a <__kernel_rem_pio2f+0x212>
 800e494:	2400      	movs	r4, #0
 800e496:	e766      	b.n	800e366 <__kernel_rem_pio2f+0x2e>
 800e498:	42ee      	cmn	r6, r5
 800e49a:	d407      	bmi.n	800e4ac <__kernel_rem_pio2f+0x174>
 800e49c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e4a0:	f7f2 fbf4 	bl	8000c8c <__aeabi_i2f>
 800e4a4:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800e4a8:	3501      	adds	r5, #1
 800e4aa:	e76f      	b.n	800e38c <__kernel_rem_pio2f+0x54>
 800e4ac:	4650      	mov	r0, sl
 800e4ae:	e7f9      	b.n	800e4a4 <__kernel_rem_pio2f+0x16c>
 800e4b0:	9b05      	ldr	r3, [sp, #20]
 800e4b2:	f8da 1000 	ldr.w	r1, [sl]
 800e4b6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800e4ba:	f7f2 fc3b 	bl	8000d34 <__aeabi_fmul>
 800e4be:	4601      	mov	r1, r0
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7f2 fb2f 	bl	8000b24 <__addsf3>
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	f109 0901 	add.w	r9, r9, #1
 800e4cc:	ab46      	add	r3, sp, #280	; 0x118
 800e4ce:	9a03      	ldr	r2, [sp, #12]
 800e4d0:	f1aa 0a04 	sub.w	sl, sl, #4
 800e4d4:	4591      	cmp	r9, r2
 800e4d6:	ddeb      	ble.n	800e4b0 <__kernel_rem_pio2f+0x178>
 800e4d8:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e4dc:	3504      	adds	r5, #4
 800e4de:	f108 0801 	add.w	r8, r8, #1
 800e4e2:	e75f      	b.n	800e3a4 <__kernel_rem_pio2f+0x6c>
 800e4e4:	46aa      	mov	sl, r5
 800e4e6:	465e      	mov	r6, fp
 800e4e8:	f04f 0900 	mov.w	r9, #0
 800e4ec:	e7ef      	b.n	800e4ce <__kernel_rem_pio2f+0x196>
 800e4ee:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f7f2 fc1e 	bl	8000d34 <__aeabi_fmul>
 800e4f8:	f7f2 fdf8 	bl	80010ec <__aeabi_f2iz>
 800e4fc:	f7f2 fbc6 	bl	8000c8c <__aeabi_i2f>
 800e500:	4649      	mov	r1, r9
 800e502:	9009      	str	r0, [sp, #36]	; 0x24
 800e504:	f7f2 fc16 	bl	8000d34 <__aeabi_fmul>
 800e508:	4601      	mov	r1, r0
 800e50a:	4620      	mov	r0, r4
 800e50c:	f7f2 fb08 	bl	8000b20 <__aeabi_fsub>
 800e510:	f7f2 fdec 	bl	80010ec <__aeabi_f2iz>
 800e514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e516:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e51a:	f846 0b04 	str.w	r0, [r6], #4
 800e51e:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800e522:	4618      	mov	r0, r3
 800e524:	f7f2 fafe 	bl	8000b24 <__addsf3>
 800e528:	4604      	mov	r4, r0
 800e52a:	e756      	b.n	800e3da <__kernel_rem_pio2f+0xa2>
 800e52c:	d106      	bne.n	800e53c <__kernel_rem_pio2f+0x204>
 800e52e:	f108 33ff 	add.w	r3, r8, #4294967295
 800e532:	aa0a      	add	r2, sp, #40	; 0x28
 800e534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e538:	1224      	asrs	r4, r4, #8
 800e53a:	e785      	b.n	800e448 <__kernel_rem_pio2f+0x110>
 800e53c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e540:	f7f2 fdaa 	bl	8001098 <__aeabi_fcmpge>
 800e544:	4604      	mov	r4, r0
 800e546:	2800      	cmp	r0, #0
 800e548:	d134      	bne.n	800e5b4 <__kernel_rem_pio2f+0x27c>
 800e54a:	2100      	movs	r1, #0
 800e54c:	4648      	mov	r0, r9
 800e54e:	f7f2 fd85 	bl	800105c <__aeabi_fcmpeq>
 800e552:	2800      	cmp	r0, #0
 800e554:	f000 809a 	beq.w	800e68c <__kernel_rem_pio2f+0x354>
 800e558:	f108 35ff 	add.w	r5, r8, #4294967295
 800e55c:	462b      	mov	r3, r5
 800e55e:	2200      	movs	r2, #0
 800e560:	9901      	ldr	r1, [sp, #4]
 800e562:	428b      	cmp	r3, r1
 800e564:	da4d      	bge.n	800e602 <__kernel_rem_pio2f+0x2ca>
 800e566:	2a00      	cmp	r2, #0
 800e568:	d07c      	beq.n	800e664 <__kernel_rem_pio2f+0x32c>
 800e56a:	ab0a      	add	r3, sp, #40	; 0x28
 800e56c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e570:	3f08      	subs	r7, #8
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 8088 	beq.w	800e688 <__kernel_rem_pio2f+0x350>
 800e578:	4639      	mov	r1, r7
 800e57a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e57e:	f000 fb6f 	bl	800ec60 <scalbnf>
 800e582:	46aa      	mov	sl, r5
 800e584:	4681      	mov	r9, r0
 800e586:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800e58a:	af46      	add	r7, sp, #280	; 0x118
 800e58c:	f1ba 0f00 	cmp.w	sl, #0
 800e590:	f280 80b1 	bge.w	800e6f6 <__kernel_rem_pio2f+0x3be>
 800e594:	46a9      	mov	r9, r5
 800e596:	f04f 0a00 	mov.w	sl, #0
 800e59a:	2200      	movs	r2, #0
 800e59c:	f1b9 0f00 	cmp.w	r9, #0
 800e5a0:	f2c0 80db 	blt.w	800e75a <__kernel_rem_pio2f+0x422>
 800e5a4:	a946      	add	r1, sp, #280	; 0x118
 800e5a6:	4617      	mov	r7, r2
 800e5a8:	f04f 0800 	mov.w	r8, #0
 800e5ac:	4b2c      	ldr	r3, [pc, #176]	; (800e660 <__kernel_rem_pio2f+0x328>)
 800e5ae:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800e5b2:	e0c3      	b.n	800e73c <__kernel_rem_pio2f+0x404>
 800e5b4:	2402      	movs	r4, #2
 800e5b6:	e749      	b.n	800e44c <__kernel_rem_pio2f+0x114>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	f1ba 0f00 	cmp.w	sl, #0
 800e5be:	d108      	bne.n	800e5d2 <__kernel_rem_pio2f+0x29a>
 800e5c0:	b11b      	cbz	r3, 800e5ca <__kernel_rem_pio2f+0x292>
 800e5c2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e5c6:	602b      	str	r3, [r5, #0]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	469a      	mov	sl, r3
 800e5cc:	3201      	adds	r2, #1
 800e5ce:	3504      	adds	r5, #4
 800e5d0:	e73f      	b.n	800e452 <__kernel_rem_pio2f+0x11a>
 800e5d2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e5d6:	602b      	str	r3, [r5, #0]
 800e5d8:	4653      	mov	r3, sl
 800e5da:	e7f6      	b.n	800e5ca <__kernel_rem_pio2f+0x292>
 800e5dc:	f108 32ff 	add.w	r2, r8, #4294967295
 800e5e0:	ab0a      	add	r3, sp, #40	; 0x28
 800e5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ea:	a90a      	add	r1, sp, #40	; 0x28
 800e5ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e5f0:	e73a      	b.n	800e468 <__kernel_rem_pio2f+0x130>
 800e5f2:	f108 32ff 	add.w	r2, r8, #4294967295
 800e5f6:	ab0a      	add	r3, sp, #40	; 0x28
 800e5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e600:	e7f3      	b.n	800e5ea <__kernel_rem_pio2f+0x2b2>
 800e602:	a90a      	add	r1, sp, #40	; 0x28
 800e604:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e608:	3b01      	subs	r3, #1
 800e60a:	430a      	orrs	r2, r1
 800e60c:	e7a8      	b.n	800e560 <__kernel_rem_pio2f+0x228>
 800e60e:	3301      	adds	r3, #1
 800e610:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e614:	2900      	cmp	r1, #0
 800e616:	d0fa      	beq.n	800e60e <__kernel_rem_pio2f+0x2d6>
 800e618:	9a04      	ldr	r2, [sp, #16]
 800e61a:	f108 0501 	add.w	r5, r8, #1
 800e61e:	eb08 0402 	add.w	r4, r8, r2
 800e622:	aa1e      	add	r2, sp, #120	; 0x78
 800e624:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e628:	4498      	add	r8, r3
 800e62a:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800e62e:	45a8      	cmp	r8, r5
 800e630:	f6ff aec7 	blt.w	800e3c2 <__kernel_rem_pio2f+0x8a>
 800e634:	9b07      	ldr	r3, [sp, #28]
 800e636:	46a3      	mov	fp, r4
 800e638:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e63c:	f7f2 fb26 	bl	8000c8c <__aeabi_i2f>
 800e640:	f04f 0a00 	mov.w	sl, #0
 800e644:	2600      	movs	r6, #0
 800e646:	f84b 0b04 	str.w	r0, [fp], #4
 800e64a:	9b03      	ldr	r3, [sp, #12]
 800e64c:	459a      	cmp	sl, r3
 800e64e:	dd0c      	ble.n	800e66a <__kernel_rem_pio2f+0x332>
 800e650:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800e654:	465c      	mov	r4, fp
 800e656:	3501      	adds	r5, #1
 800e658:	e7e9      	b.n	800e62e <__kernel_rem_pio2f+0x2f6>
 800e65a:	bf00      	nop
 800e65c:	0800f234 	.word	0x0800f234
 800e660:	0800f208 	.word	0x0800f208
 800e664:	2301      	movs	r3, #1
 800e666:	9a08      	ldr	r2, [sp, #32]
 800e668:	e7d2      	b.n	800e610 <__kernel_rem_pio2f+0x2d8>
 800e66a:	9b05      	ldr	r3, [sp, #20]
 800e66c:	f854 0904 	ldr.w	r0, [r4], #-4
 800e670:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e674:	f7f2 fb5e 	bl	8000d34 <__aeabi_fmul>
 800e678:	4601      	mov	r1, r0
 800e67a:	4630      	mov	r0, r6
 800e67c:	f7f2 fa52 	bl	8000b24 <__addsf3>
 800e680:	f10a 0a01 	add.w	sl, sl, #1
 800e684:	4606      	mov	r6, r0
 800e686:	e7e0      	b.n	800e64a <__kernel_rem_pio2f+0x312>
 800e688:	3d01      	subs	r5, #1
 800e68a:	e76e      	b.n	800e56a <__kernel_rem_pio2f+0x232>
 800e68c:	9b06      	ldr	r3, [sp, #24]
 800e68e:	9a02      	ldr	r2, [sp, #8]
 800e690:	4648      	mov	r0, r9
 800e692:	1a99      	subs	r1, r3, r2
 800e694:	f000 fae4 	bl	800ec60 <scalbnf>
 800e698:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e69c:	4605      	mov	r5, r0
 800e69e:	f7f2 fcfb 	bl	8001098 <__aeabi_fcmpge>
 800e6a2:	b300      	cbz	r0, 800e6e6 <__kernel_rem_pio2f+0x3ae>
 800e6a4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f7f2 fb43 	bl	8000d34 <__aeabi_fmul>
 800e6ae:	f7f2 fd1d 	bl	80010ec <__aeabi_f2iz>
 800e6b2:	f7f2 faeb 	bl	8000c8c <__aeabi_i2f>
 800e6b6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e6ba:	4681      	mov	r9, r0
 800e6bc:	f7f2 fb3a 	bl	8000d34 <__aeabi_fmul>
 800e6c0:	4601      	mov	r1, r0
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	f7f2 fa2c 	bl	8000b20 <__aeabi_fsub>
 800e6c8:	f7f2 fd10 	bl	80010ec <__aeabi_f2iz>
 800e6cc:	ab0a      	add	r3, sp, #40	; 0x28
 800e6ce:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e6d2:	4648      	mov	r0, r9
 800e6d4:	f7f2 fd0a 	bl	80010ec <__aeabi_f2iz>
 800e6d8:	f108 0501 	add.w	r5, r8, #1
 800e6dc:	ab0a      	add	r3, sp, #40	; 0x28
 800e6de:	3708      	adds	r7, #8
 800e6e0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e6e4:	e748      	b.n	800e578 <__kernel_rem_pio2f+0x240>
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	f7f2 fd00 	bl	80010ec <__aeabi_f2iz>
 800e6ec:	ab0a      	add	r3, sp, #40	; 0x28
 800e6ee:	4645      	mov	r5, r8
 800e6f0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e6f4:	e740      	b.n	800e578 <__kernel_rem_pio2f+0x240>
 800e6f6:	ab0a      	add	r3, sp, #40	; 0x28
 800e6f8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e6fc:	f7f2 fac6 	bl	8000c8c <__aeabi_i2f>
 800e700:	4649      	mov	r1, r9
 800e702:	f7f2 fb17 	bl	8000d34 <__aeabi_fmul>
 800e706:	4641      	mov	r1, r8
 800e708:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800e70c:	4648      	mov	r0, r9
 800e70e:	f7f2 fb11 	bl	8000d34 <__aeabi_fmul>
 800e712:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e716:	4681      	mov	r9, r0
 800e718:	e738      	b.n	800e58c <__kernel_rem_pio2f+0x254>
 800e71a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e71e:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e722:	9203      	str	r2, [sp, #12]
 800e724:	9302      	str	r3, [sp, #8]
 800e726:	f7f2 fb05 	bl	8000d34 <__aeabi_fmul>
 800e72a:	4601      	mov	r1, r0
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7f2 f9f9 	bl	8000b24 <__addsf3>
 800e732:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e736:	4607      	mov	r7, r0
 800e738:	f108 0801 	add.w	r8, r8, #1
 800e73c:	9901      	ldr	r1, [sp, #4]
 800e73e:	4588      	cmp	r8, r1
 800e740:	dc01      	bgt.n	800e746 <__kernel_rem_pio2f+0x40e>
 800e742:	45c2      	cmp	sl, r8
 800e744:	dae9      	bge.n	800e71a <__kernel_rem_pio2f+0x3e2>
 800e746:	ab5a      	add	r3, sp, #360	; 0x168
 800e748:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e74c:	f843 7ca0 	str.w	r7, [r3, #-160]
 800e750:	f109 39ff 	add.w	r9, r9, #4294967295
 800e754:	f10a 0a01 	add.w	sl, sl, #1
 800e758:	e720      	b.n	800e59c <__kernel_rem_pio2f+0x264>
 800e75a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	dc07      	bgt.n	800e770 <__kernel_rem_pio2f+0x438>
 800e760:	2b00      	cmp	r3, #0
 800e762:	dc4d      	bgt.n	800e800 <__kernel_rem_pio2f+0x4c8>
 800e764:	d02e      	beq.n	800e7c4 <__kernel_rem_pio2f+0x48c>
 800e766:	f006 0007 	and.w	r0, r6, #7
 800e76a:	b05b      	add	sp, #364	; 0x16c
 800e76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e770:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e772:	2b03      	cmp	r3, #3
 800e774:	d1f7      	bne.n	800e766 <__kernel_rem_pio2f+0x42e>
 800e776:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800e77a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800e77e:	46b8      	mov	r8, r7
 800e780:	46aa      	mov	sl, r5
 800e782:	f1ba 0f00 	cmp.w	sl, #0
 800e786:	dc48      	bgt.n	800e81a <__kernel_rem_pio2f+0x4e2>
 800e788:	46a9      	mov	r9, r5
 800e78a:	f1b9 0f01 	cmp.w	r9, #1
 800e78e:	dc5f      	bgt.n	800e850 <__kernel_rem_pio2f+0x518>
 800e790:	2000      	movs	r0, #0
 800e792:	2d01      	cmp	r5, #1
 800e794:	dc75      	bgt.n	800e882 <__kernel_rem_pio2f+0x54a>
 800e796:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e798:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e79a:	2c00      	cmp	r4, #0
 800e79c:	d177      	bne.n	800e88e <__kernel_rem_pio2f+0x556>
 800e79e:	9900      	ldr	r1, [sp, #0]
 800e7a0:	600a      	str	r2, [r1, #0]
 800e7a2:	460a      	mov	r2, r1
 800e7a4:	604b      	str	r3, [r1, #4]
 800e7a6:	6090      	str	r0, [r2, #8]
 800e7a8:	e7dd      	b.n	800e766 <__kernel_rem_pio2f+0x42e>
 800e7aa:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800e7ae:	f7f2 f9b9 	bl	8000b24 <__addsf3>
 800e7b2:	3d01      	subs	r5, #1
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	daf8      	bge.n	800e7aa <__kernel_rem_pio2f+0x472>
 800e7b8:	b10c      	cbz	r4, 800e7be <__kernel_rem_pio2f+0x486>
 800e7ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e7be:	9b00      	ldr	r3, [sp, #0]
 800e7c0:	6018      	str	r0, [r3, #0]
 800e7c2:	e7d0      	b.n	800e766 <__kernel_rem_pio2f+0x42e>
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	af32      	add	r7, sp, #200	; 0xc8
 800e7c8:	e7f4      	b.n	800e7b4 <__kernel_rem_pio2f+0x47c>
 800e7ca:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e7ce:	f7f2 f9a9 	bl	8000b24 <__addsf3>
 800e7d2:	3f01      	subs	r7, #1
 800e7d4:	2f00      	cmp	r7, #0
 800e7d6:	daf8      	bge.n	800e7ca <__kernel_rem_pio2f+0x492>
 800e7d8:	b1bc      	cbz	r4, 800e80a <__kernel_rem_pio2f+0x4d2>
 800e7da:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e7de:	9a00      	ldr	r2, [sp, #0]
 800e7e0:	4601      	mov	r1, r0
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800e7e6:	f7f2 f99b 	bl	8000b20 <__aeabi_fsub>
 800e7ea:	2701      	movs	r7, #1
 800e7ec:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e7f0:	42bd      	cmp	r5, r7
 800e7f2:	da0c      	bge.n	800e80e <__kernel_rem_pio2f+0x4d6>
 800e7f4:	b10c      	cbz	r4, 800e7fa <__kernel_rem_pio2f+0x4c2>
 800e7f6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e7fa:	9b00      	ldr	r3, [sp, #0]
 800e7fc:	6058      	str	r0, [r3, #4]
 800e7fe:	e7b2      	b.n	800e766 <__kernel_rem_pio2f+0x42e>
 800e800:	462f      	mov	r7, r5
 800e802:	2000      	movs	r0, #0
 800e804:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e808:	e7e4      	b.n	800e7d4 <__kernel_rem_pio2f+0x49c>
 800e80a:	4603      	mov	r3, r0
 800e80c:	e7e7      	b.n	800e7de <__kernel_rem_pio2f+0x4a6>
 800e80e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e812:	f7f2 f987 	bl	8000b24 <__addsf3>
 800e816:	3701      	adds	r7, #1
 800e818:	e7ea      	b.n	800e7f0 <__kernel_rem_pio2f+0x4b8>
 800e81a:	f8d8 3000 	ldr.w	r3, [r8]
 800e81e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e822:	4619      	mov	r1, r3
 800e824:	4610      	mov	r0, r2
 800e826:	9302      	str	r3, [sp, #8]
 800e828:	9201      	str	r2, [sp, #4]
 800e82a:	f7f2 f97b 	bl	8000b24 <__addsf3>
 800e82e:	9a01      	ldr	r2, [sp, #4]
 800e830:	4601      	mov	r1, r0
 800e832:	4681      	mov	r9, r0
 800e834:	4610      	mov	r0, r2
 800e836:	f7f2 f973 	bl	8000b20 <__aeabi_fsub>
 800e83a:	9b02      	ldr	r3, [sp, #8]
 800e83c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e840:	4619      	mov	r1, r3
 800e842:	f7f2 f96f 	bl	8000b24 <__addsf3>
 800e846:	f848 0904 	str.w	r0, [r8], #-4
 800e84a:	f8c8 9000 	str.w	r9, [r8]
 800e84e:	e798      	b.n	800e782 <__kernel_rem_pio2f+0x44a>
 800e850:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e854:	f8d7 a000 	ldr.w	sl, [r7]
 800e858:	4618      	mov	r0, r3
 800e85a:	4651      	mov	r1, sl
 800e85c:	9301      	str	r3, [sp, #4]
 800e85e:	f7f2 f961 	bl	8000b24 <__addsf3>
 800e862:	9b01      	ldr	r3, [sp, #4]
 800e864:	4601      	mov	r1, r0
 800e866:	4680      	mov	r8, r0
 800e868:	4618      	mov	r0, r3
 800e86a:	f7f2 f959 	bl	8000b20 <__aeabi_fsub>
 800e86e:	4651      	mov	r1, sl
 800e870:	f7f2 f958 	bl	8000b24 <__addsf3>
 800e874:	f847 0904 	str.w	r0, [r7], #-4
 800e878:	f109 39ff 	add.w	r9, r9, #4294967295
 800e87c:	f8c7 8000 	str.w	r8, [r7]
 800e880:	e783      	b.n	800e78a <__kernel_rem_pio2f+0x452>
 800e882:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800e886:	f7f2 f94d 	bl	8000b24 <__addsf3>
 800e88a:	3d01      	subs	r5, #1
 800e88c:	e781      	b.n	800e792 <__kernel_rem_pio2f+0x45a>
 800e88e:	9900      	ldr	r1, [sp, #0]
 800e890:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e894:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e898:	600a      	str	r2, [r1, #0]
 800e89a:	604b      	str	r3, [r1, #4]
 800e89c:	460a      	mov	r2, r1
 800e89e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e8a2:	e780      	b.n	800e7a6 <__kernel_rem_pio2f+0x46e>

0800e8a4 <__kernel_sinf>:
 800e8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e8ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	460f      	mov	r7, r1
 800e8b4:	4691      	mov	r9, r2
 800e8b6:	da03      	bge.n	800e8c0 <__kernel_sinf+0x1c>
 800e8b8:	f7f2 fc18 	bl	80010ec <__aeabi_f2iz>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d035      	beq.n	800e92c <__kernel_sinf+0x88>
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f7f2 fa36 	bl	8000d34 <__aeabi_fmul>
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	4601      	mov	r1, r0
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	f7f2 fa31 	bl	8000d34 <__aeabi_fmul>
 800e8d2:	4929      	ldr	r1, [pc, #164]	; (800e978 <__kernel_sinf+0xd4>)
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f7f2 fa2c 	bl	8000d34 <__aeabi_fmul>
 800e8dc:	4927      	ldr	r1, [pc, #156]	; (800e97c <__kernel_sinf+0xd8>)
 800e8de:	f7f2 f91f 	bl	8000b20 <__aeabi_fsub>
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	f7f2 fa26 	bl	8000d34 <__aeabi_fmul>
 800e8e8:	4925      	ldr	r1, [pc, #148]	; (800e980 <__kernel_sinf+0xdc>)
 800e8ea:	f7f2 f91b 	bl	8000b24 <__addsf3>
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	f7f2 fa20 	bl	8000d34 <__aeabi_fmul>
 800e8f4:	4923      	ldr	r1, [pc, #140]	; (800e984 <__kernel_sinf+0xe0>)
 800e8f6:	f7f2 f913 	bl	8000b20 <__aeabi_fsub>
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	f7f2 fa1a 	bl	8000d34 <__aeabi_fmul>
 800e900:	4921      	ldr	r1, [pc, #132]	; (800e988 <__kernel_sinf+0xe4>)
 800e902:	f7f2 f90f 	bl	8000b24 <__addsf3>
 800e906:	4680      	mov	r8, r0
 800e908:	f1b9 0f00 	cmp.w	r9, #0
 800e90c:	d111      	bne.n	800e932 <__kernel_sinf+0x8e>
 800e90e:	4601      	mov	r1, r0
 800e910:	4628      	mov	r0, r5
 800e912:	f7f2 fa0f 	bl	8000d34 <__aeabi_fmul>
 800e916:	491d      	ldr	r1, [pc, #116]	; (800e98c <__kernel_sinf+0xe8>)
 800e918:	f7f2 f902 	bl	8000b20 <__aeabi_fsub>
 800e91c:	4631      	mov	r1, r6
 800e91e:	f7f2 fa09 	bl	8000d34 <__aeabi_fmul>
 800e922:	4601      	mov	r1, r0
 800e924:	4620      	mov	r0, r4
 800e926:	f7f2 f8fd 	bl	8000b24 <__addsf3>
 800e92a:	4604      	mov	r4, r0
 800e92c:	4620      	mov	r0, r4
 800e92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e932:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e936:	4638      	mov	r0, r7
 800e938:	f7f2 f9fc 	bl	8000d34 <__aeabi_fmul>
 800e93c:	4641      	mov	r1, r8
 800e93e:	4681      	mov	r9, r0
 800e940:	4630      	mov	r0, r6
 800e942:	f7f2 f9f7 	bl	8000d34 <__aeabi_fmul>
 800e946:	4601      	mov	r1, r0
 800e948:	4648      	mov	r0, r9
 800e94a:	f7f2 f8e9 	bl	8000b20 <__aeabi_fsub>
 800e94e:	4629      	mov	r1, r5
 800e950:	f7f2 f9f0 	bl	8000d34 <__aeabi_fmul>
 800e954:	4639      	mov	r1, r7
 800e956:	f7f2 f8e3 	bl	8000b20 <__aeabi_fsub>
 800e95a:	490c      	ldr	r1, [pc, #48]	; (800e98c <__kernel_sinf+0xe8>)
 800e95c:	4605      	mov	r5, r0
 800e95e:	4630      	mov	r0, r6
 800e960:	f7f2 f9e8 	bl	8000d34 <__aeabi_fmul>
 800e964:	4601      	mov	r1, r0
 800e966:	4628      	mov	r0, r5
 800e968:	f7f2 f8dc 	bl	8000b24 <__addsf3>
 800e96c:	4601      	mov	r1, r0
 800e96e:	4620      	mov	r0, r4
 800e970:	f7f2 f8d6 	bl	8000b20 <__aeabi_fsub>
 800e974:	e7d9      	b.n	800e92a <__kernel_sinf+0x86>
 800e976:	bf00      	nop
 800e978:	2f2ec9d3 	.word	0x2f2ec9d3
 800e97c:	32d72f34 	.word	0x32d72f34
 800e980:	3638ef1b 	.word	0x3638ef1b
 800e984:	39500d01 	.word	0x39500d01
 800e988:	3c088889 	.word	0x3c088889
 800e98c:	3e2aaaab 	.word	0x3e2aaaab

0800e990 <fabs>:
 800e990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e994:	4770      	bx	lr

0800e996 <finite>:
 800e996:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e99a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e99e:	0fc0      	lsrs	r0, r0, #31
 800e9a0:	4770      	bx	lr
	...

0800e9a4 <nan>:
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	4901      	ldr	r1, [pc, #4]	; (800e9ac <nan+0x8>)
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	7ff80000 	.word	0x7ff80000

0800e9b0 <rint>:
 800e9b0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800e9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9b6:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800e9ba:	2f13      	cmp	r7, #19
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	460c      	mov	r4, r1
 800e9c2:	4605      	mov	r5, r0
 800e9c4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800e9c8:	dc59      	bgt.n	800ea7e <rint+0xce>
 800e9ca:	2f00      	cmp	r7, #0
 800e9cc:	da2a      	bge.n	800ea24 <rint+0x74>
 800e9ce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e9d2:	4301      	orrs	r1, r0
 800e9d4:	d022      	beq.n	800ea1c <rint+0x6c>
 800e9d6:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800e9da:	4301      	orrs	r1, r0
 800e9dc:	424d      	negs	r5, r1
 800e9de:	430d      	orrs	r5, r1
 800e9e0:	4936      	ldr	r1, [pc, #216]	; (800eabc <rint+0x10c>)
 800e9e2:	0c5c      	lsrs	r4, r3, #17
 800e9e4:	0b2d      	lsrs	r5, r5, #12
 800e9e6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800e9ea:	0464      	lsls	r4, r4, #17
 800e9ec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e9f0:	ea45 0304 	orr.w	r3, r5, r4
 800e9f4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	f7f1 fbae 	bl	800015c <__adddf3>
 800ea00:	e9cd 0100 	strd	r0, r1, [sp]
 800ea04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea08:	462b      	mov	r3, r5
 800ea0a:	4622      	mov	r2, r4
 800ea0c:	f7f1 fba4 	bl	8000158 <__aeabi_dsub>
 800ea10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ea14:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	4619      	mov	r1, r3
 800ea20:	b003      	add	sp, #12
 800ea22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea24:	4926      	ldr	r1, [pc, #152]	; (800eac0 <rint+0x110>)
 800ea26:	4139      	asrs	r1, r7
 800ea28:	ea03 0001 	and.w	r0, r3, r1
 800ea2c:	4310      	orrs	r0, r2
 800ea2e:	d0f5      	beq.n	800ea1c <rint+0x6c>
 800ea30:	084b      	lsrs	r3, r1, #1
 800ea32:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ea36:	ea52 0501 	orrs.w	r5, r2, r1
 800ea3a:	d00c      	beq.n	800ea56 <rint+0xa6>
 800ea3c:	ea24 0303 	bic.w	r3, r4, r3
 800ea40:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ea44:	2f13      	cmp	r7, #19
 800ea46:	bf0c      	ite	eq
 800ea48:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ea4c:	2500      	movne	r5, #0
 800ea4e:	fa44 f707 	asr.w	r7, r4, r7
 800ea52:	ea43 0407 	orr.w	r4, r3, r7
 800ea56:	4919      	ldr	r1, [pc, #100]	; (800eabc <rint+0x10c>)
 800ea58:	4623      	mov	r3, r4
 800ea5a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ea5e:	462a      	mov	r2, r5
 800ea60:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fb78 	bl	800015c <__adddf3>
 800ea6c:	e9cd 0100 	strd	r0, r1, [sp]
 800ea70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea74:	4622      	mov	r2, r4
 800ea76:	462b      	mov	r3, r5
 800ea78:	f7f1 fb6e 	bl	8000158 <__aeabi_dsub>
 800ea7c:	e7cc      	b.n	800ea18 <rint+0x68>
 800ea7e:	2f33      	cmp	r7, #51	; 0x33
 800ea80:	dd05      	ble.n	800ea8e <rint+0xde>
 800ea82:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ea86:	d1c9      	bne.n	800ea1c <rint+0x6c>
 800ea88:	f7f1 fb68 	bl	800015c <__adddf3>
 800ea8c:	e7c4      	b.n	800ea18 <rint+0x68>
 800ea8e:	f04f 31ff 	mov.w	r1, #4294967295
 800ea92:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ea96:	fa21 f10c 	lsr.w	r1, r1, ip
 800ea9a:	4208      	tst	r0, r1
 800ea9c:	d0be      	beq.n	800ea1c <rint+0x6c>
 800ea9e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800eaa2:	bf18      	it	ne
 800eaa4:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800eaa8:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800eaac:	bf1e      	ittt	ne
 800eaae:	ea20 0303 	bicne.w	r3, r0, r3
 800eab2:	fa45 fc0c 	asrne.w	ip, r5, ip
 800eab6:	ea43 050c 	orrne.w	r5, r3, ip
 800eaba:	e7cc      	b.n	800ea56 <rint+0xa6>
 800eabc:	0800f240 	.word	0x0800f240
 800eac0:	000fffff 	.word	0x000fffff
 800eac4:	00000000 	.word	0x00000000

0800eac8 <scalbn>:
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	4617      	mov	r7, r2
 800ead4:	460b      	mov	r3, r1
 800ead6:	b996      	cbnz	r6, 800eafe <scalbn+0x36>
 800ead8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eadc:	4303      	orrs	r3, r0
 800eade:	d039      	beq.n	800eb54 <scalbn+0x8c>
 800eae0:	4b35      	ldr	r3, [pc, #212]	; (800ebb8 <scalbn+0xf0>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	f7f1 fcf0 	bl	80004c8 <__aeabi_dmul>
 800eae8:	4b34      	ldr	r3, [pc, #208]	; (800ebbc <scalbn+0xf4>)
 800eaea:	4604      	mov	r4, r0
 800eaec:	429f      	cmp	r7, r3
 800eaee:	460d      	mov	r5, r1
 800eaf0:	da0f      	bge.n	800eb12 <scalbn+0x4a>
 800eaf2:	a32d      	add	r3, pc, #180	; (adr r3, 800eba8 <scalbn+0xe0>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f7f1 fce6 	bl	80004c8 <__aeabi_dmul>
 800eafc:	e006      	b.n	800eb0c <scalbn+0x44>
 800eafe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800eb02:	4296      	cmp	r6, r2
 800eb04:	d10a      	bne.n	800eb1c <scalbn+0x54>
 800eb06:	4602      	mov	r2, r0
 800eb08:	f7f1 fb28 	bl	800015c <__adddf3>
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	460d      	mov	r5, r1
 800eb10:	e020      	b.n	800eb54 <scalbn+0x8c>
 800eb12:	460b      	mov	r3, r1
 800eb14:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800eb18:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800eb1c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800eb20:	19b9      	adds	r1, r7, r6
 800eb22:	4291      	cmp	r1, r2
 800eb24:	dd0e      	ble.n	800eb44 <scalbn+0x7c>
 800eb26:	a322      	add	r3, pc, #136	; (adr r3, 800ebb0 <scalbn+0xe8>)
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800eb30:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800eb34:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800eb38:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800eb3c:	4820      	ldr	r0, [pc, #128]	; (800ebc0 <scalbn+0xf8>)
 800eb3e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800eb42:	e7d9      	b.n	800eaf8 <scalbn+0x30>
 800eb44:	2900      	cmp	r1, #0
 800eb46:	dd08      	ble.n	800eb5a <scalbn+0x92>
 800eb48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb5a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800eb5e:	da16      	bge.n	800eb8e <scalbn+0xc6>
 800eb60:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eb64:	429f      	cmp	r7, r3
 800eb66:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800eb6a:	dd08      	ble.n	800eb7e <scalbn+0xb6>
 800eb6c:	4c15      	ldr	r4, [pc, #84]	; (800ebc4 <scalbn+0xfc>)
 800eb6e:	4814      	ldr	r0, [pc, #80]	; (800ebc0 <scalbn+0xf8>)
 800eb70:	f363 74df 	bfi	r4, r3, #31, #1
 800eb74:	a30e      	add	r3, pc, #56	; (adr r3, 800ebb0 <scalbn+0xe8>)
 800eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	e7bc      	b.n	800eaf8 <scalbn+0x30>
 800eb7e:	4c12      	ldr	r4, [pc, #72]	; (800ebc8 <scalbn+0x100>)
 800eb80:	4812      	ldr	r0, [pc, #72]	; (800ebcc <scalbn+0x104>)
 800eb82:	f363 74df 	bfi	r4, r3, #31, #1
 800eb86:	a308      	add	r3, pc, #32	; (adr r3, 800eba8 <scalbn+0xe0>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	e7f5      	b.n	800eb7a <scalbn+0xb2>
 800eb8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb92:	3136      	adds	r1, #54	; 0x36
 800eb94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	4629      	mov	r1, r5
 800eba0:	2200      	movs	r2, #0
 800eba2:	4b0b      	ldr	r3, [pc, #44]	; (800ebd0 <scalbn+0x108>)
 800eba4:	e7a8      	b.n	800eaf8 <scalbn+0x30>
 800eba6:	bf00      	nop
 800eba8:	c2f8f359 	.word	0xc2f8f359
 800ebac:	01a56e1f 	.word	0x01a56e1f
 800ebb0:	8800759c 	.word	0x8800759c
 800ebb4:	7e37e43c 	.word	0x7e37e43c
 800ebb8:	43500000 	.word	0x43500000
 800ebbc:	ffff3cb0 	.word	0xffff3cb0
 800ebc0:	8800759c 	.word	0x8800759c
 800ebc4:	7e37e43c 	.word	0x7e37e43c
 800ebc8:	01a56e1f 	.word	0x01a56e1f
 800ebcc:	c2f8f359 	.word	0xc2f8f359
 800ebd0:	3c900000 	.word	0x3c900000

0800ebd4 <floorf>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800ebda:	3d7f      	subs	r5, #127	; 0x7f
 800ebdc:	2d16      	cmp	r5, #22
 800ebde:	4601      	mov	r1, r0
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ebe6:	dc26      	bgt.n	800ec36 <floorf+0x62>
 800ebe8:	2d00      	cmp	r5, #0
 800ebea:	da0e      	bge.n	800ec0a <floorf+0x36>
 800ebec:	4917      	ldr	r1, [pc, #92]	; (800ec4c <floorf+0x78>)
 800ebee:	f7f1 ff99 	bl	8000b24 <__addsf3>
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	f7f2 fa5a 	bl	80010ac <__aeabi_fcmpgt>
 800ebf8:	b128      	cbz	r0, 800ec06 <floorf+0x32>
 800ebfa:	2c00      	cmp	r4, #0
 800ebfc:	da23      	bge.n	800ec46 <floorf+0x72>
 800ebfe:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <floorf+0x7c>)
 800ec00:	2e00      	cmp	r6, #0
 800ec02:	bf18      	it	ne
 800ec04:	461c      	movne	r4, r3
 800ec06:	4621      	mov	r1, r4
 800ec08:	e01b      	b.n	800ec42 <floorf+0x6e>
 800ec0a:	4e12      	ldr	r6, [pc, #72]	; (800ec54 <floorf+0x80>)
 800ec0c:	412e      	asrs	r6, r5
 800ec0e:	4230      	tst	r0, r6
 800ec10:	d017      	beq.n	800ec42 <floorf+0x6e>
 800ec12:	490e      	ldr	r1, [pc, #56]	; (800ec4c <floorf+0x78>)
 800ec14:	f7f1 ff86 	bl	8000b24 <__addsf3>
 800ec18:	2100      	movs	r1, #0
 800ec1a:	f7f2 fa47 	bl	80010ac <__aeabi_fcmpgt>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	d0f1      	beq.n	800ec06 <floorf+0x32>
 800ec22:	2c00      	cmp	r4, #0
 800ec24:	bfbe      	ittt	lt
 800ec26:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800ec2a:	fa43 f505 	asrlt.w	r5, r3, r5
 800ec2e:	1964      	addlt	r4, r4, r5
 800ec30:	ea24 0406 	bic.w	r4, r4, r6
 800ec34:	e7e7      	b.n	800ec06 <floorf+0x32>
 800ec36:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ec3a:	d302      	bcc.n	800ec42 <floorf+0x6e>
 800ec3c:	f7f1 ff72 	bl	8000b24 <__addsf3>
 800ec40:	4601      	mov	r1, r0
 800ec42:	4608      	mov	r0, r1
 800ec44:	bd70      	pop	{r4, r5, r6, pc}
 800ec46:	2400      	movs	r4, #0
 800ec48:	e7dd      	b.n	800ec06 <floorf+0x32>
 800ec4a:	bf00      	nop
 800ec4c:	7149f2ca 	.word	0x7149f2ca
 800ec50:	bf800000 	.word	0xbf800000
 800ec54:	007fffff 	.word	0x007fffff

0800ec58 <nanf>:
 800ec58:	4800      	ldr	r0, [pc, #0]	; (800ec5c <nanf+0x4>)
 800ec5a:	4770      	bx	lr
 800ec5c:	7fc00000 	.word	0x7fc00000

0800ec60 <scalbnf>:
 800ec60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	4603      	mov	r3, r0
 800ec68:	460d      	mov	r5, r1
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	d02a      	beq.n	800ecc4 <scalbnf+0x64>
 800ec6e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ec72:	d304      	bcc.n	800ec7e <scalbnf+0x1e>
 800ec74:	4601      	mov	r1, r0
 800ec76:	f7f1 ff55 	bl	8000b24 <__addsf3>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	e022      	b.n	800ecc4 <scalbnf+0x64>
 800ec7e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800ec82:	d117      	bne.n	800ecb4 <scalbnf+0x54>
 800ec84:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800ec88:	f7f2 f854 	bl	8000d34 <__aeabi_fmul>
 800ec8c:	4a17      	ldr	r2, [pc, #92]	; (800ecec <scalbnf+0x8c>)
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4295      	cmp	r5, r2
 800ec92:	db0b      	blt.n	800ecac <scalbnf+0x4c>
 800ec94:	4604      	mov	r4, r0
 800ec96:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ec9a:	3a19      	subs	r2, #25
 800ec9c:	442a      	add	r2, r5
 800ec9e:	2afe      	cmp	r2, #254	; 0xfe
 800eca0:	dd0a      	ble.n	800ecb8 <scalbnf+0x58>
 800eca2:	4913      	ldr	r1, [pc, #76]	; (800ecf0 <scalbnf+0x90>)
 800eca4:	4618      	mov	r0, r3
 800eca6:	f361 001e 	bfi	r0, r1, #0, #31
 800ecaa:	e000      	b.n	800ecae <scalbnf+0x4e>
 800ecac:	4911      	ldr	r1, [pc, #68]	; (800ecf4 <scalbnf+0x94>)
 800ecae:	f7f2 f841 	bl	8000d34 <__aeabi_fmul>
 800ecb2:	e7e2      	b.n	800ec7a <scalbnf+0x1a>
 800ecb4:	0dd2      	lsrs	r2, r2, #23
 800ecb6:	e7f1      	b.n	800ec9c <scalbnf+0x3c>
 800ecb8:	2a00      	cmp	r2, #0
 800ecba:	dd05      	ble.n	800ecc8 <scalbnf+0x68>
 800ecbc:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800ecc0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	bd38      	pop	{r3, r4, r5, pc}
 800ecc8:	f112 0f16 	cmn.w	r2, #22
 800eccc:	da05      	bge.n	800ecda <scalbnf+0x7a>
 800ecce:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ecd2:	4295      	cmp	r5, r2
 800ecd4:	dce5      	bgt.n	800eca2 <scalbnf+0x42>
 800ecd6:	4907      	ldr	r1, [pc, #28]	; (800ecf4 <scalbnf+0x94>)
 800ecd8:	e7e4      	b.n	800eca4 <scalbnf+0x44>
 800ecda:	3219      	adds	r2, #25
 800ecdc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800ece0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800ece4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800ece8:	e7e1      	b.n	800ecae <scalbnf+0x4e>
 800ecea:	bf00      	nop
 800ecec:	ffff3cb0 	.word	0xffff3cb0
 800ecf0:	7149f2ca 	.word	0x7149f2ca
 800ecf4:	0da24260 	.word	0x0da24260

0800ecf8 <__errno>:
 800ecf8:	4b01      	ldr	r3, [pc, #4]	; (800ed00 <__errno+0x8>)
 800ecfa:	6818      	ldr	r0, [r3, #0]
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	20000010 	.word	0x20000010

0800ed04 <__libc_init_array>:
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	2600      	movs	r6, #0
 800ed08:	4d0c      	ldr	r5, [pc, #48]	; (800ed3c <__libc_init_array+0x38>)
 800ed0a:	4c0d      	ldr	r4, [pc, #52]	; (800ed40 <__libc_init_array+0x3c>)
 800ed0c:	1b64      	subs	r4, r4, r5
 800ed0e:	10a4      	asrs	r4, r4, #2
 800ed10:	42a6      	cmp	r6, r4
 800ed12:	d109      	bne.n	800ed28 <__libc_init_array+0x24>
 800ed14:	f000 f830 	bl	800ed78 <_init>
 800ed18:	2600      	movs	r6, #0
 800ed1a:	4d0a      	ldr	r5, [pc, #40]	; (800ed44 <__libc_init_array+0x40>)
 800ed1c:	4c0a      	ldr	r4, [pc, #40]	; (800ed48 <__libc_init_array+0x44>)
 800ed1e:	1b64      	subs	r4, r4, r5
 800ed20:	10a4      	asrs	r4, r4, #2
 800ed22:	42a6      	cmp	r6, r4
 800ed24:	d105      	bne.n	800ed32 <__libc_init_array+0x2e>
 800ed26:	bd70      	pop	{r4, r5, r6, pc}
 800ed28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed2c:	4798      	blx	r3
 800ed2e:	3601      	adds	r6, #1
 800ed30:	e7ee      	b.n	800ed10 <__libc_init_array+0xc>
 800ed32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed36:	4798      	blx	r3
 800ed38:	3601      	adds	r6, #1
 800ed3a:	e7f2      	b.n	800ed22 <__libc_init_array+0x1e>
 800ed3c:	0800f2b0 	.word	0x0800f2b0
 800ed40:	0800f2b0 	.word	0x0800f2b0
 800ed44:	0800f2b0 	.word	0x0800f2b0
 800ed48:	0800f2b8 	.word	0x0800f2b8

0800ed4c <memcpy>:
 800ed4c:	440a      	add	r2, r1
 800ed4e:	4291      	cmp	r1, r2
 800ed50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed54:	d100      	bne.n	800ed58 <memcpy+0xc>
 800ed56:	4770      	bx	lr
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed5e:	4291      	cmp	r1, r2
 800ed60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed64:	d1f9      	bne.n	800ed5a <memcpy+0xe>
 800ed66:	bd10      	pop	{r4, pc}

0800ed68 <memset>:
 800ed68:	4603      	mov	r3, r0
 800ed6a:	4402      	add	r2, r0
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d100      	bne.n	800ed72 <memset+0xa>
 800ed70:	4770      	bx	lr
 800ed72:	f803 1b01 	strb.w	r1, [r3], #1
 800ed76:	e7f9      	b.n	800ed6c <memset+0x4>

0800ed78 <_init>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	bf00      	nop
 800ed7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7e:	bc08      	pop	{r3}
 800ed80:	469e      	mov	lr, r3
 800ed82:	4770      	bx	lr

0800ed84 <_fini>:
 800ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed86:	bf00      	nop
 800ed88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8a:	bc08      	pop	{r3}
 800ed8c:	469e      	mov	lr, r3
 800ed8e:	4770      	bx	lr
