
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800d710  0800d710  0001d710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbe8  0800dbe8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbe8  0800dbe8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbe8  0800dbe8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800dbe8  0800dbe8  0001dbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800dbf0  0800dbf0  0001dbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800dbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  20000078  0800dc6c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  0800dc6c  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234e5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004101  00000000  00000000  00043582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00047688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  00048a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0c2  00000000  00000000  00049d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016179  00000000  00000000  00066dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000965f6  00000000  00000000  0007cf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006330  00000000  00000000  001135bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d6f4 	.word	0x0800d6f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800d6f4 	.word	0x0800d6f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001186:	2301      	movs	r3, #1
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	22d0      	movs	r2, #208	; 0xd0
 8001196:	21ef      	movs	r1, #239	; 0xef
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <read_chip_id+0x3c>)
 800119a:	f003 fc31 	bl	8004a00 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	2b55      	cmp	r3, #85	; 0x55
 80011a2:	d001      	beq.n	80011a8 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000009c 	.word	0x2000009c

080011b8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af04      	add	r7, sp, #16
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d81a      	bhi.n	8001204 <set_oss+0x4c>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <set_oss+0x1c>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	080011fd 	.word	0x080011fd
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2205      	movs	r2, #5
 80011e8:	705a      	strb	r2, [r3, #1]
			break;
 80011ea:	e00f      	b.n	800120c <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2208      	movs	r2, #8
 80011f0:	705a      	strb	r2, [r3, #1]
			break;
 80011f2:	e00b      	b.n	800120c <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	220e      	movs	r2, #14
 80011f8:	705a      	strb	r2, [r3, #1]
			break;
 80011fa:	e007      	b.n	800120c <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	221a      	movs	r2, #26
 8001200:	705a      	strb	r2, [r3, #1]
			break;
 8001202:	e003      	b.n	800120c <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2208      	movs	r2, #8
 8001208:	705a      	strb	r2, [r3, #1]
			break;
 800120a:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	019b      	lsls	r3, r3, #6
 8001216:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800121c:	2301      	movs	r3, #1
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2302      	movs	r3, #2
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	22f4      	movs	r2, #244	; 0xf4
 800122e:	21ee      	movs	r1, #238	; 0xee
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <set_oss+0x88>)
 8001232:	f003 faeb 	bl	800480c <HAL_I2C_Mem_Write>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000009c 	.word	0x2000009c

08001244 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001272:	2301      	movs	r3, #1
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2316      	movs	r3, #22
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	22aa      	movs	r2, #170	; 0xaa
 8001284:	21ef      	movs	r1, #239	; 0xef
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <read_calib_data+0xe4>)
 8001288:	f003 fbba 	bl	8004a00 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001292:	e03e      	b.n	8001312 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800129e:	4413      	add	r3, r2
 80012a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b219      	sxth	r1, r3
 80012a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4403      	add	r3, r0
 80012c2:	430a      	orrs	r2, r1
 80012c4:	b212      	sxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80012c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	440b      	add	r3, r1
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 8001302:	2302      	movs	r3, #2
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800130c:	3301      	adds	r3, #1
 800130e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001316:	2b0b      	cmp	r3, #11
 8001318:	d9bc      	bls.n	8001294 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800131e:	4618      	mov	r0, r3
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000009c 	.word	0x2000009c

0800132c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00c f8ca 	bl	800d4d4 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001340:	687c      	ldr	r4, [r7, #4]
 8001342:	f7ff ff19 	bl	8001178 <read_chip_id>
 8001346:	4603      	mov	r3, r0
 8001348:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	687c      	ldr	r4, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff77 	bl	8001244 <read_calib_data>
 8001356:	4603      	mov	r3, r0
 8001358:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3338      	adds	r3, #56	; 0x38
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff28 	bl	80011b8 <set_oss>
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 8001376:	232e      	movs	r3, #46	; 0x2e
 8001378:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800137a:	2301      	movs	r3, #1
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	22f4      	movs	r2, #244	; 0xf4
 800138a:	21ee      	movs	r1, #238	; 0xee
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <write_ut+0x2c>)
 800138e:	f003 fa3d 	bl	800480c <HAL_I2C_Mem_Write>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000009c 	.word	0x2000009c

080013a0 <read_ut>:

int32_t read_ut (void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 80013a6:	2301      	movs	r3, #1
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2302      	movs	r3, #2
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	22f6      	movs	r2, #246	; 0xf6
 80013b6:	21ef      	movs	r1, #239	; 0xef
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <read_ut+0x30>)
 80013ba:	f003 fb21 	bl	8004a00 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	797a      	ldrb	r2, [r7, #5]
 80013c4:	4313      	orrs	r3, r2
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000009c 	.word	0x2000009c

080013d4 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe7c 	bl	80010ec <__aeabi_f2iz>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	895b      	ldrh	r3, [r3, #10]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	8912      	ldrh	r2, [r2, #8]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	13db      	asrs	r3, r3, #15
 8001406:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800140e:	02da      	lsls	r2, r3, #11
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001416:	4619      	mov	r1, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	440b      	add	r3, r1
 800141c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001420:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	441a      	add	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	3308      	adds	r3, #8
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc29 	bl	8000c8c <__aeabi_i2f>
 800143a:	4603      	mov	r3, r0
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <get_temp+0xa4>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc78 	bl	8000d34 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <get_temp+0xa8>)
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe1a 	bl	8001084 <__aeabi_fcmple>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <get_temp+0x90>
 8001456:	490a      	ldr	r1, [pc, #40]	; (8001480 <get_temp+0xac>)
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff fe1d 	bl	8001098 <__aeabi_fcmpge>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	3dcccccd 	.word	0x3dcccccd
 800147c:	c2200000 	.word	0xc2200000
 8001480:	42aa0000 	.word	0x42aa0000

08001484 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <write_up+0x38>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	803b      	strh	r3, [r7, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8001498:	2334      	movs	r3, #52	; 0x34
 800149a:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800149c:	2301      	movs	r3, #1
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	463b      	mov	r3, r7
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	22f4      	movs	r2, #244	; 0xf4
 80014ac:	21ee      	movs	r1, #238	; 0xee
 80014ae:	4804      	ldr	r0, [pc, #16]	; (80014c0 <write_up+0x3c>)
 80014b0:	f003 f9ac 	bl	800480c <HAL_I2C_Mem_Write>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800d710 	.word	0x0800d710
 80014c0:	2000009c 	.word	0x2000009c

080014c4 <read_up>:

int32_t read_up (oss_t oss)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <read_up+0x54>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	813b      	strh	r3, [r7, #8]
 80014d2:	2300      	movs	r3, #0
 80014d4:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80014da:	2301      	movs	r3, #1
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2303      	movs	r3, #3
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	22f6      	movs	r2, #246	; 0xf6
 80014ec:	21ef      	movs	r1, #239	; 0xef
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <read_up+0x58>)
 80014f0:	f003 fa86 	bl	8004a00 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80014f4:	7a3b      	ldrb	r3, [r7, #8]
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	7a7b      	ldrb	r3, [r7, #9]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4413      	add	r3, r2
 80014fe:	7aba      	ldrb	r2, [r7, #10]
 8001500:	441a      	add	r2, r3
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	f1c3 0308 	rsb	r3, r3, #8
 8001508:	fa42 f303 	asr.w	r3, r2, r3
 800150c:	60fb      	str	r3, [r7, #12]
	return up;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800d710 	.word	0x0800d710
 800151c:	2000009c 	.word	0x2000009c

08001520 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001520:	b084      	sub	sp, #16
 8001522:	b480      	push	{r7}
 8001524:	b089      	sub	sp, #36	; 0x24
 8001526:	af00      	add	r7, sp, #0
 8001528:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800152c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800153e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001540:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fb03 f303 	mul.w	r3, r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	da01      	bge.n	8001554 <get_pressure+0x34>
 8001550:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001554:	131b      	asrs	r3, r3, #12
 8001556:	fb03 f302 	mul.w	r3, r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	da01      	bge.n	8001562 <get_pressure+0x42>
 800155e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001562:	12db      	asrs	r3, r3, #11
 8001564:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001566:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800156a:	461a      	mov	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fb03 f302 	mul.w	r3, r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	da01      	bge.n	800157a <get_pressure+0x5a>
 8001576:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800157a:	12db      	asrs	r3, r3, #11
 800157c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001586:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800158a:	009a      	lsls	r2, r3, #2
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001594:	4093      	lsls	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	da00      	bge.n	800159e <get_pressure+0x7e>
 800159c:	3303      	adds	r3, #3
 800159e:	109b      	asrs	r3, r3, #2
 80015a0:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 80015a2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015a6:	461a      	mov	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fb03 f302 	mul.w	r3, r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da02      	bge.n	80015b8 <get_pressure+0x98>
 80015b2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80015b6:	331f      	adds	r3, #31
 80015b8:	135b      	asrs	r3, r3, #13
 80015ba:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80015bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80015c0:	461a      	mov	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fb03 f303 	mul.w	r3, r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da01      	bge.n	80015d0 <get_pressure+0xb0>
 80015cc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015d0:	131b      	asrs	r3, r3, #12
 80015d2:	fb03 f302 	mul.w	r3, r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da02      	bge.n	80015e0 <get_pressure+0xc0>
 80015da:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015de:	33ff      	adds	r3, #255	; 0xff
 80015e0:	141b      	asrs	r3, r3, #16
 80015e2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	3302      	adds	r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <get_pressure+0xd2>
 80015f0:	3303      	adds	r3, #3
 80015f2:	109b      	asrs	r3, r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80015f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001600:	fb03 f302 	mul.w	r3, r3, r2
 8001604:	0bdb      	lsrs	r3, r3, #15
 8001606:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001614:	4611      	mov	r1, r2
 8001616:	f24c 3250 	movw	r2, #50000	; 0xc350
 800161a:	410a      	asrs	r2, r1
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db06      	blt.n	8001636 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	005a      	lsls	r2, r3, #1
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	e005      	b.n	8001642 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da00      	bge.n	800164a <get_pressure+0x12a>
 8001648:	33ff      	adds	r3, #255	; 0xff
 800164a:	121b      	asrs	r3, r3, #8
 800164c:	461a      	mov	r2, r3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da00      	bge.n	8001656 <get_pressure+0x136>
 8001654:	33ff      	adds	r3, #255	; 0xff
 8001656:	121b      	asrs	r3, r3, #8
 8001658:	fb03 f302 	mul.w	r3, r3, r2
 800165c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f640 32de 	movw	r2, #3038	; 0xbde
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	da02      	bge.n	8001672 <get_pressure+0x152>
 800166c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001670:	33ff      	adds	r3, #255	; 0xff
 8001672:	141b      	asrs	r3, r3, #16
 8001674:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <get_pressure+0x194>)
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	da02      	bge.n	8001688 <get_pressure+0x168>
 8001682:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001686:	33ff      	adds	r3, #255	; 0xff
 8001688:	141b      	asrs	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001696:	2b00      	cmp	r3, #0
 8001698:	da00      	bge.n	800169c <get_pressure+0x17c>
 800169a:	330f      	adds	r3, #15
 800169c:	111b      	asrs	r3, r3, #4
 800169e:	461a      	mov	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]

	return p;
 80016a6:	69fb      	ldr	r3, [r7, #28]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3724      	adds	r7, #36	; 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	b004      	add	sp, #16
 80016b2:	4770      	bx	lr
 80016b4:	ffffe343 	.word	0xffffe343

080016b8 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fade 	bl	8000c8c <__aeabi_i2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4923      	ldr	r1, [pc, #140]	; (8001760 <get_altitude+0xa8>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbe1 	bl	8000e9c <__aeabi_fdiv>
 80016da:	4603      	mov	r3, r0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe9b 	bl	8000418 <__aeabi_f2d>
 80016e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001750 <get_altitude+0x98>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f009 ff7c 	bl	800b5e4 <pow>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	f04f 0000 	mov.w	r0, #0
 80016f4:	491b      	ldr	r1, [pc, #108]	; (8001764 <get_altitude+0xac>)
 80016f6:	f7fe fd2f 	bl	8000158 <__aeabi_dsub>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	a315      	add	r3, pc, #84	; (adr r3, 8001758 <get_altitude+0xa0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe fede 	bl	80004c8 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9b0 	bl	8000a78 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800171c:	4912      	ldr	r1, [pc, #72]	; (8001768 <get_altitude+0xb0>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff fcb0 	bl	8001084 <__aeabi_fcmple>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <get_altitude+0x80>
 800172a:	4910      	ldr	r1, [pc, #64]	; (800176c <get_altitude+0xb4>)
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fcb3 	bl	8001098 <__aeabi_fcmpge>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2205      	movs	r2, #5
 800173c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	ccd9456c 	.word	0xccd9456c
 8001754:	3fc85b95 	.word	0x3fc85b95
 8001758:	00000000 	.word	0x00000000
 800175c:	40e5a540 	.word	0x40e5a540
 8001760:	47c5e680 	.word	0x47c5e680
 8001764:	3ff00000 	.word	0x3ff00000
 8001768:	c3fa0000 	.word	0xc3fa0000
 800176c:	460ca000 	.word	0x460ca000

08001770 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return b_counter;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <get_b_counter+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000094 	.word	0x20000094

08001784 <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

	b_counter++;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <set_b_counter+0x30>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <set_b_counter+0x30>)
 8001794:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <set_b_counter+0x30>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d202      	bcs.n	80017a8 <set_b_counter+0x24>
		b_counter = 0;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <set_b_counter+0x30>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	}
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000094 	.word	0x20000094

080017b8 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 80017be:	2351      	movs	r3, #81	; 0x51
 80017c0:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 80017c2:	1dba      	adds	r2, r7, #6
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	21e0      	movs	r1, #224	; 0xe0
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <request_range+0x2c>)
 80017ce:	f002 fcbf 	bl	8004150 <HAL_I2C_Master_Transmit>
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <request_range+0x30>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000009c 	.word	0x2000009c
 80017e8:	20000000 	.word	0x20000000

080017ec <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <getRange+0x34>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			write = 1;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <getRange+0x38>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 80017fe:	1d3a      	adds	r2, r7, #4
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2302      	movs	r3, #2
 8001806:	21e1      	movs	r1, #225	; 0xe1
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <getRange+0x3c>)
 800180a:	f002 fd9f 	bl	800434c <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	797a      	ldrb	r2, [r7, #5]
 8001814:	4313      	orrs	r3, r2



	//return -1;

}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000ac8 	.word	0x20000ac8
 8001824:	20000000 	.word	0x20000000
 8001828:	2000009c 	.word	0x2000009c

0800182c <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <set_ucounter+0x30>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <set_ucounter+0x30>)
 800183c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <set_ucounter+0x30>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4293      	cmp	r3, r2
 8001848:	d202      	bcs.n	8001850 <set_ucounter+0x24>
		u_counter = 0;
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <set_ucounter+0x30>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
	}
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000098 	.word	0x20000098

08001860 <get_ucounter>:

int get_ucounter(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return u_counter;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <get_ucounter+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000098 	.word	0x20000098

08001874 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f009 ff51 	bl	800b73c <asinf>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f009 fe65 	bl	800b57c <cosf>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f009 ff5f 	bl	800b788 <sqrtf>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 fb34 	bl	8002f4a <_ZNSaIfED1Ev>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fb17 	bl	8002f2a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffeb 	bl	80018ec <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f001 ff85 	bl	8003834 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 800192a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800192e:	f001 ffe3 	bl	80038f8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001932:	f000 f8f1 	bl	8001b18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001936:	f000 fbb1 	bl	800209c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800193a:	f000 f93d 	bl	8001bb8 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 800193e:	f000 fa39 	bl	8001db4 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001942:	f000 f96d 	bl	8001c20 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001946:	f000 fb79 	bl	800203c <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800194a:	f000 fa8f 	bl	8001e6c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800194e:	f000 fb17 	bl	8001f80 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 8001952:	f000 fc27 	bl	80021a4 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001956:	4861      	ldr	r0, [pc, #388]	; (8001adc <main+0x1bc>)
 8001958:	f7ff fce8 	bl	800132c <bmp_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 800195c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001960:	f001 ffca 	bl	80038f8 <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001964:	2043      	movs	r0, #67	; 0x43
 8001966:	f000 fe9d 	bl	80026a4 <_Z7GyroErrh>
 800196a:	4603      	mov	r3, r0
 800196c:	4a5c      	ldr	r2, [pc, #368]	; (8001ae0 <main+0x1c0>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	2045      	movs	r0, #69	; 0x45
 8001972:	f000 fe97 	bl	80026a4 <_Z7GyroErrh>
 8001976:	4603      	mov	r3, r0
 8001978:	4a5a      	ldr	r2, [pc, #360]	; (8001ae4 <main+0x1c4>)
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	2047      	movs	r0, #71	; 0x47
 800197e:	f000 fe91 	bl	80026a4 <_Z7GyroErrh>
 8001982:	4603      	mov	r3, r0
 8001984:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <main+0x1c8>)
 8001986:	6013      	str	r3, [r2, #0]
  AccXh = GyroErr(ACC_X_ADDR); AccYh = GyroErr(ACC_Y_ADDR); AccZh = GyroErr(ACC_Z_ADDR);
 8001988:	203b      	movs	r0, #59	; 0x3b
 800198a:	f000 fe8b 	bl	80026a4 <_Z7GyroErrh>
 800198e:	4603      	mov	r3, r0
 8001990:	4a56      	ldr	r2, [pc, #344]	; (8001aec <main+0x1cc>)
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	203d      	movs	r0, #61	; 0x3d
 8001996:	f000 fe85 	bl	80026a4 <_Z7GyroErrh>
 800199a:	4603      	mov	r3, r0
 800199c:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <main+0x1d0>)
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	203f      	movs	r0, #63	; 0x3f
 80019a2:	f000 fe7f 	bl	80026a4 <_Z7GyroErrh>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <main+0x1d4>)
 80019aa:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku
  accX = GyroOku(ACC_X_ADDR);
 80019ac:	203b      	movs	r0, #59	; 0x3b
 80019ae:	f000 fdff 	bl	80025b0 <_Z7GyroOkuh>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f969 	bl	8000c8c <__aeabi_i2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <main+0x1d8>)
 80019be:	6013      	str	r3, [r2, #0]
  accY = GyroOku(ACC_Y_ADDR);
 80019c0:	203d      	movs	r0, #61	; 0x3d
 80019c2:	f000 fdf5 	bl	80025b0 <_Z7GyroOkuh>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f95f 	bl	8000c8c <__aeabi_i2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <main+0x1dc>)
 80019d2:	6013      	str	r3, [r2, #0]
  accZ = GyroOku(ACC_Z_ADDR);
 80019d4:	203f      	movs	r0, #63	; 0x3f
 80019d6:	f000 fdeb 	bl	80025b0 <_Z7GyroOkuh>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f955 	bl	8000c8c <__aeabi_i2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <main+0x1e0>)
 80019e6:	6013      	str	r3, [r2, #0]

  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 80019e8:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <main+0x1d8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a42      	ldr	r2, [pc, #264]	; (8001af8 <main+0x1d8>)
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f99e 	bl	8000d34 <__aeabi_fmul>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461c      	mov	r4, r3
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <main+0x1dc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <main+0x1dc>)
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f994 	bl	8000d34 <__aeabi_fmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff f887 	bl	8000b24 <__addsf3>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461c      	mov	r4, r3
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <main+0x1e0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a38      	ldr	r2, [pc, #224]	; (8001b00 <main+0x1e0>)
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f985 	bl	8000d34 <__aeabi_fmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff f878 	bl	8000b24 <__addsf3>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff40 	bl	80018bc <_ZSt4sqrtf>
 8001a3c:	6078      	str	r0, [r7, #4]

  float rad2deg = 57.3248;
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <main+0x1e4>)
 8001a40:	603b      	str	r3, [r7, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <main+0x1d8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fa27 	bl	8000e9c <__aeabi_fdiv>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff1b 	bl	800188c <_ZSt4asinf>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f968 	bl	8000d34 <__aeabi_fmul>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <main+0x1e8>)
 8001a6a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <main+0x1dc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fa11 	bl	8000e9c <__aeabi_fdiv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff05 	bl	800188c <_ZSt4asinf>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f952 	bl	8000d34 <__aeabi_fmul>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <main+0x1e8>)
 8001a96:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001a9a:	481c      	ldr	r0, [pc, #112]	; (8001b0c <main+0x1ec>)
 8001a9c:	f004 fb76 	bl	800618c <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001aa0:	481b      	ldr	r0, [pc, #108]	; (8001b10 <main+0x1f0>)
 8001aa2:	f004 fb29 	bl	80060f8 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	481a      	ldr	r0, [pc, #104]	; (8001b14 <main+0x1f4>)
 8001aaa:	f004 fc11 	bl	80062d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001aae:	2104      	movs	r1, #4
 8001ab0:	4818      	ldr	r0, [pc, #96]	; (8001b14 <main+0x1f4>)
 8001ab2:	f004 fc0d 	bl	80062d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <main+0x1f4>)
 8001aba:	f004 fc09 	bl	80062d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001abe:	210c      	movs	r1, #12
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <main+0x1f4>)
 8001ac2:	f004 fc05 	bl	80062d0 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	4811      	ldr	r0, [pc, #68]	; (8001b10 <main+0x1f0>)
 8001aca:	f004 fcfb 	bl	80064c4 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SendTelem();
 8001ace:	f000 fd45 	bl	800255c <_Z9SendTelemv>
	  Check_Arm();
 8001ad2:	f000 fbc1 	bl	8002258 <_Z9Check_Armv>
	  Check_Disarm();
 8001ad6:	f000 fc2d 	bl	8002334 <_Z12Check_Disarmv>
	  SendTelem();
 8001ada:	e7f8      	b.n	8001ace <main+0x1ae>
 8001adc:	20000a7c 	.word	0x20000a7c
 8001ae0:	20000268 	.word	0x20000268
 8001ae4:	2000026c 	.word	0x2000026c
 8001ae8:	20000270 	.word	0x20000270
 8001aec:	20000274 	.word	0x20000274
 8001af0:	20000278 	.word	0x20000278
 8001af4:	2000027c 	.word	0x2000027c
 8001af8:	2000025c 	.word	0x2000025c
 8001afc:	20000260 	.word	0x20000260
 8001b00:	20000264 	.word	0x20000264
 8001b04:	42654c98 	.word	0x42654c98
 8001b08:	200003e8 	.word	0x200003e8
 8001b0c:	20000138 	.word	0x20000138
 8001b10:	20000180 	.word	0x20000180
 8001b14:	200000f0 	.word	0x200000f0

08001b18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b090      	sub	sp, #64	; 0x40
 8001b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1e:	f107 0318 	add.w	r3, r7, #24
 8001b22:	2228      	movs	r2, #40	; 0x28
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00b fcd4 	bl	800d4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fe5f 	bl	8005824 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001b76:	f001 f9d3 	bl	8002f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2102      	movs	r1, #2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f8c5 	bl	8005d24 <HAL_RCC_ClockConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001baa:	f001 f9b9 	bl	8002f20 <Error_Handler>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3740      	adds	r7, #64	; 0x40
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <_ZL12MX_I2C1_Initv+0x60>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bc4:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <_ZL12MX_I2C1_Initv+0x64>)
 8001bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bf6:	f002 f967 	bl	8003ec8 <HAL_I2C_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001c0a:	f001 f989 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000009c 	.word	0x2000009c
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	00061a80 	.word	0x00061a80

08001c20 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b092      	sub	sp, #72	; 0x48
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2220      	movs	r2, #32
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00b fc42 	bl	800d4d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c50:	4b56      	ldr	r3, [pc, #344]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c52:	4a57      	ldr	r2, [pc, #348]	; (8001db0 <_ZL12MX_TIM1_Initv+0x190>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001c56:	4b55      	ldr	r3, [pc, #340]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c58:	2247      	movs	r2, #71	; 0x47
 8001c5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001c62:	4b52      	ldr	r3, [pc, #328]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c64:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6a:	4b50      	ldr	r3, [pc, #320]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c70:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c76:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c7c:	484b      	ldr	r0, [pc, #300]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001c7e:	f004 fad7 	bl	8006230 <HAL_TIM_PWM_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001c92:	f001 f945 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4841      	ldr	r0, [pc, #260]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001ca6:	f005 fc43 	bl	8007530 <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001cba:	f001 f931 	bl	8002f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4832      	ldr	r0, [pc, #200]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001ce4:	f004 fe90 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf14      	ite	ne
 8001cee:	2301      	movne	r3, #1
 8001cf0:	2300      	moveq	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001cf8:	f001 f912 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	2204      	movs	r2, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4829      	ldr	r0, [pc, #164]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001d06:	f004 fe7f 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001d1a:	f001 f901 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	2208      	movs	r2, #8
 8001d24:	4619      	mov	r1, r3
 8001d26:	4821      	ldr	r0, [pc, #132]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001d28:	f004 fe6e 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001d3c:	f001 f8f0 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	220c      	movs	r2, #12
 8001d46:	4619      	mov	r1, r3
 8001d48:	4818      	ldr	r0, [pc, #96]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001d4a:	f004 fe5d 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001d5e:	f001 f8df 	bl	8002f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001d86:	f005 fc31 	bl	80075ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001d9a:	f001 f8c1 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d9e:	4803      	ldr	r0, [pc, #12]	; (8001dac <_ZL12MX_TIM1_Initv+0x18c>)
 8001da0:	f001 fc0a 	bl	80035b8 <HAL_TIM_MspPostInit>

}
 8001da4:	bf00      	nop
 8001da6:	3748      	adds	r7, #72	; 0x48
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200000f0 	.word	0x200000f0
 8001db0:	40012c00 	.word	0x40012c00

08001db4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dda:	2247      	movs	r2, #71	; 0x47
 8001ddc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001de6:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001dea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df8:	481b      	ldr	r0, [pc, #108]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dfa:	f004 f92d 	bl	8006058 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001e0e:	f001 f887 	bl	8002f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4812      	ldr	r0, [pc, #72]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e20:	f004 feb0 	bl	8006b84 <HAL_TIM_ConfigClockSource>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf14      	ite	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001e34:	f001 f874 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e40:	463b      	mov	r3, r7
 8001e42:	4619      	mov	r1, r3
 8001e44:	4808      	ldr	r0, [pc, #32]	; (8001e68 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e46:	f005 fb73 	bl	8007530 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001e5a:	f001 f861 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000138 	.word	0x20000138

08001e6c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e96:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001e98:	4a38      	ldr	r2, [pc, #224]	; (8001f7c <_ZL12MX_TIM3_Initv+0x110>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001e9e:	2247      	movs	r2, #71	; 0x47
 8001ea0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ebc:	482e      	ldr	r0, [pc, #184]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ebe:	f004 f8cb 	bl	8006058 <HAL_TIM_Base_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001ed2:	f001 f825 	bl	8002f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eda:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4825      	ldr	r0, [pc, #148]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ee4:	f004 fe4e 	bl	8006b84 <HAL_TIM_ConfigClockSource>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001ef8:	f001 f812 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001efc:	481e      	ldr	r0, [pc, #120]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001efe:	f004 fa89 	bl	8006414 <HAL_TIM_IC_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001f12:	f001 f805 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4619      	mov	r1, r3
 8001f24:	4814      	ldr	r0, [pc, #80]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f26:	f005 fb03 	bl	8007530 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8001f3a:	f000 fff1 	bl	8002f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f42:	2301      	movs	r3, #1
 8001f44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	2208      	movs	r2, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	4808      	ldr	r0, [pc, #32]	; (8001f78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f56:	f004 fcc3 	bl	80068e0 <HAL_TIM_IC_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8001f6a:	f000 ffd9 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000180 	.word	0x20000180
 8001f7c:	40000400 	.word	0x40000400

08001f80 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	463b      	mov	r3, r7
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f9e:	4a26      	ldr	r2, [pc, #152]	; (8002038 <_ZL12MX_TIM4_Initv+0xb8>)
 8001fa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fa4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001fa8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fc4:	481b      	ldr	r0, [pc, #108]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fc6:	f004 f847 	bl	8006058 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001fda:	f000 ffa1 	bl	8002f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4812      	ldr	r0, [pc, #72]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fec:	f004 fdca 	bl	8006b84 <HAL_TIM_ConfigClockSource>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8002000:	f000 ff8e 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	4619      	mov	r1, r3
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <_ZL12MX_TIM4_Initv+0xb4>)
 8002012:	f005 fa8d 	bl	8007530 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8002026:	f000 ff7b 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200001c8 	.word	0x200001c8
 8002038:	40000800 	.word	0x40000800

0800203c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <_ZL19MX_USART2_UART_Initv+0x5c>)
 800204a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002060:	220c      	movs	r2, #12
 8002062:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002072:	f005 fb1e 	bl	80076b2 <HAL_UART_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8002086:	f000 ff4b 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000210 	.word	0x20000210
 8002094:	40004400 	.word	0x40004400
 8002098:	000f4240 	.word	0x000f4240

0800209c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a37      	ldr	r2, [pc, #220]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b35      	ldr	r3, [pc, #212]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c8:	4b32      	ldr	r3, [pc, #200]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a31      	ldr	r2, [pc, #196]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b29      	ldr	r3, [pc, #164]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a25      	ldr	r2, [pc, #148]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <_ZL12MX_GPIO_Initv+0xf8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002116:	4820      	ldr	r0, [pc, #128]	; (8002198 <_ZL12MX_GPIO_Initv+0xfc>)
 8002118:	f001 fea4 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	2102      	movs	r1, #2
 8002120:	481e      	ldr	r0, [pc, #120]	; (800219c <_ZL12MX_GPIO_Initv+0x100>)
 8002122:	f001 fe9f 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212c:	481c      	ldr	r0, [pc, #112]	; (80021a0 <_ZL12MX_GPIO_Initv+0x104>)
 800212e:	f001 fe99 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2302      	movs	r3, #2
 8002142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4619      	mov	r1, r3
 800214a:	4813      	ldr	r0, [pc, #76]	; (8002198 <_ZL12MX_GPIO_Initv+0xfc>)
 800214c:	f001 fd06 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002150:	2302      	movs	r3, #2
 8002152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2302      	movs	r3, #2
 800215e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4619      	mov	r1, r3
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <_ZL12MX_GPIO_Initv+0x100>)
 8002168:	f001 fcf8 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800216c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2302      	movs	r3, #2
 800217c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	4619      	mov	r1, r3
 8002184:	4806      	ldr	r0, [pc, #24]	; (80021a0 <_ZL12MX_GPIO_Initv+0x104>)
 8002186:	f001 fce9 	bl	8003b5c <HAL_GPIO_Init>

}
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	40011000 	.word	0x40011000
 800219c:	40010c00 	.word	0x40010c00
 80021a0:	40010800 	.word	0x40010800

080021a4 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80021aa:	2300      	movs	r3, #0
 80021ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 80021ae:	2305      	movs	r3, #5
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2301      	movs	r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	226b      	movs	r2, #107	; 0x6b
 80021be:	21d0      	movs	r1, #208	; 0xd0
 80021c0:	4811      	ldr	r0, [pc, #68]	; (8002208 <_Z14MPU6050_Baslatv+0x64>)
 80021c2:	f002 fb23 	bl	800480c <HAL_I2C_Mem_Write>
	config = 0x08;
 80021c6:	2308      	movs	r3, #8
 80021c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 80021ca:	2305      	movs	r3, #5
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2301      	movs	r3, #1
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	221b      	movs	r2, #27
 80021da:	21d0      	movs	r1, #208	; 0xd0
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <_Z14MPU6050_Baslatv+0x64>)
 80021de:	f002 fb15 	bl	800480c <HAL_I2C_Mem_Write>
	config = 0x10;
 80021e2:	2310      	movs	r3, #16
 80021e4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80021e6:	2305      	movs	r3, #5
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2301      	movs	r3, #1
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2301      	movs	r3, #1
 80021f4:	221c      	movs	r2, #28
 80021f6:	21d0      	movs	r1, #208	; 0xd0
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <_Z14MPU6050_Baslatv+0x64>)
 80021fa:	f002 fb07 	bl	800480c <HAL_I2C_Mem_Write>
	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000009c 	.word	0x2000009c

0800220c <_Z9checkModei>:

void checkMode(int mod_ch) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1500) {
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f240 52db 	movw	r2, #1499	; 0x5db
 800221a:	4293      	cmp	r3, r2
 800221c:	dc0d      	bgt.n	800223a <_Z9checkModei+0x2e>

		  controller.mod = STABILIZE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <_Z9checkModei+0x40>)
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
		  controller.z0 = EKF.alt_gnd;
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <_Z9checkModei+0x44>)
 8002228:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <_Z9checkModei+0x40>)
 800222e:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
		  controller.p_alt.reset();
 8002232:	4808      	ldr	r0, [pc, #32]	; (8002254 <_Z9checkModei+0x48>)
 8002234:	f008 ff74 	bl	800b120 <_ZN3PID5resetEv>
		  controller.mod = ALT_HOLD;

		  //z0 = controller.p_alt.zi;

	  }
}
 8002238:	e003      	b.n	8002242 <_Z9checkModei+0x36>
		  controller.mod = ALT_HOLD;
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <_Z9checkModei+0x40>)
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000600 	.word	0x20000600
 8002250:	200003e8 	.word	0x200003e8
 8002254:	20000948 	.word	0x20000948

08002258 <_Z9Check_Armv>:

void Check_Arm() {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	if(!armed) {
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <_Z9Check_Armv+0xb4>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d04d      	beq.n	8002306 <_Z9Check_Armv+0xae>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <_Z9Check_Armv+0xb8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f240 424b 	movw	r2, #1099	; 0x44b
 8002272:	4293      	cmp	r3, r2
 8002274:	dc43      	bgt.n	80022fe <_Z9Check_Armv+0xa6>
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <_Z9Check_Armv+0xb8>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800227e:	4293      	cmp	r3, r2
 8002280:	dd3d      	ble.n	80022fe <_Z9Check_Armv+0xa6>
				if(!arm_start){
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <_Z9Check_Armv+0xbc>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8002290:	f001 fb28 	bl	80038e4 <HAL_GetTick>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <_Z9Check_Armv+0xc0>)
 800229a:	601a      	str	r2, [r3, #0]
					arm_start = true;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <_Z9Check_Armv+0xbc>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80022a2:	f001 fb1f 	bl	80038e4 <HAL_GetTick>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <_Z9Check_Armv+0xc0>)
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022b2:	4293      	cmp	r3, r2
 80022b4:	bf8c      	ite	hi
 80022b6:	2301      	movhi	r3, #1
 80022b8:	2300      	movls	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d022      	beq.n	8002306 <_Z9Check_Armv+0xae>
					controller.pid_roll.reset();
 80022c0:	4816      	ldr	r0, [pc, #88]	; (800231c <_Z9Check_Armv+0xc4>)
 80022c2:	f008 ff2d 	bl	800b120 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80022c6:	4816      	ldr	r0, [pc, #88]	; (8002320 <_Z9Check_Armv+0xc8>)
 80022c8:	f008 ff2a 	bl	800b120 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 80022cc:	4815      	ldr	r0, [pc, #84]	; (8002324 <_Z9Check_Armv+0xcc>)
 80022ce:	f008 ff27 	bl	800b120 <_ZN3PID5resetEv>
					armed = true;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <_Z9Check_Armv+0xb4>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022de:	4812      	ldr	r0, [pc, #72]	; (8002328 <_Z9Check_Armv+0xd0>)
 80022e0:	f001 fdc0 	bl	8003e64 <HAL_GPIO_WritePin>

					controller.pid_roll.angle0   = EKF.state.angles[0];
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <_Z9Check_Armv+0xd4>)
 80022e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80022ea:	4a11      	ldr	r2, [pc, #68]	; (8002330 <_Z9Check_Armv+0xd8>)
 80022ec:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
					controller.pid_pitch.angle0  = EKF.state.angles[1];
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <_Z9Check_Armv+0xd4>)
 80022f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <_Z9Check_Armv+0xd8>)
 80022f8:	f8c2 32ac 	str.w	r3, [r2, #684]	; 0x2ac
				if(HAL_GetTick() - arm_timer > 3000) {
 80022fc:	e003      	b.n	8002306 <_Z9Check_Armv+0xae>
				}

		}

		else {
			arm_start = false;
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <_Z9Check_Armv+0xbc>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8002304:	e7ff      	b.n	8002306 <_Z9Check_Armv+0xae>
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000a51 	.word	0x20000a51
 8002310:	20000a1c 	.word	0x20000a1c
 8002314:	20000a50 	.word	0x20000a50
 8002318:	20000a44 	.word	0x20000a44
 800231c:	20000780 	.word	0x20000780
 8002320:	20000818 	.word	0x20000818
 8002324:	200008b0 	.word	0x200008b0
 8002328:	40010800 	.word	0x40010800
 800232c:	200003e8 	.word	0x200003e8
 8002330:	20000600 	.word	0x20000600

08002334 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	if(armed) {
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <_Z12Check_Disarmv+0x84>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d038      	beq.n	80023b2 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <_Z12Check_Disarmv+0x88>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f240 424b 	movw	r2, #1099	; 0x44b
 8002348:	4293      	cmp	r3, r2
 800234a:	dc2e      	bgt.n	80023aa <_Z12Check_Disarmv+0x76>
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <_Z12Check_Disarmv+0x88>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f240 424b 	movw	r2, #1099	; 0x44b
 8002354:	4293      	cmp	r3, r2
 8002356:	dc28      	bgt.n	80023aa <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <_Z12Check_Disarmv+0x8c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8002366:	f001 fabd 	bl	80038e4 <HAL_GetTick>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_Z12Check_Disarmv+0x90>)
 8002370:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <_Z12Check_Disarmv+0x8c>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8002378:	f001 fab4 	bl	80038e4 <HAL_GetTick>
 800237c:	4603      	mov	r3, r0
 800237e:	4a11      	ldr	r2, [pc, #68]	; (80023c4 <_Z12Check_Disarmv+0x90>)
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002388:	4293      	cmp	r3, r2
 800238a:	bf8c      	ite	hi
 800238c:	2301      	movhi	r3, #1
 800238e:	2300      	movls	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <_Z12Check_Disarmv+0x7e>
					armed = false;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <_Z12Check_Disarmv+0x84>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800239c:	2200      	movs	r2, #0
 800239e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a2:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_Z12Check_Disarmv+0x94>)
 80023a4:	f001 fd5e 	bl	8003e64 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 80023a8:	e003      	b.n	80023b2 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <_Z12Check_Disarmv+0x8c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80023b0:	e7ff      	b.n	80023b2 <_Z12Check_Disarmv+0x7e>
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000a51 	.word	0x20000a51
 80023bc:	20000a1c 	.word	0x20000a1c
 80023c0:	20000a53 	.word	0x20000a53
 80023c4:	20000a48 	.word	0x20000a48
 80023c8:	40010800 	.word	0x40010800

080023cc <_Z9TelemPackv>:

void TelemPack() {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <_Z9TelemPackv+0x16c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a59      	ldr	r2, [pc, #356]	; (800253c <_Z9TelemPackv+0x170>)
 80023d6:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <_Z9TelemPackv+0x16c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a57      	ldr	r2, [pc, #348]	; (800253c <_Z9TelemPackv+0x170>)
 80023de:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <_Z9TelemPackv+0x16c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a55      	ldr	r2, [pc, #340]	; (800253c <_Z9TelemPackv+0x170>)
 80023e6:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 80023e8:	4b55      	ldr	r3, [pc, #340]	; (8002540 <_Z9TelemPackv+0x174>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b53      	ldr	r3, [pc, #332]	; (800253c <_Z9TelemPackv+0x170>)
 80023f0:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <_Z9TelemPackv+0x174>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b50      	ldr	r3, [pc, #320]	; (800253c <_Z9TelemPackv+0x170>)
 80023fa:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <_Z9TelemPackv+0x174>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b4e      	ldr	r3, [pc, #312]	; (800253c <_Z9TelemPackv+0x170>)
 8002404:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8002406:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <_Z9TelemPackv+0x174>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	b29a      	uxth	r2, r3
 800240c:	4b4b      	ldr	r3, [pc, #300]	; (800253c <_Z9TelemPackv+0x170>)
 800240e:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <_Z9TelemPackv+0x178>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a49      	ldr	r2, [pc, #292]	; (800253c <_Z9TelemPackv+0x170>)
 8002416:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <_Z9TelemPackv+0x178>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a47      	ldr	r2, [pc, #284]	; (800253c <_Z9TelemPackv+0x170>)
 800241e:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <_Z9TelemPackv+0x178>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a45      	ldr	r2, [pc, #276]	; (800253c <_Z9TelemPackv+0x170>)
 8002426:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 8002428:	4b43      	ldr	r3, [pc, #268]	; (8002538 <_Z9TelemPackv+0x16c>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a43      	ldr	r2, [pc, #268]	; (800253c <_Z9TelemPackv+0x170>)
 800242e:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8002430:	4b41      	ldr	r3, [pc, #260]	; (8002538 <_Z9TelemPackv+0x16c>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a41      	ldr	r2, [pc, #260]	; (800253c <_Z9TelemPackv+0x170>)
 8002436:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 8002438:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <_Z9TelemPackv+0x16c>)
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	4a3f      	ldr	r2, [pc, #252]	; (800253c <_Z9TelemPackv+0x170>)
 800243e:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <_Z9TelemPackv+0x178>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a3d      	ldr	r2, [pc, #244]	; (800253c <_Z9TelemPackv+0x170>)
 8002446:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8002448:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <_Z9TelemPackv+0x178>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4a3b      	ldr	r2, [pc, #236]	; (800253c <_Z9TelemPackv+0x170>)
 800244e:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <_Z9TelemPackv+0x17c>)
 8002452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002456:	4a39      	ldr	r2, [pc, #228]	; (800253c <_Z9TelemPackv+0x170>)
 8002458:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <_Z9TelemPackv+0x17c>)
 800245c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002460:	4a36      	ldr	r2, [pc, #216]	; (800253c <_Z9TelemPackv+0x170>)
 8002462:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = gyroX;
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <_Z9TelemPackv+0x180>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a34      	ldr	r2, [pc, #208]	; (800253c <_Z9TelemPackv+0x170>)
 800246a:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = gyroY;
 800246c:	4b38      	ldr	r3, [pc, #224]	; (8002550 <_Z9TelemPackv+0x184>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a32      	ldr	r2, [pc, #200]	; (800253c <_Z9TelemPackv+0x170>)
 8002472:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_comp;
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <_Z9TelemPackv+0x17c>)
 8002476:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800247a:	4a30      	ldr	r2, [pc, #192]	; (800253c <_Z9TelemPackv+0x170>)
 800247c:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <_Z9TelemPackv+0x17c>)
 8002480:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002484:	4a2d      	ldr	r2, [pc, #180]	; (800253c <_Z9TelemPackv+0x170>)
 8002486:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <_Z9TelemPackv+0x17c>)
 800248a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800248e:	4a2b      	ldr	r2, [pc, #172]	; (800253c <_Z9TelemPackv+0x170>)
 8002490:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <_Z9TelemPackv+0x17c>)
 8002494:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <_Z9TelemPackv+0x170>)
 800249a:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <_Z9TelemPackv+0x188>)
 800249e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <_Z9TelemPackv+0x170>)
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <_Z9TelemPackv+0x188>)
 80024a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024ac:	4a23      	ldr	r2, [pc, #140]	; (800253c <_Z9TelemPackv+0x170>)
 80024ae:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <_Z9TelemPackv+0x188>)
 80024b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024b6:	4a21      	ldr	r2, [pc, #132]	; (800253c <_Z9TelemPackv+0x170>)
 80024b8:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <_Z9TelemPackv+0x188>)
 80024bc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <_Z9TelemPackv+0x170>)
 80024c2:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <_Z9TelemPackv+0x188>)
 80024c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <_Z9TelemPackv+0x170>)
 80024cc:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <_Z9TelemPackv+0x188>)
 80024d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80024d4:	4a19      	ldr	r2, [pc, #100]	; (800253c <_Z9TelemPackv+0x170>)
 80024d6:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <_Z9TelemPackv+0x188>)
 80024da:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <_Z9TelemPackv+0x170>)
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <_Z9TelemPackv+0x188>)
 80024e4:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <_Z9TelemPackv+0x170>)
 80024ea:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <_Z9TelemPackv+0x17c>)
 80024ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <_Z9TelemPackv+0x170>)
 80024f4:	67d3      	str	r3, [r2, #124]	; 0x7c
	  telem_pack.sonar_vel = EKF.vz;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <_Z9TelemPackv+0x17c>)
 80024f8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <_Z9TelemPackv+0x170>)
 80024fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.baro_alt = EKF.alt_gnd;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <_Z9TelemPackv+0x17c>)
 8002504:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002508:	4a0c      	ldr	r2, [pc, #48]	; (800253c <_Z9TelemPackv+0x170>)
 800250a:	6793      	str	r3, [r2, #120]	; 0x78

	  telem_pack.alt_thr = controller.alt_thr;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <_Z9TelemPackv+0x188>)
 800250e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <_Z9TelemPackv+0x170>)
 8002514:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	  telem_pack.time_millis = HAL_GetTick();
 8002518:	f001 f9e4 	bl	80038e4 <HAL_GetTick>
 800251c:	4603      	mov	r3, r0
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <_Z9TelemPackv+0x170>)
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8002524:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <_Z9TelemPackv+0x18c>)
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <_Z9TelemPackv+0x170>)
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	238c      	movs	r3, #140	; 0x8c
 800252e:	461a      	mov	r2, r3
 8002530:	f00a ffa8 	bl	800d484 <memcpy>
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200002a8 	.word	0x200002a8
 800253c:	200002cc 	.word	0x200002cc
 8002540:	200009e8 	.word	0x200009e8
 8002544:	20000284 	.word	0x20000284
 8002548:	200003e8 	.word	0x200003e8
 800254c:	20000250 	.word	0x20000250
 8002550:	20000254 	.word	0x20000254
 8002554:	20000600 	.word	0x20000600
 8002558:	20000358 	.word	0x20000358

0800255c <_Z9SendTelemv>:

void SendTelem() {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
	  TelemPack();
 8002562:	f7ff ff33 	bl	80023cc <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 8002566:	2364      	movs	r3, #100	; 0x64
 8002568:	228c      	movs	r2, #140	; 0x8c
 800256a:	490e      	ldr	r1, [pc, #56]	; (80025a4 <_Z9SendTelemv+0x48>)
 800256c:	480e      	ldr	r0, [pc, #56]	; (80025a8 <_Z9SendTelemv+0x4c>)
 800256e:	f005 f8ed 	bl	800774c <HAL_UART_Transmit>
	  char end_char = '@';
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8002576:	1df9      	adds	r1, r7, #7
 8002578:	2364      	movs	r3, #100	; 0x64
 800257a:	2201      	movs	r2, #1
 800257c:	480a      	ldr	r0, [pc, #40]	; (80025a8 <_Z9SendTelemv+0x4c>)
 800257e:	f005 f8e5 	bl	800774c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8002582:	1df9      	adds	r1, r7, #7
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	2201      	movs	r2, #1
 8002588:	4807      	ldr	r0, [pc, #28]	; (80025a8 <_Z9SendTelemv+0x4c>)
 800258a:	f005 f8df 	bl	800774c <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 800258e:	f001 f9a9 	bl	80038e4 <HAL_GetTick>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <_Z9SendTelemv+0x50>)
 8002598:	601a      	str	r2, [r3, #0]


}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000358 	.word	0x20000358
 80025a8:	20000210 	.word	0x20000210
 80025ac:	20000a4c 	.word	0x20000a4c

080025b0 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af04      	add	r7, sp, #16
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	2302      	movs	r3, #2
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	21d1      	movs	r1, #209	; 0xd1
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <_Z7GyroOkuh+0x40>)
 80025d2:	f002 fa15 	bl	8004a00 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 80025d6:	7b3b      	ldrb	r3, [r7, #12]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	b21a      	sxth	r2, r3
 80025dc:	7b7b      	ldrb	r3, [r7, #13]
 80025de:	b21b      	sxth	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	81fb      	strh	r3, [r7, #14]
	return gyro;
 80025e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	2000009c 	.word	0x2000009c

080025f4 <_Z6PWMYazv>:




void PWMYaz() {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	  if(armed) {
 80025f8:	4b25      	ldr	r3, [pc, #148]	; (8002690 <_Z6PWMYazv+0x9c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d045      	beq.n	800268c <_Z6PWMYazv+0x98>

		  if(!motor_start) {
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <_Z6PWMYazv+0xa0>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <_Z6PWMYazv+0x24>
		  	  MotorBaslat();
 800260e:	f000 f877 	bl	8002700 <_Z11MotorBaslatv>
		  	  motor_start = true;
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <_Z6PWMYazv+0xa0>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
		  }

		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > 1050) {
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <_Z6PWMYazv+0xa4>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f240 52db 	movw	r2, #1499	; 0x5db
 8002620:	4293      	cmp	r3, r2
 8002622:	dc1b      	bgt.n	800265c <_Z6PWMYazv+0x68>
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <_Z6PWMYazv+0xa4>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f240 421a 	movw	r2, #1050	; 0x41a
 800262c:	4293      	cmp	r3, r2
 800262e:	dd15      	ble.n	800265c <_Z6PWMYazv+0x68>


			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <_Z6PWMYazv+0xa8>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <_Z6PWMYazv+0xac>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <_Z6PWMYazv+0xa8>)
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <_Z6PWMYazv+0xac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <_Z6PWMYazv+0xa8>)
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <_Z6PWMYazv+0xac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <_Z6PWMYazv+0xa8>)
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <_Z6PWMYazv+0xac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
 8002658:	bf00      	nop
		  }
	  }



}
 800265a:	e017      	b.n	800268c <_Z6PWMYazv+0x98>
		  else if(motor_start) {
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <_Z6PWMYazv+0xa0>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <_Z6PWMYazv+0x98>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <_Z6PWMYazv+0xac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <_Z6PWMYazv+0xac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <_Z6PWMYazv+0xac>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_Z6PWMYazv+0xac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000a51 	.word	0x20000a51
 8002694:	20000a52 	.word	0x20000a52
 8002698:	20000a1c 	.word	0x20000a1c
 800269c:	200009e8 	.word	0x200009e8
 80026a0:	200000f0 	.word	0x200000f0

080026a4 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80026be:	da12      	bge.n	80026e6 <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff74 	bl	80025b0 <_Z7GyroOkuh>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fade 	bl	8000c8c <__aeabi_i2f>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4619      	mov	r1, r3
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7fe fa25 	bl	8000b24 <__addsf3>
 80026da:	4603      	mov	r3, r0
 80026dc:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3301      	adds	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	e7e8      	b.n	80026b8 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80026e6:	4905      	ldr	r1, [pc, #20]	; (80026fc <_Z7GyroErrh+0x58>)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7fe fbd7 	bl	8000e9c <__aeabi_fdiv>
 80026ee:	4603      	mov	r3, r0
 80026f0:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	44fa0000 	.word	0x44fa0000

08002700 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <_Z11MotorBaslatv+0x38>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800270c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <_Z11MotorBaslatv+0x38>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <_Z11MotorBaslatv+0x38>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002720:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <_Z11MotorBaslatv+0x38>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 800272c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002730:	f001 f8e2 	bl	80038f8 <HAL_Delay>
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200000f0 	.word	0x200000f0
 800273c:	00000000 	.word	0x00000000

08002740 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8002740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002742:	b097      	sub	sp, #92	; 0x5c
 8002744:	af0c      	add	r7, sp, #48	; 0x30
 8002746:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a85      	ldr	r2, [pc, #532]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800274c:	4293      	cmp	r3, r2
 800274e:	f040 8328 	bne.w	8002da2 <HAL_TIM_PeriodElapsedCallback+0x662>
		//1.25 ms || 800 Hz


		set_ucounter(SONAR_CLOCK_RATE);
 8002752:	2050      	movs	r0, #80	; 0x50
 8002754:	f7ff f86a 	bl	800182c <set_ucounter>
		set_b_counter(12);
 8002758:	200c      	movs	r0, #12
 800275a:	f7ff f813 	bl	8001784 <set_b_counter>

		controller_counter++;
 800275e:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	4b7f      	ldr	r3, [pc, #508]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002768:	801a      	strh	r2, [r3, #0]

		if(get_ucounter() == 1) {
 800276a:	f7ff f879 	bl	8001860 <get_ucounter>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_TIM_PeriodElapsedCallback+0x44>
			request_range();
 800277e:	f7ff f81b 	bl	80017b8 <request_range>
 8002782:	e0c0      	b.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x1c6>
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8002784:	f7ff f86c 	bl	8001860 <get_ucounter>
 8002788:	4603      	mov	r3, r0
 800278a:	2b50      	cmp	r3, #80	; 0x50
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80b6 	beq.w	8002906 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		  sonar_range = getRange();
 800279a:	f7ff f827 	bl	80017ec <getRange>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b71      	ldr	r3, [pc, #452]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80027a4:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a71      	ldr	r2, [pc, #452]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80027ac:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 80027ae:	4b71      	ldr	r3, [pc, #452]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a71      	ldr	r2, [pc, #452]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80027b4:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 80027b6:	4b71      	ldr	r3, [pc, #452]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4971      	ldr	r1, [pc, #452]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fab9 	bl	8000d34 <__aeabi_fmul>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff f855 	bl	8001874 <_ZSt3absf>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 80027cc:	4b6b      	ldr	r3, [pc, #428]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	496b      	ldr	r1, [pc, #428]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe faae 	bl	8000d34 <__aeabi_fmul>
 80027d8:	4603      	mov	r3, r0
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f84a 	bl	8001874 <_ZSt3absf>
 80027e0:	6238      	str	r0, [r7, #32]
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fa4c 	bl	8000c84 <__aeabi_ui2f>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe12 	bl	8000418 <__aeabi_f2d>
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	4b62      	ldr	r3, [pc, #392]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80027fa:	f7fd ff8f 	bl	800071c <__aeabi_ddiv>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
 8002806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002808:	f7ff f84c 	bl	80018a4 <_ZSt3cosf>
 800280c:	4603      	mov	r3, r0
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe02 	bl	8000418 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	f7fd fe54 	bl	80004c8 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4614      	mov	r4, r2
 8002826:	461d      	mov	r5, r3
 8002828:	6a38      	ldr	r0, [r7, #32]
 800282a:	f7ff f83b 	bl	80018a4 <_ZSt3cosf>
 800282e:	4603      	mov	r3, r0
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fdf1 	bl	8000418 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fd fe43 	bl	80004c8 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f7fe f915 	bl	8000a78 <__aeabi_d2f>
 800284e:	4603      	mov	r3, r0
 8002850:	4a46      	ldr	r2, [pc, #280]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002852:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8002854:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8002858:	61fb      	str	r3, [r7, #28]
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a44      	ldr	r2, [pc, #272]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe f95b 	bl	8000b20 <__aeabi_fsub>
 800286a:	4603      	mov	r3, r0
 800286c:	69f9      	ldr	r1, [r7, #28]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fb14 	bl	8000e9c <__aeabi_fdiv>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800287a:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 800287c:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fff7 	bl	8001874 <_ZSt3absf>
 8002886:	4603      	mov	r3, r0
 8002888:	2201      	movs	r2, #1
 800288a:	4614      	mov	r4, r2
 800288c:	493e      	ldr	r1, [pc, #248]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fc0c 	bl	80010ac <__aeabi_fcmpgt>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_TIM_PeriodElapsedCallback+0x15e>
 800289a:	2300      	movs	r3, #0
 800289c:	461c      	mov	r4, r3
 800289e:	b2e3      	uxtb	r3, r4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0x174>
			  sonar_alt = sonar_alt_;
 80028a4:	4b32      	ldr	r3, [pc, #200]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a30      	ldr	r2, [pc, #192]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80028aa:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 80028ac:	4b32      	ldr	r3, [pc, #200]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80028b2:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fbf6 	bl	80010ac <__aeabi_fcmpgt>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fda4 	bl	8000418 <__aeabi_f2d>
 80028d0:	a321      	add	r3, pc, #132	; (adr r3, 8002958 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fe f869 	bl	80009ac <__aeabi_dcmplt>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
			  EKF.Qs = 9e9;
 80028e0:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80028e2:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80028e4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			  EKF.salt = 50;
 80028e8:	4b29      	ldr	r3, [pc, #164]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80028ea:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80028ec:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 80028f0:	e009      	b.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		  }

		  else {
			  EKF.Qs = 0.25;
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80028f4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80028f8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			  EKF.salt = 1;
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80028fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002902:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		  }

		}

		if(get_b_counter() == 1) {
 8002906:	f7fe ff33 	bl	8001770 <get_b_counter>
 800290a:	4603      	mov	r3, r0
 800290c:	2b01      	cmp	r3, #1
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			write_ut();
 800291a:	f7fe fd29 	bl	8001370 <write_ut>
 800291e:	e06d      	b.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x2bc>
		}

		else if(get_b_counter() == 5) { //5 ms
 8002920:	f7fe ff26 	bl	8001770 <get_b_counter>
 8002924:	4603      	mov	r3, r0
 8002926:	2b05      	cmp	r3, #5
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d035      	beq.n	80029a0 <HAL_TIM_PeriodElapsedCallback+0x260>
			bmp.uncomp.temp = read_ut ();
 8002934:	f7fe fd34 	bl	80013a0 <read_ut>
 8002938:	4603      	mov	r3, r0
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f9a6 	bl	8000c8c <__aeabi_i2f>
 8002940:	4603      	mov	r3, r0
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002944:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8002946:	4815      	ldr	r0, [pc, #84]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002948:	f7fe fd44 	bl	80013d4 <get_temp>
 800294c:	4603      	mov	r3, r0
 800294e:	4a13      	ldr	r2, [pc, #76]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002950:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 8002952:	f7fe fd97 	bl	8001484 <write_up>
 8002956:	e051      	b.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002958:	33333333 	.word	0x33333333
 800295c:	3fd33333 	.word	0x3fd33333
 8002960:	20000138 	.word	0x20000138
 8002964:	20000a78 	.word	0x20000a78
 8002968:	20000a74 	.word	0x20000a74
 800296c:	20000a64 	.word	0x20000a64
 8002970:	20000a68 	.word	0x20000a68
 8002974:	20000a6c 	.word	0x20000a6c
 8002978:	20000a70 	.word	0x20000a70
 800297c:	200002a8 	.word	0x200002a8
 8002980:	3c8e8a72 	.word	0x3c8e8a72
 8002984:	40590000 	.word	0x40590000
 8002988:	40e00000 	.word	0x40e00000
 800298c:	40c00000 	.word	0x40c00000
 8002990:	200003e8 	.word	0x200003e8
 8002994:	50061c46 	.word	0x50061c46
 8002998:	42480000 	.word	0x42480000
 800299c:	20000a7c 	.word	0x20000a7c
		}

		else if(get_b_counter() == 12) { //
 80029a0:	f7fe fee6 	bl	8001770 <get_b_counter>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x2bc>
			bmp.uncomp.press = read_up (bmp.oss);
 80029b4:	4ba8      	ldr	r3, [pc, #672]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029b8:	f7fe fd84 	bl	80014c4 <read_up>
 80029bc:	4603      	mov	r3, r0
 80029be:	4aa6      	ldr	r2, [pc, #664]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029c0:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 80029c2:	4ea5      	ldr	r6, [pc, #660]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029c4:	466d      	mov	r5, sp
 80029c6:	f106 0410 	add.w	r4, r6, #16
 80029ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80029d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80029da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029de:	f7fe fd9f 	bl	8001520 <get_pressure>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4a9c      	ldr	r2, [pc, #624]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029e6:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 80029e8:	489b      	ldr	r0, [pc, #620]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029ea:	f7fe fe65 	bl	80016b8 <get_altitude>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4a99      	ldr	r2, [pc, #612]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029f2:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 80029f4:	4b98      	ldr	r3, [pc, #608]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	4a98      	ldr	r2, [pc, #608]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80029fa:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 80029fc:	4b98      	ldr	r3, [pc, #608]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f040 81ce 	bne.w	8002da2 <HAL_TIM_PeriodElapsedCallback+0x662>

		  controller_counter = 0;
 8002a06:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	801a      	strh	r2, [r3, #0]



		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/65.5 ;
 8002a0c:	2043      	movs	r0, #67	; 0x43
 8002a0e:	f7ff fdcf 	bl	80025b0 <_Z7GyroOkuh>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe f939 	bl	8000c8c <__aeabi_i2f>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	4b91      	ldr	r3, [pc, #580]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f7fe f87c 	bl	8000b20 <__aeabi_fsub>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	498f      	ldr	r1, [pc, #572]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fa35 	bl	8000e9c <__aeabi_fdiv>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b8d      	ldr	r3, [pc, #564]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002a38:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/65.5 ;
 8002a3a:	2045      	movs	r0, #69	; 0x45
 8002a3c:	f7ff fdb8 	bl	80025b0 <_Z7GyroOkuh>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f922 	bl	8000c8c <__aeabi_i2f>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fe f865 	bl	8000b20 <__aeabi_fsub>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4983      	ldr	r1, [pc, #524]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fa1e 	bl	8000e9c <__aeabi_fdiv>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b83      	ldr	r3, [pc, #524]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002a66:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/65.5 ;
 8002a68:	2047      	movs	r0, #71	; 0x47
 8002a6a:	f7ff fda1 	bl	80025b0 <_Z7GyroOkuh>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f90b 	bl	8000c8c <__aeabi_i2f>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f7fe f84e 	bl	8000b20 <__aeabi_fsub>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4978      	ldr	r1, [pc, #480]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fa07 	bl	8000e9c <__aeabi_fdiv>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002a94:	601a      	str	r2, [r3, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8002a96:	4b75      	ldr	r3, [pc, #468]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a79      	ldr	r2, [pc, #484]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002a9c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		  EKF.gyro[1] = -1*gyroY;
 8002aa0:	4b74      	ldr	r3, [pc, #464]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002aa8:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002aaa:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
		  EKF.gyro[2] = gyroZ;
 8002aae:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a73      	ldr	r2, [pc, #460]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002ab4:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8002ab8:	203b      	movs	r0, #59	; 0x3b
 8002aba:	f7ff fd79 	bl	80025b0 <_Z7GyroOkuh>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe f8e3 	bl	8000c8c <__aeabi_i2f>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002aca:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8002acc:	203d      	movs	r0, #61	; 0x3d
 8002ace:	f7ff fd6f 	bl	80025b0 <_Z7GyroOkuh>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe f8d9 	bl	8000c8c <__aeabi_i2f>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002ade:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8002ae0:	203f      	movs	r0, #63	; 0x3f
 8002ae2:	f7ff fd65 	bl	80025b0 <_Z7GyroOkuh>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f8cf 	bl	8000c8c <__aeabi_i2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002af2:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8002af4:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002afa:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
		  EKF.acc[1] = accY;// - AccYh;
 8002afe:	4b62      	ldr	r3, [pc, #392]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b04:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		  EKF.acc[2] = accZ;// - AccZh;
 8002b08:	4b60      	ldr	r3, [pc, #384]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5c      	ldr	r2, [pc, #368]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b0e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8002b12:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe f909 	bl	8000d34 <__aeabi_fmul>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461c      	mov	r4, r3
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a57      	ldr	r2, [pc, #348]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f8ff 	bl	8000d34 <__aeabi_fmul>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fd fff2 	bl	8000b24 <__addsf3>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461c      	mov	r4, r3
 8002b44:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f8f0 	bl	8000d34 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4619      	mov	r1, r3
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7fd ffe3 	bl	8000b24 <__addsf3>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe feab 	bl	80018bc <_ZSt4sqrtf>
 8002b66:	61b8      	str	r0, [r7, #24]
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8002b68:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69b9      	ldr	r1, [r7, #24]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f994 	bl	8000e9c <__aeabi_fdiv>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fe88 	bl	800188c <_ZSt4asinf>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fc4a 	bl	8000418 <__aeabi_f2d>
 8002b84:	a330      	add	r3, pc, #192	; (adr r3, 8002c48 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fc9d 	bl	80004c8 <__aeabi_dmul>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7fd ff6f 	bl	8000a78 <__aeabi_d2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002b9e:	6013      	str	r3, [r2, #0]

		  EKF.acc_vert = (accZ - AccZh) / 4096 * 9.81;
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3b      	ldr	r2, [pc, #236]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd ffb8 	bl	8000b20 <__aeabi_fsub>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f970 	bl	8000e9c <__aeabi_fdiv>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc2a 	bl	8000418 <__aeabi_f2d>
 8002bc4:	a322      	add	r3, pc, #136	; (adr r3, 8002c50 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fc7d 	bl	80004c8 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd ff4f 	bl	8000a78 <__aeabi_d2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002bde:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
		  EKF.sonar_alt = sonar_alt;
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002be8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		  EKF.baro_alt = baro_alt;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002bf2:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

		  EKF.Run();
 8002bf6:	4822      	ldr	r0, [pc, #136]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002bf8:	f005 fe02 	bl	8008800 <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 8002bfc:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002bfe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002c02:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002c04:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002c08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002c0c:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002c0e:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002c12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c16:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002c18:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c20:	4a1e      	ldr	r2, [pc, #120]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002c22:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002c26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002c2c:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002c36:	6153      	str	r3, [r2, #20]


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fae5 	bl	800220c <_Z9checkModei>
 8002c42:	e02f      	b.n	8002ca4 <HAL_TIM_PeriodElapsedCallback+0x564>
 8002c44:	f3af 8000 	nop.w
 8002c48:	d4fdf3b6 	.word	0xd4fdf3b6
 8002c4c:	404ca978 	.word	0x404ca978
 8002c50:	51eb851f 	.word	0x51eb851f
 8002c54:	40239eb8 	.word	0x40239eb8
 8002c58:	20000a7c 	.word	0x20000a7c
 8002c5c:	20000a60 	.word	0x20000a60
 8002c60:	20000a78 	.word	0x20000a78
 8002c64:	20000268 	.word	0x20000268
 8002c68:	42830000 	.word	0x42830000
 8002c6c:	20000250 	.word	0x20000250
 8002c70:	2000026c 	.word	0x2000026c
 8002c74:	20000254 	.word	0x20000254
 8002c78:	20000270 	.word	0x20000270
 8002c7c:	20000258 	.word	0x20000258
 8002c80:	200003e8 	.word	0x200003e8
 8002c84:	2000025c 	.word	0x2000025c
 8002c88:	20000260 	.word	0x20000260
 8002c8c:	20000264 	.word	0x20000264
 8002c90:	20000280 	.word	0x20000280
 8002c94:	2000027c 	.word	0x2000027c
 8002c98:	20000a64 	.word	0x20000a64
 8002c9c:	200002a8 	.word	0x200002a8
 8002ca0:	20000a1c 	.word	0x20000a1c

			controller.z_vel = EKF.vz;
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8002ca6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002caa:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002cac:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
			//controller.z0 = z0;
			controller.z = EKF.alt_gnd;
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8002cb2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002cb6:	4a3e      	ldr	r2, [pc, #248]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002cb8:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170

		  controller.state = state;
 8002cbc:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002cbe:	4a3d      	ldr	r2, [pc, #244]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8002cc0:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8002cc4:	4615      	mov	r5, r2
 8002cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cce:	682b      	ldr	r3, [r5, #0]
 8002cd0:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002cd4:	4a38      	ldr	r2, [pc, #224]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002cd6:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8002cda:	4615      	mov	r5, r2
 8002cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8002ce8:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd ffcd 	bl	8000c8c <__aeabi_i2f>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a2e      	ldr	r2, [pc, #184]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002cf6:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174

		  controller_output_ang = controller.Run();
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	492c      	ldr	r1, [pc, #176]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 ff63 	bl	8007bcc <_ZN10Controller3RunEv>
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	482c      	ldr	r0, [pc, #176]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8002d0e:	f000 f95c 	bl	8002fca <_ZNSt6vectorIfSaIfEEaSEOS1_>
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f93c 	bl	8002f94 <_ZNSt6vectorIfSaIfEED1Ev>

		  controller_output[0] = controller.controller_output_pwm[0];
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d1e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8002d22:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d24:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d28:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d2e:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002d36:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d38:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d3c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002d40:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d42:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d46:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002d4a:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002d4c:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d50:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002d54:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002d56:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;

		  w_ang = controller.pd_roll;
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fb5a 	bl	8000418 <__aeabi_f2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4917      	ldr	r1, [pc, #92]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8002d6a:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8002d76:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8002d80:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8002d8a:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8002d94:	801a      	strh	r2, [r3, #0]


		  PWMYaz();
 8002d96:	f7ff fc2d 	bl	80025f4 <_Z6PWMYazv>


		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	480f      	ldr	r0, [pc, #60]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8002d9e:	f001 f879 	bl	8003e94 <HAL_GPIO_TogglePin>
		}
		}
	}
 8002da2:	bf00      	nop
 8002da4:	372c      	adds	r7, #44	; 0x2c
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200003e8 	.word	0x200003e8
 8002db0:	20000600 	.word	0x20000600
 8002db4:	200002a8 	.word	0x200002a8
 8002db8:	20000284 	.word	0x20000284
 8002dbc:	20000a1c 	.word	0x20000a1c
 8002dc0:	200009f8 	.word	0x200009f8
 8002dc4:	200009e8 	.word	0x200009e8
 8002dc8:	20000a58 	.word	0x20000a58
 8002dcc:	20000a04 	.word	0x20000a04
 8002dd0:	20000a06 	.word	0x20000a06
 8002dd4:	20000a08 	.word	0x20000a08
 8002dd8:	20000a0a 	.word	0x20000a0a
 8002ddc:	40010c00 	.word	0x40010c00

08002de0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d17f      	bne.n	8002ef0 <HAL_TIM_IC_CaptureCallback+0x110>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7f1b      	ldrb	r3, [r3, #28]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d17b      	bne.n	8002ef0 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002dfe:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8002e00:	2108      	movs	r1, #8
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f003 ff82 	bl	8006d0c <HAL_TIM_ReadCapturedValue>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002e0e:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8002e10:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002e1c:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0fdb      	lsrs	r3, r3, #31
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002e32:	33ff      	adds	r3, #255	; 0xff
 8002e34:	4a33      	ldr	r2, [pc, #204]	; (8002f04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002e36:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a31      	ldr	r2, [pc, #196]	; (8002f0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002e46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b21b      	sxth	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	bfcc      	ite	gt
 8002e60:	2301      	movgt	r3, #1
 8002e62:	2300      	movle	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8002e6a:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e70:	801a      	strh	r2, [r3, #0]
						sync = 1;
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4824      	ldr	r0, [pc, #144]	; (8002f14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002e82:	f008 f9eb 	bl	800b25c <_ZN3PID7pwm2angEt>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002e8a:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	481f      	ldr	r0, [pc, #124]	; (8002f14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002e96:	f008 f9e1 	bl	800b25c <_ZN3PID7pwm2angEt>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002e9e:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4818      	ldr	r0, [pc, #96]	; (8002f14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002eb2:	f008 fa10 	bl	800b2d6 <_ZN3PID8pwm2rateEt>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002eba:	6153      	str	r3, [r2, #20]

				i++;
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002ecc:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002ed8:	fb83 2301 	smull	r2, r3, r3, r1
 8002edc:	105a      	asrs	r2, r3, #1
 8002ede:	17cb      	asrs	r3, r1, #31
 8002ee0:	1ad2      	subs	r2, r2, r3
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	1aca      	subs	r2, r1, r3
 8002eea:	b212      	sxth	r2, r2
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002eee:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000180 	.word	0x20000180
 8002efc:	20000a0c 	.word	0x20000a0c
 8002f00:	20000a10 	.word	0x20000a10
 8002f04:	20000a14 	.word	0x20000a14
 8002f08:	20000a18 	.word	0x20000a18
 8002f0c:	20000a1c 	.word	0x20000a1c
 8002f10:	20000a40 	.word	0x20000a40
 8002f14:	20000568 	.word	0x20000568
 8002f18:	20000284 	.word	0x20000284
 8002f1c:	38e38e39 	.word	0x38e38e39

08002f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f24:	b672      	cpsid	i
}
 8002f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <Error_Handler+0x8>

08002f2a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f85e 	bl	8002ff4 <_ZNSaIfEC1Ev>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f866 	bl	800300c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_ZNSaIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f86d 	bl	8003032 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f862 	bl	8003046 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fca5 	bl	80018d4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002f94:	b5b0      	push	{r4, r5, r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681c      	ldr	r4, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f860 	bl	800306c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002fac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f000 f864 	bl	8003080 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ffd1 	bl	8002f62 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}

08002fca <_ZNSt6vectorIfSaIfEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002fd8:	6838      	ldr	r0, [r7, #0]
 8002fda:	f000 f85f 	bl	800309c <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f863 	bl	80030b0 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8002fea:	687b      	ldr	r3, [r7, #4]
      }
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd90      	pop	{r4, r7, pc}

08002ff4 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f895 	bl	800312c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
	{ }
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
	if (__p)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f86e 	bl	8003140 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f865 	bl	800315e <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f857 	bl	8003178 <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>
 80030ca:	f107 021c 	add.w	r2, r7, #28
 80030ce:	f107 0310 	add.w	r3, r7, #16
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f860 	bl	800319a <_ZNSt6vectorIfSaIfEEC1ERKS0_>
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff33 	bl	8002f4a <_ZNSaIfED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f864 	bl	80031b8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f85d 	bl	80031b8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ffb3 	bl	800306c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003106:	4604      	mov	r4, r0
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ffae 	bl	800306c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003110:	4603      	mov	r3, r0
 8003112:	4619      	mov	r1, r3
 8003114:	4620      	mov	r0, r4
 8003116:	f000 f86d 	bl	80031f4 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>
	vector __tmp(get_allocator());
 800311a:	f107 0310 	add.w	r3, r7, #16
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff38 	bl	8002f94 <_ZNSt6vectorIfSaIfEED1Ev>
      }
 8003124:	bf00      	nop
 8003126:	3724      	adds	r7, #36	; 0x24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd90      	pop	{r4, r7, pc}

0800312c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f85d 	bl	8003210 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f85d 	bl	800322a <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	f000 f85b 	bl	800323e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003188:	4603      	mov	r3, r0
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f860 	bl	8003252 <_ZNSaIfEC1ERKS_>
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_ZNSt6vectorIfSaIfEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f860 	bl	800326e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff20 	bl	800300c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f85a 	bl	800328c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 80031d8:	6839      	ldr	r1, [r7, #0]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f856 	bl	800328c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	4619      	mov	r1, r3
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	f000 f850 	bl	800328c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 80031ec:	bf00      	nop
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 80031fe:	461a      	mov	r2, r3
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f858 	bl	80032b8 <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800321c:	68b8      	ldr	r0, [r7, #8]
 800321e:	f008 f98c 	bl	800b53a <_ZdlPv>
      }
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800325c:	6839      	ldr	r1, [r7, #0]
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f837 	bl	80032d2 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f833 	bl	80032e8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	609a      	str	r2, [r3, #8]
	}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f000 f821 	bl	800330c <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80032f2:	6839      	ldr	r1, [r7, #0]
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffac 	bl	8003252 <_ZNSaIfEC1ERKS_>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fe85 	bl	800300c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d110      	bne.n	8003352 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003336:	4293      	cmp	r3, r2
 8003338:	d10b      	bne.n	8003352 <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 800333a:	4812      	ldr	r0, [pc, #72]	; (8003384 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800333c:	f005 f9c4 	bl	80086c8 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 8003340:	4811      	ldr	r0, [pc, #68]	; (8003388 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003342:	f007 fc85 	bl	800ac50 <_ZN3PIDC1Ev>
Controller controller;
 8003346:	4811      	ldr	r0, [pc, #68]	; (800338c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003348:	f004 fb6a 	bl	8007a20 <_ZN10ControllerC1Ev>
std::vector<float> controller_output_ang;
 800334c:	4810      	ldr	r0, [pc, #64]	; (8003390 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800334e:	f7fe fada 	bl	8001906 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d110      	bne.n	800337a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335e:	4293      	cmp	r3, r2
 8003360:	d10b      	bne.n	800337a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8003362:	480b      	ldr	r0, [pc, #44]	; (8003390 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003364:	f7ff fe16 	bl	8002f94 <_ZNSt6vectorIfSaIfEED1Ev>
Controller controller;
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800336a:	f004 ff59 	bl	8008220 <_ZN10ControllerD1Ev>
PID pid;
 800336e:	4806      	ldr	r0, [pc, #24]	; (8003388 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003370:	f008 f85a 	bl	800b428 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 8003374:	4803      	ldr	r0, [pc, #12]	; (8003384 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003376:	f007 fc59 	bl	800ac2c <_ZN15Kalman_FiltresiD1Ev>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200003e8 	.word	0x200003e8
 8003388:	20000568 	.word	0x20000568
 800338c:	20000600 	.word	0x20000600
 8003390:	200009f8 	.word	0x200009f8

08003394 <_GLOBAL__sub_I_hi2c1>:
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
 8003398:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800339c:	2001      	movs	r0, #1
 800339e:	f7ff ffbf 	bl	8003320 <_Z41__static_initialization_and_destruction_0ii>
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_GLOBAL__sub_D_hi2c1>:
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7ff ffb7 	bl	8003320 <_Z41__static_initialization_and_destruction_0ii>
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_MspInit+0x5c>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	4a14      	ldr	r2, [pc, #80]	; (8003410 <HAL_MspInit+0x5c>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6193      	str	r3, [r2, #24]
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_MspInit+0x5c>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_MspInit+0x5c>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <HAL_MspInit+0x5c>)
 80033d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033dc:	61d3      	str	r3, [r2, #28]
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <HAL_MspInit+0x5c>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_MspInit+0x60>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <HAL_MspInit+0x60>)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40021000 	.word	0x40021000
 8003414:	40010000 	.word	0x40010000

08003418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 0310 	add.w	r3, r7, #16
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a15      	ldr	r2, [pc, #84]	; (8003488 <HAL_I2C_MspInit+0x70>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d123      	bne.n	8003480 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_I2C_MspInit+0x74>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <HAL_I2C_MspInit+0x74>)
 800343e:	f043 0308 	orr.w	r3, r3, #8
 8003442:	6193      	str	r3, [r2, #24]
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_I2C_MspInit+0x74>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003450:	23c0      	movs	r3, #192	; 0xc0
 8003452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003454:	2312      	movs	r3, #18
 8003456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4619      	mov	r1, r3
 8003462:	480b      	ldr	r0, [pc, #44]	; (8003490 <HAL_I2C_MspInit+0x78>)
 8003464:	f000 fb7a 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_I2C_MspInit+0x74>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_I2C_MspInit+0x74>)
 800346e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003472:	61d3      	str	r3, [r2, #28]
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_I2C_MspInit+0x74>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003480:	bf00      	nop
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40005400 	.word	0x40005400
 800348c:	40021000 	.word	0x40021000
 8003490:	40010c00 	.word	0x40010c00

08003494 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_TIM_PWM_MspInit+0x34>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10b      	bne.n	80034be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_TIM_PWM_MspInit+0x38>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <HAL_TIM_PWM_MspInit+0x38>)
 80034ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b0:	6193      	str	r3, [r2, #24]
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_TIM_PWM_MspInit+0x38>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40021000 	.word	0x40021000

080034d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d114      	bne.n	800351a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034f0:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	61d3      	str	r3, [r2, #28]
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003508:	2200      	movs	r2, #0
 800350a:	2101      	movs	r1, #1
 800350c:	201c      	movs	r0, #28
 800350e:	f000 faee 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003512:	201c      	movs	r0, #28
 8003514:	f000 fb07 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003518:	e042      	b.n	80035a0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a23      	ldr	r2, [pc, #140]	; (80035ac <HAL_TIM_Base_MspInit+0xdc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d12c      	bne.n	800357e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003524:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 800352a:	f043 0302 	orr.w	r3, r3, #2
 800352e:	61d3      	str	r3, [r2, #28]
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 8003542:	f043 0308 	orr.w	r3, r3, #8
 8003546:	6193      	str	r3, [r2, #24]
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003554:	2301      	movs	r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 0318 	add.w	r3, r7, #24
 8003564:	4619      	mov	r1, r3
 8003566:	4812      	ldr	r0, [pc, #72]	; (80035b0 <HAL_TIM_Base_MspInit+0xe0>)
 8003568:	f000 faf8 	bl	8003b5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800356c:	2200      	movs	r2, #0
 800356e:	2100      	movs	r1, #0
 8003570:	201d      	movs	r0, #29
 8003572:	f000 fabc 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003576:	201d      	movs	r0, #29
 8003578:	f000 fad5 	bl	8003b26 <HAL_NVIC_EnableIRQ>
}
 800357c:	e010      	b.n	80035a0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <HAL_TIM_Base_MspInit+0xe4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10b      	bne.n	80035a0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	61d3      	str	r3, [r2, #28]
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_TIM_Base_MspInit+0xd8>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
}
 80035a0:	bf00      	nop
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40010c00 	.word	0x40010c00
 80035b4:	40000800 	.word	0x40000800

080035b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <HAL_TIM_MspPostInit+0x5c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d118      	bne.n	800360a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_TIM_MspPostInit+0x60>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_TIM_MspPostInit+0x60>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <HAL_TIM_MspPostInit+0x60>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80035f0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80035f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2302      	movs	r3, #2
 80035fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 0310 	add.w	r3, r7, #16
 8003602:	4619      	mov	r1, r3
 8003604:	4805      	ldr	r0, [pc, #20]	; (800361c <HAL_TIM_MspPostInit+0x64>)
 8003606:	f000 faa9 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40021000 	.word	0x40021000
 800361c:	40010800 	.word	0x40010800

08003620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_UART_MspInit+0x88>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d12f      	bne.n	80036a0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_UART_MspInit+0x8c>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_UART_MspInit+0x8c>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	61d3      	str	r3, [r2, #28]
 800364c:	4b17      	ldr	r3, [pc, #92]	; (80036ac <HAL_UART_MspInit+0x8c>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_UART_MspInit+0x8c>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <HAL_UART_MspInit+0x8c>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6193      	str	r3, [r2, #24]
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_UART_MspInit+0x8c>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003670:	2304      	movs	r3, #4
 8003672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 0310 	add.w	r3, r7, #16
 8003680:	4619      	mov	r1, r3
 8003682:	480b      	ldr	r0, [pc, #44]	; (80036b0 <HAL_UART_MspInit+0x90>)
 8003684:	f000 fa6a 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003688:	2308      	movs	r3, #8
 800368a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	4619      	mov	r1, r3
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <HAL_UART_MspInit+0x90>)
 800369c:	f000 fa5e 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036a0:	bf00      	nop
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40004400 	.word	0x40004400
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40010800 	.word	0x40010800

080036b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036b8:	e7fe      	b.n	80036b8 <NMI_Handler+0x4>

080036ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036be:	e7fe      	b.n	80036be <HardFault_Handler+0x4>

080036c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <MemManage_Handler+0x4>

080036c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ca:	e7fe      	b.n	80036ca <BusFault_Handler+0x4>

080036cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <UsageFault_Handler+0x4>

080036d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036fa:	f000 f8e1 	bl	80038c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <TIM2_IRQHandler+0x10>)
 800370a:	f002 ffe1 	bl	80066d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000138 	.word	0x20000138

08003718 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <TIM3_IRQHandler+0x10>)
 800371e:	f002 ffd7 	bl	80066d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000180 	.word	0x20000180

0800372c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	return 1;
 8003730:	2301      	movs	r3, #1
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <_kill>:

int _kill(int pid, int sig)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003744:	f009 fe64 	bl	800d410 <__errno>
 8003748:	4603      	mov	r3, r0
 800374a:	2216      	movs	r2, #22
 800374c:	601a      	str	r2, [r3, #0]
	return -1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <_exit>:

void _exit (int status)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003762:	f04f 31ff 	mov.w	r1, #4294967295
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffe7 	bl	800373a <_kill>
	while (1) {}		/* Make sure we hang here */
 800376c:	e7fe      	b.n	800376c <_exit+0x12>
	...

08003770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <_sbrk+0x5c>)
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <_sbrk+0x60>)
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <_sbrk+0x64>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <_sbrk+0x64>)
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <_sbrk+0x68>)
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037a0:	f009 fe36 	bl	800d410 <__errno>
 80037a4:	4603      	mov	r3, r0
 80037a6:	220c      	movs	r2, #12
 80037a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e009      	b.n	80037c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <_sbrk+0x64>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <_sbrk+0x64>)
 80037c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20005000 	.word	0x20005000
 80037d0:	00000400 	.word	0x00000400
 80037d4:	20000ab8 	.word	0x20000ab8
 80037d8:	20000ae0 	.word	0x20000ae0

080037dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80037e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80037ea:	e003      	b.n	80037f4 <LoopCopyDataInit>

080037ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80037ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80037f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80037f2:	3104      	adds	r1, #4

080037f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80037f4:	480a      	ldr	r0, [pc, #40]	; (8003820 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80037f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80037fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80037fc:	d3f6      	bcc.n	80037ec <CopyDataInit>
  ldr r2, =_sbss
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003800:	e002      	b.n	8003808 <LoopFillZerobss>

08003802 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003802:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003804:	f842 3b04 	str.w	r3, [r2], #4

08003808 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800380a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800380c:	d3f9      	bcc.n	8003802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800380e:	f7ff ffe5 	bl	80037dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003812:	f009 fe03 	bl	800d41c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003816:	f7fe f883 	bl	8001920 <main>
  bx lr
 800381a:	4770      	bx	lr
  ldr r3, =_sidata
 800381c:	0800dbf8 	.word	0x0800dbf8
  ldr r0, =_sdata
 8003820:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003824:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003828:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800382c:	20000ae0 	.word	0x20000ae0

08003830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003830:	e7fe      	b.n	8003830 <ADC1_2_IRQHandler>
	...

08003834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_Init+0x28>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a07      	ldr	r2, [pc, #28]	; (800385c <HAL_Init+0x28>)
 800383e:	f043 0310 	orr.w	r3, r3, #16
 8003842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003844:	2003      	movs	r0, #3
 8003846:	f000 f947 	bl	8003ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800384a:	2000      	movs	r0, #0
 800384c:	f000 f808 	bl	8003860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003850:	f7ff fdb0 	bl	80033b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000

08003860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_InitTick+0x54>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_InitTick+0x58>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	4619      	mov	r1, r3
 8003872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003876:	fbb3 f3f1 	udiv	r3, r3, r1
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f95f 	bl	8003b42 <HAL_SYSTICK_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e00e      	b.n	80038ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b0f      	cmp	r3, #15
 8003892:	d80a      	bhi.n	80038aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003894:	2200      	movs	r2, #0
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	f000 f927 	bl	8003aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038a0:	4a06      	ldr	r2, [pc, #24]	; (80038bc <HAL_InitTick+0x5c>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000004 	.word	0x20000004
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	20000008 	.word	0x20000008

080038c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_IncTick+0x1c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_IncTick+0x20>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <HAL_IncTick+0x20>)
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	20000acc 	.word	0x20000acc

080038e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return uwTick;
 80038e8:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <HAL_GetTick+0x10>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	20000acc 	.word	0x20000acc

080038f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7ff fff0 	bl	80038e4 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d005      	beq.n	800391e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_Delay+0x44>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800391e:	bf00      	nop
 8003920:	f7ff ffe0 	bl	80038e4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d8f7      	bhi.n	8003920 <HAL_Delay+0x28>
  {
  }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c

08003940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800395c:	4013      	ands	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003972:	4a04      	ldr	r2, [pc, #16]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	60d3      	str	r3, [r2, #12]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__NVIC_GetPriorityGrouping+0x18>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0307 	and.w	r3, r3, #7
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	db0b      	blt.n	80039ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	f003 021f 	and.w	r2, r3, #31
 80039bc:	4906      	ldr	r1, [pc, #24]	; (80039d8 <__NVIC_EnableIRQ+0x34>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2001      	movs	r0, #1
 80039c6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa4:	d301      	bcc.n	8003aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00f      	b.n	8003aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <SysTick_Config+0x40>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	f7ff ff90 	bl	80039dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <SysTick_Config+0x40>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <SysTick_Config+0x40>)
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff2d 	bl	8003940 <__NVIC_SetPriorityGrouping>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b00:	f7ff ff42 	bl	8003988 <__NVIC_GetPriorityGrouping>
 8003b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	6978      	ldr	r0, [r7, #20]
 8003b0c:	f7ff ff90 	bl	8003a30 <NVIC_EncodePriority>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff5f 	bl	80039dc <__NVIC_SetPriority>
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff35 	bl	80039a4 <__NVIC_EnableIRQ>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ffa2 	bl	8003a94 <SysTick_Config>
 8003b50:	4603      	mov	r3, r0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b08b      	sub	sp, #44	; 0x2c
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6e:	e169      	b.n	8003e44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b70:	2201      	movs	r2, #1
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	f040 8158 	bne.w	8003e3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4a9a      	ldr	r2, [pc, #616]	; (8003dfc <HAL_GPIO_Init+0x2a0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d05e      	beq.n	8003c56 <HAL_GPIO_Init+0xfa>
 8003b98:	4a98      	ldr	r2, [pc, #608]	; (8003dfc <HAL_GPIO_Init+0x2a0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d875      	bhi.n	8003c8a <HAL_GPIO_Init+0x12e>
 8003b9e:	4a98      	ldr	r2, [pc, #608]	; (8003e00 <HAL_GPIO_Init+0x2a4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d058      	beq.n	8003c56 <HAL_GPIO_Init+0xfa>
 8003ba4:	4a96      	ldr	r2, [pc, #600]	; (8003e00 <HAL_GPIO_Init+0x2a4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d86f      	bhi.n	8003c8a <HAL_GPIO_Init+0x12e>
 8003baa:	4a96      	ldr	r2, [pc, #600]	; (8003e04 <HAL_GPIO_Init+0x2a8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d052      	beq.n	8003c56 <HAL_GPIO_Init+0xfa>
 8003bb0:	4a94      	ldr	r2, [pc, #592]	; (8003e04 <HAL_GPIO_Init+0x2a8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d869      	bhi.n	8003c8a <HAL_GPIO_Init+0x12e>
 8003bb6:	4a94      	ldr	r2, [pc, #592]	; (8003e08 <HAL_GPIO_Init+0x2ac>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04c      	beq.n	8003c56 <HAL_GPIO_Init+0xfa>
 8003bbc:	4a92      	ldr	r2, [pc, #584]	; (8003e08 <HAL_GPIO_Init+0x2ac>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d863      	bhi.n	8003c8a <HAL_GPIO_Init+0x12e>
 8003bc2:	4a92      	ldr	r2, [pc, #584]	; (8003e0c <HAL_GPIO_Init+0x2b0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d046      	beq.n	8003c56 <HAL_GPIO_Init+0xfa>
 8003bc8:	4a90      	ldr	r2, [pc, #576]	; (8003e0c <HAL_GPIO_Init+0x2b0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d85d      	bhi.n	8003c8a <HAL_GPIO_Init+0x12e>
 8003bce:	2b12      	cmp	r3, #18
 8003bd0:	d82a      	bhi.n	8003c28 <HAL_GPIO_Init+0xcc>
 8003bd2:	2b12      	cmp	r3, #18
 8003bd4:	d859      	bhi.n	8003c8a <HAL_GPIO_Init+0x12e>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <HAL_GPIO_Init+0x80>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c57 	.word	0x08003c57
 8003be0:	08003c31 	.word	0x08003c31
 8003be4:	08003c43 	.word	0x08003c43
 8003be8:	08003c85 	.word	0x08003c85
 8003bec:	08003c8b 	.word	0x08003c8b
 8003bf0:	08003c8b 	.word	0x08003c8b
 8003bf4:	08003c8b 	.word	0x08003c8b
 8003bf8:	08003c8b 	.word	0x08003c8b
 8003bfc:	08003c8b 	.word	0x08003c8b
 8003c00:	08003c8b 	.word	0x08003c8b
 8003c04:	08003c8b 	.word	0x08003c8b
 8003c08:	08003c8b 	.word	0x08003c8b
 8003c0c:	08003c8b 	.word	0x08003c8b
 8003c10:	08003c8b 	.word	0x08003c8b
 8003c14:	08003c8b 	.word	0x08003c8b
 8003c18:	08003c8b 	.word	0x08003c8b
 8003c1c:	08003c8b 	.word	0x08003c8b
 8003c20:	08003c39 	.word	0x08003c39
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	4a79      	ldr	r2, [pc, #484]	; (8003e10 <HAL_GPIO_Init+0x2b4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c2e:	e02c      	b.n	8003c8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	623b      	str	r3, [r7, #32]
          break;
 8003c36:	e029      	b.n	8003c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	623b      	str	r3, [r7, #32]
          break;
 8003c40:	e024      	b.n	8003c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	3308      	adds	r3, #8
 8003c48:	623b      	str	r3, [r7, #32]
          break;
 8003c4a:	e01f      	b.n	8003c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	330c      	adds	r3, #12
 8003c52:	623b      	str	r3, [r7, #32]
          break;
 8003c54:	e01a      	b.n	8003c8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c5e:	2304      	movs	r3, #4
 8003c60:	623b      	str	r3, [r7, #32]
          break;
 8003c62:	e013      	b.n	8003c8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	611a      	str	r2, [r3, #16]
          break;
 8003c76:	e009      	b.n	8003c8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c78:	2308      	movs	r3, #8
 8003c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	615a      	str	r2, [r3, #20]
          break;
 8003c82:	e003      	b.n	8003c8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
          break;
 8003c88:	e000      	b.n	8003c8c <HAL_GPIO_Init+0x130>
          break;
 8003c8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2bff      	cmp	r3, #255	; 0xff
 8003c90:	d801      	bhi.n	8003c96 <HAL_GPIO_Init+0x13a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	e001      	b.n	8003c9a <HAL_GPIO_Init+0x13e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2bff      	cmp	r3, #255	; 0xff
 8003ca0:	d802      	bhi.n	8003ca8 <HAL_GPIO_Init+0x14c>
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	e002      	b.n	8003cae <HAL_GPIO_Init+0x152>
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	3b08      	subs	r3, #8
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	210f      	movs	r1, #15
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	6a39      	ldr	r1, [r7, #32]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80b1 	beq.w	8003e3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <HAL_GPIO_Init+0x2b8>)
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <HAL_GPIO_Init+0x2b8>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6193      	str	r3, [r2, #24]
 8003ce8:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <HAL_GPIO_Init+0x2b8>)
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cf4:	4a48      	ldr	r2, [pc, #288]	; (8003e18 <HAL_GPIO_Init+0x2bc>)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a40      	ldr	r2, [pc, #256]	; (8003e1c <HAL_GPIO_Init+0x2c0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <HAL_GPIO_Init+0x1ec>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3f      	ldr	r2, [pc, #252]	; (8003e20 <HAL_GPIO_Init+0x2c4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00d      	beq.n	8003d44 <HAL_GPIO_Init+0x1e8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3e      	ldr	r2, [pc, #248]	; (8003e24 <HAL_GPIO_Init+0x2c8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <HAL_GPIO_Init+0x1e4>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3d      	ldr	r2, [pc, #244]	; (8003e28 <HAL_GPIO_Init+0x2cc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_GPIO_Init+0x1e0>
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e006      	b.n	8003d4a <HAL_GPIO_Init+0x1ee>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	e004      	b.n	8003d4a <HAL_GPIO_Init+0x1ee>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e002      	b.n	8003d4a <HAL_GPIO_Init+0x1ee>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_GPIO_Init+0x1ee>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	f002 0203 	and.w	r2, r2, #3
 8003d50:	0092      	lsls	r2, r2, #2
 8003d52:	4093      	lsls	r3, r2
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d5a:	492f      	ldr	r1, [pc, #188]	; (8003e18 <HAL_GPIO_Init+0x2bc>)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	3302      	adds	r3, #2
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d006      	beq.n	8003d82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d74:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	492c      	ldr	r1, [pc, #176]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e006      	b.n	8003d90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d82:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	4928      	ldr	r1, [pc, #160]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4922      	ldr	r1, [pc, #136]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
 8003da8:	e006      	b.n	8003db8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	491e      	ldr	r1, [pc, #120]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d006      	beq.n	8003dd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4918      	ldr	r1, [pc, #96]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
 8003dd0:	e006      	b.n	8003de0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	4914      	ldr	r1, [pc, #80]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d021      	beq.n	8003e30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60cb      	str	r3, [r1, #12]
 8003df8:	e021      	b.n	8003e3e <HAL_GPIO_Init+0x2e2>
 8003dfa:	bf00      	nop
 8003dfc:	10320000 	.word	0x10320000
 8003e00:	10310000 	.word	0x10310000
 8003e04:	10220000 	.word	0x10220000
 8003e08:	10210000 	.word	0x10210000
 8003e0c:	10120000 	.word	0x10120000
 8003e10:	10110000 	.word	0x10110000
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40010800 	.word	0x40010800
 8003e20:	40010c00 	.word	0x40010c00
 8003e24:	40011000 	.word	0x40011000
 8003e28:	40011400 	.word	0x40011400
 8003e2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	4909      	ldr	r1, [pc, #36]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	3301      	adds	r3, #1
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f47f ae8e 	bne.w	8003b70 <HAL_GPIO_Init+0x14>
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	372c      	adds	r7, #44	; 0x2c
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	40010400 	.word	0x40010400

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	611a      	str	r2, [r3, #16]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ea6:	887a      	ldrh	r2, [r7, #2]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	041a      	lsls	r2, r3, #16
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43d9      	mvns	r1, r3
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	400b      	ands	r3, r1
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	611a      	str	r2, [r3, #16]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e12b      	b.n	8004132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fa92 	bl	8003418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f2c:	f002 f84e 	bl	8005fcc <HAL_RCC_GetPCLK1Freq>
 8003f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4a81      	ldr	r2, [pc, #516]	; (800413c <HAL_I2C_Init+0x274>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d807      	bhi.n	8003f4c <HAL_I2C_Init+0x84>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a80      	ldr	r2, [pc, #512]	; (8004140 <HAL_I2C_Init+0x278>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e006      	b.n	8003f5a <HAL_I2C_Init+0x92>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a7d      	ldr	r2, [pc, #500]	; (8004144 <HAL_I2C_Init+0x27c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0e7      	b.n	8004132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a78      	ldr	r2, [pc, #480]	; (8004148 <HAL_I2C_Init+0x280>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0c9b      	lsrs	r3, r3, #18
 8003f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_I2C_Init+0x274>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d802      	bhi.n	8003f9c <HAL_I2C_Init+0xd4>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	e009      	b.n	8003fb0 <HAL_I2C_Init+0xe8>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	4a69      	ldr	r2, [pc, #420]	; (800414c <HAL_I2C_Init+0x284>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	099b      	lsrs	r3, r3, #6
 8003fae:	3301      	adds	r3, #1
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	495c      	ldr	r1, [pc, #368]	; (800413c <HAL_I2C_Init+0x274>)
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d819      	bhi.n	8004004 <HAL_I2C_Init+0x13c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e59      	subs	r1, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_I2C_Init+0x138>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1e59      	subs	r1, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffe:	e051      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004000:	2304      	movs	r3, #4
 8004002:	e04f      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d111      	bne.n	8004030 <HAL_I2C_Init+0x168>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	440b      	add	r3, r1
 800401a:	fbb0 f3f3 	udiv	r3, r0, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e012      	b.n	8004056 <HAL_I2C_Init+0x18e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	0099      	lsls	r1, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Init+0x196>
 800405a:	2301      	movs	r3, #1
 800405c:	e022      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <HAL_I2C_Init+0x1bc>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e58      	subs	r0, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	440b      	add	r3, r1
 8004074:	fbb0 f3f3 	udiv	r3, r0, r3
 8004078:	3301      	adds	r3, #1
 800407a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004082:	e00f      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e58      	subs	r0, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	0099      	lsls	r1, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	6809      	ldr	r1, [r1, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6911      	ldr	r1, [r2, #16]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68d2      	ldr	r2, [r2, #12]
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	000186a0 	.word	0x000186a0
 8004140:	001e847f 	.word	0x001e847f
 8004144:	003d08ff 	.word	0x003d08ff
 8004148:	431bde83 	.word	0x431bde83
 800414c:	10624dd3 	.word	0x10624dd3

08004150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	460b      	mov	r3, r1
 800415e:	817b      	strh	r3, [r7, #10]
 8004160:	4613      	mov	r3, r2
 8004162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff fbbe 	bl	80038e4 <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b20      	cmp	r3, #32
 8004174:	f040 80e0 	bne.w	8004338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2319      	movs	r3, #25
 800417e:	2201      	movs	r2, #1
 8004180:	4970      	ldr	r1, [pc, #448]	; (8004344 <HAL_I2C_Master_Transmit+0x1f4>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f001 f972 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	e0d3      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_I2C_Master_Transmit+0x50>
 800419c:	2302      	movs	r3, #2
 800419e:	e0cc      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d007      	beq.n	80041c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2221      	movs	r2, #33	; 0x21
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2210      	movs	r2, #16
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	893a      	ldrh	r2, [r7, #8]
 80041f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a50      	ldr	r2, [pc, #320]	; (8004348 <HAL_I2C_Master_Transmit+0x1f8>)
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004208:	8979      	ldrh	r1, [r7, #10]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6a3a      	ldr	r2, [r7, #32]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fe5e 	bl	8004ed0 <I2C_MasterRequestWrite>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e08d      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004234:	e066      	b.n	8004304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	6a39      	ldr	r1, [r7, #32]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f001 f9ec 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b04      	cmp	r3, #4
 800424c:	d107      	bne.n	800425e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06b      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d11b      	bne.n	80042d8 <HAL_I2C_Master_Transmit+0x188>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d017      	beq.n	80042d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	6a39      	ldr	r1, [r7, #32]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f001 f9dc 	bl	800569a <I2C_WaitOnBTFFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d107      	bne.n	8004300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e01a      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d194      	bne.n	8004236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	00100002 	.word	0x00100002
 8004348:	ffff0000 	.word	0xffff0000

0800434c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	; 0x30
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	461a      	mov	r2, r3
 8004358:	460b      	mov	r3, r1
 800435a:	817b      	strh	r3, [r7, #10]
 800435c:	4613      	mov	r3, r2
 800435e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff fabe 	bl	80038e4 <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	f040 823f 	bne.w	80047f6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2319      	movs	r3, #25
 800437e:	2201      	movs	r2, #1
 8004380:	497f      	ldr	r1, [pc, #508]	; (8004580 <HAL_I2C_Master_Receive+0x234>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f001 f872 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	e232      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_I2C_Master_Receive+0x54>
 800439c:	2302      	movs	r3, #2
 800439e:	e22b      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d007      	beq.n	80043c6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2222      	movs	r2, #34	; 0x22
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2210      	movs	r2, #16
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	893a      	ldrh	r2, [r7, #8]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a5f      	ldr	r2, [pc, #380]	; (8004584 <HAL_I2C_Master_Receive+0x238>)
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004408:	8979      	ldrh	r1, [r7, #10]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fde0 	bl	8004fd4 <I2C_MasterRequestRead>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e1ec      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d113      	bne.n	800444e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e1c0      	b.n	80047d0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	2b01      	cmp	r3, #1
 8004454:	d11e      	bne.n	8004494 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004466:	b672      	cpsid	i
}
 8004468:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004490:	b662      	cpsie	i
}
 8004492:	e035      	b.n	8004500 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11e      	bne.n	80044da <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ac:	b672      	cpsid	i
}
 80044ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044d6:	b662      	cpsie	i
}
 80044d8:	e012      	b.n	8004500 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004500:	e166      	b.n	80047d0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b03      	cmp	r3, #3
 8004508:	f200 811f 	bhi.w	800474a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b01      	cmp	r3, #1
 8004512:	d123      	bne.n	800455c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f001 f8ff 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e167      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800455a:	e139      	b.n	80047d0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	d152      	bne.n	800460a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2200      	movs	r2, #0
 800456c:	4906      	ldr	r1, [pc, #24]	; (8004588 <HAL_I2C_Master_Receive+0x23c>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 ff7c 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e13c      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
 800457e:	bf00      	nop
 8004580:	00100002 	.word	0x00100002
 8004584:	ffff0000 	.word	0xffff0000
 8004588:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800458c:	b672      	cpsid	i
}
 800458e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045d2:	b662      	cpsie	i
}
 80045d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004608:	e0e2      	b.n	80047d0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2200      	movs	r2, #0
 8004612:	497b      	ldr	r1, [pc, #492]	; (8004800 <HAL_I2C_Master_Receive+0x4b4>)
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 ff29 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0e9      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004634:	b672      	cpsid	i
}
 8004636:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800466a:	4b66      	ldr	r3, [pc, #408]	; (8004804 <HAL_I2C_Master_Receive+0x4b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	4a65      	ldr	r2, [pc, #404]	; (8004808 <HAL_I2C_Master_Receive+0x4bc>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	0a1a      	lsrs	r2, r3, #8
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	00da      	lsls	r2, r3, #3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	3b01      	subs	r3, #1
 8004688:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d118      	bne.n	80046c2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046b2:	b662      	cpsie	i
}
 80046b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e09a      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d1d9      	bne.n	8004684 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004712:	b662      	cpsie	i
}
 8004714:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004748:	e042      	b.n	80047d0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 ffe4 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e04c      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d118      	bne.n	80047d0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f47f ae94 	bne.w	8004502 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	00010004 	.word	0x00010004
 8004804:	20000004 	.word	0x20000004
 8004808:	14f8b589 	.word	0x14f8b589

0800480c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	4603      	mov	r3, r0
 800481c:	817b      	strh	r3, [r7, #10]
 800481e:	460b      	mov	r3, r1
 8004820:	813b      	strh	r3, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004826:	f7ff f85d 	bl	80038e4 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b20      	cmp	r3, #32
 8004836:	f040 80d9 	bne.w	80049ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	2319      	movs	r3, #25
 8004840:	2201      	movs	r2, #1
 8004842:	496d      	ldr	r1, [pc, #436]	; (80049f8 <HAL_I2C_Mem_Write+0x1ec>)
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fe11 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
 8004852:	e0cc      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_I2C_Mem_Write+0x56>
 800485e:	2302      	movs	r3, #2
 8004860:	e0c5      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d007      	beq.n	8004888 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	; 0x21
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a4d      	ldr	r2, [pc, #308]	; (80049fc <HAL_I2C_Mem_Write+0x1f0>)
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ca:	88f8      	ldrh	r0, [r7, #6]
 80048cc:	893a      	ldrh	r2, [r7, #8]
 80048ce:	8979      	ldrh	r1, [r7, #10]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4603      	mov	r3, r0
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fc48 	bl	8005170 <I2C_RequestMemoryWrite>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d052      	beq.n	800498c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e081      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fe92 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06b      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d11b      	bne.n	800498c <HAL_I2C_Mem_Write+0x180>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d017      	beq.n	800498c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1aa      	bne.n	80048ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fe7e 	bl	800569a <I2C_WaitOnBTFFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d107      	bne.n	80049bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e016      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	00100002 	.word	0x00100002
 80049fc:	ffff0000 	.word	0xffff0000

08004a00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08c      	sub	sp, #48	; 0x30
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	817b      	strh	r3, [r7, #10]
 8004a12:	460b      	mov	r3, r1
 8004a14:	813b      	strh	r3, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a1e:	f7fe ff61 	bl	80038e4 <HAL_GetTick>
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	f040 8244 	bne.w	8004eba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2319      	movs	r3, #25
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4982      	ldr	r1, [pc, #520]	; (8004c44 <HAL_I2C_Mem_Read+0x244>)
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fd15 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e237      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_Mem_Read+0x5a>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e230      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d007      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2222      	movs	r2, #34	; 0x22
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a62      	ldr	r2, [pc, #392]	; (8004c48 <HAL_I2C_Mem_Read+0x248>)
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ac2:	88f8      	ldrh	r0, [r7, #6]
 8004ac4:	893a      	ldrh	r2, [r7, #8]
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fbe2 	bl	800529c <I2C_RequestMemoryRead>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e1ec      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d113      	bne.n	8004b12 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e1c0      	b.n	8004e94 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d11e      	bne.n	8004b58 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b2a:	b672      	cpsid	i
}
 8004b2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b54:	b662      	cpsie	i
}
 8004b56:	e035      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d11e      	bne.n	8004b9e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b70:	b672      	cpsid	i
}
 8004b72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b9a:	b662      	cpsie	i
}
 8004b9c:	e012      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004bc4:	e166      	b.n	8004e94 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	f200 811f 	bhi.w	8004e0e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d123      	bne.n	8004c20 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fd9d 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e167      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c1e:	e139      	b.n	8004e94 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d152      	bne.n	8004cce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4906      	ldr	r1, [pc, #24]	; (8004c4c <HAL_I2C_Mem_Read+0x24c>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fc1a 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e13c      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
 8004c42:	bf00      	nop
 8004c44:	00100002 	.word	0x00100002
 8004c48:	ffff0000 	.word	0xffff0000
 8004c4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004c50:	b672      	cpsid	i
}
 8004c52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c96:	b662      	cpsie	i
}
 8004c98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ccc:	e0e2      	b.n	8004e94 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	497b      	ldr	r1, [pc, #492]	; (8004ec4 <HAL_I2C_Mem_Read+0x4c4>)
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fbc7 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0e9      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf8:	b672      	cpsid	i
}
 8004cfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d2e:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <HAL_I2C_Mem_Read+0x4c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_I2C_Mem_Read+0x4cc>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	0a1a      	lsrs	r2, r3, #8
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00da      	lsls	r2, r3, #3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d118      	bne.n	8004d86 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d76:	b662      	cpsie	i
}
 8004d78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e09a      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d1d9      	bne.n	8004d48 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004dd6:	b662      	cpsie	i
}
 8004dd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e0c:	e042      	b.n	8004e94 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fc82 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e04c      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d118      	bne.n	8004e94 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f ae94 	bne.w	8004bc6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e000      	b.n	8004ebc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
  }
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3728      	adds	r7, #40	; 0x28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	00010004 	.word	0x00010004
 8004ec8:	20000004 	.word	0x20000004
 8004ecc:	14f8b589 	.word	0x14f8b589

08004ed0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	460b      	mov	r3, r1
 8004ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d006      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d003      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ef8:	d108      	bne.n	8004f0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e00b      	b.n	8004f24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	2b12      	cmp	r3, #18
 8004f12:	d107      	bne.n	8004f24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fa9b 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d103      	bne.n	8004f54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e035      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d108      	bne.n	8004f74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f62:	897b      	ldrh	r3, [r7, #10]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f70:	611a      	str	r2, [r3, #16]
 8004f72:	e01b      	b.n	8004fac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f74:	897b      	ldrh	r3, [r7, #10]
 8004f76:	11db      	asrs	r3, r3, #7
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0306 	and.w	r3, r3, #6
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f063 030f 	orn	r3, r3, #15
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <I2C_MasterRequestWrite+0xfc>)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fac1 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e010      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4907      	ldr	r1, [pc, #28]	; (8004fd0 <I2C_MasterRequestWrite+0x100>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fab1 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	00010008 	.word	0x00010008
 8004fd0:	00010002 	.word	0x00010002

08004fd4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d006      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800500c:	d108      	bne.n	8005020 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e00b      	b.n	8005038 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	2b11      	cmp	r3, #17
 8005026:	d107      	bne.n	8005038 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fa11 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d103      	bne.n	8005068 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e079      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d108      	bne.n	8005088 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	e05f      	b.n	8005148 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005088:	897b      	ldrh	r3, [r7, #10]
 800508a:	11db      	asrs	r3, r3, #7
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0306 	and.w	r3, r3, #6
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f063 030f 	orn	r3, r3, #15
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4930      	ldr	r1, [pc, #192]	; (8005168 <I2C_MasterRequestRead+0x194>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa37 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e054      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4929      	ldr	r1, [pc, #164]	; (800516c <I2C_MasterRequestRead+0x198>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa27 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e044      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f9af 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d103      	bne.n	800512c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e017      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005130:	897b      	ldrh	r3, [r7, #10]
 8005132:	11db      	asrs	r3, r3, #7
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0306 	and.w	r3, r3, #6
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f063 030e 	orn	r3, r3, #14
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4907      	ldr	r1, [pc, #28]	; (800516c <I2C_MasterRequestRead+0x198>)
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f9e3 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	00010008 	.word	0x00010008
 800516c:	00010002 	.word	0x00010002

08005170 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	4608      	mov	r0, r1
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	4603      	mov	r3, r0
 8005180:	817b      	strh	r3, [r7, #10]
 8005182:	460b      	mov	r3, r1
 8005184:	813b      	strh	r3, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f960 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d103      	bne.n	80051ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e05f      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	492d      	ldr	r1, [pc, #180]	; (8005298 <I2C_RequestMemoryWrite+0x128>)
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f998 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e04c      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fa02 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b04      	cmp	r3, #4
 8005220:	d107      	bne.n	8005232 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e02b      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]
 8005246:	e021      	b.n	800528c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	b29b      	uxth	r3, r3
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6a39      	ldr	r1, [r7, #32]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f9dc 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b04      	cmp	r3, #4
 800526c:	d107      	bne.n	800527e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e005      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005282:	893b      	ldrh	r3, [r7, #8]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	00010002 	.word	0x00010002

0800529c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	460b      	mov	r3, r1
 80052b0:	813b      	strh	r3, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2200      	movs	r2, #0
 80052de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f8c2 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fc:	d103      	bne.n	8005306 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0aa      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	4952      	ldr	r1, [pc, #328]	; (8005468 <I2C_RequestMemoryRead+0x1cc>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f8fa 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e097      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f964 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e076      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e021      	b.n	80053c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005384:	893b      	ldrh	r3, [r7, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	b29b      	uxth	r3, r3
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f93e 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e050      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053be:	893b      	ldrh	r3, [r7, #8]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	6a39      	ldr	r1, [r7, #32]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f923 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00d      	beq.n	80053f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d107      	bne.n	80053f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e035      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005402:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2200      	movs	r2, #0
 800540c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f82b 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00d      	beq.n	8005438 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d103      	bne.n	8005434 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e013      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	6a3a      	ldr	r2, [r7, #32]
 800544c:	4906      	ldr	r1, [pc, #24]	; (8005468 <I2C_RequestMemoryRead+0x1cc>)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f863 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	00010002 	.word	0x00010002

0800546c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547c:	e025      	b.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d021      	beq.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fe fa2d 	bl	80038e4 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d116      	bne.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e023      	b.n	8005512 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d10d      	bne.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	43da      	mvns	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	e00c      	b.n	800550a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d0b6      	beq.n	800547e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005528:	e051      	b.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d123      	bne.n	8005582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005548:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005552:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e046      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d021      	beq.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fe f9ab 	bl	80038e4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e020      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10c      	bne.n	80055f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e00b      	b.n	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	43da      	mvns	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4013      	ands	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d18d      	bne.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005624:	e02d      	b.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f8ce 	bl	80057c8 <I2C_IsAcknowledgeFailed>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e02d      	b.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d021      	beq.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fe f951 	bl	80038e4 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d116      	bne.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	d1ca      	bne.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a6:	e02d      	b.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f88d 	bl	80057c8 <I2C_IsAcknowledgeFailed>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e02d      	b.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d021      	beq.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c0:	f7fe f910 	bl	80038e4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d116      	bne.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e007      	b.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d1ca      	bne.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005728:	e042      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b10      	cmp	r3, #16
 8005736:	d119      	bne.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0210 	mvn.w	r2, #16
 8005740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e029      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fe f8ba 	bl	80038e4 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d116      	bne.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e007      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d1b5      	bne.n	800572a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d11b      	bne.n	8005818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	f043 0204 	orr.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e26c      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8087 	beq.w	8005952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005844:	4b92      	ldr	r3, [pc, #584]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 030c 	and.w	r3, r3, #12
 800584c:	2b04      	cmp	r3, #4
 800584e:	d00c      	beq.n	800586a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005850:	4b8f      	ldr	r3, [pc, #572]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 030c 	and.w	r3, r3, #12
 8005858:	2b08      	cmp	r3, #8
 800585a:	d112      	bne.n	8005882 <HAL_RCC_OscConfig+0x5e>
 800585c:	4b8c      	ldr	r3, [pc, #560]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005868:	d10b      	bne.n	8005882 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586a:	4b89      	ldr	r3, [pc, #548]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d06c      	beq.n	8005950 <HAL_RCC_OscConfig+0x12c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d168      	bne.n	8005950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e246      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588a:	d106      	bne.n	800589a <HAL_RCC_OscConfig+0x76>
 800588c:	4b80      	ldr	r3, [pc, #512]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a7f      	ldr	r2, [pc, #508]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e02e      	b.n	80058f8 <HAL_RCC_OscConfig+0xd4>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10c      	bne.n	80058bc <HAL_RCC_OscConfig+0x98>
 80058a2:	4b7b      	ldr	r3, [pc, #492]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a7a      	ldr	r2, [pc, #488]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4b78      	ldr	r3, [pc, #480]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a77      	ldr	r2, [pc, #476]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e01d      	b.n	80058f8 <HAL_RCC_OscConfig+0xd4>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCC_OscConfig+0xbc>
 80058c6:	4b72      	ldr	r3, [pc, #456]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a71      	ldr	r2, [pc, #452]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	4b6f      	ldr	r3, [pc, #444]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6e      	ldr	r2, [pc, #440]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e00b      	b.n	80058f8 <HAL_RCC_OscConfig+0xd4>
 80058e0:	4b6b      	ldr	r3, [pc, #428]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a6a      	ldr	r2, [pc, #424]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b68      	ldr	r3, [pc, #416]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a67      	ldr	r2, [pc, #412]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80058f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d013      	beq.n	8005928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fd fff0 	bl	80038e4 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005908:	f7fd ffec 	bl	80038e4 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b64      	cmp	r3, #100	; 0x64
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e1fa      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	4b5d      	ldr	r3, [pc, #372]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0xe4>
 8005926:	e014      	b.n	8005952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005928:	f7fd ffdc 	bl	80038e4 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005930:	f7fd ffd8 	bl	80038e4 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b64      	cmp	r3, #100	; 0x64
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e1e6      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005942:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x10c>
 800594e:	e000      	b.n	8005952 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d063      	beq.n	8005a26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800595e:	4b4c      	ldr	r3, [pc, #304]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f003 030c 	and.w	r3, r3, #12
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800596a:	4b49      	ldr	r3, [pc, #292]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f003 030c 	and.w	r3, r3, #12
 8005972:	2b08      	cmp	r3, #8
 8005974:	d11c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x18c>
 8005976:	4b46      	ldr	r3, [pc, #280]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d116      	bne.n	80059b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005982:	4b43      	ldr	r3, [pc, #268]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_RCC_OscConfig+0x176>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d001      	beq.n	800599a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e1ba      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599a:	4b3d      	ldr	r3, [pc, #244]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4939      	ldr	r1, [pc, #228]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ae:	e03a      	b.n	8005a26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d020      	beq.n	80059fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059b8:	4b36      	ldr	r3, [pc, #216]	; (8005a94 <HAL_RCC_OscConfig+0x270>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059be:	f7fd ff91 	bl	80038e4 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059c6:	f7fd ff8d 	bl	80038e4 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e19b      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d8:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e4:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4927      	ldr	r1, [pc, #156]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]
 80059f8:	e015      	b.n	8005a26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fa:	4b26      	ldr	r3, [pc, #152]	; (8005a94 <HAL_RCC_OscConfig+0x270>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a00:	f7fd ff70 	bl	80038e4 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a08:	f7fd ff6c 	bl	80038e4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e17a      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d03a      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d019      	beq.n	8005a6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_RCC_OscConfig+0x274>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a40:	f7fd ff50 	bl	80038e4 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a48:	f7fd ff4c 	bl	80038e4 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e15a      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a66:	2001      	movs	r0, #1
 8005a68:	f000 fad8 	bl	800601c <RCC_Delay>
 8005a6c:	e01c      	b.n	8005aa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <HAL_RCC_OscConfig+0x274>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a74:	f7fd ff36 	bl	80038e4 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a7a:	e00f      	b.n	8005a9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7c:	f7fd ff32 	bl	80038e4 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d908      	bls.n	8005a9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e140      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	42420000 	.word	0x42420000
 8005a98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a9c:	4b9e      	ldr	r3, [pc, #632]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e9      	bne.n	8005a7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80a6 	beq.w	8005c02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aba:	4b97      	ldr	r3, [pc, #604]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10d      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac6:	4b94      	ldr	r3, [pc, #592]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	4a93      	ldr	r2, [pc, #588]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	61d3      	str	r3, [r2, #28]
 8005ad2:	4b91      	ldr	r3, [pc, #580]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae2:	4b8e      	ldr	r3, [pc, #568]	; (8005d1c <HAL_RCC_OscConfig+0x4f8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d118      	bne.n	8005b20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aee:	4b8b      	ldr	r3, [pc, #556]	; (8005d1c <HAL_RCC_OscConfig+0x4f8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a8a      	ldr	r2, [pc, #552]	; (8005d1c <HAL_RCC_OscConfig+0x4f8>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afa:	f7fd fef3 	bl	80038e4 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b02:	f7fd feef 	bl	80038e4 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b64      	cmp	r3, #100	; 0x64
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e0fd      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b14:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <HAL_RCC_OscConfig+0x4f8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_OscConfig+0x312>
 8005b28:	4b7b      	ldr	r3, [pc, #492]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	4a7a      	ldr	r2, [pc, #488]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6213      	str	r3, [r2, #32]
 8005b34:	e02d      	b.n	8005b92 <HAL_RCC_OscConfig+0x36e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCC_OscConfig+0x334>
 8005b3e:	4b76      	ldr	r3, [pc, #472]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	4a75      	ldr	r2, [pc, #468]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	6213      	str	r3, [r2, #32]
 8005b4a:	4b73      	ldr	r3, [pc, #460]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	4a72      	ldr	r2, [pc, #456]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	6213      	str	r3, [r2, #32]
 8005b56:	e01c      	b.n	8005b92 <HAL_RCC_OscConfig+0x36e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	d10c      	bne.n	8005b7a <HAL_RCC_OscConfig+0x356>
 8005b60:	4b6d      	ldr	r3, [pc, #436]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	4a6c      	ldr	r2, [pc, #432]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b66:	f043 0304 	orr.w	r3, r3, #4
 8005b6a:	6213      	str	r3, [r2, #32]
 8005b6c:	4b6a      	ldr	r3, [pc, #424]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	4a69      	ldr	r2, [pc, #420]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	6213      	str	r3, [r2, #32]
 8005b78:	e00b      	b.n	8005b92 <HAL_RCC_OscConfig+0x36e>
 8005b7a:	4b67      	ldr	r3, [pc, #412]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	4a66      	ldr	r2, [pc, #408]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	6213      	str	r3, [r2, #32]
 8005b86:	4b64      	ldr	r3, [pc, #400]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	4a63      	ldr	r2, [pc, #396]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d015      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9a:	f7fd fea3 	bl	80038e4 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fd fe9f 	bl	80038e4 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e0ab      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb8:	4b57      	ldr	r3, [pc, #348]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ee      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x37e>
 8005bc4:	e014      	b.n	8005bf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc6:	f7fd fe8d 	bl	80038e4 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bce:	f7fd fe89 	bl	80038e4 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e095      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be4:	4b4c      	ldr	r3, [pc, #304]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ee      	bne.n	8005bce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d105      	bne.n	8005c02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4b48      	ldr	r3, [pc, #288]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	4a47      	ldr	r2, [pc, #284]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8081 	beq.w	8005d0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c0c:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 030c 	and.w	r3, r3, #12
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d061      	beq.n	8005cdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d146      	bne.n	8005cae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c20:	4b3f      	ldr	r3, [pc, #252]	; (8005d20 <HAL_RCC_OscConfig+0x4fc>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c26:	f7fd fe5d 	bl	80038e4 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2e:	f7fd fe59 	bl	80038e4 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e067      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c40:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1f0      	bne.n	8005c2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c54:	d108      	bne.n	8005c68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c56:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	492d      	ldr	r1, [pc, #180]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a19      	ldr	r1, [r3, #32]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	4927      	ldr	r1, [pc, #156]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c80:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <HAL_RCC_OscConfig+0x4fc>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c86:	f7fd fe2d 	bl	80038e4 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fd fe29 	bl	80038e4 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e037      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ca0:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x46a>
 8005cac:	e02f      	b.n	8005d0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cae:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <HAL_RCC_OscConfig+0x4fc>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb4:	f7fd fe16 	bl	80038e4 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fd fe12 	bl	80038e4 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e020      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x498>
 8005cda:	e018      	b.n	8005d0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e013      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCC_OscConfig+0x4f4>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d001      	beq.n	8005d0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40007000 	.word	0x40007000
 8005d20:	42420060 	.word	0x42420060

08005d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0d0      	b.n	8005eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d38:	4b6a      	ldr	r3, [pc, #424]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d910      	bls.n	8005d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b67      	ldr	r3, [pc, #412]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f023 0207 	bic.w	r2, r3, #7
 8005d4e:	4965      	ldr	r1, [pc, #404]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d56:	4b63      	ldr	r3, [pc, #396]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d001      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0b8      	b.n	8005eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d80:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a58      	ldr	r2, [pc, #352]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d98:	4b53      	ldr	r3, [pc, #332]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4a52      	ldr	r2, [pc, #328]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b50      	ldr	r3, [pc, #320]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	494d      	ldr	r1, [pc, #308]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d040      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	4b47      	ldr	r3, [pc, #284]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d115      	bne.n	8005e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e07f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d107      	bne.n	8005df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de2:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e073      	b.n	8005eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df2:	4b3d      	ldr	r3, [pc, #244]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e06b      	b.n	8005eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e02:	4b39      	ldr	r3, [pc, #228]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f023 0203 	bic.w	r2, r3, #3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4936      	ldr	r1, [pc, #216]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e14:	f7fd fd66 	bl	80038e4 <HAL_GetTick>
 8005e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1a:	e00a      	b.n	8005e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e1c:	f7fd fd62 	bl	80038e4 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e053      	b.n	8005eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e32:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 020c 	and.w	r2, r3, #12
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d1eb      	bne.n	8005e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e44:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d210      	bcs.n	8005e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e52:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 0207 	bic.w	r2, r3, #7
 8005e5a:	4922      	ldr	r1, [pc, #136]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e62:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e032      	b.n	8005eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e80:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4916      	ldr	r1, [pc, #88]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	490e      	ldr	r1, [pc, #56]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eb2:	f000 f821 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	490a      	ldr	r1, [pc, #40]	; (8005eec <HAL_RCC_ClockConfig+0x1c8>)
 8005ec4:	5ccb      	ldrb	r3, [r1, r3]
 8005ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eca:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8005ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd fcc4 	bl	8003860 <HAL_InitTick>

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40022000 	.word	0x40022000
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	0800d758 	.word	0x0800d758
 8005ef0:	20000004 	.word	0x20000004
 8005ef4:	20000008 	.word	0x20000008

08005ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef8:	b490      	push	{r4, r7}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005efe:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f00:	1d3c      	adds	r4, r7, #4
 8005f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f08:	f240 2301 	movw	r3, #513	; 0x201
 8005f0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f22:	4b22      	ldr	r3, [pc, #136]	; (8005fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d002      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x40>
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d003      	beq.n	8005f3e <HAL_RCC_GetSysClockFreq+0x46>
 8005f36:	e02d      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f38:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f3a:	623b      	str	r3, [r7, #32]
      break;
 8005f3c:	e02d      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	0c9b      	lsrs	r3, r3, #18
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d013      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	0c5b      	lsrs	r3, r3, #17
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	4a0e      	ldr	r2, [pc, #56]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f76:	fb02 f203 	mul.w	r2, r2, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
 8005f82:	e004      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4a0b      	ldr	r2, [pc, #44]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	623b      	str	r3, [r7, #32]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f94:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f96:	623b      	str	r3, [r7, #32]
      break;
 8005f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3728      	adds	r7, #40	; 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc90      	pop	{r4, r7}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	0800d714 	.word	0x0800d714
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	007a1200 	.word	0x007a1200
 8005fb4:	003d0900 	.word	0x003d0900

08005fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fbc:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	20000004 	.word	0x20000004

08005fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fd0:	f7ff fff2 	bl	8005fb8 <HAL_RCC_GetHCLKFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	4903      	ldr	r1, [pc, #12]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	0800d768 	.word	0x0800d768

08005ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ff8:	f7ff ffde 	bl	8005fb8 <HAL_RCC_GetHCLKFreq>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	4b05      	ldr	r3, [pc, #20]	; (8006014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	0adb      	lsrs	r3, r3, #11
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	4903      	ldr	r1, [pc, #12]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800600a:	5ccb      	ldrb	r3, [r1, r3]
 800600c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006010:	4618      	mov	r0, r3
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40021000 	.word	0x40021000
 8006018:	0800d768 	.word	0x0800d768

0800601c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006024:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <RCC_Delay+0x34>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <RCC_Delay+0x38>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	0a5b      	lsrs	r3, r3, #9
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006038:	bf00      	nop
  }
  while (Delay --);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	60fa      	str	r2, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f9      	bne.n	8006038 <RCC_Delay+0x1c>
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	20000004 	.word	0x20000004
 8006054:	10624dd3 	.word	0x10624dd3

08006058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e041      	b.n	80060ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fd fa26 	bl	80034d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	f000 fe98 	bl	8006dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d001      	beq.n	8006110 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e032      	b.n	8006176 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a18      	ldr	r2, [pc, #96]	; (8006180 <HAL_TIM_Base_Start+0x88>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_TIM_Base_Start+0x48>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d009      	beq.n	8006140 <HAL_TIM_Base_Start+0x48>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a14      	ldr	r2, [pc, #80]	; (8006184 <HAL_TIM_Base_Start+0x8c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_TIM_Base_Start+0x48>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a13      	ldr	r2, [pc, #76]	; (8006188 <HAL_TIM_Base_Start+0x90>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d111      	bne.n	8006164 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b06      	cmp	r3, #6
 8006150:	d010      	beq.n	8006174 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006162:	e007      	b.n	8006174 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800

0800618c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	d001      	beq.n	80061a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e03a      	b.n	800621a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a18      	ldr	r2, [pc, #96]	; (8006224 <HAL_TIM_Base_Start_IT+0x98>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00e      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x58>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d009      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x58>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <HAL_TIM_Base_Start_IT+0x9c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x58>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a13      	ldr	r2, [pc, #76]	; (800622c <HAL_TIM_Base_Start_IT+0xa0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d111      	bne.n	8006208 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	d010      	beq.n	8006218 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006206:	e007      	b.n	8006218 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800

08006230 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e041      	b.n	80062c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fd f91c 	bl	8003494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f000 fdac 	bl	8006dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start+0x24>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e022      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d109      	bne.n	800630e <HAL_TIM_PWM_Start+0x3e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e015      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start+0x58>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e008      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e05e      	b.n	8006400 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start+0x82>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006350:	e013      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b04      	cmp	r3, #4
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start+0x92>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006360:	e00b      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Start+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006370:	e003      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f001 f8af 	bl	80074e6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1e      	ldr	r2, [pc, #120]	; (8006408 <HAL_TIM_PWM_Start+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d107      	bne.n	80063a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <HAL_TIM_PWM_Start+0x138>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00e      	beq.n	80063ca <HAL_TIM_PWM_Start+0xfa>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d009      	beq.n	80063ca <HAL_TIM_PWM_Start+0xfa>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a14      	ldr	r2, [pc, #80]	; (800640c <HAL_TIM_PWM_Start+0x13c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_TIM_PWM_Start+0xfa>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a12      	ldr	r2, [pc, #72]	; (8006410 <HAL_TIM_PWM_Start+0x140>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d111      	bne.n	80063ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b06      	cmp	r3, #6
 80063da:	d010      	beq.n	80063fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ec:	e007      	b.n	80063fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40000400 	.word	0x40000400
 8006410:	40000800 	.word	0x40000800

08006414 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e041      	b.n	80064aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f839 	bl	80064b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f000 fcba 	bl	8006dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_TIM_IC_Start_IT+0x1a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e013      	b.n	8006506 <HAL_TIM_IC_Start_IT+0x42>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_IC_Start_IT+0x2a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	e00b      	b.n	8006506 <HAL_TIM_IC_Start_IT+0x42>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_IC_Start_IT+0x3a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	e003      	b.n	8006506 <HAL_TIM_IC_Start_IT+0x42>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006504:	b2db      	uxtb	r3, r3
 8006506:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_TIM_IC_Start_IT+0x54>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006514:	b2db      	uxtb	r3, r3
 8006516:	e013      	b.n	8006540 <HAL_TIM_IC_Start_IT+0x7c>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d104      	bne.n	8006528 <HAL_TIM_IC_Start_IT+0x64>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e00b      	b.n	8006540 <HAL_TIM_IC_Start_IT+0x7c>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d104      	bne.n	8006538 <HAL_TIM_IC_Start_IT+0x74>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e003      	b.n	8006540 <HAL_TIM_IC_Start_IT+0x7c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800653e:	b2db      	uxtb	r3, r3
 8006540:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d102      	bne.n	800654e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d001      	beq.n	8006552 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e0b3      	b.n	80066ba <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <HAL_TIM_IC_Start_IT+0x9e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006560:	e013      	b.n	800658a <HAL_TIM_IC_Start_IT+0xc6>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b04      	cmp	r3, #4
 8006566:	d104      	bne.n	8006572 <HAL_TIM_IC_Start_IT+0xae>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006570:	e00b      	b.n	800658a <HAL_TIM_IC_Start_IT+0xc6>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d104      	bne.n	8006582 <HAL_TIM_IC_Start_IT+0xbe>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006580:	e003      	b.n	800658a <HAL_TIM_IC_Start_IT+0xc6>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <HAL_TIM_IC_Start_IT+0xd6>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006598:	e013      	b.n	80065c2 <HAL_TIM_IC_Start_IT+0xfe>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b04      	cmp	r3, #4
 800659e:	d104      	bne.n	80065aa <HAL_TIM_IC_Start_IT+0xe6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065a8:	e00b      	b.n	80065c2 <HAL_TIM_IC_Start_IT+0xfe>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d104      	bne.n	80065ba <HAL_TIM_IC_Start_IT+0xf6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b8:	e003      	b.n	80065c2 <HAL_TIM_IC_Start_IT+0xfe>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	d841      	bhi.n	800664c <HAL_TIM_IC_Start_IT+0x188>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_TIM_IC_Start_IT+0x10c>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	08006605 	.word	0x08006605
 80065d4:	0800664d 	.word	0x0800664d
 80065d8:	0800664d 	.word	0x0800664d
 80065dc:	0800664d 	.word	0x0800664d
 80065e0:	08006617 	.word	0x08006617
 80065e4:	0800664d 	.word	0x0800664d
 80065e8:	0800664d 	.word	0x0800664d
 80065ec:	0800664d 	.word	0x0800664d
 80065f0:	08006629 	.word	0x08006629
 80065f4:	0800664d 	.word	0x0800664d
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	0800664d 	.word	0x0800664d
 8006600:	0800663b 	.word	0x0800663b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0202 	orr.w	r2, r2, #2
 8006612:	60da      	str	r2, [r3, #12]
      break;
 8006614:	e01b      	b.n	800664e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0204 	orr.w	r2, r2, #4
 8006624:	60da      	str	r2, [r3, #12]
      break;
 8006626:	e012      	b.n	800664e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0208 	orr.w	r2, r2, #8
 8006636:	60da      	str	r2, [r3, #12]
      break;
 8006638:	e009      	b.n	800664e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0210 	orr.w	r2, r2, #16
 8006648:	60da      	str	r2, [r3, #12]
      break;
 800664a:	e000      	b.n	800664e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800664c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2201      	movs	r2, #1
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 ff45 	bl	80074e6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <HAL_TIM_IC_Start_IT+0x200>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00e      	beq.n	8006684 <HAL_TIM_IC_Start_IT+0x1c0>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d009      	beq.n	8006684 <HAL_TIM_IC_Start_IT+0x1c0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <HAL_TIM_IC_Start_IT+0x204>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_TIM_IC_Start_IT+0x1c0>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a13      	ldr	r2, [pc, #76]	; (80066cc <HAL_TIM_IC_Start_IT+0x208>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d111      	bne.n	80066a8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b06      	cmp	r3, #6
 8006694:	d010      	beq.n	80066b8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0201 	orr.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a6:	e007      	b.n	80066b8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40000400 	.word	0x40000400
 80066cc:	40000800 	.word	0x40000800

080066d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d122      	bne.n	800672c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d11b      	bne.n	800672c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0202 	mvn.w	r2, #2
 80066fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fc fb64 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8006718:	e005      	b.n	8006726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fb3a 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fb40 	bl	8006da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b04      	cmp	r3, #4
 8006738:	d122      	bne.n	8006780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b04      	cmp	r3, #4
 8006746:	d11b      	bne.n	8006780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0204 	mvn.w	r2, #4
 8006750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fc fb3a 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 800676c:	e005      	b.n	800677a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb10 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fb16 	bl	8006da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b08      	cmp	r3, #8
 800678c:	d122      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b08      	cmp	r3, #8
 800679a:	d11b      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0208 	mvn.w	r2, #8
 80067a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2204      	movs	r2, #4
 80067aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fc fb10 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fae6 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 faec 	bl	8006da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	2b10      	cmp	r3, #16
 80067e0:	d122      	bne.n	8006828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d11b      	bne.n	8006828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0210 	mvn.w	r2, #16
 80067f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2208      	movs	r2, #8
 80067fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fc fae6 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8006814:	e005      	b.n	8006822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fabc 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fac2 	bl	8006da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b01      	cmp	r3, #1
 8006834:	d10e      	bne.n	8006854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	d107      	bne.n	8006854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0201 	mvn.w	r2, #1
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fb ff76 	bl	8002740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d10e      	bne.n	8006880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686c:	2b80      	cmp	r3, #128	; 0x80
 800686e:	d107      	bne.n	8006880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 ff10 	bl	80076a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d10e      	bne.n	80068ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d107      	bne.n	80068ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa86 	bl	8006db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d10e      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d107      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0220 	mvn.w	r2, #32
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fedb 	bl	800768e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_TIM_IC_ConfigChannel+0x1a>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e082      	b.n	8006a00 <HAL_TIM_IC_ConfigChannel+0x120>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11b      	bne.n	8006940 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f000 fc42 	bl	80071a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 020c 	bic.w	r2, r2, #12
 800692a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6999      	ldr	r1, [r3, #24]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	619a      	str	r2, [r3, #24]
 800693e:	e05a      	b.n	80069f6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d11c      	bne.n	8006980 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6819      	ldr	r1, [r3, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f000 fcab 	bl	80072b0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006968:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6999      	ldr	r1, [r3, #24]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	021a      	lsls	r2, r3, #8
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	619a      	str	r2, [r3, #24]
 800697e:	e03a      	b.n	80069f6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b08      	cmp	r3, #8
 8006984:	d11b      	bne.n	80069be <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6819      	ldr	r1, [r3, #0]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f000 fcf6 	bl	8007386 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69da      	ldr	r2, [r3, #28]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 020c 	bic.w	r2, r2, #12
 80069a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69d9      	ldr	r1, [r3, #28]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	61da      	str	r2, [r3, #28]
 80069bc:	e01b      	b.n	80069f6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f000 fd15 	bl	80073fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69d9      	ldr	r1, [r3, #28]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	021a      	lsls	r2, r3, #8
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e0ac      	b.n	8006b7c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b0c      	cmp	r3, #12
 8006a2e:	f200 809f 	bhi.w	8006b70 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006b71 	.word	0x08006b71
 8006a40:	08006b71 	.word	0x08006b71
 8006a44:	08006b71 	.word	0x08006b71
 8006a48:	08006aad 	.word	0x08006aad
 8006a4c:	08006b71 	.word	0x08006b71
 8006a50:	08006b71 	.word	0x08006b71
 8006a54:	08006b71 	.word	0x08006b71
 8006a58:	08006aef 	.word	0x08006aef
 8006a5c:	08006b71 	.word	0x08006b71
 8006a60:	08006b71 	.word	0x08006b71
 8006a64:	08006b71 	.word	0x08006b71
 8006a68:	08006b2f 	.word	0x08006b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fa0c 	bl	8006e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0208 	orr.w	r2, r2, #8
 8006a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0204 	bic.w	r2, r2, #4
 8006a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6999      	ldr	r1, [r3, #24]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	691a      	ldr	r2, [r3, #16]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	619a      	str	r2, [r3, #24]
      break;
 8006aaa:	e062      	b.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fa52 	bl	8006f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6999      	ldr	r1, [r3, #24]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	021a      	lsls	r2, r3, #8
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	619a      	str	r2, [r3, #24]
      break;
 8006aec:	e041      	b.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fa9b 	bl	8007030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69da      	ldr	r2, [r3, #28]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0208 	orr.w	r2, r2, #8
 8006b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0204 	bic.w	r2, r2, #4
 8006b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69d9      	ldr	r1, [r3, #28]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	61da      	str	r2, [r3, #28]
      break;
 8006b2c:	e021      	b.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fae5 	bl	8007104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69da      	ldr	r2, [r3, #28]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69d9      	ldr	r1, [r3, #28]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	021a      	lsls	r2, r3, #8
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	61da      	str	r2, [r3, #28]
      break;
 8006b6e:	e000      	b.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006b70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_TIM_ConfigClockSource+0x18>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e0b3      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x180>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd4:	d03e      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0xd0>
 8006bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bda:	f200 8087 	bhi.w	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	f000 8085 	beq.w	8006cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bea:	d87f      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006bec:	2b70      	cmp	r3, #112	; 0x70
 8006bee:	d01a      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0xa2>
 8006bf0:	2b70      	cmp	r3, #112	; 0x70
 8006bf2:	d87b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006bf4:	2b60      	cmp	r3, #96	; 0x60
 8006bf6:	d050      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x116>
 8006bf8:	2b60      	cmp	r3, #96	; 0x60
 8006bfa:	d877      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006bfc:	2b50      	cmp	r3, #80	; 0x50
 8006bfe:	d03c      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0xf6>
 8006c00:	2b50      	cmp	r3, #80	; 0x50
 8006c02:	d873      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d058      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x136>
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d86f      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006c0c:	2b30      	cmp	r3, #48	; 0x30
 8006c0e:	d064      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x156>
 8006c10:	2b30      	cmp	r3, #48	; 0x30
 8006c12:	d86b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d060      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x156>
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d867      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d05c      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x156>
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d05a      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006c24:	e062      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6899      	ldr	r1, [r3, #8]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f000 fc37 	bl	80074a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	609a      	str	r2, [r3, #8]
      break;
 8006c52:	e04e      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	6899      	ldr	r1, [r3, #8]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f000 fc20 	bl	80074a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c76:	609a      	str	r2, [r3, #8]
      break;
 8006c78:	e03b      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f000 fae4 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2150      	movs	r1, #80	; 0x50
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fbee 	bl	8007474 <TIM_ITRx_SetConfig>
      break;
 8006c98:	e02b      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f000 fb3e 	bl	8007328 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2160      	movs	r1, #96	; 0x60
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fbde 	bl	8007474 <TIM_ITRx_SetConfig>
      break;
 8006cb8:	e01b      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 fac4 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2140      	movs	r1, #64	; 0x40
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fbce 	bl	8007474 <TIM_ITRx_SetConfig>
      break;
 8006cd8:	e00b      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f000 fbc5 	bl	8007474 <TIM_ITRx_SetConfig>
        break;
 8006cea:	e002      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006cec:	bf00      	nop
 8006cee:	e000      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006cf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d831      	bhi.n	8006d84 <HAL_TIM_ReadCapturedValue+0x78>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d67 	.word	0x08006d67
 8006d3c:	08006d85 	.word	0x08006d85
 8006d40:	08006d85 	.word	0x08006d85
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d85 	.word	0x08006d85
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006d85 	.word	0x08006d85
 8006d58:	08006d7b 	.word	0x08006d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	60fb      	str	r3, [r7, #12]

      break;
 8006d64:	e00f      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	60fb      	str	r3, [r7, #12]

      break;
 8006d6e:	e00a      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d76:	60fb      	str	r3, [r7, #12]

      break;
 8006d78:	e005      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	60fb      	str	r3, [r7, #12]

      break;
 8006d82:	e000      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006d84:	bf00      	nop
  }

  return tmpreg;
 8006d86:	68fb      	ldr	r3, [r7, #12]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop

08006d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr
	...

08006dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a29      	ldr	r2, [pc, #164]	; (8006e84 <TIM_Base_SetConfig+0xb8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00b      	beq.n	8006dfc <TIM_Base_SetConfig+0x30>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d007      	beq.n	8006dfc <TIM_Base_SetConfig+0x30>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a26      	ldr	r2, [pc, #152]	; (8006e88 <TIM_Base_SetConfig+0xbc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0x30>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a25      	ldr	r2, [pc, #148]	; (8006e8c <TIM_Base_SetConfig+0xc0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d108      	bne.n	8006e0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <TIM_Base_SetConfig+0xb8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00b      	beq.n	8006e2e <TIM_Base_SetConfig+0x62>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1c:	d007      	beq.n	8006e2e <TIM_Base_SetConfig+0x62>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <TIM_Base_SetConfig+0xbc>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d003      	beq.n	8006e2e <TIM_Base_SetConfig+0x62>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <TIM_Base_SetConfig+0xc0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d108      	bne.n	8006e40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <TIM_Base_SetConfig+0xb8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d103      	bne.n	8006e74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	615a      	str	r2, [r3, #20]
}
 8006e7a:	bf00      	nop
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800

08006e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 0302 	bic.w	r3, r3, #2
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a1c      	ldr	r2, [pc, #112]	; (8006f58 <TIM_OC1_SetConfig+0xc8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d10c      	bne.n	8006f06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0308 	bic.w	r3, r3, #8
 8006ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a13      	ldr	r2, [pc, #76]	; (8006f58 <TIM_OC1_SetConfig+0xc8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d111      	bne.n	8006f32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	621a      	str	r2, [r3, #32]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40012c00 	.word	0x40012c00

08006f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f023 0210 	bic.w	r2, r3, #16
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0320 	bic.w	r3, r3, #32
 8006fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1d      	ldr	r2, [pc, #116]	; (800702c <TIM_OC2_SetConfig+0xd0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d10d      	bne.n	8006fd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a14      	ldr	r2, [pc, #80]	; (800702c <TIM_OC2_SetConfig+0xd0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d113      	bne.n	8007008 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	621a      	str	r2, [r3, #32]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr
 800702c:	40012c00 	.word	0x40012c00

08007030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0303 	bic.w	r3, r3, #3
 8007066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1d      	ldr	r2, [pc, #116]	; (8007100 <TIM_OC3_SetConfig+0xd0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d10d      	bne.n	80070aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a14      	ldr	r2, [pc, #80]	; (8007100 <TIM_OC3_SetConfig+0xd0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d113      	bne.n	80070da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	621a      	str	r2, [r3, #32]
}
 80070f4:	bf00      	nop
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40012c00 	.word	0x40012c00

08007104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800714e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	031b      	lsls	r3, r3, #12
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a0f      	ldr	r2, [pc, #60]	; (800719c <TIM_OC4_SetConfig+0x98>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d109      	bne.n	8007178 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800716a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	019b      	lsls	r3, r3, #6
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	40012c00 	.word	0x40012c00

080071a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f023 0201 	bic.w	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4a1f      	ldr	r2, [pc, #124]	; (8007248 <TIM_TI1_SetConfig+0xa8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00b      	beq.n	80071e6 <TIM_TI1_SetConfig+0x46>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d4:	d007      	beq.n	80071e6 <TIM_TI1_SetConfig+0x46>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a1c      	ldr	r2, [pc, #112]	; (800724c <TIM_TI1_SetConfig+0xac>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d003      	beq.n	80071e6 <TIM_TI1_SetConfig+0x46>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <TIM_TI1_SetConfig+0xb0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d101      	bne.n	80071ea <TIM_TI1_SetConfig+0x4a>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <TIM_TI1_SetConfig+0x4c>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e003      	b.n	800720a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	b2db      	uxtb	r3, r3
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f023 030a 	bic.w	r3, r3, #10
 8007224:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f003 030a 	and.w	r3, r3, #10
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40000400 	.word	0x40000400
 8007250:	40000800 	.word	0x40000800

08007254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0201 	bic.w	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800727e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 030a 	bic.w	r3, r3, #10
 8007290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0210 	bic.w	r2, r3, #16
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	031b      	lsls	r3, r3, #12
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007302:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr

08007328 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	f023 0210 	bic.w	r2, r3, #16
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007352:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	031b      	lsls	r3, r3, #12
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007364:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	621a      	str	r2, [r3, #32]
}
 800737c:	bf00      	nop
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr

08007386 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007386:	b480      	push	{r7}
 8007388:	b087      	sub	sp, #28
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007428:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800743a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	031b      	lsls	r3, r3, #12
 8007440:	b29b      	uxth	r3, r3
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800744e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	031b      	lsls	r3, r3, #12
 8007454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr

08007474 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4313      	orrs	r3, r2
 8007492:	f043 0307 	orr.w	r3, r3, #7
 8007496:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	609a      	str	r2, [r3, #8]
}
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	021a      	lsls	r2, r3, #8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr

080074e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2201      	movs	r2, #1
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	43db      	mvns	r3, r3
 8007508:	401a      	ands	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	fa01 f303 	lsl.w	r3, r1, r3
 800751e:	431a      	orrs	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
	...

08007530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007544:	2302      	movs	r3, #2
 8007546:	e046      	b.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a16      	ldr	r2, [pc, #88]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007594:	d009      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a12      	ldr	r2, [pc, #72]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a10      	ldr	r2, [pc, #64]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d10c      	bne.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40000400 	.word	0x40000400
 80075e8:	40000800 	.word	0x40000800

080075ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e03d      	b.n	8007684 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e03f      	b.n	8007744 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fb ffa1 	bl	8003620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2224      	movs	r2, #36	; 0x24
 80076e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f904 	bl	8007904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800770a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695a      	ldr	r2, [r3, #20]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800771a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800772a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af02      	add	r7, sp, #8
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b20      	cmp	r3, #32
 800776a:	d17c      	bne.n	8007866 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_UART_Transmit+0x2c>
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e075      	b.n	8007868 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UART_Transmit+0x3e>
 8007786:	2302      	movs	r3, #2
 8007788:	e06e      	b.n	8007868 <HAL_UART_Transmit+0x11c>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2221      	movs	r2, #33	; 0x21
 800779c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80077a0:	f7fc f8a0 	bl	80038e4 <HAL_GetTick>
 80077a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	88fa      	ldrh	r2, [r7, #6]
 80077aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	d108      	bne.n	80077ce <HAL_UART_Transmit+0x82>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d104      	bne.n	80077ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	e003      	b.n	80077d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80077de:	e02a      	b.n	8007836 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2200      	movs	r2, #0
 80077e8:	2180      	movs	r1, #128	; 0x80
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f840 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e036      	b.n	8007868 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800780e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	3302      	adds	r3, #2
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	e007      	b.n	8007828 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	3301      	adds	r3, #1
 8007826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1cf      	bne.n	80077e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2200      	movs	r2, #0
 8007848:	2140      	movs	r1, #64	; 0x40
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f810 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e006      	b.n	8007868 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e000      	b.n	8007868 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007866:	2302      	movs	r3, #2
  }
}
 8007868:	4618      	mov	r0, r3
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007880:	e02c      	b.n	80078dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007888:	d028      	beq.n	80078dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007890:	f7fc f828 	bl	80038e4 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	429a      	cmp	r2, r3
 800789e:	d21d      	bcs.n	80078dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695a      	ldr	r2, [r3, #20]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e00f      	b.n	80078fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4013      	ands	r3, r2
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d0c3      	beq.n	8007882 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800793e:	f023 030c 	bic.w	r3, r3, #12
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	430b      	orrs	r3, r1
 800794a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2c      	ldr	r2, [pc, #176]	; (8007a18 <UART_SetConfig+0x114>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d103      	bne.n	8007974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fe fb42 	bl	8005ff4 <HAL_RCC_GetPCLK2Freq>
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	e002      	b.n	800797a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007974:	f7fe fb2a 	bl	8005fcc <HAL_RCC_GetPCLK1Freq>
 8007978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009a      	lsls	r2, r3, #2
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007990:	4a22      	ldr	r2, [pc, #136]	; (8007a1c <UART_SetConfig+0x118>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	095b      	lsrs	r3, r3, #5
 8007998:	0119      	lsls	r1, r3, #4
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009a      	lsls	r2, r3, #2
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <UART_SetConfig+0x118>)
 80079b2:	fba3 0302 	umull	r0, r3, r3, r2
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	2064      	movs	r0, #100	; 0x64
 80079ba:	fb00 f303 	mul.w	r3, r0, r3
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	3332      	adds	r3, #50	; 0x32
 80079c4:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <UART_SetConfig+0x118>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d0:	4419      	add	r1, r3
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009a      	lsls	r2, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <UART_SetConfig+0x118>)
 80079ea:	fba3 0302 	umull	r0, r3, r3, r2
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	2064      	movs	r0, #100	; 0x64
 80079f2:	fb00 f303 	mul.w	r3, r0, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	3332      	adds	r3, #50	; 0x32
 80079fc:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <UART_SetConfig+0x118>)
 80079fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40013800 	.word	0x40013800
 8007a1c:	51eb851f 	.word	0x51eb851f

08007a20 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"




Controller::Controller() {}
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af04      	add	r7, sp, #16
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a5d      	ldr	r2, [pc, #372]	; (8007ba0 <_ZN10ControllerC1Ev+0x180>)
 8007a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a5c      	ldr	r2, [pc, #368]	; (8007ba4 <_ZN10ControllerC1Ev+0x184>)
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007a3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7f9 f923 	bl	8000c8c <__aeabi_i2f>
 8007a46:	4603      	mov	r3, r0
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a4e:	f7f9 fa25 	bl	8000e9c <__aeabi_fdiv>
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a52      	ldr	r2, [pc, #328]	; (8007ba8 <_ZN10ControllerC1Ev+0x188>)
 8007a5e:	645a      	str	r2, [r3, #68]	; 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a52      	ldr	r2, [pc, #328]	; (8007bac <_ZN10ControllerC1Ev+0x18c>)
 8007a64:	649a      	str	r2, [r3, #72]	; 0x48
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a51      	ldr	r2, [pc, #324]	; (8007bb0 <_ZN10ControllerC1Ev+0x190>)
 8007a6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	651a      	str	r2, [r3, #80]	; 0x50
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a4f      	ldr	r2, [pc, #316]	; (8007bb4 <_ZN10ControllerC1Ev+0x194>)
 8007a78:	655a      	str	r2, [r3, #84]	; 0x54
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a4e      	ldr	r2, [pc, #312]	; (8007bb8 <_ZN10ControllerC1Ev+0x198>)
 8007a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a4e      	ldr	r2, [pc, #312]	; (8007bbc <_ZN10ControllerC1Ev+0x19c>)
 8007a84:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	661a      	str	r2, [r3, #96]	; 0x60
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	665a      	str	r2, [r3, #100]	; 0x64
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	669a      	str	r2, [r3, #104]	; 0x68
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a47      	ldr	r2, [pc, #284]	; (8007bc0 <_ZN10ControllerC1Ev+0x1a0>)
 8007aa2:	66da      	str	r2, [r3, #108]	; 0x6c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a47      	ldr	r2, [pc, #284]	; (8007bc4 <_ZN10ControllerC1Ev+0x1a4>)
 8007aa8:	671a      	str	r2, [r3, #112]	; 0x70
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7f8 fca0 	bl	80003f4 <__aeabi_i2d>
 8007ab4:	a334      	add	r3, pc, #208	; (adr r3, 8007b88 <_ZN10ControllerC1Ev+0x168>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fd05 	bl	80004c8 <__aeabi_dmul>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	f7f8 ffd7 	bl	8000a78 <__aeabi_d2f>
 8007aca:	4602      	mov	r2, r0
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	675a      	str	r2, [r3, #116]	; 0x74
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a3d      	ldr	r2, [pc, #244]	; (8007bc8 <_ZN10ControllerC1Ev+0x1a8>)
 8007ad4:	679a      	str	r2, [r3, #120]	; 0x78
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a3b      	ldr	r2, [pc, #236]	; (8007bc8 <_ZN10ControllerC1Ev+0x1a8>)
 8007ada:	67da      	str	r2, [r3, #124]	; 0x7c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8007ae2:	a32b      	add	r3, pc, #172	; (adr r3, 8007b90 <_ZN10ControllerC1Ev+0x170>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007aec:	a328      	add	r3, pc, #160	; (adr r3, 8007b90 <_ZN10ControllerC1Ev+0x170>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	e9cd 2300 	strd	r2, r3, [sp]
 8007af6:	a328      	add	r3, pc, #160	; (adr r3, 8007b98 <_ZN10ControllerC1Ev+0x178>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	4608      	mov	r0, r1
 8007afe:	f003 fca1 	bl	800b444 <_ZN3lpfC1Eddd>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8007b08:	a321      	add	r3, pc, #132	; (adr r3, 8007b90 <_ZN10ControllerC1Ev+0x170>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b12:	a31f      	add	r3, pc, #124	; (adr r3, 8007b90 <_ZN10ControllerC1Ev+0x170>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	e9cd 2300 	strd	r2, r3, [sp]
 8007b1c:	a31e      	add	r3, pc, #120	; (adr r3, 8007b98 <_ZN10ControllerC1Ev+0x178>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	4608      	mov	r0, r1
 8007b24:	f003 fc8e 	bl	800b444 <_ZN3lpfC1Eddd>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8007b2e:	a318      	add	r3, pc, #96	; (adr r3, 8007b90 <_ZN10ControllerC1Ev+0x170>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b38:	a315      	add	r3, pc, #84	; (adr r3, 8007b90 <_ZN10ControllerC1Ev+0x170>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8007b42:	a315      	add	r3, pc, #84	; (adr r3, 8007b98 <_ZN10ControllerC1Ev+0x178>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	4608      	mov	r0, r1
 8007b4a:	f003 fc7b 	bl	800b444 <_ZN3lpfC1Eddd>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007b54:	4618      	mov	r0, r3
 8007b56:	f003 f87b 	bl	800ac50 <_ZN3PIDC1Ev>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8007b60:	4618      	mov	r0, r3
 8007b62:	f003 f875 	bl	800ac50 <_ZN3PIDC1Ev>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f003 f86f 	bl	800ac50 <_ZN3PIDC1Ev>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f003 f869 	bl	800ac50 <_ZN3PIDC1Ev>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	eb851eb8 	.word	0xeb851eb8
 8007b8c:	3f9eb851 	.word	0x3f9eb851
 8007b90:	fc3b4f61 	.word	0xfc3b4f61
 8007b94:	3fa35935 	.word	0x3fa35935
 8007b98:	4f0d844d 	.word	0x4f0d844d
 8007b9c:	3fed94af 	.word	0x3fed94af
 8007ba0:	44c1c000 	.word	0x44c1c000
 8007ba4:	42654ca3 	.word	0x42654ca3
 8007ba8:	3fb33333 	.word	0x3fb33333
 8007bac:	411cf5c3 	.word	0x411cf5c3
 8007bb0:	41f9d70a 	.word	0x41f9d70a
 8007bb4:	3e19999a 	.word	0x3e19999a
 8007bb8:	3c23d70a 	.word	0x3c23d70a
 8007bbc:	3cf5c28f 	.word	0x3cf5c28f
 8007bc0:	40a00000 	.word	0x40a00000
 8007bc4:	40d00000 	.word	0x40d00000
 8007bc8:	41700000 	.word	0x41700000

08007bcc <_ZN10Controller3RunEv>:

std::vector<float> Controller::Run (void) {
 8007bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	b09a      	sub	sp, #104	; 0x68
 8007bd2:	af04      	add	r7, sp, #16
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007c38:	653b      	str	r3, [r7, #80]	; 0x50
        float pitch_des 	 = state_des.angles[1];
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007c40:	64fb      	str	r3, [r7, #76]	; 0x4c
        float yaw_rate_des = state_des.rates[2];
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007c48:	64bb      	str	r3, [r7, #72]	; 0x48

        roll_des 	  	= roll_des_filt.Run(roll_des);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	3380      	adds	r3, #128	; 0x80
 8007c4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c50:	4618      	mov	r0, r3
 8007c52:	f003 fc12 	bl	800b47a <_ZN3lpf3RunEf>
 8007c56:	6538      	str	r0, [r7, #80]	; 0x50
        pitch_des 		= pitch_des_filt.Run(pitch_des);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	33a8      	adds	r3, #168	; 0xa8
 8007c5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f003 fc0b 	bl	800b47a <_ZN3lpf3RunEf>
 8007c64:	64f8      	str	r0, [r7, #76]	; 0x4c
        yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	33d0      	adds	r3, #208	; 0xd0
 8007c6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f003 fc04 	bl	800b47a <_ZN3lpf3RunEf>
 8007c72:	64b8      	str	r0, [r7, #72]	; 0x48
    roll_rate_des  = pid_roll.P_Sqrt(roll_des,  roll,  Kp_angle);
    pitch_rate_des = pid_roll.P_Sqrt(pitch_des, pitch, Kp_angle);
*/


    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c84:	f003 f836 	bl	800acf4 <_ZN3PID7P_AngleEfff>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ca0:	f003 f828 	bl	800acf4 <_ZN3PID7P_AngleEfff>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
    //p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
*/
    //PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle)
    pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	699e      	ldr	r6, [r3, #24]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8007cce:	6838      	ldr	r0, [r7, #0]
 8007cd0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007cd2:	9003      	str	r0, [sp, #12]
 8007cd4:	9102      	str	r1, [sp, #8]
 8007cd6:	9201      	str	r2, [sp, #4]
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	4663      	mov	r3, ip
 8007cdc:	4632      	mov	r2, r6
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f003 f881 	bl	800ade8 <_ZN3PID9PID_Rate2Efffffff>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	69de      	ldr	r6, [r3, #28]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007d10:	6838      	ldr	r0, [r7, #0]
 8007d12:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007d14:	9003      	str	r0, [sp, #12]
 8007d16:	9102      	str	r1, [sp, #8]
 8007d18:	9201      	str	r2, [sp, #4]
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	4663      	mov	r3, ip
 8007d1e:	4632      	mov	r2, r6
 8007d20:	4629      	mov	r1, r5
 8007d22:	4620      	mov	r0, r4
 8007d24:	f003 f860 	bl	800ade8 <_ZN3PID9PID_Rate2Efffffff>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	6a1a      	ldr	r2, [r3, #32]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	f04f 0400 	mov.w	r4, #0
 8007d46:	9401      	str	r4, [sp, #4]
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007d4e:	f003 f907 	bl	800af60 <_ZN3PID7PD_RateEfffff>
 8007d52:	4602      	mov	r2, r0
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);
    int thr;
    switch(mod) {
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <_ZN10Controller3RunEv+0x19e>
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d013      	beq.n	8007d90 <_ZN10Controller3RunEv+0x1c4>
 8007d68:	e0c1      	b.n	8007eee <_ZN10Controller3RunEv+0x322>
    	case STABILIZE:
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	f8d3 1174 	ldr.w	r1, [r3, #372]	; 0x174
 8007d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d7a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8007d7e:	f003 fa3d 	bl	800b1fc <_ZN3PID3SatEfii>
 8007d82:	4603      	mov	r3, r0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f9 f9b1 	bl	80010ec <__aeabi_f2iz>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	657b      	str	r3, [r7, #84]	; 0x54
    	    break;
 8007d8e:	e0ae      	b.n	8007eee <_ZN10Controller3RunEv+0x322>
    	case ALT_HOLD:
    		F = p_alt.PI_Alt(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	f503 7652 	add.w	r6, r3, #840	; 0x348
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	f8d3 816c 	ldr.w	r8, [r3, #364]	; 0x16c
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	f8d3 9170 	ldr.w	r9, [r3, #368]	; 0x170
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	f8d3 a168 	ldr.w	sl, [r3, #360]	; 0x168
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7f9 f9be 	bl	8001138 <__aeabi_f2uiz>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	9501      	str	r5, [sp, #4]
 8007dc2:	9400      	str	r4, [sp, #0]
 8007dc4:	4653      	mov	r3, sl
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	4641      	mov	r1, r8
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f002 ffb0 	bl	800ad30 <_ZN3PID6PI_AltEfffffj>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7f8 ffa9 	bl	8000d34 <__aeabi_fmul>
 8007de2:	4603      	mov	r3, r0
 8007de4:	4619      	mov	r1, r3
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7f8 fe9c 	bl	8000b24 <__addsf3>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			float deg2rad = 0.0175;
 8007df6:	4bb3      	ldr	r3, [pc, #716]	; (80080c4 <_ZN10Controller3RunEv+0x4f8>)
 8007df8:	647b      	str	r3, [r7, #68]	; 0x44
			float roll_r = roll * deg2rad;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e02:	f7f8 ff97 	bl	8000d34 <__aeabi_fmul>
 8007e06:	4603      	mov	r3, r0
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
			float pitch_r = pitch * deg2rad;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e12:	f7f8 ff8f 	bl	8000d34 <__aeabi_fmul>
 8007e16:	4603      	mov	r3, r0
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 8007e1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007e1c:	f7f9 fd42 	bl	80018a4 <_ZSt3cosf>
 8007e20:	4603      	mov	r3, r0
 8007e22:	4619      	mov	r1, r3
 8007e24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007e28:	f7f9 f838 	bl	8000e9c <__aeabi_fdiv>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461c      	mov	r4, r3
 8007e30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e32:	f7f9 fd37 	bl	80018a4 <_ZSt3cosf>
 8007e36:	4603      	mov	r3, r0
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7f9 f82e 	bl	8000e9c <__aeabi_fdiv>
 8007e40:	4603      	mov	r3, r0
 8007e42:	63bb      	str	r3, [r7, #56]	; 0x38

			F = F * b2e ; // Body to Earth
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7f8 ff71 	bl	8000d34 <__aeabi_fmul>
 8007e52:	4603      	mov	r3, r0
 8007e54:	461a      	mov	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			F = p_alt.Sat(F, F_max, F_min);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	f8d3 511c 	ldr.w	r5, [r3, #284]	; 0x11c
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f9 f93d 	bl	80010ec <__aeabi_f2iz>
 8007e72:	4606      	mov	r6, r0
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7f9 f937 	bl	80010ec <__aeabi_f2iz>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4632      	mov	r2, r6
 8007e82:	4629      	mov	r1, r5
 8007e84:	4620      	mov	r0, r4
 8007e86:	f003 f9b9 	bl	800b1fc <_ZN3PID3SatEfii>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			thr = p_alt.F2thr(F);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	f503 7252 	add.w	r2, r3, #840	; 0x348
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f003 fa89 	bl	800b3b8 <_ZN3PID5F2thrEf>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	657b      	str	r3, [r7, #84]	; 0x54
			thr = p_alt.Sat(thr, 1800, 1100);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8007eb0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007eb2:	f7f8 feeb 	bl	8000c8c <__aeabi_i2f>
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	f240 434c 	movw	r3, #1100	; 0x44c
 8007ebc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f003 f99b 	bl	800b1fc <_ZN3PID3SatEfii>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7f9 f90f 	bl	80010ec <__aeabi_f2iz>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	657b      	str	r3, [r7, #84]	; 0x54
			alt_thr = thr;
 8007ed2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007ed4:	f7f8 feda 	bl	8000c8c <__aeabi_i2f>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
			z0 = p_alt.zi;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			break;
 8007eec:	bf00      	nop

    }


    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 8007eee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007ef0:	f7f8 fecc 	bl	8000c8c <__aeabi_i2f>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f7f8 fe10 	bl	8000b24 <__addsf3>
 8007f04:	4603      	mov	r3, r0
 8007f06:	461a      	mov	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7f8 fe05 	bl	8000b20 <__aeabi_fsub>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007f20:	4619      	mov	r1, r3
 8007f22:	4610      	mov	r0, r2
 8007f24:	f7f8 fdfc 	bl	8000b20 <__aeabi_fsub>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7f8 fdf8 	bl	8000b24 <__addsf3>
 8007f34:	4603      	mov	r3, r0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7f8 fa6e 	bl	8000418 <__aeabi_f2d>
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	4b61      	ldr	r3, [pc, #388]	; (80080c8 <_ZN10Controller3RunEv+0x4fc>)
 8007f42:	f7f8 f909 	bl	8000158 <__aeabi_dsub>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	f7f8 fd6b 	bl	8000a28 <__aeabi_d2iz>
 8007f52:	4603      	mov	r3, r0
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 8007f56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007f58:	f7f8 fe98 	bl	8000c8c <__aeabi_i2f>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7f8 fdda 	bl	8000b20 <__aeabi_fsub>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f7f8 fdd3 	bl	8000b24 <__addsf3>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	461a      	mov	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f7f8 fdc8 	bl	8000b20 <__aeabi_fsub>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7f8 fdc2 	bl	8000b20 <__aeabi_fsub>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f8 fa3a 	bl	8000418 <__aeabi_f2d>
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	4b47      	ldr	r3, [pc, #284]	; (80080c8 <_ZN10Controller3RunEv+0x4fc>)
 8007faa:	f7f8 f8d7 	bl	800015c <__adddf3>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f7f8 fd37 	bl	8000a28 <__aeabi_d2iz>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	633b      	str	r3, [r7, #48]	; 0x30
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 8007fbe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007fc0:	f7f8 fe64 	bl	8000c8c <__aeabi_i2f>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f7f8 fda8 	bl	8000b24 <__addsf3>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	f7f8 fd9f 	bl	8000b24 <__addsf3>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	461a      	mov	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	f7f8 fd96 	bl	8000b24 <__addsf3>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7f8 fd90 	bl	8000b24 <__addsf3>
 8008004:	4603      	mov	r3, r0
 8008006:	4618      	mov	r0, r3
 8008008:	f7f8 fa06 	bl	8000418 <__aeabi_f2d>
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	4b2d      	ldr	r3, [pc, #180]	; (80080c8 <_ZN10Controller3RunEv+0x4fc>)
 8008012:	f7f8 f8a3 	bl	800015c <__adddf3>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	f7f8 fd03 	bl	8000a28 <__aeabi_d2iz>
 8008022:	4603      	mov	r3, r0
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 8008026:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008028:	f7f8 fe30 	bl	8000c8c <__aeabi_i2f>
 800802c:	4602      	mov	r2, r0
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f7f8 fd72 	bl	8000b20 <__aeabi_fsub>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7f8 fd69 	bl	8000b20 <__aeabi_fsub>
 800804e:	4603      	mov	r3, r0
 8008050:	461a      	mov	r2, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f7f8 fd62 	bl	8000b24 <__addsf3>
 8008060:	4603      	mov	r3, r0
 8008062:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008066:	4618      	mov	r0, r3
 8008068:	f7f8 fd5a 	bl	8000b20 <__aeabi_fsub>
 800806c:	4603      	mov	r3, r0
 800806e:	4618      	mov	r0, r3
 8008070:	f7f8 f9d2 	bl	8000418 <__aeabi_f2d>
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <_ZN10Controller3RunEv+0x4fc>)
 800807a:	f7f8 f86d 	bl	8000158 <__aeabi_dsub>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4610      	mov	r0, r2
 8008084:	4619      	mov	r1, r3
 8008086:	f7f8 fccf 	bl	8000a28 <__aeabi_d2iz>
 800808a:	4603      	mov	r3, r0
 800808c:	62bb      	str	r3, [r7, #40]	; 0x28


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8008094:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008096:	f7f8 fdf9 	bl	8000c8c <__aeabi_i2f>
 800809a:	4601      	mov	r1, r0
 800809c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	f240 434c 	movw	r3, #1100	; 0x44c
 80080a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80080a8:	4620      	mov	r0, r4
 80080aa:	f003 f86d 	bl	800b188 <_ZN3PID3SatEfiii>
 80080ae:	4603      	mov	r3, r0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7f9 f81b 	bl	80010ec <__aeabi_f2iz>
 80080b6:	4603      	mov	r3, r0
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 80080c0:	e004      	b.n	80080cc <_ZN10Controller3RunEv+0x500>
 80080c2:	bf00      	nop
 80080c4:	3c8f5c29 	.word	0x3c8f5c29
 80080c8:	40120000 	.word	0x40120000
 80080cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ce:	f7f8 fddd 	bl	8000c8c <__aeabi_i2f>
 80080d2:	4601      	mov	r1, r0
 80080d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	f240 434c 	movw	r3, #1100	; 0x44c
 80080dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80080e0:	4620      	mov	r0, r4
 80080e2:	f003 f851 	bl	800b188 <_ZN3PID3SatEfiii>
 80080e6:	4603      	mov	r3, r0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7f8 ffff 	bl	80010ec <__aeabi_f2iz>
 80080ee:	4603      	mov	r3, r0
 80080f0:	633b      	str	r3, [r7, #48]	; 0x30
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 80080f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080fa:	f7f8 fdc7 	bl	8000c8c <__aeabi_i2f>
 80080fe:	4601      	mov	r1, r0
 8008100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	f240 434c 	movw	r3, #1100	; 0x44c
 8008108:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800810c:	4620      	mov	r0, r4
 800810e:	f003 f83b 	bl	800b188 <_ZN3PID3SatEfiii>
 8008112:	4603      	mov	r3, r0
 8008114:	4618      	mov	r0, r3
 8008116:	f7f8 ffe9 	bl	80010ec <__aeabi_f2iz>
 800811a:	4603      	mov	r3, r0
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8008124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008126:	f7f8 fdb1 	bl	8000c8c <__aeabi_i2f>
 800812a:	4601      	mov	r1, r0
 800812c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	f240 434c 	movw	r3, #1100	; 0x44c
 8008134:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008138:	4620      	mov	r0, r4
 800813a:	f003 f825 	bl	800b188 <_ZN3PID3SatEfiii>
 800813e:	4603      	mov	r3, r0
 8008140:	4618      	mov	r0, r3
 8008142:	f7f8 ffd3 	bl	80010ec <__aeabi_f2iz>
 8008146:	4603      	mov	r3, r0
 8008148:	62bb      	str	r3, [r7, #40]	; 0x28
    pwm2 = 1000;
    pwm3 = 1000;
    pwm4 = 1000; */

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008152:	b291      	uxth	r1, r2
 8008154:	2201      	movs	r2, #1
 8008156:	4618      	mov	r0, r3
 8008158:	f003 f8e6 	bl	800b328 <_ZN3PID7pwm2motEti>
 800815c:	4602      	mov	r2, r0
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	625a      	str	r2, [r3, #36]	; 0x24
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816a:	b291      	uxth	r1, r2
 800816c:	2201      	movs	r2, #1
 800816e:	4618      	mov	r0, r3
 8008170:	f003 f8da 	bl	800b328 <_ZN3PID7pwm2motEti>
 8008174:	4602      	mov	r2, r0
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	629a      	str	r2, [r3, #40]	; 0x28
    w3 = pid_roll.pwm2mot(pwm3,-1);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008182:	b291      	uxth	r1, r2
 8008184:	f04f 32ff 	mov.w	r2, #4294967295
 8008188:	4618      	mov	r0, r3
 800818a:	f003 f8cd 	bl	800b328 <_ZN3PID7pwm2motEti>
 800818e:	4602      	mov	r2, r0
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	62da      	str	r2, [r3, #44]	; 0x2c
    w4 = pid_roll.pwm2mot(pwm4,-1);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800819a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819c:	b291      	uxth	r1, r2
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	4618      	mov	r0, r3
 80081a4:	f003 f8c0 	bl	800b328 <_ZN3PID7pwm2motEti>
 80081a8:	4602      	mov	r2, r0
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30


    std::vector<float> controller_output = 	{w1,w2,w3,w4};
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	61fb      	str	r3, [r7, #28]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	623b      	str	r3, [r7, #32]
 80081c6:	f107 0314 	add.w	r3, r7, #20
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	2304      	movs	r3, #4
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fa ff0d 	bl	8002ff4 <_ZNSaIfEC1Ev>
 80081da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081de:	f107 020c 	add.w	r2, r7, #12
 80081e2:	ca06      	ldmia	r2, {r1, r2}
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f84b 	bl	8008280 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 80081ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fa feab 	bl	8002f4a <_ZNSaIfED1Ev>
    controller_output_pwm[0] = pwm1;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081f8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    controller_output_pwm[1] = pwm2;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008200:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    controller_output_pwm[2] = pwm3;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008208:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    controller_output_pwm[3] = pwm4;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008210:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    return controller_output;
 8008214:	bf00      	nop
}
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	3758      	adds	r7, #88	; 0x58
 800821a:	46bd      	mov	sp, r7
 800821c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008220 <_ZN10ControllerD1Ev>:
    controller_output_pwm[3] = pwm4;

    return controller_output;
}
*/
Controller::~Controller() {}
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800822e:	4618      	mov	r0, r3
 8008230:	f003 f8fa 	bl	800b428 <_ZN3PIDD1Ev>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800823a:	4618      	mov	r0, r3
 800823c:	f003 f8f4 	bl	800b428 <_ZN3PIDD1Ev>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8008246:	4618      	mov	r0, r3
 8008248:	f003 f8ee 	bl	800b428 <_ZN3PIDD1Ev>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008252:	4618      	mov	r0, r3
 8008254:	f003 f8e8 	bl	800b428 <_ZN3PIDD1Ev>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	33d0      	adds	r3, #208	; 0xd0
 800825c:	4618      	mov	r0, r3
 800825e:	f003 f962 	bl	800b526 <_ZN3lpfD1Ev>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	33a8      	adds	r3, #168	; 0xa8
 8008266:	4618      	mov	r0, r3
 8008268:	f003 f95d 	bl	800b526 <_ZN3lpfD1Ev>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3380      	adds	r3, #128	; 0x80
 8008270:	4618      	mov	r0, r3
 8008272:	f003 f958 	bl	800b526 <_ZN3lpfD1Ev>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 8008280:	b5b0      	push	{r4, r5, r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	1d38      	adds	r0, r7, #4
 800828a:	e880 0006 	stmia.w	r0, {r1, r2}
 800828e:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f7fa ffea 	bl	800326e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f810 	bl	80082c2 <_ZNKSt16initializer_listIfE5beginEv>
 80082a2:	4604      	mov	r4, r0
 80082a4:	1d3b      	adds	r3, r7, #4
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f816 	bl	80082d8 <_ZNKSt16initializer_listIfE3endEv>
 80082ac:	4602      	mov	r2, r0
 80082ae:	462b      	mov	r3, r5
 80082b0:	4621      	mov	r1, r4
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 f822 	bl	80082fc <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bdb0      	pop	{r4, r5, r7, pc}

080082c2 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr

080082d8 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80082d8:	b590      	push	{r4, r7, lr}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff ffee 	bl	80082c2 <_ZNKSt16initializer_listIfE5beginEv>
 80082e6:	4604      	mov	r4, r0
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f840 	bl	800836e <_ZNKSt16initializer_listIfE4sizeEv>
 80082ee:	4603      	mov	r3, r0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4423      	add	r3, r4
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}

080082fc <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800830a:	6879      	ldr	r1, [r7, #4]
 800830c:	68b8      	ldr	r0, [r7, #8]
 800830e:	f000 f839 	bl	8008384 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8008312:	4603      	mov	r3, r0
 8008314:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008316:	68fc      	ldr	r4, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4618      	mov	r0, r3
 800831c:	f7fa fea6 	bl	800306c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008320:	4603      	mov	r3, r0
 8008322:	4619      	mov	r1, r3
 8008324:	6978      	ldr	r0, [r7, #20]
 8008326:	f000 f841 	bl	80083ac <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 800832a:	4603      	mov	r3, r0
 800832c:	4619      	mov	r1, r3
 800832e:	4620      	mov	r0, r4
 8008330:	f000 f864 	bl	80083fc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8008334:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	441a      	add	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fa fe8c 	bl	800306c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008354:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8008356:	4622      	mov	r2, r4
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	68b8      	ldr	r0, [r7, #8]
 800835c:	f000 f862 	bl	8008424 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8008360:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	605a      	str	r2, [r3, #4]
	}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	bd90      	pop	{r4, r7, pc}

0800836e <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	bc80      	pop	{r7}
 8008382:	4770      	bx	lr

08008384 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008384:	b5b0      	push	{r4, r5, r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800838e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008390:	1d3b      	adds	r3, r7, #4
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f857 	bl	8008446 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8008398:	462a      	mov	r2, r5
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	4620      	mov	r0, r4
 800839e:	f000 f85b 	bl	8008458 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80083a2:	4603      	mov	r3, r0
    }
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bdb0      	pop	{r4, r5, r7, pc}

080083ac <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fa ff48 	bl	8003252 <_ZNSaIfEC1ERKS_>
 80083c2:	f107 030c 	add.w	r3, r7, #12
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f855 	bl	8008476 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 80083cc:	4602      	mov	r2, r0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4293      	cmp	r3, r2
 80083d2:	bf8c      	ite	hi
 80083d4:	2301      	movhi	r3, #1
 80083d6:	2300      	movls	r3, #0
 80083d8:	b2dc      	uxtb	r4, r3
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fa fdb3 	bl	8002f4a <_ZNSaIfED1Ev>
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	d002      	beq.n	80083ee <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80083e8:	4803      	ldr	r0, [pc, #12]	; (80083f8 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 80083ea:	f003 f8bc 	bl	800b566 <_ZSt20__throw_length_errorPKc>
	return __n;
 80083ee:	687b      	ldr	r3, [r7, #4]
      }
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd90      	pop	{r4, r7, pc}
 80083f8:	0800d724 	.word	0x0800d724

080083fc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d006      	beq.n	800841a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f84a 	bl	80084aa <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8008416:	4603      	mov	r3, r0
 8008418:	e000      	b.n	800841c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800841a:	2300      	movs	r3, #0
      }
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 f846 	bl	80084c8 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 800843c:	4603      	mov	r3, r0
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr

08008458 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	109b      	asrs	r3, r3, #2
    }
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr

08008476 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800847e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008482:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f831 	bl	80084ec <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800848a:	4603      	mov	r3, r0
 800848c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800848e:	f107 0208 	add.w	r2, r7, #8
 8008492:	f107 030c 	add.w	r3, r7, #12
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f833 	bl	8008504 <_ZSt3minIjERKT_S2_S2_>
 800849e:	4603      	mov	r3, r0
 80084a0:	681b      	ldr	r3, [r3, #0]
      }
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80084b4:	2200      	movs	r2, #0
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f836 	bl	800852a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 80084be:	4603      	mov	r3, r0
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80084d4:	2301      	movs	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f842 	bl	8008566 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 80084e2:	4603      	mov	r3, r0
    }
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f846 	bl	8008586 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 80084fa:	4603      	mov	r3, r0
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d201      	bcs.n	800851e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	e000      	b.n	8008520 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800851e:	687b      	ldr	r3, [r7, #4]
    }
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f825 	bl	8008586 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800853c:	4602      	mov	r2, r0
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4293      	cmp	r3, r2
 8008542:	bf8c      	ite	hi
 8008544:	2301      	movhi	r3, #1
 8008546:	2300      	movls	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800854e:	f003 f807 	bl	800b560 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4618      	mov	r0, r3
 8008558:	f002 fff1 	bl	800b53e <_Znwj>
 800855c:	4603      	mov	r3, r0
      }
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f810 	bl	800859c <_ZSt4copyIPKfPfET0_T_S4_S3_>
 800857c:	4603      	mov	r3, r0
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800858e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr

0800859c <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800859c:	b590      	push	{r4, r7, lr}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 f80f 	bl	80085cc <_ZSt12__miter_baseIPKfET_S2_>
 80085ae:	4604      	mov	r4, r0
 80085b0:	68b8      	ldr	r0, [r7, #8]
 80085b2:	f000 f80b 	bl	80085cc <_ZSt12__miter_baseIPKfET_S2_>
 80085b6:	4603      	mov	r3, r0
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4619      	mov	r1, r3
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 f80f 	bl	80085e0 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 80085c2:	4603      	mov	r3, r0
    }
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd90      	pop	{r4, r7, pc}

080085cc <_ZSt12__miter_baseIPKfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr

080085e0 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80085e0:	b5b0      	push	{r4, r5, r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f81a 	bl	8008626 <_ZSt12__niter_baseIPKfET_S2_>
 80085f2:	4604      	mov	r4, r0
 80085f4:	68b8      	ldr	r0, [r7, #8]
 80085f6:	f000 f816 	bl	8008626 <_ZSt12__niter_baseIPKfET_S2_>
 80085fa:	4605      	mov	r5, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f81b 	bl	800863a <_ZSt12__niter_baseIPfET_S1_>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	4629      	mov	r1, r5
 800860a:	4620      	mov	r0, r4
 800860c:	f000 f81f 	bl	800864e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8008610:	4602      	mov	r2, r0
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f82b 	bl	8008672 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800861c:	4603      	mov	r3, r0
    }
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bdb0      	pop	{r4, r5, r7, pc}

08008626 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr

0800863a <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr

0800864e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800865a:	2301      	movs	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f810 	bl	8008688 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8008668:	4603      	mov	r3, r0
    }
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr

08008688 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	109b      	asrs	r3, r3, #2
 800869c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d006      	beq.n	80086b2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	461a      	mov	r2, r3
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f004 fef7 	bl	800d4a0 <memmove>
	  return __result + _Num;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	4413      	add	r3, r2
	}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	0000      	movs	r0, r0
 80086c4:	0000      	movs	r0, r0
	...

080086c8 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af04      	add	r7, sp, #16
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	625a      	str	r2, [r3, #36]	; 0x24
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f04f 0200 	mov.w	r2, #0
 80086de:	629a      	str	r2, [r3, #40]	; 0x28
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a3d      	ldr	r2, [pc, #244]	; (80087e0 <_ZN15Kalman_FiltresiC1Ev+0x118>)
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a3c      	ldr	r2, [pc, #240]	; (80087e4 <_ZN15Kalman_FiltresiC1Ev+0x11c>)
 80086f2:	649a      	str	r2, [r3, #72]	; 0x48
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	; (80087e4 <_ZN15Kalman_FiltresiC1Ev+0x11c>)
 80086f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a3a      	ldr	r2, [pc, #232]	; (80087e8 <_ZN15Kalman_FiltresiC1Ev+0x120>)
 80086fe:	651a      	str	r2, [r3, #80]	; 0x50
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f04f 0200 	mov.w	r2, #0
 8008706:	655a      	str	r2, [r3, #84]	; 0x54
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	659a      	str	r2, [r3, #88]	; 0x58
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	65da      	str	r2, [r3, #92]	; 0x5c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a31      	ldr	r2, [pc, #196]	; (80087e0 <_ZN15Kalman_FiltresiC1Ev+0x118>)
 800871c:	661a      	str	r2, [r3, #96]	; 0x60
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a32      	ldr	r2, [pc, #200]	; (80087ec <_ZN15Kalman_FiltresiC1Ev+0x124>)
 8008722:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a2d      	ldr	r2, [pc, #180]	; (80087e0 <_ZN15Kalman_FiltresiC1Ev+0x118>)
 800872a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a2f      	ldr	r2, [pc, #188]	; (80087f0 <_ZN15Kalman_FiltresiC1Ev+0x128>)
 8008732:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a2e      	ldr	r2, [pc, #184]	; (80087f4 <_ZN15Kalman_FiltresiC1Ev+0x12c>)
 800873a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008744:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a2b      	ldr	r2, [pc, #172]	; (80087f8 <_ZN15Kalman_FiltresiC1Ev+0x130>)
 800874c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a2a      	ldr	r2, [pc, #168]	; (80087fc <_ZN15Kalman_FiltresiC1Ev+0x134>)
 8008754:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800875e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008768:	4618      	mov	r0, r3
 800876a:	f7f8 fa8f 	bl	8000c8c <__aeabi_i2f>
 800876e:	4603      	mov	r3, r0
 8008770:	4619      	mov	r1, r3
 8008772:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008776:	f7f8 fb91 	bl	8000e9c <__aeabi_fdiv>
 800877a:	4603      	mov	r3, r0
 800877c:	4618      	mov	r0, r3
 800877e:	f7f7 fe4b 	bl	8000418 <__aeabi_f2d>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8008792:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800879c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 80087a6:	a30a      	add	r3, pc, #40	; (adr r3, 80087d0 <_ZN15Kalman_FiltresiC1Ev+0x108>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087b0:	a307      	add	r3, pc, #28	; (adr r3, 80087d0 <_ZN15Kalman_FiltresiC1Ev+0x108>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	e9cd 2300 	strd	r2, r3, [sp]
 80087ba:	a307      	add	r3, pc, #28	; (adr r3, 80087d8 <_ZN15Kalman_FiltresiC1Ev+0x110>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	4608      	mov	r0, r1
 80087c2:	f002 fe3f 	bl	800b444 <_ZN3lpfC1Eddd>

}
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	de7ea5f8 	.word	0xde7ea5f8
 80087d4:	3fb2a454 	.word	0x3fb2a454
 80087d8:	ab367a10 	.word	0xab367a10
 80087dc:	3feb573e 	.word	0x3feb573e
 80087e0:	47c35000 	.word	0x47c35000
 80087e4:	3a83126f 	.word	0x3a83126f
 80087e8:	3ca3d70a 	.word	0x3ca3d70a
 80087ec:	461c4000 	.word	0x461c4000
 80087f0:	41200000 	.word	0x41200000
 80087f4:	4b189680 	.word	0x4b189680
 80087f8:	40a00000 	.word	0x40a00000
 80087fc:	42654ca3 	.word	0x42654ca3

08008800 <_ZN15Kalman_Filtresi3RunEv>:


void Kalman_Filtresi::Run() {
 8008800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008804:	b098      	sub	sp, #96	; 0x60
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]

  float accX = acc[0]; 
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008810:	65fb      	str	r3, [r7, #92]	; 0x5c
  float accY = acc[1];
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008818:	65bb      	str	r3, [r7, #88]	; 0x58
  float accZ = acc[2];
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8008820:	657b      	str	r3, [r7, #84]	; 0x54

  float gyroX = gyro[0]; 
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008828:	653b      	str	r3, [r7, #80]	; 0x50
  float gyroY = gyro[1];
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008830:	64fb      	str	r3, [r7, #76]	; 0x4c
  float gyroZ = gyro[2];
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008838:	64bb      	str	r3, [r7, #72]	; 0x48

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800883a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800883c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800883e:	f7f8 fa79 	bl	8000d34 <__aeabi_fmul>
 8008842:	4603      	mov	r3, r0
 8008844:	461c      	mov	r4, r3
 8008846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008848:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800884a:	f7f8 fa73 	bl	8000d34 <__aeabi_fmul>
 800884e:	4603      	mov	r3, r0
 8008850:	4619      	mov	r1, r3
 8008852:	4620      	mov	r0, r4
 8008854:	f7f8 f966 	bl	8000b24 <__addsf3>
 8008858:	4603      	mov	r3, r0
 800885a:	461c      	mov	r4, r3
 800885c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800885e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008860:	f7f8 fa68 	bl	8000d34 <__aeabi_fmul>
 8008864:	4603      	mov	r3, r0
 8008866:	4619      	mov	r1, r3
 8008868:	4620      	mov	r0, r4
 800886a:	f7f8 f95b 	bl	8000b24 <__addsf3>
 800886e:	4603      	mov	r3, r0
 8008870:	4618      	mov	r0, r3
 8008872:	f7f9 f823 	bl	80018bc <_ZSt4sqrtf>
 8008876:	6478      	str	r0, [r7, #68]	; 0x44

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 8008878:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800887a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800887c:	f7f8 fb0e 	bl	8000e9c <__aeabi_fdiv>
 8008880:	4603      	mov	r3, r0
 8008882:	4618      	mov	r0, r3
 8008884:	f7f9 f802 	bl	800188c <_ZSt4asinf>
 8008888:	4602      	mov	r2, r0
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f7f8 fa4e 	bl	8000d34 <__aeabi_fmul>
 8008898:	4603      	mov	r3, r0
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7f8 f93d 	bl	8000b24 <__addsf3>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 80088b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80088b8:	f7f8 faf0 	bl	8000e9c <__aeabi_fdiv>
 80088bc:	4603      	mov	r3, r0
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f8 ffe4 	bl	800188c <_ZSt4asinf>
 80088c4:	4602      	mov	r2, r0
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f7f8 fa30 	bl	8000d34 <__aeabi_fmul>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80088de:	4619      	mov	r1, r3
 80088e0:	4610      	mov	r0, r2
 80088e2:	f7f8 f91f 	bl	8000b24 <__addsf3>
 80088e6:	4603      	mov	r3, r0
 80088e8:	461a      	mov	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 80088f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088f2:	f7f7 fd91 	bl	8000418 <__aeabi_f2d>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80088fc:	f7f7 fde4 	bl	80004c8 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4610      	mov	r0, r2
 8008906:	4619      	mov	r1, r3
 8008908:	f7f8 f8b6 	bl	8000a78 <__aeabi_d2f>
 800890c:	4602      	mov	r2, r0
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  roll_gyro =  gyroX * st;
 8008914:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008916:	f7f7 fd7f 	bl	8000418 <__aeabi_f2d>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008920:	f7f7 fdd2 	bl	80004c8 <__aeabi_dmul>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4610      	mov	r0, r2
 800892a:	4619      	mov	r1, r3
 800892c:	f7f8 f8a4 	bl	8000a78 <__aeabi_d2f>
 8008930:	4602      	mov	r2, r0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  #endif
    
    //if(gyro_ready) {


    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f7f8 f8ec 	bl	8000b24 <__addsf3>
 800894c:	4603      	mov	r3, r0
 800894e:	4618      	mov	r0, r3
 8008950:	f7f7 fd62 	bl	8000418 <__aeabi_f2d>
 8008954:	a3bc      	add	r3, pc, #752	; (adr r3, 8008c48 <_ZN15Kalman_Filtresi3RunEv+0x448>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fdb5 	bl	80004c8 <__aeabi_dmul>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4614      	mov	r4, r2
 8008964:	461d      	mov	r5, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800896c:	4618      	mov	r0, r3
 800896e:	f7f7 fd53 	bl	8000418 <__aeabi_f2d>
 8008972:	a3b7      	add	r3, pc, #732	; (adr r3, 8008c50 <_ZN15Kalman_Filtresi3RunEv+0x450>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fda6 	bl	80004c8 <__aeabi_dmul>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4620      	mov	r0, r4
 8008982:	4629      	mov	r1, r5
 8008984:	f7f7 fbea 	bl	800015c <__adddf3>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4610      	mov	r0, r2
 800898e:	4619      	mov	r1, r3
 8008990:	f7f8 f872 	bl	8000a78 <__aeabi_d2f>
 8008994:	4602      	mov	r2, r0
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7f8 f8ba 	bl	8000b24 <__addsf3>
 80089b0:	4603      	mov	r3, r0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7f7 fd30 	bl	8000418 <__aeabi_f2d>
 80089b8:	a3a3      	add	r3, pc, #652	; (adr r3, 8008c48 <_ZN15Kalman_Filtresi3RunEv+0x448>)
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	f7f7 fd83 	bl	80004c8 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4614      	mov	r4, r2
 80089c8:	461d      	mov	r5, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7f7 fd21 	bl	8000418 <__aeabi_f2d>
 80089d6:	a39e      	add	r3, pc, #632	; (adr r3, 8008c50 <_ZN15Kalman_Filtresi3RunEv+0x450>)
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f7f7 fd74 	bl	80004c8 <__aeabi_dmul>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4620      	mov	r0, r4
 80089e6:	4629      	mov	r1, r5
 80089e8:	f7f7 fbb8 	bl	800015c <__adddf3>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4610      	mov	r0, r2
 80089f2:	4619      	mov	r1, r3
 80089f4:	f7f8 f840 	bl	8000a78 <__aeabi_d2f>
 80089f8:	4602      	mov	r2, r0
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108


    //ANGLE PREDICTION
    roll_ekf = (roll_ekf) + st*(roll_rate);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7f7 fd06 	bl	8000418 <__aeabi_f2d>
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	4689      	mov	r9, r1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f7 fcfc 	bl	8000418 <__aeabi_f2d>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7f7 fd4e 	bl	80004c8 <__aeabi_dmul>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4640      	mov	r0, r8
 8008a32:	4649      	mov	r1, r9
 8008a34:	f7f7 fb92 	bl	800015c <__adddf3>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4619      	mov	r1, r3
 8008a40:	f7f8 f81a 	bl	8000a78 <__aeabi_d2f>
 8008a44:	4602      	mov	r2, r0
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    S11_roll = S11_roll + sa + S31_roll*st + (st*st*(S13_roll + S33_roll*st))/st;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7f8 f864 	bl	8000b24 <__addsf3>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f7 fcda 	bl	8000418 <__aeabi_f2d>
 8008a64:	4604      	mov	r4, r0
 8008a66:	460d      	mov	r5, r1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f7 fcd3 	bl	8000418 <__aeabi_f2d>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008a78:	f7f7 fd26 	bl	80004c8 <__aeabi_dmul>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4620      	mov	r0, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f7 fb6a 	bl	800015c <__adddf3>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4690      	mov	r8, r2
 8008a8e:	4699      	mov	r9, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008a9c:	f7f7 fd14 	bl	80004c8 <__aeabi_dmul>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4692      	mov	sl, r2
 8008aa6:	469b      	mov	fp, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7f7 fcb3 	bl	8000418 <__aeabi_f2d>
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f7 fcac 	bl	8000418 <__aeabi_f2d>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008ac6:	f7f7 fcff 	bl	80004c8 <__aeabi_dmul>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f7 fb43 	bl	800015c <__adddf3>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fcf3 	bl	80004c8 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	4619      	mov	r1, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008af0:	f7f7 fe14 	bl	800071c <__aeabi_ddiv>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fb2e 	bl	800015c <__adddf3>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4610      	mov	r0, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	f7f7 ffb6 	bl	8000a78 <__aeabi_d2f>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	655a      	str	r2, [r3, #84]	; 0x54
    S12_roll = S12_roll + S32_roll*st;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7f7 fc7e 	bl	8000418 <__aeabi_f2d>
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	460d      	mov	r5, r1
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f7 fc77 	bl	8000418 <__aeabi_f2d>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008b30:	f7f7 fcca 	bl	80004c8 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 fb0e 	bl	800015c <__adddf3>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4610      	mov	r0, r2
 8008b46:	4619      	mov	r1, r3
 8008b48:	f7f7 ff96 	bl	8000a78 <__aeabi_d2f>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	659a      	str	r2, [r3, #88]	; 0x58
    S13_roll = S13_roll + S33_roll*st;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f7 fc5e 	bl	8000418 <__aeabi_f2d>
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	460d      	mov	r5, r1
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7f7 fc57 	bl	8000418 <__aeabi_f2d>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008b70:	f7f7 fcaa 	bl	80004c8 <__aeabi_dmul>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f7f7 faee 	bl	800015c <__adddf3>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4610      	mov	r0, r2
 8008b86:	4619      	mov	r1, r3
 8008b88:	f7f7 ff76 	bl	8000a78 <__aeabi_d2f>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	665a      	str	r2, [r3, #100]	; 0x64

    S21_roll = S21_roll + S23_roll*(st);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7f7 fc3e 	bl	8000418 <__aeabi_f2d>
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f7 fc37 	bl	8000418 <__aeabi_f2d>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008bb0:	f7f7 fc8a 	bl	80004c8 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f7f7 face 	bl	800015c <__adddf3>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f7f7 ff56 	bl	8000a78 <__aeabi_d2f>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	65da      	str	r2, [r3, #92]	; 0x5c
    S22_roll = S22_roll + sb;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7f7 ffa1 	bl	8000b24 <__addsf3>
 8008be2:	4603      	mov	r3, r0
 8008be4:	461a      	mov	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	661a      	str	r2, [r3, #96]	; 0x60
    //S23_roll = S23_roll;

    S31_roll = S31_roll + S33_roll*(st);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f7 fc12 	bl	8000418 <__aeabi_f2d>
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f7 fc0b 	bl	8000418 <__aeabi_f2d>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008c08:	f7f7 fc5e 	bl	80004c8 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4620      	mov	r0, r4
 8008c12:	4629      	mov	r1, r5
 8008c14:	f7f7 faa2 	bl	800015c <__adddf3>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f7f7 ff2a 	bl	8000a78 <__aeabi_d2f>
 8008c24:	4602      	mov	r2, r0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	66da      	str	r2, [r3, #108]	; 0x6c
    //S32_roll = S32_roll;
    S33_roll = S33_roll + sr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7f7 ff75 	bl	8000b24 <__addsf3>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	675a      	str	r2, [r3, #116]	; 0x74
 8008c42:	e009      	b.n	8008c58 <_ZN15Kalman_Filtresi3RunEv+0x458>
 8008c44:	f3af 8000 	nop.w
 8008c48:	b22d0e56 	.word	0xb22d0e56
 8008c4c:	3fefef9d 	.word	0x3fefef9d
 8008c50:	d2f1a9fc 	.word	0xd2f1a9fc
 8008c54:	3f60624d 	.word	0x3f60624d

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_roll + Qa*S23_roll + Qa*S32_roll + Qa*S33_roll + Qg*S11_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f7f8 f864 	bl	8000d34 <__aeabi_fmul>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461c      	mov	r4, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f7f8 f859 	bl	8000d34 <__aeabi_fmul>
 8008c82:	4603      	mov	r3, r0
 8008c84:	4619      	mov	r1, r3
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7f7 ff4c 	bl	8000b24 <__addsf3>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461c      	mov	r4, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7f8 f849 	bl	8000d34 <__aeabi_fmul>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f7f7 ff3c 	bl	8000b24 <__addsf3>
 8008cac:	4603      	mov	r3, r0
 8008cae:	461c      	mov	r4, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7f8 f839 	bl	8000d34 <__aeabi_fmul>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7f7 ff2c 	bl	8000b24 <__addsf3>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461c      	mov	r4, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7f8 f829 	bl	8000d34 <__aeabi_fmul>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7f7 ff1c 	bl	8000b24 <__addsf3>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461c      	mov	r4, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	f7f8 f819 	bl	8000d34 <__aeabi_fmul>
 8008d02:	4603      	mov	r3, r0
 8008d04:	4619      	mov	r1, r3
 8008d06:	4620      	mov	r0, r4
 8008d08:	f7f7 ff0c 	bl	8000b24 <__addsf3>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	461c      	mov	r4, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7f8 f80a 	bl	8000d34 <__aeabi_fmul>
 8008d20:	4603      	mov	r3, r0
 8008d22:	4619      	mov	r1, r3
 8008d24:	4620      	mov	r0, r4
 8008d26:	f7f7 fefd 	bl	8000b24 <__addsf3>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461c      	mov	r4, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f7f7 fffb 	bl	8000d34 <__aeabi_fmul>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4619      	mov	r1, r3
 8008d42:	4620      	mov	r0, r4
 8008d44:	f7f7 feec 	bl	8000b20 <__aeabi_fsub>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461c      	mov	r4, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d54:	4619      	mov	r1, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	f7f7 ffec 	bl	8000d34 <__aeabi_fmul>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4620      	mov	r0, r4
 8008d62:	f7f7 fedf 	bl	8000b24 <__addsf3>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461c      	mov	r4, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d72:	4619      	mov	r1, r3
 8008d74:	4610      	mov	r0, r2
 8008d76:	f7f7 ffdd 	bl	8000d34 <__aeabi_fmul>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7f7 fece 	bl	8000b20 <__aeabi_fsub>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461c      	mov	r4, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d90:	4619      	mov	r1, r3
 8008d92:	4610      	mov	r0, r2
 8008d94:	f7f7 ffce 	bl	8000d34 <__aeabi_fmul>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7f7 fec1 	bl	8000b24 <__addsf3>
 8008da2:	4603      	mov	r3, r0
 8008da4:	461c      	mov	r4, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7f7 ffbf 	bl	8000d34 <__aeabi_fmul>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4619      	mov	r1, r3
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7f7 feb0 	bl	8000b20 <__aeabi_fsub>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461c      	mov	r4, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7f7 ffb0 	bl	8000d34 <__aeabi_fmul>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f7f7 fea3 	bl	8000b24 <__addsf3>
 8008dde:	4603      	mov	r3, r0
 8008de0:	461c      	mov	r4, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f7f7 ffa1 	bl	8000d34 <__aeabi_fmul>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4619      	mov	r1, r3
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7f7 fe92 	bl	8000b20 <__aeabi_fsub>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	643b      	str	r3, [r7, #64]	; 0x40
    float Kt11_att = 1 - (Qa*(Qg + S22_roll + S23_roll + S32_roll + S33_roll))/A;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f7f7 fe86 	bl	8000b24 <__addsf3>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f7f7 fe7e 	bl	8000b24 <__addsf3>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7f7 fe76 	bl	8000b24 <__addsf3>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f7f7 fe6e 	bl	8000b24 <__addsf3>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7f7 ff71 	bl	8000d34 <__aeabi_fmul>
 8008e52:	4603      	mov	r3, r0
 8008e54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7f8 f820 	bl	8000e9c <__aeabi_fdiv>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	4619      	mov	r1, r3
 8008e60:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008e64:	f7f7 fe5c 	bl	8000b20 <__aeabi_fsub>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    float Kt12_att = (Qa*(S12_roll + S13_roll))/A;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7f7 fe51 	bl	8000b24 <__addsf3>
 8008e82:	4603      	mov	r3, r0
 8008e84:	4619      	mov	r1, r3
 8008e86:	4620      	mov	r0, r4
 8008e88:	f7f7 ff54 	bl	8000d34 <__aeabi_fmul>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f8 f803 	bl	8000e9c <__aeabi_fdiv>
 8008e96:	4603      	mov	r3, r0
 8008e98:	63bb      	str	r3, [r7, #56]	; 0x38
    float Kt21_att = (Qg*S21_roll + S21_roll*S32_roll - S22_roll*S31_roll + S21_roll*S33_roll - S23_roll*S31_roll)/A;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	f7f7 ff44 	bl	8000d34 <__aeabi_fmul>
 8008eac:	4603      	mov	r3, r0
 8008eae:	461c      	mov	r4, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	f7f7 ff3a 	bl	8000d34 <__aeabi_fmul>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f7f7 fe2d 	bl	8000b24 <__addsf3>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	461c      	mov	r4, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f7f7 ff2b 	bl	8000d34 <__aeabi_fmul>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7f7 fe1c 	bl	8000b20 <__aeabi_fsub>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461c      	mov	r4, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7f7 ff1c 	bl	8000d34 <__aeabi_fmul>
 8008efc:	4603      	mov	r3, r0
 8008efe:	4619      	mov	r1, r3
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7f7 fe0f 	bl	8000b24 <__addsf3>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461c      	mov	r4, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f12:	4619      	mov	r1, r3
 8008f14:	4610      	mov	r0, r2
 8008f16:	f7f7 ff0d 	bl	8000d34 <__aeabi_fmul>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7f7 fdfe 	bl	8000b20 <__aeabi_fsub>
 8008f24:	4603      	mov	r3, r0
 8008f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f7 ffb7 	bl	8000e9c <__aeabi_fdiv>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34
    float Kt22_att = (Qa*S22_roll + Qa*S23_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll)/A;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	f7f7 fef8 	bl	8000d34 <__aeabi_fmul>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461c      	mov	r4, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f52:	4619      	mov	r1, r3
 8008f54:	4610      	mov	r0, r2
 8008f56:	f7f7 feed 	bl	8000d34 <__aeabi_fmul>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7f7 fde0 	bl	8000b24 <__addsf3>
 8008f64:	4603      	mov	r3, r0
 8008f66:	461c      	mov	r4, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7f7 fede 	bl	8000d34 <__aeabi_fmul>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f7f7 fdd1 	bl	8000b24 <__addsf3>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461c      	mov	r4, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7f7 fecf 	bl	8000d34 <__aeabi_fmul>
 8008f96:	4603      	mov	r3, r0
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f7f7 fdc0 	bl	8000b20 <__aeabi_fsub>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	461c      	mov	r4, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7f7 fec0 	bl	8000d34 <__aeabi_fmul>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f7f7 fdb3 	bl	8000b24 <__addsf3>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461c      	mov	r4, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fca:	4619      	mov	r1, r3
 8008fcc:	4610      	mov	r0, r2
 8008fce:	f7f7 feb1 	bl	8000d34 <__aeabi_fmul>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7f7 fda2 	bl	8000b20 <__aeabi_fsub>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7f7 ff5b 	bl	8000e9c <__aeabi_fdiv>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	633b      	str	r3, [r7, #48]	; 0x30
    float Kt31_att = (Qg*S31_roll - S21_roll*S32_roll + S22_roll*S31_roll - S21_roll*S33_roll + S23_roll*S31_roll)/A;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f7f7 fe9c 	bl	8000d34 <__aeabi_fmul>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	461c      	mov	r4, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f7f7 fe92 	bl	8000d34 <__aeabi_fmul>
 8009010:	4603      	mov	r3, r0
 8009012:	4619      	mov	r1, r3
 8009014:	4620      	mov	r0, r4
 8009016:	f7f7 fd83 	bl	8000b20 <__aeabi_fsub>
 800901a:	4603      	mov	r3, r0
 800901c:	461c      	mov	r4, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009026:	4619      	mov	r1, r3
 8009028:	4610      	mov	r0, r2
 800902a:	f7f7 fe83 	bl	8000d34 <__aeabi_fmul>
 800902e:	4603      	mov	r3, r0
 8009030:	4619      	mov	r1, r3
 8009032:	4620      	mov	r0, r4
 8009034:	f7f7 fd76 	bl	8000b24 <__addsf3>
 8009038:	4603      	mov	r3, r0
 800903a:	461c      	mov	r4, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f7f7 fe74 	bl	8000d34 <__aeabi_fmul>
 800904c:	4603      	mov	r3, r0
 800904e:	4619      	mov	r1, r3
 8009050:	4620      	mov	r0, r4
 8009052:	f7f7 fd65 	bl	8000b20 <__aeabi_fsub>
 8009056:	4603      	mov	r3, r0
 8009058:	461c      	mov	r4, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009062:	4619      	mov	r1, r3
 8009064:	4610      	mov	r0, r2
 8009066:	f7f7 fe65 	bl	8000d34 <__aeabi_fmul>
 800906a:	4603      	mov	r3, r0
 800906c:	4619      	mov	r1, r3
 800906e:	4620      	mov	r0, r4
 8009070:	f7f7 fd58 	bl	8000b24 <__addsf3>
 8009074:	4603      	mov	r3, r0
 8009076:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009078:	4618      	mov	r0, r3
 800907a:	f7f7 ff0f 	bl	8000e9c <__aeabi_fdiv>
 800907e:	4603      	mov	r3, r0
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
    float Kt32_att = (Qa*S32_roll + Qa*S33_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll)/A;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7f7 fe50 	bl	8000d34 <__aeabi_fmul>
 8009094:	4603      	mov	r3, r0
 8009096:	461c      	mov	r4, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7f7 fe45 	bl	8000d34 <__aeabi_fmul>
 80090aa:	4603      	mov	r3, r0
 80090ac:	4619      	mov	r1, r3
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7f7 fd38 	bl	8000b24 <__addsf3>
 80090b4:	4603      	mov	r3, r0
 80090b6:	461c      	mov	r4, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f7f7 fe36 	bl	8000d34 <__aeabi_fmul>
 80090c8:	4603      	mov	r3, r0
 80090ca:	4619      	mov	r1, r3
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7f7 fd29 	bl	8000b24 <__addsf3>
 80090d2:	4603      	mov	r3, r0
 80090d4:	461c      	mov	r4, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f7f7 fe27 	bl	8000d34 <__aeabi_fmul>
 80090e6:	4603      	mov	r3, r0
 80090e8:	4619      	mov	r1, r3
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7f7 fd18 	bl	8000b20 <__aeabi_fsub>
 80090f0:	4603      	mov	r3, r0
 80090f2:	461c      	mov	r4, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7f7 fe18 	bl	8000d34 <__aeabi_fmul>
 8009104:	4603      	mov	r3, r0
 8009106:	4619      	mov	r1, r3
 8009108:	4620      	mov	r0, r4
 800910a:	f7f7 fd0b 	bl	8000b24 <__addsf3>
 800910e:	4603      	mov	r3, r0
 8009110:	461c      	mov	r4, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800911a:	4619      	mov	r1, r3
 800911c:	4610      	mov	r0, r2
 800911e:	f7f7 fe09 	bl	8000d34 <__aeabi_fmul>
 8009122:	4603      	mov	r3, r0
 8009124:	4619      	mov	r1, r3
 8009126:	4620      	mov	r0, r4
 8009128:	f7f7 fcfa 	bl	8000b20 <__aeabi_fsub>
 800912c:	4603      	mov	r3, r0
 800912e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009130:	4618      	mov	r0, r3
 8009132:	f7f7 feb3 	bl	8000e9c <__aeabi_fdiv>
 8009136:	4603      	mov	r3, r0
 8009138:	62bb      	str	r3, [r7, #40]	; 0x28

    roll_ekf = (roll_ekf) + Kt11_att*((roll_acc) - (roll_ekf)) - Kt12_att*((roll_bias) - (gyroX) + (roll_rate));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7f7 fce6 	bl	8000b20 <__aeabi_fsub>
 8009154:	4603      	mov	r3, r0
 8009156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009158:	4618      	mov	r0, r3
 800915a:	f7f7 fdeb 	bl	8000d34 <__aeabi_fmul>
 800915e:	4603      	mov	r3, r0
 8009160:	4619      	mov	r1, r3
 8009162:	4620      	mov	r0, r4
 8009164:	f7f7 fcde 	bl	8000b24 <__addsf3>
 8009168:	4603      	mov	r3, r0
 800916a:	461c      	mov	r4, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009172:	4618      	mov	r0, r3
 8009174:	f7f7 fcd4 	bl	8000b20 <__aeabi_fsub>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	4619      	mov	r1, r3
 8009182:	4610      	mov	r0, r2
 8009184:	f7f7 fcce 	bl	8000b24 <__addsf3>
 8009188:	4603      	mov	r3, r0
 800918a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800918c:	4618      	mov	r0, r3
 800918e:	f7f7 fdd1 	bl	8000d34 <__aeabi_fmul>
 8009192:	4603      	mov	r3, r0
 8009194:	4619      	mov	r1, r3
 8009196:	4620      	mov	r0, r4
 8009198:	f7f7 fcc2 	bl	8000b20 <__aeabi_fsub>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c


    roll_bias = (roll_bias) + Kt21_att*((roll_acc) - (roll_ekf)) - Kt22_att*((roll_bias) - (gyroX) + (roll_rate));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	69dc      	ldr	r4, [r3, #28]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7f7 fcb1 	bl	8000b20 <__aeabi_fsub>
 80091be:	4603      	mov	r3, r0
 80091c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7f7 fdb6 	bl	8000d34 <__aeabi_fmul>
 80091c8:	4603      	mov	r3, r0
 80091ca:	4619      	mov	r1, r3
 80091cc:	4620      	mov	r0, r4
 80091ce:	f7f7 fca9 	bl	8000b24 <__addsf3>
 80091d2:	4603      	mov	r3, r0
 80091d4:	461c      	mov	r4, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091dc:	4618      	mov	r0, r3
 80091de:	f7f7 fc9f 	bl	8000b20 <__aeabi_fsub>
 80091e2:	4603      	mov	r3, r0
 80091e4:	461a      	mov	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7f7 fc99 	bl	8000b24 <__addsf3>
 80091f2:	4603      	mov	r3, r0
 80091f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f7 fd9c 	bl	8000d34 <__aeabi_fmul>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4619      	mov	r1, r3
 8009200:	4620      	mov	r0, r4
 8009202:	f7f7 fc8d 	bl	8000b20 <__aeabi_fsub>
 8009206:	4603      	mov	r3, r0
 8009208:	461a      	mov	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	61da      	str	r2, [r3, #28]


    roll_rate = (roll_rate) + Kt31_att*((roll_acc) - (roll_ekf)) - Kt32_att*((roll_bias) - (gyroX) + (roll_rate));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68dc      	ldr	r4, [r3, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f7f7 fc7d 	bl	8000b20 <__aeabi_fsub>
 8009226:	4603      	mov	r3, r0
 8009228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800922a:	4618      	mov	r0, r3
 800922c:	f7f7 fd82 	bl	8000d34 <__aeabi_fmul>
 8009230:	4603      	mov	r3, r0
 8009232:	4619      	mov	r1, r3
 8009234:	4620      	mov	r0, r4
 8009236:	f7f7 fc75 	bl	8000b24 <__addsf3>
 800923a:	4603      	mov	r3, r0
 800923c:	461c      	mov	r4, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009244:	4618      	mov	r0, r3
 8009246:	f7f7 fc6b 	bl	8000b20 <__aeabi_fsub>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7f7 fc65 	bl	8000b24 <__addsf3>
 800925a:	4603      	mov	r3, r0
 800925c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800925e:	4618      	mov	r0, r3
 8009260:	f7f7 fd68 	bl	8000d34 <__aeabi_fmul>
 8009264:	4603      	mov	r3, r0
 8009266:	4619      	mov	r1, r3
 8009268:	4620      	mov	r0, r4
 800926a:	f7f7 fc59 	bl	8000b20 <__aeabi_fsub>
 800926e:	4603      	mov	r3, r0
 8009270:	461a      	mov	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	60da      	str	r2, [r3, #12]


    S11_roll = - S11_roll*(Kt11_att - 1) - Kt12_att*S21_roll - Kt12_att*S31_roll;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800927e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009282:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009284:	f7f7 fc4c 	bl	8000b20 <__aeabi_fsub>
 8009288:	4603      	mov	r3, r0
 800928a:	4619      	mov	r1, r3
 800928c:	4620      	mov	r0, r4
 800928e:	f7f7 fd51 	bl	8000d34 <__aeabi_fmul>
 8009292:	4603      	mov	r3, r0
 8009294:	461c      	mov	r4, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800929a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800929c:	4618      	mov	r0, r3
 800929e:	f7f7 fd49 	bl	8000d34 <__aeabi_fmul>
 80092a2:	4603      	mov	r3, r0
 80092a4:	4619      	mov	r1, r3
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7f7 fc3a 	bl	8000b20 <__aeabi_fsub>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461c      	mov	r4, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f7 fd3c 	bl	8000d34 <__aeabi_fmul>
 80092bc:	4603      	mov	r3, r0
 80092be:	4619      	mov	r1, r3
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7f7 fc2d 	bl	8000b20 <__aeabi_fsub>
 80092c6:	4603      	mov	r3, r0
 80092c8:	461a      	mov	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	655a      	str	r2, [r3, #84]	; 0x54


    S12_roll = - S12_roll*(Kt11_att - 1) - Kt12_att*S22_roll - Kt12_att*S32_roll;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80092d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80092da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092dc:	f7f7 fc20 	bl	8000b20 <__aeabi_fsub>
 80092e0:	4603      	mov	r3, r0
 80092e2:	4619      	mov	r1, r3
 80092e4:	4620      	mov	r0, r4
 80092e6:	f7f7 fd25 	bl	8000d34 <__aeabi_fmul>
 80092ea:	4603      	mov	r3, r0
 80092ec:	461c      	mov	r4, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7f7 fd1d 	bl	8000d34 <__aeabi_fmul>
 80092fa:	4603      	mov	r3, r0
 80092fc:	4619      	mov	r1, r3
 80092fe:	4620      	mov	r0, r4
 8009300:	f7f7 fc0e 	bl	8000b20 <__aeabi_fsub>
 8009304:	4603      	mov	r3, r0
 8009306:	461c      	mov	r4, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800930e:	4618      	mov	r0, r3
 8009310:	f7f7 fd10 	bl	8000d34 <__aeabi_fmul>
 8009314:	4603      	mov	r3, r0
 8009316:	4619      	mov	r1, r3
 8009318:	4620      	mov	r0, r4
 800931a:	f7f7 fc01 	bl	8000b20 <__aeabi_fsub>
 800931e:	4603      	mov	r3, r0
 8009320:	461a      	mov	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	659a      	str	r2, [r3, #88]	; 0x58


    S13_roll = - S13_roll*(Kt11_att - 1) - Kt12_att*S23_roll - Kt12_att*S33_roll;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800932a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800932e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009332:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009334:	f7f7 fbf4 	bl	8000b20 <__aeabi_fsub>
 8009338:	4603      	mov	r3, r0
 800933a:	4619      	mov	r1, r3
 800933c:	4620      	mov	r0, r4
 800933e:	f7f7 fcf9 	bl	8000d34 <__aeabi_fmul>
 8009342:	4603      	mov	r3, r0
 8009344:	461c      	mov	r4, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800934a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800934c:	4618      	mov	r0, r3
 800934e:	f7f7 fcf1 	bl	8000d34 <__aeabi_fmul>
 8009352:	4603      	mov	r3, r0
 8009354:	4619      	mov	r1, r3
 8009356:	4620      	mov	r0, r4
 8009358:	f7f7 fbe2 	bl	8000b20 <__aeabi_fsub>
 800935c:	4603      	mov	r3, r0
 800935e:	461c      	mov	r4, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009366:	4618      	mov	r0, r3
 8009368:	f7f7 fce4 	bl	8000d34 <__aeabi_fmul>
 800936c:	4603      	mov	r3, r0
 800936e:	4619      	mov	r1, r3
 8009370:	4620      	mov	r0, r4
 8009372:	f7f7 fbd5 	bl	8000b20 <__aeabi_fsub>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	665a      	str	r2, [r3, #100]	; 0x64


    S21_roll = - S21_roll*(Kt22_att - 1) - Kt21_att*S11_roll - Kt22_att*S31_roll;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009382:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009386:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800938a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800938c:	f7f7 fbc8 	bl	8000b20 <__aeabi_fsub>
 8009390:	4603      	mov	r3, r0
 8009392:	4619      	mov	r1, r3
 8009394:	4620      	mov	r0, r4
 8009396:	f7f7 fccd 	bl	8000d34 <__aeabi_fmul>
 800939a:	4603      	mov	r3, r0
 800939c:	461c      	mov	r4, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7f7 fcc5 	bl	8000d34 <__aeabi_fmul>
 80093aa:	4603      	mov	r3, r0
 80093ac:	4619      	mov	r1, r3
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7f7 fbb6 	bl	8000b20 <__aeabi_fsub>
 80093b4:	4603      	mov	r3, r0
 80093b6:	461c      	mov	r4, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093be:	4618      	mov	r0, r3
 80093c0:	f7f7 fcb8 	bl	8000d34 <__aeabi_fmul>
 80093c4:	4603      	mov	r3, r0
 80093c6:	4619      	mov	r1, r3
 80093c8:	4620      	mov	r0, r4
 80093ca:	f7f7 fba9 	bl	8000b20 <__aeabi_fsub>
 80093ce:	4603      	mov	r3, r0
 80093d0:	461a      	mov	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	65da      	str	r2, [r3, #92]	; 0x5c


    S22_roll = - S22_roll*(Kt22_att - 1) - Kt21_att*S12_roll - Kt22_att*S32_roll;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093da:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80093de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80093e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093e4:	f7f7 fb9c 	bl	8000b20 <__aeabi_fsub>
 80093e8:	4603      	mov	r3, r0
 80093ea:	4619      	mov	r1, r3
 80093ec:	4620      	mov	r0, r4
 80093ee:	f7f7 fca1 	bl	8000d34 <__aeabi_fmul>
 80093f2:	4603      	mov	r3, r0
 80093f4:	461c      	mov	r4, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f7 fc99 	bl	8000d34 <__aeabi_fmul>
 8009402:	4603      	mov	r3, r0
 8009404:	4619      	mov	r1, r3
 8009406:	4620      	mov	r0, r4
 8009408:	f7f7 fb8a 	bl	8000b20 <__aeabi_fsub>
 800940c:	4603      	mov	r3, r0
 800940e:	461c      	mov	r4, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009416:	4618      	mov	r0, r3
 8009418:	f7f7 fc8c 	bl	8000d34 <__aeabi_fmul>
 800941c:	4603      	mov	r3, r0
 800941e:	4619      	mov	r1, r3
 8009420:	4620      	mov	r0, r4
 8009422:	f7f7 fb7d 	bl	8000b20 <__aeabi_fsub>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	661a      	str	r2, [r3, #96]	; 0x60


    S23_roll = - S23_roll*(Kt22_att - 1) - Kt21_att*S13_roll - Kt22_att*S33_roll;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009432:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009436:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800943a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800943c:	f7f7 fb70 	bl	8000b20 <__aeabi_fsub>
 8009440:	4603      	mov	r3, r0
 8009442:	4619      	mov	r1, r3
 8009444:	4620      	mov	r0, r4
 8009446:	f7f7 fc75 	bl	8000d34 <__aeabi_fmul>
 800944a:	4603      	mov	r3, r0
 800944c:	461c      	mov	r4, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009452:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009454:	4618      	mov	r0, r3
 8009456:	f7f7 fc6d 	bl	8000d34 <__aeabi_fmul>
 800945a:	4603      	mov	r3, r0
 800945c:	4619      	mov	r1, r3
 800945e:	4620      	mov	r0, r4
 8009460:	f7f7 fb5e 	bl	8000b20 <__aeabi_fsub>
 8009464:	4603      	mov	r3, r0
 8009466:	461c      	mov	r4, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800946c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800946e:	4618      	mov	r0, r3
 8009470:	f7f7 fc60 	bl	8000d34 <__aeabi_fmul>
 8009474:	4603      	mov	r3, r0
 8009476:	4619      	mov	r1, r3
 8009478:	4620      	mov	r0, r4
 800947a:	f7f7 fb51 	bl	8000b20 <__aeabi_fsub>
 800947e:	4603      	mov	r3, r0
 8009480:	461a      	mov	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	669a      	str	r2, [r3, #104]	; 0x68


    S31_roll = - S31_roll*(Kt32_att - 1) - Kt31_att*S11_roll - Kt32_att*S21_roll;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800948a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800948e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009494:	f7f7 fb44 	bl	8000b20 <__aeabi_fsub>
 8009498:	4603      	mov	r3, r0
 800949a:	4619      	mov	r1, r3
 800949c:	4620      	mov	r0, r4
 800949e:	f7f7 fc49 	bl	8000d34 <__aeabi_fmul>
 80094a2:	4603      	mov	r3, r0
 80094a4:	461c      	mov	r4, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7f7 fc41 	bl	8000d34 <__aeabi_fmul>
 80094b2:	4603      	mov	r3, r0
 80094b4:	4619      	mov	r1, r3
 80094b6:	4620      	mov	r0, r4
 80094b8:	f7f7 fb32 	bl	8000b20 <__aeabi_fsub>
 80094bc:	4603      	mov	r3, r0
 80094be:	461c      	mov	r4, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7f7 fc34 	bl	8000d34 <__aeabi_fmul>
 80094cc:	4603      	mov	r3, r0
 80094ce:	4619      	mov	r1, r3
 80094d0:	4620      	mov	r0, r4
 80094d2:	f7f7 fb25 	bl	8000b20 <__aeabi_fsub>
 80094d6:	4603      	mov	r3, r0
 80094d8:	461a      	mov	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	66da      	str	r2, [r3, #108]	; 0x6c


    S32_roll = - S32_roll*(Kt32_att - 1) - Kt31_att*S12_roll - Kt32_att*S22_roll;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80094e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80094ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ec:	f7f7 fb18 	bl	8000b20 <__aeabi_fsub>
 80094f0:	4603      	mov	r3, r0
 80094f2:	4619      	mov	r1, r3
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7f7 fc1d 	bl	8000d34 <__aeabi_fmul>
 80094fa:	4603      	mov	r3, r0
 80094fc:	461c      	mov	r4, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009504:	4618      	mov	r0, r3
 8009506:	f7f7 fc15 	bl	8000d34 <__aeabi_fmul>
 800950a:	4603      	mov	r3, r0
 800950c:	4619      	mov	r1, r3
 800950e:	4620      	mov	r0, r4
 8009510:	f7f7 fb06 	bl	8000b20 <__aeabi_fsub>
 8009514:	4603      	mov	r3, r0
 8009516:	461c      	mov	r4, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800951c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800951e:	4618      	mov	r0, r3
 8009520:	f7f7 fc08 	bl	8000d34 <__aeabi_fmul>
 8009524:	4603      	mov	r3, r0
 8009526:	4619      	mov	r1, r3
 8009528:	4620      	mov	r0, r4
 800952a:	f7f7 faf9 	bl	8000b20 <__aeabi_fsub>
 800952e:	4603      	mov	r3, r0
 8009530:	461a      	mov	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	671a      	str	r2, [r3, #112]	; 0x70


    S33_roll = - S33_roll*(Kt32_att - 1) - Kt31_att*S13_roll - Kt32_att*S23_roll;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800953e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009544:	f7f7 faec 	bl	8000b20 <__aeabi_fsub>
 8009548:	4603      	mov	r3, r0
 800954a:	4619      	mov	r1, r3
 800954c:	4620      	mov	r0, r4
 800954e:	f7f7 fbf1 	bl	8000d34 <__aeabi_fmul>
 8009552:	4603      	mov	r3, r0
 8009554:	461c      	mov	r4, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800955a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800955c:	4618      	mov	r0, r3
 800955e:	f7f7 fbe9 	bl	8000d34 <__aeabi_fmul>
 8009562:	4603      	mov	r3, r0
 8009564:	4619      	mov	r1, r3
 8009566:	4620      	mov	r0, r4
 8009568:	f7f7 fada 	bl	8000b20 <__aeabi_fsub>
 800956c:	4603      	mov	r3, r0
 800956e:	461c      	mov	r4, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009576:	4618      	mov	r0, r3
 8009578:	f7f7 fbdc 	bl	8000d34 <__aeabi_fmul>
 800957c:	4603      	mov	r3, r0
 800957e:	4619      	mov	r1, r3
 8009580:	4620      	mov	r0, r4
 8009582:	f7f7 facd 	bl	8000b20 <__aeabi_fsub>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	675a      	str	r2, [r3, #116]	; 0x74

    //============================

    //ANGLE PREDICTION
    pitch_ekf = (pitch_ekf) + st*(pitch_rate);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009594:	4618      	mov	r0, r3
 8009596:	f7f6 ff3f 	bl	8000418 <__aeabi_f2d>
 800959a:	4680      	mov	r8, r0
 800959c:	4689      	mov	r9, r1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7f6 ff35 	bl	8000418 <__aeabi_f2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4620      	mov	r0, r4
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7f6 ff87 	bl	80004c8 <__aeabi_dmul>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4640      	mov	r0, r8
 80095c0:	4649      	mov	r1, r9
 80095c2:	f7f6 fdcb 	bl	800015c <__adddf3>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4610      	mov	r0, r2
 80095cc:	4619      	mov	r1, r3
 80095ce:	f7f7 fa53 	bl	8000a78 <__aeabi_d2f>
 80095d2:	4602      	mov	r2, r0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    S11_pitch = S11_pitch + sa + S31_pitch*st + (st*st*(S13_pitch + S33_pitch*st))/st;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e2:	4619      	mov	r1, r3
 80095e4:	4610      	mov	r0, r2
 80095e6:	f7f7 fa9d 	bl	8000b24 <__addsf3>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7f6 ff13 	bl	8000418 <__aeabi_f2d>
 80095f2:	4604      	mov	r4, r0
 80095f4:	460d      	mov	r5, r1
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7f6 ff0c 	bl	8000418 <__aeabi_f2d>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009606:	f7f6 ff5f 	bl	80004c8 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f6 fda3 	bl	800015c <__adddf3>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4690      	mov	r8, r2
 800961c:	4699      	mov	r9, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800962a:	f7f6 ff4d 	bl	80004c8 <__aeabi_dmul>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4692      	mov	sl, r2
 8009634:	469b      	mov	fp, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963a:	4618      	mov	r0, r3
 800963c:	f7f6 feec 	bl	8000418 <__aeabi_f2d>
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009648:	4618      	mov	r0, r3
 800964a:	f7f6 fee5 	bl	8000418 <__aeabi_f2d>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009654:	f7f6 ff38 	bl	80004c8 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4620      	mov	r0, r4
 800965e:	4629      	mov	r1, r5
 8009660:	f7f6 fd7c 	bl	800015c <__adddf3>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4650      	mov	r0, sl
 800966a:	4659      	mov	r1, fp
 800966c:	f7f6 ff2c 	bl	80004c8 <__aeabi_dmul>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4610      	mov	r0, r2
 8009676:	4619      	mov	r1, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800967e:	f7f7 f84d 	bl	800071c <__aeabi_ddiv>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f6 fd67 	bl	800015c <__adddf3>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4610      	mov	r0, r2
 8009694:	4619      	mov	r1, r3
 8009696:	f7f7 f9ef 	bl	8000a78 <__aeabi_d2f>
 800969a:	4602      	mov	r2, r0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	625a      	str	r2, [r3, #36]	; 0x24
    S12_pitch = S12_pitch + S32_pitch*st;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f6 feb7 	bl	8000418 <__aeabi_f2d>
 80096aa:	4604      	mov	r4, r0
 80096ac:	460d      	mov	r5, r1
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f6 feb0 	bl	8000418 <__aeabi_f2d>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80096be:	f7f6 ff03 	bl	80004c8 <__aeabi_dmul>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f6 fd47 	bl	800015c <__adddf3>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4610      	mov	r0, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7f7 f9cf 	bl	8000a78 <__aeabi_d2f>
 80096da:	4602      	mov	r2, r0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	629a      	str	r2, [r3, #40]	; 0x28
    S13_pitch = S13_pitch + S33_pitch*st;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7f6 fe97 	bl	8000418 <__aeabi_f2d>
 80096ea:	4604      	mov	r4, r0
 80096ec:	460d      	mov	r5, r1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f6 fe90 	bl	8000418 <__aeabi_f2d>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80096fe:	f7f6 fee3 	bl	80004c8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f6 fd27 	bl	800015c <__adddf3>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4610      	mov	r0, r2
 8009714:	4619      	mov	r1, r3
 8009716:	f7f7 f9af 	bl	8000a78 <__aeabi_d2f>
 800971a:	4602      	mov	r2, r0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	635a      	str	r2, [r3, #52]	; 0x34

    S21_pitch = S21_pitch + S23_pitch*(st);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	4618      	mov	r0, r3
 8009726:	f7f6 fe77 	bl	8000418 <__aeabi_f2d>
 800972a:	4604      	mov	r4, r0
 800972c:	460d      	mov	r5, r1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	4618      	mov	r0, r3
 8009734:	f7f6 fe70 	bl	8000418 <__aeabi_f2d>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800973e:	f7f6 fec3 	bl	80004c8 <__aeabi_dmul>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	f7f6 fd07 	bl	800015c <__adddf3>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4610      	mov	r0, r2
 8009754:	4619      	mov	r1, r3
 8009756:	f7f7 f98f 	bl	8000a78 <__aeabi_d2f>
 800975a:	4602      	mov	r2, r0
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	62da      	str	r2, [r3, #44]	; 0x2c
    S22_pitch = S22_pitch + sb;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f7f7 f9da 	bl	8000b24 <__addsf3>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	631a      	str	r2, [r3, #48]	; 0x30
    //S23_pitch = S23_pitch;

    S31_pitch = S31_pitch + S33_pitch*(st);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977c:	4618      	mov	r0, r3
 800977e:	f7f6 fe4b 	bl	8000418 <__aeabi_f2d>
 8009782:	4604      	mov	r4, r0
 8009784:	460d      	mov	r5, r1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978a:	4618      	mov	r0, r3
 800978c:	f7f6 fe44 	bl	8000418 <__aeabi_f2d>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009796:	f7f6 fe97 	bl	80004c8 <__aeabi_dmul>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f6 fcdb 	bl	800015c <__adddf3>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4610      	mov	r0, r2
 80097ac:	4619      	mov	r1, r3
 80097ae:	f7f7 f963 	bl	8000a78 <__aeabi_d2f>
 80097b2:	4602      	mov	r2, r0
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	63da      	str	r2, [r3, #60]	; 0x3c
    //S32_pitch = S32_pitch;
    S33_pitch = S33_pitch + sr;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7f7 f9ae 	bl	8000b24 <__addsf3>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	645a      	str	r2, [r3, #68]	; 0x44

    //ANGLE CORRECTION
    A = (Qa*Qg + Qa*S22_pitch + Qa*S23_pitch + Qa*S32_pitch + Qa*S33_pitch + Qg*S11_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f7f7 faa8 	bl	8000d34 <__aeabi_fmul>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461c      	mov	r4, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f2:	4619      	mov	r1, r3
 80097f4:	4610      	mov	r0, r2
 80097f6:	f7f7 fa9d 	bl	8000d34 <__aeabi_fmul>
 80097fa:	4603      	mov	r3, r0
 80097fc:	4619      	mov	r1, r3
 80097fe:	4620      	mov	r0, r4
 8009800:	f7f7 f990 	bl	8000b24 <__addsf3>
 8009804:	4603      	mov	r3, r0
 8009806:	461c      	mov	r4, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	4619      	mov	r1, r3
 8009814:	4610      	mov	r0, r2
 8009816:	f7f7 fa8d 	bl	8000d34 <__aeabi_fmul>
 800981a:	4603      	mov	r3, r0
 800981c:	4619      	mov	r1, r3
 800981e:	4620      	mov	r0, r4
 8009820:	f7f7 f980 	bl	8000b24 <__addsf3>
 8009824:	4603      	mov	r3, r0
 8009826:	461c      	mov	r4, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f7f7 fa7d 	bl	8000d34 <__aeabi_fmul>
 800983a:	4603      	mov	r3, r0
 800983c:	4619      	mov	r1, r3
 800983e:	4620      	mov	r0, r4
 8009840:	f7f7 f970 	bl	8000b24 <__addsf3>
 8009844:	4603      	mov	r3, r0
 8009846:	461c      	mov	r4, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7f7 fa6d 	bl	8000d34 <__aeabi_fmul>
 800985a:	4603      	mov	r3, r0
 800985c:	4619      	mov	r1, r3
 800985e:	4620      	mov	r0, r4
 8009860:	f7f7 f960 	bl	8000b24 <__addsf3>
 8009864:	4603      	mov	r3, r0
 8009866:	461c      	mov	r4, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	4619      	mov	r1, r3
 8009874:	4610      	mov	r0, r2
 8009876:	f7f7 fa5d 	bl	8000d34 <__aeabi_fmul>
 800987a:	4603      	mov	r3, r0
 800987c:	4619      	mov	r1, r3
 800987e:	4620      	mov	r0, r4
 8009880:	f7f7 f950 	bl	8000b24 <__addsf3>
 8009884:	4603      	mov	r3, r0
 8009886:	461c      	mov	r4, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7f7 fa4e 	bl	8000d34 <__aeabi_fmul>
 8009898:	4603      	mov	r3, r0
 800989a:	4619      	mov	r1, r3
 800989c:	4620      	mov	r0, r4
 800989e:	f7f7 f941 	bl	8000b24 <__addsf3>
 80098a2:	4603      	mov	r3, r0
 80098a4:	461c      	mov	r4, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	4619      	mov	r1, r3
 80098b0:	4610      	mov	r0, r2
 80098b2:	f7f7 fa3f 	bl	8000d34 <__aeabi_fmul>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4619      	mov	r1, r3
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7f7 f930 	bl	8000b20 <__aeabi_fsub>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461c      	mov	r4, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	f7f7 fa30 	bl	8000d34 <__aeabi_fmul>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4619      	mov	r1, r3
 80098d8:	4620      	mov	r0, r4
 80098da:	f7f7 f923 	bl	8000b24 <__addsf3>
 80098de:	4603      	mov	r3, r0
 80098e0:	461c      	mov	r4, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	f7f7 fa21 	bl	8000d34 <__aeabi_fmul>
 80098f2:	4603      	mov	r3, r0
 80098f4:	4619      	mov	r1, r3
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7f7 f912 	bl	8000b20 <__aeabi_fsub>
 80098fc:	4603      	mov	r3, r0
 80098fe:	461c      	mov	r4, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f7f7 fa12 	bl	8000d34 <__aeabi_fmul>
 8009910:	4603      	mov	r3, r0
 8009912:	4619      	mov	r1, r3
 8009914:	4620      	mov	r0, r4
 8009916:	f7f7 f905 	bl	8000b24 <__addsf3>
 800991a:	4603      	mov	r3, r0
 800991c:	461c      	mov	r4, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7f7 fa03 	bl	8000d34 <__aeabi_fmul>
 800992e:	4603      	mov	r3, r0
 8009930:	4619      	mov	r1, r3
 8009932:	4620      	mov	r0, r4
 8009934:	f7f7 f8f4 	bl	8000b20 <__aeabi_fsub>
 8009938:	4603      	mov	r3, r0
 800993a:	461c      	mov	r4, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009944:	4619      	mov	r1, r3
 8009946:	4610      	mov	r0, r2
 8009948:	f7f7 f9f4 	bl	8000d34 <__aeabi_fmul>
 800994c:	4603      	mov	r3, r0
 800994e:	4619      	mov	r1, r3
 8009950:	4620      	mov	r0, r4
 8009952:	f7f7 f8e7 	bl	8000b24 <__addsf3>
 8009956:	4603      	mov	r3, r0
 8009958:	461c      	mov	r4, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009962:	4619      	mov	r1, r3
 8009964:	4610      	mov	r0, r2
 8009966:	f7f7 f9e5 	bl	8000d34 <__aeabi_fmul>
 800996a:	4603      	mov	r3, r0
 800996c:	4619      	mov	r1, r3
 800996e:	4620      	mov	r0, r4
 8009970:	f7f7 f8d6 	bl	8000b20 <__aeabi_fsub>
 8009974:	4603      	mov	r3, r0
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
     Kt11_att = 1 - (Qa*(Qg + S22_pitch + S23_pitch + S32_pitch + S33_pitch))/A;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7f7 f8ca 	bl	8000b24 <__addsf3>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f7f7 f8c2 	bl	8000b24 <__addsf3>
 80099a0:	4603      	mov	r3, r0
 80099a2:	461a      	mov	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f7f7 f8ba 	bl	8000b24 <__addsf3>
 80099b0:	4603      	mov	r3, r0
 80099b2:	461a      	mov	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7f7 f8b2 	bl	8000b24 <__addsf3>
 80099c0:	4603      	mov	r3, r0
 80099c2:	4619      	mov	r1, r3
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7f7 f9b5 	bl	8000d34 <__aeabi_fmul>
 80099ca:	4603      	mov	r3, r0
 80099cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7f7 fa64 	bl	8000e9c <__aeabi_fdiv>
 80099d4:	4603      	mov	r3, r0
 80099d6:	4619      	mov	r1, r3
 80099d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80099dc:	f7f7 f8a0 	bl	8000b20 <__aeabi_fsub>
 80099e0:	4603      	mov	r3, r0
 80099e2:	63fb      	str	r3, [r7, #60]	; 0x3c
     Kt12_att = (Qa*(S12_pitch + S13_pitch))/A;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7f7 f895 	bl	8000b24 <__addsf3>
 80099fa:	4603      	mov	r3, r0
 80099fc:	4619      	mov	r1, r3
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7f7 f998 	bl	8000d34 <__aeabi_fmul>
 8009a04:	4603      	mov	r3, r0
 8009a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7f7 fa47 	bl	8000e9c <__aeabi_fdiv>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	63bb      	str	r3, [r7, #56]	; 0x38
     Kt21_att = (Qg*S21_pitch + S21_pitch*S32_pitch - S22_pitch*S31_pitch + S21_pitch*S33_pitch - S23_pitch*S31_pitch)/A;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7f7 f988 	bl	8000d34 <__aeabi_fmul>
 8009a24:	4603      	mov	r3, r0
 8009a26:	461c      	mov	r4, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7f7 f97e 	bl	8000d34 <__aeabi_fmul>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f7f7 f871 	bl	8000b24 <__addsf3>
 8009a42:	4603      	mov	r3, r0
 8009a44:	461c      	mov	r4, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7f7 f96f 	bl	8000d34 <__aeabi_fmul>
 8009a56:	4603      	mov	r3, r0
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7f7 f860 	bl	8000b20 <__aeabi_fsub>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461c      	mov	r4, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f7f7 f960 	bl	8000d34 <__aeabi_fmul>
 8009a74:	4603      	mov	r3, r0
 8009a76:	4619      	mov	r1, r3
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f7f7 f853 	bl	8000b24 <__addsf3>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461c      	mov	r4, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7f7 f951 	bl	8000d34 <__aeabi_fmul>
 8009a92:	4603      	mov	r3, r0
 8009a94:	4619      	mov	r1, r3
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7f7 f842 	bl	8000b20 <__aeabi_fsub>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7f7 f9fb 	bl	8000e9c <__aeabi_fdiv>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	637b      	str	r3, [r7, #52]	; 0x34
     Kt22_att = (Qa*S22_pitch + Qa*S23_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch)/A;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f7f7 f93c 	bl	8000d34 <__aeabi_fmul>
 8009abc:	4603      	mov	r3, r0
 8009abe:	461c      	mov	r4, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f7f7 f931 	bl	8000d34 <__aeabi_fmul>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f7f7 f824 	bl	8000b24 <__addsf3>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461c      	mov	r4, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f7f7 f922 	bl	8000d34 <__aeabi_fmul>
 8009af0:	4603      	mov	r3, r0
 8009af2:	4619      	mov	r1, r3
 8009af4:	4620      	mov	r0, r4
 8009af6:	f7f7 f815 	bl	8000b24 <__addsf3>
 8009afa:	4603      	mov	r3, r0
 8009afc:	461c      	mov	r4, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7f7 f913 	bl	8000d34 <__aeabi_fmul>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4619      	mov	r1, r3
 8009b12:	4620      	mov	r0, r4
 8009b14:	f7f7 f804 	bl	8000b20 <__aeabi_fsub>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461c      	mov	r4, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f7f7 f904 	bl	8000d34 <__aeabi_fmul>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4620      	mov	r0, r4
 8009b32:	f7f6 fff7 	bl	8000b24 <__addsf3>
 8009b36:	4603      	mov	r3, r0
 8009b38:	461c      	mov	r4, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	4619      	mov	r1, r3
 8009b44:	4610      	mov	r0, r2
 8009b46:	f7f7 f8f5 	bl	8000d34 <__aeabi_fmul>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f7f6 ffe6 	bl	8000b20 <__aeabi_fsub>
 8009b54:	4603      	mov	r3, r0
 8009b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7f7 f99f 	bl	8000e9c <__aeabi_fdiv>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30
     Kt31_att = (Qg*S31_pitch - S21_pitch*S32_pitch + S22_pitch*S31_pitch - S21_pitch*S33_pitch + S23_pitch*S31_pitch)/A;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f7f7 f8e0 	bl	8000d34 <__aeabi_fmul>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461c      	mov	r4, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b80:	4619      	mov	r1, r3
 8009b82:	4610      	mov	r0, r2
 8009b84:	f7f7 f8d6 	bl	8000d34 <__aeabi_fmul>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f7f6 ffc7 	bl	8000b20 <__aeabi_fsub>
 8009b92:	4603      	mov	r3, r0
 8009b94:	461c      	mov	r4, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f7f7 f8c7 	bl	8000d34 <__aeabi_fmul>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7f6 ffba 	bl	8000b24 <__addsf3>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461c      	mov	r4, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f7f7 f8b8 	bl	8000d34 <__aeabi_fmul>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7f6 ffa9 	bl	8000b20 <__aeabi_fsub>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	461c      	mov	r4, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7f7 f8a9 	bl	8000d34 <__aeabi_fmul>
 8009be2:	4603      	mov	r3, r0
 8009be4:	4619      	mov	r1, r3
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7f6 ff9c 	bl	8000b24 <__addsf3>
 8009bec:	4603      	mov	r3, r0
 8009bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7f7 f953 	bl	8000e9c <__aeabi_fdiv>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
     Kt32_att = (Qa*S32_pitch + Qa*S33_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch)/A;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f7f7 f894 	bl	8000d34 <__aeabi_fmul>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	461c      	mov	r4, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7f7 f889 	bl	8000d34 <__aeabi_fmul>
 8009c22:	4603      	mov	r3, r0
 8009c24:	4619      	mov	r1, r3
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7f6 ff7c 	bl	8000b24 <__addsf3>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461c      	mov	r4, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f7f7 f87a 	bl	8000d34 <__aeabi_fmul>
 8009c40:	4603      	mov	r3, r0
 8009c42:	4619      	mov	r1, r3
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7f6 ff6d 	bl	8000b24 <__addsf3>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	461c      	mov	r4, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f7f7 f86b 	bl	8000d34 <__aeabi_fmul>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4619      	mov	r1, r3
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7f6 ff5c 	bl	8000b20 <__aeabi_fsub>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461c      	mov	r4, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7f7 f85c 	bl	8000d34 <__aeabi_fmul>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7f6 ff4f 	bl	8000b24 <__addsf3>
 8009c86:	4603      	mov	r3, r0
 8009c88:	461c      	mov	r4, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f7f7 f84d 	bl	8000d34 <__aeabi_fmul>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7f6 ff3e 	bl	8000b20 <__aeabi_fsub>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7f7 f8f7 	bl	8000e9c <__aeabi_fdiv>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	62bb      	str	r3, [r7, #40]	; 0x28

    pitch_ekf = (pitch_ekf) + Kt11_att*((pitch_acc) - (pitch_ekf)) - Kt12_att*((pitch_bias) - (gyroY) + (pitch_rate));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7f6 ff2a 	bl	8000b20 <__aeabi_fsub>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f7 f82f 	bl	8000d34 <__aeabi_fmul>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7f6 ff22 	bl	8000b24 <__addsf3>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461c      	mov	r4, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7f6 ff18 	bl	8000b20 <__aeabi_fsub>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7f6 ff12 	bl	8000b24 <__addsf3>
 8009d00:	4603      	mov	r3, r0
 8009d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7f7 f815 	bl	8000d34 <__aeabi_fmul>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7f6 ff06 	bl	8000b20 <__aeabi_fsub>
 8009d14:	4603      	mov	r3, r0
 8009d16:	461a      	mov	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    //pitch_ekf = 0;
    pitch_bias = (pitch_bias) + Kt21_att*((pitch_acc) - (pitch_ekf)) - Kt22_att*((pitch_bias) - (gyroY) + (pitch_rate));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	699c      	ldr	r4, [r3, #24]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4610      	mov	r0, r2
 8009d32:	f7f6 fef5 	bl	8000b20 <__aeabi_fsub>
 8009d36:	4603      	mov	r3, r0
 8009d38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f6 fffa 	bl	8000d34 <__aeabi_fmul>
 8009d40:	4603      	mov	r3, r0
 8009d42:	4619      	mov	r1, r3
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7f6 feed 	bl	8000b24 <__addsf3>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	461c      	mov	r4, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f6 fee3 	bl	8000b20 <__aeabi_fsub>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7f6 fedd 	bl	8000b24 <__addsf3>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7f6 ffe0 	bl	8000d34 <__aeabi_fmul>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4619      	mov	r1, r3
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f7f6 fed1 	bl	8000b20 <__aeabi_fsub>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	461a      	mov	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	619a      	str	r2, [r3, #24]
    //pitch_bias = 0;

    pitch_rate = (pitch_rate) + Kt31_att*((pitch_acc) - (pitch_ekf)) - Kt32_att*((pitch_bias) - (gyroY) + (pitch_rate));
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691c      	ldr	r4, [r3, #16]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009d96:	4619      	mov	r1, r3
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f7f6 fec1 	bl	8000b20 <__aeabi_fsub>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7f6 ffc6 	bl	8000d34 <__aeabi_fmul>
 8009da8:	4603      	mov	r3, r0
 8009daa:	4619      	mov	r1, r3
 8009dac:	4620      	mov	r0, r4
 8009dae:	f7f6 feb9 	bl	8000b24 <__addsf3>
 8009db2:	4603      	mov	r3, r0
 8009db4:	461c      	mov	r4, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f6 feaf 	bl	8000b20 <__aeabi_fsub>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4610      	mov	r0, r2
 8009dce:	f7f6 fea9 	bl	8000b24 <__addsf3>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f6 ffac 	bl	8000d34 <__aeabi_fmul>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4619      	mov	r1, r3
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7f6 fe9d 	bl	8000b20 <__aeabi_fsub>
 8009de6:	4603      	mov	r3, r0
 8009de8:	461a      	mov	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	611a      	str	r2, [r3, #16]


    S11_pitch = - S11_pitch*(Kt11_att - 1) - Kt12_att*S21_pitch - Kt12_att*S31_pitch;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009df6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009dfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009dfc:	f7f6 fe90 	bl	8000b20 <__aeabi_fsub>
 8009e00:	4603      	mov	r3, r0
 8009e02:	4619      	mov	r1, r3
 8009e04:	4620      	mov	r0, r4
 8009e06:	f7f6 ff95 	bl	8000d34 <__aeabi_fmul>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461c      	mov	r4, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7f6 ff8d 	bl	8000d34 <__aeabi_fmul>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f7f6 fe7e 	bl	8000b20 <__aeabi_fsub>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461c      	mov	r4, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7f6 ff80 	bl	8000d34 <__aeabi_fmul>
 8009e34:	4603      	mov	r3, r0
 8009e36:	4619      	mov	r1, r3
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f7f6 fe71 	bl	8000b20 <__aeabi_fsub>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	461a      	mov	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	625a      	str	r2, [r3, #36]	; 0x24


    S12_pitch = - S12_pitch*(Kt11_att - 1) - Kt12_att*S22_pitch - Kt12_att*S32_pitch;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009e4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009e54:	f7f6 fe64 	bl	8000b20 <__aeabi_fsub>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7f6 ff69 	bl	8000d34 <__aeabi_fmul>
 8009e62:	4603      	mov	r3, r0
 8009e64:	461c      	mov	r4, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7f6 ff61 	bl	8000d34 <__aeabi_fmul>
 8009e72:	4603      	mov	r3, r0
 8009e74:	4619      	mov	r1, r3
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7f6 fe52 	bl	8000b20 <__aeabi_fsub>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	461c      	mov	r4, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f6 ff54 	bl	8000d34 <__aeabi_fmul>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7f6 fe45 	bl	8000b20 <__aeabi_fsub>
 8009e96:	4603      	mov	r3, r0
 8009e98:	461a      	mov	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	629a      	str	r2, [r3, #40]	; 0x28


    S13_pitch = - S13_pitch*(Kt11_att - 1) - Kt12_att*S23_pitch - Kt12_att*S33_pitch;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009ea6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009eaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009eac:	f7f6 fe38 	bl	8000b20 <__aeabi_fsub>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7f6 ff3d 	bl	8000d34 <__aeabi_fmul>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	461c      	mov	r4, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7f6 ff35 	bl	8000d34 <__aeabi_fmul>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f7f6 fe26 	bl	8000b20 <__aeabi_fsub>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	461c      	mov	r4, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009edc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f6 ff28 	bl	8000d34 <__aeabi_fmul>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f7f6 fe19 	bl	8000b20 <__aeabi_fsub>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	635a      	str	r2, [r3, #52]	; 0x34


    S21_pitch = - S21_pitch*(Kt22_att - 1) - Kt21_att*S11_pitch - Kt22_att*S31_pitch;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009efe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f04:	f7f6 fe0c 	bl	8000b20 <__aeabi_fsub>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f7f6 ff11 	bl	8000d34 <__aeabi_fmul>
 8009f12:	4603      	mov	r3, r0
 8009f14:	461c      	mov	r4, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7f6 ff09 	bl	8000d34 <__aeabi_fmul>
 8009f22:	4603      	mov	r3, r0
 8009f24:	4619      	mov	r1, r3
 8009f26:	4620      	mov	r0, r4
 8009f28:	f7f6 fdfa 	bl	8000b20 <__aeabi_fsub>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461c      	mov	r4, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7f6 fefc 	bl	8000d34 <__aeabi_fmul>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7f6 fded 	bl	8000b20 <__aeabi_fsub>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	62da      	str	r2, [r3, #44]	; 0x2c


    S22_pitch = - S22_pitch*(Kt22_att - 1) - Kt21_att*S12_pitch - Kt22_att*S32_pitch;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f52:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009f56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f5c:	f7f6 fde0 	bl	8000b20 <__aeabi_fsub>
 8009f60:	4603      	mov	r3, r0
 8009f62:	4619      	mov	r1, r3
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7f6 fee5 	bl	8000d34 <__aeabi_fmul>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	461c      	mov	r4, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7f6 fedd 	bl	8000d34 <__aeabi_fmul>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7f6 fdce 	bl	8000b20 <__aeabi_fsub>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461c      	mov	r4, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7f6 fed0 	bl	8000d34 <__aeabi_fmul>
 8009f94:	4603      	mov	r3, r0
 8009f96:	4619      	mov	r1, r3
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7f6 fdc1 	bl	8000b20 <__aeabi_fsub>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	631a      	str	r2, [r3, #48]	; 0x30


    S23_pitch = - S23_pitch*(Kt22_att - 1) - Kt21_att*S13_pitch - Kt22_att*S33_pitch;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009fae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb4:	f7f6 fdb4 	bl	8000b20 <__aeabi_fsub>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7f6 feb9 	bl	8000d34 <__aeabi_fmul>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	461c      	mov	r4, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7f6 feb1 	bl	8000d34 <__aeabi_fmul>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7f6 fda2 	bl	8000b20 <__aeabi_fsub>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	461c      	mov	r4, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7f6 fea4 	bl	8000d34 <__aeabi_fmul>
 8009fec:	4603      	mov	r3, r0
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f7f6 fd95 	bl	8000b20 <__aeabi_fsub>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38


    S31_pitch = - S31_pitch*(Kt32_att - 1) - Kt31_att*S11_pitch - Kt32_att*S21_pitch;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a002:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a006:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a00a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a00c:	f7f6 fd88 	bl	8000b20 <__aeabi_fsub>
 800a010:	4603      	mov	r3, r0
 800a012:	4619      	mov	r1, r3
 800a014:	4620      	mov	r0, r4
 800a016:	f7f6 fe8d 	bl	8000d34 <__aeabi_fmul>
 800a01a:	4603      	mov	r3, r0
 800a01c:	461c      	mov	r4, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a024:	4618      	mov	r0, r3
 800a026:	f7f6 fe85 	bl	8000d34 <__aeabi_fmul>
 800a02a:	4603      	mov	r3, r0
 800a02c:	4619      	mov	r1, r3
 800a02e:	4620      	mov	r0, r4
 800a030:	f7f6 fd76 	bl	8000b20 <__aeabi_fsub>
 800a034:	4603      	mov	r3, r0
 800a036:	461c      	mov	r4, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 fe78 	bl	8000d34 <__aeabi_fmul>
 800a044:	4603      	mov	r3, r0
 800a046:	4619      	mov	r1, r3
 800a048:	4620      	mov	r0, r4
 800a04a:	f7f6 fd69 	bl	8000b20 <__aeabi_fsub>
 800a04e:	4603      	mov	r3, r0
 800a050:	461a      	mov	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	63da      	str	r2, [r3, #60]	; 0x3c


    S32_pitch = - S32_pitch*(Kt32_att - 1) - Kt31_att*S12_pitch - Kt32_att*S22_pitch;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a05e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a064:	f7f6 fd5c 	bl	8000b20 <__aeabi_fsub>
 800a068:	4603      	mov	r3, r0
 800a06a:	4619      	mov	r1, r3
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7f6 fe61 	bl	8000d34 <__aeabi_fmul>
 800a072:	4603      	mov	r3, r0
 800a074:	461c      	mov	r4, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7f6 fe59 	bl	8000d34 <__aeabi_fmul>
 800a082:	4603      	mov	r3, r0
 800a084:	4619      	mov	r1, r3
 800a086:	4620      	mov	r0, r4
 800a088:	f7f6 fd4a 	bl	8000b20 <__aeabi_fsub>
 800a08c:	4603      	mov	r3, r0
 800a08e:	461c      	mov	r4, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a096:	4618      	mov	r0, r3
 800a098:	f7f6 fe4c 	bl	8000d34 <__aeabi_fmul>
 800a09c:	4603      	mov	r3, r0
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f7f6 fd3d 	bl	8000b20 <__aeabi_fsub>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	641a      	str	r2, [r3, #64]	; 0x40


    S33_pitch = - S33_pitch*(Kt32_att - 1) - Kt31_att*S13_pitch - Kt32_att*S23_pitch;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a0b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0bc:	f7f6 fd30 	bl	8000b20 <__aeabi_fsub>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7f6 fe35 	bl	8000d34 <__aeabi_fmul>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	461c      	mov	r4, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7f6 fe2d 	bl	8000d34 <__aeabi_fmul>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f7f6 fd1e 	bl	8000b20 <__aeabi_fsub>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461c      	mov	r4, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f6 fe20 	bl	8000d34 <__aeabi_fmul>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f7f6 fd11 	bl	8000b20 <__aeabi_fsub>
 800a0fe:	4603      	mov	r3, r0
 800a100:	461a      	mov	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	645a      	str	r2, [r3, #68]	; 0x44

/*
  roll_rate  = lpf_roll.Run(gyroX);
  pitch_rate = lpf_pitch.Run(gyroY);*/

  yaw_rate   = lpf_yaw.Run(gyroZ);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a10c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 f9b3 	bl	800b47a <_ZN3lpf3RunEf>
 800a114:	4602      	mov	r2, r0
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	615a      	str	r2, [r3, #20]
    	pitch_comp = pitch_acc;

    	gyro_ready = true;
    } */

      float u = acc_vert;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a120:	627b      	str	r3, [r7, #36]	; 0x24

      //ALT PREDICTION
	  alt_gnd = (alt_gnd) + st*(vz) + (u*(st)*st)/2;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a128:	4618      	mov	r0, r3
 800a12a:	f7f6 f975 	bl	8000418 <__aeabi_f2d>
 800a12e:	4680      	mov	r8, r0
 800a130:	4689      	mov	r9, r1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f6 f96a 	bl	8000418 <__aeabi_f2d>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4620      	mov	r0, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	f7f6 f9bc 	bl	80004c8 <__aeabi_dmul>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4640      	mov	r0, r8
 800a156:	4649      	mov	r1, r9
 800a158:	f7f6 f800 	bl	800015c <__adddf3>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4614      	mov	r4, r2
 800a162:	461d      	mov	r5, r3
 800a164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a166:	f7f6 f957 	bl	8000418 <__aeabi_f2d>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a170:	f7f6 f9aa 	bl	80004c8 <__aeabi_dmul>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4610      	mov	r0, r2
 800a17a:	4619      	mov	r1, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a182:	f7f6 f9a1 	bl	80004c8 <__aeabi_dmul>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4610      	mov	r0, r2
 800a18c:	4619      	mov	r1, r3
 800a18e:	f04f 0200 	mov.w	r2, #0
 800a192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a196:	f7f6 fac1 	bl	800071c <__aeabi_ddiv>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7f5 ffdb 	bl	800015c <__adddf3>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f7f6 fc63 	bl	8000a78 <__aeabi_d2f>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	  vz = (vz) + u*(st);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7f6 f929 	bl	8000418 <__aeabi_f2d>
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1cc:	f7f6 f924 	bl	8000418 <__aeabi_f2d>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a1d6:	f7f6 f977 	bl	80004c8 <__aeabi_dmul>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f5 ffbb 	bl	800015c <__adddf3>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	f7f6 fc43 	bl	8000a78 <__aeabi_d2f>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  //baro_gnd = (baro_gnd);

	  S11_alt = S11_alt + salt + S21_alt*st + (st)*(S12_alt + S22_alt*st);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7f6 fc8c 	bl	8000b24 <__addsf3>
 800a20c:	4603      	mov	r3, r0
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f6 f902 	bl	8000418 <__aeabi_f2d>
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a21e:	4618      	mov	r0, r3
 800a220:	f7f6 f8fa 	bl	8000418 <__aeabi_f2d>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a22a:	f7f6 f94d 	bl	80004c8 <__aeabi_dmul>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4620      	mov	r0, r4
 800a234:	4629      	mov	r1, r5
 800a236:	f7f5 ff91 	bl	800015c <__adddf3>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4692      	mov	sl, r2
 800a240:	469b      	mov	fp, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f6 f8e3 	bl	8000418 <__aeabi_f2d>
 800a252:	4680      	mov	r8, r0
 800a254:	4689      	mov	r9, r1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f6 f8db 	bl	8000418 <__aeabi_f2d>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a268:	f7f6 f92e 	bl	80004c8 <__aeabi_dmul>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4640      	mov	r0, r8
 800a272:	4649      	mov	r1, r9
 800a274:	f7f5 ff72 	bl	800015c <__adddf3>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4620      	mov	r0, r4
 800a27e:	4629      	mov	r1, r5
 800a280:	f7f6 f922 	bl	80004c8 <__aeabi_dmul>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	4650      	mov	r0, sl
 800a28a:	4659      	mov	r1, fp
 800a28c:	f7f5 ff66 	bl	800015c <__adddf3>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4610      	mov	r0, r2
 800a296:	4619      	mov	r1, r3
 800a298:	f7f6 fbee 	bl	8000a78 <__aeabi_d2f>
 800a29c:	4602      	mov	r2, r0
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	679a      	str	r2, [r3, #120]	; 0x78
	  S12_alt = S12_alt + S22_alt*st;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7f6 f8b6 	bl	8000418 <__aeabi_f2d>
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 f8ae 	bl	8000418 <__aeabi_f2d>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a2c2:	f7f6 f901 	bl	80004c8 <__aeabi_dmul>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7f5 ff45 	bl	800015c <__adddf3>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	4619      	mov	r1, r3
 800a2da:	f7f6 fbcd 	bl	8000a78 <__aeabi_d2f>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	67da      	str	r2, [r3, #124]	; 0x7c
	  S13_alt = S13_alt + S23_alt*st;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7f6 f894 	bl	8000418 <__aeabi_f2d>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f6 f88c 	bl	8000418 <__aeabi_f2d>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a306:	f7f6 f8df 	bl	80004c8 <__aeabi_dmul>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f5 ff23 	bl	800015c <__adddf3>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	4610      	mov	r0, r2
 800a31c:	4619      	mov	r1, r3
 800a31e:	f7f6 fbab 	bl	8000a78 <__aeabi_d2f>
 800a322:	4602      	mov	r2, r0
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	  S21_alt = S21_alt + S22_alt*(st);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a330:	4618      	mov	r0, r3
 800a332:	f7f6 f871 	bl	8000418 <__aeabi_f2d>
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a340:	4618      	mov	r0, r3
 800a342:	f7f6 f869 	bl	8000418 <__aeabi_f2d>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a34c:	f7f6 f8bc 	bl	80004c8 <__aeabi_dmul>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f5 ff00 	bl	800015c <__adddf3>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4610      	mov	r0, r2
 800a362:	4619      	mov	r1, r3
 800a364:	f7f6 fb88 	bl	8000a78 <__aeabi_d2f>
 800a368:	4602      	mov	r2, r0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  S22_alt =  S22_alt + svel;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a37c:	4619      	mov	r1, r3
 800a37e:	4610      	mov	r0, r2
 800a380:	f7f6 fbd0 	bl	8000b24 <__addsf3>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	  //S23_alt = S23_alt;

	  S31_alt = S31_alt + S32_alt*(st);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a394:	4618      	mov	r0, r3
 800a396:	f7f6 f83f 	bl	8000418 <__aeabi_f2d>
 800a39a:	4604      	mov	r4, r0
 800a39c:	460d      	mov	r5, r1
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f6 f837 	bl	8000418 <__aeabi_f2d>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a3b0:	f7f6 f88a 	bl	80004c8 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f5 fece 	bl	800015c <__adddf3>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	f7f6 fb56 	bl	8000a78 <__aeabi_d2f>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	  //S32_alt = S32_alt;
	  S33_alt = S33_alt + sbar;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	f7f6 fb9e 	bl	8000b24 <__addsf3>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	  A = (Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800a3fe:	4619      	mov	r1, r3
 800a400:	4610      	mov	r0, r2
 800a402:	f7f6 fc97 	bl	8000d34 <__aeabi_fmul>
 800a406:	4603      	mov	r3, r0
 800a408:	461c      	mov	r4, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f7f6 fc8c 	bl	8000d34 <__aeabi_fmul>
 800a41c:	4603      	mov	r3, r0
 800a41e:	4619      	mov	r1, r3
 800a420:	4620      	mov	r0, r4
 800a422:	f7f6 fb7f 	bl	8000b24 <__addsf3>
 800a426:	4603      	mov	r3, r0
 800a428:	461c      	mov	r4, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7f6 fc7c 	bl	8000d34 <__aeabi_fmul>
 800a43c:	4603      	mov	r3, r0
 800a43e:	4619      	mov	r1, r3
 800a440:	4620      	mov	r0, r4
 800a442:	f7f6 fb6f 	bl	8000b24 <__addsf3>
 800a446:	4603      	mov	r3, r0
 800a448:	461c      	mov	r4, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a456:	4619      	mov	r1, r3
 800a458:	4610      	mov	r0, r2
 800a45a:	f7f6 fc6b 	bl	8000d34 <__aeabi_fmul>
 800a45e:	4603      	mov	r3, r0
 800a460:	4619      	mov	r1, r3
 800a462:	4620      	mov	r0, r4
 800a464:	f7f6 fb5e 	bl	8000b24 <__addsf3>
 800a468:	4603      	mov	r3, r0
 800a46a:	461c      	mov	r4, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7f6 fc5a 	bl	8000d34 <__aeabi_fmul>
 800a480:	4603      	mov	r3, r0
 800a482:	4619      	mov	r1, r3
 800a484:	4620      	mov	r0, r4
 800a486:	f7f6 fb4d 	bl	8000b24 <__addsf3>
 800a48a:	4603      	mov	r3, r0
 800a48c:	461c      	mov	r4, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a49a:	4619      	mov	r1, r3
 800a49c:	4610      	mov	r0, r2
 800a49e:	f7f6 fc49 	bl	8000d34 <__aeabi_fmul>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7f6 fb3c 	bl	8000b24 <__addsf3>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f7f6 fc39 	bl	8000d34 <__aeabi_fmul>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f7f6 fb2c 	bl	8000b24 <__addsf3>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461c      	mov	r4, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7f6 fc28 	bl	8000d34 <__aeabi_fmul>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7f6 fb19 	bl	8000b20 <__aeabi_fsub>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	643b      	str	r3, [r7, #64]	; 0x40

	  //ALT CORRECTION
	  float Kt11 = (Qs*(S11_alt + S13_alt))/A;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a502:	4619      	mov	r1, r3
 800a504:	4610      	mov	r0, r2
 800a506:	f7f6 fb0d 	bl	8000b24 <__addsf3>
 800a50a:	4603      	mov	r3, r0
 800a50c:	4619      	mov	r1, r3
 800a50e:	4620      	mov	r0, r4
 800a510:	f7f6 fc10 	bl	8000d34 <__aeabi_fmul>
 800a514:	4603      	mov	r3, r0
 800a516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a518:	4618      	mov	r0, r3
 800a51a:	f7f6 fcbf 	bl	8000e9c <__aeabi_fdiv>
 800a51e:	4603      	mov	r3, r0
 800a520:	623b      	str	r3, [r7, #32]
	  float Kt12 = (Qb*S11_alt + S11_alt*S33_alt - S13_alt*S31_alt)/A;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a52c:	4619      	mov	r1, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f7f6 fc00 	bl	8000d34 <__aeabi_fmul>
 800a534:	4603      	mov	r3, r0
 800a536:	461c      	mov	r4, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a542:	4619      	mov	r1, r3
 800a544:	4610      	mov	r0, r2
 800a546:	f7f6 fbf5 	bl	8000d34 <__aeabi_fmul>
 800a54a:	4603      	mov	r3, r0
 800a54c:	4619      	mov	r1, r3
 800a54e:	4620      	mov	r0, r4
 800a550:	f7f6 fae8 	bl	8000b24 <__addsf3>
 800a554:	4603      	mov	r3, r0
 800a556:	461c      	mov	r4, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f7f6 fbe4 	bl	8000d34 <__aeabi_fmul>
 800a56c:	4603      	mov	r3, r0
 800a56e:	4619      	mov	r1, r3
 800a570:	4620      	mov	r0, r4
 800a572:	f7f6 fad5 	bl	8000b20 <__aeabi_fsub>
 800a576:	4603      	mov	r3, r0
 800a578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f6 fc8e 	bl	8000e9c <__aeabi_fdiv>
 800a580:	4603      	mov	r3, r0
 800a582:	61fb      	str	r3, [r7, #28]

	  float Kt21 = (Qs*S21_alt + Qs*S23_alt + S11_alt*S23_alt - S13_alt*S21_alt)/A;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	f7f6 fbce 	bl	8000d34 <__aeabi_fmul>
 800a598:	4603      	mov	r3, r0
 800a59a:	461c      	mov	r4, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f7f6 fbc2 	bl	8000d34 <__aeabi_fmul>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f7f6 fab5 	bl	8000b24 <__addsf3>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	461c      	mov	r4, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f7f6 fbb2 	bl	8000d34 <__aeabi_fmul>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f7f6 faa5 	bl	8000b24 <__addsf3>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	461c      	mov	r4, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f7f6 fba1 	bl	8000d34 <__aeabi_fmul>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7f6 fa92 	bl	8000b20 <__aeabi_fsub>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a600:	4618      	mov	r0, r3
 800a602:	f7f6 fc4b 	bl	8000e9c <__aeabi_fdiv>
 800a606:	4603      	mov	r3, r0
 800a608:	61bb      	str	r3, [r7, #24]
	  float Kt22 = (Qb*S21_alt - S11_alt*S23_alt + S13_alt*S21_alt + S21_alt*S33_alt - S23_alt*S31_alt)/A;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7f6 fb8b 	bl	8000d34 <__aeabi_fmul>
 800a61e:	4603      	mov	r3, r0
 800a620:	461c      	mov	r4, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7f6 fb80 	bl	8000d34 <__aeabi_fmul>
 800a634:	4603      	mov	r3, r0
 800a636:	4619      	mov	r1, r3
 800a638:	4620      	mov	r0, r4
 800a63a:	f7f6 fa71 	bl	8000b20 <__aeabi_fsub>
 800a63e:	4603      	mov	r3, r0
 800a640:	461c      	mov	r4, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f7f6 fb6f 	bl	8000d34 <__aeabi_fmul>
 800a656:	4603      	mov	r3, r0
 800a658:	4619      	mov	r1, r3
 800a65a:	4620      	mov	r0, r4
 800a65c:	f7f6 fa62 	bl	8000b24 <__addsf3>
 800a660:	4603      	mov	r3, r0
 800a662:	461c      	mov	r4, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a670:	4619      	mov	r1, r3
 800a672:	4610      	mov	r0, r2
 800a674:	f7f6 fb5e 	bl	8000d34 <__aeabi_fmul>
 800a678:	4603      	mov	r3, r0
 800a67a:	4619      	mov	r1, r3
 800a67c:	4620      	mov	r0, r4
 800a67e:	f7f6 fa51 	bl	8000b24 <__addsf3>
 800a682:	4603      	mov	r3, r0
 800a684:	461c      	mov	r4, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7f6 fb4d 	bl	8000d34 <__aeabi_fmul>
 800a69a:	4603      	mov	r3, r0
 800a69c:	4619      	mov	r1, r3
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7f6 fa3e 	bl	8000b20 <__aeabi_fsub>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7f6 fbf7 	bl	8000e9c <__aeabi_fdiv>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	617b      	str	r3, [r7, #20]

	  float Kt31 = (Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt)/A;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7f6 fb37 	bl	8000d34 <__aeabi_fmul>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	461c      	mov	r4, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7f6 fb2b 	bl	8000d34 <__aeabi_fmul>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7f6 fa1e 	bl	8000b24 <__addsf3>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	461c      	mov	r4, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f7f6 fb1b 	bl	8000d34 <__aeabi_fmul>
 800a6fe:	4603      	mov	r3, r0
 800a700:	4619      	mov	r1, r3
 800a702:	4620      	mov	r0, r4
 800a704:	f7f6 fa0e 	bl	8000b24 <__addsf3>
 800a708:	4603      	mov	r3, r0
 800a70a:	461c      	mov	r4, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a718:	4619      	mov	r1, r3
 800a71a:	4610      	mov	r0, r2
 800a71c:	f7f6 fb0a 	bl	8000d34 <__aeabi_fmul>
 800a720:	4603      	mov	r3, r0
 800a722:	4619      	mov	r1, r3
 800a724:	4620      	mov	r0, r4
 800a726:	f7f6 f9fb 	bl	8000b20 <__aeabi_fsub>
 800a72a:	4603      	mov	r3, r0
 800a72c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f6 fbb4 	bl	8000e9c <__aeabi_fdiv>
 800a734:	4603      	mov	r3, r0
 800a736:	613b      	str	r3, [r7, #16]
	  float Kt32 = (Qb*S31_alt - S11_alt*S33_alt + S13_alt*S31_alt)/A;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a744:	4619      	mov	r1, r3
 800a746:	4610      	mov	r0, r2
 800a748:	f7f6 faf4 	bl	8000d34 <__aeabi_fmul>
 800a74c:	4603      	mov	r3, r0
 800a74e:	461c      	mov	r4, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f7f6 fae9 	bl	8000d34 <__aeabi_fmul>
 800a762:	4603      	mov	r3, r0
 800a764:	4619      	mov	r1, r3
 800a766:	4620      	mov	r0, r4
 800a768:	f7f6 f9da 	bl	8000b20 <__aeabi_fsub>
 800a76c:	4603      	mov	r3, r0
 800a76e:	461c      	mov	r4, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a77c:	4619      	mov	r1, r3
 800a77e:	4610      	mov	r0, r2
 800a780:	f7f6 fad8 	bl	8000d34 <__aeabi_fmul>
 800a784:	4603      	mov	r3, r0
 800a786:	4619      	mov	r1, r3
 800a788:	4620      	mov	r0, r4
 800a78a:	f7f6 f9cb 	bl	8000b24 <__addsf3>
 800a78e:	4603      	mov	r3, r0
 800a790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a792:	4618      	mov	r0, r3
 800a794:	f7f6 fb82 	bl	8000e9c <__aeabi_fdiv>
 800a798:	4603      	mov	r3, r0
 800a79a:	60fb      	str	r3, [r7, #12]

	  alt_gnd = (alt_gnd) - Kt12*((alt_gnd) - (sonar_alt)) - Kt11*((alt_gnd) - (baro_alt) + (baro_gnd));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	f7f6 f9b5 	bl	8000b20 <__aeabi_fsub>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	69f9      	ldr	r1, [r7, #28]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7f6 faba 	bl	8000d34 <__aeabi_fmul>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f7f6 f9ab 	bl	8000b20 <__aeabi_fsub>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461c      	mov	r4, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f7f6 f99f 	bl	8000b20 <__aeabi_fsub>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	f7f6 f998 	bl	8000b24 <__addsf3>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	6a39      	ldr	r1, [r7, #32]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7f6 fa9b 	bl	8000d34 <__aeabi_fmul>
 800a7fe:	4603      	mov	r3, r0
 800a800:	4619      	mov	r1, r3
 800a802:	4620      	mov	r0, r4
 800a804:	f7f6 f98c 	bl	8000b20 <__aeabi_fsub>
 800a808:	4603      	mov	r3, r0
 800a80a:	461a      	mov	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138


	  vz = (vz) - Kt22*((alt_gnd) - (sonar_alt)) - Kt21*((alt_gnd) - (baro_alt) + (baro_gnd));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a824:	4619      	mov	r1, r3
 800a826:	4610      	mov	r0, r2
 800a828:	f7f6 f97a 	bl	8000b20 <__aeabi_fsub>
 800a82c:	4603      	mov	r3, r0
 800a82e:	6979      	ldr	r1, [r7, #20]
 800a830:	4618      	mov	r0, r3
 800a832:	f7f6 fa7f 	bl	8000d34 <__aeabi_fmul>
 800a836:	4603      	mov	r3, r0
 800a838:	4619      	mov	r1, r3
 800a83a:	4620      	mov	r0, r4
 800a83c:	f7f6 f970 	bl	8000b20 <__aeabi_fsub>
 800a840:	4603      	mov	r3, r0
 800a842:	461c      	mov	r4, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a850:	4619      	mov	r1, r3
 800a852:	4610      	mov	r0, r2
 800a854:	f7f6 f964 	bl	8000b20 <__aeabi_fsub>
 800a858:	4603      	mov	r3, r0
 800a85a:	461a      	mov	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f7f6 f95d 	bl	8000b24 <__addsf3>
 800a86a:	4603      	mov	r3, r0
 800a86c:	69b9      	ldr	r1, [r7, #24]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f6 fa60 	bl	8000d34 <__aeabi_fmul>
 800a874:	4603      	mov	r3, r0
 800a876:	4619      	mov	r1, r3
 800a878:	4620      	mov	r0, r4
 800a87a:	f7f6 f951 	bl	8000b20 <__aeabi_fsub>
 800a87e:	4603      	mov	r3, r0
 800a880:	461a      	mov	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


	  baro_gnd = (baro_gnd) - Kt32*((alt_gnd) - (sonar_alt)) - Kt31*((alt_gnd) - (baro_alt) + (baro_gnd));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f7f6 f93f 	bl	8000b20 <__aeabi_fsub>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	68f9      	ldr	r1, [r7, #12]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f6 fa44 	bl	8000d34 <__aeabi_fmul>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f7f6 f935 	bl	8000b20 <__aeabi_fsub>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	461c      	mov	r4, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7f6 f929 	bl	8000b20 <__aeabi_fsub>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4610      	mov	r0, r2
 800a8dc:	f7f6 f922 	bl	8000b24 <__addsf3>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	6939      	ldr	r1, [r7, #16]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7f6 fa25 	bl	8000d34 <__aeabi_fmul>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7f6 f916 	bl	8000b20 <__aeabi_fsub>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148


	  S11_alt =  - S11_alt*(Kt11 + Kt12 - 1) - Kt11*S31_alt;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a902:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a906:	69f9      	ldr	r1, [r7, #28]
 800a908:	6a38      	ldr	r0, [r7, #32]
 800a90a:	f7f6 f90b 	bl	8000b24 <__addsf3>
 800a90e:	4603      	mov	r3, r0
 800a910:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a914:	4618      	mov	r0, r3
 800a916:	f7f6 f903 	bl	8000b20 <__aeabi_fsub>
 800a91a:	4603      	mov	r3, r0
 800a91c:	4619      	mov	r1, r3
 800a91e:	4620      	mov	r0, r4
 800a920:	f7f6 fa08 	bl	8000d34 <__aeabi_fmul>
 800a924:	4603      	mov	r3, r0
 800a926:	461c      	mov	r4, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a92e:	6a39      	ldr	r1, [r7, #32]
 800a930:	4618      	mov	r0, r3
 800a932:	f7f6 f9ff 	bl	8000d34 <__aeabi_fmul>
 800a936:	4603      	mov	r3, r0
 800a938:	4619      	mov	r1, r3
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7f6 f8f0 	bl	8000b20 <__aeabi_fsub>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	679a      	str	r2, [r3, #120]	; 0x78


	  S12_alt = - S12_alt*(Kt11 + Kt12 - 1) - Kt11*S32_alt;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a94c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a950:	69f9      	ldr	r1, [r7, #28]
 800a952:	6a38      	ldr	r0, [r7, #32]
 800a954:	f7f6 f8e6 	bl	8000b24 <__addsf3>
 800a958:	4603      	mov	r3, r0
 800a95a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a95e:	4618      	mov	r0, r3
 800a960:	f7f6 f8de 	bl	8000b20 <__aeabi_fsub>
 800a964:	4603      	mov	r3, r0
 800a966:	4619      	mov	r1, r3
 800a968:	4620      	mov	r0, r4
 800a96a:	f7f6 f9e3 	bl	8000d34 <__aeabi_fmul>
 800a96e:	4603      	mov	r3, r0
 800a970:	461c      	mov	r4, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a978:	6a39      	ldr	r1, [r7, #32]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f6 f9da 	bl	8000d34 <__aeabi_fmul>
 800a980:	4603      	mov	r3, r0
 800a982:	4619      	mov	r1, r3
 800a984:	4620      	mov	r0, r4
 800a986:	f7f6 f8cb 	bl	8000b20 <__aeabi_fsub>
 800a98a:	4603      	mov	r3, r0
 800a98c:	461a      	mov	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	67da      	str	r2, [r3, #124]	; 0x7c


	  S13_alt = - S13_alt*(Kt11 + Kt12 - 1) - Kt11*S33_alt;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a998:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a99c:	69f9      	ldr	r1, [r7, #28]
 800a99e:	6a38      	ldr	r0, [r7, #32]
 800a9a0:	f7f6 f8c0 	bl	8000b24 <__addsf3>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f6 f8b8 	bl	8000b20 <__aeabi_fsub>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7f6 f9bd 	bl	8000d34 <__aeabi_fmul>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	461c      	mov	r4, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9c4:	6a39      	ldr	r1, [r7, #32]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7f6 f9b4 	bl	8000d34 <__aeabi_fmul>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f7f6 f8a5 	bl	8000b20 <__aeabi_fsub>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	461a      	mov	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


	  S21_alt =  S21_alt - S11_alt*(Kt21 + Kt22) - Kt21*S31_alt;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800a9ea:	6979      	ldr	r1, [r7, #20]
 800a9ec:	69b8      	ldr	r0, [r7, #24]
 800a9ee:	f7f6 f899 	bl	8000b24 <__addsf3>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7f6 f99c 	bl	8000d34 <__aeabi_fmul>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7f6 f88d 	bl	8000b20 <__aeabi_fsub>
 800aa06:	4603      	mov	r3, r0
 800aa08:	461c      	mov	r4, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa10:	69b9      	ldr	r1, [r7, #24]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7f6 f98e 	bl	8000d34 <__aeabi_fmul>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7f6 f87f 	bl	8000b20 <__aeabi_fsub>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


	  S22_alt =  S22_alt - S12_alt*(Kt21 + Kt22) - Kt21*S32_alt;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 800aa36:	6979      	ldr	r1, [r7, #20]
 800aa38:	69b8      	ldr	r0, [r7, #24]
 800aa3a:	f7f6 f873 	bl	8000b24 <__addsf3>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	4619      	mov	r1, r3
 800aa42:	4628      	mov	r0, r5
 800aa44:	f7f6 f976 	bl	8000d34 <__aeabi_fmul>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f7f6 f867 	bl	8000b20 <__aeabi_fsub>
 800aa52:	4603      	mov	r3, r0
 800aa54:	461c      	mov	r4, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa5c:	69b9      	ldr	r1, [r7, #24]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f6 f968 	bl	8000d34 <__aeabi_fmul>
 800aa64:	4603      	mov	r3, r0
 800aa66:	4619      	mov	r1, r3
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f7f6 f859 	bl	8000b20 <__aeabi_fsub>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	461a      	mov	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	  S23_alt =  S23_alt - S13_alt*(Kt21 + Kt22) - Kt21*S33_alt;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800aa84:	6979      	ldr	r1, [r7, #20]
 800aa86:	69b8      	ldr	r0, [r7, #24]
 800aa88:	f7f6 f84c 	bl	8000b24 <__addsf3>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	4619      	mov	r1, r3
 800aa90:	4628      	mov	r0, r5
 800aa92:	f7f6 f94f 	bl	8000d34 <__aeabi_fmul>
 800aa96:	4603      	mov	r3, r0
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f7f6 f840 	bl	8000b20 <__aeabi_fsub>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	461c      	mov	r4, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aaaa:	69b9      	ldr	r1, [r7, #24]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7f6 f941 	bl	8000d34 <__aeabi_fmul>
 800aab2:	4603      	mov	r3, r0
 800aab4:	4619      	mov	r1, r3
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7f6 f832 	bl	8000b20 <__aeabi_fsub>
 800aabc:	4603      	mov	r3, r0
 800aabe:	461a      	mov	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


	  S31_alt = - S31_alt*(Kt31 - 1) - S11_alt*(Kt31 + Kt32);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aacc:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aad0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aad4:	6938      	ldr	r0, [r7, #16]
 800aad6:	f7f6 f823 	bl	8000b20 <__aeabi_fsub>
 800aada:	4603      	mov	r3, r0
 800aadc:	4619      	mov	r1, r3
 800aade:	4620      	mov	r0, r4
 800aae0:	f7f6 f928 	bl	8000d34 <__aeabi_fmul>
 800aae4:	4603      	mov	r3, r0
 800aae6:	461d      	mov	r5, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800aaec:	68f9      	ldr	r1, [r7, #12]
 800aaee:	6938      	ldr	r0, [r7, #16]
 800aaf0:	f7f6 f818 	bl	8000b24 <__addsf3>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7f6 f91b 	bl	8000d34 <__aeabi_fmul>
 800aafe:	4603      	mov	r3, r0
 800ab00:	4619      	mov	r1, r3
 800ab02:	4628      	mov	r0, r5
 800ab04:	f7f6 f80c 	bl	8000b20 <__aeabi_fsub>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


	  S32_alt = - S32_alt*(Kt31 - 1) - S12_alt*(Kt31 + Kt32);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab18:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ab1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab20:	6938      	ldr	r0, [r7, #16]
 800ab22:	f7f5 fffd 	bl	8000b20 <__aeabi_fsub>
 800ab26:	4603      	mov	r3, r0
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f7f6 f902 	bl	8000d34 <__aeabi_fmul>
 800ab30:	4603      	mov	r3, r0
 800ab32:	461d      	mov	r5, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800ab38:	68f9      	ldr	r1, [r7, #12]
 800ab3a:	6938      	ldr	r0, [r7, #16]
 800ab3c:	f7f5 fff2 	bl	8000b24 <__addsf3>
 800ab40:	4603      	mov	r3, r0
 800ab42:	4619      	mov	r1, r3
 800ab44:	4620      	mov	r0, r4
 800ab46:	f7f6 f8f5 	bl	8000d34 <__aeabi_fmul>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f7f5 ffe6 	bl	8000b20 <__aeabi_fsub>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94


	  S33_alt = - S33_alt*(Kt31 - 1) - S13_alt*(Kt31 + Kt32);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab64:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ab68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab6c:	6938      	ldr	r0, [r7, #16]
 800ab6e:	f7f5 ffd7 	bl	8000b20 <__aeabi_fsub>
 800ab72:	4603      	mov	r3, r0
 800ab74:	4619      	mov	r1, r3
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7f6 f8dc 	bl	8000d34 <__aeabi_fmul>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461d      	mov	r5, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	6938      	ldr	r0, [r7, #16]
 800ab8a:	f7f5 ffcb 	bl	8000b24 <__addsf3>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4619      	mov	r1, r3
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7f6 f8ce 	bl	8000d34 <__aeabi_fmul>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f7f5 ffbf 	bl	8000b20 <__aeabi_fsub>
 800aba2:	4603      	mov	r3, r0
 800aba4:	461a      	mov	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98


	pitch_eski=pitch_comp;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	roll_eski=roll_comp;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    state.angles[0] = roll_ekf;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    state.angles[1] = pitch_ekf;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    state.angles[2] = 0;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    state.rates[0] = roll_rate;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    state.rates[1] = pitch_rate;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	691a      	ldr	r2, [r3, #16]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    state.rates[2] = yaw_rate;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695a      	ldr	r2, [r3, #20]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    state.bias[0] = roll_bias;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	69da      	ldr	r2, [r3, #28]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    state.bias[1] = pitch_bias;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	699a      	ldr	r2, [r3, #24]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    state.bias[2] = yaw_bias;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1a      	ldr	r2, [r3, #32]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

}
 800ac22:	bf00      	nop
 800ac24:	3760      	adds	r7, #96	; 0x60
 800ac26:	46bd      	mov	sp, r7
 800ac28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ac2c <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fc73 	bl	800b526 <_ZN3lpfD1Ev>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	0000      	movs	r0, r0
 800ac4c:	0000      	movs	r0, r0
	...

0800ac50 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af04      	add	r7, sp, #16
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a23      	ldr	r2, [pc, #140]	; (800ace8 <_ZN3PIDC1Ev+0x98>)
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a22      	ldr	r2, [pc, #136]	; (800acec <_ZN3PIDC1Ev+0x9c>)
 800ac62:	605a      	str	r2, [r3, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ac6a:	609a      	str	r2, [r3, #8]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f6 f80b 	bl	8000c8c <__aeabi_i2f>
 800ac76:	4603      	mov	r3, r0
 800ac78:	4619      	mov	r1, r3
 800ac7a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ac7e:	f7f6 f90d 	bl	8000e9c <__aeabi_fdiv>
 800ac82:	4603      	mov	r3, r0
 800ac84:	461a      	mov	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	60da      	str	r2, [r3, #12]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <_ZN3PIDC1Ev+0xa0>)
 800ac8e:	611a      	str	r2, [r3, #16]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f7f6 f84a 	bl	8000d34 <__aeabi_fmul>
 800aca0:	4603      	mov	r3, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	615a      	str	r2, [r3, #20]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800acae:	a30a      	add	r3, pc, #40	; (adr r3, 800acd8 <_ZN3PIDC1Ev+0x88>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acb8:	a307      	add	r3, pc, #28	; (adr r3, 800acd8 <_ZN3PIDC1Ev+0x88>)
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	e9cd 2300 	strd	r2, r3, [sp]
 800acc2:	a307      	add	r3, pc, #28	; (adr r3, 800ace0 <_ZN3PIDC1Ev+0x90>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	4608      	mov	r0, r1
 800acca:	f000 fbbb 	bl	800b444 <_ZN3lpfC1Eddd>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	de7ea5f8 	.word	0xde7ea5f8
 800acdc:	3fb2a454 	.word	0x3fb2a454
 800ace0:	ab367a10 	.word	0xab367a10
 800ace4:	3feb573e 	.word	0x3feb573e
 800ace8:	42f00000 	.word	0x42f00000
 800acec:	c2f00000 	.word	0xc2f00000
 800acf0:	3e99999a 	.word	0x3e99999a

0800acf4 <_ZN3PID7P_AngleEfff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
	float P;
	e_angle = alpha_des - alpha;
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	68b8      	ldr	r0, [r7, #8]
 800ad06:	f7f5 ff0b 	bl	8000b20 <__aeabi_fsub>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	P = Kp_angle*e_angle;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6838      	ldr	r0, [r7, #0]
 800ad1e:	f7f6 f809 	bl	8000d34 <__aeabi_fmul>
 800ad22:	4603      	mov	r3, r0
 800ad24:	617b      	str	r3, [r7, #20]
    return P;
 800ad26:	697b      	ldr	r3, [r7, #20]

}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <_ZN3PID6PI_AltEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Alt(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch3) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08a      	sub	sp, #40	; 0x28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch3 > 1700) {
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d90e      	bls.n	800ad66 <_ZN3PID6PI_AltEfffffj+0x36>
		zi = z0 + x_inc;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7f5 fee8 	bl	8000b24 <__addsf3>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = vz_def;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	627b      	str	r3, [r7, #36]	; 0x24
 800ad64:	e01c      	b.n	800ada0 <_ZN3PID6PI_AltEfffffj+0x70>
	}

	else if (ch3 < 1300) {
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	f240 5213 	movw	r2, #1299	; 0x513
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d810      	bhi.n	800ad92 <_ZN3PID6PI_AltEfffffj+0x62>
		zi = z0 - x_inc;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	4619      	mov	r1, r3
 800ad76:	68b8      	ldr	r0, [r7, #8]
 800ad78:	f7f5 fed2 	bl	8000b20 <__aeabi_fsub>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = -1 * vz_def;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad90:	e006      	b.n	800ada0 <_ZN3PID6PI_AltEfffffj+0x70>
	}

	else {
		zi = z0;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = 0;
 800ad9a:	f04f 0300 	mov.w	r3, #0
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ada4:	f7f5 febc 	bl	8000b20 <__aeabi_fsub>
 800ada8:	4603      	mov	r3, r0
 800adaa:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800adac:	6a39      	ldr	r1, [r7, #32]
 800adae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adb0:	f7f5 ffc0 	bl	8000d34 <__aeabi_fmul>
 800adb4:	4603      	mov	r3, r0
 800adb6:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	68b8      	ldr	r0, [r7, #8]
 800adbc:	f7f5 feb0 	bl	8000b20 <__aeabi_fsub>
 800adc0:	4603      	mov	r3, r0
 800adc2:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800adc4:	69b9      	ldr	r1, [r7, #24]
 800adc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800adc8:	f7f5 ffb4 	bl	8000d34 <__aeabi_fmul>
 800adcc:	4603      	mov	r3, r0
 800adce:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800add0:	6979      	ldr	r1, [r7, #20]
 800add2:	69f8      	ldr	r0, [r7, #28]
 800add4:	f7f5 fea6 	bl	8000b24 <__addsf3>
 800add8:	4603      	mov	r3, r0
 800adda:	613b      	str	r3, [r7, #16]
    return PI;
 800addc:	693b      	ldr	r3, [r7, #16]

}
 800adde:	4618      	mov	r0, r3
 800ade0:	3728      	adds	r7, #40	; 0x28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800ade8:	b590      	push	{r4, r7, lr}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	68b8      	ldr	r0, [r7, #8]
 800adfa:	f7f5 fe91 	bl	8000b20 <__aeabi_fsub>
 800adfe:	4603      	mov	r3, r0
 800ae00:	461a      	mov	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	651a      	str	r2, [r3, #80]	; 0x50
	P = Kp * e_roll;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7f5 ff91 	bl	8000d34 <__aeabi_fmul>
 800ae12:	4603      	mov	r3, r0
 800ae14:	461a      	mov	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	67da      	str	r2, [r3, #124]	; 0x7c

	ie_roll += e_angle*st;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f7f5 ff82 	bl	8000d34 <__aeabi_fmul>
 800ae30:	4603      	mov	r3, r0
 800ae32:	4619      	mov	r1, r3
 800ae34:	4620      	mov	r0, r4
 800ae36:	f7f5 fe75 	bl	8000b24 <__addsf3>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	661a      	str	r2, [r3, #96]	; 0x60

	I = Ki * (ie_roll * Kp_angle - alpha);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f5 ff73 	bl	8000d34 <__aeabi_fmul>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7f5 fe64 	bl	8000b20 <__aeabi_fsub>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7f5 ff69 	bl	8000d34 <__aeabi_fmul>
 800ae62:	4603      	mov	r3, r0
 800ae64:	461a      	mov	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	4619      	mov	r1, r3
 800ae72:	68b8      	ldr	r0, [r7, #8]
 800ae74:	f7f5 fe54 	bl	8000b20 <__aeabi_fsub>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	617b      	str	r3, [r7, #20]
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7f5 fe4c 	bl	8000b20 <__aeabi_fsub>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4619      	mov	r1, r3
 800ae92:	4610      	mov	r0, r2
 800ae94:	f7f6 f802 	bl	8000e9c <__aeabi_fdiv>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	613b      	str	r3, [r7, #16]
	alpha_dot_dot_des = alpha_dot_dot_des / st;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	4619      	mov	r1, r3
 800aea2:	6978      	ldr	r0, [r7, #20]
 800aea4:	f7f5 fffa 	bl	8000e9c <__aeabi_fdiv>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	617b      	str	r3, [r7, #20]
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3328      	adds	r3, #40	; 0x28
 800aeb0:	6939      	ldr	r1, [r7, #16]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 fae1 	bl	800b47a <_ZN3lpf3RunEf>
 800aeb8:	6138      	str	r0, [r7, #16]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aec0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f5 ff36 	bl	8000d34 <__aeabi_fmul>
 800aec8:	4603      	mov	r3, r0
 800aeca:	6939      	ldr	r1, [r7, #16]
 800aecc:	4618      	mov	r0, r3
 800aece:	f7f5 fe27 	bl	8000b20 <__aeabi_fsub>
 800aed2:	4603      	mov	r3, r0
 800aed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f5 ff2c 	bl	8000d34 <__aeabi_fmul>
 800aedc:	4603      	mov	r3, r0
 800aede:	461a      	mov	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aef0:	4619      	mov	r1, r3
 800aef2:	4610      	mov	r0, r2
 800aef4:	f7f5 fe16 	bl	8000b24 <__addsf3>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7f5 fe0d 	bl	8000b24 <__addsf3>
 800af0a:	4603      	mov	r3, r0
 800af0c:	461a      	mov	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	pd_roll_buf = pd;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800af24:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <_ZN3PID9PID_Rate2Efffffff+0x174>)
 800af26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 f966 	bl	800b1fc <_ZN3PID3SatEfii>
 800af30:	4602      	mov	r2, r0
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pd_roll_sat_buf = pd;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	66da      	str	r2, [r3, #108]	; 0x6c
	alpha_dot_des_ = alpha_dot_des;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	621a      	str	r2, [r3, #32]
	alpha_dot_ = alpha_dot;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	625a      	str	r2, [r3, #36]	; 0x24
	return pd;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
}
 800af54:	4618      	mov	r0, r3
 800af56:	371c      	adds	r7, #28
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd90      	pop	{r4, r7, pc}
 800af5c:	fffffed4 	.word	0xfffffed4

0800af60 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800af60:	b590      	push	{r4, r7, lr}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	68b8      	ldr	r0, [r7, #8]
 800af72:	f7f5 fdd5 	bl	8000b20 <__aeabi_fsub>
 800af76:	4603      	mov	r3, r0
 800af78:	461a      	mov	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	651a      	str	r2, [r3, #80]	; 0x50
  float e_roll_der = - alpha_dot;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800af84:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af8a:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	4618      	mov	r0, r3
 800af92:	f7f6 f8ab 	bl	80010ec <__aeabi_f2iz>
 800af96:	4604      	mov	r4, r0
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7f6 f8a5 	bl	80010ec <__aeabi_f2iz>
 800afa2:	4603      	mov	r3, r0
 800afa4:	429c      	cmp	r4, r3
 800afa6:	d018      	beq.n	800afda <_ZN3PID7PD_RateEfffff+0x7a>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afac:	4619      	mov	r1, r3
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 f8cb 	bl	800b14a <_ZN3PID3sgnEf>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461c      	mov	r4, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afbc:	4619      	mov	r1, r3
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f000 f8c3 	bl	800b14a <_ZN3PID3sgnEf>
 800afc4:	4603      	mov	r3, r0
 800afc6:	429c      	cmp	r4, r3
 800afc8:	bf0c      	ite	eq
 800afca:	2301      	moveq	r3, #1
 800afcc:	2300      	movne	r3, #0
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <_ZN3PID7PD_RateEfffff+0x7a>
      e_roll_int = 0;
 800afd4:	f04f 0300 	mov.w	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7f5 fea7 	bl	8000d34 <__aeabi_fmul>
 800afe6:	4603      	mov	r3, r0
 800afe8:	461a      	mov	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afee:	4619      	mov	r1, r3
 800aff0:	4610      	mov	r0, r2
 800aff2:	f7f5 fd95 	bl	8000b20 <__aeabi_fsub>
 800aff6:	4603      	mov	r3, r0
 800aff8:	4947      	ldr	r1, [pc, #284]	; (800b118 <_ZN3PID7PD_RateEfffff+0x1b8>)
 800affa:	4618      	mov	r0, r3
 800affc:	f7f5 fe9a 	bl	8000d34 <__aeabi_fmul>
 800b000:	4603      	mov	r3, r0
 800b002:	461a      	mov	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	675a      	str	r2, [r3, #116]	; 0x74
  	de_int += de_filt*st;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	4619      	mov	r1, r3
 800b016:	4610      	mov	r0, r2
 800b018:	f7f5 fe8c 	bl	8000d34 <__aeabi_fmul>
 800b01c:	4603      	mov	r3, r0
 800b01e:	4619      	mov	r1, r3
 800b020:	4620      	mov	r0, r4
 800b022:	f7f5 fd7f 	bl	8000b24 <__addsf3>
 800b026:	4603      	mov	r3, r0
 800b028:	461a      	mov	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	679a      	str	r2, [r3, #120]	; 0x78

	de = e_roll - e_eski_roll;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b036:	4619      	mov	r1, r3
 800b038:	4610      	mov	r0, r2
 800b03a:	f7f5 fd71 	bl	8000b20 <__aeabi_fsub>
 800b03e:	4603      	mov	r3, r0
 800b040:	461a      	mov	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	671a      	str	r2, [r3, #112]	; 0x70
	e_eski_roll = e_roll;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	659a      	str	r2, [r3, #88]	; 0x58

  ie_roll += e_roll_int*st;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	6979      	ldr	r1, [r7, #20]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7f5 fe6b 	bl	8000d34 <__aeabi_fmul>
 800b05e:	4603      	mov	r3, r0
 800b060:	4619      	mov	r1, r3
 800b062:	4620      	mov	r0, r4
 800b064:	f7f5 fd5e 	bl	8000b24 <__addsf3>
 800b068:	4603      	mov	r3, r0
 800b06a:	461a      	mov	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	661a      	str	r2, [r3, #96]	; 0x60

  ie_roll_sat = ie_roll;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	669a      	str	r2, [r3, #104]	; 0x68
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f5 fe58 	bl	8000d34 <__aeabi_fmul>
 800b084:	4603      	mov	r3, r0
 800b086:	461a      	mov	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	67da      	str	r2, [r3, #124]	; 0x7c
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b09a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7f5 fe49 	bl	8000d34 <__aeabi_fmul>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//D = lpf.update(D);
	pd = P + I + D;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f7f5 fd33 	bl	8000b24 <__addsf3>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f7f5 fd2a 	bl	8000b24 <__addsf3>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	pd_roll_buf = pd;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800b0ea:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <_ZN3PID7PD_RateEfffff+0x1bc>)
 800b0ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 f883 	bl	800b1fc <_ZN3PID3SatEfii>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pd_roll_sat_buf = pd;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	66da      	str	r2, [r3, #108]	; 0x6c
    return pd;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

}
 800b10e:	4618      	mov	r0, r3
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	bd90      	pop	{r4, r7, pc}
 800b116:	bf00      	nop
 800b118:	42c80000 	.word	0x42c80000
 800b11c:	fffffed4 	.word	0xfffffed4

0800b120 <_ZN3PID5resetEv>:

void PID::reset() {
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f04f 0200 	mov.w	r2, #0
 800b12e:	669a      	str	r2, [r3, #104]	; 0x68
	de_filt = 0;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f04f 0200 	mov.w	r2, #0
 800b136:	675a      	str	r2, [r3, #116]	; 0x74
	de_int = 0;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	bc80      	pop	{r7}
 800b148:	4770      	bx	lr

0800b14a <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800b154:	f04f 0100 	mov.w	r1, #0
 800b158:	6838      	ldr	r0, [r7, #0]
 800b15a:	f7f5 ff89 	bl	8001070 <__aeabi_fcmplt>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <_ZN3PID3sgnEf+0x1e>
 800b164:	23ff      	movs	r3, #255	; 0xff
 800b166:	e00a      	b.n	800b17e <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800b168:	f04f 0100 	mov.w	r1, #0
 800b16c:	6838      	ldr	r0, [r7, #0]
 800b16e:	f7f5 ff9d 	bl	80010ac <__aeabi_fcmpgt>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <_ZN3PID3sgnEf+0x32>
 800b178:	2301      	movs	r3, #1
 800b17a:	e000      	b.n	800b17e <_ZN3PID3sgnEf+0x34>
  return 0;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800b19c:	dd24      	ble.n	800b1e8 <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7f5 fd74 	bl	8000c8c <__aeabi_i2f>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	68b8      	ldr	r0, [r7, #8]
 800b1aa:	f7f5 ff7f 	bl	80010ac <__aeabi_fcmpgt>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d005      	beq.n	800b1c0 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7f5 fd69 	bl	8000c8c <__aeabi_i2f>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	617b      	str	r3, [r7, #20]
 800b1be:	e015      	b.n	800b1ec <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800b1c0:	6838      	ldr	r0, [r7, #0]
 800b1c2:	f7f5 fd63 	bl	8000c8c <__aeabi_i2f>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	68b8      	ldr	r0, [r7, #8]
 800b1cc:	f7f5 ff50 	bl	8001070 <__aeabi_fcmplt>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d005      	beq.n	800b1e2 <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800b1d6:	6838      	ldr	r0, [r7, #0]
 800b1d8:	f7f5 fd58 	bl	8000c8c <__aeabi_i2f>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e004      	b.n	800b1ec <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	617b      	str	r3, [r7, #20]
 800b1e6:	e001      	b.n	800b1ec <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800b1e8:	4b03      	ldr	r3, [pc, #12]	; (800b1f8 <_ZN3PID3SatEfiii+0x70>)
 800b1ea:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800b1ec:	697b      	ldr	r3, [r7, #20]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	447a0000 	.word	0x447a0000

0800b1fc <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7f5 fd3e 	bl	8000c8c <__aeabi_i2f>
 800b210:	4603      	mov	r3, r0
 800b212:	4619      	mov	r1, r3
 800b214:	68b8      	ldr	r0, [r7, #8]
 800b216:	f7f5 ff49 	bl	80010ac <__aeabi_fcmpgt>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d005      	beq.n	800b22c <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7f5 fd33 	bl	8000c8c <__aeabi_i2f>
 800b226:	4603      	mov	r3, r0
 800b228:	617b      	str	r3, [r7, #20]
 800b22a:	e012      	b.n	800b252 <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800b22c:	6838      	ldr	r0, [r7, #0]
 800b22e:	f7f5 fd2d 	bl	8000c8c <__aeabi_i2f>
 800b232:	4603      	mov	r3, r0
 800b234:	4619      	mov	r1, r3
 800b236:	68b8      	ldr	r0, [r7, #8]
 800b238:	f7f5 ff1a 	bl	8001070 <__aeabi_fcmplt>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d005      	beq.n	800b24e <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800b242:	6838      	ldr	r0, [r7, #0]
 800b244:	f7f5 fd22 	bl	8000c8c <__aeabi_i2f>
 800b248:	4603      	mov	r3, r0
 800b24a:	617b      	str	r3, [r7, #20]
 800b24c:	e001      	b.n	800b252 <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800b252:	697b      	ldr	r3, [r7, #20]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3718      	adds	r7, #24
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	807b      	strh	r3, [r7, #2]
	int dead_zone = 5;
 800b268:	2305      	movs	r3, #5
 800b26a:	61bb      	str	r3, [r7, #24]
	int in_min  = 1000;
 800b26c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b270:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800b272:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b276:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800b278:	f06f 031d 	mvn.w	r3, #29
 800b27c:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 800b27e:	231e      	movs	r3, #30
 800b280:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 800b282:	887a      	ldrh	r2, [r7, #2]
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800b28a:	3304      	adds	r3, #4
 800b28c:	429a      	cmp	r2, r3
 800b28e:	dd09      	ble.n	800b2a4 <_ZN3PID7pwm2angEt+0x48>
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 800b296:	887b      	ldrh	r3, [r7, #2]
 800b298:	429a      	cmp	r2, r3
 800b29a:	db03      	blt.n	800b2a4 <_ZN3PID7pwm2angEt+0x48>
		pwm_out = 1500;
 800b29c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b2a0:	83fb      	strh	r3, [r7, #30]
 800b2a2:	e001      	b.n	800b2a8 <_ZN3PID7pwm2angEt+0x4c>
	}

	else {
		pwm_out = pwm;
 800b2a4:	887b      	ldrh	r3, [r7, #2]
 800b2a6:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800b2a8:	8bfa      	ldrh	r2, [r7, #30]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	1a8a      	subs	r2, r1, r2
 800b2b4:	fb02 f203 	mul.w	r2, r2, r3
 800b2b8:	6939      	ldr	r1, [r7, #16]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	1acb      	subs	r3, r1, r3
 800b2be:	fb92 f2f3 	sdiv	r2, r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7f5 fce0 	bl	8000c8c <__aeabi_i2f>
 800b2cc:	4603      	mov	r3, r0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 800b2e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b2e6:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800b2e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b2ec:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 800b2ee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b2f2:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 800b2f4:	2364      	movs	r3, #100	; 0x64
 800b2f6:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800b2f8:	887a      	ldrh	r2, [r7, #2]
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	1a8a      	subs	r2, r1, r2
 800b304:	fb02 f203 	mul.w	r2, r2, r3
 800b308:	6939      	ldr	r1, [r7, #16]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	1acb      	subs	r3, r1, r3
 800b30e:	fb92 f2f3 	sdiv	r2, r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4413      	add	r3, r2
 800b316:	425b      	negs	r3, r3
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f5 fcb7 	bl	8000c8c <__aeabi_i2f>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 800b328:	b590      	push	{r4, r7, lr}
 800b32a:	b089      	sub	sp, #36	; 0x24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	460b      	mov	r3, r1
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 800b336:	4b1d      	ldr	r3, [pc, #116]	; (800b3ac <_ZN3PID7pwm2motEti+0x84>)
 800b338:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800b33a:	4b1d      	ldr	r3, [pc, #116]	; (800b3b0 <_ZN3PID7pwm2motEti+0x88>)
 800b33c:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800b33e:	f04f 0300 	mov.w	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 800b344:	4b1b      	ldr	r3, [pc, #108]	; (800b3b4 <_ZN3PID7pwm2motEti+0x8c>)
 800b346:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7f5 fc9f 	bl	8000c8c <__aeabi_i2f>
 800b34e:	4604      	mov	r4, r0
 800b350:	897b      	ldrh	r3, [r7, #10]
 800b352:	4618      	mov	r0, r3
 800b354:	f7f5 fc96 	bl	8000c84 <__aeabi_ui2f>
 800b358:	4603      	mov	r3, r0
 800b35a:	69f9      	ldr	r1, [r7, #28]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7f5 fbdf 	bl	8000b20 <__aeabi_fsub>
 800b362:	4603      	mov	r3, r0
 800b364:	4619      	mov	r1, r3
 800b366:	4620      	mov	r0, r4
 800b368:	f7f5 fce4 	bl	8000d34 <__aeabi_fmul>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461c      	mov	r4, r3
 800b370:	6979      	ldr	r1, [r7, #20]
 800b372:	6938      	ldr	r0, [r7, #16]
 800b374:	f7f5 fbd4 	bl	8000b20 <__aeabi_fsub>
 800b378:	4603      	mov	r3, r0
 800b37a:	4619      	mov	r1, r3
 800b37c:	4620      	mov	r0, r4
 800b37e:	f7f5 fcd9 	bl	8000d34 <__aeabi_fmul>
 800b382:	4603      	mov	r3, r0
 800b384:	461c      	mov	r4, r3
 800b386:	69f9      	ldr	r1, [r7, #28]
 800b388:	69b8      	ldr	r0, [r7, #24]
 800b38a:	f7f5 fbc9 	bl	8000b20 <__aeabi_fsub>
 800b38e:	4603      	mov	r3, r0
 800b390:	4619      	mov	r1, r3
 800b392:	4620      	mov	r0, r4
 800b394:	f7f5 fd82 	bl	8000e9c <__aeabi_fdiv>
 800b398:	4603      	mov	r3, r0
 800b39a:	6979      	ldr	r1, [r7, #20]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7f5 fbc1 	bl	8000b24 <__addsf3>
 800b3a2:	4603      	mov	r3, r0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3724      	adds	r7, #36	; 0x24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd90      	pop	{r4, r7, pc}
 800b3ac:	447a0000 	.word	0x447a0000
 800b3b0:	44fa0000 	.word	0x44fa0000
 800b3b4:	44a5c000 	.word	0x44a5c000

0800b3b8 <_ZN3PID5F2thrEf>:

unsigned int PID::F2thr(float F) {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800b3c2:	4b16      	ldr	r3, [pc, #88]	; (800b41c <_ZN3PID5F2thrEf+0x64>)
 800b3c4:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800b3c6:	4b16      	ldr	r3, [pc, #88]	; (800b420 <_ZN3PID5F2thrEf+0x68>)
 800b3c8:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800b3ca:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800b3ce:	6838      	ldr	r0, [r7, #0]
 800b3d0:	f7f5 fd64 	bl	8000e9c <__aeabi_fdiv>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800b3d8:	69f9      	ldr	r1, [r7, #28]
 800b3da:	6978      	ldr	r0, [r7, #20]
 800b3dc:	f7f5 fd5e 	bl	8000e9c <__aeabi_fdiv>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7f6 fa6a 	bl	80018bc <_ZSt4sqrtf>
 800b3e8:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800b3ea:	490e      	ldr	r1, [pc, #56]	; (800b424 <_ZN3PID5F2thrEf+0x6c>)
 800b3ec:	6938      	ldr	r0, [r7, #16]
 800b3ee:	f7f5 fca1 	bl	8000d34 <__aeabi_fmul>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	69b9      	ldr	r1, [r7, #24]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f5 fd50 	bl	8000e9c <__aeabi_fdiv>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	4909      	ldr	r1, [pc, #36]	; (800b424 <_ZN3PID5F2thrEf+0x6c>)
 800b400:	4618      	mov	r0, r3
 800b402:	f7f5 fb8f 	bl	8000b24 <__addsf3>
 800b406:	4603      	mov	r3, r0
 800b408:	4618      	mov	r0, r3
 800b40a:	f7f5 fe95 	bl	8001138 <__aeabi_f2uiz>
 800b40e:	4603      	mov	r3, r0
 800b410:	60fb      	str	r3, [r7, #12]
	return thr;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3720      	adds	r7, #32
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	3359f513 	.word	0x3359f513
 800b420:	46896e00 	.word	0x46896e00
 800b424:	447a0000 	.word	0x447a0000

0800b428 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3328      	adds	r3, #40	; 0x28
 800b434:	4618      	mov	r0, r3
 800b436:	f000 f876 	bl	800b526 <_ZN3lpfD1Ev>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800b450:	68f9      	ldr	r1, [r7, #12]
 800b452:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b456:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b460:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800b464:	68f9      	ldr	r1, [r7, #12]
 800b466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b46a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	bc80      	pop	{r7}
 800b478:	4770      	bx	lr

0800b47a <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800b47a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	4618      	mov	r0, r3
 800b492:	f7f4 ffc1 	bl	8000418 <__aeabi_f2d>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	4620      	mov	r0, r4
 800b49c:	4629      	mov	r1, r5
 800b49e:	f7f5 f813 	bl	80004c8 <__aeabi_dmul>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4690      	mov	r8, r2
 800b4a8:	4699      	mov	r9, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800b4b0:	6838      	ldr	r0, [r7, #0]
 800b4b2:	f7f4 ffb1 	bl	8000418 <__aeabi_f2d>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f5 f803 	bl	80004c8 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	f7f4 fe47 	bl	800015c <__adddf3>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4690      	mov	r8, r2
 800b4d4:	4699      	mov	r9, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f4 ff99 	bl	8000418 <__aeabi_f2d>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	f7f4 ffeb 	bl	80004c8 <__aeabi_dmul>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	f7f4 fe2f 	bl	800015c <__adddf3>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4610      	mov	r0, r2
 800b504:	4619      	mov	r1, r3
 800b506:	f7f5 fab7 	bl	8000a78 <__aeabi_d2f>
 800b50a:	4603      	mov	r3, r0
 800b50c:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	601a      	str	r2, [r3, #0]
	y_ = y;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	605a      	str	r2, [r3, #4]
	return y;
 800b51a:	68fb      	ldr	r3, [r7, #12]

}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b526 <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800b526:	b480      	push	{r7}
 800b528:	b083      	sub	sp, #12
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4618      	mov	r0, r3
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	bc80      	pop	{r7}
 800b538:	4770      	bx	lr

0800b53a <_ZdlPv>:
 800b53a:	f001 bf9b 	b.w	800d474 <free>

0800b53e <_Znwj>:
 800b53e:	2801      	cmp	r0, #1
 800b540:	bf38      	it	cc
 800b542:	2001      	movcc	r0, #1
 800b544:	b510      	push	{r4, lr}
 800b546:	4604      	mov	r4, r0
 800b548:	4620      	mov	r0, r4
 800b54a:	f001 ff8b 	bl	800d464 <malloc>
 800b54e:	b930      	cbnz	r0, 800b55e <_Znwj+0x20>
 800b550:	f000 f80c 	bl	800b56c <_ZSt15get_new_handlerv>
 800b554:	b908      	cbnz	r0, 800b55a <_Znwj+0x1c>
 800b556:	f001 ff53 	bl	800d400 <abort>
 800b55a:	4780      	blx	r0
 800b55c:	e7f4      	b.n	800b548 <_Znwj+0xa>
 800b55e:	bd10      	pop	{r4, pc}

0800b560 <_ZSt17__throw_bad_allocv>:
 800b560:	b508      	push	{r3, lr}
 800b562:	f001 ff4d 	bl	800d400 <abort>

0800b566 <_ZSt20__throw_length_errorPKc>:
 800b566:	b508      	push	{r3, lr}
 800b568:	f001 ff4a 	bl	800d400 <abort>

0800b56c <_ZSt15get_new_handlerv>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	; (800b578 <_ZSt15get_new_handlerv+0xc>)
 800b56e:	6818      	ldr	r0, [r3, #0]
 800b570:	f3bf 8f5b 	dmb	ish
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	20000abc 	.word	0x20000abc

0800b57c <cosf>:
 800b57c:	b507      	push	{r0, r1, r2, lr}
 800b57e:	4a18      	ldr	r2, [pc, #96]	; (800b5e0 <cosf+0x64>)
 800b580:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b584:	4293      	cmp	r3, r2
 800b586:	4601      	mov	r1, r0
 800b588:	dc03      	bgt.n	800b592 <cosf+0x16>
 800b58a:	2100      	movs	r1, #0
 800b58c:	f001 f9d6 	bl	800c93c <__kernel_cosf>
 800b590:	e004      	b.n	800b59c <cosf+0x20>
 800b592:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b596:	db04      	blt.n	800b5a2 <cosf+0x26>
 800b598:	f7f5 fac2 	bl	8000b20 <__aeabi_fsub>
 800b59c:	b003      	add	sp, #12
 800b59e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5a2:	4669      	mov	r1, sp
 800b5a4:	f001 f81a 	bl	800c5dc <__ieee754_rem_pio2f>
 800b5a8:	f000 0203 	and.w	r2, r0, #3
 800b5ac:	2a01      	cmp	r2, #1
 800b5ae:	d005      	beq.n	800b5bc <cosf+0x40>
 800b5b0:	2a02      	cmp	r2, #2
 800b5b2:	d00a      	beq.n	800b5ca <cosf+0x4e>
 800b5b4:	b972      	cbnz	r2, 800b5d4 <cosf+0x58>
 800b5b6:	9901      	ldr	r1, [sp, #4]
 800b5b8:	9800      	ldr	r0, [sp, #0]
 800b5ba:	e7e7      	b.n	800b58c <cosf+0x10>
 800b5bc:	9901      	ldr	r1, [sp, #4]
 800b5be:	9800      	ldr	r0, [sp, #0]
 800b5c0:	f001 fcf2 	bl	800cfa8 <__kernel_sinf>
 800b5c4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b5c8:	e7e8      	b.n	800b59c <cosf+0x20>
 800b5ca:	9901      	ldr	r1, [sp, #4]
 800b5cc:	9800      	ldr	r0, [sp, #0]
 800b5ce:	f001 f9b5 	bl	800c93c <__kernel_cosf>
 800b5d2:	e7f7      	b.n	800b5c4 <cosf+0x48>
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	9901      	ldr	r1, [sp, #4]
 800b5d8:	9800      	ldr	r0, [sp, #0]
 800b5da:	f001 fce5 	bl	800cfa8 <__kernel_sinf>
 800b5de:	e7dd      	b.n	800b59c <cosf+0x20>
 800b5e0:	3f490fd8 	.word	0x3f490fd8

0800b5e4 <pow>:
 800b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e8:	461f      	mov	r7, r3
 800b5ea:	4680      	mov	r8, r0
 800b5ec:	4689      	mov	r9, r1
 800b5ee:	4616      	mov	r6, r2
 800b5f0:	f000 f8ee 	bl	800b7d0 <__ieee754_pow>
 800b5f4:	4b4d      	ldr	r3, [pc, #308]	; (800b72c <pow+0x148>)
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	f993 3000 	ldrsb.w	r3, [r3]
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	3301      	adds	r3, #1
 800b600:	d015      	beq.n	800b62e <pow+0x4a>
 800b602:	4632      	mov	r2, r6
 800b604:	463b      	mov	r3, r7
 800b606:	4630      	mov	r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	f7f5 f9f7 	bl	80009fc <__aeabi_dcmpun>
 800b60e:	b970      	cbnz	r0, 800b62e <pow+0x4a>
 800b610:	4642      	mov	r2, r8
 800b612:	464b      	mov	r3, r9
 800b614:	4640      	mov	r0, r8
 800b616:	4649      	mov	r1, r9
 800b618:	f7f5 f9f0 	bl	80009fc <__aeabi_dcmpun>
 800b61c:	2200      	movs	r2, #0
 800b61e:	2300      	movs	r3, #0
 800b620:	b148      	cbz	r0, 800b636 <pow+0x52>
 800b622:	4630      	mov	r0, r6
 800b624:	4639      	mov	r1, r7
 800b626:	f7f5 f9b7 	bl	8000998 <__aeabi_dcmpeq>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d17b      	bne.n	800b726 <pow+0x142>
 800b62e:	4620      	mov	r0, r4
 800b630:	4629      	mov	r1, r5
 800b632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b636:	4640      	mov	r0, r8
 800b638:	4649      	mov	r1, r9
 800b63a:	f7f5 f9ad 	bl	8000998 <__aeabi_dcmpeq>
 800b63e:	b1e0      	cbz	r0, 800b67a <pow+0x96>
 800b640:	2200      	movs	r2, #0
 800b642:	2300      	movs	r3, #0
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f5 f9a6 	bl	8000998 <__aeabi_dcmpeq>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d16a      	bne.n	800b726 <pow+0x142>
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	f001 fd21 	bl	800d09a <finite>
 800b658:	2800      	cmp	r0, #0
 800b65a:	d0e8      	beq.n	800b62e <pow+0x4a>
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f5 f9a2 	bl	80009ac <__aeabi_dcmplt>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d0e0      	beq.n	800b62e <pow+0x4a>
 800b66c:	f001 fed0 	bl	800d410 <__errno>
 800b670:	2321      	movs	r3, #33	; 0x21
 800b672:	2400      	movs	r4, #0
 800b674:	6003      	str	r3, [r0, #0]
 800b676:	4d2e      	ldr	r5, [pc, #184]	; (800b730 <pow+0x14c>)
 800b678:	e7d9      	b.n	800b62e <pow+0x4a>
 800b67a:	4620      	mov	r0, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	f001 fd0c 	bl	800d09a <finite>
 800b682:	bba8      	cbnz	r0, 800b6f0 <pow+0x10c>
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	f001 fd07 	bl	800d09a <finite>
 800b68c:	b380      	cbz	r0, 800b6f0 <pow+0x10c>
 800b68e:	4630      	mov	r0, r6
 800b690:	4639      	mov	r1, r7
 800b692:	f001 fd02 	bl	800d09a <finite>
 800b696:	b358      	cbz	r0, 800b6f0 <pow+0x10c>
 800b698:	4622      	mov	r2, r4
 800b69a:	462b      	mov	r3, r5
 800b69c:	4620      	mov	r0, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f7f5 f9ac 	bl	80009fc <__aeabi_dcmpun>
 800b6a4:	b160      	cbz	r0, 800b6c0 <pow+0xdc>
 800b6a6:	f001 feb3 	bl	800d410 <__errno>
 800b6aa:	2321      	movs	r3, #33	; 0x21
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	6003      	str	r3, [r0, #0]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	f7f5 f831 	bl	800071c <__aeabi_ddiv>
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	e7b6      	b.n	800b62e <pow+0x4a>
 800b6c0:	f001 fea6 	bl	800d410 <__errno>
 800b6c4:	2322      	movs	r3, #34	; 0x22
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	f7f5 f96c 	bl	80009ac <__aeabi_dcmplt>
 800b6d4:	2400      	movs	r4, #0
 800b6d6:	b148      	cbz	r0, 800b6ec <pow+0x108>
 800b6d8:	4630      	mov	r0, r6
 800b6da:	4639      	mov	r1, r7
 800b6dc:	f001 fcea 	bl	800d0b4 <rint>
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	463b      	mov	r3, r7
 800b6e4:	f7f5 f958 	bl	8000998 <__aeabi_dcmpeq>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0c4      	beq.n	800b676 <pow+0x92>
 800b6ec:	4d11      	ldr	r5, [pc, #68]	; (800b734 <pow+0x150>)
 800b6ee:	e79e      	b.n	800b62e <pow+0x4a>
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	f7f5 f94e 	bl	8000998 <__aeabi_dcmpeq>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d096      	beq.n	800b62e <pow+0x4a>
 800b700:	4640      	mov	r0, r8
 800b702:	4649      	mov	r1, r9
 800b704:	f001 fcc9 	bl	800d09a <finite>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d090      	beq.n	800b62e <pow+0x4a>
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	f001 fcc3 	bl	800d09a <finite>
 800b714:	2800      	cmp	r0, #0
 800b716:	d08a      	beq.n	800b62e <pow+0x4a>
 800b718:	f001 fe7a 	bl	800d410 <__errno>
 800b71c:	2322      	movs	r3, #34	; 0x22
 800b71e:	2400      	movs	r4, #0
 800b720:	2500      	movs	r5, #0
 800b722:	6003      	str	r3, [r0, #0]
 800b724:	e783      	b.n	800b62e <pow+0x4a>
 800b726:	2400      	movs	r4, #0
 800b728:	4d03      	ldr	r5, [pc, #12]	; (800b738 <pow+0x154>)
 800b72a:	e780      	b.n	800b62e <pow+0x4a>
 800b72c:	2000000d 	.word	0x2000000d
 800b730:	fff00000 	.word	0xfff00000
 800b734:	7ff00000 	.word	0x7ff00000
 800b738:	3ff00000 	.word	0x3ff00000

0800b73c <asinf>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4604      	mov	r4, r0
 800b740:	f000 fe08 	bl	800c354 <__ieee754_asinf>
 800b744:	4b0e      	ldr	r3, [pc, #56]	; (800b780 <asinf+0x44>)
 800b746:	4605      	mov	r5, r0
 800b748:	f993 3000 	ldrsb.w	r3, [r3]
 800b74c:	3301      	adds	r3, #1
 800b74e:	d015      	beq.n	800b77c <asinf+0x40>
 800b750:	4621      	mov	r1, r4
 800b752:	4620      	mov	r0, r4
 800b754:	f7f5 fcb4 	bl	80010c0 <__aeabi_fcmpun>
 800b758:	b980      	cbnz	r0, 800b77c <asinf+0x40>
 800b75a:	4620      	mov	r0, r4
 800b75c:	f001 fdba 	bl	800d2d4 <fabsf>
 800b760:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b764:	f7f5 fca2 	bl	80010ac <__aeabi_fcmpgt>
 800b768:	b140      	cbz	r0, 800b77c <asinf+0x40>
 800b76a:	f001 fe51 	bl	800d410 <__errno>
 800b76e:	2321      	movs	r3, #33	; 0x21
 800b770:	6003      	str	r3, [r0, #0]
 800b772:	4804      	ldr	r0, [pc, #16]	; (800b784 <asinf+0x48>)
 800b774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b778:	f001 bdf2 	b.w	800d360 <nanf>
 800b77c:	4628      	mov	r0, r5
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	2000000d 	.word	0x2000000d
 800b784:	0800d770 	.word	0x0800d770

0800b788 <sqrtf>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4605      	mov	r5, r0
 800b78c:	f001 f884 	bl	800c898 <__ieee754_sqrtf>
 800b790:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <sqrtf+0x40>)
 800b792:	4604      	mov	r4, r0
 800b794:	f993 3000 	ldrsb.w	r3, [r3]
 800b798:	3301      	adds	r3, #1
 800b79a:	d012      	beq.n	800b7c2 <sqrtf+0x3a>
 800b79c:	4629      	mov	r1, r5
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7f5 fc8e 	bl	80010c0 <__aeabi_fcmpun>
 800b7a4:	b968      	cbnz	r0, 800b7c2 <sqrtf+0x3a>
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f7f5 fc61 	bl	8001070 <__aeabi_fcmplt>
 800b7ae:	b140      	cbz	r0, 800b7c2 <sqrtf+0x3a>
 800b7b0:	f001 fe2e 	bl	800d410 <__errno>
 800b7b4:	2321      	movs	r3, #33	; 0x21
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	6003      	str	r3, [r0, #0]
 800b7ba:	4608      	mov	r0, r1
 800b7bc:	f7f5 fb6e 	bl	8000e9c <__aeabi_fdiv>
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
 800b7c6:	bf00      	nop
 800b7c8:	2000000d 	.word	0x2000000d
 800b7cc:	00000000 	.word	0x00000000

0800b7d0 <__ieee754_pow>:
 800b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	b093      	sub	sp, #76	; 0x4c
 800b7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7da:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800b7de:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b7e2:	ea55 0302 	orrs.w	r3, r5, r2
 800b7e6:	4607      	mov	r7, r0
 800b7e8:	4688      	mov	r8, r1
 800b7ea:	f000 84bf 	beq.w	800c16c <__ieee754_pow+0x99c>
 800b7ee:	4b7e      	ldr	r3, [pc, #504]	; (800b9e8 <__ieee754_pow+0x218>)
 800b7f0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	4689      	mov	r9, r1
 800b7f8:	4682      	mov	sl, r0
 800b7fa:	dc09      	bgt.n	800b810 <__ieee754_pow+0x40>
 800b7fc:	d103      	bne.n	800b806 <__ieee754_pow+0x36>
 800b7fe:	b978      	cbnz	r0, 800b820 <__ieee754_pow+0x50>
 800b800:	42a5      	cmp	r5, r4
 800b802:	dd02      	ble.n	800b80a <__ieee754_pow+0x3a>
 800b804:	e00c      	b.n	800b820 <__ieee754_pow+0x50>
 800b806:	429d      	cmp	r5, r3
 800b808:	dc02      	bgt.n	800b810 <__ieee754_pow+0x40>
 800b80a:	429d      	cmp	r5, r3
 800b80c:	d10e      	bne.n	800b82c <__ieee754_pow+0x5c>
 800b80e:	b16a      	cbz	r2, 800b82c <__ieee754_pow+0x5c>
 800b810:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b814:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b818:	ea54 030a 	orrs.w	r3, r4, sl
 800b81c:	f000 84a6 	beq.w	800c16c <__ieee754_pow+0x99c>
 800b820:	4872      	ldr	r0, [pc, #456]	; (800b9ec <__ieee754_pow+0x21c>)
 800b822:	b013      	add	sp, #76	; 0x4c
 800b824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	f001 bc3e 	b.w	800d0a8 <nan>
 800b82c:	f1b9 0f00 	cmp.w	r9, #0
 800b830:	da39      	bge.n	800b8a6 <__ieee754_pow+0xd6>
 800b832:	4b6f      	ldr	r3, [pc, #444]	; (800b9f0 <__ieee754_pow+0x220>)
 800b834:	429d      	cmp	r5, r3
 800b836:	dc54      	bgt.n	800b8e2 <__ieee754_pow+0x112>
 800b838:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b83c:	429d      	cmp	r5, r3
 800b83e:	f340 84a6 	ble.w	800c18e <__ieee754_pow+0x9be>
 800b842:	152b      	asrs	r3, r5, #20
 800b844:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b848:	2b14      	cmp	r3, #20
 800b84a:	dd0f      	ble.n	800b86c <__ieee754_pow+0x9c>
 800b84c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b850:	fa22 f103 	lsr.w	r1, r2, r3
 800b854:	fa01 f303 	lsl.w	r3, r1, r3
 800b858:	4293      	cmp	r3, r2
 800b85a:	f040 8498 	bne.w	800c18e <__ieee754_pow+0x9be>
 800b85e:	f001 0101 	and.w	r1, r1, #1
 800b862:	f1c1 0302 	rsb	r3, r1, #2
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	b182      	cbz	r2, 800b88c <__ieee754_pow+0xbc>
 800b86a:	e05e      	b.n	800b92a <__ieee754_pow+0x15a>
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	d15a      	bne.n	800b926 <__ieee754_pow+0x156>
 800b870:	f1c3 0314 	rsb	r3, r3, #20
 800b874:	fa45 f103 	asr.w	r1, r5, r3
 800b878:	fa01 f303 	lsl.w	r3, r1, r3
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	f040 8483 	bne.w	800c188 <__ieee754_pow+0x9b8>
 800b882:	f001 0101 	and.w	r1, r1, #1
 800b886:	f1c1 0302 	rsb	r3, r1, #2
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4b59      	ldr	r3, [pc, #356]	; (800b9f4 <__ieee754_pow+0x224>)
 800b88e:	429d      	cmp	r5, r3
 800b890:	d130      	bne.n	800b8f4 <__ieee754_pow+0x124>
 800b892:	2e00      	cmp	r6, #0
 800b894:	f280 8474 	bge.w	800c180 <__ieee754_pow+0x9b0>
 800b898:	463a      	mov	r2, r7
 800b89a:	4643      	mov	r3, r8
 800b89c:	2000      	movs	r0, #0
 800b89e:	4955      	ldr	r1, [pc, #340]	; (800b9f4 <__ieee754_pow+0x224>)
 800b8a0:	f7f4 ff3c 	bl	800071c <__aeabi_ddiv>
 800b8a4:	e02f      	b.n	800b906 <__ieee754_pow+0x136>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	d13d      	bne.n	800b92a <__ieee754_pow+0x15a>
 800b8ae:	4b4e      	ldr	r3, [pc, #312]	; (800b9e8 <__ieee754_pow+0x218>)
 800b8b0:	429d      	cmp	r5, r3
 800b8b2:	d1eb      	bne.n	800b88c <__ieee754_pow+0xbc>
 800b8b4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b8b8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b8bc:	ea53 030a 	orrs.w	r3, r3, sl
 800b8c0:	f000 8454 	beq.w	800c16c <__ieee754_pow+0x99c>
 800b8c4:	4b4c      	ldr	r3, [pc, #304]	; (800b9f8 <__ieee754_pow+0x228>)
 800b8c6:	429c      	cmp	r4, r3
 800b8c8:	dd0d      	ble.n	800b8e6 <__ieee754_pow+0x116>
 800b8ca:	2e00      	cmp	r6, #0
 800b8cc:	f280 8454 	bge.w	800c178 <__ieee754_pow+0x9a8>
 800b8d0:	f04f 0b00 	mov.w	fp, #0
 800b8d4:	f04f 0c00 	mov.w	ip, #0
 800b8d8:	4658      	mov	r0, fp
 800b8da:	4661      	mov	r1, ip
 800b8dc:	b013      	add	sp, #76	; 0x4c
 800b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e7e0      	b.n	800b8a8 <__ieee754_pow+0xd8>
 800b8e6:	2e00      	cmp	r6, #0
 800b8e8:	daf2      	bge.n	800b8d0 <__ieee754_pow+0x100>
 800b8ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b8ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b8f2:	e7f1      	b.n	800b8d8 <__ieee754_pow+0x108>
 800b8f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b8f8:	d108      	bne.n	800b90c <__ieee754_pow+0x13c>
 800b8fa:	463a      	mov	r2, r7
 800b8fc:	4643      	mov	r3, r8
 800b8fe:	4638      	mov	r0, r7
 800b900:	4641      	mov	r1, r8
 800b902:	f7f4 fde1 	bl	80004c8 <__aeabi_dmul>
 800b906:	4683      	mov	fp, r0
 800b908:	468c      	mov	ip, r1
 800b90a:	e7e5      	b.n	800b8d8 <__ieee754_pow+0x108>
 800b90c:	4b3b      	ldr	r3, [pc, #236]	; (800b9fc <__ieee754_pow+0x22c>)
 800b90e:	429e      	cmp	r6, r3
 800b910:	d10b      	bne.n	800b92a <__ieee754_pow+0x15a>
 800b912:	f1b9 0f00 	cmp.w	r9, #0
 800b916:	db08      	blt.n	800b92a <__ieee754_pow+0x15a>
 800b918:	4638      	mov	r0, r7
 800b91a:	4641      	mov	r1, r8
 800b91c:	b013      	add	sp, #76	; 0x4c
 800b91e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b922:	f000 bc6b 	b.w	800c1fc <__ieee754_sqrt>
 800b926:	2300      	movs	r3, #0
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	4638      	mov	r0, r7
 800b92c:	4641      	mov	r1, r8
 800b92e:	f001 fbb1 	bl	800d094 <fabs>
 800b932:	4683      	mov	fp, r0
 800b934:	468c      	mov	ip, r1
 800b936:	f1ba 0f00 	cmp.w	sl, #0
 800b93a:	d129      	bne.n	800b990 <__ieee754_pow+0x1c0>
 800b93c:	b124      	cbz	r4, 800b948 <__ieee754_pow+0x178>
 800b93e:	4b2d      	ldr	r3, [pc, #180]	; (800b9f4 <__ieee754_pow+0x224>)
 800b940:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b944:	429a      	cmp	r2, r3
 800b946:	d123      	bne.n	800b990 <__ieee754_pow+0x1c0>
 800b948:	2e00      	cmp	r6, #0
 800b94a:	da07      	bge.n	800b95c <__ieee754_pow+0x18c>
 800b94c:	465a      	mov	r2, fp
 800b94e:	4663      	mov	r3, ip
 800b950:	2000      	movs	r0, #0
 800b952:	4928      	ldr	r1, [pc, #160]	; (800b9f4 <__ieee754_pow+0x224>)
 800b954:	f7f4 fee2 	bl	800071c <__aeabi_ddiv>
 800b958:	4683      	mov	fp, r0
 800b95a:	468c      	mov	ip, r1
 800b95c:	f1b9 0f00 	cmp.w	r9, #0
 800b960:	daba      	bge.n	800b8d8 <__ieee754_pow+0x108>
 800b962:	9b00      	ldr	r3, [sp, #0]
 800b964:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b968:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b96c:	4323      	orrs	r3, r4
 800b96e:	d108      	bne.n	800b982 <__ieee754_pow+0x1b2>
 800b970:	465a      	mov	r2, fp
 800b972:	4663      	mov	r3, ip
 800b974:	4658      	mov	r0, fp
 800b976:	4661      	mov	r1, ip
 800b978:	f7f4 fbee 	bl	8000158 <__aeabi_dsub>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	e78e      	b.n	800b8a0 <__ieee754_pow+0xd0>
 800b982:	9b00      	ldr	r3, [sp, #0]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d1a7      	bne.n	800b8d8 <__ieee754_pow+0x108>
 800b988:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b98c:	469c      	mov	ip, r3
 800b98e:	e7a3      	b.n	800b8d8 <__ieee754_pow+0x108>
 800b990:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800b994:	3b01      	subs	r3, #1
 800b996:	930c      	str	r3, [sp, #48]	; 0x30
 800b998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b99a:	9b00      	ldr	r3, [sp, #0]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	d104      	bne.n	800b9aa <__ieee754_pow+0x1da>
 800b9a0:	463a      	mov	r2, r7
 800b9a2:	4643      	mov	r3, r8
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	4641      	mov	r1, r8
 800b9a8:	e7e6      	b.n	800b978 <__ieee754_pow+0x1a8>
 800b9aa:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <__ieee754_pow+0x230>)
 800b9ac:	429d      	cmp	r5, r3
 800b9ae:	f340 80f9 	ble.w	800bba4 <__ieee754_pow+0x3d4>
 800b9b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b9b6:	429d      	cmp	r5, r3
 800b9b8:	4b0f      	ldr	r3, [pc, #60]	; (800b9f8 <__ieee754_pow+0x228>)
 800b9ba:	dd09      	ble.n	800b9d0 <__ieee754_pow+0x200>
 800b9bc:	429c      	cmp	r4, r3
 800b9be:	dc0c      	bgt.n	800b9da <__ieee754_pow+0x20a>
 800b9c0:	2e00      	cmp	r6, #0
 800b9c2:	da85      	bge.n	800b8d0 <__ieee754_pow+0x100>
 800b9c4:	a306      	add	r3, pc, #24	; (adr r3, 800b9e0 <__ieee754_pow+0x210>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	e798      	b.n	800b902 <__ieee754_pow+0x132>
 800b9d0:	429c      	cmp	r4, r3
 800b9d2:	dbf5      	blt.n	800b9c0 <__ieee754_pow+0x1f0>
 800b9d4:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <__ieee754_pow+0x224>)
 800b9d6:	429c      	cmp	r4, r3
 800b9d8:	dd14      	ble.n	800ba04 <__ieee754_pow+0x234>
 800b9da:	2e00      	cmp	r6, #0
 800b9dc:	dcf2      	bgt.n	800b9c4 <__ieee754_pow+0x1f4>
 800b9de:	e777      	b.n	800b8d0 <__ieee754_pow+0x100>
 800b9e0:	8800759c 	.word	0x8800759c
 800b9e4:	7e37e43c 	.word	0x7e37e43c
 800b9e8:	7ff00000 	.word	0x7ff00000
 800b9ec:	0800d770 	.word	0x0800d770
 800b9f0:	433fffff 	.word	0x433fffff
 800b9f4:	3ff00000 	.word	0x3ff00000
 800b9f8:	3fefffff 	.word	0x3fefffff
 800b9fc:	3fe00000 	.word	0x3fe00000
 800ba00:	41e00000 	.word	0x41e00000
 800ba04:	4661      	mov	r1, ip
 800ba06:	2200      	movs	r2, #0
 800ba08:	4658      	mov	r0, fp
 800ba0a:	4b61      	ldr	r3, [pc, #388]	; (800bb90 <__ieee754_pow+0x3c0>)
 800ba0c:	f7f4 fba4 	bl	8000158 <__aeabi_dsub>
 800ba10:	a355      	add	r3, pc, #340	; (adr r3, 800bb68 <__ieee754_pow+0x398>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	4604      	mov	r4, r0
 800ba18:	460d      	mov	r5, r1
 800ba1a:	f7f4 fd55 	bl	80004c8 <__aeabi_dmul>
 800ba1e:	a354      	add	r3, pc, #336	; (adr r3, 800bb70 <__ieee754_pow+0x3a0>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	4620      	mov	r0, r4
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	f7f4 fd4c 	bl	80004c8 <__aeabi_dmul>
 800ba30:	2200      	movs	r2, #0
 800ba32:	4682      	mov	sl, r0
 800ba34:	468b      	mov	fp, r1
 800ba36:	4620      	mov	r0, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4b56      	ldr	r3, [pc, #344]	; (800bb94 <__ieee754_pow+0x3c4>)
 800ba3c:	f7f4 fd44 	bl	80004c8 <__aeabi_dmul>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	a14c      	add	r1, pc, #304	; (adr r1, 800bb78 <__ieee754_pow+0x3a8>)
 800ba46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba4a:	f7f4 fb85 	bl	8000158 <__aeabi_dsub>
 800ba4e:	4622      	mov	r2, r4
 800ba50:	462b      	mov	r3, r5
 800ba52:	f7f4 fd39 	bl	80004c8 <__aeabi_dmul>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	494e      	ldr	r1, [pc, #312]	; (800bb98 <__ieee754_pow+0x3c8>)
 800ba5e:	f7f4 fb7b 	bl	8000158 <__aeabi_dsub>
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	4680      	mov	r8, r0
 800ba68:	4689      	mov	r9, r1
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	f7f4 fd2b 	bl	80004c8 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4640      	mov	r0, r8
 800ba78:	4649      	mov	r1, r9
 800ba7a:	f7f4 fd25 	bl	80004c8 <__aeabi_dmul>
 800ba7e:	a340      	add	r3, pc, #256	; (adr r3, 800bb80 <__ieee754_pow+0x3b0>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f4 fd20 	bl	80004c8 <__aeabi_dmul>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4650      	mov	r0, sl
 800ba8e:	4659      	mov	r1, fp
 800ba90:	f7f4 fb62 	bl	8000158 <__aeabi_dsub>
 800ba94:	f04f 0a00 	mov.w	sl, #0
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	460d      	mov	r5, r1
 800baa0:	4630      	mov	r0, r6
 800baa2:	4639      	mov	r1, r7
 800baa4:	f7f4 fb5a 	bl	800015c <__adddf3>
 800baa8:	4632      	mov	r2, r6
 800baaa:	463b      	mov	r3, r7
 800baac:	4650      	mov	r0, sl
 800baae:	468b      	mov	fp, r1
 800bab0:	f7f4 fb52 	bl	8000158 <__aeabi_dsub>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	4620      	mov	r0, r4
 800baba:	4629      	mov	r1, r5
 800babc:	f7f4 fb4c 	bl	8000158 <__aeabi_dsub>
 800bac0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bac4:	9b00      	ldr	r3, [sp, #0]
 800bac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bac8:	3b01      	subs	r3, #1
 800baca:	4313      	orrs	r3, r2
 800bacc:	f04f 0600 	mov.w	r6, #0
 800bad0:	f04f 0200 	mov.w	r2, #0
 800bad4:	bf0c      	ite	eq
 800bad6:	4b31      	ldreq	r3, [pc, #196]	; (800bb9c <__ieee754_pow+0x3cc>)
 800bad8:	4b2d      	ldrne	r3, [pc, #180]	; (800bb90 <__ieee754_pow+0x3c0>)
 800bada:	4604      	mov	r4, r0
 800badc:	460d      	mov	r5, r1
 800bade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae2:	e9cd 2300 	strd	r2, r3, [sp]
 800bae6:	4632      	mov	r2, r6
 800bae8:	463b      	mov	r3, r7
 800baea:	f7f4 fb35 	bl	8000158 <__aeabi_dsub>
 800baee:	4652      	mov	r2, sl
 800baf0:	465b      	mov	r3, fp
 800baf2:	f7f4 fce9 	bl	80004c8 <__aeabi_dmul>
 800baf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bafa:	4680      	mov	r8, r0
 800bafc:	4689      	mov	r9, r1
 800bafe:	4620      	mov	r0, r4
 800bb00:	4629      	mov	r1, r5
 800bb02:	f7f4 fce1 	bl	80004c8 <__aeabi_dmul>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f4 fb25 	bl	800015c <__adddf3>
 800bb12:	4632      	mov	r2, r6
 800bb14:	463b      	mov	r3, r7
 800bb16:	4680      	mov	r8, r0
 800bb18:	4689      	mov	r9, r1
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	4659      	mov	r1, fp
 800bb1e:	f7f4 fcd3 	bl	80004c8 <__aeabi_dmul>
 800bb22:	4604      	mov	r4, r0
 800bb24:	460d      	mov	r5, r1
 800bb26:	460b      	mov	r3, r1
 800bb28:	4602      	mov	r2, r0
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bb32:	f7f4 fb13 	bl	800015c <__adddf3>
 800bb36:	4b1a      	ldr	r3, [pc, #104]	; (800bba0 <__ieee754_pow+0x3d0>)
 800bb38:	4682      	mov	sl, r0
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	460e      	mov	r6, r1
 800bb40:	f340 82ed 	ble.w	800c11e <__ieee754_pow+0x94e>
 800bb44:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bb48:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bb4c:	4303      	orrs	r3, r0
 800bb4e:	f000 81e7 	beq.w	800bf20 <__ieee754_pow+0x750>
 800bb52:	a30d      	add	r3, pc, #52	; (adr r3, 800bb88 <__ieee754_pow+0x3b8>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb5c:	f7f4 fcb4 	bl	80004c8 <__aeabi_dmul>
 800bb60:	a309      	add	r3, pc, #36	; (adr r3, 800bb88 <__ieee754_pow+0x3b8>)
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	e6cc      	b.n	800b902 <__ieee754_pow+0x132>
 800bb68:	60000000 	.word	0x60000000
 800bb6c:	3ff71547 	.word	0x3ff71547
 800bb70:	f85ddf44 	.word	0xf85ddf44
 800bb74:	3e54ae0b 	.word	0x3e54ae0b
 800bb78:	55555555 	.word	0x55555555
 800bb7c:	3fd55555 	.word	0x3fd55555
 800bb80:	652b82fe 	.word	0x652b82fe
 800bb84:	3ff71547 	.word	0x3ff71547
 800bb88:	8800759c 	.word	0x8800759c
 800bb8c:	7e37e43c 	.word	0x7e37e43c
 800bb90:	3ff00000 	.word	0x3ff00000
 800bb94:	3fd00000 	.word	0x3fd00000
 800bb98:	3fe00000 	.word	0x3fe00000
 800bb9c:	bff00000 	.word	0xbff00000
 800bba0:	408fffff 	.word	0x408fffff
 800bba4:	4bd4      	ldr	r3, [pc, #848]	; (800bef8 <__ieee754_pow+0x728>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	ea09 0303 	and.w	r3, r9, r3
 800bbac:	b943      	cbnz	r3, 800bbc0 <__ieee754_pow+0x3f0>
 800bbae:	4658      	mov	r0, fp
 800bbb0:	4661      	mov	r1, ip
 800bbb2:	4bd2      	ldr	r3, [pc, #840]	; (800befc <__ieee754_pow+0x72c>)
 800bbb4:	f7f4 fc88 	bl	80004c8 <__aeabi_dmul>
 800bbb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bbbc:	4683      	mov	fp, r0
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	1523      	asrs	r3, r4, #20
 800bbc2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bbc6:	4413      	add	r3, r2
 800bbc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbca:	4bcd      	ldr	r3, [pc, #820]	; (800bf00 <__ieee754_pow+0x730>)
 800bbcc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bbd0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bbda:	dd08      	ble.n	800bbee <__ieee754_pow+0x41e>
 800bbdc:	4bc9      	ldr	r3, [pc, #804]	; (800bf04 <__ieee754_pow+0x734>)
 800bbde:	429c      	cmp	r4, r3
 800bbe0:	f340 819c 	ble.w	800bf1c <__ieee754_pow+0x74c>
 800bbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbe6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bbea:	3301      	adds	r3, #1
 800bbec:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbee:	2600      	movs	r6, #0
 800bbf0:	00f3      	lsls	r3, r6, #3
 800bbf2:	930d      	str	r3, [sp, #52]	; 0x34
 800bbf4:	4bc4      	ldr	r3, [pc, #784]	; (800bf08 <__ieee754_pow+0x738>)
 800bbf6:	4658      	mov	r0, fp
 800bbf8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc00:	4629      	mov	r1, r5
 800bc02:	461a      	mov	r2, r3
 800bc04:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bc08:	4623      	mov	r3, r4
 800bc0a:	f7f4 faa5 	bl	8000158 <__aeabi_dsub>
 800bc0e:	46da      	mov	sl, fp
 800bc10:	462b      	mov	r3, r5
 800bc12:	4652      	mov	r2, sl
 800bc14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bc18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc1c:	f7f4 fa9e 	bl	800015c <__adddf3>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	2000      	movs	r0, #0
 800bc26:	49b9      	ldr	r1, [pc, #740]	; (800bf0c <__ieee754_pow+0x73c>)
 800bc28:	f7f4 fd78 	bl	800071c <__aeabi_ddiv>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc38:	f7f4 fc46 	bl	80004c8 <__aeabi_dmul>
 800bc3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc40:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bc44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc48:	2300      	movs	r3, #0
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	46ab      	mov	fp, r5
 800bc4e:	106d      	asrs	r5, r5, #1
 800bc50:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bc5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bc5e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bc62:	4640      	mov	r0, r8
 800bc64:	4649      	mov	r1, r9
 800bc66:	4614      	mov	r4, r2
 800bc68:	461d      	mov	r5, r3
 800bc6a:	f7f4 fc2d 	bl	80004c8 <__aeabi_dmul>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc76:	f7f4 fa6f 	bl	8000158 <__aeabi_dsub>
 800bc7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc7e:	4606      	mov	r6, r0
 800bc80:	460f      	mov	r7, r1
 800bc82:	4620      	mov	r0, r4
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f4 fa67 	bl	8000158 <__aeabi_dsub>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4650      	mov	r0, sl
 800bc90:	4659      	mov	r1, fp
 800bc92:	f7f4 fa61 	bl	8000158 <__aeabi_dsub>
 800bc96:	4642      	mov	r2, r8
 800bc98:	464b      	mov	r3, r9
 800bc9a:	f7f4 fc15 	bl	80004c8 <__aeabi_dmul>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	f7f4 fa57 	bl	8000158 <__aeabi_dsub>
 800bcaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bcae:	f7f4 fc0b 	bl	80004c8 <__aeabi_dmul>
 800bcb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bcba:	4610      	mov	r0, r2
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	f7f4 fc03 	bl	80004c8 <__aeabi_dmul>
 800bcc2:	a37b      	add	r3, pc, #492	; (adr r3, 800beb0 <__ieee754_pow+0x6e0>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	4604      	mov	r4, r0
 800bcca:	460d      	mov	r5, r1
 800bccc:	f7f4 fbfc 	bl	80004c8 <__aeabi_dmul>
 800bcd0:	a379      	add	r3, pc, #484	; (adr r3, 800beb8 <__ieee754_pow+0x6e8>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 fa41 	bl	800015c <__adddf3>
 800bcda:	4622      	mov	r2, r4
 800bcdc:	462b      	mov	r3, r5
 800bcde:	f7f4 fbf3 	bl	80004c8 <__aeabi_dmul>
 800bce2:	a377      	add	r3, pc, #476	; (adr r3, 800bec0 <__ieee754_pow+0x6f0>)
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f7f4 fa38 	bl	800015c <__adddf3>
 800bcec:	4622      	mov	r2, r4
 800bcee:	462b      	mov	r3, r5
 800bcf0:	f7f4 fbea 	bl	80004c8 <__aeabi_dmul>
 800bcf4:	a374      	add	r3, pc, #464	; (adr r3, 800bec8 <__ieee754_pow+0x6f8>)
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	f7f4 fa2f 	bl	800015c <__adddf3>
 800bcfe:	4622      	mov	r2, r4
 800bd00:	462b      	mov	r3, r5
 800bd02:	f7f4 fbe1 	bl	80004c8 <__aeabi_dmul>
 800bd06:	a372      	add	r3, pc, #456	; (adr r3, 800bed0 <__ieee754_pow+0x700>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	f7f4 fa26 	bl	800015c <__adddf3>
 800bd10:	4622      	mov	r2, r4
 800bd12:	462b      	mov	r3, r5
 800bd14:	f7f4 fbd8 	bl	80004c8 <__aeabi_dmul>
 800bd18:	a36f      	add	r3, pc, #444	; (adr r3, 800bed8 <__ieee754_pow+0x708>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fa1d 	bl	800015c <__adddf3>
 800bd22:	4622      	mov	r2, r4
 800bd24:	4606      	mov	r6, r0
 800bd26:	460f      	mov	r7, r1
 800bd28:	462b      	mov	r3, r5
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	f7f4 fbcb 	bl	80004c8 <__aeabi_dmul>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4630      	mov	r0, r6
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7f4 fbc5 	bl	80004c8 <__aeabi_dmul>
 800bd3e:	4604      	mov	r4, r0
 800bd40:	460d      	mov	r5, r1
 800bd42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd46:	4642      	mov	r2, r8
 800bd48:	464b      	mov	r3, r9
 800bd4a:	f7f4 fa07 	bl	800015c <__adddf3>
 800bd4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd52:	f7f4 fbb9 	bl	80004c8 <__aeabi_dmul>
 800bd56:	4622      	mov	r2, r4
 800bd58:	462b      	mov	r3, r5
 800bd5a:	f7f4 f9ff 	bl	800015c <__adddf3>
 800bd5e:	4642      	mov	r2, r8
 800bd60:	4606      	mov	r6, r0
 800bd62:	460f      	mov	r7, r1
 800bd64:	464b      	mov	r3, r9
 800bd66:	4640      	mov	r0, r8
 800bd68:	4649      	mov	r1, r9
 800bd6a:	f7f4 fbad 	bl	80004c8 <__aeabi_dmul>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4b67      	ldr	r3, [pc, #412]	; (800bf10 <__ieee754_pow+0x740>)
 800bd72:	4682      	mov	sl, r0
 800bd74:	468b      	mov	fp, r1
 800bd76:	f7f4 f9f1 	bl	800015c <__adddf3>
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	463b      	mov	r3, r7
 800bd7e:	f7f4 f9ed 	bl	800015c <__adddf3>
 800bd82:	9c04      	ldr	r4, [sp, #16]
 800bd84:	460d      	mov	r5, r1
 800bd86:	4622      	mov	r2, r4
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	f7f4 fb9b 	bl	80004c8 <__aeabi_dmul>
 800bd92:	2200      	movs	r2, #0
 800bd94:	4680      	mov	r8, r0
 800bd96:	4689      	mov	r9, r1
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	4b5c      	ldr	r3, [pc, #368]	; (800bf10 <__ieee754_pow+0x740>)
 800bd9e:	f7f4 f9db 	bl	8000158 <__aeabi_dsub>
 800bda2:	4652      	mov	r2, sl
 800bda4:	465b      	mov	r3, fp
 800bda6:	f7f4 f9d7 	bl	8000158 <__aeabi_dsub>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4630      	mov	r0, r6
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	f7f4 f9d1 	bl	8000158 <__aeabi_dsub>
 800bdb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdba:	f7f4 fb85 	bl	80004c8 <__aeabi_dmul>
 800bdbe:	4622      	mov	r2, r4
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bdc8:	462b      	mov	r3, r5
 800bdca:	f7f4 fb7d 	bl	80004c8 <__aeabi_dmul>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7f4 f9c1 	bl	800015c <__adddf3>
 800bdda:	4606      	mov	r6, r0
 800bddc:	460f      	mov	r7, r1
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4640      	mov	r0, r8
 800bde4:	4649      	mov	r1, r9
 800bde6:	f7f4 f9b9 	bl	800015c <__adddf3>
 800bdea:	a33d      	add	r3, pc, #244	; (adr r3, 800bee0 <__ieee754_pow+0x710>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	9c04      	ldr	r4, [sp, #16]
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7f4 fb67 	bl	80004c8 <__aeabi_dmul>
 800bdfa:	4642      	mov	r2, r8
 800bdfc:	464b      	mov	r3, r9
 800bdfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be02:	4620      	mov	r0, r4
 800be04:	4629      	mov	r1, r5
 800be06:	f7f4 f9a7 	bl	8000158 <__aeabi_dsub>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4630      	mov	r0, r6
 800be10:	4639      	mov	r1, r7
 800be12:	f7f4 f9a1 	bl	8000158 <__aeabi_dsub>
 800be16:	a334      	add	r3, pc, #208	; (adr r3, 800bee8 <__ieee754_pow+0x718>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 fb54 	bl	80004c8 <__aeabi_dmul>
 800be20:	a333      	add	r3, pc, #204	; (adr r3, 800bef0 <__ieee754_pow+0x720>)
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	4606      	mov	r6, r0
 800be28:	460f      	mov	r7, r1
 800be2a:	4620      	mov	r0, r4
 800be2c:	4629      	mov	r1, r5
 800be2e:	f7f4 fb4b 	bl	80004c8 <__aeabi_dmul>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4630      	mov	r0, r6
 800be38:	4639      	mov	r1, r7
 800be3a:	f7f4 f98f 	bl	800015c <__adddf3>
 800be3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be40:	4b34      	ldr	r3, [pc, #208]	; (800bf14 <__ieee754_pow+0x744>)
 800be42:	4413      	add	r3, r2
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f7f4 f988 	bl	800015c <__adddf3>
 800be4c:	4680      	mov	r8, r0
 800be4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800be50:	4689      	mov	r9, r1
 800be52:	f7f4 facf 	bl	80003f4 <__aeabi_i2d>
 800be56:	4604      	mov	r4, r0
 800be58:	460d      	mov	r5, r1
 800be5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be5c:	4b2e      	ldr	r3, [pc, #184]	; (800bf18 <__ieee754_pow+0x748>)
 800be5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be62:	4413      	add	r3, r2
 800be64:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be68:	4642      	mov	r2, r8
 800be6a:	464b      	mov	r3, r9
 800be6c:	f7f4 f976 	bl	800015c <__adddf3>
 800be70:	4632      	mov	r2, r6
 800be72:	463b      	mov	r3, r7
 800be74:	f7f4 f972 	bl	800015c <__adddf3>
 800be78:	4622      	mov	r2, r4
 800be7a:	462b      	mov	r3, r5
 800be7c:	f7f4 f96e 	bl	800015c <__adddf3>
 800be80:	f8dd a010 	ldr.w	sl, [sp, #16]
 800be84:	4622      	mov	r2, r4
 800be86:	462b      	mov	r3, r5
 800be88:	4650      	mov	r0, sl
 800be8a:	468b      	mov	fp, r1
 800be8c:	f7f4 f964 	bl	8000158 <__aeabi_dsub>
 800be90:	4632      	mov	r2, r6
 800be92:	463b      	mov	r3, r7
 800be94:	f7f4 f960 	bl	8000158 <__aeabi_dsub>
 800be98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be9c:	f7f4 f95c 	bl	8000158 <__aeabi_dsub>
 800bea0:	4602      	mov	r2, r0
 800bea2:	460b      	mov	r3, r1
 800bea4:	4640      	mov	r0, r8
 800bea6:	4649      	mov	r1, r9
 800bea8:	e608      	b.n	800babc <__ieee754_pow+0x2ec>
 800beaa:	bf00      	nop
 800beac:	f3af 8000 	nop.w
 800beb0:	4a454eef 	.word	0x4a454eef
 800beb4:	3fca7e28 	.word	0x3fca7e28
 800beb8:	93c9db65 	.word	0x93c9db65
 800bebc:	3fcd864a 	.word	0x3fcd864a
 800bec0:	a91d4101 	.word	0xa91d4101
 800bec4:	3fd17460 	.word	0x3fd17460
 800bec8:	518f264d 	.word	0x518f264d
 800becc:	3fd55555 	.word	0x3fd55555
 800bed0:	db6fabff 	.word	0xdb6fabff
 800bed4:	3fdb6db6 	.word	0x3fdb6db6
 800bed8:	33333303 	.word	0x33333303
 800bedc:	3fe33333 	.word	0x3fe33333
 800bee0:	e0000000 	.word	0xe0000000
 800bee4:	3feec709 	.word	0x3feec709
 800bee8:	dc3a03fd 	.word	0xdc3a03fd
 800beec:	3feec709 	.word	0x3feec709
 800bef0:	145b01f5 	.word	0x145b01f5
 800bef4:	be3e2fe0 	.word	0xbe3e2fe0
 800bef8:	7ff00000 	.word	0x7ff00000
 800befc:	43400000 	.word	0x43400000
 800bf00:	0003988e 	.word	0x0003988e
 800bf04:	000bb679 	.word	0x000bb679
 800bf08:	0800d778 	.word	0x0800d778
 800bf0c:	3ff00000 	.word	0x3ff00000
 800bf10:	40080000 	.word	0x40080000
 800bf14:	0800d798 	.word	0x0800d798
 800bf18:	0800d788 	.word	0x0800d788
 800bf1c:	2601      	movs	r6, #1
 800bf1e:	e667      	b.n	800bbf0 <__ieee754_pow+0x420>
 800bf20:	a39d      	add	r3, pc, #628	; (adr r3, 800c198 <__ieee754_pow+0x9c8>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	4640      	mov	r0, r8
 800bf28:	4649      	mov	r1, r9
 800bf2a:	f7f4 f917 	bl	800015c <__adddf3>
 800bf2e:	4622      	mov	r2, r4
 800bf30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf34:	462b      	mov	r3, r5
 800bf36:	4650      	mov	r0, sl
 800bf38:	4639      	mov	r1, r7
 800bf3a:	f7f4 f90d 	bl	8000158 <__aeabi_dsub>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf46:	f7f4 fd4f 	bl	80009e8 <__aeabi_dcmpgt>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f47f ae01 	bne.w	800bb52 <__ieee754_pow+0x382>
 800bf50:	4aa5      	ldr	r2, [pc, #660]	; (800c1e8 <__ieee754_pow+0xa18>)
 800bf52:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800bf56:	4293      	cmp	r3, r2
 800bf58:	f340 8103 	ble.w	800c162 <__ieee754_pow+0x992>
 800bf5c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bf60:	2000      	movs	r0, #0
 800bf62:	151b      	asrs	r3, r3, #20
 800bf64:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bf68:	fa4a f303 	asr.w	r3, sl, r3
 800bf6c:	4433      	add	r3, r6
 800bf6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bf72:	4f9e      	ldr	r7, [pc, #632]	; (800c1ec <__ieee754_pow+0xa1c>)
 800bf74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bf78:	4117      	asrs	r7, r2
 800bf7a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bf7e:	ea23 0107 	bic.w	r1, r3, r7
 800bf82:	f1c2 0214 	rsb	r2, r2, #20
 800bf86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	fa4a fa02 	asr.w	sl, sl, r2
 800bf90:	2e00      	cmp	r6, #0
 800bf92:	4602      	mov	r2, r0
 800bf94:	4629      	mov	r1, r5
 800bf96:	4620      	mov	r0, r4
 800bf98:	bfb8      	it	lt
 800bf9a:	f1ca 0a00 	rsblt	sl, sl, #0
 800bf9e:	f7f4 f8db 	bl	8000158 <__aeabi_dsub>
 800bfa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfaa:	2400      	movs	r4, #0
 800bfac:	4642      	mov	r2, r8
 800bfae:	464b      	mov	r3, r9
 800bfb0:	f7f4 f8d4 	bl	800015c <__adddf3>
 800bfb4:	a37a      	add	r3, pc, #488	; (adr r3, 800c1a0 <__ieee754_pow+0x9d0>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	4620      	mov	r0, r4
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	f7f4 fa83 	bl	80004c8 <__aeabi_dmul>
 800bfc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	460f      	mov	r7, r1
 800bfca:	4620      	mov	r0, r4
 800bfcc:	4629      	mov	r1, r5
 800bfce:	f7f4 f8c3 	bl	8000158 <__aeabi_dsub>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	4649      	mov	r1, r9
 800bfda:	f7f4 f8bd 	bl	8000158 <__aeabi_dsub>
 800bfde:	a372      	add	r3, pc, #456	; (adr r3, 800c1a8 <__ieee754_pow+0x9d8>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	f7f4 fa70 	bl	80004c8 <__aeabi_dmul>
 800bfe8:	a371      	add	r3, pc, #452	; (adr r3, 800c1b0 <__ieee754_pow+0x9e0>)
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	4680      	mov	r8, r0
 800bff0:	4689      	mov	r9, r1
 800bff2:	4620      	mov	r0, r4
 800bff4:	4629      	mov	r1, r5
 800bff6:	f7f4 fa67 	bl	80004c8 <__aeabi_dmul>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	4640      	mov	r0, r8
 800c000:	4649      	mov	r1, r9
 800c002:	f7f4 f8ab 	bl	800015c <__adddf3>
 800c006:	4604      	mov	r4, r0
 800c008:	460d      	mov	r5, r1
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4630      	mov	r0, r6
 800c010:	4639      	mov	r1, r7
 800c012:	f7f4 f8a3 	bl	800015c <__adddf3>
 800c016:	4632      	mov	r2, r6
 800c018:	463b      	mov	r3, r7
 800c01a:	4680      	mov	r8, r0
 800c01c:	4689      	mov	r9, r1
 800c01e:	f7f4 f89b 	bl	8000158 <__aeabi_dsub>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	4620      	mov	r0, r4
 800c028:	4629      	mov	r1, r5
 800c02a:	f7f4 f895 	bl	8000158 <__aeabi_dsub>
 800c02e:	4642      	mov	r2, r8
 800c030:	4606      	mov	r6, r0
 800c032:	460f      	mov	r7, r1
 800c034:	464b      	mov	r3, r9
 800c036:	4640      	mov	r0, r8
 800c038:	4649      	mov	r1, r9
 800c03a:	f7f4 fa45 	bl	80004c8 <__aeabi_dmul>
 800c03e:	a35e      	add	r3, pc, #376	; (adr r3, 800c1b8 <__ieee754_pow+0x9e8>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	f7f4 fa3e 	bl	80004c8 <__aeabi_dmul>
 800c04c:	a35c      	add	r3, pc, #368	; (adr r3, 800c1c0 <__ieee754_pow+0x9f0>)
 800c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c052:	f7f4 f881 	bl	8000158 <__aeabi_dsub>
 800c056:	4622      	mov	r2, r4
 800c058:	462b      	mov	r3, r5
 800c05a:	f7f4 fa35 	bl	80004c8 <__aeabi_dmul>
 800c05e:	a35a      	add	r3, pc, #360	; (adr r3, 800c1c8 <__ieee754_pow+0x9f8>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f7f4 f87a 	bl	800015c <__adddf3>
 800c068:	4622      	mov	r2, r4
 800c06a:	462b      	mov	r3, r5
 800c06c:	f7f4 fa2c 	bl	80004c8 <__aeabi_dmul>
 800c070:	a357      	add	r3, pc, #348	; (adr r3, 800c1d0 <__ieee754_pow+0xa00>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 f86f 	bl	8000158 <__aeabi_dsub>
 800c07a:	4622      	mov	r2, r4
 800c07c:	462b      	mov	r3, r5
 800c07e:	f7f4 fa23 	bl	80004c8 <__aeabi_dmul>
 800c082:	a355      	add	r3, pc, #340	; (adr r3, 800c1d8 <__ieee754_pow+0xa08>)
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	f7f4 f868 	bl	800015c <__adddf3>
 800c08c:	4622      	mov	r2, r4
 800c08e:	462b      	mov	r3, r5
 800c090:	f7f4 fa1a 	bl	80004c8 <__aeabi_dmul>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4640      	mov	r0, r8
 800c09a:	4649      	mov	r1, r9
 800c09c:	f7f4 f85c 	bl	8000158 <__aeabi_dsub>
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	f7f4 fa0c 	bl	80004c8 <__aeabi_dmul>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7f4 f84b 	bl	8000158 <__aeabi_dsub>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ca:	f7f4 fb27 	bl	800071c <__aeabi_ddiv>
 800c0ce:	4632      	mov	r2, r6
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	463b      	mov	r3, r7
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	4649      	mov	r1, r9
 800c0da:	f7f4 f9f5 	bl	80004c8 <__aeabi_dmul>
 800c0de:	4632      	mov	r2, r6
 800c0e0:	463b      	mov	r3, r7
 800c0e2:	f7f4 f83b 	bl	800015c <__adddf3>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f7f4 f833 	bl	8000158 <__aeabi_dsub>
 800c0f2:	4642      	mov	r2, r8
 800c0f4:	464b      	mov	r3, r9
 800c0f6:	f7f4 f82f 	bl	8000158 <__aeabi_dsub>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	2000      	movs	r0, #0
 800c100:	493b      	ldr	r1, [pc, #236]	; (800c1f0 <__ieee754_pow+0xa20>)
 800c102:	f7f4 f829 	bl	8000158 <__aeabi_dsub>
 800c106:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c10a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c10e:	da2b      	bge.n	800c168 <__ieee754_pow+0x998>
 800c110:	4652      	mov	r2, sl
 800c112:	f001 f859 	bl	800d1c8 <scalbn>
 800c116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c11a:	f7ff bbf2 	b.w	800b902 <__ieee754_pow+0x132>
 800c11e:	4b35      	ldr	r3, [pc, #212]	; (800c1f4 <__ieee754_pow+0xa24>)
 800c120:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c124:	429f      	cmp	r7, r3
 800c126:	f77f af13 	ble.w	800bf50 <__ieee754_pow+0x780>
 800c12a:	4b33      	ldr	r3, [pc, #204]	; (800c1f8 <__ieee754_pow+0xa28>)
 800c12c:	440b      	add	r3, r1
 800c12e:	4303      	orrs	r3, r0
 800c130:	d00b      	beq.n	800c14a <__ieee754_pow+0x97a>
 800c132:	a32b      	add	r3, pc, #172	; (adr r3, 800c1e0 <__ieee754_pow+0xa10>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c13c:	f7f4 f9c4 	bl	80004c8 <__aeabi_dmul>
 800c140:	a327      	add	r3, pc, #156	; (adr r3, 800c1e0 <__ieee754_pow+0xa10>)
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f7ff bbdc 	b.w	800b902 <__ieee754_pow+0x132>
 800c14a:	4622      	mov	r2, r4
 800c14c:	462b      	mov	r3, r5
 800c14e:	f7f4 f803 	bl	8000158 <__aeabi_dsub>
 800c152:	4642      	mov	r2, r8
 800c154:	464b      	mov	r3, r9
 800c156:	f7f4 fc3d 	bl	80009d4 <__aeabi_dcmpge>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	f43f aef8 	beq.w	800bf50 <__ieee754_pow+0x780>
 800c160:	e7e7      	b.n	800c132 <__ieee754_pow+0x962>
 800c162:	f04f 0a00 	mov.w	sl, #0
 800c166:	e71e      	b.n	800bfa6 <__ieee754_pow+0x7d6>
 800c168:	4621      	mov	r1, r4
 800c16a:	e7d4      	b.n	800c116 <__ieee754_pow+0x946>
 800c16c:	f04f 0b00 	mov.w	fp, #0
 800c170:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1f0 <__ieee754_pow+0xa20>
 800c174:	f7ff bbb0 	b.w	800b8d8 <__ieee754_pow+0x108>
 800c178:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c17c:	f7ff bbac 	b.w	800b8d8 <__ieee754_pow+0x108>
 800c180:	4638      	mov	r0, r7
 800c182:	4641      	mov	r1, r8
 800c184:	f7ff bbbf 	b.w	800b906 <__ieee754_pow+0x136>
 800c188:	9200      	str	r2, [sp, #0]
 800c18a:	f7ff bb7f 	b.w	800b88c <__ieee754_pow+0xbc>
 800c18e:	2300      	movs	r3, #0
 800c190:	f7ff bb69 	b.w	800b866 <__ieee754_pow+0x96>
 800c194:	f3af 8000 	nop.w
 800c198:	652b82fe 	.word	0x652b82fe
 800c19c:	3c971547 	.word	0x3c971547
 800c1a0:	00000000 	.word	0x00000000
 800c1a4:	3fe62e43 	.word	0x3fe62e43
 800c1a8:	fefa39ef 	.word	0xfefa39ef
 800c1ac:	3fe62e42 	.word	0x3fe62e42
 800c1b0:	0ca86c39 	.word	0x0ca86c39
 800c1b4:	be205c61 	.word	0xbe205c61
 800c1b8:	72bea4d0 	.word	0x72bea4d0
 800c1bc:	3e663769 	.word	0x3e663769
 800c1c0:	c5d26bf1 	.word	0xc5d26bf1
 800c1c4:	3ebbbd41 	.word	0x3ebbbd41
 800c1c8:	af25de2c 	.word	0xaf25de2c
 800c1cc:	3f11566a 	.word	0x3f11566a
 800c1d0:	16bebd93 	.word	0x16bebd93
 800c1d4:	3f66c16c 	.word	0x3f66c16c
 800c1d8:	5555553e 	.word	0x5555553e
 800c1dc:	3fc55555 	.word	0x3fc55555
 800c1e0:	c2f8f359 	.word	0xc2f8f359
 800c1e4:	01a56e1f 	.word	0x01a56e1f
 800c1e8:	3fe00000 	.word	0x3fe00000
 800c1ec:	000fffff 	.word	0x000fffff
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	4090cbff 	.word	0x4090cbff
 800c1f8:	3f6f3400 	.word	0x3f6f3400

0800c1fc <__ieee754_sqrt>:
 800c1fc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800c350 <__ieee754_sqrt+0x154>
 800c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c204:	ea3c 0c01 	bics.w	ip, ip, r1
 800c208:	460b      	mov	r3, r1
 800c20a:	4606      	mov	r6, r0
 800c20c:	460d      	mov	r5, r1
 800c20e:	460a      	mov	r2, r1
 800c210:	4607      	mov	r7, r0
 800c212:	4604      	mov	r4, r0
 800c214:	d10e      	bne.n	800c234 <__ieee754_sqrt+0x38>
 800c216:	4602      	mov	r2, r0
 800c218:	f7f4 f956 	bl	80004c8 <__aeabi_dmul>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4630      	mov	r0, r6
 800c222:	4629      	mov	r1, r5
 800c224:	f7f3 ff9a 	bl	800015c <__adddf3>
 800c228:	4606      	mov	r6, r0
 800c22a:	460d      	mov	r5, r1
 800c22c:	4630      	mov	r0, r6
 800c22e:	4629      	mov	r1, r5
 800c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c234:	2900      	cmp	r1, #0
 800c236:	dc0d      	bgt.n	800c254 <__ieee754_sqrt+0x58>
 800c238:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c23c:	ea5c 0707 	orrs.w	r7, ip, r7
 800c240:	d0f4      	beq.n	800c22c <__ieee754_sqrt+0x30>
 800c242:	b139      	cbz	r1, 800c254 <__ieee754_sqrt+0x58>
 800c244:	4602      	mov	r2, r0
 800c246:	f7f3 ff87 	bl	8000158 <__aeabi_dsub>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	f7f4 fa65 	bl	800071c <__aeabi_ddiv>
 800c252:	e7e9      	b.n	800c228 <__ieee754_sqrt+0x2c>
 800c254:	1512      	asrs	r2, r2, #20
 800c256:	d074      	beq.n	800c342 <__ieee754_sqrt+0x146>
 800c258:	2000      	movs	r0, #0
 800c25a:	07d5      	lsls	r5, r2, #31
 800c25c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c260:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800c264:	bf5e      	ittt	pl
 800c266:	0fe3      	lsrpl	r3, r4, #31
 800c268:	0064      	lslpl	r4, r4, #1
 800c26a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800c26e:	0fe3      	lsrs	r3, r4, #31
 800c270:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c274:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800c278:	2516      	movs	r5, #22
 800c27a:	4601      	mov	r1, r0
 800c27c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c280:	1076      	asrs	r6, r6, #1
 800c282:	0064      	lsls	r4, r4, #1
 800c284:	188f      	adds	r7, r1, r2
 800c286:	429f      	cmp	r7, r3
 800c288:	bfde      	ittt	le
 800c28a:	1bdb      	suble	r3, r3, r7
 800c28c:	18b9      	addle	r1, r7, r2
 800c28e:	1880      	addle	r0, r0, r2
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	3d01      	subs	r5, #1
 800c294:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c298:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c29c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c2a0:	d1f0      	bne.n	800c284 <__ieee754_sqrt+0x88>
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	f04f 0e20 	mov.w	lr, #32
 800c2a8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800c2ac:	428b      	cmp	r3, r1
 800c2ae:	eb07 0c05 	add.w	ip, r7, r5
 800c2b2:	dc02      	bgt.n	800c2ba <__ieee754_sqrt+0xbe>
 800c2b4:	d113      	bne.n	800c2de <__ieee754_sqrt+0xe2>
 800c2b6:	45a4      	cmp	ip, r4
 800c2b8:	d811      	bhi.n	800c2de <__ieee754_sqrt+0xe2>
 800c2ba:	f1bc 0f00 	cmp.w	ip, #0
 800c2be:	eb0c 0507 	add.w	r5, ip, r7
 800c2c2:	da43      	bge.n	800c34c <__ieee754_sqrt+0x150>
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	db41      	blt.n	800c34c <__ieee754_sqrt+0x150>
 800c2c8:	f101 0801 	add.w	r8, r1, #1
 800c2cc:	1a5b      	subs	r3, r3, r1
 800c2ce:	4641      	mov	r1, r8
 800c2d0:	45a4      	cmp	ip, r4
 800c2d2:	bf88      	it	hi
 800c2d4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c2d8:	eba4 040c 	sub.w	r4, r4, ip
 800c2dc:	443a      	add	r2, r7
 800c2de:	005b      	lsls	r3, r3, #1
 800c2e0:	f1be 0e01 	subs.w	lr, lr, #1
 800c2e4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c2e8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800c2ec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c2f0:	d1dc      	bne.n	800c2ac <__ieee754_sqrt+0xb0>
 800c2f2:	4323      	orrs	r3, r4
 800c2f4:	d006      	beq.n	800c304 <__ieee754_sqrt+0x108>
 800c2f6:	1c54      	adds	r4, r2, #1
 800c2f8:	bf0b      	itete	eq
 800c2fa:	4672      	moveq	r2, lr
 800c2fc:	3201      	addne	r2, #1
 800c2fe:	3001      	addeq	r0, #1
 800c300:	f022 0201 	bicne.w	r2, r2, #1
 800c304:	1043      	asrs	r3, r0, #1
 800c306:	07c1      	lsls	r1, r0, #31
 800c308:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c30c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c310:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c314:	bf48      	it	mi
 800c316:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c31a:	4610      	mov	r0, r2
 800c31c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800c320:	e782      	b.n	800c228 <__ieee754_sqrt+0x2c>
 800c322:	0ae3      	lsrs	r3, r4, #11
 800c324:	3915      	subs	r1, #21
 800c326:	0564      	lsls	r4, r4, #21
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d0fa      	beq.n	800c322 <__ieee754_sqrt+0x126>
 800c32c:	02de      	lsls	r6, r3, #11
 800c32e:	d50a      	bpl.n	800c346 <__ieee754_sqrt+0x14a>
 800c330:	f1c2 0020 	rsb	r0, r2, #32
 800c334:	fa24 f000 	lsr.w	r0, r4, r0
 800c338:	1e55      	subs	r5, r2, #1
 800c33a:	4094      	lsls	r4, r2
 800c33c:	4303      	orrs	r3, r0
 800c33e:	1b4a      	subs	r2, r1, r5
 800c340:	e78a      	b.n	800c258 <__ieee754_sqrt+0x5c>
 800c342:	4611      	mov	r1, r2
 800c344:	e7f0      	b.n	800c328 <__ieee754_sqrt+0x12c>
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	3201      	adds	r2, #1
 800c34a:	e7ef      	b.n	800c32c <__ieee754_sqrt+0x130>
 800c34c:	4688      	mov	r8, r1
 800c34e:	e7bd      	b.n	800c2cc <__ieee754_sqrt+0xd0>
 800c350:	7ff00000 	.word	0x7ff00000

0800c354 <__ieee754_asinf>:
 800c354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c358:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c35c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c360:	4604      	mov	r4, r0
 800c362:	4605      	mov	r5, r0
 800c364:	d10c      	bne.n	800c380 <__ieee754_asinf+0x2c>
 800c366:	498d      	ldr	r1, [pc, #564]	; (800c59c <__ieee754_asinf+0x248>)
 800c368:	f7f4 fce4 	bl	8000d34 <__aeabi_fmul>
 800c36c:	498c      	ldr	r1, [pc, #560]	; (800c5a0 <__ieee754_asinf+0x24c>)
 800c36e:	4605      	mov	r5, r0
 800c370:	4620      	mov	r0, r4
 800c372:	f7f4 fcdf 	bl	8000d34 <__aeabi_fmul>
 800c376:	4601      	mov	r1, r0
 800c378:	4628      	mov	r0, r5
 800c37a:	f7f4 fbd3 	bl	8000b24 <__addsf3>
 800c37e:	e006      	b.n	800c38e <__ieee754_asinf+0x3a>
 800c380:	dd07      	ble.n	800c392 <__ieee754_asinf+0x3e>
 800c382:	4601      	mov	r1, r0
 800c384:	f7f4 fbcc 	bl	8000b20 <__aeabi_fsub>
 800c388:	4601      	mov	r1, r0
 800c38a:	f7f4 fd87 	bl	8000e9c <__aeabi_fdiv>
 800c38e:	4604      	mov	r4, r0
 800c390:	e00e      	b.n	800c3b0 <__ieee754_asinf+0x5c>
 800c392:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800c396:	da58      	bge.n	800c44a <__ieee754_asinf+0xf6>
 800c398:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800c39c:	da0b      	bge.n	800c3b6 <__ieee754_asinf+0x62>
 800c39e:	4981      	ldr	r1, [pc, #516]	; (800c5a4 <__ieee754_asinf+0x250>)
 800c3a0:	f7f4 fbc0 	bl	8000b24 <__addsf3>
 800c3a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c3a8:	f7f4 fe80 	bl	80010ac <__aeabi_fcmpgt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d04c      	beq.n	800c44a <__ieee754_asinf+0xf6>
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	f7f4 fcbc 	bl	8000d34 <__aeabi_fmul>
 800c3bc:	4605      	mov	r5, r0
 800c3be:	497a      	ldr	r1, [pc, #488]	; (800c5a8 <__ieee754_asinf+0x254>)
 800c3c0:	f7f4 fcb8 	bl	8000d34 <__aeabi_fmul>
 800c3c4:	4979      	ldr	r1, [pc, #484]	; (800c5ac <__ieee754_asinf+0x258>)
 800c3c6:	f7f4 fbad 	bl	8000b24 <__addsf3>
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	f7f4 fcb2 	bl	8000d34 <__aeabi_fmul>
 800c3d0:	4977      	ldr	r1, [pc, #476]	; (800c5b0 <__ieee754_asinf+0x25c>)
 800c3d2:	f7f4 fba5 	bl	8000b20 <__aeabi_fsub>
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	f7f4 fcac 	bl	8000d34 <__aeabi_fmul>
 800c3dc:	4975      	ldr	r1, [pc, #468]	; (800c5b4 <__ieee754_asinf+0x260>)
 800c3de:	f7f4 fba1 	bl	8000b24 <__addsf3>
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	f7f4 fca6 	bl	8000d34 <__aeabi_fmul>
 800c3e8:	4973      	ldr	r1, [pc, #460]	; (800c5b8 <__ieee754_asinf+0x264>)
 800c3ea:	f7f4 fb99 	bl	8000b20 <__aeabi_fsub>
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	f7f4 fca0 	bl	8000d34 <__aeabi_fmul>
 800c3f4:	4971      	ldr	r1, [pc, #452]	; (800c5bc <__ieee754_asinf+0x268>)
 800c3f6:	f7f4 fb95 	bl	8000b24 <__addsf3>
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	f7f4 fc9a 	bl	8000d34 <__aeabi_fmul>
 800c400:	496f      	ldr	r1, [pc, #444]	; (800c5c0 <__ieee754_asinf+0x26c>)
 800c402:	4606      	mov	r6, r0
 800c404:	4628      	mov	r0, r5
 800c406:	f7f4 fc95 	bl	8000d34 <__aeabi_fmul>
 800c40a:	496e      	ldr	r1, [pc, #440]	; (800c5c4 <__ieee754_asinf+0x270>)
 800c40c:	f7f4 fb88 	bl	8000b20 <__aeabi_fsub>
 800c410:	4629      	mov	r1, r5
 800c412:	f7f4 fc8f 	bl	8000d34 <__aeabi_fmul>
 800c416:	496c      	ldr	r1, [pc, #432]	; (800c5c8 <__ieee754_asinf+0x274>)
 800c418:	f7f4 fb84 	bl	8000b24 <__addsf3>
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f4 fc89 	bl	8000d34 <__aeabi_fmul>
 800c422:	496a      	ldr	r1, [pc, #424]	; (800c5cc <__ieee754_asinf+0x278>)
 800c424:	f7f4 fb7c 	bl	8000b20 <__aeabi_fsub>
 800c428:	4629      	mov	r1, r5
 800c42a:	f7f4 fc83 	bl	8000d34 <__aeabi_fmul>
 800c42e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c432:	f7f4 fb77 	bl	8000b24 <__addsf3>
 800c436:	4601      	mov	r1, r0
 800c438:	4630      	mov	r0, r6
 800c43a:	f7f4 fd2f 	bl	8000e9c <__aeabi_fdiv>
 800c43e:	4621      	mov	r1, r4
 800c440:	f7f4 fc78 	bl	8000d34 <__aeabi_fmul>
 800c444:	4601      	mov	r1, r0
 800c446:	4620      	mov	r0, r4
 800c448:	e797      	b.n	800c37a <__ieee754_asinf+0x26>
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 ff42 	bl	800d2d4 <fabsf>
 800c450:	4601      	mov	r1, r0
 800c452:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c456:	f7f4 fb63 	bl	8000b20 <__aeabi_fsub>
 800c45a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c45e:	f7f4 fc69 	bl	8000d34 <__aeabi_fmul>
 800c462:	4606      	mov	r6, r0
 800c464:	4950      	ldr	r1, [pc, #320]	; (800c5a8 <__ieee754_asinf+0x254>)
 800c466:	f7f4 fc65 	bl	8000d34 <__aeabi_fmul>
 800c46a:	4950      	ldr	r1, [pc, #320]	; (800c5ac <__ieee754_asinf+0x258>)
 800c46c:	f7f4 fb5a 	bl	8000b24 <__addsf3>
 800c470:	4631      	mov	r1, r6
 800c472:	f7f4 fc5f 	bl	8000d34 <__aeabi_fmul>
 800c476:	494e      	ldr	r1, [pc, #312]	; (800c5b0 <__ieee754_asinf+0x25c>)
 800c478:	f7f4 fb52 	bl	8000b20 <__aeabi_fsub>
 800c47c:	4631      	mov	r1, r6
 800c47e:	f7f4 fc59 	bl	8000d34 <__aeabi_fmul>
 800c482:	494c      	ldr	r1, [pc, #304]	; (800c5b4 <__ieee754_asinf+0x260>)
 800c484:	f7f4 fb4e 	bl	8000b24 <__addsf3>
 800c488:	4631      	mov	r1, r6
 800c48a:	f7f4 fc53 	bl	8000d34 <__aeabi_fmul>
 800c48e:	494a      	ldr	r1, [pc, #296]	; (800c5b8 <__ieee754_asinf+0x264>)
 800c490:	f7f4 fb46 	bl	8000b20 <__aeabi_fsub>
 800c494:	4631      	mov	r1, r6
 800c496:	f7f4 fc4d 	bl	8000d34 <__aeabi_fmul>
 800c49a:	4948      	ldr	r1, [pc, #288]	; (800c5bc <__ieee754_asinf+0x268>)
 800c49c:	f7f4 fb42 	bl	8000b24 <__addsf3>
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	f7f4 fc47 	bl	8000d34 <__aeabi_fmul>
 800c4a6:	4946      	ldr	r1, [pc, #280]	; (800c5c0 <__ieee754_asinf+0x26c>)
 800c4a8:	4681      	mov	r9, r0
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f7f4 fc42 	bl	8000d34 <__aeabi_fmul>
 800c4b0:	4944      	ldr	r1, [pc, #272]	; (800c5c4 <__ieee754_asinf+0x270>)
 800c4b2:	f7f4 fb35 	bl	8000b20 <__aeabi_fsub>
 800c4b6:	4631      	mov	r1, r6
 800c4b8:	f7f4 fc3c 	bl	8000d34 <__aeabi_fmul>
 800c4bc:	4942      	ldr	r1, [pc, #264]	; (800c5c8 <__ieee754_asinf+0x274>)
 800c4be:	f7f4 fb31 	bl	8000b24 <__addsf3>
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	f7f4 fc36 	bl	8000d34 <__aeabi_fmul>
 800c4c8:	4940      	ldr	r1, [pc, #256]	; (800c5cc <__ieee754_asinf+0x278>)
 800c4ca:	f7f4 fb29 	bl	8000b20 <__aeabi_fsub>
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	f7f4 fc30 	bl	8000d34 <__aeabi_fmul>
 800c4d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4d8:	f7f4 fb24 	bl	8000b24 <__addsf3>
 800c4dc:	4682      	mov	sl, r0
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f000 f9da 	bl	800c898 <__ieee754_sqrtf>
 800c4e4:	4b3a      	ldr	r3, [pc, #232]	; (800c5d0 <__ieee754_asinf+0x27c>)
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	4598      	cmp	r8, r3
 800c4ea:	dd1a      	ble.n	800c522 <__ieee754_asinf+0x1ce>
 800c4ec:	4651      	mov	r1, sl
 800c4ee:	4648      	mov	r0, r9
 800c4f0:	f7f4 fcd4 	bl	8000e9c <__aeabi_fdiv>
 800c4f4:	4639      	mov	r1, r7
 800c4f6:	f7f4 fc1d 	bl	8000d34 <__aeabi_fmul>
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	f7f4 fb12 	bl	8000b24 <__addsf3>
 800c500:	4601      	mov	r1, r0
 800c502:	f7f4 fb0f 	bl	8000b24 <__addsf3>
 800c506:	4933      	ldr	r1, [pc, #204]	; (800c5d4 <__ieee754_asinf+0x280>)
 800c508:	f7f4 fb0c 	bl	8000b24 <__addsf3>
 800c50c:	4601      	mov	r1, r0
 800c50e:	4823      	ldr	r0, [pc, #140]	; (800c59c <__ieee754_asinf+0x248>)
 800c510:	f7f4 fb06 	bl	8000b20 <__aeabi_fsub>
 800c514:	2d00      	cmp	r5, #0
 800c516:	4604      	mov	r4, r0
 800c518:	f73f af4a 	bgt.w	800c3b0 <__ieee754_asinf+0x5c>
 800c51c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c520:	e735      	b.n	800c38e <__ieee754_asinf+0x3a>
 800c522:	4601      	mov	r1, r0
 800c524:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800c528:	f7f4 fafc 	bl	8000b24 <__addsf3>
 800c52c:	4651      	mov	r1, sl
 800c52e:	4604      	mov	r4, r0
 800c530:	4648      	mov	r0, r9
 800c532:	f7f4 fcb3 	bl	8000e9c <__aeabi_fdiv>
 800c536:	4601      	mov	r1, r0
 800c538:	4620      	mov	r0, r4
 800c53a:	f7f4 fbfb 	bl	8000d34 <__aeabi_fmul>
 800c53e:	f028 080f 	bic.w	r8, r8, #15
 800c542:	4681      	mov	r9, r0
 800c544:	4641      	mov	r1, r8
 800c546:	4640      	mov	r0, r8
 800c548:	f7f4 fbf4 	bl	8000d34 <__aeabi_fmul>
 800c54c:	4601      	mov	r1, r0
 800c54e:	4630      	mov	r0, r6
 800c550:	f7f4 fae6 	bl	8000b20 <__aeabi_fsub>
 800c554:	4641      	mov	r1, r8
 800c556:	4604      	mov	r4, r0
 800c558:	4638      	mov	r0, r7
 800c55a:	f7f4 fae3 	bl	8000b24 <__addsf3>
 800c55e:	4601      	mov	r1, r0
 800c560:	4620      	mov	r0, r4
 800c562:	f7f4 fc9b 	bl	8000e9c <__aeabi_fdiv>
 800c566:	4601      	mov	r1, r0
 800c568:	f7f4 fadc 	bl	8000b24 <__addsf3>
 800c56c:	4601      	mov	r1, r0
 800c56e:	480c      	ldr	r0, [pc, #48]	; (800c5a0 <__ieee754_asinf+0x24c>)
 800c570:	f7f4 fad6 	bl	8000b20 <__aeabi_fsub>
 800c574:	4601      	mov	r1, r0
 800c576:	4648      	mov	r0, r9
 800c578:	f7f4 fad2 	bl	8000b20 <__aeabi_fsub>
 800c57c:	4641      	mov	r1, r8
 800c57e:	4604      	mov	r4, r0
 800c580:	4640      	mov	r0, r8
 800c582:	f7f4 facf 	bl	8000b24 <__addsf3>
 800c586:	4601      	mov	r1, r0
 800c588:	4813      	ldr	r0, [pc, #76]	; (800c5d8 <__ieee754_asinf+0x284>)
 800c58a:	f7f4 fac9 	bl	8000b20 <__aeabi_fsub>
 800c58e:	4601      	mov	r1, r0
 800c590:	4620      	mov	r0, r4
 800c592:	f7f4 fac5 	bl	8000b20 <__aeabi_fsub>
 800c596:	4601      	mov	r1, r0
 800c598:	480f      	ldr	r0, [pc, #60]	; (800c5d8 <__ieee754_asinf+0x284>)
 800c59a:	e7b9      	b.n	800c510 <__ieee754_asinf+0x1bc>
 800c59c:	3fc90fdb 	.word	0x3fc90fdb
 800c5a0:	b33bbd2e 	.word	0xb33bbd2e
 800c5a4:	7149f2ca 	.word	0x7149f2ca
 800c5a8:	3811ef08 	.word	0x3811ef08
 800c5ac:	3a4f7f04 	.word	0x3a4f7f04
 800c5b0:	3d241146 	.word	0x3d241146
 800c5b4:	3e4e0aa8 	.word	0x3e4e0aa8
 800c5b8:	3ea6b090 	.word	0x3ea6b090
 800c5bc:	3e2aaaab 	.word	0x3e2aaaab
 800c5c0:	3d9dc62e 	.word	0x3d9dc62e
 800c5c4:	3f303361 	.word	0x3f303361
 800c5c8:	4001572d 	.word	0x4001572d
 800c5cc:	4019d139 	.word	0x4019d139
 800c5d0:	3f799999 	.word	0x3f799999
 800c5d4:	333bbd2e 	.word	0x333bbd2e
 800c5d8:	3f490fdb 	.word	0x3f490fdb

0800c5dc <__ieee754_rem_pio2f>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	4aa0      	ldr	r2, [pc, #640]	; (800c864 <__ieee754_rem_pio2f+0x288>)
 800c5e2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800c5e6:	4296      	cmp	r6, r2
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	4682      	mov	sl, r0
 800c5ec:	b087      	sub	sp, #28
 800c5ee:	dc04      	bgt.n	800c5fa <__ieee754_rem_pio2f+0x1e>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	6008      	str	r0, [r1, #0]
 800c5f4:	604b      	str	r3, [r1, #4]
 800c5f6:	2500      	movs	r5, #0
 800c5f8:	e01a      	b.n	800c630 <__ieee754_rem_pio2f+0x54>
 800c5fa:	4a9b      	ldr	r2, [pc, #620]	; (800c868 <__ieee754_rem_pio2f+0x28c>)
 800c5fc:	4296      	cmp	r6, r2
 800c5fe:	dc4b      	bgt.n	800c698 <__ieee754_rem_pio2f+0xbc>
 800c600:	2800      	cmp	r0, #0
 800c602:	499a      	ldr	r1, [pc, #616]	; (800c86c <__ieee754_rem_pio2f+0x290>)
 800c604:	4f9a      	ldr	r7, [pc, #616]	; (800c870 <__ieee754_rem_pio2f+0x294>)
 800c606:	f026 060f 	bic.w	r6, r6, #15
 800c60a:	dd23      	ble.n	800c654 <__ieee754_rem_pio2f+0x78>
 800c60c:	f7f4 fa88 	bl	8000b20 <__aeabi_fsub>
 800c610:	42be      	cmp	r6, r7
 800c612:	4605      	mov	r5, r0
 800c614:	d010      	beq.n	800c638 <__ieee754_rem_pio2f+0x5c>
 800c616:	4997      	ldr	r1, [pc, #604]	; (800c874 <__ieee754_rem_pio2f+0x298>)
 800c618:	f7f4 fa82 	bl	8000b20 <__aeabi_fsub>
 800c61c:	4601      	mov	r1, r0
 800c61e:	6020      	str	r0, [r4, #0]
 800c620:	4628      	mov	r0, r5
 800c622:	f7f4 fa7d 	bl	8000b20 <__aeabi_fsub>
 800c626:	4993      	ldr	r1, [pc, #588]	; (800c874 <__ieee754_rem_pio2f+0x298>)
 800c628:	f7f4 fa7a 	bl	8000b20 <__aeabi_fsub>
 800c62c:	2501      	movs	r5, #1
 800c62e:	6060      	str	r0, [r4, #4]
 800c630:	4628      	mov	r0, r5
 800c632:	b007      	add	sp, #28
 800c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c638:	498f      	ldr	r1, [pc, #572]	; (800c878 <__ieee754_rem_pio2f+0x29c>)
 800c63a:	f7f4 fa71 	bl	8000b20 <__aeabi_fsub>
 800c63e:	498f      	ldr	r1, [pc, #572]	; (800c87c <__ieee754_rem_pio2f+0x2a0>)
 800c640:	4605      	mov	r5, r0
 800c642:	f7f4 fa6d 	bl	8000b20 <__aeabi_fsub>
 800c646:	4601      	mov	r1, r0
 800c648:	6020      	str	r0, [r4, #0]
 800c64a:	4628      	mov	r0, r5
 800c64c:	f7f4 fa68 	bl	8000b20 <__aeabi_fsub>
 800c650:	498a      	ldr	r1, [pc, #552]	; (800c87c <__ieee754_rem_pio2f+0x2a0>)
 800c652:	e7e9      	b.n	800c628 <__ieee754_rem_pio2f+0x4c>
 800c654:	f7f4 fa66 	bl	8000b24 <__addsf3>
 800c658:	42be      	cmp	r6, r7
 800c65a:	4605      	mov	r5, r0
 800c65c:	d00e      	beq.n	800c67c <__ieee754_rem_pio2f+0xa0>
 800c65e:	4985      	ldr	r1, [pc, #532]	; (800c874 <__ieee754_rem_pio2f+0x298>)
 800c660:	f7f4 fa60 	bl	8000b24 <__addsf3>
 800c664:	4601      	mov	r1, r0
 800c666:	6020      	str	r0, [r4, #0]
 800c668:	4628      	mov	r0, r5
 800c66a:	f7f4 fa59 	bl	8000b20 <__aeabi_fsub>
 800c66e:	4981      	ldr	r1, [pc, #516]	; (800c874 <__ieee754_rem_pio2f+0x298>)
 800c670:	f7f4 fa58 	bl	8000b24 <__addsf3>
 800c674:	f04f 35ff 	mov.w	r5, #4294967295
 800c678:	6060      	str	r0, [r4, #4]
 800c67a:	e7d9      	b.n	800c630 <__ieee754_rem_pio2f+0x54>
 800c67c:	497e      	ldr	r1, [pc, #504]	; (800c878 <__ieee754_rem_pio2f+0x29c>)
 800c67e:	f7f4 fa51 	bl	8000b24 <__addsf3>
 800c682:	497e      	ldr	r1, [pc, #504]	; (800c87c <__ieee754_rem_pio2f+0x2a0>)
 800c684:	4605      	mov	r5, r0
 800c686:	f7f4 fa4d 	bl	8000b24 <__addsf3>
 800c68a:	4601      	mov	r1, r0
 800c68c:	6020      	str	r0, [r4, #0]
 800c68e:	4628      	mov	r0, r5
 800c690:	f7f4 fa46 	bl	8000b20 <__aeabi_fsub>
 800c694:	4979      	ldr	r1, [pc, #484]	; (800c87c <__ieee754_rem_pio2f+0x2a0>)
 800c696:	e7eb      	b.n	800c670 <__ieee754_rem_pio2f+0x94>
 800c698:	4a79      	ldr	r2, [pc, #484]	; (800c880 <__ieee754_rem_pio2f+0x2a4>)
 800c69a:	4296      	cmp	r6, r2
 800c69c:	f300 8091 	bgt.w	800c7c2 <__ieee754_rem_pio2f+0x1e6>
 800c6a0:	f000 fe18 	bl	800d2d4 <fabsf>
 800c6a4:	4977      	ldr	r1, [pc, #476]	; (800c884 <__ieee754_rem_pio2f+0x2a8>)
 800c6a6:	4607      	mov	r7, r0
 800c6a8:	f7f4 fb44 	bl	8000d34 <__aeabi_fmul>
 800c6ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c6b0:	f7f4 fa38 	bl	8000b24 <__addsf3>
 800c6b4:	f7f4 fd1a 	bl	80010ec <__aeabi_f2iz>
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	f7f4 fae7 	bl	8000c8c <__aeabi_i2f>
 800c6be:	496b      	ldr	r1, [pc, #428]	; (800c86c <__ieee754_rem_pio2f+0x290>)
 800c6c0:	4681      	mov	r9, r0
 800c6c2:	f7f4 fb37 	bl	8000d34 <__aeabi_fmul>
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7f4 fa29 	bl	8000b20 <__aeabi_fsub>
 800c6ce:	4969      	ldr	r1, [pc, #420]	; (800c874 <__ieee754_rem_pio2f+0x298>)
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	4648      	mov	r0, r9
 800c6d4:	f7f4 fb2e 	bl	8000d34 <__aeabi_fmul>
 800c6d8:	2d1f      	cmp	r5, #31
 800c6da:	4607      	mov	r7, r0
 800c6dc:	dc0c      	bgt.n	800c6f8 <__ieee754_rem_pio2f+0x11c>
 800c6de:	4a6a      	ldr	r2, [pc, #424]	; (800c888 <__ieee754_rem_pio2f+0x2ac>)
 800c6e0:	1e69      	subs	r1, r5, #1
 800c6e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c6e6:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d004      	beq.n	800c6f8 <__ieee754_rem_pio2f+0x11c>
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	f7f4 fa15 	bl	8000b20 <__aeabi_fsub>
 800c6f6:	e00b      	b.n	800c710 <__ieee754_rem_pio2f+0x134>
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	f7f4 fa10 	bl	8000b20 <__aeabi_fsub>
 800c700:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c704:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800c708:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800c70c:	2e08      	cmp	r6, #8
 800c70e:	dc01      	bgt.n	800c714 <__ieee754_rem_pio2f+0x138>
 800c710:	6020      	str	r0, [r4, #0]
 800c712:	e026      	b.n	800c762 <__ieee754_rem_pio2f+0x186>
 800c714:	4958      	ldr	r1, [pc, #352]	; (800c878 <__ieee754_rem_pio2f+0x29c>)
 800c716:	4648      	mov	r0, r9
 800c718:	f7f4 fb0c 	bl	8000d34 <__aeabi_fmul>
 800c71c:	4607      	mov	r7, r0
 800c71e:	4601      	mov	r1, r0
 800c720:	4640      	mov	r0, r8
 800c722:	f7f4 f9fd 	bl	8000b20 <__aeabi_fsub>
 800c726:	4601      	mov	r1, r0
 800c728:	4606      	mov	r6, r0
 800c72a:	4640      	mov	r0, r8
 800c72c:	f7f4 f9f8 	bl	8000b20 <__aeabi_fsub>
 800c730:	4639      	mov	r1, r7
 800c732:	f7f4 f9f5 	bl	8000b20 <__aeabi_fsub>
 800c736:	4607      	mov	r7, r0
 800c738:	4950      	ldr	r1, [pc, #320]	; (800c87c <__ieee754_rem_pio2f+0x2a0>)
 800c73a:	4648      	mov	r0, r9
 800c73c:	f7f4 fafa 	bl	8000d34 <__aeabi_fmul>
 800c740:	4639      	mov	r1, r7
 800c742:	f7f4 f9ed 	bl	8000b20 <__aeabi_fsub>
 800c746:	4601      	mov	r1, r0
 800c748:	4607      	mov	r7, r0
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7f4 f9e8 	bl	8000b20 <__aeabi_fsub>
 800c750:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c754:	ebab 0b03 	sub.w	fp, fp, r3
 800c758:	f1bb 0f19 	cmp.w	fp, #25
 800c75c:	dc16      	bgt.n	800c78c <__ieee754_rem_pio2f+0x1b0>
 800c75e:	46b0      	mov	r8, r6
 800c760:	6020      	str	r0, [r4, #0]
 800c762:	6826      	ldr	r6, [r4, #0]
 800c764:	4640      	mov	r0, r8
 800c766:	4631      	mov	r1, r6
 800c768:	f7f4 f9da 	bl	8000b20 <__aeabi_fsub>
 800c76c:	4639      	mov	r1, r7
 800c76e:	f7f4 f9d7 	bl	8000b20 <__aeabi_fsub>
 800c772:	f1ba 0f00 	cmp.w	sl, #0
 800c776:	6060      	str	r0, [r4, #4]
 800c778:	f6bf af5a 	bge.w	800c630 <__ieee754_rem_pio2f+0x54>
 800c77c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c780:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c784:	6026      	str	r6, [r4, #0]
 800c786:	6060      	str	r0, [r4, #4]
 800c788:	426d      	negs	r5, r5
 800c78a:	e751      	b.n	800c630 <__ieee754_rem_pio2f+0x54>
 800c78c:	493f      	ldr	r1, [pc, #252]	; (800c88c <__ieee754_rem_pio2f+0x2b0>)
 800c78e:	4648      	mov	r0, r9
 800c790:	f7f4 fad0 	bl	8000d34 <__aeabi_fmul>
 800c794:	4607      	mov	r7, r0
 800c796:	4601      	mov	r1, r0
 800c798:	4630      	mov	r0, r6
 800c79a:	f7f4 f9c1 	bl	8000b20 <__aeabi_fsub>
 800c79e:	4601      	mov	r1, r0
 800c7a0:	4680      	mov	r8, r0
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7f4 f9bc 	bl	8000b20 <__aeabi_fsub>
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f4 f9b9 	bl	8000b20 <__aeabi_fsub>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	4937      	ldr	r1, [pc, #220]	; (800c890 <__ieee754_rem_pio2f+0x2b4>)
 800c7b2:	4648      	mov	r0, r9
 800c7b4:	f7f4 fabe 	bl	8000d34 <__aeabi_fmul>
 800c7b8:	4631      	mov	r1, r6
 800c7ba:	f7f4 f9b1 	bl	8000b20 <__aeabi_fsub>
 800c7be:	4607      	mov	r7, r0
 800c7c0:	e795      	b.n	800c6ee <__ieee754_rem_pio2f+0x112>
 800c7c2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c7c6:	db05      	blt.n	800c7d4 <__ieee754_rem_pio2f+0x1f8>
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	f7f4 f9a9 	bl	8000b20 <__aeabi_fsub>
 800c7ce:	6060      	str	r0, [r4, #4]
 800c7d0:	6020      	str	r0, [r4, #0]
 800c7d2:	e710      	b.n	800c5f6 <__ieee754_rem_pio2f+0x1a>
 800c7d4:	15f7      	asrs	r7, r6, #23
 800c7d6:	3f86      	subs	r7, #134	; 0x86
 800c7d8:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7f4 fc85 	bl	80010ec <__aeabi_f2iz>
 800c7e2:	f7f4 fa53 	bl	8000c8c <__aeabi_i2f>
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	9003      	str	r0, [sp, #12]
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7f4 f998 	bl	8000b20 <__aeabi_fsub>
 800c7f0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c7f4:	f7f4 fa9e 	bl	8000d34 <__aeabi_fmul>
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	f7f4 fc77 	bl	80010ec <__aeabi_f2iz>
 800c7fe:	f7f4 fa45 	bl	8000c8c <__aeabi_i2f>
 800c802:	4601      	mov	r1, r0
 800c804:	9004      	str	r0, [sp, #16]
 800c806:	4605      	mov	r5, r0
 800c808:	4630      	mov	r0, r6
 800c80a:	f7f4 f989 	bl	8000b20 <__aeabi_fsub>
 800c80e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c812:	f7f4 fa8f 	bl	8000d34 <__aeabi_fmul>
 800c816:	2100      	movs	r1, #0
 800c818:	9005      	str	r0, [sp, #20]
 800c81a:	f7f4 fc1f 	bl	800105c <__aeabi_fcmpeq>
 800c81e:	b1f0      	cbz	r0, 800c85e <__ieee754_rem_pio2f+0x282>
 800c820:	2100      	movs	r1, #0
 800c822:	4628      	mov	r0, r5
 800c824:	f7f4 fc1a 	bl	800105c <__aeabi_fcmpeq>
 800c828:	2800      	cmp	r0, #0
 800c82a:	bf14      	ite	ne
 800c82c:	2301      	movne	r3, #1
 800c82e:	2302      	moveq	r3, #2
 800c830:	4a18      	ldr	r2, [pc, #96]	; (800c894 <__ieee754_rem_pio2f+0x2b8>)
 800c832:	4621      	mov	r1, r4
 800c834:	9201      	str	r2, [sp, #4]
 800c836:	2202      	movs	r2, #2
 800c838:	a803      	add	r0, sp, #12
 800c83a:	9200      	str	r2, [sp, #0]
 800c83c:	463a      	mov	r2, r7
 800c83e:	f000 f8fd 	bl	800ca3c <__kernel_rem_pio2f>
 800c842:	f1ba 0f00 	cmp.w	sl, #0
 800c846:	4605      	mov	r5, r0
 800c848:	f6bf aef2 	bge.w	800c630 <__ieee754_rem_pio2f+0x54>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c852:	6023      	str	r3, [r4, #0]
 800c854:	6863      	ldr	r3, [r4, #4]
 800c856:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c85a:	6063      	str	r3, [r4, #4]
 800c85c:	e794      	b.n	800c788 <__ieee754_rem_pio2f+0x1ac>
 800c85e:	2303      	movs	r3, #3
 800c860:	e7e6      	b.n	800c830 <__ieee754_rem_pio2f+0x254>
 800c862:	bf00      	nop
 800c864:	3f490fd8 	.word	0x3f490fd8
 800c868:	4016cbe3 	.word	0x4016cbe3
 800c86c:	3fc90f80 	.word	0x3fc90f80
 800c870:	3fc90fd0 	.word	0x3fc90fd0
 800c874:	37354443 	.word	0x37354443
 800c878:	37354400 	.word	0x37354400
 800c87c:	2e85a308 	.word	0x2e85a308
 800c880:	43490f80 	.word	0x43490f80
 800c884:	3f22f984 	.word	0x3f22f984
 800c888:	0800d7a8 	.word	0x0800d7a8
 800c88c:	2e85a300 	.word	0x2e85a300
 800c890:	248d3132 	.word	0x248d3132
 800c894:	0800d828 	.word	0x0800d828

0800c898 <__ieee754_sqrtf>:
 800c898:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c89c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	d309      	bcc.n	800c8bc <__ieee754_sqrtf+0x24>
 800c8a8:	4601      	mov	r1, r0
 800c8aa:	f7f4 fa43 	bl	8000d34 <__aeabi_fmul>
 800c8ae:	4601      	mov	r1, r0
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7f4 f937 	bl	8000b24 <__addsf3>
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	d0fb      	beq.n	800c8b8 <__ieee754_sqrtf+0x20>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	da06      	bge.n	800c8d2 <__ieee754_sqrtf+0x3a>
 800c8c4:	4601      	mov	r1, r0
 800c8c6:	f7f4 f92b 	bl	8000b20 <__aeabi_fsub>
 800c8ca:	4601      	mov	r1, r0
 800c8cc:	f7f4 fae6 	bl	8000e9c <__aeabi_fdiv>
 800c8d0:	e7f1      	b.n	800c8b6 <__ieee754_sqrtf+0x1e>
 800c8d2:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c8d6:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c8da:	d029      	beq.n	800c930 <__ieee754_sqrtf+0x98>
 800c8dc:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c8e0:	07cb      	lsls	r3, r1, #31
 800c8e2:	f04f 0300 	mov.w	r3, #0
 800c8e6:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c8ea:	f04f 0419 	mov.w	r4, #25
 800c8ee:	461e      	mov	r6, r3
 800c8f0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c8f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c8f8:	bf58      	it	pl
 800c8fa:	0052      	lslpl	r2, r2, #1
 800c8fc:	1040      	asrs	r0, r0, #1
 800c8fe:	0052      	lsls	r2, r2, #1
 800c900:	1875      	adds	r5, r6, r1
 800c902:	4295      	cmp	r5, r2
 800c904:	bfde      	ittt	le
 800c906:	186e      	addle	r6, r5, r1
 800c908:	1b52      	suble	r2, r2, r5
 800c90a:	185b      	addle	r3, r3, r1
 800c90c:	3c01      	subs	r4, #1
 800c90e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c912:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c916:	d1f3      	bne.n	800c900 <__ieee754_sqrtf+0x68>
 800c918:	b112      	cbz	r2, 800c920 <__ieee754_sqrtf+0x88>
 800c91a:	3301      	adds	r3, #1
 800c91c:	f023 0301 	bic.w	r3, r3, #1
 800c920:	105c      	asrs	r4, r3, #1
 800c922:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c926:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c92a:	e7c5      	b.n	800c8b8 <__ieee754_sqrtf+0x20>
 800c92c:	005b      	lsls	r3, r3, #1
 800c92e:	3201      	adds	r2, #1
 800c930:	0218      	lsls	r0, r3, #8
 800c932:	d5fb      	bpl.n	800c92c <__ieee754_sqrtf+0x94>
 800c934:	3a01      	subs	r2, #1
 800c936:	1a89      	subs	r1, r1, r2
 800c938:	e7d0      	b.n	800c8dc <__ieee754_sqrtf+0x44>
	...

0800c93c <__kernel_cosf>:
 800c93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c940:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800c944:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800c948:	4606      	mov	r6, r0
 800c94a:	4688      	mov	r8, r1
 800c94c:	da03      	bge.n	800c956 <__kernel_cosf+0x1a>
 800c94e:	f7f4 fbcd 	bl	80010ec <__aeabi_f2iz>
 800c952:	2800      	cmp	r0, #0
 800c954:	d05c      	beq.n	800ca10 <__kernel_cosf+0xd4>
 800c956:	4631      	mov	r1, r6
 800c958:	4630      	mov	r0, r6
 800c95a:	f7f4 f9eb 	bl	8000d34 <__aeabi_fmul>
 800c95e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c962:	4605      	mov	r5, r0
 800c964:	f7f4 f9e6 	bl	8000d34 <__aeabi_fmul>
 800c968:	492b      	ldr	r1, [pc, #172]	; (800ca18 <__kernel_cosf+0xdc>)
 800c96a:	4607      	mov	r7, r0
 800c96c:	4628      	mov	r0, r5
 800c96e:	f7f4 f9e1 	bl	8000d34 <__aeabi_fmul>
 800c972:	492a      	ldr	r1, [pc, #168]	; (800ca1c <__kernel_cosf+0xe0>)
 800c974:	f7f4 f8d6 	bl	8000b24 <__addsf3>
 800c978:	4629      	mov	r1, r5
 800c97a:	f7f4 f9db 	bl	8000d34 <__aeabi_fmul>
 800c97e:	4928      	ldr	r1, [pc, #160]	; (800ca20 <__kernel_cosf+0xe4>)
 800c980:	f7f4 f8ce 	bl	8000b20 <__aeabi_fsub>
 800c984:	4629      	mov	r1, r5
 800c986:	f7f4 f9d5 	bl	8000d34 <__aeabi_fmul>
 800c98a:	4926      	ldr	r1, [pc, #152]	; (800ca24 <__kernel_cosf+0xe8>)
 800c98c:	f7f4 f8ca 	bl	8000b24 <__addsf3>
 800c990:	4629      	mov	r1, r5
 800c992:	f7f4 f9cf 	bl	8000d34 <__aeabi_fmul>
 800c996:	4924      	ldr	r1, [pc, #144]	; (800ca28 <__kernel_cosf+0xec>)
 800c998:	f7f4 f8c2 	bl	8000b20 <__aeabi_fsub>
 800c99c:	4629      	mov	r1, r5
 800c99e:	f7f4 f9c9 	bl	8000d34 <__aeabi_fmul>
 800c9a2:	4922      	ldr	r1, [pc, #136]	; (800ca2c <__kernel_cosf+0xf0>)
 800c9a4:	f7f4 f8be 	bl	8000b24 <__addsf3>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f7f4 f9c3 	bl	8000d34 <__aeabi_fmul>
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	f7f4 f9c0 	bl	8000d34 <__aeabi_fmul>
 800c9b4:	4641      	mov	r1, r8
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f7f4 f9bb 	bl	8000d34 <__aeabi_fmul>
 800c9be:	4601      	mov	r1, r0
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f7f4 f8ad 	bl	8000b20 <__aeabi_fsub>
 800c9c6:	4b1a      	ldr	r3, [pc, #104]	; (800ca30 <__kernel_cosf+0xf4>)
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	429c      	cmp	r4, r3
 800c9cc:	dc0a      	bgt.n	800c9e4 <__kernel_cosf+0xa8>
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7f4 f8a5 	bl	8000b20 <__aeabi_fsub>
 800c9d6:	4601      	mov	r1, r0
 800c9d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c9dc:	f7f4 f8a0 	bl	8000b20 <__aeabi_fsub>
 800c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e4:	4b13      	ldr	r3, [pc, #76]	; (800ca34 <__kernel_cosf+0xf8>)
 800c9e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c9ea:	429c      	cmp	r4, r3
 800c9ec:	bfcc      	ite	gt
 800c9ee:	4c12      	ldrgt	r4, [pc, #72]	; (800ca38 <__kernel_cosf+0xfc>)
 800c9f0:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	f7f4 f893 	bl	8000b20 <__aeabi_fsub>
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	4638      	mov	r0, r7
 800ca00:	f7f4 f88e 	bl	8000b20 <__aeabi_fsub>
 800ca04:	4629      	mov	r1, r5
 800ca06:	f7f4 f88b 	bl	8000b20 <__aeabi_fsub>
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	e7e5      	b.n	800c9dc <__kernel_cosf+0xa0>
 800ca10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ca14:	e7e4      	b.n	800c9e0 <__kernel_cosf+0xa4>
 800ca16:	bf00      	nop
 800ca18:	ad47d74e 	.word	0xad47d74e
 800ca1c:	310f74f6 	.word	0x310f74f6
 800ca20:	3493f27c 	.word	0x3493f27c
 800ca24:	37d00d01 	.word	0x37d00d01
 800ca28:	3ab60b61 	.word	0x3ab60b61
 800ca2c:	3d2aaaab 	.word	0x3d2aaaab
 800ca30:	3e999999 	.word	0x3e999999
 800ca34:	3f480000 	.word	0x3f480000
 800ca38:	3e900000 	.word	0x3e900000

0800ca3c <__kernel_rem_pio2f>:
 800ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	b0db      	sub	sp, #364	; 0x16c
 800ca42:	9202      	str	r2, [sp, #8]
 800ca44:	9304      	str	r3, [sp, #16]
 800ca46:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ca48:	4bc5      	ldr	r3, [pc, #788]	; (800cd60 <__kernel_rem_pio2f+0x324>)
 800ca4a:	9005      	str	r0, [sp, #20]
 800ca4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca50:	9100      	str	r1, [sp, #0]
 800ca52:	9301      	str	r3, [sp, #4]
 800ca54:	9b04      	ldr	r3, [sp, #16]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	9303      	str	r3, [sp, #12]
 800ca5a:	9b02      	ldr	r3, [sp, #8]
 800ca5c:	1d1a      	adds	r2, r3, #4
 800ca5e:	f2c0 809b 	blt.w	800cb98 <__kernel_rem_pio2f+0x15c>
 800ca62:	1edc      	subs	r4, r3, #3
 800ca64:	bf48      	it	mi
 800ca66:	1d1c      	addmi	r4, r3, #4
 800ca68:	10e4      	asrs	r4, r4, #3
 800ca6a:	2500      	movs	r5, #0
 800ca6c:	f04f 0a00 	mov.w	sl, #0
 800ca70:	1c67      	adds	r7, r4, #1
 800ca72:	00fb      	lsls	r3, r7, #3
 800ca74:	9306      	str	r3, [sp, #24]
 800ca76:	9b02      	ldr	r3, [sp, #8]
 800ca78:	9a03      	ldr	r2, [sp, #12]
 800ca7a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800ca7e:	9b01      	ldr	r3, [sp, #4]
 800ca80:	1aa6      	subs	r6, r4, r2
 800ca82:	eb03 0802 	add.w	r8, r3, r2
 800ca86:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ca88:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800ca8c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800ca90:	4545      	cmp	r5, r8
 800ca92:	f340 8083 	ble.w	800cb9c <__kernel_rem_pio2f+0x160>
 800ca96:	f04f 0800 	mov.w	r8, #0
 800ca9a:	f04f 0b00 	mov.w	fp, #0
 800ca9e:	9b04      	ldr	r3, [sp, #16]
 800caa0:	aa1e      	add	r2, sp, #120	; 0x78
 800caa2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800caa6:	ab46      	add	r3, sp, #280	; 0x118
 800caa8:	9a01      	ldr	r2, [sp, #4]
 800caaa:	4590      	cmp	r8, r2
 800caac:	f340 809c 	ble.w	800cbe8 <__kernel_rem_pio2f+0x1ac>
 800cab0:	4613      	mov	r3, r2
 800cab2:	aa0a      	add	r2, sp, #40	; 0x28
 800cab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cab8:	9308      	str	r3, [sp, #32]
 800caba:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800cabc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cac0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cac4:	9307      	str	r3, [sp, #28]
 800cac6:	ad0a      	add	r5, sp, #40	; 0x28
 800cac8:	462e      	mov	r6, r5
 800caca:	46c3      	mov	fp, r8
 800cacc:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800cad0:	ab5a      	add	r3, sp, #360	; 0x168
 800cad2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800cad6:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800cada:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800cade:	f1bb 0f00 	cmp.w	fp, #0
 800cae2:	f300 8086 	bgt.w	800cbf2 <__kernel_rem_pio2f+0x1b6>
 800cae6:	4639      	mov	r1, r7
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 fc3d 	bl	800d368 <scalbnf>
 800caee:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800caf2:	4604      	mov	r4, r0
 800caf4:	f7f4 f91e 	bl	8000d34 <__aeabi_fmul>
 800caf8:	f000 fbf0 	bl	800d2dc <floorf>
 800cafc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800cb00:	f7f4 f918 	bl	8000d34 <__aeabi_fmul>
 800cb04:	4601      	mov	r1, r0
 800cb06:	4620      	mov	r0, r4
 800cb08:	f7f4 f80a 	bl	8000b20 <__aeabi_fsub>
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	f7f4 faed 	bl	80010ec <__aeabi_f2iz>
 800cb12:	4606      	mov	r6, r0
 800cb14:	f7f4 f8ba 	bl	8000c8c <__aeabi_i2f>
 800cb18:	4601      	mov	r1, r0
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f7f4 f800 	bl	8000b20 <__aeabi_fsub>
 800cb20:	2f00      	cmp	r7, #0
 800cb22:	4681      	mov	r9, r0
 800cb24:	f340 8084 	ble.w	800cc30 <__kernel_rem_pio2f+0x1f4>
 800cb28:	f108 32ff 	add.w	r2, r8, #4294967295
 800cb2c:	ab0a      	add	r3, sp, #40	; 0x28
 800cb2e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800cb32:	f1c7 0108 	rsb	r1, r7, #8
 800cb36:	fa44 f301 	asr.w	r3, r4, r1
 800cb3a:	441e      	add	r6, r3
 800cb3c:	408b      	lsls	r3, r1
 800cb3e:	1ae4      	subs	r4, r4, r3
 800cb40:	f1c7 0007 	rsb	r0, r7, #7
 800cb44:	ab0a      	add	r3, sp, #40	; 0x28
 800cb46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb4a:	4104      	asrs	r4, r0
 800cb4c:	2c00      	cmp	r4, #0
 800cb4e:	dd7e      	ble.n	800cc4e <__kernel_rem_pio2f+0x212>
 800cb50:	2200      	movs	r2, #0
 800cb52:	4692      	mov	sl, r2
 800cb54:	3601      	adds	r6, #1
 800cb56:	4590      	cmp	r8, r2
 800cb58:	f300 80b0 	bgt.w	800ccbc <__kernel_rem_pio2f+0x280>
 800cb5c:	2f00      	cmp	r7, #0
 800cb5e:	dd05      	ble.n	800cb6c <__kernel_rem_pio2f+0x130>
 800cb60:	2f01      	cmp	r7, #1
 800cb62:	f000 80bd 	beq.w	800cce0 <__kernel_rem_pio2f+0x2a4>
 800cb66:	2f02      	cmp	r7, #2
 800cb68:	f000 80c5 	beq.w	800ccf6 <__kernel_rem_pio2f+0x2ba>
 800cb6c:	2c02      	cmp	r4, #2
 800cb6e:	d16e      	bne.n	800cc4e <__kernel_rem_pio2f+0x212>
 800cb70:	4649      	mov	r1, r9
 800cb72:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cb76:	f7f3 ffd3 	bl	8000b20 <__aeabi_fsub>
 800cb7a:	4681      	mov	r9, r0
 800cb7c:	f1ba 0f00 	cmp.w	sl, #0
 800cb80:	d065      	beq.n	800cc4e <__kernel_rem_pio2f+0x212>
 800cb82:	4639      	mov	r1, r7
 800cb84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cb88:	f000 fbee 	bl	800d368 <scalbnf>
 800cb8c:	4601      	mov	r1, r0
 800cb8e:	4648      	mov	r0, r9
 800cb90:	f7f3 ffc6 	bl	8000b20 <__aeabi_fsub>
 800cb94:	4681      	mov	r9, r0
 800cb96:	e05a      	b.n	800cc4e <__kernel_rem_pio2f+0x212>
 800cb98:	2400      	movs	r4, #0
 800cb9a:	e766      	b.n	800ca6a <__kernel_rem_pio2f+0x2e>
 800cb9c:	42ee      	cmn	r6, r5
 800cb9e:	d407      	bmi.n	800cbb0 <__kernel_rem_pio2f+0x174>
 800cba0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cba4:	f7f4 f872 	bl	8000c8c <__aeabi_i2f>
 800cba8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800cbac:	3501      	adds	r5, #1
 800cbae:	e76f      	b.n	800ca90 <__kernel_rem_pio2f+0x54>
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	e7f9      	b.n	800cba8 <__kernel_rem_pio2f+0x16c>
 800cbb4:	9b05      	ldr	r3, [sp, #20]
 800cbb6:	f8da 1000 	ldr.w	r1, [sl]
 800cbba:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800cbbe:	f7f4 f8b9 	bl	8000d34 <__aeabi_fmul>
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7f3 ffad 	bl	8000b24 <__addsf3>
 800cbca:	4606      	mov	r6, r0
 800cbcc:	f109 0901 	add.w	r9, r9, #1
 800cbd0:	ab46      	add	r3, sp, #280	; 0x118
 800cbd2:	9a03      	ldr	r2, [sp, #12]
 800cbd4:	f1aa 0a04 	sub.w	sl, sl, #4
 800cbd8:	4591      	cmp	r9, r2
 800cbda:	ddeb      	ble.n	800cbb4 <__kernel_rem_pio2f+0x178>
 800cbdc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800cbe0:	3504      	adds	r5, #4
 800cbe2:	f108 0801 	add.w	r8, r8, #1
 800cbe6:	e75f      	b.n	800caa8 <__kernel_rem_pio2f+0x6c>
 800cbe8:	46aa      	mov	sl, r5
 800cbea:	465e      	mov	r6, fp
 800cbec:	f04f 0900 	mov.w	r9, #0
 800cbf0:	e7ef      	b.n	800cbd2 <__kernel_rem_pio2f+0x196>
 800cbf2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f7f4 f89c 	bl	8000d34 <__aeabi_fmul>
 800cbfc:	f7f4 fa76 	bl	80010ec <__aeabi_f2iz>
 800cc00:	f7f4 f844 	bl	8000c8c <__aeabi_i2f>
 800cc04:	4649      	mov	r1, r9
 800cc06:	9009      	str	r0, [sp, #36]	; 0x24
 800cc08:	f7f4 f894 	bl	8000d34 <__aeabi_fmul>
 800cc0c:	4601      	mov	r1, r0
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f7f3 ff86 	bl	8000b20 <__aeabi_fsub>
 800cc14:	f7f4 fa6a 	bl	80010ec <__aeabi_f2iz>
 800cc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc1e:	f846 0b04 	str.w	r0, [r6], #4
 800cc22:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7f3 ff7c 	bl	8000b24 <__addsf3>
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	e756      	b.n	800cade <__kernel_rem_pio2f+0xa2>
 800cc30:	d106      	bne.n	800cc40 <__kernel_rem_pio2f+0x204>
 800cc32:	f108 33ff 	add.w	r3, r8, #4294967295
 800cc36:	aa0a      	add	r2, sp, #40	; 0x28
 800cc38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc3c:	1224      	asrs	r4, r4, #8
 800cc3e:	e785      	b.n	800cb4c <__kernel_rem_pio2f+0x110>
 800cc40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800cc44:	f7f4 fa28 	bl	8001098 <__aeabi_fcmpge>
 800cc48:	4604      	mov	r4, r0
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d134      	bne.n	800ccb8 <__kernel_rem_pio2f+0x27c>
 800cc4e:	2100      	movs	r1, #0
 800cc50:	4648      	mov	r0, r9
 800cc52:	f7f4 fa03 	bl	800105c <__aeabi_fcmpeq>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	f000 809a 	beq.w	800cd90 <__kernel_rem_pio2f+0x354>
 800cc5c:	f108 35ff 	add.w	r5, r8, #4294967295
 800cc60:	462b      	mov	r3, r5
 800cc62:	2200      	movs	r2, #0
 800cc64:	9901      	ldr	r1, [sp, #4]
 800cc66:	428b      	cmp	r3, r1
 800cc68:	da4d      	bge.n	800cd06 <__kernel_rem_pio2f+0x2ca>
 800cc6a:	2a00      	cmp	r2, #0
 800cc6c:	d07c      	beq.n	800cd68 <__kernel_rem_pio2f+0x32c>
 800cc6e:	ab0a      	add	r3, sp, #40	; 0x28
 800cc70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cc74:	3f08      	subs	r7, #8
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 8088 	beq.w	800cd8c <__kernel_rem_pio2f+0x350>
 800cc7c:	4639      	mov	r1, r7
 800cc7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cc82:	f000 fb71 	bl	800d368 <scalbnf>
 800cc86:	46aa      	mov	sl, r5
 800cc88:	4681      	mov	r9, r0
 800cc8a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800cc8e:	af46      	add	r7, sp, #280	; 0x118
 800cc90:	f1ba 0f00 	cmp.w	sl, #0
 800cc94:	f280 80b1 	bge.w	800cdfa <__kernel_rem_pio2f+0x3be>
 800cc98:	46a9      	mov	r9, r5
 800cc9a:	f04f 0a00 	mov.w	sl, #0
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f1b9 0f00 	cmp.w	r9, #0
 800cca4:	f2c0 80db 	blt.w	800ce5e <__kernel_rem_pio2f+0x422>
 800cca8:	a946      	add	r1, sp, #280	; 0x118
 800ccaa:	4617      	mov	r7, r2
 800ccac:	f04f 0800 	mov.w	r8, #0
 800ccb0:	4b2c      	ldr	r3, [pc, #176]	; (800cd64 <__kernel_rem_pio2f+0x328>)
 800ccb2:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800ccb6:	e0c3      	b.n	800ce40 <__kernel_rem_pio2f+0x404>
 800ccb8:	2402      	movs	r4, #2
 800ccba:	e749      	b.n	800cb50 <__kernel_rem_pio2f+0x114>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	f1ba 0f00 	cmp.w	sl, #0
 800ccc2:	d108      	bne.n	800ccd6 <__kernel_rem_pio2f+0x29a>
 800ccc4:	b11b      	cbz	r3, 800ccce <__kernel_rem_pio2f+0x292>
 800ccc6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	2301      	movs	r3, #1
 800ccce:	469a      	mov	sl, r3
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	3504      	adds	r5, #4
 800ccd4:	e73f      	b.n	800cb56 <__kernel_rem_pio2f+0x11a>
 800ccd6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ccda:	602b      	str	r3, [r5, #0]
 800ccdc:	4653      	mov	r3, sl
 800ccde:	e7f6      	b.n	800ccce <__kernel_rem_pio2f+0x292>
 800cce0:	f108 32ff 	add.w	r2, r8, #4294967295
 800cce4:	ab0a      	add	r3, sp, #40	; 0x28
 800cce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccee:	a90a      	add	r1, sp, #40	; 0x28
 800ccf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ccf4:	e73a      	b.n	800cb6c <__kernel_rem_pio2f+0x130>
 800ccf6:	f108 32ff 	add.w	r2, r8, #4294967295
 800ccfa:	ab0a      	add	r3, sp, #40	; 0x28
 800ccfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd04:	e7f3      	b.n	800ccee <__kernel_rem_pio2f+0x2b2>
 800cd06:	a90a      	add	r1, sp, #40	; 0x28
 800cd08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	430a      	orrs	r2, r1
 800cd10:	e7a8      	b.n	800cc64 <__kernel_rem_pio2f+0x228>
 800cd12:	3301      	adds	r3, #1
 800cd14:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cd18:	2900      	cmp	r1, #0
 800cd1a:	d0fa      	beq.n	800cd12 <__kernel_rem_pio2f+0x2d6>
 800cd1c:	9a04      	ldr	r2, [sp, #16]
 800cd1e:	f108 0501 	add.w	r5, r8, #1
 800cd22:	eb08 0402 	add.w	r4, r8, r2
 800cd26:	aa1e      	add	r2, sp, #120	; 0x78
 800cd28:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800cd2c:	4498      	add	r8, r3
 800cd2e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800cd32:	45a8      	cmp	r8, r5
 800cd34:	f6ff aec7 	blt.w	800cac6 <__kernel_rem_pio2f+0x8a>
 800cd38:	9b07      	ldr	r3, [sp, #28]
 800cd3a:	46a3      	mov	fp, r4
 800cd3c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd40:	f7f3 ffa4 	bl	8000c8c <__aeabi_i2f>
 800cd44:	f04f 0a00 	mov.w	sl, #0
 800cd48:	2600      	movs	r6, #0
 800cd4a:	f84b 0b04 	str.w	r0, [fp], #4
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	459a      	cmp	sl, r3
 800cd52:	dd0c      	ble.n	800cd6e <__kernel_rem_pio2f+0x332>
 800cd54:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800cd58:	465c      	mov	r4, fp
 800cd5a:	3501      	adds	r5, #1
 800cd5c:	e7e9      	b.n	800cd32 <__kernel_rem_pio2f+0x2f6>
 800cd5e:	bf00      	nop
 800cd60:	0800db6c 	.word	0x0800db6c
 800cd64:	0800db40 	.word	0x0800db40
 800cd68:	2301      	movs	r3, #1
 800cd6a:	9a08      	ldr	r2, [sp, #32]
 800cd6c:	e7d2      	b.n	800cd14 <__kernel_rem_pio2f+0x2d8>
 800cd6e:	9b05      	ldr	r3, [sp, #20]
 800cd70:	f854 0904 	ldr.w	r0, [r4], #-4
 800cd74:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800cd78:	f7f3 ffdc 	bl	8000d34 <__aeabi_fmul>
 800cd7c:	4601      	mov	r1, r0
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f7f3 fed0 	bl	8000b24 <__addsf3>
 800cd84:	f10a 0a01 	add.w	sl, sl, #1
 800cd88:	4606      	mov	r6, r0
 800cd8a:	e7e0      	b.n	800cd4e <__kernel_rem_pio2f+0x312>
 800cd8c:	3d01      	subs	r5, #1
 800cd8e:	e76e      	b.n	800cc6e <__kernel_rem_pio2f+0x232>
 800cd90:	9b06      	ldr	r3, [sp, #24]
 800cd92:	9a02      	ldr	r2, [sp, #8]
 800cd94:	4648      	mov	r0, r9
 800cd96:	1a99      	subs	r1, r3, r2
 800cd98:	f000 fae6 	bl	800d368 <scalbnf>
 800cd9c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800cda0:	4605      	mov	r5, r0
 800cda2:	f7f4 f979 	bl	8001098 <__aeabi_fcmpge>
 800cda6:	b300      	cbz	r0, 800cdea <__kernel_rem_pio2f+0x3ae>
 800cda8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800cdac:	4628      	mov	r0, r5
 800cdae:	f7f3 ffc1 	bl	8000d34 <__aeabi_fmul>
 800cdb2:	f7f4 f99b 	bl	80010ec <__aeabi_f2iz>
 800cdb6:	f7f3 ff69 	bl	8000c8c <__aeabi_i2f>
 800cdba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800cdbe:	4681      	mov	r9, r0
 800cdc0:	f7f3 ffb8 	bl	8000d34 <__aeabi_fmul>
 800cdc4:	4601      	mov	r1, r0
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f7f3 feaa 	bl	8000b20 <__aeabi_fsub>
 800cdcc:	f7f4 f98e 	bl	80010ec <__aeabi_f2iz>
 800cdd0:	ab0a      	add	r3, sp, #40	; 0x28
 800cdd2:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cdd6:	4648      	mov	r0, r9
 800cdd8:	f7f4 f988 	bl	80010ec <__aeabi_f2iz>
 800cddc:	f108 0501 	add.w	r5, r8, #1
 800cde0:	ab0a      	add	r3, sp, #40	; 0x28
 800cde2:	3708      	adds	r7, #8
 800cde4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800cde8:	e748      	b.n	800cc7c <__kernel_rem_pio2f+0x240>
 800cdea:	4628      	mov	r0, r5
 800cdec:	f7f4 f97e 	bl	80010ec <__aeabi_f2iz>
 800cdf0:	ab0a      	add	r3, sp, #40	; 0x28
 800cdf2:	4645      	mov	r5, r8
 800cdf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cdf8:	e740      	b.n	800cc7c <__kernel_rem_pio2f+0x240>
 800cdfa:	ab0a      	add	r3, sp, #40	; 0x28
 800cdfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ce00:	f7f3 ff44 	bl	8000c8c <__aeabi_i2f>
 800ce04:	4649      	mov	r1, r9
 800ce06:	f7f3 ff95 	bl	8000d34 <__aeabi_fmul>
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800ce10:	4648      	mov	r0, r9
 800ce12:	f7f3 ff8f 	bl	8000d34 <__aeabi_fmul>
 800ce16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	e738      	b.n	800cc90 <__kernel_rem_pio2f+0x254>
 800ce1e:	f853 0b04 	ldr.w	r0, [r3], #4
 800ce22:	f85b 1b04 	ldr.w	r1, [fp], #4
 800ce26:	9203      	str	r2, [sp, #12]
 800ce28:	9302      	str	r3, [sp, #8]
 800ce2a:	f7f3 ff83 	bl	8000d34 <__aeabi_fmul>
 800ce2e:	4601      	mov	r1, r0
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7f3 fe77 	bl	8000b24 <__addsf3>
 800ce36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	f108 0801 	add.w	r8, r8, #1
 800ce40:	9901      	ldr	r1, [sp, #4]
 800ce42:	4588      	cmp	r8, r1
 800ce44:	dc01      	bgt.n	800ce4a <__kernel_rem_pio2f+0x40e>
 800ce46:	45c2      	cmp	sl, r8
 800ce48:	dae9      	bge.n	800ce1e <__kernel_rem_pio2f+0x3e2>
 800ce4a:	ab5a      	add	r3, sp, #360	; 0x168
 800ce4c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ce50:	f843 7ca0 	str.w	r7, [r3, #-160]
 800ce54:	f109 39ff 	add.w	r9, r9, #4294967295
 800ce58:	f10a 0a01 	add.w	sl, sl, #1
 800ce5c:	e720      	b.n	800cca0 <__kernel_rem_pio2f+0x264>
 800ce5e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	dc07      	bgt.n	800ce74 <__kernel_rem_pio2f+0x438>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dc4d      	bgt.n	800cf04 <__kernel_rem_pio2f+0x4c8>
 800ce68:	d02e      	beq.n	800cec8 <__kernel_rem_pio2f+0x48c>
 800ce6a:	f006 0007 	and.w	r0, r6, #7
 800ce6e:	b05b      	add	sp, #364	; 0x16c
 800ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce74:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	d1f7      	bne.n	800ce6a <__kernel_rem_pio2f+0x42e>
 800ce7a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800ce7e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800ce82:	46b8      	mov	r8, r7
 800ce84:	46aa      	mov	sl, r5
 800ce86:	f1ba 0f00 	cmp.w	sl, #0
 800ce8a:	dc48      	bgt.n	800cf1e <__kernel_rem_pio2f+0x4e2>
 800ce8c:	46a9      	mov	r9, r5
 800ce8e:	f1b9 0f01 	cmp.w	r9, #1
 800ce92:	dc5f      	bgt.n	800cf54 <__kernel_rem_pio2f+0x518>
 800ce94:	2000      	movs	r0, #0
 800ce96:	2d01      	cmp	r5, #1
 800ce98:	dc75      	bgt.n	800cf86 <__kernel_rem_pio2f+0x54a>
 800ce9a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ce9c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800ce9e:	2c00      	cmp	r4, #0
 800cea0:	d177      	bne.n	800cf92 <__kernel_rem_pio2f+0x556>
 800cea2:	9900      	ldr	r1, [sp, #0]
 800cea4:	600a      	str	r2, [r1, #0]
 800cea6:	460a      	mov	r2, r1
 800cea8:	604b      	str	r3, [r1, #4]
 800ceaa:	6090      	str	r0, [r2, #8]
 800ceac:	e7dd      	b.n	800ce6a <__kernel_rem_pio2f+0x42e>
 800ceae:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800ceb2:	f7f3 fe37 	bl	8000b24 <__addsf3>
 800ceb6:	3d01      	subs	r5, #1
 800ceb8:	2d00      	cmp	r5, #0
 800ceba:	daf8      	bge.n	800ceae <__kernel_rem_pio2f+0x472>
 800cebc:	b10c      	cbz	r4, 800cec2 <__kernel_rem_pio2f+0x486>
 800cebe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cec2:	9b00      	ldr	r3, [sp, #0]
 800cec4:	6018      	str	r0, [r3, #0]
 800cec6:	e7d0      	b.n	800ce6a <__kernel_rem_pio2f+0x42e>
 800cec8:	2000      	movs	r0, #0
 800ceca:	af32      	add	r7, sp, #200	; 0xc8
 800cecc:	e7f4      	b.n	800ceb8 <__kernel_rem_pio2f+0x47c>
 800cece:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800ced2:	f7f3 fe27 	bl	8000b24 <__addsf3>
 800ced6:	3f01      	subs	r7, #1
 800ced8:	2f00      	cmp	r7, #0
 800ceda:	daf8      	bge.n	800cece <__kernel_rem_pio2f+0x492>
 800cedc:	b1bc      	cbz	r4, 800cf0e <__kernel_rem_pio2f+0x4d2>
 800cede:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800cee2:	9a00      	ldr	r2, [sp, #0]
 800cee4:	4601      	mov	r1, r0
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800ceea:	f7f3 fe19 	bl	8000b20 <__aeabi_fsub>
 800ceee:	2701      	movs	r7, #1
 800cef0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800cef4:	42bd      	cmp	r5, r7
 800cef6:	da0c      	bge.n	800cf12 <__kernel_rem_pio2f+0x4d6>
 800cef8:	b10c      	cbz	r4, 800cefe <__kernel_rem_pio2f+0x4c2>
 800cefa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cefe:	9b00      	ldr	r3, [sp, #0]
 800cf00:	6058      	str	r0, [r3, #4]
 800cf02:	e7b2      	b.n	800ce6a <__kernel_rem_pio2f+0x42e>
 800cf04:	462f      	mov	r7, r5
 800cf06:	2000      	movs	r0, #0
 800cf08:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800cf0c:	e7e4      	b.n	800ced8 <__kernel_rem_pio2f+0x49c>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	e7e7      	b.n	800cee2 <__kernel_rem_pio2f+0x4a6>
 800cf12:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800cf16:	f7f3 fe05 	bl	8000b24 <__addsf3>
 800cf1a:	3701      	adds	r7, #1
 800cf1c:	e7ea      	b.n	800cef4 <__kernel_rem_pio2f+0x4b8>
 800cf1e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf22:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800cf26:	4619      	mov	r1, r3
 800cf28:	4610      	mov	r0, r2
 800cf2a:	9302      	str	r3, [sp, #8]
 800cf2c:	9201      	str	r2, [sp, #4]
 800cf2e:	f7f3 fdf9 	bl	8000b24 <__addsf3>
 800cf32:	9a01      	ldr	r2, [sp, #4]
 800cf34:	4601      	mov	r1, r0
 800cf36:	4681      	mov	r9, r0
 800cf38:	4610      	mov	r0, r2
 800cf3a:	f7f3 fdf1 	bl	8000b20 <__aeabi_fsub>
 800cf3e:	9b02      	ldr	r3, [sp, #8]
 800cf40:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf44:	4619      	mov	r1, r3
 800cf46:	f7f3 fded 	bl	8000b24 <__addsf3>
 800cf4a:	f848 0904 	str.w	r0, [r8], #-4
 800cf4e:	f8c8 9000 	str.w	r9, [r8]
 800cf52:	e798      	b.n	800ce86 <__kernel_rem_pio2f+0x44a>
 800cf54:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800cf58:	f8d7 a000 	ldr.w	sl, [r7]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	4651      	mov	r1, sl
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	f7f3 fddf 	bl	8000b24 <__addsf3>
 800cf66:	9b01      	ldr	r3, [sp, #4]
 800cf68:	4601      	mov	r1, r0
 800cf6a:	4680      	mov	r8, r0
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f3 fdd7 	bl	8000b20 <__aeabi_fsub>
 800cf72:	4651      	mov	r1, sl
 800cf74:	f7f3 fdd6 	bl	8000b24 <__addsf3>
 800cf78:	f847 0904 	str.w	r0, [r7], #-4
 800cf7c:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf80:	f8c7 8000 	str.w	r8, [r7]
 800cf84:	e783      	b.n	800ce8e <__kernel_rem_pio2f+0x452>
 800cf86:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800cf8a:	f7f3 fdcb 	bl	8000b24 <__addsf3>
 800cf8e:	3d01      	subs	r5, #1
 800cf90:	e781      	b.n	800ce96 <__kernel_rem_pio2f+0x45a>
 800cf92:	9900      	ldr	r1, [sp, #0]
 800cf94:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800cf98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf9c:	600a      	str	r2, [r1, #0]
 800cf9e:	604b      	str	r3, [r1, #4]
 800cfa0:	460a      	mov	r2, r1
 800cfa2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cfa6:	e780      	b.n	800ceaa <__kernel_rem_pio2f+0x46e>

0800cfa8 <__kernel_sinf>:
 800cfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cfb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460f      	mov	r7, r1
 800cfb8:	4691      	mov	r9, r2
 800cfba:	da03      	bge.n	800cfc4 <__kernel_sinf+0x1c>
 800cfbc:	f7f4 f896 	bl	80010ec <__aeabi_f2iz>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d035      	beq.n	800d030 <__kernel_sinf+0x88>
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f7f3 feb4 	bl	8000d34 <__aeabi_fmul>
 800cfcc:	4605      	mov	r5, r0
 800cfce:	4601      	mov	r1, r0
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f7f3 feaf 	bl	8000d34 <__aeabi_fmul>
 800cfd6:	4929      	ldr	r1, [pc, #164]	; (800d07c <__kernel_sinf+0xd4>)
 800cfd8:	4606      	mov	r6, r0
 800cfda:	4628      	mov	r0, r5
 800cfdc:	f7f3 feaa 	bl	8000d34 <__aeabi_fmul>
 800cfe0:	4927      	ldr	r1, [pc, #156]	; (800d080 <__kernel_sinf+0xd8>)
 800cfe2:	f7f3 fd9d 	bl	8000b20 <__aeabi_fsub>
 800cfe6:	4629      	mov	r1, r5
 800cfe8:	f7f3 fea4 	bl	8000d34 <__aeabi_fmul>
 800cfec:	4925      	ldr	r1, [pc, #148]	; (800d084 <__kernel_sinf+0xdc>)
 800cfee:	f7f3 fd99 	bl	8000b24 <__addsf3>
 800cff2:	4629      	mov	r1, r5
 800cff4:	f7f3 fe9e 	bl	8000d34 <__aeabi_fmul>
 800cff8:	4923      	ldr	r1, [pc, #140]	; (800d088 <__kernel_sinf+0xe0>)
 800cffa:	f7f3 fd91 	bl	8000b20 <__aeabi_fsub>
 800cffe:	4629      	mov	r1, r5
 800d000:	f7f3 fe98 	bl	8000d34 <__aeabi_fmul>
 800d004:	4921      	ldr	r1, [pc, #132]	; (800d08c <__kernel_sinf+0xe4>)
 800d006:	f7f3 fd8d 	bl	8000b24 <__addsf3>
 800d00a:	4680      	mov	r8, r0
 800d00c:	f1b9 0f00 	cmp.w	r9, #0
 800d010:	d111      	bne.n	800d036 <__kernel_sinf+0x8e>
 800d012:	4601      	mov	r1, r0
 800d014:	4628      	mov	r0, r5
 800d016:	f7f3 fe8d 	bl	8000d34 <__aeabi_fmul>
 800d01a:	491d      	ldr	r1, [pc, #116]	; (800d090 <__kernel_sinf+0xe8>)
 800d01c:	f7f3 fd80 	bl	8000b20 <__aeabi_fsub>
 800d020:	4631      	mov	r1, r6
 800d022:	f7f3 fe87 	bl	8000d34 <__aeabi_fmul>
 800d026:	4601      	mov	r1, r0
 800d028:	4620      	mov	r0, r4
 800d02a:	f7f3 fd7b 	bl	8000b24 <__addsf3>
 800d02e:	4604      	mov	r4, r0
 800d030:	4620      	mov	r0, r4
 800d032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d036:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d03a:	4638      	mov	r0, r7
 800d03c:	f7f3 fe7a 	bl	8000d34 <__aeabi_fmul>
 800d040:	4641      	mov	r1, r8
 800d042:	4681      	mov	r9, r0
 800d044:	4630      	mov	r0, r6
 800d046:	f7f3 fe75 	bl	8000d34 <__aeabi_fmul>
 800d04a:	4601      	mov	r1, r0
 800d04c:	4648      	mov	r0, r9
 800d04e:	f7f3 fd67 	bl	8000b20 <__aeabi_fsub>
 800d052:	4629      	mov	r1, r5
 800d054:	f7f3 fe6e 	bl	8000d34 <__aeabi_fmul>
 800d058:	4639      	mov	r1, r7
 800d05a:	f7f3 fd61 	bl	8000b20 <__aeabi_fsub>
 800d05e:	490c      	ldr	r1, [pc, #48]	; (800d090 <__kernel_sinf+0xe8>)
 800d060:	4605      	mov	r5, r0
 800d062:	4630      	mov	r0, r6
 800d064:	f7f3 fe66 	bl	8000d34 <__aeabi_fmul>
 800d068:	4601      	mov	r1, r0
 800d06a:	4628      	mov	r0, r5
 800d06c:	f7f3 fd5a 	bl	8000b24 <__addsf3>
 800d070:	4601      	mov	r1, r0
 800d072:	4620      	mov	r0, r4
 800d074:	f7f3 fd54 	bl	8000b20 <__aeabi_fsub>
 800d078:	e7d9      	b.n	800d02e <__kernel_sinf+0x86>
 800d07a:	bf00      	nop
 800d07c:	2f2ec9d3 	.word	0x2f2ec9d3
 800d080:	32d72f34 	.word	0x32d72f34
 800d084:	3638ef1b 	.word	0x3638ef1b
 800d088:	39500d01 	.word	0x39500d01
 800d08c:	3c088889 	.word	0x3c088889
 800d090:	3e2aaaab 	.word	0x3e2aaaab

0800d094 <fabs>:
 800d094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d098:	4770      	bx	lr

0800d09a <finite>:
 800d09a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d09e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d0a2:	0fc0      	lsrs	r0, r0, #31
 800d0a4:	4770      	bx	lr
	...

0800d0a8 <nan>:
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	4901      	ldr	r1, [pc, #4]	; (800d0b0 <nan+0x8>)
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	7ff80000 	.word	0x7ff80000

0800d0b4 <rint>:
 800d0b4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800d0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ba:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800d0be:	2f13      	cmp	r7, #19
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800d0cc:	dc59      	bgt.n	800d182 <rint+0xce>
 800d0ce:	2f00      	cmp	r7, #0
 800d0d0:	da2a      	bge.n	800d128 <rint+0x74>
 800d0d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d0d6:	4301      	orrs	r1, r0
 800d0d8:	d022      	beq.n	800d120 <rint+0x6c>
 800d0da:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800d0de:	4301      	orrs	r1, r0
 800d0e0:	424d      	negs	r5, r1
 800d0e2:	430d      	orrs	r5, r1
 800d0e4:	4936      	ldr	r1, [pc, #216]	; (800d1c0 <rint+0x10c>)
 800d0e6:	0c5c      	lsrs	r4, r3, #17
 800d0e8:	0b2d      	lsrs	r5, r5, #12
 800d0ea:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800d0ee:	0464      	lsls	r4, r4, #17
 800d0f0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d0f4:	ea45 0304 	orr.w	r3, r5, r4
 800d0f8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	4629      	mov	r1, r5
 800d100:	f7f3 f82c 	bl	800015c <__adddf3>
 800d104:	e9cd 0100 	strd	r0, r1, [sp]
 800d108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d10c:	462b      	mov	r3, r5
 800d10e:	4622      	mov	r2, r4
 800d110:	f7f3 f822 	bl	8000158 <__aeabi_dsub>
 800d114:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d118:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800d11c:	4602      	mov	r2, r0
 800d11e:	460b      	mov	r3, r1
 800d120:	4610      	mov	r0, r2
 800d122:	4619      	mov	r1, r3
 800d124:	b003      	add	sp, #12
 800d126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d128:	4926      	ldr	r1, [pc, #152]	; (800d1c4 <rint+0x110>)
 800d12a:	4139      	asrs	r1, r7
 800d12c:	ea03 0001 	and.w	r0, r3, r1
 800d130:	4310      	orrs	r0, r2
 800d132:	d0f5      	beq.n	800d120 <rint+0x6c>
 800d134:	084b      	lsrs	r3, r1, #1
 800d136:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800d13a:	ea52 0501 	orrs.w	r5, r2, r1
 800d13e:	d00c      	beq.n	800d15a <rint+0xa6>
 800d140:	ea24 0303 	bic.w	r3, r4, r3
 800d144:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800d148:	2f13      	cmp	r7, #19
 800d14a:	bf0c      	ite	eq
 800d14c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800d150:	2500      	movne	r5, #0
 800d152:	fa44 f707 	asr.w	r7, r4, r7
 800d156:	ea43 0407 	orr.w	r4, r3, r7
 800d15a:	4919      	ldr	r1, [pc, #100]	; (800d1c0 <rint+0x10c>)
 800d15c:	4623      	mov	r3, r4
 800d15e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800d162:	462a      	mov	r2, r5
 800d164:	e9d6 4500 	ldrd	r4, r5, [r6]
 800d168:	4620      	mov	r0, r4
 800d16a:	4629      	mov	r1, r5
 800d16c:	f7f2 fff6 	bl	800015c <__adddf3>
 800d170:	e9cd 0100 	strd	r0, r1, [sp]
 800d174:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d178:	4622      	mov	r2, r4
 800d17a:	462b      	mov	r3, r5
 800d17c:	f7f2 ffec 	bl	8000158 <__aeabi_dsub>
 800d180:	e7cc      	b.n	800d11c <rint+0x68>
 800d182:	2f33      	cmp	r7, #51	; 0x33
 800d184:	dd05      	ble.n	800d192 <rint+0xde>
 800d186:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800d18a:	d1c9      	bne.n	800d120 <rint+0x6c>
 800d18c:	f7f2 ffe6 	bl	800015c <__adddf3>
 800d190:	e7c4      	b.n	800d11c <rint+0x68>
 800d192:	f04f 31ff 	mov.w	r1, #4294967295
 800d196:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800d19a:	fa21 f10c 	lsr.w	r1, r1, ip
 800d19e:	4208      	tst	r0, r1
 800d1a0:	d0be      	beq.n	800d120 <rint+0x6c>
 800d1a2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800d1a6:	bf18      	it	ne
 800d1a8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800d1ac:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800d1b0:	bf1e      	ittt	ne
 800d1b2:	ea20 0303 	bicne.w	r3, r0, r3
 800d1b6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800d1ba:	ea43 050c 	orrne.w	r5, r3, ip
 800d1be:	e7cc      	b.n	800d15a <rint+0xa6>
 800d1c0:	0800db78 	.word	0x0800db78
 800d1c4:	000fffff 	.word	0x000fffff

0800d1c8 <scalbn>:
 800d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	460d      	mov	r5, r1
 800d1d2:	4617      	mov	r7, r2
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	b996      	cbnz	r6, 800d1fe <scalbn+0x36>
 800d1d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1dc:	4303      	orrs	r3, r0
 800d1de:	d039      	beq.n	800d254 <scalbn+0x8c>
 800d1e0:	4b35      	ldr	r3, [pc, #212]	; (800d2b8 <scalbn+0xf0>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f7f3 f970 	bl	80004c8 <__aeabi_dmul>
 800d1e8:	4b34      	ldr	r3, [pc, #208]	; (800d2bc <scalbn+0xf4>)
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	429f      	cmp	r7, r3
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	da0f      	bge.n	800d212 <scalbn+0x4a>
 800d1f2:	a32d      	add	r3, pc, #180	; (adr r3, 800d2a8 <scalbn+0xe0>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	f7f3 f966 	bl	80004c8 <__aeabi_dmul>
 800d1fc:	e006      	b.n	800d20c <scalbn+0x44>
 800d1fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d202:	4296      	cmp	r6, r2
 800d204:	d10a      	bne.n	800d21c <scalbn+0x54>
 800d206:	4602      	mov	r2, r0
 800d208:	f7f2 ffa8 	bl	800015c <__adddf3>
 800d20c:	4604      	mov	r4, r0
 800d20e:	460d      	mov	r5, r1
 800d210:	e020      	b.n	800d254 <scalbn+0x8c>
 800d212:	460b      	mov	r3, r1
 800d214:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d218:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d21c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d220:	19b9      	adds	r1, r7, r6
 800d222:	4291      	cmp	r1, r2
 800d224:	dd0e      	ble.n	800d244 <scalbn+0x7c>
 800d226:	a322      	add	r3, pc, #136	; (adr r3, 800d2b0 <scalbn+0xe8>)
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d230:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d234:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d238:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d23c:	4820      	ldr	r0, [pc, #128]	; (800d2c0 <scalbn+0xf8>)
 800d23e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d242:	e7d9      	b.n	800d1f8 <scalbn+0x30>
 800d244:	2900      	cmp	r1, #0
 800d246:	dd08      	ble.n	800d25a <scalbn+0x92>
 800d248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d24c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d250:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d254:	4620      	mov	r0, r4
 800d256:	4629      	mov	r1, r5
 800d258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d25a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d25e:	da16      	bge.n	800d28e <scalbn+0xc6>
 800d260:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d264:	429f      	cmp	r7, r3
 800d266:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d26a:	dd08      	ble.n	800d27e <scalbn+0xb6>
 800d26c:	4c15      	ldr	r4, [pc, #84]	; (800d2c4 <scalbn+0xfc>)
 800d26e:	4814      	ldr	r0, [pc, #80]	; (800d2c0 <scalbn+0xf8>)
 800d270:	f363 74df 	bfi	r4, r3, #31, #1
 800d274:	a30e      	add	r3, pc, #56	; (adr r3, 800d2b0 <scalbn+0xe8>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	4621      	mov	r1, r4
 800d27c:	e7bc      	b.n	800d1f8 <scalbn+0x30>
 800d27e:	4c12      	ldr	r4, [pc, #72]	; (800d2c8 <scalbn+0x100>)
 800d280:	4812      	ldr	r0, [pc, #72]	; (800d2cc <scalbn+0x104>)
 800d282:	f363 74df 	bfi	r4, r3, #31, #1
 800d286:	a308      	add	r3, pc, #32	; (adr r3, 800d2a8 <scalbn+0xe0>)
 800d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28c:	e7f5      	b.n	800d27a <scalbn+0xb2>
 800d28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d292:	3136      	adds	r1, #54	; 0x36
 800d294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d298:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d29c:	4620      	mov	r0, r4
 800d29e:	4629      	mov	r1, r5
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	4b0b      	ldr	r3, [pc, #44]	; (800d2d0 <scalbn+0x108>)
 800d2a4:	e7a8      	b.n	800d1f8 <scalbn+0x30>
 800d2a6:	bf00      	nop
 800d2a8:	c2f8f359 	.word	0xc2f8f359
 800d2ac:	01a56e1f 	.word	0x01a56e1f
 800d2b0:	8800759c 	.word	0x8800759c
 800d2b4:	7e37e43c 	.word	0x7e37e43c
 800d2b8:	43500000 	.word	0x43500000
 800d2bc:	ffff3cb0 	.word	0xffff3cb0
 800d2c0:	8800759c 	.word	0x8800759c
 800d2c4:	7e37e43c 	.word	0x7e37e43c
 800d2c8:	01a56e1f 	.word	0x01a56e1f
 800d2cc:	c2f8f359 	.word	0xc2f8f359
 800d2d0:	3c900000 	.word	0x3c900000

0800d2d4 <fabsf>:
 800d2d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d2d8:	4770      	bx	lr
	...

0800d2dc <floorf>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800d2e2:	3d7f      	subs	r5, #127	; 0x7f
 800d2e4:	2d16      	cmp	r5, #22
 800d2e6:	4601      	mov	r1, r0
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800d2ee:	dc26      	bgt.n	800d33e <floorf+0x62>
 800d2f0:	2d00      	cmp	r5, #0
 800d2f2:	da0e      	bge.n	800d312 <floorf+0x36>
 800d2f4:	4917      	ldr	r1, [pc, #92]	; (800d354 <floorf+0x78>)
 800d2f6:	f7f3 fc15 	bl	8000b24 <__addsf3>
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	f7f3 fed6 	bl	80010ac <__aeabi_fcmpgt>
 800d300:	b128      	cbz	r0, 800d30e <floorf+0x32>
 800d302:	2c00      	cmp	r4, #0
 800d304:	da23      	bge.n	800d34e <floorf+0x72>
 800d306:	4b14      	ldr	r3, [pc, #80]	; (800d358 <floorf+0x7c>)
 800d308:	2e00      	cmp	r6, #0
 800d30a:	bf18      	it	ne
 800d30c:	461c      	movne	r4, r3
 800d30e:	4621      	mov	r1, r4
 800d310:	e01b      	b.n	800d34a <floorf+0x6e>
 800d312:	4e12      	ldr	r6, [pc, #72]	; (800d35c <floorf+0x80>)
 800d314:	412e      	asrs	r6, r5
 800d316:	4230      	tst	r0, r6
 800d318:	d017      	beq.n	800d34a <floorf+0x6e>
 800d31a:	490e      	ldr	r1, [pc, #56]	; (800d354 <floorf+0x78>)
 800d31c:	f7f3 fc02 	bl	8000b24 <__addsf3>
 800d320:	2100      	movs	r1, #0
 800d322:	f7f3 fec3 	bl	80010ac <__aeabi_fcmpgt>
 800d326:	2800      	cmp	r0, #0
 800d328:	d0f1      	beq.n	800d30e <floorf+0x32>
 800d32a:	2c00      	cmp	r4, #0
 800d32c:	bfbe      	ittt	lt
 800d32e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800d332:	fa43 f505 	asrlt.w	r5, r3, r5
 800d336:	1964      	addlt	r4, r4, r5
 800d338:	ea24 0406 	bic.w	r4, r4, r6
 800d33c:	e7e7      	b.n	800d30e <floorf+0x32>
 800d33e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800d342:	d302      	bcc.n	800d34a <floorf+0x6e>
 800d344:	f7f3 fbee 	bl	8000b24 <__addsf3>
 800d348:	4601      	mov	r1, r0
 800d34a:	4608      	mov	r0, r1
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	2400      	movs	r4, #0
 800d350:	e7dd      	b.n	800d30e <floorf+0x32>
 800d352:	bf00      	nop
 800d354:	7149f2ca 	.word	0x7149f2ca
 800d358:	bf800000 	.word	0xbf800000
 800d35c:	007fffff 	.word	0x007fffff

0800d360 <nanf>:
 800d360:	4800      	ldr	r0, [pc, #0]	; (800d364 <nanf+0x4>)
 800d362:	4770      	bx	lr
 800d364:	7fc00000 	.word	0x7fc00000

0800d368 <scalbnf>:
 800d368:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4603      	mov	r3, r0
 800d370:	460d      	mov	r5, r1
 800d372:	4604      	mov	r4, r0
 800d374:	d02a      	beq.n	800d3cc <scalbnf+0x64>
 800d376:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d37a:	d304      	bcc.n	800d386 <scalbnf+0x1e>
 800d37c:	4601      	mov	r1, r0
 800d37e:	f7f3 fbd1 	bl	8000b24 <__addsf3>
 800d382:	4603      	mov	r3, r0
 800d384:	e022      	b.n	800d3cc <scalbnf+0x64>
 800d386:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800d38a:	d117      	bne.n	800d3bc <scalbnf+0x54>
 800d38c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800d390:	f7f3 fcd0 	bl	8000d34 <__aeabi_fmul>
 800d394:	4a17      	ldr	r2, [pc, #92]	; (800d3f4 <scalbnf+0x8c>)
 800d396:	4603      	mov	r3, r0
 800d398:	4295      	cmp	r5, r2
 800d39a:	db0b      	blt.n	800d3b4 <scalbnf+0x4c>
 800d39c:	4604      	mov	r4, r0
 800d39e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d3a2:	3a19      	subs	r2, #25
 800d3a4:	442a      	add	r2, r5
 800d3a6:	2afe      	cmp	r2, #254	; 0xfe
 800d3a8:	dd0a      	ble.n	800d3c0 <scalbnf+0x58>
 800d3aa:	4913      	ldr	r1, [pc, #76]	; (800d3f8 <scalbnf+0x90>)
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f361 001e 	bfi	r0, r1, #0, #31
 800d3b2:	e000      	b.n	800d3b6 <scalbnf+0x4e>
 800d3b4:	4911      	ldr	r1, [pc, #68]	; (800d3fc <scalbnf+0x94>)
 800d3b6:	f7f3 fcbd 	bl	8000d34 <__aeabi_fmul>
 800d3ba:	e7e2      	b.n	800d382 <scalbnf+0x1a>
 800d3bc:	0dd2      	lsrs	r2, r2, #23
 800d3be:	e7f1      	b.n	800d3a4 <scalbnf+0x3c>
 800d3c0:	2a00      	cmp	r2, #0
 800d3c2:	dd05      	ble.n	800d3d0 <scalbnf+0x68>
 800d3c4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800d3c8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	f112 0f16 	cmn.w	r2, #22
 800d3d4:	da05      	bge.n	800d3e2 <scalbnf+0x7a>
 800d3d6:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d3da:	4295      	cmp	r5, r2
 800d3dc:	dce5      	bgt.n	800d3aa <scalbnf+0x42>
 800d3de:	4907      	ldr	r1, [pc, #28]	; (800d3fc <scalbnf+0x94>)
 800d3e0:	e7e4      	b.n	800d3ac <scalbnf+0x44>
 800d3e2:	3219      	adds	r2, #25
 800d3e4:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800d3e8:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800d3ec:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800d3f0:	e7e1      	b.n	800d3b6 <scalbnf+0x4e>
 800d3f2:	bf00      	nop
 800d3f4:	ffff3cb0 	.word	0xffff3cb0
 800d3f8:	7149f2ca 	.word	0x7149f2ca
 800d3fc:	0da24260 	.word	0x0da24260

0800d400 <abort>:
 800d400:	2006      	movs	r0, #6
 800d402:	b508      	push	{r3, lr}
 800d404:	f000 f94c 	bl	800d6a0 <raise>
 800d408:	2001      	movs	r0, #1
 800d40a:	f7f6 f9a6 	bl	800375a <_exit>
	...

0800d410 <__errno>:
 800d410:	4b01      	ldr	r3, [pc, #4]	; (800d418 <__errno+0x8>)
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	20000010 	.word	0x20000010

0800d41c <__libc_init_array>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	2600      	movs	r6, #0
 800d420:	4d0c      	ldr	r5, [pc, #48]	; (800d454 <__libc_init_array+0x38>)
 800d422:	4c0d      	ldr	r4, [pc, #52]	; (800d458 <__libc_init_array+0x3c>)
 800d424:	1b64      	subs	r4, r4, r5
 800d426:	10a4      	asrs	r4, r4, #2
 800d428:	42a6      	cmp	r6, r4
 800d42a:	d109      	bne.n	800d440 <__libc_init_array+0x24>
 800d42c:	f000 f962 	bl	800d6f4 <_init>
 800d430:	2600      	movs	r6, #0
 800d432:	4d0a      	ldr	r5, [pc, #40]	; (800d45c <__libc_init_array+0x40>)
 800d434:	4c0a      	ldr	r4, [pc, #40]	; (800d460 <__libc_init_array+0x44>)
 800d436:	1b64      	subs	r4, r4, r5
 800d438:	10a4      	asrs	r4, r4, #2
 800d43a:	42a6      	cmp	r6, r4
 800d43c:	d105      	bne.n	800d44a <__libc_init_array+0x2e>
 800d43e:	bd70      	pop	{r4, r5, r6, pc}
 800d440:	f855 3b04 	ldr.w	r3, [r5], #4
 800d444:	4798      	blx	r3
 800d446:	3601      	adds	r6, #1
 800d448:	e7ee      	b.n	800d428 <__libc_init_array+0xc>
 800d44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d44e:	4798      	blx	r3
 800d450:	3601      	adds	r6, #1
 800d452:	e7f2      	b.n	800d43a <__libc_init_array+0x1e>
 800d454:	0800dbe8 	.word	0x0800dbe8
 800d458:	0800dbe8 	.word	0x0800dbe8
 800d45c:	0800dbe8 	.word	0x0800dbe8
 800d460:	0800dbf0 	.word	0x0800dbf0

0800d464 <malloc>:
 800d464:	4b02      	ldr	r3, [pc, #8]	; (800d470 <malloc+0xc>)
 800d466:	4601      	mov	r1, r0
 800d468:	6818      	ldr	r0, [r3, #0]
 800d46a:	f000 b887 	b.w	800d57c <_malloc_r>
 800d46e:	bf00      	nop
 800d470:	20000010 	.word	0x20000010

0800d474 <free>:
 800d474:	4b02      	ldr	r3, [pc, #8]	; (800d480 <free+0xc>)
 800d476:	4601      	mov	r1, r0
 800d478:	6818      	ldr	r0, [r3, #0]
 800d47a:	f000 b833 	b.w	800d4e4 <_free_r>
 800d47e:	bf00      	nop
 800d480:	20000010 	.word	0x20000010

0800d484 <memcpy>:
 800d484:	440a      	add	r2, r1
 800d486:	4291      	cmp	r1, r2
 800d488:	f100 33ff 	add.w	r3, r0, #4294967295
 800d48c:	d100      	bne.n	800d490 <memcpy+0xc>
 800d48e:	4770      	bx	lr
 800d490:	b510      	push	{r4, lr}
 800d492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d496:	4291      	cmp	r1, r2
 800d498:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d49c:	d1f9      	bne.n	800d492 <memcpy+0xe>
 800d49e:	bd10      	pop	{r4, pc}

0800d4a0 <memmove>:
 800d4a0:	4288      	cmp	r0, r1
 800d4a2:	b510      	push	{r4, lr}
 800d4a4:	eb01 0402 	add.w	r4, r1, r2
 800d4a8:	d902      	bls.n	800d4b0 <memmove+0x10>
 800d4aa:	4284      	cmp	r4, r0
 800d4ac:	4623      	mov	r3, r4
 800d4ae:	d807      	bhi.n	800d4c0 <memmove+0x20>
 800d4b0:	1e43      	subs	r3, r0, #1
 800d4b2:	42a1      	cmp	r1, r4
 800d4b4:	d008      	beq.n	800d4c8 <memmove+0x28>
 800d4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4be:	e7f8      	b.n	800d4b2 <memmove+0x12>
 800d4c0:	4601      	mov	r1, r0
 800d4c2:	4402      	add	r2, r0
 800d4c4:	428a      	cmp	r2, r1
 800d4c6:	d100      	bne.n	800d4ca <memmove+0x2a>
 800d4c8:	bd10      	pop	{r4, pc}
 800d4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4d2:	e7f7      	b.n	800d4c4 <memmove+0x24>

0800d4d4 <memset>:
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	4402      	add	r2, r0
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d100      	bne.n	800d4de <memset+0xa>
 800d4dc:	4770      	bx	lr
 800d4de:	f803 1b01 	strb.w	r1, [r3], #1
 800d4e2:	e7f9      	b.n	800d4d8 <memset+0x4>

0800d4e4 <_free_r>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	2900      	cmp	r1, #0
 800d4ea:	d043      	beq.n	800d574 <_free_r+0x90>
 800d4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4f0:	1f0c      	subs	r4, r1, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	bfb8      	it	lt
 800d4f6:	18e4      	addlt	r4, r4, r3
 800d4f8:	f000 f8f0 	bl	800d6dc <__malloc_lock>
 800d4fc:	4a1e      	ldr	r2, [pc, #120]	; (800d578 <_free_r+0x94>)
 800d4fe:	6813      	ldr	r3, [r2, #0]
 800d500:	4610      	mov	r0, r2
 800d502:	b933      	cbnz	r3, 800d512 <_free_r+0x2e>
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	6014      	str	r4, [r2, #0]
 800d508:	4628      	mov	r0, r5
 800d50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d50e:	f000 b8eb 	b.w	800d6e8 <__malloc_unlock>
 800d512:	42a3      	cmp	r3, r4
 800d514:	d90a      	bls.n	800d52c <_free_r+0x48>
 800d516:	6821      	ldr	r1, [r4, #0]
 800d518:	1862      	adds	r2, r4, r1
 800d51a:	4293      	cmp	r3, r2
 800d51c:	bf01      	itttt	eq
 800d51e:	681a      	ldreq	r2, [r3, #0]
 800d520:	685b      	ldreq	r3, [r3, #4]
 800d522:	1852      	addeq	r2, r2, r1
 800d524:	6022      	streq	r2, [r4, #0]
 800d526:	6063      	str	r3, [r4, #4]
 800d528:	6004      	str	r4, [r0, #0]
 800d52a:	e7ed      	b.n	800d508 <_free_r+0x24>
 800d52c:	461a      	mov	r2, r3
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	b10b      	cbz	r3, 800d536 <_free_r+0x52>
 800d532:	42a3      	cmp	r3, r4
 800d534:	d9fa      	bls.n	800d52c <_free_r+0x48>
 800d536:	6811      	ldr	r1, [r2, #0]
 800d538:	1850      	adds	r0, r2, r1
 800d53a:	42a0      	cmp	r0, r4
 800d53c:	d10b      	bne.n	800d556 <_free_r+0x72>
 800d53e:	6820      	ldr	r0, [r4, #0]
 800d540:	4401      	add	r1, r0
 800d542:	1850      	adds	r0, r2, r1
 800d544:	4283      	cmp	r3, r0
 800d546:	6011      	str	r1, [r2, #0]
 800d548:	d1de      	bne.n	800d508 <_free_r+0x24>
 800d54a:	6818      	ldr	r0, [r3, #0]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	4401      	add	r1, r0
 800d550:	6011      	str	r1, [r2, #0]
 800d552:	6053      	str	r3, [r2, #4]
 800d554:	e7d8      	b.n	800d508 <_free_r+0x24>
 800d556:	d902      	bls.n	800d55e <_free_r+0x7a>
 800d558:	230c      	movs	r3, #12
 800d55a:	602b      	str	r3, [r5, #0]
 800d55c:	e7d4      	b.n	800d508 <_free_r+0x24>
 800d55e:	6820      	ldr	r0, [r4, #0]
 800d560:	1821      	adds	r1, r4, r0
 800d562:	428b      	cmp	r3, r1
 800d564:	bf01      	itttt	eq
 800d566:	6819      	ldreq	r1, [r3, #0]
 800d568:	685b      	ldreq	r3, [r3, #4]
 800d56a:	1809      	addeq	r1, r1, r0
 800d56c:	6021      	streq	r1, [r4, #0]
 800d56e:	6063      	str	r3, [r4, #4]
 800d570:	6054      	str	r4, [r2, #4]
 800d572:	e7c9      	b.n	800d508 <_free_r+0x24>
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	bf00      	nop
 800d578:	20000ac0 	.word	0x20000ac0

0800d57c <_malloc_r>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	1ccd      	adds	r5, r1, #3
 800d580:	f025 0503 	bic.w	r5, r5, #3
 800d584:	3508      	adds	r5, #8
 800d586:	2d0c      	cmp	r5, #12
 800d588:	bf38      	it	cc
 800d58a:	250c      	movcc	r5, #12
 800d58c:	2d00      	cmp	r5, #0
 800d58e:	4606      	mov	r6, r0
 800d590:	db01      	blt.n	800d596 <_malloc_r+0x1a>
 800d592:	42a9      	cmp	r1, r5
 800d594:	d903      	bls.n	800d59e <_malloc_r+0x22>
 800d596:	230c      	movs	r3, #12
 800d598:	6033      	str	r3, [r6, #0]
 800d59a:	2000      	movs	r0, #0
 800d59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d59e:	f000 f89d 	bl	800d6dc <__malloc_lock>
 800d5a2:	4921      	ldr	r1, [pc, #132]	; (800d628 <_malloc_r+0xac>)
 800d5a4:	680a      	ldr	r2, [r1, #0]
 800d5a6:	4614      	mov	r4, r2
 800d5a8:	b99c      	cbnz	r4, 800d5d2 <_malloc_r+0x56>
 800d5aa:	4f20      	ldr	r7, [pc, #128]	; (800d62c <_malloc_r+0xb0>)
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	b923      	cbnz	r3, 800d5ba <_malloc_r+0x3e>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f000 f83c 	bl	800d630 <_sbrk_r>
 800d5b8:	6038      	str	r0, [r7, #0]
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f000 f837 	bl	800d630 <_sbrk_r>
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	d123      	bne.n	800d60e <_malloc_r+0x92>
 800d5c6:	230c      	movs	r3, #12
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	6033      	str	r3, [r6, #0]
 800d5cc:	f000 f88c 	bl	800d6e8 <__malloc_unlock>
 800d5d0:	e7e3      	b.n	800d59a <_malloc_r+0x1e>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	1b5b      	subs	r3, r3, r5
 800d5d6:	d417      	bmi.n	800d608 <_malloc_r+0x8c>
 800d5d8:	2b0b      	cmp	r3, #11
 800d5da:	d903      	bls.n	800d5e4 <_malloc_r+0x68>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	441c      	add	r4, r3
 800d5e0:	6025      	str	r5, [r4, #0]
 800d5e2:	e004      	b.n	800d5ee <_malloc_r+0x72>
 800d5e4:	6863      	ldr	r3, [r4, #4]
 800d5e6:	42a2      	cmp	r2, r4
 800d5e8:	bf0c      	ite	eq
 800d5ea:	600b      	streq	r3, [r1, #0]
 800d5ec:	6053      	strne	r3, [r2, #4]
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f000 f87a 	bl	800d6e8 <__malloc_unlock>
 800d5f4:	f104 000b 	add.w	r0, r4, #11
 800d5f8:	1d23      	adds	r3, r4, #4
 800d5fa:	f020 0007 	bic.w	r0, r0, #7
 800d5fe:	1ac2      	subs	r2, r0, r3
 800d600:	d0cc      	beq.n	800d59c <_malloc_r+0x20>
 800d602:	1a1b      	subs	r3, r3, r0
 800d604:	50a3      	str	r3, [r4, r2]
 800d606:	e7c9      	b.n	800d59c <_malloc_r+0x20>
 800d608:	4622      	mov	r2, r4
 800d60a:	6864      	ldr	r4, [r4, #4]
 800d60c:	e7cc      	b.n	800d5a8 <_malloc_r+0x2c>
 800d60e:	1cc4      	adds	r4, r0, #3
 800d610:	f024 0403 	bic.w	r4, r4, #3
 800d614:	42a0      	cmp	r0, r4
 800d616:	d0e3      	beq.n	800d5e0 <_malloc_r+0x64>
 800d618:	1a21      	subs	r1, r4, r0
 800d61a:	4630      	mov	r0, r6
 800d61c:	f000 f808 	bl	800d630 <_sbrk_r>
 800d620:	3001      	adds	r0, #1
 800d622:	d1dd      	bne.n	800d5e0 <_malloc_r+0x64>
 800d624:	e7cf      	b.n	800d5c6 <_malloc_r+0x4a>
 800d626:	bf00      	nop
 800d628:	20000ac0 	.word	0x20000ac0
 800d62c:	20000ac4 	.word	0x20000ac4

0800d630 <_sbrk_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	2300      	movs	r3, #0
 800d634:	4d05      	ldr	r5, [pc, #20]	; (800d64c <_sbrk_r+0x1c>)
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	f7f6 f898 	bl	8003770 <_sbrk>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_sbrk_r+0x1a>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_sbrk_r+0x1a>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20000adc 	.word	0x20000adc

0800d650 <_raise_r>:
 800d650:	291f      	cmp	r1, #31
 800d652:	b538      	push	{r3, r4, r5, lr}
 800d654:	4604      	mov	r4, r0
 800d656:	460d      	mov	r5, r1
 800d658:	d904      	bls.n	800d664 <_raise_r+0x14>
 800d65a:	2316      	movs	r3, #22
 800d65c:	6003      	str	r3, [r0, #0]
 800d65e:	f04f 30ff 	mov.w	r0, #4294967295
 800d662:	bd38      	pop	{r3, r4, r5, pc}
 800d664:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d666:	b112      	cbz	r2, 800d66e <_raise_r+0x1e>
 800d668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d66c:	b94b      	cbnz	r3, 800d682 <_raise_r+0x32>
 800d66e:	4620      	mov	r0, r4
 800d670:	f000 f830 	bl	800d6d4 <_getpid_r>
 800d674:	462a      	mov	r2, r5
 800d676:	4601      	mov	r1, r0
 800d678:	4620      	mov	r0, r4
 800d67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d67e:	f000 b817 	b.w	800d6b0 <_kill_r>
 800d682:	2b01      	cmp	r3, #1
 800d684:	d00a      	beq.n	800d69c <_raise_r+0x4c>
 800d686:	1c59      	adds	r1, r3, #1
 800d688:	d103      	bne.n	800d692 <_raise_r+0x42>
 800d68a:	2316      	movs	r3, #22
 800d68c:	6003      	str	r3, [r0, #0]
 800d68e:	2001      	movs	r0, #1
 800d690:	e7e7      	b.n	800d662 <_raise_r+0x12>
 800d692:	2400      	movs	r4, #0
 800d694:	4628      	mov	r0, r5
 800d696:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d69a:	4798      	blx	r3
 800d69c:	2000      	movs	r0, #0
 800d69e:	e7e0      	b.n	800d662 <_raise_r+0x12>

0800d6a0 <raise>:
 800d6a0:	4b02      	ldr	r3, [pc, #8]	; (800d6ac <raise+0xc>)
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	6818      	ldr	r0, [r3, #0]
 800d6a6:	f7ff bfd3 	b.w	800d650 <_raise_r>
 800d6aa:	bf00      	nop
 800d6ac:	20000010 	.word	0x20000010

0800d6b0 <_kill_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	4d06      	ldr	r5, [pc, #24]	; (800d6d0 <_kill_r+0x20>)
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	602b      	str	r3, [r5, #0]
 800d6be:	f7f6 f83c 	bl	800373a <_kill>
 800d6c2:	1c43      	adds	r3, r0, #1
 800d6c4:	d102      	bne.n	800d6cc <_kill_r+0x1c>
 800d6c6:	682b      	ldr	r3, [r5, #0]
 800d6c8:	b103      	cbz	r3, 800d6cc <_kill_r+0x1c>
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	bd38      	pop	{r3, r4, r5, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20000adc 	.word	0x20000adc

0800d6d4 <_getpid_r>:
 800d6d4:	f7f6 b82a 	b.w	800372c <_getpid>

0800d6d8 <__retarget_lock_acquire_recursive>:
 800d6d8:	4770      	bx	lr

0800d6da <__retarget_lock_release_recursive>:
 800d6da:	4770      	bx	lr

0800d6dc <__malloc_lock>:
 800d6dc:	4801      	ldr	r0, [pc, #4]	; (800d6e4 <__malloc_lock+0x8>)
 800d6de:	f7ff bffb 	b.w	800d6d8 <__retarget_lock_acquire_recursive>
 800d6e2:	bf00      	nop
 800d6e4:	20000ad4 	.word	0x20000ad4

0800d6e8 <__malloc_unlock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	; (800d6f0 <__malloc_unlock+0x8>)
 800d6ea:	f7ff bff6 	b.w	800d6da <__retarget_lock_release_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20000ad4 	.word	0x20000ad4

0800d6f4 <_init>:
 800d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f6:	bf00      	nop
 800d6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6fa:	bc08      	pop	{r3}
 800d6fc:	469e      	mov	lr, r3
 800d6fe:	4770      	bx	lr

0800d700 <_fini>:
 800d700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d702:	bf00      	nop
 800d704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d706:	bc08      	pop	{r3}
 800d708:	469e      	mov	lr, r3
 800d70a:	4770      	bx	lr
