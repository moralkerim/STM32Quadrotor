
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800b838  0800b838  0001b838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcac  0800bcac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800bcac  0800bcac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bcac  0800bcac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bcac  0800bcac  0001bcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bcb4  0800bcb4  0001bcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bcbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  200001e0  0800be98  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800be98  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfce  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a82  00000000  00000000  0003d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00040c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00041f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7ad  00000000  00000000  000430d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014446  00000000  00000000  0005f885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f42  00000000  00000000  00073ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109c0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  00109c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b820 	.word	0x0800b820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800b820 	.word	0x0800b820

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f007 fae5 	bl	8008720 <asinf>
 8001156:	4603      	mov	r3, r0
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f007 faff 	bl	800876c <sqrtf>
 800116e:	4603      	mov	r3, r0
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f001 f8c0 	bl	8002306 <_ZNSaIdED1Ev>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f8a3 	bl	80022e6 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZNSt6vectorIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ffeb 	bl	8001190 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f001 fd7a 	bl	8002cc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 80011cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d0:	f001 fdd8 	bl	8002d84 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 f888 	bl	80012e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f000 fb46 	bl	8001868 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80011dc:	f000 f8d2 	bl	8001384 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80011e0:	f000 f9ce 	bl	8001580 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80011e4:	f000 f902 	bl	80013ec <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80011e8:	f000 fb0e 	bl	8001808 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 80011ec:	f000 fa24 	bl	8001638 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80011f0:	f000 faac 	bl	800174c <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 80011f4:	f000 fbbc 	bl	8001970 <_Z14MPU6050_Baslatv>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 80011f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011fc:	f001 fdc2 	bl	8002d84 <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR)/65.5; GyroYh=GyroErr(GYRO_Y_ADDR)/65.5; GyroZh=GyroErr(GYRO_Z_ADDR)/65.5;
 8001200:	2043      	movs	r0, #67	; 0x43
 8001202:	f000 fdaf 	bl	8001d64 <_Z7GyroErrh>
 8001206:	4603      	mov	r3, r0
 8001208:	492d      	ldr	r1, [pc, #180]	; (80012c0 <main+0xfc>)
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fe4e 	bl	8000eac <__aeabi_fdiv>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <main+0x100>)
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	2045      	movs	r0, #69	; 0x45
 800121a:	f000 fda3 	bl	8001d64 <_Z7GyroErrh>
 800121e:	4603      	mov	r3, r0
 8001220:	4927      	ldr	r1, [pc, #156]	; (80012c0 <main+0xfc>)
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe42 	bl	8000eac <__aeabi_fdiv>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <main+0x104>)
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	2047      	movs	r0, #71	; 0x47
 8001232:	f000 fd97 	bl	8001d64 <_Z7GyroErrh>
 8001236:	4603      	mov	r3, r0
 8001238:	4921      	ldr	r1, [pc, #132]	; (80012c0 <main+0xfc>)
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe36 	bl	8000eac <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <main+0x108>)
 8001246:	601a      	str	r2, [r3, #0]
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001248:	4821      	ldr	r0, [pc, #132]	; (80012d0 <main+0x10c>)
 800124a:	f003 fd37 	bl	8004cbc <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 800124e:	4821      	ldr	r0, [pc, #132]	; (80012d4 <main+0x110>)
 8001250:	f003 fcea 	bl	8004c28 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001254:	2100      	movs	r1, #0
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <main+0x114>)
 8001258:	f003 fdd2 	bl	8004e00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800125c:	2104      	movs	r1, #4
 800125e:	481e      	ldr	r0, [pc, #120]	; (80012d8 <main+0x114>)
 8001260:	f003 fdce 	bl	8004e00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001264:	2108      	movs	r1, #8
 8001266:	481c      	ldr	r0, [pc, #112]	; (80012d8 <main+0x114>)
 8001268:	f003 fdca 	bl	8004e00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800126c:	210c      	movs	r1, #12
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <main+0x114>)
 8001270:	f003 fdc6 	bl	8004e00 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001274:	2104      	movs	r1, #4
 8001276:	4817      	ldr	r0, [pc, #92]	; (80012d4 <main+0x110>)
 8001278:	f003 febc 	bl	8004ff4 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //micros = __HAL_TIM_GET_COUNTER(&htim3);
	  //sprintf(buf,"%d\r\n",int(roll)); // @suppress("Float formatting support")
	  if(HAL_GetTick()- sent_time > 1) {
 800127c:	f001 fd78 	bl	8002d70 <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <main+0x118>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	2b01      	cmp	r3, #1
 800128a:	bf8c      	ite	hi
 800128c:	2301      	movhi	r3, #1
 800128e:	2300      	movls	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00e      	beq.n	80012b4 <main+0xf0>
		  TelemPack();
 8001296:	f000 fc51 	bl	8001b3c <_Z9TelemPackv>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 1000);
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	226c      	movs	r2, #108	; 0x6c
 80012a0:	490f      	ldr	r1, [pc, #60]	; (80012e0 <main+0x11c>)
 80012a2:	4810      	ldr	r0, [pc, #64]	; (80012e4 <main+0x120>)
 80012a4:	f004 ffea 	bl	800627c <HAL_UART_Transmit>
		  sent_time = HAL_GetTick();
 80012a8:	f001 fd62 	bl	8002d70 <HAL_GetTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <main+0x118>)
 80012b2:	601a      	str	r2, [r3, #0]

	  }
	  //sprintf(buf,"%s\n","test");

	  Check_Arm();
 80012b4:	f000 fb9e 	bl	80019f4 <_Z9Check_Armv>
	  Check_Disarm();
 80012b8:	f000 fbf4 	bl	8001aa4 <_Z12Check_Disarmv>
	  if(HAL_GetTick()- sent_time > 1) {
 80012bc:	e7de      	b.n	800127c <main+0xb8>
 80012be:	bf00      	nop
 80012c0:	42830000 	.word	0x42830000
 80012c4:	200003c8 	.word	0x200003c8
 80012c8:	200003cc 	.word	0x200003cc
 80012cc:	200003d0 	.word	0x200003d0
 80012d0:	20000298 	.word	0x20000298
 80012d4:	200002e0 	.word	0x200002e0
 80012d8:	20000250 	.word	0x20000250
 80012dc:	2000093c 	.word	0x2000093c
 80012e0:	20000490 	.word	0x20000490
 80012e4:	20000370 	.word	0x20000370

080012e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b090      	sub	sp, #64	; 0x40
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	2228      	movs	r2, #40	; 0x28
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 fdd0 	bl	8008e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800130a:	2301      	movs	r3, #1
 800130c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001326:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	4618      	mov	r0, r3
 8001332:	f003 f80f 	bl	8004354 <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001346:	f000 ffc9 	bl	80022dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2302      	movs	r3, #2
 8001350:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fa76 	bl	8004854 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8001378:	f000 ffb0 	bl	80022dc <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3740      	adds	r7, #64	; 0x40
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <_ZL12MX_I2C1_Initv+0x60>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001390:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <_ZL12MX_I2C1_Initv+0x64>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 80013a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <_ZL12MX_I2C1_Initv+0x5c>)
 80013c2:	f001 ffc7 	bl	8003354 <HAL_I2C_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80013d6:	f000 ff81 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001fc 	.word	0x200001fc
 80013e4:	40005400 	.word	0x40005400
 80013e8:	00061a80 	.word	0x00061a80

080013ec <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b092      	sub	sp, #72	; 0x48
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2220      	movs	r2, #32
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fd40 	bl	8008e9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 800141e:	4a57      	ldr	r2, [pc, #348]	; (800157c <_ZL12MX_TIM1_Initv+0x190>)
 8001420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 8001424:	221f      	movs	r2, #31
 8001426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b53      	ldr	r3, [pc, #332]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 8001430:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001434:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b50      	ldr	r3, [pc, #320]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800143c:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001448:	484b      	ldr	r0, [pc, #300]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 800144a:	f003 fc89 	bl	8004d60 <HAL_TIM_PWM_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800145e:	f000 ff3d 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146e:	4619      	mov	r1, r3
 8001470:	4841      	ldr	r0, [pc, #260]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 8001472:	f004 fdf5 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001486:	f000 ff29 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	; 0x60
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4832      	ldr	r0, [pc, #200]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 80014b0:	f004 f842 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf14      	ite	ne
 80014ba:	2301      	movne	r3, #1
 80014bc:	2300      	moveq	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80014c4:	f000 ff0a 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	2204      	movs	r2, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4829      	ldr	r0, [pc, #164]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 80014d2:	f004 f831 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf14      	ite	ne
 80014dc:	2301      	movne	r3, #1
 80014de:	2300      	moveq	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80014e6:	f000 fef9 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	2208      	movs	r2, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	4821      	ldr	r0, [pc, #132]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 80014f4:	f004 f820 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001508:	f000 fee8 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	220c      	movs	r2, #12
 8001512:	4619      	mov	r1, r3
 8001514:	4818      	ldr	r0, [pc, #96]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 8001516:	f004 f80f 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf14      	ite	ne
 8001520:	2301      	movne	r3, #1
 8001522:	2300      	moveq	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 800152a:	f000 fed7 	bl	80022dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001546:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 8001552:	f004 fde3 	bl	800611c <HAL_TIMEx_ConfigBreakDeadTime>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001566:	f000 feb9 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <_ZL12MX_TIM1_Initv+0x18c>)
 800156c:	f001 fa02 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8001570:	bf00      	nop
 8001572:	3748      	adds	r7, #72	; 0x48
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000250 	.word	0x20000250
 800157c:	40012c00 	.word	0x40012c00

08001580 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 800159e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 80015a6:	221f      	movs	r2, #31
 80015a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c4:	481b      	ldr	r0, [pc, #108]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 80015c6:	f003 fadf 	bl	8004b88 <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80015da:	f000 fe7f 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4619      	mov	r1, r3
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 80015ec:	f004 f862 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001600:	f000 fe6c 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	4619      	mov	r1, r3
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <_ZL12MX_TIM2_Initv+0xb4>)
 8001612:	f004 fd25 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf14      	ite	ne
 800161c:	2301      	movne	r3, #1
 800161e:	2300      	moveq	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001626:	f000 fe59 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000298 	.word	0x20000298

08001638 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <_ZL12MX_TIM3_Initv+0x110>)
 8001666:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 800166a:	221f      	movs	r2, #31
 800166c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b35      	ldr	r3, [pc, #212]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 8001676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001688:	482e      	ldr	r0, [pc, #184]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 800168a:	f003 fa7d 	bl	8004b88 <HAL_TIM_Base_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 800169e:	f000 fe1d 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4825      	ldr	r0, [pc, #148]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 80016b0:	f004 f800 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 80016c4:	f000 fe0a 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016c8:	481e      	ldr	r0, [pc, #120]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 80016ca:	f003 fc3b 	bl	8004f44 <HAL_TIM_IC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80016de:	f000 fdfd 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4619      	mov	r1, r3
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 80016f2:	f004 fcb5 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf14      	ite	ne
 80016fc:	2301      	movne	r3, #1
 80016fe:	2300      	moveq	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8001706:	f000 fde9 	bl	80022dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800170e:	2301      	movs	r3, #1
 8001710:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800171a:	463b      	mov	r3, r7
 800171c:	2208      	movs	r2, #8
 800171e:	4619      	mov	r1, r3
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <_ZL12MX_TIM3_Initv+0x10c>)
 8001722:	f003 fe75 	bl	8005410 <HAL_TIM_IC_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8001736:	f000 fdd1 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002e0 	.word	0x200002e0
 8001748:	40000400 	.word	0x40000400

0800174c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <_ZL12MX_TIM4_Initv+0xb8>)
 800176c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 8001770:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 800177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001782:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001790:	481b      	ldr	r0, [pc, #108]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 8001792:	f003 f9f9 	bl	8004b88 <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 80017a6:	f000 fd99 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	4619      	mov	r1, r3
 80017b6:	4812      	ldr	r0, [pc, #72]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 80017b8:	f003 ff7c 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 80017cc:	f000 fd86 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <_ZL12MX_TIM4_Initv+0xb4>)
 80017de:	f004 fc3f 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80017f2:	f000 fd73 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000328 	.word	0x20000328
 8001804:	40000800 	.word	0x40000800

08001808 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8001816:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 800182c:	220c      	movs	r2, #12
 800182e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800183c:	4807      	ldr	r0, [pc, #28]	; (800185c <_ZL19MX_USART2_UART_Initv+0x54>)
 800183e:	f004 fcd0 	bl	80061e2 <HAL_UART_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf14      	ite	ne
 8001848:	2301      	movne	r3, #1
 800184a:	2300      	moveq	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8001852:	f000 fd43 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000370 	.word	0x20000370
 8001860:	40004400 	.word	0x40004400
 8001864:	0003d090 	.word	0x0003d090

08001868 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187c:	4b38      	ldr	r3, [pc, #224]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a37      	ldr	r2, [pc, #220]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a31      	ldr	r2, [pc, #196]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 800189a:	f043 0320 	orr.w	r3, r3, #32
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <_ZL12MX_GPIO_Initv+0xf8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e2:	4820      	ldr	r0, [pc, #128]	; (8001964 <_ZL12MX_GPIO_Initv+0xfc>)
 80018e4:	f001 fd04 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2102      	movs	r1, #2
 80018ec:	481e      	ldr	r0, [pc, #120]	; (8001968 <_ZL12MX_GPIO_Initv+0x100>)
 80018ee:	f001 fcff 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f8:	481c      	ldr	r0, [pc, #112]	; (800196c <_ZL12MX_GPIO_Initv+0x104>)
 80018fa:	f001 fcf9 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2302      	movs	r3, #2
 800190e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	4813      	ldr	r0, [pc, #76]	; (8001964 <_ZL12MX_GPIO_Initv+0xfc>)
 8001918:	f001 fb66 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800191c:	2302      	movs	r3, #2
 800191e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2302      	movs	r3, #2
 800192a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <_ZL12MX_GPIO_Initv+0x100>)
 8001934:	f001 fb58 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800193c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2302      	movs	r3, #2
 8001948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4619      	mov	r1, r3
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <_ZL12MX_GPIO_Initv+0x104>)
 8001952:	f001 fb49 	bl	8002fe8 <HAL_GPIO_Init>

}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	40011000 	.word	0x40011000
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40010800 	.word	0x40010800

08001970 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800197a:	2305      	movs	r3, #5
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2301      	movs	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	226b      	movs	r2, #107	; 0x6b
 800198a:	21d0      	movs	r1, #208	; 0xd0
 800198c:	4818      	ldr	r0, [pc, #96]	; (80019f0 <_Z14MPU6050_Baslatv+0x80>)
 800198e:	f001 fe25 	bl	80035dc <HAL_I2C_Mem_Write>
	config = 0x08;
 8001992:	2308      	movs	r3, #8
 8001994:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8001996:	2305      	movs	r3, #5
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	2301      	movs	r3, #1
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	221b      	movs	r2, #27
 80019a6:	21d0      	movs	r1, #208	; 0xd0
 80019a8:	4811      	ldr	r0, [pc, #68]	; (80019f0 <_Z14MPU6050_Baslatv+0x80>)
 80019aa:	f001 fe17 	bl	80035dc <HAL_I2C_Mem_Write>
	config = 0x10;
 80019ae:	2310      	movs	r3, #16
 80019b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80019b2:	2305      	movs	r3, #5
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	2301      	movs	r3, #1
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	221c      	movs	r2, #28
 80019c2:	21d0      	movs	r1, #208	; 0xd0
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <_Z14MPU6050_Baslatv+0x80>)
 80019c6:	f001 fe09 	bl	80035dc <HAL_I2C_Mem_Write>
	config = 0x04; //0x04
 80019ca:	2304      	movs	r3, #4
 80019cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı
 80019ce:	2305      	movs	r3, #5
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	221a      	movs	r2, #26
 80019de:	21d0      	movs	r1, #208	; 0xd0
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <_Z14MPU6050_Baslatv+0x80>)
 80019e2:	f001 fdfb 	bl	80035dc <HAL_I2C_Mem_Write>


}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001fc 	.word	0x200001fc

080019f4 <_Z9Check_Armv>:


void Check_Arm() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	if(!armed) {
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <_Z9Check_Armv+0x94>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	f083 0301 	eor.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03e      	beq.n	8001a84 <_Z9Check_Armv+0x90>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <_Z9Check_Armv+0x98>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	dc34      	bgt.n	8001a7c <_Z9Check_Armv+0x88>
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <_Z9Check_Armv+0x98>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	dd2e      	ble.n	8001a7c <_Z9Check_Armv+0x88>
				if(!arm_start){
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <_Z9Check_Armv+0x9c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	f083 0301 	eor.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8001a2c:	f001 f9a0 	bl	8002d70 <HAL_GetTick>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <_Z9Check_Armv+0xa0>)
 8001a36:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_Z9Check_Armv+0x9c>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8001a3e:	f001 f997 	bl	8002d70 <HAL_GetTick>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <_Z9Check_Armv+0xa0>)
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	bf8c      	ite	hi
 8001a52:	2301      	movhi	r3, #1
 8001a54:	2300      	movls	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <_Z9Check_Armv+0x90>
					controller.pid_roll.reset();
 8001a5c:	480e      	ldr	r0, [pc, #56]	; (8001a98 <_Z9Check_Armv+0xa4>)
 8001a5e:	f006 fc67 	bl	8008330 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8001a62:	480e      	ldr	r0, [pc, #56]	; (8001a9c <_Z9Check_Armv+0xa8>)
 8001a64:	f006 fc64 	bl	8008330 <_ZN3PID5resetEv>
					armed = true;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_Z9Check_Armv+0x94>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a74:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <_Z9Check_Armv+0xac>)
 8001a76:	f001 fc3b 	bl	80032f0 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8001a7a:	e003      	b.n	8001a84 <_Z9Check_Armv+0x90>
				}

		}

		else {
			arm_start = false;
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <_Z9Check_Armv+0x9c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001a82:	e7ff      	b.n	8001a84 <_Z9Check_Armv+0x90>
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000941 	.word	0x20000941
 8001a8c:	2000090c 	.word	0x2000090c
 8001a90:	20000940 	.word	0x20000940
 8001a94:	20000934 	.word	0x20000934
 8001a98:	20000788 	.word	0x20000788
 8001a9c:	200007f8 	.word	0x200007f8
 8001aa0:	40010800 	.word	0x40010800

08001aa4 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	if(armed) {
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <_Z12Check_Disarmv+0x84>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d038      	beq.n	8001b22 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <_Z12Check_Disarmv+0x88>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f240 424b 	movw	r2, #1099	; 0x44b
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	dc2e      	bgt.n	8001b1a <_Z12Check_Disarmv+0x76>
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <_Z12Check_Disarmv+0x88>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f240 424b 	movw	r2, #1099	; 0x44b
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	dc28      	bgt.n	8001b1a <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <_Z12Check_Disarmv+0x8c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d008      	beq.n	8001ae8 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8001ad6:	f001 f94b 	bl	8002d70 <HAL_GetTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <_Z12Check_Disarmv+0x90>)
 8001ae0:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <_Z12Check_Disarmv+0x8c>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8001ae8:	f001 f942 	bl	8002d70 <HAL_GetTick>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <_Z12Check_Disarmv+0x90>)
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001af8:	4293      	cmp	r3, r2
 8001afa:	bf8c      	ite	hi
 8001afc:	2301      	movhi	r3, #1
 8001afe:	2300      	movls	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00d      	beq.n	8001b22 <_Z12Check_Disarmv+0x7e>
					armed = false;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_Z12Check_Disarmv+0x84>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <_Z12Check_Disarmv+0x94>)
 8001b14:	f001 fbec 	bl	80032f0 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8001b18:	e003      	b.n	8001b22 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <_Z12Check_Disarmv+0x8c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001b20:	e7ff      	b.n	8001b22 <_Z12Check_Disarmv+0x7e>
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000941 	.word	0x20000941
 8001b2c:	2000090c 	.word	0x2000090c
 8001b30:	20000943 	.word	0x20000943
 8001b34:	20000938 	.word	0x20000938
 8001b38:	40010800 	.word	0x40010800

08001b3c <_Z9TelemPackv>:

void TelemPack() {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8001b40:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <_Z9TelemPackv+0x150>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b46:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <_Z9TelemPackv+0x150>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a50      	ldr	r2, [pc, #320]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b4e:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <_Z9TelemPackv+0x150>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b56:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001b58:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <_Z9TelemPackv+0x158>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b60:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <_Z9TelemPackv+0x158>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b6a:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <_Z9TelemPackv+0x158>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b74:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <_Z9TelemPackv+0x158>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b7e:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <_Z9TelemPackv+0x15c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a42      	ldr	r2, [pc, #264]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b86:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <_Z9TelemPackv+0x15c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b8e:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 8001b90:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <_Z9TelemPackv+0x15c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b96:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll =  state.rates[0];
 8001b98:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <_Z9TelemPackv+0x150>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001b9e:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <_Z9TelemPackv+0x150>)
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	4a3a      	ldr	r2, [pc, #232]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001ba6:	61d3      	str	r3, [r2, #28]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <_Z9TelemPackv+0x15c>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001bae:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <_Z9TelemPackv+0x15c>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001bb6:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <_Z9TelemPackv+0x160>)
 8001bba:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001bbe:	4a34      	ldr	r2, [pc, #208]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001bc0:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <_Z9TelemPackv+0x160>)
 8001bc4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001bc8:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001bca:	63d3      	str	r3, [r2, #60]	; 0x3c
	  telem_pack.ekf.yaw_acc   = EKF.yaw_acc;
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <_Z9TelemPackv+0x160>)
 8001bce:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8001bd2:	4a2f      	ldr	r2, [pc, #188]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40

	  telem_pack.ekf.roll_gyro =  EKF.roll_comp;
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <_Z9TelemPackv+0x160>)
 8001bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bdc:	4a2c      	ldr	r2, [pc, #176]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001bde:	6453      	str	r3, [r2, #68]	; 0x44
	  telem_pack.ekf.pitch_gyro = EKF.pitch_comp;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <_Z9TelemPackv+0x160>)
 8001be2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001be6:	4a2a      	ldr	r2, [pc, #168]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001be8:	6493      	str	r3, [r2, #72]	; 0x48

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001bec:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ff48 	bl	8000a88 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001c00:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe ff3e 	bl	8000a88 <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c10:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001c14:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ff34 	bl	8000a88 <__aeabi_d2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c24:	6553      	str	r3, [r2, #84]	; 0x54
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001c28:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001c32:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe ff25 	bl	8000a88 <__aeabi_d2f>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c42:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001c46:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7fe ff1b 	bl	8000a88 <__aeabi_d2f>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c56:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001c5a:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ff11 	bl	8000a88 <__aeabi_d2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c6a:	6653      	str	r3, [r2, #100]	; 0x64
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <_Z9TelemPackv+0x164>)
 8001c6e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c74:	6693      	str	r3, [r2, #104]	; 0x68

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <_Z9TelemPackv+0x168>)
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <_Z9TelemPackv+0x154>)
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	236c      	movs	r3, #108	; 0x6c
 8001c80:	461a      	mov	r2, r3
 8001c82:	f007 f8e3 	bl	8008e4c <memcpy>
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000400 	.word	0x20000400
 8001c90:	20000424 	.word	0x20000424
 8001c94:	200008d8 	.word	0x200008d8
 8001c98:	200003dc 	.word	0x200003dc
 8001c9c:	20000500 	.word	0x20000500
 8001ca0:	200006b8 	.word	0x200006b8
 8001ca4:	20000490 	.word	0x20000490

08001ca8 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af04      	add	r7, sp, #16
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	21d1      	movs	r1, #209	; 0xd1
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <_Z7GyroOkuh+0x40>)
 8001cca:	f001 fd81 	bl	80037d0 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001cce:	7b3b      	ldrb	r3, [r7, #12]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	7b7b      	ldrb	r3, [r7, #13]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001cdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200001fc 	.word	0x200001fc

08001cec <_Z6PWMYazv>:




void PWMYaz() {
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
	  if(ch[EMERGENCY_CH-1] < 1500) {
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <_Z6PWMYazv+0x6c>)
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f240 52db 	movw	r2, #1499	; 0x5db
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	dc14      	bgt.n	8001d26 <_Z6PWMYazv+0x3a>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <_Z6PWMYazv+0x70>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <_Z6PWMYazv+0x70>)
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <_Z6PWMYazv+0x70>)
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_Z6PWMYazv+0x70>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
}
 8001d24:	e013      	b.n	8001d4e <_Z6PWMYazv+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <_Z6PWMYazv+0x74>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	2000090c 	.word	0x2000090c
 8001d5c:	200008d8 	.word	0x200008d8
 8001d60:	20000250 	.word	0x20000250

08001d64 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d7e:	da0c      	bge.n	8001d9a <_Z7GyroErrh+0x36>
	{
		GyroXh = (GyroOku(GYRO_X_ADDR));
 8001d80:	2043      	movs	r0, #67	; 0x43
 8001d82:	f7ff ff91 	bl	8001ca8 <_Z7GyroOkuh>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe ff87 	bl	8000c9c <__aeabi_i2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3301      	adds	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	e7ee      	b.n	8001d78 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8001d9a:	4905      	ldr	r1, [pc, #20]	; (8001db0 <_Z7GyroErrh+0x4c>)
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff f885 	bl	8000eac <__aeabi_fdiv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	44fa0000 	.word	0x44fa0000

08001db4 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <_Z11MotorBaslatv+0x38>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <_Z11MotorBaslatv+0x38>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_Z11MotorBaslatv+0x38>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dd4:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_Z11MotorBaslatv+0x38>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8001de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de4:	f000 ffce 	bl	8002d84 <HAL_Delay>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000250 	.word	0x20000250

08001df0 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b09f      	sub	sp, #124	; 0x7c
 8001df4:	af12      	add	r7, sp, #72	; 0x48
 8001df6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4ab1      	ldr	r2, [pc, #708]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	f040 81b5 	bne.w	800216c <HAL_TIM_PeriodElapsedCallback+0x37c>


		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5 - GyroXh;
 8001e02:	2043      	movs	r0, #67	; 0x43
 8001e04:	f7ff ff50 	bl	8001ca8 <_Z7GyroOkuh>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fafa 	bl	8000404 <__aeabi_i2d>
 8001e10:	a3a7      	add	r3, pc, #668	; (adr r3, 80020b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fc89 	bl	800072c <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	4ba8      	ldr	r3, [pc, #672]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fafe 	bl	8000428 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe f998 	bl	8000168 <__aeabi_dsub>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe fe22 	bl	8000a88 <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4aa0      	ldr	r2, [pc, #640]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e48:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/65.5 - GyroYh;
 8001e4a:	2045      	movs	r0, #69	; 0x45
 8001e4c:	f7ff ff2c 	bl	8001ca8 <_Z7GyroOkuh>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fad6 	bl	8000404 <__aeabi_i2d>
 8001e58:	a395      	add	r3, pc, #596	; (adr r3, 80020b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fc65 	bl	800072c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	4b98      	ldr	r3, [pc, #608]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fada 	bl	8000428 <__aeabi_f2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4620      	mov	r0, r4
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	f7fe f974 	bl	8000168 <__aeabi_dsub>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fdfe 	bl	8000a88 <__aeabi_d2f>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a90      	ldr	r2, [pc, #576]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e90:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/65.5 - GyroZh;
 8001e92:	2047      	movs	r0, #71	; 0x47
 8001e94:	f7ff ff08 	bl	8001ca8 <_Z7GyroOkuh>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fab2 	bl	8000404 <__aeabi_i2d>
 8001ea0:	a383      	add	r3, pc, #524	; (adr r3, 80020b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fc41 	bl	800072c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4614      	mov	r4, r2
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fab6 	bl	8000428 <__aeabi_f2d>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	f7fe f950 	bl	8000168 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fdda 	bl	8000a88 <__aeabi_d2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001ed8:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  float gyro[3];
		  gyro[0] = gyroX;
 8001eda:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]
		  gyro[1] = -1*gyroY;
 8001ee0:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	61bb      	str	r3, [r7, #24]
		  gyro[2] = gyroZ;
 8001eea:	4b7b      	ldr	r3, [pc, #492]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61fb      	str	r3, [r7, #28]

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8001ef0:	203b      	movs	r0, #59	; 0x3b
 8001ef2:	f7ff fed9 	bl	8001ca8 <_Z7GyroOkuh>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fecf 	bl	8000c9c <__aeabi_i2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a76      	ldr	r2, [pc, #472]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f02:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001f04:	203d      	movs	r0, #61	; 0x3d
 8001f06:	f7ff fecf 	bl	8001ca8 <_Z7GyroOkuh>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fec5 	bl	8000c9c <__aeabi_i2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a72      	ldr	r2, [pc, #456]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f16:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001f18:	203f      	movs	r0, #63	; 0x3f
 8001f1a:	f7ff fec5 	bl	8001ca8 <_Z7GyroOkuh>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe febb 	bl	8000c9c <__aeabi_i2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f2a:	6013      	str	r3, [r2, #0]

		  float acc[3];
		  acc[0] = accX;
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60bb      	str	r3, [r7, #8]
		  acc[1] = accY;
 8001f32:	4b6b      	ldr	r3, [pc, #428]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]
		  acc[2] = accZ;
 8001f38:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8001f3e:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a66      	ldr	r2, [pc, #408]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fefb 	bl	8000d44 <__aeabi_fmul>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461c      	mov	r4, r3
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a62      	ldr	r2, [pc, #392]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fef1 	bl	8000d44 <__aeabi_fmul>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7fe fde4 	bl	8000b34 <__addsf3>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461c      	mov	r4, r3
 8001f70:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5b      	ldr	r2, [pc, #364]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fee2 	bl	8000d44 <__aeabi_fmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4619      	mov	r1, r3
 8001f84:	4620      	mov	r0, r4
 8001f86:	f7fe fdd5 	bl	8000b34 <__addsf3>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f8e7 	bl	8001160 <_ZSt4sqrtf>
 8001f92:	62f8      	str	r0, [r7, #44]	; 0x2c
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001f94:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe ff86 	bl	8000eac <__aeabi_fdiv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8d0 	bl	8001148 <_ZSt4asinf>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa3c 	bl	8000428 <__aeabi_f2d>
 8001fb0:	a341      	add	r3, pc, #260	; (adr r3, 80020b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fa8f 	bl	80004d8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fd61 	bl	8000a88 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001fca:	6013      	str	r3, [r2, #0]

		  EKF.Run(gyro,acc);
 8001fcc:	f107 0208 	add.w	r2, r7, #8
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4845      	ldr	r0, [pc, #276]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fd8:	f005 f892 	bl	8007100 <_ZN15Kalman_Filtresi3RunEPfS0_>
		  state.angles[0]  	  = EKF.state.angles[0];
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fde:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001fe2:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fe4:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fe8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fec:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fee:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001ff2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ff6:	4a3e      	ldr	r2, [pc, #248]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001ff8:	6093      	str	r3, [r2, #8]

		  state.rates[0] = gyroX;
 8001ffa:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3c      	ldr	r2, [pc, #240]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002000:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = -1*gyroY;
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800200a:	4a39      	ldr	r2, [pc, #228]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800200c:	6113      	str	r3, [r2, #16]
		  state.rates[2] = gyroZ;
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a37      	ldr	r2, [pc, #220]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002014:	6153      	str	r3, [r2, #20]

		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));


		  controller_output_ang = controller.Run(state, state_des, ch[2]);
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f107 0c20 	add.w	ip, r7, #32
 800201e:	4e34      	ldr	r6, [pc, #208]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002020:	9310      	str	r3, [sp, #64]	; 0x40
 8002022:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002024:	ac07      	add	r4, sp, #28
 8002026:	461d      	mov	r5, r3
 8002028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800202a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800202c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800202e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	6023      	str	r3, [r4, #0]
 8002034:	466d      	mov	r5, sp
 8002036:	f106 0408 	add.w	r4, r6, #8
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002042:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002046:	e896 000c 	ldmia.w	r6, {r2, r3}
 800204a:	492c      	ldr	r1, [pc, #176]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800204c:	4660      	mov	r0, ip
 800204e:	f004 fb05 	bl	800665c <_ZN10Controller3RunE5stateS0_i>
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	4619      	mov	r1, r3
 8002058:	4829      	ldr	r0, [pc, #164]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800205a:	f000 f994 	bl	8002386 <_ZNSt6vectorIdSaIdEEaSEOS1_>
 800205e:	f107 0320 	add.w	r3, r7, #32
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f974 	bl	8002350 <_ZNSt6vectorIdSaIdEED1Ev>
		  controller_output[0] = controller.controller_output_pwm[0];
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800206a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800206e:	4a25      	ldr	r2, [pc, #148]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002070:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002078:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800207a:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800207e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002082:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002084:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002088:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800208e:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002092:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002096:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002098:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800209c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80020a2:	6113      	str	r3, [r2, #16]

		  ie_roll_sat = controller.pid_roll.ie_roll_sat;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80020a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020aa:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e02d      	b.n	800210c <HAL_TIM_PeriodElapsedCallback+0x31c>
 80020b0:	00000000 	.word	0x00000000
 80020b4:	40506000 	.word	0x40506000
 80020b8:	d4fdf3b6 	.word	0xd4fdf3b6
 80020bc:	404ca978 	.word	0x404ca978
 80020c0:	20000298 	.word	0x20000298
 80020c4:	200003c8 	.word	0x200003c8
 80020c8:	200003b0 	.word	0x200003b0
 80020cc:	200003cc 	.word	0x200003cc
 80020d0:	200003b4 	.word	0x200003b4
 80020d4:	200003d0 	.word	0x200003d0
 80020d8:	200003b8 	.word	0x200003b8
 80020dc:	200003bc 	.word	0x200003bc
 80020e0:	200003c0 	.word	0x200003c0
 80020e4:	200003c4 	.word	0x200003c4
 80020e8:	200003d4 	.word	0x200003d4
 80020ec:	20000500 	.word	0x20000500
 80020f0:	20000400 	.word	0x20000400
 80020f4:	2000090c 	.word	0x2000090c
 80020f8:	200003dc 	.word	0x200003dc
 80020fc:	200006b8 	.word	0x200006b8
 8002100:	200008e8 	.word	0x200008e8
 8002104:	200008d8 	.word	0x200008d8
 8002108:	200003d8 	.word	0x200003d8

		  w_ang = controller.pd_roll;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800210e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8002112:	4919      	ldr	r1, [pc, #100]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002114:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002120:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800212a:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002134:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800213e:	801a      	strh	r2, [r3, #0]

		  if(armed) {
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <HAL_TIM_PeriodElapsedCallback+0x374>
			  if(!motor_start) {
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d004      	beq.n	8002160 <HAL_TIM_PeriodElapsedCallback+0x370>
				  MotorBaslat();
 8002156:	f7ff fe2d 	bl	8001db4 <_Z11MotorBaslatv>
				  motor_start = true;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
			  }

			  PWMYaz();
 8002160:	f7ff fdc4 	bl	8001cec <_Z6PWMYazv>
		  }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002164:	2102      	movs	r1, #2
 8002166:	480c      	ldr	r0, [pc, #48]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002168:	f001 f8da 	bl	8003320 <HAL_GPIO_TogglePin>

		}
	}
 800216c:	bf00      	nop
 800216e:	3734      	adds	r7, #52	; 0x34
 8002170:	46bd      	mov	sp, r7
 8002172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002174:	200006b8 	.word	0x200006b8
 8002178:	20000948 	.word	0x20000948
 800217c:	200008d8 	.word	0x200008d8
 8002180:	200008f4 	.word	0x200008f4
 8002184:	200008f6 	.word	0x200008f6
 8002188:	200008f8 	.word	0x200008f8
 800218c:	200008fa 	.word	0x200008fa
 8002190:	20000941 	.word	0x20000941
 8002194:	20000942 	.word	0x20000942
 8002198:	40010c00 	.word	0x40010c00

0800219c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a43      	ldr	r2, [pc, #268]	; (80022b4 <HAL_TIM_IC_CaptureCallback+0x118>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d17f      	bne.n	80022ac <HAL_TIM_IC_CaptureCallback+0x110>

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7f1b      	ldrb	r3, [r3, #28]
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d17b      	bne.n	80022ac <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a40      	ldr	r2, [pc, #256]	; (80022bc <HAL_TIM_IC_CaptureCallback+0x120>)
 80021ba:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80021bc:	2108      	movs	r1, #8
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f003 fb3c 	bl	800583c <HAL_TIM_ReadCapturedValue>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80021ca:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 80021cc:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_TIM_IC_CaptureCallback+0x120>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021d8:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0fdb      	lsrs	r3, r3, #31
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80021ee:	33ff      	adds	r3, #255	; 0xff
 80021f0:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021f2:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x128>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002202:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 8002206:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b21b      	sxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	bfcc      	ite	gt
 800221c:	2301      	movgt	r3, #1
 800221e:	2300      	movle	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8002226:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222c:	801a      	strh	r2, [r3, #0]
						sync = 1;
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x130>)
 8002230:	2201      	movs	r2, #1
 8002232:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	4824      	ldr	r0, [pc, #144]	; (80022d0 <HAL_TIM_IC_CaptureCallback+0x134>)
 800223e:	f006 f96a 	bl	8008516 <_ZN3PID7pwm2angEt>
 8002242:	4603      	mov	r3, r0
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002246:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4619      	mov	r1, r3
 8002250:	481f      	ldr	r0, [pc, #124]	; (80022d0 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002252:	f006 f960 	bl	8008516 <_ZN3PID7pwm2angEt>
 8002256:	4603      	mov	r3, r0
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_TIM_IC_CaptureCallback+0x138>)
 800225a:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_TIM_IC_CaptureCallback+0x138>)
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	4818      	ldr	r0, [pc, #96]	; (80022d0 <HAL_TIM_IC_CaptureCallback+0x134>)
 800226e:	f006 f97a 	bl	8008566 <_ZN3PID8pwm2rateEt>
 8002272:	4603      	mov	r3, r0
 8002274:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002276:	6153      	str	r3, [r2, #20]

				i++;
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x128>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b21b      	sxth	r3, r3
 800227e:	b29b      	uxth	r3, r3
 8002280:	3301      	adds	r3, #1
 8002282:	b29b      	uxth	r3, r3
 8002284:	b21a      	sxth	r2, r3
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002288:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x128>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b21b      	sxth	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002294:	fb83 2301 	smull	r2, r3, r3, r1
 8002298:	105a      	asrs	r2, r3, #1
 800229a:	17cb      	asrs	r3, r1, #31
 800229c:	1ad2      	subs	r2, r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	1aca      	subs	r2, r1, r3
 80022a6:	b212      	sxth	r2, r2
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022aa:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200002e0 	.word	0x200002e0
 80022b8:	200008fc 	.word	0x200008fc
 80022bc:	20000900 	.word	0x20000900
 80022c0:	20000904 	.word	0x20000904
 80022c4:	20000908 	.word	0x20000908
 80022c8:	2000090c 	.word	0x2000090c
 80022cc:	20000930 	.word	0x20000930
 80022d0:	20000648 	.word	0x20000648
 80022d4:	200003dc 	.word	0x200003dc
 80022d8:	38e38e39 	.word	0x38e38e39

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>

080022e6 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f85e 	bl	80023b0 <_ZNSaIdEC1Ev>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f866 	bl	80023c8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f86d 	bl	80023ee <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8002336:	461a      	mov	r2, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f862 	bl	8002402 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe ff19 	bl	8001178 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681c      	ldr	r4, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f860 	bl	8002428 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002368:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800236a:	461a      	mov	r2, r3
 800236c:	4629      	mov	r1, r5
 800236e:	4620      	mov	r0, r4
 8002370:	f000 f864 	bl	800243c <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ffd1 	bl	800231e <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bdb0      	pop	{r4, r5, r7, pc}

08002386 <_ZNSt6vectorIdSaIdEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002386:	b590      	push	{r4, r7, lr}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002394:	6838      	ldr	r0, [r7, #0]
 8002396:	f000 f85f 	bl	8002458 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>
 800239a:	4603      	mov	r3, r0
 800239c:	4622      	mov	r2, r4
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f863 	bl	800246c <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 80023a6:	687b      	ldr	r3, [r7, #4]
      }
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f895 	bl	80024e8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
	{ }
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
	if (__p)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f86e 	bl	80024fc <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f865 	bl	800251a <_ZSt8_DestroyIPdEvT_S1_>
    }
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f857 	bl	8002534 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>
 8002486:	f107 021c 	add.w	r2, r7, #28
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f860 	bl	8002556 <_ZNSt6vectorIdSaIdEEC1ERKS0_>
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff33 	bl	8002306 <_ZNSaIdED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f864 	bl	8002574 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	f107 0310 	add.w	r3, r7, #16
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f85d 	bl	8002574 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ffb3 	bl	8002428 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80024c2:	4604      	mov	r4, r0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ffae 	bl	8002428 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4619      	mov	r1, r3
 80024d0:	4620      	mov	r0, r4
 80024d2:	f000 f86d 	bl	80025b0 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>
	vector __tmp(get_allocator());
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff38 	bl	8002350 <_ZNSt6vectorIdSaIdEED1Ev>
      }
 80024e0:	bf00      	nop
 80024e2:	3724      	adds	r7, #36	; 0x24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}

080024e8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f85d 	bl	80025cc <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f85d 	bl	80025e6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 800253e:	6838      	ldr	r0, [r7, #0]
 8002540:	f000 f85b 	bl	80025fa <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002544:	4603      	mov	r3, r0
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f860 	bl	800260e <_ZNSaIdEC1ERKS_>
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f860 	bl	800262a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff20 	bl	80023c8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f85a 	bl	8002648 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f856 	bl	8002648 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	4619      	mov	r1, r3
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	f000 f850 	bl	8002648 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 80025ba:	461a      	mov	r2, r3
 80025bc:	6839      	ldr	r1, [r7, #0]
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f858 	bl	8002674 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	f006 f83f 	bl	800865c <_ZdlPv>
      }
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f837 	bl	800268e <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f833 	bl	80026a4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	609a      	str	r2, [r3, #8]
	}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	f000 f821 	bl	80026c8 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ffac 	bl	800260e <_ZNSaIdEC1ERKS_>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fe85 	bl	80023c8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d110      	bne.n	800270e <_Z41__static_initialization_and_destruction_0ii+0x32>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10b      	bne.n	800270e <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 80026f6:	4812      	ldr	r0, [pc, #72]	; (8002740 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80026f8:	f004 fca2 	bl	8007040 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 80026fc:	4811      	ldr	r0, [pc, #68]	; (8002744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80026fe:	f005 fc91 	bl	8008024 <_ZN3PIDC1Ev>
Controller controller;
 8002702:	4811      	ldr	r0, [pc, #68]	; (8002748 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002704:	f003 ff24 	bl	8006550 <_ZN10ControllerC1Ev>
std::vector<double> controller_output_ang;
 8002708:	4810      	ldr	r0, [pc, #64]	; (800274c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800270a:	f7fe fd4e 	bl	80011aa <_ZNSt6vectorIdSaIdEEC1Ev>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d110      	bne.n	8002736 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271a:	4293      	cmp	r3, r2
 800271c:	d10b      	bne.n	8002736 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800271e:	480b      	ldr	r0, [pc, #44]	; (800274c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002720:	f7ff fe16 	bl	8002350 <_ZNSt6vectorIdSaIdEED1Ev>
Controller controller;
 8002724:	4808      	ldr	r0, [pc, #32]	; (8002748 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002726:	f004 fa4c 	bl	8006bc2 <_ZN10ControllerD1Ev>
PID pid;
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800272c:	f005 ff8c 	bl	8008648 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002732:	f005 fc21 	bl	8007f78 <_ZN15Kalman_FiltresiD1Ev>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000500 	.word	0x20000500
 8002744:	20000648 	.word	0x20000648
 8002748:	200006b8 	.word	0x200006b8
 800274c:	200008e8 	.word	0x200008e8

08002750 <_GLOBAL__sub_I_hi2c1>:
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
 8002754:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff ffbf 	bl	80026dc <_Z41__static_initialization_and_destruction_0ii>
 800275e:	bd80      	pop	{r7, pc}

08002760 <_GLOBAL__sub_D_hi2c1>:
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
 8002764:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff ffb7 	bl	80026dc <_Z41__static_initialization_and_destruction_0ii>
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_MspInit+0x5c>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_MspInit+0x5c>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6193      	str	r3, [r2, #24]
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_MspInit+0x5c>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_MspInit+0x5c>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_MspInit+0x5c>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_MspInit+0x5c>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_MspInit+0x60>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_MspInit+0x60>)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000

080027d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <HAL_I2C_MspInit+0x70>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d123      	bne.n	800283c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_I2C_MspInit+0x74>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a13      	ldr	r2, [pc, #76]	; (8002848 <HAL_I2C_MspInit+0x74>)
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_I2C_MspInit+0x74>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800280c:	23c0      	movs	r3, #192	; 0xc0
 800280e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002810:	2312      	movs	r3, #18
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	4619      	mov	r1, r3
 800281e:	480b      	ldr	r0, [pc, #44]	; (800284c <HAL_I2C_MspInit+0x78>)
 8002820:	f000 fbe2 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_I2C_MspInit+0x74>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_I2C_MspInit+0x74>)
 800282a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800282e:	61d3      	str	r3, [r2, #28]
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_I2C_MspInit+0x74>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40005400 	.word	0x40005400
 8002848:	40021000 	.word	0x40021000
 800284c:	40010c00 	.word	0x40010c00

08002850 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_TIM_PWM_MspInit+0x34>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10b      	bne.n	800287a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_TIM_PWM_MspInit+0x38>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_TIM_PWM_MspInit+0x38>)
 8002868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800286c:	6193      	str	r3, [r2, #24]
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_TIM_PWM_MspInit+0x38>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40021000 	.word	0x40021000

0800288c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d114      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	61d3      	str	r3, [r2, #28]
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2101      	movs	r1, #1
 80028c8:	201c      	movs	r0, #28
 80028ca:	f000 fb56 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028ce:	201c      	movs	r0, #28
 80028d0:	f000 fb6f 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028d4:	e042      	b.n	800295c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a23      	ldr	r2, [pc, #140]	; (8002968 <HAL_TIM_Base_MspInit+0xdc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d12c      	bne.n	800293a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	61d3      	str	r3, [r2, #28]
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028fe:	f043 0308 	orr.w	r3, r3, #8
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002910:	2301      	movs	r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	4619      	mov	r1, r3
 8002922:	4812      	ldr	r0, [pc, #72]	; (800296c <HAL_TIM_Base_MspInit+0xe0>)
 8002924:	f000 fb60 	bl	8002fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	201d      	movs	r0, #29
 800292e:	f000 fb24 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002932:	201d      	movs	r0, #29
 8002934:	f000 fb3d 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8002938:	e010      	b.n	800295c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <HAL_TIM_Base_MspInit+0xe4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10b      	bne.n	800295c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4a06      	ldr	r2, [pc, #24]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	61d3      	str	r3, [r2, #28]
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
}
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	40000400 	.word	0x40000400
 800296c:	40010c00 	.word	0x40010c00
 8002970:	40000800 	.word	0x40000800

08002974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_TIM_MspPostInit+0x5c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d118      	bne.n	80029c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_TIM_MspPostInit+0x60>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <HAL_TIM_MspPostInit+0x60>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_TIM_MspPostInit+0x60>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80029ac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80029b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <HAL_TIM_MspPostInit+0x64>)
 80029c2:	f000 fb11 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010800 	.word	0x40010800

080029dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_UART_MspInit+0x88>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d12f      	bne.n	8002a5c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_UART_MspInit+0x8c>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <HAL_UART_MspInit+0x8c>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_UART_MspInit+0x8c>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_UART_MspInit+0x8c>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_UART_MspInit+0x8c>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_UART_MspInit+0x8c>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a40:	f000 fad2 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a44:	2308      	movs	r3, #8
 8002a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	4619      	mov	r1, r3
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_UART_MspInit+0x90>)
 8002a58:	f000 fac6 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a5c:	bf00      	nop
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010800 	.word	0x40010800

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <NMI_Handler+0x4>

08002a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <MemManage_Handler+0x4>

08002a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler+0x4>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <UsageFault_Handler+0x4>

08002a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab6:	f000 f949 	bl	8002d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <TIM2_IRQHandler+0x10>)
 8002ac6:	f002 fb9b 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000298 	.word	0x20000298

08002ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <TIM3_IRQHandler+0x10>)
 8002ada:	f002 fb91 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200002e0 	.word	0x200002e0

08002ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
	return 1;
 8002aec:	2301      	movs	r3, #1
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <_kill>:

int _kill(int pid, int sig)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b00:	f006 f96a 	bl	8008dd8 <__errno>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2216      	movs	r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
	return -1;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_exit>:

void _exit (int status)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ffe7 	bl	8002af6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b28:	e7fe      	b.n	8002b28 <_exit+0x12>

08002b2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e00a      	b.n	8002b52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b3c:	f3af 8000 	nop.w
 8002b40:	4601      	mov	r1, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	60ba      	str	r2, [r7, #8]
 8002b48:	b2ca      	uxtb	r2, r1
 8002b4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dbf0      	blt.n	8002b3c <_read+0x12>
	}

return len;
 8002b5a:	687b      	ldr	r3, [r7, #4]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e009      	b.n	8002b8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	60ba      	str	r2, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbf1      	blt.n	8002b76 <_write+0x12>
	}
	return len;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_close>:

int _close(int file)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <_isatty>:

int _isatty(int file)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	return 1;
 8002bd8:	2301      	movs	r3, #1
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f006 f8d4 	bl	8008dd8 <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20005000 	.word	0x20005000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	20000950 	.word	0x20000950
 8002c64:	20000978 	.word	0x20000978

08002c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c76:	e003      	b.n	8002c80 <LoopCopyDataInit>

08002c78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c7e:	3104      	adds	r1, #4

08002c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c88:	d3f6      	bcc.n	8002c78 <CopyDataInit>
  ldr r2, =_sbss
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c8c:	e002      	b.n	8002c94 <LoopFillZerobss>

08002c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c90:	f842 3b04 	str.w	r3, [r2], #4

08002c94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c98:	d3f9      	bcc.n	8002c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c9a:	f7ff ffe5 	bl	8002c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f006 f8a1 	bl	8008de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ca2:	f7fe fa8f 	bl	80011c4 <main>
  bx lr
 8002ca6:	4770      	bx	lr
  ldr r3, =_sidata
 8002ca8:	0800bcbc 	.word	0x0800bcbc
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002cb0:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002cb4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002cb8:	20000974 	.word	0x20000974

08002cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cbc:	e7fe      	b.n	8002cbc <ADC1_2_IRQHandler>
	...

08002cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_Init+0x28>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_Init+0x28>)
 8002cca:	f043 0310 	orr.w	r3, r3, #16
 8002cce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f000 f947 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f000 f808 	bl	8002cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cdc:	f7ff fd48 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40022000 	.word	0x40022000

08002cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x54>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x58>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f95f 	bl	8002fce <HAL_SYSTICK_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00e      	b.n	8002d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d80a      	bhi.n	8002d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d20:	2200      	movs	r2, #0
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f000 f927 	bl	8002f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d2c:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <HAL_InitTick+0x5c>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000008 	.word	0x20000008
 8002d48:	20000004 	.word	0x20000004

08002d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_IncTick+0x1c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_IncTick+0x20>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_IncTick+0x20>)
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	20000960 	.word	0x20000960

08002d70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return uwTick;
 8002d74:	4b02      	ldr	r3, [pc, #8]	; (8002d80 <HAL_GetTick+0x10>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000960 	.word	0x20000960

08002d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d005      	beq.n	8002daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_Delay+0x44>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002daa:	bf00      	nop
 8002dac:	f7ff ffe0 	bl	8002d70 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8f7      	bhi.n	8002dac <HAL_Delay+0x28>
  {
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <__NVIC_EnableIRQ+0x34>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100

08002e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db0a      	blt.n	8002e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	490c      	ldr	r1, [pc, #48]	; (8002eb4 <__NVIC_SetPriority+0x4c>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e90:	e00a      	b.n	8002ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <__NVIC_SetPriority+0x50>)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	761a      	strb	r2, [r3, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	bf28      	it	cs
 8002eda:	2304      	movcs	r3, #4
 8002edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <NVIC_EncodePriority+0x30>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3b03      	subs	r3, #3
 8002eea:	e000      	b.n	8002eee <NVIC_EncodePriority+0x32>
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	401a      	ands	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	4313      	orrs	r3, r2
         );
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f30:	d301      	bcc.n	8002f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <SysTick_Config+0x40>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3e:	210f      	movs	r1, #15
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f7ff ff90 	bl	8002e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <SysTick_Config+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <SysTick_Config+0x40>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010

08002f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff2d 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8c:	f7ff ff42 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f7ff ff90 	bl	8002ebc <NVIC_EncodePriority>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff5f 	bl	8002e68 <__NVIC_SetPriority>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff35 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffa2 	bl	8002f20 <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b08b      	sub	sp, #44	; 0x2c
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffa:	e169      	b.n	80032d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8158 	bne.w	80032ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a9a      	ldr	r2, [pc, #616]	; (8003288 <HAL_GPIO_Init+0x2a0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d05e      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003024:	4a98      	ldr	r2, [pc, #608]	; (8003288 <HAL_GPIO_Init+0x2a0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d875      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800302a:	4a98      	ldr	r2, [pc, #608]	; (800328c <HAL_GPIO_Init+0x2a4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d058      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003030:	4a96      	ldr	r2, [pc, #600]	; (800328c <HAL_GPIO_Init+0x2a4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d86f      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003036:	4a96      	ldr	r2, [pc, #600]	; (8003290 <HAL_GPIO_Init+0x2a8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d052      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 800303c:	4a94      	ldr	r2, [pc, #592]	; (8003290 <HAL_GPIO_Init+0x2a8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d869      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003042:	4a94      	ldr	r2, [pc, #592]	; (8003294 <HAL_GPIO_Init+0x2ac>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d04c      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003048:	4a92      	ldr	r2, [pc, #584]	; (8003294 <HAL_GPIO_Init+0x2ac>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d863      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800304e:	4a92      	ldr	r2, [pc, #584]	; (8003298 <HAL_GPIO_Init+0x2b0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d046      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003054:	4a90      	ldr	r2, [pc, #576]	; (8003298 <HAL_GPIO_Init+0x2b0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d85d      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800305a:	2b12      	cmp	r3, #18
 800305c:	d82a      	bhi.n	80030b4 <HAL_GPIO_Init+0xcc>
 800305e:	2b12      	cmp	r3, #18
 8003060:	d859      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <HAL_GPIO_Init+0x80>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	080030e3 	.word	0x080030e3
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080030cf 	.word	0x080030cf
 8003074:	08003111 	.word	0x08003111
 8003078:	08003117 	.word	0x08003117
 800307c:	08003117 	.word	0x08003117
 8003080:	08003117 	.word	0x08003117
 8003084:	08003117 	.word	0x08003117
 8003088:	08003117 	.word	0x08003117
 800308c:	08003117 	.word	0x08003117
 8003090:	08003117 	.word	0x08003117
 8003094:	08003117 	.word	0x08003117
 8003098:	08003117 	.word	0x08003117
 800309c:	08003117 	.word	0x08003117
 80030a0:	08003117 	.word	0x08003117
 80030a4:	08003117 	.word	0x08003117
 80030a8:	08003117 	.word	0x08003117
 80030ac:	080030c5 	.word	0x080030c5
 80030b0:	080030d9 	.word	0x080030d9
 80030b4:	4a79      	ldr	r2, [pc, #484]	; (800329c <HAL_GPIO_Init+0x2b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ba:	e02c      	b.n	8003116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	623b      	str	r3, [r7, #32]
          break;
 80030c2:	e029      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	3304      	adds	r3, #4
 80030ca:	623b      	str	r3, [r7, #32]
          break;
 80030cc:	e024      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	3308      	adds	r3, #8
 80030d4:	623b      	str	r3, [r7, #32]
          break;
 80030d6:	e01f      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	330c      	adds	r3, #12
 80030de:	623b      	str	r3, [r7, #32]
          break;
 80030e0:	e01a      	b.n	8003118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ea:	2304      	movs	r3, #4
 80030ec:	623b      	str	r3, [r7, #32]
          break;
 80030ee:	e013      	b.n	8003118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	611a      	str	r2, [r3, #16]
          break;
 8003102:	e009      	b.n	8003118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003104:	2308      	movs	r3, #8
 8003106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	615a      	str	r2, [r3, #20]
          break;
 800310e:	e003      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
          break;
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x130>
          break;
 8003116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	d801      	bhi.n	8003122 <HAL_GPIO_Init+0x13a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	e001      	b.n	8003126 <HAL_GPIO_Init+0x13e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	d802      	bhi.n	8003134 <HAL_GPIO_Init+0x14c>
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	e002      	b.n	800313a <HAL_GPIO_Init+0x152>
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	3b08      	subs	r3, #8
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	210f      	movs	r1, #15
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	431a      	orrs	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80b1 	beq.w	80032ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_GPIO_Init+0x2b8>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4a4c      	ldr	r2, [pc, #304]	; (80032a0 <HAL_GPIO_Init+0x2b8>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6193      	str	r3, [r2, #24]
 8003174:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_GPIO_Init+0x2b8>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003180:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_GPIO_Init+0x2bc>)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <HAL_GPIO_Init+0x2c0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_GPIO_Init+0x1ec>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3f      	ldr	r2, [pc, #252]	; (80032ac <HAL_GPIO_Init+0x2c4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00d      	beq.n	80031d0 <HAL_GPIO_Init+0x1e8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3e      	ldr	r2, [pc, #248]	; (80032b0 <HAL_GPIO_Init+0x2c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <HAL_GPIO_Init+0x1e4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3d      	ldr	r2, [pc, #244]	; (80032b4 <HAL_GPIO_Init+0x2cc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_GPIO_Init+0x1e0>
 80031c4:	2303      	movs	r3, #3
 80031c6:	e006      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e004      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031d4:	2300      	movs	r3, #0
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	4093      	lsls	r3, r2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031e6:	492f      	ldr	r1, [pc, #188]	; (80032a4 <HAL_GPIO_Init+0x2bc>)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	492c      	ldr	r1, [pc, #176]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	43db      	mvns	r3, r3
 8003216:	4928      	ldr	r1, [pc, #160]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003218:	4013      	ands	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4922      	ldr	r1, [pc, #136]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	491e      	ldr	r1, [pc, #120]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003240:	4013      	ands	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	4918      	ldr	r1, [pc, #96]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	43db      	mvns	r3, r3
 8003266:	4914      	ldr	r1, [pc, #80]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003268:	4013      	ands	r3, r2
 800326a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d021      	beq.n	80032bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	490e      	ldr	r1, [pc, #56]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	60cb      	str	r3, [r1, #12]
 8003284:	e021      	b.n	80032ca <HAL_GPIO_Init+0x2e2>
 8003286:	bf00      	nop
 8003288:	10320000 	.word	0x10320000
 800328c:	10310000 	.word	0x10310000
 8003290:	10220000 	.word	0x10220000
 8003294:	10210000 	.word	0x10210000
 8003298:	10120000 	.word	0x10120000
 800329c:	10110000 	.word	0x10110000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010800 	.word	0x40010800
 80032ac:	40010c00 	.word	0x40010c00
 80032b0:	40011000 	.word	0x40011000
 80032b4:	40011400 	.word	0x40011400
 80032b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_GPIO_Init+0x304>)
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	4909      	ldr	r1, [pc, #36]	; (80032ec <HAL_GPIO_Init+0x304>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	3301      	adds	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f47f ae8e 	bne.w	8002ffc <HAL_GPIO_Init+0x14>
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	372c      	adds	r7, #44	; 0x2c
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40010400 	.word	0x40010400

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800330c:	e003      	b.n	8003316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43d9      	mvns	r1, r3
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	400b      	ands	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	611a      	str	r2, [r3, #16]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e12b      	b.n	80035be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fa2a 	bl	80027d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b8:	f001 fba0 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 80033bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4a81      	ldr	r2, [pc, #516]	; (80035c8 <HAL_I2C_Init+0x274>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d807      	bhi.n	80033d8 <HAL_I2C_Init+0x84>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a80      	ldr	r2, [pc, #512]	; (80035cc <HAL_I2C_Init+0x278>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e006      	b.n	80033e6 <HAL_I2C_Init+0x92>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a7d      	ldr	r2, [pc, #500]	; (80035d0 <HAL_I2C_Init+0x27c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf94      	ite	ls
 80033e0:	2301      	movls	r3, #1
 80033e2:	2300      	movhi	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0e7      	b.n	80035be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4a78      	ldr	r2, [pc, #480]	; (80035d4 <HAL_I2C_Init+0x280>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0c9b      	lsrs	r3, r3, #18
 80033f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a6a      	ldr	r2, [pc, #424]	; (80035c8 <HAL_I2C_Init+0x274>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d802      	bhi.n	8003428 <HAL_I2C_Init+0xd4>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3301      	adds	r3, #1
 8003426:	e009      	b.n	800343c <HAL_I2C_Init+0xe8>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	4a69      	ldr	r2, [pc, #420]	; (80035d8 <HAL_I2C_Init+0x284>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	3301      	adds	r3, #1
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	430b      	orrs	r3, r1
 8003442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800344e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	495c      	ldr	r1, [pc, #368]	; (80035c8 <HAL_I2C_Init+0x274>)
 8003458:	428b      	cmp	r3, r1
 800345a:	d819      	bhi.n	8003490 <HAL_I2C_Init+0x13c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e59      	subs	r1, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fbb1 f3f3 	udiv	r3, r1, r3
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003470:	400b      	ands	r3, r1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_I2C_Init+0x138>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1e59      	subs	r1, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fbb1 f3f3 	udiv	r3, r1, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348a:	e051      	b.n	8003530 <HAL_I2C_Init+0x1dc>
 800348c:	2304      	movs	r3, #4
 800348e:	e04f      	b.n	8003530 <HAL_I2C_Init+0x1dc>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d111      	bne.n	80034bc <HAL_I2C_Init+0x168>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1e58      	subs	r0, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	440b      	add	r3, r1
 80034a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e012      	b.n	80034e2 <HAL_I2C_Init+0x18e>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1e58      	subs	r0, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	0099      	lsls	r1, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Init+0x196>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e022      	b.n	8003530 <HAL_I2C_Init+0x1dc>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10e      	bne.n	8003510 <HAL_I2C_Init+0x1bc>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1e58      	subs	r0, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	440b      	add	r3, r1
 8003500:	fbb0 f3f3 	udiv	r3, r0, r3
 8003504:	3301      	adds	r3, #1
 8003506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350e:	e00f      	b.n	8003530 <HAL_I2C_Init+0x1dc>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1e58      	subs	r0, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6859      	ldr	r1, [r3, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	0099      	lsls	r1, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	fbb0 f3f3 	udiv	r3, r0, r3
 8003526:	3301      	adds	r3, #1
 8003528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	6809      	ldr	r1, [r1, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800355e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6911      	ldr	r1, [r2, #16]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68d2      	ldr	r2, [r2, #12]
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	430b      	orrs	r3, r1
 8003572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	000186a0 	.word	0x000186a0
 80035cc:	001e847f 	.word	0x001e847f
 80035d0:	003d08ff 	.word	0x003d08ff
 80035d4:	431bde83 	.word	0x431bde83
 80035d8:	10624dd3 	.word	0x10624dd3

080035dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	817b      	strh	r3, [r7, #10]
 80035ee:	460b      	mov	r3, r1
 80035f0:	813b      	strh	r3, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035f6:	f7ff fbbb 	bl	8002d70 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	f040 80d9 	bne.w	80037bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2319      	movs	r3, #25
 8003610:	2201      	movs	r2, #1
 8003612:	496d      	ldr	r1, [pc, #436]	; (80037c8 <HAL_I2C_Mem_Write+0x1ec>)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fcc1 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
 8003622:	e0cc      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Mem_Write+0x56>
 800362e:	2302      	movs	r3, #2
 8003630:	e0c5      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d007      	beq.n	8003658 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2221      	movs	r2, #33	; 0x21
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2240      	movs	r2, #64	; 0x40
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <HAL_I2C_Mem_Write+0x1f0>)
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800369a:	88f8      	ldrh	r0, [r7, #6]
 800369c:	893a      	ldrh	r2, [r7, #8]
 800369e:	8979      	ldrh	r1, [r7, #10]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4603      	mov	r3, r0
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 faf8 	bl	8003ca0 <I2C_RequestMemoryWrite>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d052      	beq.n	800375c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e081      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fd42 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d107      	bne.n	80036e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06b      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b04      	cmp	r3, #4
 8003722:	d11b      	bne.n	800375c <HAL_I2C_Mem_Write+0x180>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1aa      	bne.n	80036ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fd2e 	bl	80041ca <I2C_WaitOnBTFFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b04      	cmp	r3, #4
 800377a:	d107      	bne.n	800378c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e016      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	00100002 	.word	0x00100002
 80037cc:	ffff0000 	.word	0xffff0000

080037d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ee:	f7ff fabf 	bl	8002d70 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	f040 8244 	bne.w	8003c8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2319      	movs	r3, #25
 8003808:	2201      	movs	r2, #1
 800380a:	4982      	ldr	r1, [pc, #520]	; (8003a14 <HAL_I2C_Mem_Read+0x244>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fbc5 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
 800381a:	e237      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_I2C_Mem_Read+0x5a>
 8003826:	2302      	movs	r3, #2
 8003828:	e230      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d007      	beq.n	8003850 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2222      	movs	r2, #34	; 0x22
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a62      	ldr	r2, [pc, #392]	; (8003a18 <HAL_I2C_Mem_Read+0x248>)
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003892:	88f8      	ldrh	r0, [r7, #6]
 8003894:	893a      	ldrh	r2, [r7, #8]
 8003896:	8979      	ldrh	r1, [r7, #10]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	4603      	mov	r3, r0
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fa92 	bl	8003dcc <I2C_RequestMemoryRead>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1ec      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d113      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e1c0      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d11e      	bne.n	8003928 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038fa:	b672      	cpsid	i
}
 80038fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003924:	b662      	cpsie	i
}
 8003926:	e035      	b.n	8003994 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b02      	cmp	r3, #2
 800392e:	d11e      	bne.n	800396e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800393e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003940:	b672      	cpsid	i
}
 8003942:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800396a:	b662      	cpsie	i
}
 800396c:	e012      	b.n	8003994 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003994:	e166      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	2b03      	cmp	r3, #3
 800399c:	f200 811f 	bhi.w	8003bde <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d123      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fc4d 	bl	800424c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e167      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ee:	e139      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d152      	bne.n	8003a9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2200      	movs	r2, #0
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_I2C_Mem_Read+0x24c>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 faca 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e13c      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
 8003a12:	bf00      	nop
 8003a14:	00100002 	.word	0x00100002
 8003a18:	ffff0000 	.word	0xffff0000
 8003a1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a20:	b672      	cpsid	i
}
 8003a22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a66:	b662      	cpsie	i
}
 8003a68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a9c:	e0e2      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	497b      	ldr	r1, [pc, #492]	; (8003c94 <HAL_I2C_Mem_Read+0x4c4>)
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fa77 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0e9      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac8:	b672      	cpsid	i
}
 8003aca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003afe:	4b66      	ldr	r3, [pc, #408]	; (8003c98 <HAL_I2C_Mem_Read+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	08db      	lsrs	r3, r3, #3
 8003b04:	4a65      	ldr	r2, [pc, #404]	; (8003c9c <HAL_I2C_Mem_Read+0x4cc>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0a1a      	lsrs	r2, r3, #8
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00da      	lsls	r2, r3, #3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d118      	bne.n	8003b56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b46:	b662      	cpsie	i
}
 8003b48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e09a      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d1d9      	bne.n	8003b18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba6:	b662      	cpsie	i
}
 8003ba8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bdc:	e042      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fb32 	bl	800424c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e04c      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d118      	bne.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f ae94 	bne.w	8003996 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	00010004 	.word	0x00010004
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	14f8b589 	.word	0x14f8b589

08003ca0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	813b      	strh	r3, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f960 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d103      	bne.n	8003cfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e05f      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <I2C_RequestMemoryWrite+0x128>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f998 	bl	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04c      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa02 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02b      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e021      	b.n	8003dbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f9dc 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d107      	bne.n	8003dae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e005      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db2:	893b      	ldrh	r3, [r7, #8]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00010002 	.word	0x00010002

08003dcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f8c2 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2c:	d103      	bne.n	8003e36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0aa      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e3a:	897b      	ldrh	r3, [r7, #10]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	4952      	ldr	r1, [pc, #328]	; (8003f98 <I2C_RequestMemoryRead+0x1cc>)
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f8fa 	bl	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e097      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f964 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d107      	bne.n	8003e9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e076      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea8:	893b      	ldrh	r3, [r7, #8]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	611a      	str	r2, [r3, #16]
 8003eb2:	e021      	b.n	8003ef8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb4:	893b      	ldrh	r3, [r7, #8]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	6a39      	ldr	r1, [r7, #32]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f93e 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d107      	bne.n	8003eea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e050      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eee:	893b      	ldrh	r3, [r7, #8]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	6a39      	ldr	r1, [r7, #32]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f923 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d107      	bne.n	8003f20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e035      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f82b 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5a:	d103      	bne.n	8003f64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e013      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f68:	897b      	ldrh	r3, [r7, #10]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	4906      	ldr	r1, [pc, #24]	; (8003f98 <I2C_RequestMemoryRead+0x1cc>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f863 	bl	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	00010002 	.word	0x00010002

08003f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fac:	e025      	b.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d021      	beq.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fe fedb 	bl	8002d70 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d116      	bne.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e023      	b.n	8004042 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10d      	bne.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	e00c      	b.n	800403a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	429a      	cmp	r2, r3
 800403e:	d0b6      	beq.n	8003fae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004058:	e051      	b.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	d123      	bne.n	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004082:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e046      	b.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d021      	beq.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe fe59 	bl	8002d70 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e020      	b.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d10c      	bne.n	8004122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	43da      	mvns	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e00b      	b.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d18d      	bne.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004154:	e02d      	b.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f8ce 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02d      	b.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d021      	beq.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fe fdff 	bl	8002d70 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d116      	bne.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e007      	b.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b80      	cmp	r3, #128	; 0x80
 80041be:	d1ca      	bne.n	8004156 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d6:	e02d      	b.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f88d 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e02d      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d021      	beq.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fe fdbe 	bl	8002d70 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d116      	bne.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e007      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d1ca      	bne.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004258:	e042      	b.n	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d119      	bne.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e029      	b.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429c:	f7fe fd68 	bl	8002d70 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b40      	cmp	r3, #64	; 0x40
 80042ec:	d1b5      	bne.n	800425a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430e:	d11b      	bne.n	8004348 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004318:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f043 0204 	orr.w	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e26c      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 8087 	beq.w	8004482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004374:	4b92      	ldr	r3, [pc, #584]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b04      	cmp	r3, #4
 800437e:	d00c      	beq.n	800439a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004380:	4b8f      	ldr	r3, [pc, #572]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b08      	cmp	r3, #8
 800438a:	d112      	bne.n	80043b2 <HAL_RCC_OscConfig+0x5e>
 800438c:	4b8c      	ldr	r3, [pc, #560]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d10b      	bne.n	80043b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439a:	4b89      	ldr	r3, [pc, #548]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d06c      	beq.n	8004480 <HAL_RCC_OscConfig+0x12c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d168      	bne.n	8004480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e246      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x76>
 80043bc:	4b80      	ldr	r3, [pc, #512]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a7f      	ldr	r2, [pc, #508]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	e02e      	b.n	8004428 <HAL_RCC_OscConfig+0xd4>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x98>
 80043d2:	4b7b      	ldr	r3, [pc, #492]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a7a      	ldr	r2, [pc, #488]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b78      	ldr	r3, [pc, #480]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a77      	ldr	r2, [pc, #476]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e01d      	b.n	8004428 <HAL_RCC_OscConfig+0xd4>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0xbc>
 80043f6:	4b72      	ldr	r3, [pc, #456]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a71      	ldr	r2, [pc, #452]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b6f      	ldr	r3, [pc, #444]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a6e      	ldr	r2, [pc, #440]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0xd4>
 8004410:	4b6b      	ldr	r3, [pc, #428]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6a      	ldr	r2, [pc, #424]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b68      	ldr	r3, [pc, #416]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a67      	ldr	r2, [pc, #412]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d013      	beq.n	8004458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fe fc9e 	bl	8002d70 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe fc9a 	bl	8002d70 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1fa      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b5d      	ldr	r3, [pc, #372]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0xe4>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fc8a 	bl	8002d70 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe fc86 	bl	8002d70 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1e6      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004472:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x10c>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d063      	beq.n	8004556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800448e:	4b4c      	ldr	r3, [pc, #304]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800449a:	4b49      	ldr	r3, [pc, #292]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d11c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x18c>
 80044a6:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d116      	bne.n	80044e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	4b43      	ldr	r3, [pc, #268]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_RCC_OscConfig+0x176>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d001      	beq.n	80044ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e1ba      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4939      	ldr	r1, [pc, #228]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	e03a      	b.n	8004556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e8:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <HAL_RCC_OscConfig+0x270>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ee:	f7fe fc3f 	bl	8002d70 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f6:	f7fe fc3b 	bl	8002d70 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e19b      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004508:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004514:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4927      	ldr	r1, [pc, #156]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]
 8004528:	e015      	b.n	8004556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452a:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <HAL_RCC_OscConfig+0x270>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fe fc1e 	bl	8002d70 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004538:	f7fe fc1a 	bl	8002d70 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e17a      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454a:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d03a      	beq.n	80045d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d019      	beq.n	800459e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004570:	f7fe fbfe 	bl	8002d70 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004578:	f7fe fbfa 	bl	8002d70 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e15a      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RCC_OscConfig+0x26c>)
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004596:	2001      	movs	r0, #1
 8004598:	f000 fad8 	bl	8004b4c <RCC_Delay>
 800459c:	e01c      	b.n	80045d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a4:	f7fe fbe4 	bl	8002d70 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045aa:	e00f      	b.n	80045cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ac:	f7fe fbe0 	bl	8002d70 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d908      	bls.n	80045cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e140      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	42420000 	.word	0x42420000
 80045c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045cc:	4b9e      	ldr	r3, [pc, #632]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e9      	bne.n	80045ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80a6 	beq.w	8004732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ea:	4b97      	ldr	r3, [pc, #604]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f6:	4b94      	ldr	r3, [pc, #592]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4a93      	ldr	r2, [pc, #588]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004600:	61d3      	str	r3, [r2, #28]
 8004602:	4b91      	ldr	r3, [pc, #580]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	4b8e      	ldr	r3, [pc, #568]	; (800484c <HAL_RCC_OscConfig+0x4f8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d118      	bne.n	8004650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461e:	4b8b      	ldr	r3, [pc, #556]	; (800484c <HAL_RCC_OscConfig+0x4f8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a8a      	ldr	r2, [pc, #552]	; (800484c <HAL_RCC_OscConfig+0x4f8>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462a:	f7fe fba1 	bl	8002d70 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004632:	f7fe fb9d 	bl	8002d70 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b64      	cmp	r3, #100	; 0x64
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e0fd      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	4b81      	ldr	r3, [pc, #516]	; (800484c <HAL_RCC_OscConfig+0x4f8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x312>
 8004658:	4b7b      	ldr	r3, [pc, #492]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	4a7a      	ldr	r2, [pc, #488]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6213      	str	r3, [r2, #32]
 8004664:	e02d      	b.n	80046c2 <HAL_RCC_OscConfig+0x36e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x334>
 800466e:	4b76      	ldr	r3, [pc, #472]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4a75      	ldr	r2, [pc, #468]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	6213      	str	r3, [r2, #32]
 800467a:	4b73      	ldr	r3, [pc, #460]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4a72      	ldr	r2, [pc, #456]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	6213      	str	r3, [r2, #32]
 8004686:	e01c      	b.n	80046c2 <HAL_RCC_OscConfig+0x36e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d10c      	bne.n	80046aa <HAL_RCC_OscConfig+0x356>
 8004690:	4b6d      	ldr	r3, [pc, #436]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4a6c      	ldr	r2, [pc, #432]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004696:	f043 0304 	orr.w	r3, r3, #4
 800469a:	6213      	str	r3, [r2, #32]
 800469c:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4a69      	ldr	r2, [pc, #420]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6213      	str	r3, [r2, #32]
 80046a8:	e00b      	b.n	80046c2 <HAL_RCC_OscConfig+0x36e>
 80046aa:	4b67      	ldr	r3, [pc, #412]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4a66      	ldr	r2, [pc, #408]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6213      	str	r3, [r2, #32]
 80046b6:	4b64      	ldr	r3, [pc, #400]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4a63      	ldr	r2, [pc, #396]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d015      	beq.n	80046f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7fe fb51 	bl	8002d70 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fe fb4d 	bl	8002d70 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e0ab      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	4b57      	ldr	r3, [pc, #348]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ee      	beq.n	80046d2 <HAL_RCC_OscConfig+0x37e>
 80046f4:	e014      	b.n	8004720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fe fb3b 	bl	8002d70 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fe fb37 	bl	8002d70 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e095      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004714:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ee      	bne.n	80046fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004726:	4b48      	ldr	r3, [pc, #288]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	4a47      	ldr	r2, [pc, #284]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8081 	beq.w	800483e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800473c:	4b42      	ldr	r3, [pc, #264]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d061      	beq.n	800480c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d146      	bne.n	80047de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <HAL_RCC_OscConfig+0x4fc>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fe fb0b 	bl	8002d70 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475e:	f7fe fb07 	bl	8002d70 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e067      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004770:	4b35      	ldr	r3, [pc, #212]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d108      	bne.n	8004798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004786:	4b30      	ldr	r3, [pc, #192]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	492d      	ldr	r1, [pc, #180]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004794:	4313      	orrs	r3, r2
 8004796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a19      	ldr	r1, [r3, #32]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	430b      	orrs	r3, r1
 80047aa:	4927      	ldr	r1, [pc, #156]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_RCC_OscConfig+0x4fc>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fe fadb 	bl	8002d70 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047be:	f7fe fad7 	bl	8002d70 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e037      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x46a>
 80047dc:	e02f      	b.n	800483e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <HAL_RCC_OscConfig+0x4fc>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fe fac4 	bl	8002d70 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fe fac0 	bl	8002d70 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e020      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x498>
 800480a:	e018      	b.n	800483e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e013      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_OscConfig+0x4f4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	429a      	cmp	r2, r3
 800482a:	d106      	bne.n	800483a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40021000 	.word	0x40021000
 800484c:	40007000 	.word	0x40007000
 8004850:	42420060 	.word	0x42420060

08004854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0d0      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d910      	bls.n	8004898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 0207 	bic.w	r2, r3, #7
 800487e:	4965      	ldr	r1, [pc, #404]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b63      	ldr	r3, [pc, #396]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0b8      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b0:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	494d      	ldr	r1, [pc, #308]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d040      	beq.n	8004974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d115      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e073      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06b      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4936      	ldr	r1, [pc, #216]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004944:	f7fe fa14 	bl	8002d70 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fe fa10 	bl	8002d70 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e053      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d210      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	4922      	ldr	r1, [pc, #136]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e032      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4916      	ldr	r1, [pc, #88]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	490e      	ldr	r1, [pc, #56]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049e2:	f000 f821 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	490a      	ldr	r1, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	5ccb      	ldrb	r3, [r1, r3]
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1cc>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1d0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe f972 	bl	8002cec <HAL_InitTick>

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40022000 	.word	0x40022000
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	0800b87c 	.word	0x0800b87c
 8004a20:	20000000 	.word	0x20000000
 8004a24:	20000004 	.word	0x20000004

08004a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	b490      	push	{r4, r7}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a30:	1d3c      	adds	r4, r7, #4
 8004a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a38:	f240 2301 	movw	r3, #513	; 0x201
 8004a3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	2300      	movs	r3, #0
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d002      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x40>
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d003      	beq.n	8004a6e <HAL_RCC_GetSysClockFreq+0x46>
 8004a66:	e02d      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6a:	623b      	str	r3, [r7, #32]
      break;
 8004a6c:	e02d      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	0c9b      	lsrs	r3, r3, #18
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a8c:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0c5b      	lsrs	r3, r3, #17
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa6:	fb02 f203 	mul.w	r2, r2, r3
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	e004      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4a0b      	ldr	r2, [pc, #44]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	623b      	str	r3, [r7, #32]
      break;
 8004ac2:	e002      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac6:	623b      	str	r3, [r7, #32]
      break;
 8004ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aca:	6a3b      	ldr	r3, [r7, #32]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3728      	adds	r7, #40	; 0x28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc90      	pop	{r4, r7}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	0800b838 	.word	0x0800b838
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	007a1200 	.word	0x007a1200
 8004ae4:	003d0900 	.word	0x003d0900

08004ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aec:	4b02      	ldr	r3, [pc, #8]	; (8004af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	20000000 	.word	0x20000000

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b00:	f7ff fff2 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	0800b88c 	.word	0x0800b88c

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b28:	f7ff ffde 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	0adb      	lsrs	r3, r3, #11
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	0800b88c 	.word	0x0800b88c

08004b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <RCC_Delay+0x34>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <RCC_Delay+0x38>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	0a5b      	lsrs	r3, r3, #9
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b68:	bf00      	nop
  }
  while (Delay --);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1e5a      	subs	r2, r3, #1
 8004b6e:	60fa      	str	r2, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f9      	bne.n	8004b68 <RCC_Delay+0x1c>
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	20000000 	.word	0x20000000
 8004b84:	10624dd3 	.word	0x10624dd3

08004b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e041      	b.n	8004c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fe6c 	bl	800288c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fe98 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e032      	b.n	8004ca6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <HAL_TIM_Base_Start+0x88>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_TIM_Base_Start+0x48>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d009      	beq.n	8004c70 <HAL_TIM_Base_Start+0x48>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <HAL_TIM_Base_Start+0x8c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIM_Base_Start+0x48>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <HAL_TIM_Base_Start+0x90>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d111      	bne.n	8004c94 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d010      	beq.n	8004ca4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	e007      	b.n	8004ca4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800

08004cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e03a      	b.n	8004d4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <HAL_TIM_Base_Start_IT+0x98>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <HAL_TIM_Base_Start_IT+0xa0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d111      	bne.n	8004d38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d010      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e007      	b.n	8004d48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800

08004d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e041      	b.n	8004df6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fd fd62 	bl	8002850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f000 fdac 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_TIM_PWM_Start+0x24>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e022      	b.n	8004e6a <HAL_TIM_PWM_Start+0x6a>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d109      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x3e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	e015      	b.n	8004e6a <HAL_TIM_PWM_Start+0x6a>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d109      	bne.n	8004e58 <HAL_TIM_PWM_Start+0x58>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e008      	b.n	8004e6a <HAL_TIM_PWM_Start+0x6a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e05e      	b.n	8004f30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0x82>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e80:	e013      	b.n	8004eaa <HAL_TIM_PWM_Start+0xaa>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0x92>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e90:	e00b      	b.n	8004eaa <HAL_TIM_PWM_Start+0xaa>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0xa2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea0:	e003      	b.n	8004eaa <HAL_TIM_PWM_Start+0xaa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f8af 	bl	8006016 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_TIM_PWM_Start+0x138>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d107      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <HAL_TIM_PWM_Start+0x138>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_TIM_PWM_Start+0xfa>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d009      	beq.n	8004efa <HAL_TIM_PWM_Start+0xfa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <HAL_TIM_PWM_Start+0x13c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIM_PWM_Start+0xfa>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <HAL_TIM_PWM_Start+0x140>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d111      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b06      	cmp	r3, #6
 8004f0a:	d010      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	e007      	b.n	8004f2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800

08004f44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e041      	b.n	8004fda <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f839 	bl	8004fe2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 fcba 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d104      	bne.n	800500e <HAL_TIM_IC_Start_IT+0x1a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e013      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x42>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b04      	cmp	r3, #4
 8005012:	d104      	bne.n	800501e <HAL_TIM_IC_Start_IT+0x2a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e00b      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x42>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d104      	bne.n	800502e <HAL_TIM_IC_Start_IT+0x3a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e003      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x42>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005034:	b2db      	uxtb	r3, r3
 8005036:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <HAL_TIM_IC_Start_IT+0x54>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e013      	b.n	8005070 <HAL_TIM_IC_Start_IT+0x7c>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b04      	cmp	r3, #4
 800504c:	d104      	bne.n	8005058 <HAL_TIM_IC_Start_IT+0x64>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e00b      	b.n	8005070 <HAL_TIM_IC_Start_IT+0x7c>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b08      	cmp	r3, #8
 800505c:	d104      	bne.n	8005068 <HAL_TIM_IC_Start_IT+0x74>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e003      	b.n	8005070 <HAL_TIM_IC_Start_IT+0x7c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506e:	b2db      	uxtb	r3, r3
 8005070:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d102      	bne.n	800507e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005078:	7bbb      	ldrb	r3, [r7, #14]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d001      	beq.n	8005082 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0b3      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_TIM_IC_Start_IT+0x9e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	e013      	b.n	80050ba <HAL_TIM_IC_Start_IT+0xc6>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_IC_Start_IT+0xae>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	e00b      	b.n	80050ba <HAL_TIM_IC_Start_IT+0xc6>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_IC_Start_IT+0xbe>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	e003      	b.n	80050ba <HAL_TIM_IC_Start_IT+0xc6>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_TIM_IC_Start_IT+0xd6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c8:	e013      	b.n	80050f2 <HAL_TIM_IC_Start_IT+0xfe>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d104      	bne.n	80050da <HAL_TIM_IC_Start_IT+0xe6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d8:	e00b      	b.n	80050f2 <HAL_TIM_IC_Start_IT+0xfe>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d104      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0xf6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e8:	e003      	b.n	80050f2 <HAL_TIM_IC_Start_IT+0xfe>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d841      	bhi.n	800517c <HAL_TIM_IC_Start_IT+0x188>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <HAL_TIM_IC_Start_IT+0x10c>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	08005135 	.word	0x08005135
 8005104:	0800517d 	.word	0x0800517d
 8005108:	0800517d 	.word	0x0800517d
 800510c:	0800517d 	.word	0x0800517d
 8005110:	08005147 	.word	0x08005147
 8005114:	0800517d 	.word	0x0800517d
 8005118:	0800517d 	.word	0x0800517d
 800511c:	0800517d 	.word	0x0800517d
 8005120:	08005159 	.word	0x08005159
 8005124:	0800517d 	.word	0x0800517d
 8005128:	0800517d 	.word	0x0800517d
 800512c:	0800517d 	.word	0x0800517d
 8005130:	0800516b 	.word	0x0800516b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0202 	orr.w	r2, r2, #2
 8005142:	60da      	str	r2, [r3, #12]
      break;
 8005144:	e01b      	b.n	800517e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0204 	orr.w	r2, r2, #4
 8005154:	60da      	str	r2, [r3, #12]
      break;
 8005156:	e012      	b.n	800517e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0208 	orr.w	r2, r2, #8
 8005166:	60da      	str	r2, [r3, #12]
      break;
 8005168:	e009      	b.n	800517e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0210 	orr.w	r2, r2, #16
 8005178:	60da      	str	r2, [r3, #12]
      break;
 800517a:	e000      	b.n	800517e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800517c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2201      	movs	r2, #1
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 ff45 	bl	8006016 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_IC_Start_IT+0x200>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_TIM_IC_Start_IT+0x1c0>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d009      	beq.n	80051b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIM_IC_Start_IT+0x204>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a13      	ldr	r2, [pc, #76]	; (80051fc <HAL_TIM_IC_Start_IT+0x208>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d111      	bne.n	80051d8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d010      	beq.n	80051e8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	e007      	b.n	80051e8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800

08005200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d122      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d11b      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0202 	mvn.w	r2, #2
 800522c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc ffaa 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fb3a 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fb40 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0204 	mvn.w	r2, #4
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc ff80 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fb10 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fb16 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0208 	mvn.w	r2, #8
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc ff56 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fae6 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 faec 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b10      	cmp	r3, #16
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b10      	cmp	r3, #16
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0210 	mvn.w	r2, #16
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2208      	movs	r2, #8
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc ff2c 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fabc 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fac2 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0201 	mvn.w	r2, #1
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc fd36 	bl	8001df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 ff10 	bl	80061d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa86 	bl	80058e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d10e      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0220 	mvn.w	r2, #32
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fedb 	bl	80061be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005426:	2302      	movs	r3, #2
 8005428:	e082      	b.n	8005530 <HAL_TIM_IC_ConfigChannel+0x120>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11b      	bne.n	8005470 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f000 fc42 	bl	8005cd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 020c 	bic.w	r2, r2, #12
 800545a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6999      	ldr	r1, [r3, #24]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	619a      	str	r2, [r3, #24]
 800546e:	e05a      	b.n	8005526 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b04      	cmp	r3, #4
 8005474:	d11c      	bne.n	80054b0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6819      	ldr	r1, [r3, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f000 fcab 	bl	8005de0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005498:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6999      	ldr	r1, [r3, #24]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	021a      	lsls	r2, r3, #8
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	619a      	str	r2, [r3, #24]
 80054ae:	e03a      	b.n	8005526 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d11b      	bne.n	80054ee <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f000 fcf6 	bl	8005eb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 020c 	bic.w	r2, r2, #12
 80054d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69d9      	ldr	r1, [r3, #28]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	61da      	str	r2, [r3, #28]
 80054ec:	e01b      	b.n	8005526 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	6819      	ldr	r1, [r3, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f000 fd15 	bl	8005f2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005510:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69d9      	ldr	r1, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	021a      	lsls	r2, r3, #8
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800554e:	2302      	movs	r3, #2
 8005550:	e0ac      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	f200 809f 	bhi.w	80056a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080056a1 	.word	0x080056a1
 8005570:	080056a1 	.word	0x080056a1
 8005574:	080056a1 	.word	0x080056a1
 8005578:	080055dd 	.word	0x080055dd
 800557c:	080056a1 	.word	0x080056a1
 8005580:	080056a1 	.word	0x080056a1
 8005584:	080056a1 	.word	0x080056a1
 8005588:	0800561f 	.word	0x0800561f
 800558c:	080056a1 	.word	0x080056a1
 8005590:	080056a1 	.word	0x080056a1
 8005594:	080056a1 	.word	0x080056a1
 8005598:	0800565f 	.word	0x0800565f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fa0c 	bl	80059c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0208 	orr.w	r2, r2, #8
 80055b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0204 	bic.w	r2, r2, #4
 80055c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	619a      	str	r2, [r3, #24]
      break;
 80055da:	e062      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fa52 	bl	8005a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6999      	ldr	r1, [r3, #24]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	021a      	lsls	r2, r3, #8
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	619a      	str	r2, [r3, #24]
      break;
 800561c:	e041      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fa9b 	bl	8005b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0208 	orr.w	r2, r2, #8
 8005638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0204 	bic.w	r2, r2, #4
 8005648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	61da      	str	r2, [r3, #28]
      break;
 800565c:	e021      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fae5 	bl	8005c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69d9      	ldr	r1, [r3, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	021a      	lsls	r2, r3, #8
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	61da      	str	r2, [r3, #28]
      break;
 800569e:	e000      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80056a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_ConfigClockSource+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0b3      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x180>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d03e      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0xd0>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	f200 8087 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x168>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	f000 8085 	beq.w	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d87f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d01a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xa2>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d87b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d050      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x116>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d877      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d03c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0xf6>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d873      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d058      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x136>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d86f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d064      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d86b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d060      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d867      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x168>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
 8005750:	2b10      	cmp	r3, #16
 8005752:	d05a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005754:	e062      	b.n	800581c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f000 fc37 	bl	8005fd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005778:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	609a      	str	r2, [r3, #8]
      break;
 8005782:	e04e      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f000 fc20 	bl	8005fd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a6:	609a      	str	r2, [r3, #8]
      break;
 80057a8:	e03b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fae4 	bl	8005d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2150      	movs	r1, #80	; 0x50
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fbee 	bl	8005fa4 <TIM_ITRx_SetConfig>
      break;
 80057c8:	e02b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 fb3e 	bl	8005e58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2160      	movs	r1, #96	; 0x60
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fbde 	bl	8005fa4 <TIM_ITRx_SetConfig>
      break;
 80057e8:	e01b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 fac4 	bl	8005d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fbce 	bl	8005fa4 <TIM_ITRx_SetConfig>
      break;
 8005808:	e00b      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fbc5 	bl	8005fa4 <TIM_ITRx_SetConfig>
        break;
 800581a:	e002      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005820:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d831      	bhi.n	80058b4 <HAL_TIM_ReadCapturedValue+0x78>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800588d 	.word	0x0800588d
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058b5 	.word	0x080058b5
 8005864:	080058b5 	.word	0x080058b5
 8005868:	08005897 	.word	0x08005897
 800586c:	080058b5 	.word	0x080058b5
 8005870:	080058b5 	.word	0x080058b5
 8005874:	080058b5 	.word	0x080058b5
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058b5 	.word	0x080058b5
 8005880:	080058b5 	.word	0x080058b5
 8005884:	080058b5 	.word	0x080058b5
 8005888:	080058ab 	.word	0x080058ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	60fb      	str	r3, [r7, #12]

      break;
 8005894:	e00f      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	60fb      	str	r3, [r7, #12]

      break;
 800589e:	e00a      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	60fb      	str	r3, [r7, #12]

      break;
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	60fb      	str	r3, [r7, #12]

      break;
 80058b2:	e000      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80058b4:	bf00      	nop
  }

  return tmpreg;
 80058b6:	68fb      	ldr	r3, [r7, #12]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop

080058c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
	...

080058fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <TIM_Base_SetConfig+0xb8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_Base_SetConfig+0x30>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d007      	beq.n	800592c <TIM_Base_SetConfig+0x30>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <TIM_Base_SetConfig+0xbc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0x30>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a25      	ldr	r2, [pc, #148]	; (80059bc <TIM_Base_SetConfig+0xc0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d108      	bne.n	800593e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <TIM_Base_SetConfig+0xb8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0x62>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0x62>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <TIM_Base_SetConfig+0xbc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0x62>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a18      	ldr	r2, [pc, #96]	; (80059bc <TIM_Base_SetConfig+0xc0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <TIM_Base_SetConfig+0xb8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d103      	bne.n	80059a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	615a      	str	r2, [r3, #20]
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800

080059c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 0302 	bic.w	r3, r3, #2
 8005a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <TIM_OC1_SetConfig+0xc8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10c      	bne.n	8005a36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0308 	bic.w	r3, r3, #8
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 0304 	bic.w	r3, r3, #4
 8005a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <TIM_OC1_SetConfig+0xc8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d111      	bne.n	8005a62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40012c00 	.word	0x40012c00

08005a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0210 	bic.w	r2, r3, #16
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0320 	bic.w	r3, r3, #32
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a1d      	ldr	r2, [pc, #116]	; (8005b5c <TIM_OC2_SetConfig+0xd0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10d      	bne.n	8005b08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <TIM_OC2_SetConfig+0xd0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d113      	bne.n	8005b38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00

08005b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <TIM_OC3_SetConfig+0xd0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10d      	bne.n	8005bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <TIM_OC3_SetConfig+0xd0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d113      	bne.n	8005c0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40012c00 	.word	0x40012c00

08005c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a0f      	ldr	r2, [pc, #60]	; (8005ccc <TIM_OC4_SetConfig+0x98>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d109      	bne.n	8005ca8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	019b      	lsls	r3, r3, #6
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00

08005cd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0201 	bic.w	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a1f      	ldr	r2, [pc, #124]	; (8005d78 <TIM_TI1_SetConfig+0xa8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00b      	beq.n	8005d16 <TIM_TI1_SetConfig+0x46>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d007      	beq.n	8005d16 <TIM_TI1_SetConfig+0x46>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <TIM_TI1_SetConfig+0xac>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_TI1_SetConfig+0x46>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <TIM_TI1_SetConfig+0xb0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d101      	bne.n	8005d1a <TIM_TI1_SetConfig+0x4a>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <TIM_TI1_SetConfig+0x4c>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	e003      	b.n	8005d3a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f023 030a 	bic.w	r3, r3, #10
 8005d54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f003 030a 	and.w	r3, r3, #10
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800

08005d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 030a 	bic.w	r3, r3, #10
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0210 	bic.w	r2, r3, #16
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	031b      	lsls	r3, r3, #12
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f023 0210 	bic.w	r2, r3, #16
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	031b      	lsls	r3, r3, #12
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr

08005eb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b087      	sub	sp, #28
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr

08005f2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	031b      	lsls	r3, r3, #12
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f043 0307 	orr.w	r3, r3, #7
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	609a      	str	r2, [r3, #8]
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	021a      	lsls	r2, r3, #8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	609a      	str	r2, [r3, #8]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006016:	b480      	push	{r7}
 8006018:	b087      	sub	sp, #28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	2201      	movs	r2, #1
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	43db      	mvns	r3, r3
 8006038:	401a      	ands	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1a      	ldr	r2, [r3, #32]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	431a      	orrs	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
	...

08006060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006074:	2302      	movs	r3, #2
 8006076:	e046      	b.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a16      	ldr	r2, [pc, #88]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d009      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a12      	ldr	r2, [pc, #72]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a10      	ldr	r2, [pc, #64]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10c      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr
 8006110:	40012c00 	.word	0x40012c00
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800

0800611c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006134:	2302      	movs	r3, #2
 8006136:	e03d      	b.n	80061b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc80      	pop	{r7}
 80061bc:	4770      	bx	lr

080061be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr

080061e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e03f      	b.n	8006274 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fc fbe7 	bl	80029dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2224      	movs	r2, #36	; 0x24
 8006212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006224:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f904 	bl	8006434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800623a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800624a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800625a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b20      	cmp	r3, #32
 800629a:	d17c      	bne.n	8006396 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_UART_Transmit+0x2c>
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e075      	b.n	8006398 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Transmit+0x3e>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e06e      	b.n	8006398 <HAL_UART_Transmit+0x11c>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2221      	movs	r2, #33	; 0x21
 80062cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80062d0:	f7fc fd4e 	bl	8002d70 <HAL_GetTick>
 80062d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	88fa      	ldrh	r2, [r7, #6]
 80062e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ea:	d108      	bne.n	80062fe <HAL_UART_Transmit+0x82>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	e003      	b.n	8006306 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800630e:	e02a      	b.n	8006366 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2200      	movs	r2, #0
 8006318:	2180      	movs	r1, #128	; 0x80
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f840 	bl	80063a0 <UART_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e036      	b.n	8006398 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800633e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	3302      	adds	r3, #2
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	e007      	b.n	8006358 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	3301      	adds	r3, #1
 8006356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1cf      	bne.n	8006310 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2200      	movs	r2, #0
 8006378:	2140      	movs	r1, #64	; 0x40
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f810 	bl	80063a0 <UART_WaitOnFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e006      	b.n	8006398 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	e000      	b.n	8006398 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006396:	2302      	movs	r3, #2
  }
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b0:	e02c      	b.n	800640c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d028      	beq.n	800640c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063c0:	f7fc fcd6 	bl	8002d70 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d21d      	bcs.n	800640c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e00f      	b.n	800642c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	429a      	cmp	r2, r3
 8006428:	d0c3      	beq.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800646e:	f023 030c 	bic.w	r3, r3, #12
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	430b      	orrs	r3, r1
 800647a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <UART_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d103      	bne.n	80064a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fe fb42 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	e002      	b.n	80064aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064a4:	f7fe fb2a 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 80064a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009a      	lsls	r2, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	4a22      	ldr	r2, [pc, #136]	; (800654c <UART_SetConfig+0x118>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	0119      	lsls	r1, r3, #4
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009a      	lsls	r2, r3, #2
 80064d4:	441a      	add	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <UART_SetConfig+0x118>)
 80064e2:	fba3 0302 	umull	r0, r3, r3, r2
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	2064      	movs	r0, #100	; 0x64
 80064ea:	fb00 f303 	mul.w	r3, r0, r3
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	3332      	adds	r3, #50	; 0x32
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <UART_SetConfig+0x118>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006500:	4419      	add	r1, r3
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009a      	lsls	r2, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	fbb2 f2f3 	udiv	r2, r2, r3
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <UART_SetConfig+0x118>)
 800651a:	fba3 0302 	umull	r0, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2064      	movs	r0, #100	; 0x64
 8006522:	fb00 f303 	mul.w	r3, r0, r3
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	3332      	adds	r3, #50	; 0x32
 800652c:	4a07      	ldr	r2, [pc, #28]	; (800654c <UART_SetConfig+0x118>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	440a      	add	r2, r1
 800653e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40013800 	.word	0x40013800
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3d      	ldr	r2, [pc, #244]	; (8006650 <_ZN10ControllerC1Ev+0x100>)
 800655c:	651a      	str	r2, [r3, #80]	; 0x50
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a3c      	ldr	r2, [pc, #240]	; (8006654 <_ZN10ControllerC1Ev+0x104>)
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	22c8      	movs	r2, #200	; 0xc8
 8006568:	659a      	str	r2, [r3, #88]	; 0x58
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	4618      	mov	r0, r3
 8006570:	f7fa fb94 	bl	8000c9c <__aeabi_i2f>
 8006574:	4603      	mov	r3, r0
 8006576:	4619      	mov	r1, r3
 8006578:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800657c:	f7fa fc96 	bl	8000eac <__aeabi_fdiv>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	65da      	str	r2, [r3, #92]	; 0x5c
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	a329      	add	r3, pc, #164	; (adr r3, 8006630 <_ZN10ControllerC1Ev+0xe0>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	a328      	add	r3, pc, #160	; (adr r3, 8006638 <_ZN10ControllerC1Ev+0xe8>)
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	a327      	add	r3, pc, #156	; (adr r3, 8006640 <_ZN10ControllerC1Ev+0xf0>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <_ZN10ControllerC1Ev+0x108>)
 80065d8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7f9 ff0f 	bl	8000404 <__aeabi_i2d>
 80065e6:	a318      	add	r3, pc, #96	; (adr r3, 8006648 <_ZN10ControllerC1Ev+0xf8>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 ff74 	bl	80004d8 <__aeabi_dmul>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	f7fa fa46 	bl	8000a88 <__aeabi_d2f>
 80065fc:	4602      	mov	r2, r0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	33d0      	adds	r3, #208	; 0xd0
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fd0b 	bl	8008024 <_ZN3PIDC1Ev>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fd05 	bl	8008024 <_ZN3PIDC1Ev>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fcff 	bl	8008024 <_ZN3PIDC1Ev>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	33333333 	.word	0x33333333
 8006634:	3fd33333 	.word	0x3fd33333
 8006638:	1eb851ec 	.word	0x1eb851ec
 800663c:	3fb1eb85 	.word	0x3fb1eb85
 8006640:	47ae147b 	.word	0x47ae147b
 8006644:	3f847ae1 	.word	0x3f847ae1
 8006648:	eb851eb8 	.word	0xeb851eb8
 800664c:	3f9eb851 	.word	0x3f9eb851
 8006650:	44c1c000 	.word	0x44c1c000
 8006654:	42654ca3 	.word	0x42654ca3
 8006658:	401c0000 	.word	0x401c0000

0800665c <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 800665c:	b082      	sub	sp, #8
 800665e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006662:	b09f      	sub	sp, #124	; 0x7c
 8006664:	af08      	add	r7, sp, #32
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800666e:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 8006672:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006676:	4618      	mov	r0, r3
 8006678:	f7f9 fed6 	bl	8000428 <__aeabi_f2d>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 8006686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800668a:	4618      	mov	r0, r3
 800668c:	f7f9 fecc 	bl	8000428 <__aeabi_f2d>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 800669a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800669e:	4618      	mov	r0, r3
 80066a0:	f7f9 fec2 	bl	8000428 <__aeabi_f2d>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 80066ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7f9 feb8 	bl	8000428 <__aeabi_f2d>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 80066c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7f9 feae 	bl	8000428 <__aeabi_f2d>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 80066d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066da:	4618      	mov	r0, r3
 80066dc:	f7f9 fea4 	bl	8000428 <__aeabi_f2d>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 80066ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 80066f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 80066fa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 8006702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006706:	657b      	str	r3, [r7, #84]	; 0x54
        float pitch_des 	 = state_des.angles[1];
 8006708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800670c:	653b      	str	r3, [r7, #80]	; 0x50
        float yaw_rate_des = state_des.rates[2];
 800670e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006712:	64fb      	str	r3, [r7, #76]	; 0x4c

    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f103 06d0 	add.w	r6, r3, #208	; 0xd0
 800671a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800671c:	f7f9 fe84 	bl	8000428 <__aeabi_f2d>
 8006720:	4680      	mov	r8, r0
 8006722:	4689      	mov	r9, r1
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006730:	4618      	mov	r0, r3
 8006732:	f7f9 fe79 	bl	8000428 <__aeabi_f2d>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800673e:	e9cd 4500 	strd	r4, r5, [sp]
 8006742:	4642      	mov	r2, r8
 8006744:	464b      	mov	r3, r9
 8006746:	4630      	mov	r0, r6
 8006748:	f001 fc9c 	bl	8008084 <_ZN3PID7P_AngleEddd>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4610      	mov	r0, r2
 8006752:	4619      	mov	r1, r3
 8006754:	f7fa f998 	bl	8000a88 <__aeabi_d2f>
 8006758:	4602      	mov	r2, r0
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f503 76a0 	add.w	r6, r3, #320	; 0x140
 8006766:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006768:	f7f9 fe5e 	bl	8000428 <__aeabi_f2d>
 800676c:	4680      	mov	r8, r0
 800676e:	4689      	mov	r9, r1
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677c:	4618      	mov	r0, r3
 800677e:	f7f9 fe53 	bl	8000428 <__aeabi_f2d>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800678a:	e9cd 4500 	strd	r4, r5, [sp]
 800678e:	4642      	mov	r2, r8
 8006790:	464b      	mov	r3, r9
 8006792:	4630      	mov	r0, r6
 8006794:	f001 fc76 	bl	8008084 <_ZN3PID7P_AngleEddd>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4610      	mov	r0, r2
 800679e:	4619      	mov	r1, r3
 80067a0:	f7fa f972 	bl	8000a88 <__aeabi_d2f>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
/*
    //printf("\nroll_rate_des: %.2f",roll_rate_des);
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    //printf("\nyaw_rate_des: %.2f",yaw_rate_des);
*/  //printf("\nroll_rate_des: %.2f",roll_rate_des);
    pd_roll  = pid_roll.PD_Rate(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	33d0      	adds	r3, #208	; 0xd0
 80067b0:	607b      	str	r3, [r7, #4]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7f9 fe35 	bl	8000428 <__aeabi_f2d>
 80067be:	4682      	mov	sl, r0
 80067c0:	468b      	mov	fp, r1
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 80067ce:	68bc      	ldr	r4, [r7, #8]
 80067d0:	f104 0568 	add.w	r5, r4, #104	; 0x68
 80067d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067d8:	68be      	ldr	r6, [r7, #8]
 80067da:	e9d6 891c 	ldrd	r8, r9, [r6, #112]	; 0x70
 80067de:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80067e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80067e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ea:	e9cd 2300 	strd	r2, r3, [sp]
 80067ee:	4652      	mov	r2, sl
 80067f0:	465b      	mov	r3, fp
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fc68 	bl	80080c8 <_ZN3PID7PD_RateEddddd>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006810:	4618      	mov	r0, r3
 8006812:	f7f9 fe09 	bl	8000428 <__aeabi_f2d>
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	e9d1 011e 	ldrd	r0, r1, [r1, #120]	; 0x78
 8006826:	68bc      	ldr	r4, [r7, #8]
 8006828:	f104 0580 	add.w	r5, r4, #128	; 0x80
 800682c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006830:	68be      	ldr	r6, [r7, #8]
 8006832:	e9d6 8922 	ldrd	r8, r9, [r6, #136]	; 0x88
 8006836:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800683a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800683e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006842:	e9cd 2300 	strd	r2, r3, [sp]
 8006846:	4652      	mov	r2, sl
 8006848:	465b      	mov	r3, fp
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fc3c 	bl	80080c8 <_ZN3PID7PD_RateEddddd>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f503 76d8 	add.w	r6, r3, #432	; 0x1b0
 8006860:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006862:	f7f9 fde1 	bl	8000428 <__aeabi_f2d>
 8006866:	4604      	mov	r4, r0
 8006868:	460d      	mov	r5, r1
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 8006876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800687a:	e9cd 2300 	strd	r2, r3, [sp]
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	4630      	mov	r0, r6
 8006884:	f001 fd69 	bl	800835a <_ZN3PID10P_Rate_YawEddd>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    thr = pid_roll.Sat(thr, 1800, 1000);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006898:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800689c:	f7f9 fdb2 	bl	8000404 <__aeabi_i2d>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068a8:	9101      	str	r1, [sp, #4]
 80068aa:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80068ae:	9100      	str	r1, [sp, #0]
 80068b0:	4620      	mov	r0, r4
 80068b2:	f001 fdf7 	bl	80084a4 <_ZN3PID3SatEdii>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	f7fa f8bb 	bl	8000a38 <__aeabi_d2iz>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw;
 80068c8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80068cc:	f7f9 fd9a 	bl	8000404 <__aeabi_i2d>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80068d6:	f7f9 fc49 	bl	800016c <__adddf3>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4610      	mov	r0, r2
 80068e0:	4619      	mov	r1, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80068e8:	f7f9 fc3e 	bl	8000168 <__aeabi_dsub>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4610      	mov	r0, r2
 80068f2:	4619      	mov	r1, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80068fa:	f7f9 fc35 	bl	8000168 <__aeabi_dsub>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4610      	mov	r0, r2
 8006904:	4619      	mov	r1, r3
 8006906:	f7fa f897 	bl	8000a38 <__aeabi_d2iz>
 800690a:	4603      	mov	r3, r0
 800690c:	64bb      	str	r3, [r7, #72]	; 0x48
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw ;
 800690e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006912:	f7f9 fd77 	bl	8000404 <__aeabi_i2d>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800691c:	f7f9 fc24 	bl	8000168 <__aeabi_dsub>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4610      	mov	r0, r2
 8006926:	4619      	mov	r1, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800692e:	f7f9 fc1d 	bl	800016c <__adddf3>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4610      	mov	r0, r2
 8006938:	4619      	mov	r1, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8006940:	f7f9 fc12 	bl	8000168 <__aeabi_dsub>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	f7fa f874 	bl	8000a38 <__aeabi_d2iz>
 8006950:	4603      	mov	r3, r0
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw ;
 8006954:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006958:	f7f9 fd54 	bl	8000404 <__aeabi_i2d>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8006962:	f7f9 fc03 	bl	800016c <__adddf3>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4610      	mov	r0, r2
 800696c:	4619      	mov	r1, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8006974:	f7f9 fbfa 	bl	800016c <__adddf3>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8006986:	f7f9 fbf1 	bl	800016c <__adddf3>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4610      	mov	r0, r2
 8006990:	4619      	mov	r1, r3
 8006992:	f7fa f851 	bl	8000a38 <__aeabi_d2iz>
 8006996:	4603      	mov	r3, r0
 8006998:	643b      	str	r3, [r7, #64]	; 0x40
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw ;
 800699a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800699e:	f7f9 fd31 	bl	8000404 <__aeabi_i2d>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80069a8:	f7f9 fbde 	bl	8000168 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4610      	mov	r0, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80069ba:	f7f9 fbd5 	bl	8000168 <__aeabi_dsub>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80069cc:	f7f9 fbce 	bl	800016c <__adddf3>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4610      	mov	r0, r2
 80069d6:	4619      	mov	r1, r3
 80069d8:	f7fa f82e 	bl	8000a38 <__aeabi_d2iz>
 80069dc:	4603      	mov	r3, r0
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80069e6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80069e8:	f7f9 fd0c 	bl	8000404 <__aeabi_i2d>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80069f4:	9102      	str	r1, [sp, #8]
 80069f6:	f240 414c 	movw	r1, #1100	; 0x44c
 80069fa:	9101      	str	r1, [sp, #4]
 80069fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a00:	9100      	str	r1, [sp, #0]
 8006a02:	4620      	mov	r0, r4
 8006a04:	f001 fd08 	bl	8008418 <_ZN3PID3SatEdiii>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f7fa f812 	bl	8000a38 <__aeabi_d2iz>
 8006a14:	4603      	mov	r3, r0
 8006a16:	64bb      	str	r3, [r7, #72]	; 0x48
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006a1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006a20:	f7f9 fcf0 	bl	8000404 <__aeabi_i2d>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006a2c:	9102      	str	r1, [sp, #8]
 8006a2e:	f240 414c 	movw	r1, #1100	; 0x44c
 8006a32:	9101      	str	r1, [sp, #4]
 8006a34:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a38:	9100      	str	r1, [sp, #0]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f001 fcec 	bl	8008418 <_ZN3PID3SatEdiii>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	f7f9 fff6 	bl	8000a38 <__aeabi_d2iz>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	647b      	str	r3, [r7, #68]	; 0x44
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006a56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006a58:	f7f9 fcd4 	bl	8000404 <__aeabi_i2d>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006a64:	9102      	str	r1, [sp, #8]
 8006a66:	f240 414c 	movw	r1, #1100	; 0x44c
 8006a6a:	9101      	str	r1, [sp, #4]
 8006a6c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a70:	9100      	str	r1, [sp, #0]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f001 fcd0 	bl	8008418 <_ZN3PID3SatEdiii>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	f7f9 ffda 	bl	8000a38 <__aeabi_d2iz>
 8006a84:	4603      	mov	r3, r0
 8006a86:	643b      	str	r3, [r7, #64]	; 0x40
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006a8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a90:	f7f9 fcb8 	bl	8000404 <__aeabi_i2d>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006a9c:	9102      	str	r1, [sp, #8]
 8006a9e:	f240 414c 	movw	r1, #1100	; 0x44c
 8006aa2:	9101      	str	r1, [sp, #4]
 8006aa4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006aa8:	9100      	str	r1, [sp, #0]
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f001 fcb4 	bl	8008418 <_ZN3PID3SatEdiii>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f7f9 ffbe 	bl	8000a38 <__aeabi_d2iz>
 8006abc:	4603      	mov	r3, r0
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	33d0      	adds	r3, #208	; 0xd0
 8006ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac6:	b291      	uxth	r1, r2
 8006ac8:	2201      	movs	r2, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 fd74 	bl	80085b8 <_ZN3PID7pwm2motEti>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	33d0      	adds	r3, #208	; 0xd0
 8006ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006adc:	b291      	uxth	r1, r2
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 fd69 	bl	80085b8 <_ZN3PID7pwm2motEti>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	33d0      	adds	r3, #208	; 0xd0
 8006af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af2:	b291      	uxth	r1, r2
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	4618      	mov	r0, r3
 8006afa:	f001 fd5d 	bl	80085b8 <_ZN3PID7pwm2motEti>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	33d0      	adds	r3, #208	; 0xd0
 8006b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b0a:	b291      	uxth	r1, r2
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fd51 	bl	80085b8 <_ZN3PID7pwm2motEti>
 8006b16:	4602      	mov	r2, r0
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7f9 fc81 	bl	8000428 <__aeabi_f2d>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fc78 	bl	8000428 <__aeabi_f2d>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7f9 fc6f 	bl	8000428 <__aeabi_f2d>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7f9 fc66 	bl	8000428 <__aeabi_f2d>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006b64:	f107 0318 	add.w	r3, r7, #24
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	2304      	movs	r3, #4
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fb fc1c 	bl	80023b0 <_ZNSaIdEC1Ev>
 8006b78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b7c:	f107 0210 	add.w	r2, r7, #16
 8006b80:	ca06      	ldmia	r2, {r1, r2}
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 f837 	bl	8006bf6 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 8006b88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fb fbba 	bl	8002306 <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller_output_pwm[1] = pwm2;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller_output_pwm[2] = pwm3;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ba6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller_output_pwm[3] = pwm4;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    return controller_output;
 8006bb2:	bf00      	nop
}
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	375c      	adds	r7, #92	; 0x5c
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbe:	b002      	add	sp, #8
 8006bc0:	4770      	bx	lr

08006bc2 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fd39 	bl	8008648 <_ZN3PIDD1Ev>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fd33 	bl	8008648 <_ZN3PIDD1Ev>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	33d0      	adds	r3, #208	; 0xd0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fd2e 	bl	8008648 <_ZN3PIDD1Ev>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 8006bf6:	b5b0      	push	{r4, r5, r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	1d38      	adds	r0, r7, #4
 8006c00:	e880 0006 	stmia.w	r0, {r1, r2}
 8006c04:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fb fd0d 	bl	800262a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8006c10:	1d3b      	adds	r3, r7, #4
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f810 	bl	8006c38 <_ZNKSt16initializer_listIdE5beginEv>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 f816 	bl	8006c4e <_ZNKSt16initializer_listIdE3endEv>
 8006c22:	4602      	mov	r2, r0
 8006c24:	462b      	mov	r3, r5
 8006c26:	4621      	mov	r1, r4
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f822 	bl	8006c72 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bdb0      	pop	{r4, r5, r7, pc}

08006c38 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8006c4e:	b590      	push	{r4, r7, lr}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff ffee 	bl	8006c38 <_ZNKSt16initializer_listIdE5beginEv>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f840 	bl	8006ce4 <_ZNKSt16initializer_listIdE4sizeEv>
 8006c64:	4603      	mov	r3, r0
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4423      	add	r3, r4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}

08006c72 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8006c72:	b590      	push	{r4, r7, lr}
 8006c74:	b087      	sub	sp, #28
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	68b8      	ldr	r0, [r7, #8]
 8006c84:	f000 f839 	bl	8006cfa <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8006c8c:	68fc      	ldr	r4, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fb fbc9 	bl	8002428 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8006c96:	4603      	mov	r3, r0
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6978      	ldr	r0, [r7, #20]
 8006c9c:	f000 f842 	bl	8006d24 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 f865 	bl	8006d74 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8006caa:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	441a      	add	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fb fbaf 	bl	8002428 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8006cca:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8006ccc:	4622      	mov	r2, r4
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	68b8      	ldr	r0, [r7, #8]
 8006cd2:	f000 f863 	bl	8006d9c <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8006cd6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	605a      	str	r2, [r3, #4]
	}
 8006cdc:	bf00      	nop
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd90      	pop	{r4, r7, pc}

08006ce4 <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr

08006cfa <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8006cfa:	b5b0      	push	{r4, r5, r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8006d04:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f858 	bl	8006dbe <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8006d0e:	462a      	mov	r2, r5
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 f85c 	bl	8006dd0 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8006d18:	4603      	mov	r3, r0
    }
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d24 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8006d2e:	f107 030c 	add.w	r3, r7, #12
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fb fc6a 	bl	800260e <_ZNSaIdEC1ERKS_>
 8006d3a:	f107 030c 	add.w	r3, r7, #12
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f855 	bl	8006dee <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8006d44:	4602      	mov	r2, r0
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	bf8c      	ite	hi
 8006d4c:	2301      	movhi	r3, #1
 8006d4e:	2300      	movls	r3, #0
 8006d50:	b2dc      	uxtb	r4, r3
 8006d52:	f107 030c 	add.w	r3, r7, #12
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fb fad5 	bl	8002306 <_ZNSaIdED1Ev>
 8006d5c:	2c00      	cmp	r4, #0
 8006d5e:	d002      	beq.n	8006d66 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8006d60:	4803      	ldr	r0, [pc, #12]	; (8006d70 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8006d62:	f001 fc91 	bl	8008688 <_ZSt20__throw_length_errorPKc>
	return __n;
 8006d66:	687b      	ldr	r3, [r7, #4]
      }
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd90      	pop	{r4, r7, pc}
 8006d70:	0800b848 	.word	0x0800b848

08006d74 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 f84a 	bl	8006e22 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	e000      	b.n	8006d94 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8006d92:	2300      	movs	r3, #0
      }
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f846 	bl	8006e40 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8006db4:	4603      	mov	r3, r0
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	10db      	asrs	r3, r3, #3
    }
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8006df6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006dfa:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f831 	bl	8006e64 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8006e02:	4603      	mov	r3, r0
 8006e04:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006e06:	f107 0208 	add.w	r2, r7, #8
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 f833 	bl	8006e7c <_ZSt3minIjERKT_S2_S2_>
 8006e16:	4603      	mov	r3, r0
 8006e18:	681b      	ldr	r3, [r3, #0]
      }
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f836 	bl	8006ea2 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f842 	bl	8006ede <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 8006e5a:	4603      	mov	r3, r0
    }
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f846 	bl	8006efe <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006e72:	4603      	mov	r3, r0
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d201      	bcs.n	8006e96 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	e000      	b.n	8006e98 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006e96:	687b      	ldr	r3, [r7, #4]
    }
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f825 	bl	8006efe <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	bf8c      	ite	hi
 8006ebc:	2301      	movhi	r3, #1
 8006ebe:	2300      	movls	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006ec6:	f001 fbdc 	bl	8008682 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fbc6 	bl	8008660 <_Znwj>
 8006ed4:	4603      	mov	r3, r0
      }
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f810 	bl	8006f14 <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006f06:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <_ZSt4copyIPKdPdET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f80f 	bl	8006f44 <_ZSt12__miter_baseIPKdET_S2_>
 8006f26:	4604      	mov	r4, r0
 8006f28:	68b8      	ldr	r0, [r7, #8]
 8006f2a:	f000 f80b 	bl	8006f44 <_ZSt12__miter_baseIPKdET_S2_>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	4619      	mov	r1, r3
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 f80f 	bl	8006f58 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8006f3a:	4603      	mov	r3, r0
    }
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd90      	pop	{r4, r7, pc}

08006f44 <_ZSt12__miter_baseIPKdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr

08006f58 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006f58:	b5b0      	push	{r4, r5, r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f81a 	bl	8006f9e <_ZSt12__niter_baseIPKdET_S2_>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	68b8      	ldr	r0, [r7, #8]
 8006f6e:	f000 f816 	bl	8006f9e <_ZSt12__niter_baseIPKdET_S2_>
 8006f72:	4605      	mov	r5, r0
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f81b 	bl	8006fb2 <_ZSt12__niter_baseIPdET_S1_>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4629      	mov	r1, r5
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f81f 	bl	8006fc6 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f82b 	bl	8006fea <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8006f94:	4603      	mov	r3, r0
    }
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bdb0      	pop	{r4, r5, r7, pc}

08006f9e <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr

08006fb2 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f810 	bl	8007000 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8006fe0:	4603      	mov	r3, r0
    }
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	10db      	asrs	r3, r3, #3
 8007014:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d006      	beq.n	800702a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	461a      	mov	r2, r3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 ff1f 	bl	8008e68 <memmove>
	  return __result + _Num;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4413      	add	r3, r2
	}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	0000      	movs	r0, r0
 800703c:	0000      	movs	r0, r0
	...

08007040 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a29      	ldr	r2, [pc, #164]	; (80070f0 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 800704c:	64da      	str	r2, [r3, #76]	; 0x4c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007052:	651a      	str	r2, [r3, #80]	; 0x50
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a26      	ldr	r2, [pc, #152]	; (80070f0 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007058:	655a      	str	r2, [r3, #84]	; 0x54
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 800705e:	659a      	str	r2, [r3, #88]	; 0x58
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	a31f      	add	r3, pc, #124	; (adr r3, 80070e0 <_ZN15Kalman_FiltresiC1Ev+0xa0>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	a31c      	add	r3, pc, #112	; (adr r3, 80070e0 <_ZN15Kalman_FiltresiC1Ev+0xa0>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	a319      	add	r3, pc, #100	; (adr r3, 80070e0 <_ZN15Kalman_FiltresiC1Ev+0xa0>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	a318      	add	r3, pc, #96	; (adr r3, 80070e8 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <_ZN15Kalman_FiltresiC1Ev+0xb4>)
 8007098:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <_ZN15Kalman_FiltresiC1Ev+0xb8>)
 80070a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	22c8      	movs	r2, #200	; 0xc8
 80070a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7f9 fdf2 	bl	8000c9c <__aeabi_i2f>
 80070b8:	4603      	mov	r3, r0
 80070ba:	4619      	mov	r1, r3
 80070bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80070c0:	f7f9 fef4 	bl	8000eac <__aeabi_fdiv>
 80070c4:	4603      	mov	r3, r0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7f9 f9ae 	bl	8000428 <__aeabi_f2d>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

}
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	47ae147b 	.word	0x47ae147b
 80070e4:	3f847ae1 	.word	0x3f847ae1
 80070e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80070ec:	3f50624d 	.word	0x3f50624d
 80070f0:	42c80000 	.word	0x42c80000
 80070f4:	40340000 	.word	0x40340000
 80070f8:	42654ca3 	.word	0x42654ca3
 80070fc:	00000000 	.word	0x00000000

08007100 <_ZN15Kalman_Filtresi3RunEPfS0_>:
	y_prev = y;

	return y;
}

void Kalman_Filtresi::Run(float gyro[3], float acc[3]) {
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b094      	sub	sp, #80	; 0x50
 8007106:	af00      	add	r7, sp, #0
 8007108:	62f8      	str	r0, [r7, #44]	; 0x2c
 800710a:	62b9      	str	r1, [r7, #40]	; 0x28
 800710c:	627a      	str	r2, [r7, #36]	; 0x24

  float accX = acc[0]; 
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	64fb      	str	r3, [r7, #76]	; 0x4c
  float accY = acc[1];
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	64bb      	str	r3, [r7, #72]	; 0x48
  float accZ = acc[2];
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	647b      	str	r3, [r7, #68]	; 0x44

  float gyroX = gyro[0]; 
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	643b      	str	r3, [r7, #64]	; 0x40
  float gyroY = gyro[1];
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float gyroZ = gyro[2];
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	63bb      	str	r3, [r7, #56]	; 0x38

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8007132:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007134:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007136:	f7f9 fe05 	bl	8000d44 <__aeabi_fmul>
 800713a:	4603      	mov	r3, r0
 800713c:	461c      	mov	r4, r3
 800713e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007140:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007142:	f7f9 fdff 	bl	8000d44 <__aeabi_fmul>
 8007146:	4603      	mov	r3, r0
 8007148:	4619      	mov	r1, r3
 800714a:	4620      	mov	r0, r4
 800714c:	f7f9 fcf2 	bl	8000b34 <__addsf3>
 8007150:	4603      	mov	r3, r0
 8007152:	461c      	mov	r4, r3
 8007154:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007156:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007158:	f7f9 fdf4 	bl	8000d44 <__aeabi_fmul>
 800715c:	4603      	mov	r3, r0
 800715e:	4619      	mov	r1, r3
 8007160:	4620      	mov	r0, r4
 8007162:	f7f9 fce7 	bl	8000b34 <__addsf3>
 8007166:	4603      	mov	r3, r0
 8007168:	4618      	mov	r0, r3
 800716a:	f7f9 fff9 	bl	8001160 <_ZSt4sqrtf>
 800716e:	6378      	str	r0, [r7, #52]	; 0x34

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 8007170:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007172:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007174:	f7f9 fe9a 	bl	8000eac <__aeabi_fdiv>
 8007178:	4603      	mov	r3, r0
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 ffe4 	bl	8001148 <_ZSt4asinf>
 8007180:	4602      	mov	r2, r0
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7f9 fdda 	bl	8000d44 <__aeabi_fmul>
 8007190:	4603      	mov	r3, r0
 8007192:	49c1      	ldr	r1, [pc, #772]	; (8007498 <_ZN15Kalman_Filtresi3RunEPfS0_+0x398>)
 8007194:	4618      	mov	r0, r3
 8007196:	f7f9 fccb 	bl	8000b30 <__aeabi_fsub>
 800719a:	4603      	mov	r3, r0
 800719c:	461a      	mov	r2, r3
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 80071a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80071a8:	f7f9 fe80 	bl	8000eac <__aeabi_fdiv>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f9 ffca 	bl	8001148 <_ZSt4asinf>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f7f9 fdc0 	bl	8000d44 <__aeabi_fmul>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7f9 fcb2 	bl	8000b34 <__addsf3>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 80071da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071dc:	f7f9 f924 	bl	8000428 <__aeabi_f2d>
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80071e6:	f7f9 f977 	bl	80004d8 <__aeabi_dmul>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	f7f9 fc49 	bl	8000a88 <__aeabi_d2f>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  roll_gyro =  gyroX * st;
 80071fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007200:	f7f9 f912 	bl	8000428 <__aeabi_f2d>
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	f7f9 fc37 	bl	8000a88 <__aeabi_d2f>
 800721a:	4602      	mov	r2, r0
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8627 	beq.w	8007e7c <_ZN15Kalman_Filtresi3RunEPfS0_+0xd7c>

    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7f9 fc79 	bl	8000b34 <__addsf3>
 8007242:	4603      	mov	r3, r0
 8007244:	4618      	mov	r0, r3
 8007246:	f7f9 f8ef 	bl	8000428 <__aeabi_f2d>
 800724a:	a38f      	add	r3, pc, #572	; (adr r3, 8007488 <_ZN15Kalman_Filtresi3RunEPfS0_+0x388>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f7f9 f942 	bl	80004d8 <__aeabi_dmul>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4614      	mov	r4, r2
 800725a:	461d      	mov	r5, r3
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8007262:	4618      	mov	r0, r3
 8007264:	f7f9 f8e0 	bl	8000428 <__aeabi_f2d>
 8007268:	a389      	add	r3, pc, #548	; (adr r3, 8007490 <_ZN15Kalman_Filtresi3RunEPfS0_+0x390>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f9 f933 	bl	80004d8 <__aeabi_dmul>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f8 ff77 	bl	800016c <__adddf3>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4610      	mov	r0, r2
 8007284:	4619      	mov	r1, r3
 8007286:	f7f9 fbff 	bl	8000a88 <__aeabi_d2f>
 800728a:	4602      	mov	r2, r0
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7f9 fc47 	bl	8000b34 <__addsf3>
 80072a6:	4603      	mov	r3, r0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7f9 f8bd 	bl	8000428 <__aeabi_f2d>
 80072ae:	a376      	add	r3, pc, #472	; (adr r3, 8007488 <_ZN15Kalman_Filtresi3RunEPfS0_+0x388>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f7f9 f910 	bl	80004d8 <__aeabi_dmul>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4614      	mov	r4, r2
 80072be:	461d      	mov	r5, r3
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7f9 f8ae 	bl	8000428 <__aeabi_f2d>
 80072cc:	a370      	add	r3, pc, #448	; (adr r3, 8007490 <_ZN15Kalman_Filtresi3RunEPfS0_+0x390>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f9 f901 	bl	80004d8 <__aeabi_dmul>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4620      	mov	r0, r4
 80072dc:	4629      	mov	r1, r5
 80072de:	f7f8 ff45 	bl	800016c <__adddf3>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f7f9 fbcd 	bl	8000a88 <__aeabi_d2f>
 80072ee:	4602      	mov	r2, r0
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    pitch = pitch - st*pitch_bias + gyroY*(st) + ((pitch_acc - pitch + st*pitch_bias - gyroY*(st))*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	4618      	mov	r0, r3
 8007308:	f7f9 f88e 	bl	8000428 <__aeabi_f2d>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4640      	mov	r0, r8
 8007312:	4649      	mov	r1, r9
 8007314:	f7f9 f8e0 	bl	80004d8 <__aeabi_dmul>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f8 ff22 	bl	8000168 <__aeabi_dsub>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4614      	mov	r4, r2
 800732a:	461d      	mov	r5, r3
 800732c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800732e:	f7f9 f87b 	bl	8000428 <__aeabi_f2d>
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007338:	f7f9 f8ce 	bl	80004d8 <__aeabi_dmul>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4620      	mov	r0, r4
 8007342:	4629      	mov	r1, r5
 8007344:	f7f8 ff12 	bl	800016c <__adddf3>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8007356:	4618      	mov	r0, r3
 8007358:	f7f9 f866 	bl	8000428 <__aeabi_f2d>
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007362:	f7f8 ff01 	bl	8000168 <__aeabi_dsub>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4690      	mov	r8, r2
 800736c:	4699      	mov	r9, r3
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	4618      	mov	r0, r3
 800737a:	f7f9 f855 	bl	8000428 <__aeabi_f2d>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f9 f8a7 	bl	80004d8 <__aeabi_dmul>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4640      	mov	r0, r8
 8007390:	4649      	mov	r1, r9
 8007392:	f7f8 feeb 	bl	800016c <__adddf3>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4614      	mov	r4, r2
 800739c:	461d      	mov	r5, r3
 800739e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073a0:	f7f9 f842 	bl	8000428 <__aeabi_f2d>
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80073aa:	f7f9 f895 	bl	80004d8 <__aeabi_dmul>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f8 fed7 	bl	8000168 <__aeabi_dsub>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	e9c7 2300 	strd	r2, r3, [r7]
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7f9 f82e 	bl	8000428 <__aeabi_f2d>
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80073d2:	f7f8 fecb 	bl	800016c <__adddf3>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4614      	mov	r4, r2
 80073dc:	461d      	mov	r5, r3
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 f820 	bl	8000428 <__aeabi_f2d>
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80073ee:	f7f9 f873 	bl	80004d8 <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4620      	mov	r0, r4
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7f8 feb5 	bl	8000168 <__aeabi_dsub>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4692      	mov	sl, r2
 8007404:	469b      	mov	fp, r3
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007410:	4618      	mov	r0, r3
 8007412:	f7f9 f809 	bl	8000428 <__aeabi_f2d>
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	4618      	mov	r0, r3
 8007420:	f7f9 f802 	bl	8000428 <__aeabi_f2d>
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800742a:	f7f9 f855 	bl	80004d8 <__aeabi_dmul>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4620      	mov	r0, r4
 8007434:	4629      	mov	r1, r5
 8007436:	f7f8 fe97 	bl	8000168 <__aeabi_dsub>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 f849 	bl	80004d8 <__aeabi_dmul>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4650      	mov	r0, sl
 800744c:	4659      	mov	r1, fp
 800744e:	f7f8 fe8b 	bl	8000168 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800745a:	f7f9 f83d 	bl	80004d8 <__aeabi_dmul>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	e9c7 2300 	strd	r2, r3, [r7]
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007470:	4618      	mov	r0, r3
 8007472:	f7f8 ffd9 	bl	8000428 <__aeabi_f2d>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4620      	mov	r0, r4
 800747c:	4629      	mov	r1, r5
 800747e:	f7f8 fe75 	bl	800016c <__adddf3>
 8007482:	4602      	mov	r2, r0
 8007484:	e00a      	b.n	800749c <_ZN15Kalman_Filtresi3RunEPfS0_+0x39c>
 8007486:	bf00      	nop
 8007488:	b22d0e56 	.word	0xb22d0e56
 800748c:	3fefef9d 	.word	0x3fefef9d
 8007490:	d2f1a9fc 	.word	0xd2f1a9fc
 8007494:	3f60624d 	.word	0x3f60624d
 8007498:	40500000 	.word	0x40500000
 800749c:	460b      	mov	r3, r1
 800749e:	4610      	mov	r0, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80074a8:	f7f8 fe60 	bl	800016c <__adddf3>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	461d      	mov	r5, r3
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7f8 ffb5 	bl	8000428 <__aeabi_f2d>
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80074c4:	f7f9 f808 	bl	80004d8 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4620      	mov	r0, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f8 fe4a 	bl	8000168 <__aeabi_dsub>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4692      	mov	sl, r2
 80074da:	469b      	mov	fp, r3
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7f8 ff9e 	bl	8000428 <__aeabi_f2d>
 80074ec:	4604      	mov	r4, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7f8 ff97 	bl	8000428 <__aeabi_f2d>
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007500:	f7f8 ffea 	bl	80004d8 <__aeabi_dmul>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f8 fe2c 	bl	8000168 <__aeabi_dsub>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7f8 ffde 	bl	80004d8 <__aeabi_dmul>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4650      	mov	r0, sl
 8007522:	4659      	mov	r1, fp
 8007524:	f7f8 fe20 	bl	8000168 <__aeabi_dsub>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007530:	f7f9 f8fc 	bl	800072c <__aeabi_ddiv>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800753c:	f7f8 fe16 	bl	800016c <__adddf3>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007546:	e9c1 2302 	strd	r2, r3, [r1, #8]
  pitch_bias = pitch_bias + ((S21_pitch + (sb_p) - S22_pitch*(st))*(pitch_acc - pitch + st*pitch_bias - gyroY*(st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	4618      	mov	r0, r3
 8007550:	f7f8 ff6a 	bl	8000428 <__aeabi_f2d>
 8007554:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	4618      	mov	r0, r3
 800755e:	f7f8 ff63 	bl	8000428 <__aeabi_f2d>
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007568:	f7f8 fe00 	bl	800016c <__adddf3>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4614      	mov	r4, r2
 8007572:	461d      	mov	r5, r3
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007578:	4618      	mov	r0, r3
 800757a:	f7f8 ff55 	bl	8000428 <__aeabi_f2d>
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007584:	f7f8 ffa8 	bl	80004d8 <__aeabi_dmul>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4620      	mov	r0, r4
 800758e:	4629      	mov	r1, r5
 8007590:	f7f8 fdea 	bl	8000168 <__aeabi_dsub>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4692      	mov	sl, r2
 800759a:	469b      	mov	fp, r3
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7f8 ff40 	bl	8000428 <__aeabi_f2d>
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80075ae:	f7f8 fddb 	bl	8000168 <__aeabi_dsub>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4690      	mov	r8, r2
 80075b8:	4699      	mov	r9, r3
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7f8 ff2f 	bl	8000428 <__aeabi_f2d>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f8 ff81 	bl	80004d8 <__aeabi_dmul>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4640      	mov	r0, r8
 80075dc:	4649      	mov	r1, r9
 80075de:	f7f8 fdc5 	bl	800016c <__adddf3>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4614      	mov	r4, r2
 80075e8:	461d      	mov	r5, r3
 80075ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80075ec:	f7f8 ff1c 	bl	8000428 <__aeabi_f2d>
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80075f6:	f7f8 ff6f 	bl	80004d8 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4620      	mov	r0, r4
 8007600:	4629      	mov	r1, r5
 8007602:	f7f8 fdb1 	bl	8000168 <__aeabi_dsub>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4650      	mov	r0, sl
 800760c:	4659      	mov	r1, fp
 800760e:	f7f8 ff63 	bl	80004d8 <__aeabi_dmul>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	e9c7 2300 	strd	r2, r3, [r7]
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007624:	4618      	mov	r0, r3
 8007626:	f7f8 feff 	bl	8000428 <__aeabi_f2d>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f8 fd9b 	bl	800016c <__adddf3>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4610      	mov	r0, r2
 800763c:	4619      	mov	r1, r3
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007644:	f7f8 fd92 	bl	800016c <__adddf3>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4614      	mov	r4, r2
 800764e:	461d      	mov	r5, r3
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007654:	4618      	mov	r0, r3
 8007656:	f7f8 fee7 	bl	8000428 <__aeabi_f2d>
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007660:	f7f8 ff3a 	bl	80004d8 <__aeabi_dmul>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4620      	mov	r0, r4
 800766a:	4629      	mov	r1, r5
 800766c:	f7f8 fd7c 	bl	8000168 <__aeabi_dsub>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4692      	mov	sl, r2
 8007676:	469b      	mov	fp, r3
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007682:	4618      	mov	r0, r3
 8007684:	f7f8 fed0 	bl	8000428 <__aeabi_f2d>
 8007688:	4604      	mov	r4, r0
 800768a:	460d      	mov	r5, r1
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007690:	4618      	mov	r0, r3
 8007692:	f7f8 fec9 	bl	8000428 <__aeabi_f2d>
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800769c:	f7f8 ff1c 	bl	80004d8 <__aeabi_dmul>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 fd5e 	bl	8000168 <__aeabi_dsub>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4640      	mov	r0, r8
 80076b2:	4649      	mov	r1, r9
 80076b4:	f7f8 ff10 	bl	80004d8 <__aeabi_dmul>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4650      	mov	r0, sl
 80076be:	4659      	mov	r1, fp
 80076c0:	f7f8 fd52 	bl	8000168 <__aeabi_dsub>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076cc:	f7f9 f82e 	bl	800072c <__aeabi_ddiv>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076d8:	f7f8 fd48 	bl	800016c <__adddf3>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4610      	mov	r0, r2
 80076e2:	4619      	mov	r1, r3
 80076e4:	f7f9 f9d0 	bl	8000a88 <__aeabi_d2f>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ec:	631a      	str	r2, [r3, #48]	; 0x30

  S11_pitch = -((S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)) - 1)*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f8 fe98 	bl	8000428 <__aeabi_f2d>
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80076fe:	f7f8 fd35 	bl	800016c <__adddf3>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4614      	mov	r4, r2
 8007708:	461d      	mov	r5, r3
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	4618      	mov	r0, r3
 8007710:	f7f8 fe8a 	bl	8000428 <__aeabi_f2d>
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800771a:	f7f8 fedd 	bl	80004d8 <__aeabi_dmul>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 fd1f 	bl	8000168 <__aeabi_dsub>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4692      	mov	sl, r2
 8007730:	469b      	mov	fp, r3
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773c:	4618      	mov	r0, r3
 800773e:	f7f8 fe73 	bl	8000428 <__aeabi_f2d>
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	4618      	mov	r0, r3
 800774c:	f7f8 fe6c 	bl	8000428 <__aeabi_f2d>
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007756:	f7f8 febf 	bl	80004d8 <__aeabi_dmul>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4640      	mov	r0, r8
 8007760:	4649      	mov	r1, r9
 8007762:	f7f8 fd01 	bl	8000168 <__aeabi_dsub>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	f7f8 feb3 	bl	80004d8 <__aeabi_dmul>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4650      	mov	r0, sl
 8007778:	4659      	mov	r1, fp
 800777a:	f7f8 fcf5 	bl	8000168 <__aeabi_dsub>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007790:	4618      	mov	r0, r3
 8007792:	f7f8 fe49 	bl	8000428 <__aeabi_f2d>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4620      	mov	r0, r4
 800779c:	4629      	mov	r1, r5
 800779e:	f7f8 fce5 	bl	800016c <__adddf3>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4610      	mov	r0, r2
 80077a8:	4619      	mov	r1, r3
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80077b0:	f7f8 fcdc 	bl	800016c <__adddf3>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	461d      	mov	r5, r3
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7f8 fe31 	bl	8000428 <__aeabi_f2d>
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80077cc:	f7f8 fe84 	bl	80004d8 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	f7f8 fcc6 	bl	8000168 <__aeabi_dsub>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4692      	mov	sl, r2
 80077e2:	469b      	mov	fp, r3
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7f8 fe1a 	bl	8000428 <__aeabi_f2d>
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7f8 fe13 	bl	8000428 <__aeabi_f2d>
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007808:	f7f8 fe66 	bl	80004d8 <__aeabi_dmul>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4620      	mov	r0, r4
 8007812:	4629      	mov	r1, r5
 8007814:	f7f8 fca8 	bl	8000168 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4640      	mov	r0, r8
 800781e:	4649      	mov	r1, r9
 8007820:	f7f8 fe5a 	bl	80004d8 <__aeabi_dmul>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	f7f8 fc9c 	bl	8000168 <__aeabi_dsub>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007838:	f7f8 ff78 	bl	800072c <__aeabi_ddiv>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4610      	mov	r0, r2
 8007842:	4619      	mov	r1, r3
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	4bbc      	ldr	r3, [pc, #752]	; (8007b3c <_ZN15Kalman_Filtresi3RunEPfS0_+0xa3c>)
 800784a:	f7f8 fc8d 	bl	8000168 <__aeabi_dsub>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	61ba      	str	r2, [r7, #24]
 8007854:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785e:	4618      	mov	r0, r3
 8007860:	f7f8 fde2 	bl	8000428 <__aeabi_f2d>
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800786a:	f7f8 fc7f 	bl	800016c <__adddf3>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4614      	mov	r4, r2
 8007874:	461d      	mov	r5, r3
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787a:	4618      	mov	r0, r3
 800787c:	f7f8 fdd4 	bl	8000428 <__aeabi_f2d>
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007886:	f7f8 fe27 	bl	80004d8 <__aeabi_dmul>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	f7f8 fc69 	bl	8000168 <__aeabi_dsub>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4692      	mov	sl, r2
 800789c:	469b      	mov	fp, r3
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7f8 fdbd 	bl	8000428 <__aeabi_f2d>
 80078ae:	4680      	mov	r8, r0
 80078b0:	4689      	mov	r9, r1
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7f8 fdb6 	bl	8000428 <__aeabi_f2d>
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80078c2:	f7f8 fe09 	bl	80004d8 <__aeabi_dmul>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f7f8 fc4b 	bl	8000168 <__aeabi_dsub>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f8 fdfd 	bl	80004d8 <__aeabi_dmul>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4650      	mov	r0, sl
 80078e4:	4659      	mov	r1, fp
 80078e6:	f7f8 fc3f 	bl	8000168 <__aeabi_dsub>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80078f2:	f7f8 fdf1 	bl	80004d8 <__aeabi_dmul>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4610      	mov	r0, r2
 80078fc:	4619      	mov	r1, r3
 80078fe:	f7f9 f8c3 	bl	8000a88 <__aeabi_d2f>
 8007902:	4602      	mov	r2, r0
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	64da      	str	r2, [r3, #76]	; 0x4c
  S12_pitch = -((S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)) - 1)*(S12_pitch + (sa_p) - S22_pitch*st);
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790c:	4618      	mov	r0, r3
 800790e:	f7f8 fd8b 	bl	8000428 <__aeabi_f2d>
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007918:	f7f8 fc28 	bl	800016c <__adddf3>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4614      	mov	r4, r2
 8007922:	461d      	mov	r5, r3
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	4618      	mov	r0, r3
 800792a:	f7f8 fd7d 	bl	8000428 <__aeabi_f2d>
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007934:	f7f8 fdd0 	bl	80004d8 <__aeabi_dmul>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	f7f8 fc12 	bl	8000168 <__aeabi_dsub>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4692      	mov	sl, r2
 800794a:	469b      	mov	fp, r3
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	4618      	mov	r0, r3
 8007958:	f7f8 fd66 	bl	8000428 <__aeabi_f2d>
 800795c:	4680      	mov	r8, r0
 800795e:	4689      	mov	r9, r1
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007964:	4618      	mov	r0, r3
 8007966:	f7f8 fd5f 	bl	8000428 <__aeabi_f2d>
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007970:	f7f8 fdb2 	bl	80004d8 <__aeabi_dmul>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4640      	mov	r0, r8
 800797a:	4649      	mov	r1, r9
 800797c:	f7f8 fbf4 	bl	8000168 <__aeabi_dsub>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fda6 	bl	80004d8 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4650      	mov	r0, sl
 8007992:	4659      	mov	r1, fp
 8007994:	f7f8 fbe8 	bl	8000168 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4692      	mov	sl, r2
 800799e:	469b      	mov	fp, r3
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f8 fd3c 	bl	8000428 <__aeabi_f2d>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	f7f8 fbd8 	bl	800016c <__adddf3>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80079ca:	f7f8 fbcf 	bl	800016c <__adddf3>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4614      	mov	r4, r2
 80079d4:	461d      	mov	r5, r3
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	4618      	mov	r0, r3
 80079dc:	f7f8 fd24 	bl	8000428 <__aeabi_f2d>
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80079e6:	f7f8 fd77 	bl	80004d8 <__aeabi_dmul>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 fbb9 	bl	8000168 <__aeabi_dsub>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7f8 fd0d 	bl	8000428 <__aeabi_f2d>
 8007a0e:	4680      	mov	r8, r0
 8007a10:	4689      	mov	r9, r1
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7f8 fd06 	bl	8000428 <__aeabi_f2d>
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007a22:	f7f8 fd59 	bl	80004d8 <__aeabi_dmul>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f8 fb9b 	bl	8000168 <__aeabi_dsub>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 fd4d 	bl	80004d8 <__aeabi_dmul>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a46:	f7f8 fb8f 	bl	8000168 <__aeabi_dsub>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4650      	mov	r0, sl
 8007a50:	4659      	mov	r1, fp
 8007a52:	f7f8 fe6b 	bl	800072c <__aeabi_ddiv>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	f04f 0200 	mov.w	r2, #0
 8007a62:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <_ZN15Kalman_Filtresi3RunEPfS0_+0xa3c>)
 8007a64:	f7f8 fb80 	bl	8000168 <__aeabi_dsub>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	613a      	str	r2, [r7, #16]
 8007a6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7f8 fcd5 	bl	8000428 <__aeabi_f2d>
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007a84:	f7f8 fb72 	bl	800016c <__adddf3>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	461d      	mov	r5, r3
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f8 fcc7 	bl	8000428 <__aeabi_f2d>
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007aa0:	f7f8 fd1a 	bl	80004d8 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	4629      	mov	r1, r5
 8007aac:	f7f8 fb5c 	bl	8000168 <__aeabi_dsub>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ab8:	f7f8 fd0e 	bl	80004d8 <__aeabi_dmul>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	f7f8 ffe0 	bl	8000a88 <__aeabi_d2f>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	651a      	str	r2, [r3, #80]	; 0x50
  S21_pitch = S21_pitch + (sb_p) - S22_pitch*(st) - ((S21_pitch + (sb_p) - S22_pitch*(st))*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7f8 fca8 	bl	8000428 <__aeabi_f2d>
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007ade:	f7f8 fb45 	bl	800016c <__adddf3>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4614      	mov	r4, r2
 8007ae8:	461d      	mov	r5, r3
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7f8 fc9a 	bl	8000428 <__aeabi_f2d>
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007afa:	f7f8 fced 	bl	80004d8 <__aeabi_dmul>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f8 fb2f 	bl	8000168 <__aeabi_dsub>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7f8 fc86 	bl	8000428 <__aeabi_f2d>
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007b22:	f7f8 fb23 	bl	800016c <__adddf3>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4614      	mov	r4, r2
 8007b2c:	461d      	mov	r5, r3
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7f8 fc78 	bl	8000428 <__aeabi_f2d>
 8007b38:	e002      	b.n	8007b40 <_ZN15Kalman_Filtresi3RunEPfS0_+0xa40>
 8007b3a:	bf00      	nop
 8007b3c:	3ff00000 	.word	0x3ff00000
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007b46:	f7f8 fcc7 	bl	80004d8 <__aeabi_dmul>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4620      	mov	r0, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7f8 fb09 	bl	8000168 <__aeabi_dsub>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4692      	mov	sl, r2
 8007b5c:	469b      	mov	fp, r3
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7f8 fc60 	bl	8000428 <__aeabi_f2d>
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007b6e:	f7f8 fafd 	bl	800016c <__adddf3>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4614      	mov	r4, r2
 8007b78:	461d      	mov	r5, r3
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7f8 fc52 	bl	8000428 <__aeabi_f2d>
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007b8a:	f7f8 fca5 	bl	80004d8 <__aeabi_dmul>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4620      	mov	r0, r4
 8007b94:	4629      	mov	r1, r5
 8007b96:	f7f8 fae7 	bl	8000168 <__aeabi_dsub>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7f8 fc3b 	bl	8000428 <__aeabi_f2d>
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7f8 fc34 	bl	8000428 <__aeabi_f2d>
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007bc6:	f7f8 fc87 	bl	80004d8 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	f7f8 fac9 	bl	8000168 <__aeabi_dsub>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7f8 fc7b 	bl	80004d8 <__aeabi_dmul>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bea:	f7f8 fabd 	bl	8000168 <__aeabi_dsub>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	f7f8 fc6f 	bl	80004d8 <__aeabi_dmul>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4692      	mov	sl, r2
 8007c00:	469b      	mov	fp, r3
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f8 fc0b 	bl	8000428 <__aeabi_f2d>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 faa7 	bl	800016c <__adddf3>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4610      	mov	r0, r2
 8007c24:	4619      	mov	r1, r3
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007c2c:	f7f8 fa9e 	bl	800016c <__adddf3>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4614      	mov	r4, r2
 8007c36:	461d      	mov	r5, r3
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7f8 fbf3 	bl	8000428 <__aeabi_f2d>
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007c48:	f7f8 fc46 	bl	80004d8 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 fa88 	bl	8000168 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7f8 fbdc 	bl	8000428 <__aeabi_f2d>
 8007c70:	4680      	mov	r8, r0
 8007c72:	4689      	mov	r9, r1
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7f8 fbd5 	bl	8000428 <__aeabi_f2d>
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 fa6a 	bl	8000168 <__aeabi_dsub>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4620      	mov	r0, r4
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	f7f8 fc1c 	bl	80004d8 <__aeabi_dmul>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ca8:	f7f8 fa5e 	bl	8000168 <__aeabi_dsub>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	f7f8 fd3a 	bl	800072c <__aeabi_ddiv>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cc0:	f7f8 fa52 	bl	8000168 <__aeabi_dsub>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	f7f8 fedc 	bl	8000a88 <__aeabi_d2f>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	655a      	str	r2, [r3, #84]	; 0x54
  S22_pitch = S22_pitch + (sb_p) - ((S21_pitch + (sb_p) - S22_pitch*(st))*(S12_pitch + (sa_p) - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7f8 fba4 	bl	8000428 <__aeabi_f2d>
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007ce6:	f7f8 fa41 	bl	800016c <__adddf3>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4692      	mov	sl, r2
 8007cf0:	469b      	mov	fp, r3
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f8 fb96 	bl	8000428 <__aeabi_f2d>
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007d02:	f7f8 fa33 	bl	800016c <__adddf3>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4614      	mov	r4, r2
 8007d0c:	461d      	mov	r5, r3
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7f8 fb88 	bl	8000428 <__aeabi_f2d>
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007d1e:	f7f8 fbdb 	bl	80004d8 <__aeabi_dmul>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fa1d 	bl	8000168 <__aeabi_dsub>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4614      	mov	r4, r2
 8007d34:	461d      	mov	r5, r3
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7f8 fb74 	bl	8000428 <__aeabi_f2d>
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007d46:	f7f8 fa11 	bl	800016c <__adddf3>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4690      	mov	r8, r2
 8007d50:	4699      	mov	r9, r3
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7f8 fb66 	bl	8000428 <__aeabi_f2d>
 8007d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007d62:	f7f8 fbb9 	bl	80004d8 <__aeabi_dmul>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 f9fb 	bl	8000168 <__aeabi_dsub>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fbad 	bl	80004d8 <__aeabi_dmul>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7f8 fb49 	bl	8000428 <__aeabi_f2d>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	f7f8 f9e5 	bl	800016c <__adddf3>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4610      	mov	r0, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007db0:	f7f8 f9dc 	bl	800016c <__adddf3>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4614      	mov	r4, r2
 8007dba:	461d      	mov	r5, r3
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7f8 fb31 	bl	8000428 <__aeabi_f2d>
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007dcc:	f7f8 fb84 	bl	80004d8 <__aeabi_dmul>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	f7f8 f9c6 	bl	8000168 <__aeabi_dsub>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7f8 fb1a 	bl	8000428 <__aeabi_f2d>
 8007df4:	4680      	mov	r8, r0
 8007df6:	4689      	mov	r9, r1
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7f8 fb13 	bl	8000428 <__aeabi_f2d>
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007e08:	f7f8 fb66 	bl	80004d8 <__aeabi_dmul>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 f9a8 	bl	8000168 <__aeabi_dsub>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4629      	mov	r1, r5
 8007e20:	f7f8 fb5a 	bl	80004d8 <__aeabi_dmul>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e2c:	f7f8 f99c 	bl	8000168 <__aeabi_dsub>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e38:	f7f8 fc78 	bl	800072c <__aeabi_ddiv>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4650      	mov	r0, sl
 8007e42:	4659      	mov	r1, fp
 8007e44:	f7f8 f990 	bl	8000168 <__aeabi_dsub>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4619      	mov	r1, r3
 8007e50:	f7f8 fe1a 	bl	8000a88 <__aeabi_d2f>
 8007e54:	4602      	mov	r2, r0
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	659a      	str	r2, [r3, #88]	; 0x58
    pitch_rate = gyroY;
 8007e5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e5c:	f7f8 fae4 	bl	8000428 <__aeabi_f2d>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e66:	e9c1 2308 	strd	r2, r3, [r1, #32]

	S11_p_yaw = -S11_m_yaw*(Kt11_yaw-1);  S12_p_yaw = -S12_m_yaw*(Kt11_yaw-1);
	S21_p_yaw = S21_m_yaw-S11_m_yaw*Kt21_yaw; S22_p_yaw = S22_m_yaw-S12_m_yaw*Kt21_yaw;

	S11_m_yaw = S11_p_yaw; S12_m_yaw = S12_p_yaw; S21_m_yaw = S21_p_yaw; S22_m_yaw = S22_p_yaw; */
  yaw_rate = gyroZ;
 8007e6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e6c:	f7f8 fadc 	bl	8000428 <__aeabi_f2d>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e76:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8007e7a:	e025      	b.n	8007ec8 <_ZN15Kalman_Filtresi3RunEPfS0_+0xdc8>
    //=================================

    }

    else {
    	roll = roll_acc;
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f8 fad0 	bl	8000428 <__aeabi_f2d>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e8e:	e9c1 2300 	strd	r2, r3, [r1]
    	pitch = pitch_acc;
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7f8 fac5 	bl	8000428 <__aeabi_f2d>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea4:	e9c1 2302 	strd	r2, r3, [r1, #8]

    	roll_comp  = roll_acc;
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    	pitch_comp = pitch_acc;
 8007eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb6:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    	gyro_ready = true;
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    }

	pitch_eski=pitch_comp;
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	roll_eski=roll_comp;
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    state.angles[0] = roll_comp;
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    state.angles[1] = pitch;
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f7f8 fdc7 	bl	8000a88 <__aeabi_d2f>
 8007efa:	4602      	mov	r2, r0
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    state.angles[2] = 0;
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    state.rates[0] = roll_rate;
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	f7f8 fdb7 	bl	8000a88 <__aeabi_d2f>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    state.rates[1] = pitch_rate;
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f7f8 fdac 	bl	8000a88 <__aeabi_d2f>
 8007f30:	4602      	mov	r2, r0
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    state.rates[2] = yaw_rate;
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4619      	mov	r1, r3
 8007f42:	f7f8 fda1 	bl	8000a88 <__aeabi_d2f>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    state.bias[0] = roll_bias;
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    state.bias[1] = pitch_bias;
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    state.bias[2] = yaw_bias;
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

}
 8007f6c:	bf00      	nop
 8007f6e:	3750      	adds	r7, #80	; 0x50
 8007f70:	46bd      	mov	sp, r7
 8007f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f76:	bf00      	nop

08007f78 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr
 8007f8c:	0000      	movs	r0, r0
	...

08007f90 <_ZN13LowPassFilterC1Eff>:

LowPassFilter::LowPassFilter():
	output(0),
	ePow(0){}

LowPassFilter::LowPassFilter(float iCutOffFrequency, float iDeltaTime):
 8007f90:	b5b0      	push	{r4, r5, r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
	output(0),
	ePow(1-exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007faa:	4619      	mov	r1, r3
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7f8 fdc1 	bl	8000b34 <__addsf3>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7f8 fa37 	bl	8000428 <__aeabi_f2d>
 8007fba:	a317      	add	r3, pc, #92	; (adr r3, 8008018 <_ZN13LowPassFilterC1Eff+0x88>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 fa8a 	bl	80004d8 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4614      	mov	r4, r2
 8007fca:	461d      	mov	r5, r3
 8007fcc:	68b8      	ldr	r0, [r7, #8]
 8007fce:	f7f8 fa2b 	bl	8000428 <__aeabi_f2d>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	f7f8 fa7d 	bl	80004d8 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f000 fb5b 	bl	80086a0 <exp>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	f04f 0000 	mov.w	r0, #0
 8007ff2:	490b      	ldr	r1, [pc, #44]	; (8008020 <_ZN13LowPassFilterC1Eff+0x90>)
 8007ff4:	f7f8 f8b8 	bl	8000168 <__aeabi_dsub>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4619      	mov	r1, r3
 8008000:	f7f8 fd42 	bl	8000a88 <__aeabi_d2f>
 8008004:	4602      	mov	r2, r0
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	605a      	str	r2, [r3, #4]
	if(iCutOffFrequency <= 0){
		std::cout << "Warning: A LowPassFilter instance has been configured with 0 Hz as cut-off frequency.";
		ePow = 0;
	}
	#endif
}
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bdb0      	pop	{r4, r5, r7, pc}
 8008014:	f3af 8000 	nop.w
 8008018:	54442d18 	.word	0x54442d18
 800801c:	400921fb 	.word	0x400921fb
 8008020:	3ff00000 	.word	0x3ff00000

08008024 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID(): lpf(LP_FILTER_CUT_FREQ,st) {};
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a13      	ldr	r2, [pc, #76]	; (800807c <_ZN3PIDC1Ev+0x58>)
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a12      	ldr	r2, [pc, #72]	; (8008080 <_ZN3PIDC1Ev+0x5c>)
 8008036:	605a      	str	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	22c8      	movs	r2, #200	; 0xc8
 800803c:	609a      	str	r2, [r3, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 fe2a 	bl	8000c9c <__aeabi_i2f>
 8008048:	4603      	mov	r3, r0
 800804a:	4619      	mov	r1, r3
 800804c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008050:	f7f8 ff2c 	bl	8000eac <__aeabi_fdiv>
 8008054:	4603      	mov	r3, r0
 8008056:	461a      	mov	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60da      	str	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f103 0018 	add.w	r0, r3, #24
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	461a      	mov	r2, r3
 8008068:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800806c:	f7ff ff90 	bl	8007f90 <_ZN13LowPassFilterC1Eff>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	42f00000 	.word	0x42f00000
 8008080:	c2f00000 	.word	0xc2f00000

08008084 <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e = alpha_des - alpha;
 8008090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008098:	f7f8 f866 	bl	8000168 <__aeabi_dsub>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp_angle*e;
 80080a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80080ac:	f7f8 fa14 	bl	80004d8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 80080b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	3720      	adds	r7, #32
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <_ZN3PID7PD_RateEddddd>:


double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 80080c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ca:	b089      	sub	sp, #36	; 0x24
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	e9c7 2300 	strd	r2, r3, [r7]

	e_roll = alpha_dot_des - alpha_dot;
 80080d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80080d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080dc:	f7f8 f844 	bl	8000168 <__aeabi_dsub>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4610      	mov	r0, r2
 80080e6:	4619      	mov	r1, r3
 80080e8:	f7f8 fcce 	bl	8000a88 <__aeabi_d2f>
 80080ec:	4602      	mov	r2, r0
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	621a      	str	r2, [r3, #32]
  double e_roll_int = e_roll;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7f8 f996 	bl	8000428 <__aeabi_f2d>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	e9c7 2304 	strd	r2, r3, [r7, #16]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	4618      	mov	r0, r3
 800810a:	f7f8 fff7 	bl	80010fc <__aeabi_f2iz>
 800810e:	4604      	mov	r4, r0
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008114:	4618      	mov	r0, r3
 8008116:	f7f8 fff1 	bl	80010fc <__aeabi_f2iz>
 800811a:	4603      	mov	r3, r0
 800811c:	429c      	cmp	r4, r3
 800811e:	d02b      	beq.n	8008178 <_ZN3PID7PD_RateEddddd+0xb0>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	4618      	mov	r0, r3
 8008126:	f7f8 f97f 	bl	8000428 <__aeabi_f2d>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f940 	bl	80083b4 <_ZN3PID3sgnEd>
 8008134:	4604      	mov	r4, r0
 8008136:	460d      	mov	r5, r1
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813c:	4618      	mov	r0, r3
 800813e:	f7f8 f973 	bl	8000428 <__aeabi_f2d>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f934 	bl	80083b4 <_ZN3PID3sgnEd>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	2101      	movs	r1, #1
 8008152:	460e      	mov	r6, r1
 8008154:	4620      	mov	r0, r4
 8008156:	4629      	mov	r1, r5
 8008158:	f7f8 fc26 	bl	80009a8 <__aeabi_dcmpeq>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <_ZN3PID7PD_RateEddddd+0x9e>
 8008162:	2300      	movs	r3, #0
 8008164:	461e      	mov	r6, r3
 8008166:	b2f3      	uxtb	r3, r6
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <_ZN3PID7PD_RateEddddd+0xb0>
      e_roll_int = 0;
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	4618      	mov	r0, r3
 800817e:	f7f8 f953 	bl	8000428 <__aeabi_f2d>
 8008182:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008186:	f7f8 f9a7 	bl	80004d8 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4614      	mov	r4, r2
 8008190:	461d      	mov	r5, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008196:	4618      	mov	r0, r3
 8008198:	f7f8 f946 	bl	8000428 <__aeabi_f2d>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4620      	mov	r0, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	f7f7 ffe0 	bl	8000168 <__aeabi_dsub>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4610      	mov	r0, r2
 80081ae:	4619      	mov	r1, r3
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	4b5c      	ldr	r3, [pc, #368]	; (8008328 <_ZN3PID7PD_RateEddddd+0x260>)
 80081b6:	f7f8 f98f 	bl	80004d8 <__aeabi_dmul>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4610      	mov	r0, r2
 80081c0:	4619      	mov	r1, r3
 80081c2:	f7f8 fc61 	bl	8000a88 <__aeabi_d2f>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	645a      	str	r2, [r3, #68]	; 0x44
  	de_int += de_filt*st;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f7f8 fdb2 	bl	8000d44 <__aeabi_fmul>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4619      	mov	r1, r3
 80081e4:	4620      	mov	r0, r4
 80081e6:	f7f8 fca5 	bl	8000b34 <__addsf3>
 80081ea:	4603      	mov	r3, r0
 80081ec:	461a      	mov	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	649a      	str	r2, [r3, #72]	; 0x48

	de = e_roll - e_eski_roll;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f7f8 fc97 	bl	8000b30 <__aeabi_fsub>
 8008202:	4603      	mov	r3, r0
 8008204:	461a      	mov	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	641a      	str	r2, [r3, #64]	; 0x40
	e_eski_roll = e_roll;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a1a      	ldr	r2, [r3, #32]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	629a      	str	r2, [r3, #40]	; 0x28

  ie_roll += e_roll_int*st;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	4618      	mov	r0, r3
 8008218:	f7f8 f906 	bl	8000428 <__aeabi_f2d>
 800821c:	4604      	mov	r4, r0
 800821e:	460d      	mov	r5, r1
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	4618      	mov	r0, r3
 8008226:	f7f8 f8ff 	bl	8000428 <__aeabi_f2d>
 800822a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800822e:	f7f8 f953 	bl	80004d8 <__aeabi_dmul>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	f7f7 ff97 	bl	800016c <__adddf3>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4610      	mov	r0, r2
 8008244:	4619      	mov	r1, r3
 8008246:	f7f8 fc1f 	bl	8000a88 <__aeabi_d2f>
 800824a:	4602      	mov	r2, r0
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	631a      	str	r2, [r3, #48]	; 0x30

  ie_roll_sat = ie_roll;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	639a      	str	r2, [r3, #56]	; 0x38
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	4618      	mov	r0, r3
 800825e:	f7f8 f8e3 	bl	8000428 <__aeabi_f2d>
 8008262:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008266:	f7f8 f937 	bl	80004d8 <__aeabi_dmul>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008278:	4618      	mov	r0, r3
 800827a:	f7f8 f8d5 	bl	8000428 <__aeabi_f2d>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	4618      	mov	r0, r3
 800828e:	f7f8 f8cb 	bl	8000428 <__aeabi_f2d>
 8008292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008296:	f7f8 f91f 	bl	80004d8 <__aeabi_dmul>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//D = lpf.update(D);
	pd = P + I + D;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80082b0:	f7f7 ff5c 	bl	800016c <__adddf3>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4610      	mov	r0, r2
 80082ba:	4619      	mov	r1, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80082c2:	f7f7 ff53 	bl	800016c <__adddf3>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  	pd_roll_buf = pd;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80082d6:	4610      	mov	r0, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	f7f8 fbd5 	bl	8000a88 <__aeabi_d2f>
 80082de:	4602      	mov	r2, r0
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	611a      	str	r2, [r3, #16]
	pd  = Sat(pd,  300, -300);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80082ea:	4910      	ldr	r1, [pc, #64]	; (800832c <_ZN3PID7PD_RateEddddd+0x264>)
 80082ec:	9101      	str	r1, [sp, #4]
 80082ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80082f2:	9100      	str	r1, [sp, #0]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f8d5 	bl	80084a4 <_ZN3PID3SatEdii>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pd_roll_sat_buf = pd;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800830a:	4610      	mov	r0, r2
 800830c:	4619      	mov	r1, r3
 800830e:	f7f8 fbbb 	bl	8000a88 <__aeabi_d2f>
 8008312:	4602      	mov	r2, r0
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	63da      	str	r2, [r3, #60]	; 0x3c
    return pd;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68

}
 800831e:	4610      	mov	r0, r2
 8008320:	4619      	mov	r1, r3
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008328:	40240000 	.word	0x40240000
 800832c:	fffffed4 	.word	0xfffffed4

08008330 <_ZN3PID5resetEv>:

void PID::reset() {
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	639a      	str	r2, [r3, #56]	; 0x38
	de_filt = 0;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	645a      	str	r2, [r3, #68]	; 0x44
	de_int = 0;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr

0800835a <_ZN3PID10P_Rate_YawEddd>:


double PID::P_Rate_Yaw(double alpha_dot_des, double alpha_dot, double Kp) {
 800835a:	b580      	push	{r7, lr}
 800835c:	b08a      	sub	sp, #40	; 0x28
 800835e:	af02      	add	r7, sp, #8
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e_yaw = alpha_dot_des - alpha_dot;	
 8008366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800836a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800836e:	f7f7 fefb 	bl	8000168 <__aeabi_dsub>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp*e_yaw;
 800837a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800837e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008382:	f7f8 f8a9 	bl	80004d8 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	P    = Sat(P,    150, -150);
 800838e:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	2396      	movs	r3, #150	; 0x96
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f881 	bl	80084a4 <_ZN3PID3SatEdii>
 80083a2:	e9c7 0104 	strd	r0, r1, [r7, #16]

    return P;
 80083a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 80083aa:	4610      	mov	r0, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	3720      	adds	r7, #32
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <_ZN3PID3sgnEd>:

double PID::sgn(double v) {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083cc:	f7f8 faf6 	bl	80009bc <__aeabi_dcmplt>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <_ZN3PID3sgnEd+0x2a>
 80083d6:	f04f 0200 	mov.w	r2, #0
 80083da:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <_ZN3PID3sgnEd+0x5c>)
 80083dc:	e012      	b.n	8008404 <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 80083de:	f04f 0200 	mov.w	r2, #0
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ea:	f7f8 fb05 	bl	80009f8 <__aeabi_dcmpgt>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <_ZN3PID3sgnEd+0x48>
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	4b06      	ldr	r3, [pc, #24]	; (8008414 <_ZN3PID3sgnEd+0x60>)
 80083fa:	e003      	b.n	8008404 <_ZN3PID3sgnEd+0x50>
  return 0;
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	f04f 0300 	mov.w	r3, #0
}
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	bff00000 	.word	0xbff00000
 8008414:	3ff00000 	.word	0x3ff00000

08008418 <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800842a:	dd2c      	ble.n	8008486 <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 800842c:	6a38      	ldr	r0, [r7, #32]
 800842e:	f7f7 ffe9 	bl	8000404 <__aeabi_i2d>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800843a:	f7f8 fadd 	bl	80009f8 <__aeabi_dcmpgt>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 8008444:	6a38      	ldr	r0, [r7, #32]
 8008446:	f7f7 ffdd 	bl	8000404 <__aeabi_i2d>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008452:	e01d      	b.n	8008490 <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 8008454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008456:	f7f7 ffd5 	bl	8000404 <__aeabi_i2d>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008462:	f7f8 faab 	bl	80009bc <__aeabi_dcmplt>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 800846c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800846e:	f7f7 ffc9 	bl	8000404 <__aeabi_i2d>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800847a:	e009      	b.n	8008490 <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 800847c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008480:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008484:	e004      	b.n	8008490 <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <_ZN3PID3SatEdiii+0x88>)
 800848c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 8008490:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	408f4000 	.word	0x408f4000

080084a4 <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 80084b0:	6a38      	ldr	r0, [r7, #32]
 80084b2:	f7f7 ffa7 	bl	8000404 <__aeabi_i2d>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084be:	f7f8 fa9b 	bl	80009f8 <__aeabi_dcmpgt>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 80084c8:	6a38      	ldr	r0, [r7, #32]
 80084ca:	f7f7 ff9b 	bl	8000404 <__aeabi_i2d>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80084d6:	e017      	b.n	8008508 <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 80084d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084da:	f7f7 ff93 	bl	8000404 <__aeabi_i2d>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084e6:	f7f8 fa69 	bl	80009bc <__aeabi_dcmplt>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 80084f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f2:	f7f7 ff87 	bl	8000404 <__aeabi_i2d>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80084fe:	e003      	b.n	8008508 <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 8008500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008504:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 8008508:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 8008516:	b580      	push	{r7, lr}
 8008518:	b086      	sub	sp, #24
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8008522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008526:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8008528:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800852c:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800852e:	f06f 031d 	mvn.w	r3, #29
 8008532:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 8008534:	231e      	movs	r3, #30
 8008536:	60bb      	str	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008538:	887a      	ldrh	r2, [r7, #2]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	1a8a      	subs	r2, r1, r2
 8008544:	fb02 f203 	mul.w	r2, r2, r3
 8008548:	6939      	ldr	r1, [r7, #16]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	1acb      	subs	r3, r1, r3
 800854e:	fb92 f2f3 	sdiv	r2, r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7f8 fba0 	bl	8000c9c <__aeabi_i2f>
 800855c:	4603      	mov	r3, r0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8008572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008576:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8008578:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800857c:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 800857e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008582:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8008584:	2364      	movs	r3, #100	; 0x64
 8008586:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8008588:	887a      	ldrh	r2, [r7, #2]
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	1a8a      	subs	r2, r1, r2
 8008594:	fb02 f203 	mul.w	r2, r2, r3
 8008598:	6939      	ldr	r1, [r7, #16]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	1acb      	subs	r3, r1, r3
 800859e:	fb92 f2f3 	sdiv	r2, r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	425b      	negs	r3, r3
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7f8 fb77 	bl	8000c9c <__aeabi_i2f>
 80085ae:	4603      	mov	r3, r0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 80085b8:	b590      	push	{r4, r7, lr}
 80085ba:	b089      	sub	sp, #36	; 0x24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	460b      	mov	r3, r1
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 80085c6:	4b1d      	ldr	r3, [pc, #116]	; (800863c <_ZN3PID7pwm2motEti+0x84>)
 80085c8:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 80085ca:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <_ZN3PID7pwm2motEti+0x88>)
 80085cc:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 80085d4:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <_ZN3PID7pwm2motEti+0x8c>)
 80085d6:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7f8 fb5f 	bl	8000c9c <__aeabi_i2f>
 80085de:	4604      	mov	r4, r0
 80085e0:	897b      	ldrh	r3, [r7, #10]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7f8 fb56 	bl	8000c94 <__aeabi_ui2f>
 80085e8:	4603      	mov	r3, r0
 80085ea:	69f9      	ldr	r1, [r7, #28]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7f8 fa9f 	bl	8000b30 <__aeabi_fsub>
 80085f2:	4603      	mov	r3, r0
 80085f4:	4619      	mov	r1, r3
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7f8 fba4 	bl	8000d44 <__aeabi_fmul>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461c      	mov	r4, r3
 8008600:	6979      	ldr	r1, [r7, #20]
 8008602:	6938      	ldr	r0, [r7, #16]
 8008604:	f7f8 fa94 	bl	8000b30 <__aeabi_fsub>
 8008608:	4603      	mov	r3, r0
 800860a:	4619      	mov	r1, r3
 800860c:	4620      	mov	r0, r4
 800860e:	f7f8 fb99 	bl	8000d44 <__aeabi_fmul>
 8008612:	4603      	mov	r3, r0
 8008614:	461c      	mov	r4, r3
 8008616:	69f9      	ldr	r1, [r7, #28]
 8008618:	69b8      	ldr	r0, [r7, #24]
 800861a:	f7f8 fa89 	bl	8000b30 <__aeabi_fsub>
 800861e:	4603      	mov	r3, r0
 8008620:	4619      	mov	r1, r3
 8008622:	4620      	mov	r0, r4
 8008624:	f7f8 fc42 	bl	8000eac <__aeabi_fdiv>
 8008628:	4603      	mov	r3, r0
 800862a:	6979      	ldr	r1, [r7, #20]
 800862c:	4618      	mov	r0, r3
 800862e:	f7f8 fa81 	bl	8000b34 <__addsf3>
 8008632:	4603      	mov	r3, r0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3724      	adds	r7, #36	; 0x24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd90      	pop	{r4, r7, pc}
 800863c:	447a0000 	.word	0x447a0000
 8008640:	44fa0000 	.word	0x44fa0000
 8008644:	44a5c000 	.word	0x44a5c000

08008648 <_ZN3PIDD1Ev>:

PID::~PID() {};
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <_ZdlPv>:
 800865c:	f000 bbee 	b.w	8008e3c <free>

08008660 <_Znwj>:
 8008660:	2801      	cmp	r0, #1
 8008662:	bf38      	it	cc
 8008664:	2001      	movcc	r0, #1
 8008666:	b510      	push	{r4, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fbde 	bl	8008e2c <malloc>
 8008670:	b930      	cbnz	r0, 8008680 <_Znwj+0x20>
 8008672:	f000 f80d 	bl	8008690 <_ZSt15get_new_handlerv>
 8008676:	b908      	cbnz	r0, 800867c <_Znwj+0x1c>
 8008678:	f000 fba6 	bl	8008dc8 <abort>
 800867c:	4780      	blx	r0
 800867e:	e7f4      	b.n	800866a <_Znwj+0xa>
 8008680:	bd10      	pop	{r4, pc}

08008682 <_ZSt17__throw_bad_allocv>:
 8008682:	b508      	push	{r3, lr}
 8008684:	f000 fba0 	bl	8008dc8 <abort>

08008688 <_ZSt20__throw_length_errorPKc>:
 8008688:	b508      	push	{r3, lr}
 800868a:	f000 fb9d 	bl	8008dc8 <abort>
	...

08008690 <_ZSt15get_new_handlerv>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <_ZSt15get_new_handlerv+0xc>)
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	f3bf 8f5b 	dmb	ish
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	20000954 	.word	0x20000954

080086a0 <exp>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	4606      	mov	r6, r0
 80086a4:	460f      	mov	r7, r1
 80086a6:	f000 f883 	bl	80087b0 <__ieee754_exp>
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <exp+0x78>)
 80086ac:	4604      	mov	r4, r0
 80086ae:	f993 3000 	ldrsb.w	r3, [r3]
 80086b2:	460d      	mov	r5, r1
 80086b4:	3301      	adds	r3, #1
 80086b6:	d012      	beq.n	80086de <exp+0x3e>
 80086b8:	4630      	mov	r0, r6
 80086ba:	4639      	mov	r1, r7
 80086bc:	f000 fb77 	bl	8008dae <finite>
 80086c0:	b168      	cbz	r0, 80086de <exp+0x3e>
 80086c2:	a311      	add	r3, pc, #68	; (adr r3, 8008708 <exp+0x68>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f8 f994 	bl	80009f8 <__aeabi_dcmpgt>
 80086d0:	b140      	cbz	r0, 80086e4 <exp+0x44>
 80086d2:	f000 fb81 	bl	8008dd8 <__errno>
 80086d6:	2322      	movs	r3, #34	; 0x22
 80086d8:	2400      	movs	r4, #0
 80086da:	4d10      	ldr	r5, [pc, #64]	; (800871c <exp+0x7c>)
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e4:	4630      	mov	r0, r6
 80086e6:	a30a      	add	r3, pc, #40	; (adr r3, 8008710 <exp+0x70>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	4639      	mov	r1, r7
 80086ee:	f7f8 f965 	bl	80009bc <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d0f3      	beq.n	80086de <exp+0x3e>
 80086f6:	f000 fb6f 	bl	8008dd8 <__errno>
 80086fa:	2322      	movs	r3, #34	; 0x22
 80086fc:	2400      	movs	r4, #0
 80086fe:	2500      	movs	r5, #0
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	e7ec      	b.n	80086de <exp+0x3e>
 8008704:	f3af 8000 	nop.w
 8008708:	fefa39ef 	.word	0xfefa39ef
 800870c:	40862e42 	.word	0x40862e42
 8008710:	d52d3051 	.word	0xd52d3051
 8008714:	c0874910 	.word	0xc0874910
 8008718:	20000009 	.word	0x20000009
 800871c:	7ff00000 	.word	0x7ff00000

08008720 <asinf>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	f000 f9ae 	bl	8008a84 <__ieee754_asinf>
 8008728:	4b0e      	ldr	r3, [pc, #56]	; (8008764 <asinf+0x44>)
 800872a:	4605      	mov	r5, r0
 800872c:	f993 3000 	ldrsb.w	r3, [r3]
 8008730:	3301      	adds	r3, #1
 8008732:	d015      	beq.n	8008760 <asinf+0x40>
 8008734:	4621      	mov	r1, r4
 8008736:	4620      	mov	r0, r4
 8008738:	f7f8 fcca 	bl	80010d0 <__aeabi_fcmpun>
 800873c:	b980      	cbnz	r0, 8008760 <asinf+0x40>
 800873e:	4620      	mov	r0, r4
 8008740:	f000 fb3b 	bl	8008dba <fabsf>
 8008744:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008748:	f7f8 fcb8 	bl	80010bc <__aeabi_fcmpgt>
 800874c:	b140      	cbz	r0, 8008760 <asinf+0x40>
 800874e:	f000 fb43 	bl	8008dd8 <__errno>
 8008752:	2321      	movs	r3, #33	; 0x21
 8008754:	6003      	str	r3, [r0, #0]
 8008756:	4804      	ldr	r0, [pc, #16]	; (8008768 <asinf+0x48>)
 8008758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875c:	f000 bb30 	b.w	8008dc0 <nanf>
 8008760:	4628      	mov	r0, r5
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	20000009 	.word	0x20000009
 8008768:	0800bba0 	.word	0x0800bba0

0800876c <sqrtf>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4605      	mov	r5, r0
 8008770:	f000 facc 	bl	8008d0c <__ieee754_sqrtf>
 8008774:	4b0d      	ldr	r3, [pc, #52]	; (80087ac <sqrtf+0x40>)
 8008776:	4604      	mov	r4, r0
 8008778:	f993 3000 	ldrsb.w	r3, [r3]
 800877c:	3301      	adds	r3, #1
 800877e:	d012      	beq.n	80087a6 <sqrtf+0x3a>
 8008780:	4629      	mov	r1, r5
 8008782:	4628      	mov	r0, r5
 8008784:	f7f8 fca4 	bl	80010d0 <__aeabi_fcmpun>
 8008788:	b968      	cbnz	r0, 80087a6 <sqrtf+0x3a>
 800878a:	2100      	movs	r1, #0
 800878c:	4628      	mov	r0, r5
 800878e:	f7f8 fc77 	bl	8001080 <__aeabi_fcmplt>
 8008792:	b140      	cbz	r0, 80087a6 <sqrtf+0x3a>
 8008794:	f000 fb20 	bl	8008dd8 <__errno>
 8008798:	2321      	movs	r3, #33	; 0x21
 800879a:	2100      	movs	r1, #0
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	4608      	mov	r0, r1
 80087a0:	f7f8 fb84 	bl	8000eac <__aeabi_fdiv>
 80087a4:	4604      	mov	r4, r0
 80087a6:	4620      	mov	r0, r4
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	20000009 	.word	0x20000009

080087b0 <__ieee754_exp>:
 80087b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	4faa      	ldr	r7, [pc, #680]	; (8008a60 <__ieee754_exp+0x2b0>)
 80087b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087ba:	42bb      	cmp	r3, r7
 80087bc:	4605      	mov	r5, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80087c4:	d92f      	bls.n	8008826 <__ieee754_exp+0x76>
 80087c6:	4fa7      	ldr	r7, [pc, #668]	; (8008a64 <__ieee754_exp+0x2b4>)
 80087c8:	42bb      	cmp	r3, r7
 80087ca:	d911      	bls.n	80087f0 <__ieee754_exp+0x40>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80087d2:	4313      	orrs	r3, r2
 80087d4:	d006      	beq.n	80087e4 <__ieee754_exp+0x34>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	f7f7 fcc7 	bl	800016c <__adddf3>
 80087de:	4605      	mov	r5, r0
 80087e0:	460c      	mov	r4, r1
 80087e2:	e000      	b.n	80087e6 <__ieee754_exp+0x36>
 80087e4:	b9e6      	cbnz	r6, 8008820 <__ieee754_exp+0x70>
 80087e6:	4628      	mov	r0, r5
 80087e8:	4621      	mov	r1, r4
 80087ea:	b004      	add	sp, #16
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f0:	a385      	add	r3, pc, #532	; (adr r3, 8008a08 <__ieee754_exp+0x258>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f8 f8ff 	bl	80009f8 <__aeabi_dcmpgt>
 80087fa:	b138      	cbz	r0, 800880c <__ieee754_exp+0x5c>
 80087fc:	a384      	add	r3, pc, #528	; (adr r3, 8008a10 <__ieee754_exp+0x260>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	4610      	mov	r0, r2
 8008804:	4619      	mov	r1, r3
 8008806:	f7f7 fe67 	bl	80004d8 <__aeabi_dmul>
 800880a:	e7e8      	b.n	80087de <__ieee754_exp+0x2e>
 800880c:	4628      	mov	r0, r5
 800880e:	a382      	add	r3, pc, #520	; (adr r3, 8008a18 <__ieee754_exp+0x268>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	4621      	mov	r1, r4
 8008816:	f7f8 f8d1 	bl	80009bc <__aeabi_dcmplt>
 800881a:	2800      	cmp	r0, #0
 800881c:	f000 8082 	beq.w	8008924 <__ieee754_exp+0x174>
 8008820:	2500      	movs	r5, #0
 8008822:	462c      	mov	r4, r5
 8008824:	e7df      	b.n	80087e6 <__ieee754_exp+0x36>
 8008826:	4a90      	ldr	r2, [pc, #576]	; (8008a68 <__ieee754_exp+0x2b8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	f240 80a7 	bls.w	800897c <__ieee754_exp+0x1cc>
 800882e:	4a8f      	ldr	r2, [pc, #572]	; (8008a6c <__ieee754_exp+0x2bc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d877      	bhi.n	8008924 <__ieee754_exp+0x174>
 8008834:	4b8e      	ldr	r3, [pc, #568]	; (8008a70 <__ieee754_exp+0x2c0>)
 8008836:	00f4      	lsls	r4, r6, #3
 8008838:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800883c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008840:	f7f7 fc92 	bl	8000168 <__aeabi_dsub>
 8008844:	4680      	mov	r8, r0
 8008846:	4689      	mov	r9, r1
 8008848:	4b8a      	ldr	r3, [pc, #552]	; (8008a74 <__ieee754_exp+0x2c4>)
 800884a:	f1c6 0a01 	rsb	sl, r6, #1
 800884e:	4423      	add	r3, r4
 8008850:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008854:	e9cd 3400 	strd	r3, r4, [sp]
 8008858:	ebaa 0a06 	sub.w	sl, sl, r6
 800885c:	4640      	mov	r0, r8
 800885e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008862:	4649      	mov	r1, r9
 8008864:	f7f7 fc80 	bl	8000168 <__aeabi_dsub>
 8008868:	4605      	mov	r5, r0
 800886a:	460c      	mov	r4, r1
 800886c:	462a      	mov	r2, r5
 800886e:	4623      	mov	r3, r4
 8008870:	4628      	mov	r0, r5
 8008872:	4621      	mov	r1, r4
 8008874:	f7f7 fe30 	bl	80004d8 <__aeabi_dmul>
 8008878:	a369      	add	r3, pc, #420	; (adr r3, 8008a20 <__ieee754_exp+0x270>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	4606      	mov	r6, r0
 8008880:	460f      	mov	r7, r1
 8008882:	f7f7 fe29 	bl	80004d8 <__aeabi_dmul>
 8008886:	a368      	add	r3, pc, #416	; (adr r3, 8008a28 <__ieee754_exp+0x278>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	f7f7 fc6c 	bl	8000168 <__aeabi_dsub>
 8008890:	4632      	mov	r2, r6
 8008892:	463b      	mov	r3, r7
 8008894:	f7f7 fe20 	bl	80004d8 <__aeabi_dmul>
 8008898:	a365      	add	r3, pc, #404	; (adr r3, 8008a30 <__ieee754_exp+0x280>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 fc65 	bl	800016c <__adddf3>
 80088a2:	4632      	mov	r2, r6
 80088a4:	463b      	mov	r3, r7
 80088a6:	f7f7 fe17 	bl	80004d8 <__aeabi_dmul>
 80088aa:	a363      	add	r3, pc, #396	; (adr r3, 8008a38 <__ieee754_exp+0x288>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f7f7 fc5a 	bl	8000168 <__aeabi_dsub>
 80088b4:	4632      	mov	r2, r6
 80088b6:	463b      	mov	r3, r7
 80088b8:	f7f7 fe0e 	bl	80004d8 <__aeabi_dmul>
 80088bc:	a360      	add	r3, pc, #384	; (adr r3, 8008a40 <__ieee754_exp+0x290>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 fc53 	bl	800016c <__adddf3>
 80088c6:	4632      	mov	r2, r6
 80088c8:	463b      	mov	r3, r7
 80088ca:	f7f7 fe05 	bl	80004d8 <__aeabi_dmul>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4628      	mov	r0, r5
 80088d4:	4621      	mov	r1, r4
 80088d6:	f7f7 fc47 	bl	8000168 <__aeabi_dsub>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4606      	mov	r6, r0
 80088e0:	460f      	mov	r7, r1
 80088e2:	4628      	mov	r0, r5
 80088e4:	4621      	mov	r1, r4
 80088e6:	f7f7 fdf7 	bl	80004d8 <__aeabi_dmul>
 80088ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ee:	f1ba 0f00 	cmp.w	sl, #0
 80088f2:	d15a      	bne.n	80089aa <__ieee754_exp+0x1fa>
 80088f4:	2200      	movs	r2, #0
 80088f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088fa:	4630      	mov	r0, r6
 80088fc:	4639      	mov	r1, r7
 80088fe:	f7f7 fc33 	bl	8000168 <__aeabi_dsub>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800890a:	f7f7 ff0f 	bl	800072c <__aeabi_ddiv>
 800890e:	462a      	mov	r2, r5
 8008910:	4623      	mov	r3, r4
 8008912:	f7f7 fc29 	bl	8000168 <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	2000      	movs	r0, #0
 800891c:	4956      	ldr	r1, [pc, #344]	; (8008a78 <__ieee754_exp+0x2c8>)
 800891e:	f7f7 fc23 	bl	8000168 <__aeabi_dsub>
 8008922:	e75c      	b.n	80087de <__ieee754_exp+0x2e>
 8008924:	4855      	ldr	r0, [pc, #340]	; (8008a7c <__ieee754_exp+0x2cc>)
 8008926:	a348      	add	r3, pc, #288	; (adr r3, 8008a48 <__ieee754_exp+0x298>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8008930:	4621      	mov	r1, r4
 8008932:	4628      	mov	r0, r5
 8008934:	f7f7 fdd0 	bl	80004d8 <__aeabi_dmul>
 8008938:	e9d6 2300 	ldrd	r2, r3, [r6]
 800893c:	f7f7 fc16 	bl	800016c <__adddf3>
 8008940:	f7f8 f87a 	bl	8000a38 <__aeabi_d2iz>
 8008944:	4682      	mov	sl, r0
 8008946:	f7f7 fd5d 	bl	8000404 <__aeabi_i2d>
 800894a:	a341      	add	r3, pc, #260	; (adr r3, 8008a50 <__ieee754_exp+0x2a0>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4606      	mov	r6, r0
 8008952:	460f      	mov	r7, r1
 8008954:	f7f7 fdc0 	bl	80004d8 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4628      	mov	r0, r5
 800895e:	4621      	mov	r1, r4
 8008960:	f7f7 fc02 	bl	8000168 <__aeabi_dsub>
 8008964:	a33c      	add	r3, pc, #240	; (adr r3, 8008a58 <__ieee754_exp+0x2a8>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	4680      	mov	r8, r0
 800896c:	4689      	mov	r9, r1
 800896e:	4630      	mov	r0, r6
 8008970:	4639      	mov	r1, r7
 8008972:	f7f7 fdb1 	bl	80004d8 <__aeabi_dmul>
 8008976:	e9cd 0100 	strd	r0, r1, [sp]
 800897a:	e76f      	b.n	800885c <__ieee754_exp+0xac>
 800897c:	4a40      	ldr	r2, [pc, #256]	; (8008a80 <__ieee754_exp+0x2d0>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d80e      	bhi.n	80089a0 <__ieee754_exp+0x1f0>
 8008982:	a323      	add	r3, pc, #140	; (adr r3, 8008a10 <__ieee754_exp+0x260>)
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f7f7 fbf0 	bl	800016c <__adddf3>
 800898c:	2200      	movs	r2, #0
 800898e:	4b3a      	ldr	r3, [pc, #232]	; (8008a78 <__ieee754_exp+0x2c8>)
 8008990:	f7f8 f832 	bl	80009f8 <__aeabi_dcmpgt>
 8008994:	b138      	cbz	r0, 80089a6 <__ieee754_exp+0x1f6>
 8008996:	2200      	movs	r2, #0
 8008998:	4628      	mov	r0, r5
 800899a:	4621      	mov	r1, r4
 800899c:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <__ieee754_exp+0x2c8>)
 800899e:	e71c      	b.n	80087da <__ieee754_exp+0x2a>
 80089a0:	f04f 0a00 	mov.w	sl, #0
 80089a4:	e762      	b.n	800886c <__ieee754_exp+0xbc>
 80089a6:	4682      	mov	sl, r0
 80089a8:	e760      	b.n	800886c <__ieee754_exp+0xbc>
 80089aa:	4632      	mov	r2, r6
 80089ac:	463b      	mov	r3, r7
 80089ae:	2000      	movs	r0, #0
 80089b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80089b4:	f7f7 fbd8 	bl	8000168 <__aeabi_dsub>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089c0:	f7f7 feb4 	bl	800072c <__aeabi_ddiv>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089cc:	f7f7 fbcc 	bl	8000168 <__aeabi_dsub>
 80089d0:	4642      	mov	r2, r8
 80089d2:	464b      	mov	r3, r9
 80089d4:	f7f7 fbc8 	bl	8000168 <__aeabi_dsub>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	2000      	movs	r0, #0
 80089de:	4926      	ldr	r1, [pc, #152]	; (8008a78 <__ieee754_exp+0x2c8>)
 80089e0:	f7f7 fbc2 	bl	8000168 <__aeabi_dsub>
 80089e4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80089e8:	4592      	cmp	sl, r2
 80089ea:	db02      	blt.n	80089f2 <__ieee754_exp+0x242>
 80089ec:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80089f0:	e6f5      	b.n	80087de <__ieee754_exp+0x2e>
 80089f2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80089f6:	2200      	movs	r2, #0
 80089f8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80089fc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008a00:	e701      	b.n	8008806 <__ieee754_exp+0x56>
 8008a02:	bf00      	nop
 8008a04:	f3af 8000 	nop.w
 8008a08:	fefa39ef 	.word	0xfefa39ef
 8008a0c:	40862e42 	.word	0x40862e42
 8008a10:	8800759c 	.word	0x8800759c
 8008a14:	7e37e43c 	.word	0x7e37e43c
 8008a18:	d52d3051 	.word	0xd52d3051
 8008a1c:	c0874910 	.word	0xc0874910
 8008a20:	72bea4d0 	.word	0x72bea4d0
 8008a24:	3e663769 	.word	0x3e663769
 8008a28:	c5d26bf1 	.word	0xc5d26bf1
 8008a2c:	3ebbbd41 	.word	0x3ebbbd41
 8008a30:	af25de2c 	.word	0xaf25de2c
 8008a34:	3f11566a 	.word	0x3f11566a
 8008a38:	16bebd93 	.word	0x16bebd93
 8008a3c:	3f66c16c 	.word	0x3f66c16c
 8008a40:	5555553e 	.word	0x5555553e
 8008a44:	3fc55555 	.word	0x3fc55555
 8008a48:	652b82fe 	.word	0x652b82fe
 8008a4c:	3ff71547 	.word	0x3ff71547
 8008a50:	fee00000 	.word	0xfee00000
 8008a54:	3fe62e42 	.word	0x3fe62e42
 8008a58:	35793c76 	.word	0x35793c76
 8008a5c:	3dea39ef 	.word	0x3dea39ef
 8008a60:	40862e41 	.word	0x40862e41
 8008a64:	7fefffff 	.word	0x7fefffff
 8008a68:	3fd62e42 	.word	0x3fd62e42
 8008a6c:	3ff0a2b1 	.word	0x3ff0a2b1
 8008a70:	0800b8a8 	.word	0x0800b8a8
 8008a74:	0800b8b8 	.word	0x0800b8b8
 8008a78:	3ff00000 	.word	0x3ff00000
 8008a7c:	0800b898 	.word	0x0800b898
 8008a80:	3e2fffff 	.word	0x3e2fffff

08008a84 <__ieee754_asinf>:
 8008a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008a8c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008a90:	4604      	mov	r4, r0
 8008a92:	4605      	mov	r5, r0
 8008a94:	d10c      	bne.n	8008ab0 <__ieee754_asinf+0x2c>
 8008a96:	498d      	ldr	r1, [pc, #564]	; (8008ccc <__ieee754_asinf+0x248>)
 8008a98:	f7f8 f954 	bl	8000d44 <__aeabi_fmul>
 8008a9c:	498c      	ldr	r1, [pc, #560]	; (8008cd0 <__ieee754_asinf+0x24c>)
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f7f8 f94f 	bl	8000d44 <__aeabi_fmul>
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f7f8 f843 	bl	8000b34 <__addsf3>
 8008aae:	e006      	b.n	8008abe <__ieee754_asinf+0x3a>
 8008ab0:	dd07      	ble.n	8008ac2 <__ieee754_asinf+0x3e>
 8008ab2:	4601      	mov	r1, r0
 8008ab4:	f7f8 f83c 	bl	8000b30 <__aeabi_fsub>
 8008ab8:	4601      	mov	r1, r0
 8008aba:	f7f8 f9f7 	bl	8000eac <__aeabi_fdiv>
 8008abe:	4604      	mov	r4, r0
 8008ac0:	e00e      	b.n	8008ae0 <__ieee754_asinf+0x5c>
 8008ac2:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8008ac6:	da58      	bge.n	8008b7a <__ieee754_asinf+0xf6>
 8008ac8:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8008acc:	da0b      	bge.n	8008ae6 <__ieee754_asinf+0x62>
 8008ace:	4981      	ldr	r1, [pc, #516]	; (8008cd4 <__ieee754_asinf+0x250>)
 8008ad0:	f7f8 f830 	bl	8000b34 <__addsf3>
 8008ad4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ad8:	f7f8 faf0 	bl	80010bc <__aeabi_fcmpgt>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d04c      	beq.n	8008b7a <__ieee754_asinf+0xf6>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	f7f8 f92c 	bl	8000d44 <__aeabi_fmul>
 8008aec:	4605      	mov	r5, r0
 8008aee:	497a      	ldr	r1, [pc, #488]	; (8008cd8 <__ieee754_asinf+0x254>)
 8008af0:	f7f8 f928 	bl	8000d44 <__aeabi_fmul>
 8008af4:	4979      	ldr	r1, [pc, #484]	; (8008cdc <__ieee754_asinf+0x258>)
 8008af6:	f7f8 f81d 	bl	8000b34 <__addsf3>
 8008afa:	4629      	mov	r1, r5
 8008afc:	f7f8 f922 	bl	8000d44 <__aeabi_fmul>
 8008b00:	4977      	ldr	r1, [pc, #476]	; (8008ce0 <__ieee754_asinf+0x25c>)
 8008b02:	f7f8 f815 	bl	8000b30 <__aeabi_fsub>
 8008b06:	4629      	mov	r1, r5
 8008b08:	f7f8 f91c 	bl	8000d44 <__aeabi_fmul>
 8008b0c:	4975      	ldr	r1, [pc, #468]	; (8008ce4 <__ieee754_asinf+0x260>)
 8008b0e:	f7f8 f811 	bl	8000b34 <__addsf3>
 8008b12:	4629      	mov	r1, r5
 8008b14:	f7f8 f916 	bl	8000d44 <__aeabi_fmul>
 8008b18:	4973      	ldr	r1, [pc, #460]	; (8008ce8 <__ieee754_asinf+0x264>)
 8008b1a:	f7f8 f809 	bl	8000b30 <__aeabi_fsub>
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7f8 f910 	bl	8000d44 <__aeabi_fmul>
 8008b24:	4971      	ldr	r1, [pc, #452]	; (8008cec <__ieee754_asinf+0x268>)
 8008b26:	f7f8 f805 	bl	8000b34 <__addsf3>
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	f7f8 f90a 	bl	8000d44 <__aeabi_fmul>
 8008b30:	496f      	ldr	r1, [pc, #444]	; (8008cf0 <__ieee754_asinf+0x26c>)
 8008b32:	4606      	mov	r6, r0
 8008b34:	4628      	mov	r0, r5
 8008b36:	f7f8 f905 	bl	8000d44 <__aeabi_fmul>
 8008b3a:	496e      	ldr	r1, [pc, #440]	; (8008cf4 <__ieee754_asinf+0x270>)
 8008b3c:	f7f7 fff8 	bl	8000b30 <__aeabi_fsub>
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f8 f8ff 	bl	8000d44 <__aeabi_fmul>
 8008b46:	496c      	ldr	r1, [pc, #432]	; (8008cf8 <__ieee754_asinf+0x274>)
 8008b48:	f7f7 fff4 	bl	8000b34 <__addsf3>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	f7f8 f8f9 	bl	8000d44 <__aeabi_fmul>
 8008b52:	496a      	ldr	r1, [pc, #424]	; (8008cfc <__ieee754_asinf+0x278>)
 8008b54:	f7f7 ffec 	bl	8000b30 <__aeabi_fsub>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f8 f8f3 	bl	8000d44 <__aeabi_fmul>
 8008b5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008b62:	f7f7 ffe7 	bl	8000b34 <__addsf3>
 8008b66:	4601      	mov	r1, r0
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7f8 f99f 	bl	8000eac <__aeabi_fdiv>
 8008b6e:	4621      	mov	r1, r4
 8008b70:	f7f8 f8e8 	bl	8000d44 <__aeabi_fmul>
 8008b74:	4601      	mov	r1, r0
 8008b76:	4620      	mov	r0, r4
 8008b78:	e797      	b.n	8008aaa <__ieee754_asinf+0x26>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 f91d 	bl	8008dba <fabsf>
 8008b80:	4601      	mov	r1, r0
 8008b82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008b86:	f7f7 ffd3 	bl	8000b30 <__aeabi_fsub>
 8008b8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008b8e:	f7f8 f8d9 	bl	8000d44 <__aeabi_fmul>
 8008b92:	4606      	mov	r6, r0
 8008b94:	4950      	ldr	r1, [pc, #320]	; (8008cd8 <__ieee754_asinf+0x254>)
 8008b96:	f7f8 f8d5 	bl	8000d44 <__aeabi_fmul>
 8008b9a:	4950      	ldr	r1, [pc, #320]	; (8008cdc <__ieee754_asinf+0x258>)
 8008b9c:	f7f7 ffca 	bl	8000b34 <__addsf3>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	f7f8 f8cf 	bl	8000d44 <__aeabi_fmul>
 8008ba6:	494e      	ldr	r1, [pc, #312]	; (8008ce0 <__ieee754_asinf+0x25c>)
 8008ba8:	f7f7 ffc2 	bl	8000b30 <__aeabi_fsub>
 8008bac:	4631      	mov	r1, r6
 8008bae:	f7f8 f8c9 	bl	8000d44 <__aeabi_fmul>
 8008bb2:	494c      	ldr	r1, [pc, #304]	; (8008ce4 <__ieee754_asinf+0x260>)
 8008bb4:	f7f7 ffbe 	bl	8000b34 <__addsf3>
 8008bb8:	4631      	mov	r1, r6
 8008bba:	f7f8 f8c3 	bl	8000d44 <__aeabi_fmul>
 8008bbe:	494a      	ldr	r1, [pc, #296]	; (8008ce8 <__ieee754_asinf+0x264>)
 8008bc0:	f7f7 ffb6 	bl	8000b30 <__aeabi_fsub>
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	f7f8 f8bd 	bl	8000d44 <__aeabi_fmul>
 8008bca:	4948      	ldr	r1, [pc, #288]	; (8008cec <__ieee754_asinf+0x268>)
 8008bcc:	f7f7 ffb2 	bl	8000b34 <__addsf3>
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	f7f8 f8b7 	bl	8000d44 <__aeabi_fmul>
 8008bd6:	4946      	ldr	r1, [pc, #280]	; (8008cf0 <__ieee754_asinf+0x26c>)
 8008bd8:	4681      	mov	r9, r0
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7f8 f8b2 	bl	8000d44 <__aeabi_fmul>
 8008be0:	4944      	ldr	r1, [pc, #272]	; (8008cf4 <__ieee754_asinf+0x270>)
 8008be2:	f7f7 ffa5 	bl	8000b30 <__aeabi_fsub>
 8008be6:	4631      	mov	r1, r6
 8008be8:	f7f8 f8ac 	bl	8000d44 <__aeabi_fmul>
 8008bec:	4942      	ldr	r1, [pc, #264]	; (8008cf8 <__ieee754_asinf+0x274>)
 8008bee:	f7f7 ffa1 	bl	8000b34 <__addsf3>
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	f7f8 f8a6 	bl	8000d44 <__aeabi_fmul>
 8008bf8:	4940      	ldr	r1, [pc, #256]	; (8008cfc <__ieee754_asinf+0x278>)
 8008bfa:	f7f7 ff99 	bl	8000b30 <__aeabi_fsub>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	f7f8 f8a0 	bl	8000d44 <__aeabi_fmul>
 8008c04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008c08:	f7f7 ff94 	bl	8000b34 <__addsf3>
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f000 f87c 	bl	8008d0c <__ieee754_sqrtf>
 8008c14:	4b3a      	ldr	r3, [pc, #232]	; (8008d00 <__ieee754_asinf+0x27c>)
 8008c16:	4607      	mov	r7, r0
 8008c18:	4598      	cmp	r8, r3
 8008c1a:	dd1a      	ble.n	8008c52 <__ieee754_asinf+0x1ce>
 8008c1c:	4651      	mov	r1, sl
 8008c1e:	4648      	mov	r0, r9
 8008c20:	f7f8 f944 	bl	8000eac <__aeabi_fdiv>
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f8 f88d 	bl	8000d44 <__aeabi_fmul>
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 ff82 	bl	8000b34 <__addsf3>
 8008c30:	4601      	mov	r1, r0
 8008c32:	f7f7 ff7f 	bl	8000b34 <__addsf3>
 8008c36:	4933      	ldr	r1, [pc, #204]	; (8008d04 <__ieee754_asinf+0x280>)
 8008c38:	f7f7 ff7c 	bl	8000b34 <__addsf3>
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	4823      	ldr	r0, [pc, #140]	; (8008ccc <__ieee754_asinf+0x248>)
 8008c40:	f7f7 ff76 	bl	8000b30 <__aeabi_fsub>
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	4604      	mov	r4, r0
 8008c48:	f73f af4a 	bgt.w	8008ae0 <__ieee754_asinf+0x5c>
 8008c4c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008c50:	e735      	b.n	8008abe <__ieee754_asinf+0x3a>
 8008c52:	4601      	mov	r1, r0
 8008c54:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008c58:	f7f7 ff6c 	bl	8000b34 <__addsf3>
 8008c5c:	4651      	mov	r1, sl
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4648      	mov	r0, r9
 8008c62:	f7f8 f923 	bl	8000eac <__aeabi_fdiv>
 8008c66:	4601      	mov	r1, r0
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f7f8 f86b 	bl	8000d44 <__aeabi_fmul>
 8008c6e:	f028 080f 	bic.w	r8, r8, #15
 8008c72:	4681      	mov	r9, r0
 8008c74:	4641      	mov	r1, r8
 8008c76:	4640      	mov	r0, r8
 8008c78:	f7f8 f864 	bl	8000d44 <__aeabi_fmul>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7f7 ff56 	bl	8000b30 <__aeabi_fsub>
 8008c84:	4641      	mov	r1, r8
 8008c86:	4604      	mov	r4, r0
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7f7 ff53 	bl	8000b34 <__addsf3>
 8008c8e:	4601      	mov	r1, r0
 8008c90:	4620      	mov	r0, r4
 8008c92:	f7f8 f90b 	bl	8000eac <__aeabi_fdiv>
 8008c96:	4601      	mov	r1, r0
 8008c98:	f7f7 ff4c 	bl	8000b34 <__addsf3>
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	480c      	ldr	r0, [pc, #48]	; (8008cd0 <__ieee754_asinf+0x24c>)
 8008ca0:	f7f7 ff46 	bl	8000b30 <__aeabi_fsub>
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	4648      	mov	r0, r9
 8008ca8:	f7f7 ff42 	bl	8000b30 <__aeabi_fsub>
 8008cac:	4641      	mov	r1, r8
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	f7f7 ff3f 	bl	8000b34 <__addsf3>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4813      	ldr	r0, [pc, #76]	; (8008d08 <__ieee754_asinf+0x284>)
 8008cba:	f7f7 ff39 	bl	8000b30 <__aeabi_fsub>
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f7f7 ff35 	bl	8000b30 <__aeabi_fsub>
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	480f      	ldr	r0, [pc, #60]	; (8008d08 <__ieee754_asinf+0x284>)
 8008cca:	e7b9      	b.n	8008c40 <__ieee754_asinf+0x1bc>
 8008ccc:	3fc90fdb 	.word	0x3fc90fdb
 8008cd0:	b33bbd2e 	.word	0xb33bbd2e
 8008cd4:	7149f2ca 	.word	0x7149f2ca
 8008cd8:	3811ef08 	.word	0x3811ef08
 8008cdc:	3a4f7f04 	.word	0x3a4f7f04
 8008ce0:	3d241146 	.word	0x3d241146
 8008ce4:	3e4e0aa8 	.word	0x3e4e0aa8
 8008ce8:	3ea6b090 	.word	0x3ea6b090
 8008cec:	3e2aaaab 	.word	0x3e2aaaab
 8008cf0:	3d9dc62e 	.word	0x3d9dc62e
 8008cf4:	3f303361 	.word	0x3f303361
 8008cf8:	4001572d 	.word	0x4001572d
 8008cfc:	4019d139 	.word	0x4019d139
 8008d00:	3f799999 	.word	0x3f799999
 8008d04:	333bbd2e 	.word	0x333bbd2e
 8008d08:	3f490fdb 	.word	0x3f490fdb

08008d0c <__ieee754_sqrtf>:
 8008d0c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008d10:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	4603      	mov	r3, r0
 8008d18:	4604      	mov	r4, r0
 8008d1a:	d309      	bcc.n	8008d30 <__ieee754_sqrtf+0x24>
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	f7f8 f811 	bl	8000d44 <__aeabi_fmul>
 8008d22:	4601      	mov	r1, r0
 8008d24:	4620      	mov	r0, r4
 8008d26:	f7f7 ff05 	bl	8000b34 <__addsf3>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	d0fb      	beq.n	8008d2c <__ieee754_sqrtf+0x20>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	da06      	bge.n	8008d46 <__ieee754_sqrtf+0x3a>
 8008d38:	4601      	mov	r1, r0
 8008d3a:	f7f7 fef9 	bl	8000b30 <__aeabi_fsub>
 8008d3e:	4601      	mov	r1, r0
 8008d40:	f7f8 f8b4 	bl	8000eac <__aeabi_fdiv>
 8008d44:	e7f1      	b.n	8008d2a <__ieee754_sqrtf+0x1e>
 8008d46:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008d4a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008d4e:	d029      	beq.n	8008da4 <__ieee754_sqrtf+0x98>
 8008d50:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008d54:	07cb      	lsls	r3, r1, #31
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008d5e:	f04f 0419 	mov.w	r4, #25
 8008d62:	461e      	mov	r6, r3
 8008d64:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008d68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008d6c:	bf58      	it	pl
 8008d6e:	0052      	lslpl	r2, r2, #1
 8008d70:	1040      	asrs	r0, r0, #1
 8008d72:	0052      	lsls	r2, r2, #1
 8008d74:	1875      	adds	r5, r6, r1
 8008d76:	4295      	cmp	r5, r2
 8008d78:	bfde      	ittt	le
 8008d7a:	186e      	addle	r6, r5, r1
 8008d7c:	1b52      	suble	r2, r2, r5
 8008d7e:	185b      	addle	r3, r3, r1
 8008d80:	3c01      	subs	r4, #1
 8008d82:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008d86:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008d8a:	d1f3      	bne.n	8008d74 <__ieee754_sqrtf+0x68>
 8008d8c:	b112      	cbz	r2, 8008d94 <__ieee754_sqrtf+0x88>
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f023 0301 	bic.w	r3, r3, #1
 8008d94:	105c      	asrs	r4, r3, #1
 8008d96:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008d9a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008d9e:	e7c5      	b.n	8008d2c <__ieee754_sqrtf+0x20>
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	3201      	adds	r2, #1
 8008da4:	0218      	lsls	r0, r3, #8
 8008da6:	d5fb      	bpl.n	8008da0 <__ieee754_sqrtf+0x94>
 8008da8:	3a01      	subs	r2, #1
 8008daa:	1a89      	subs	r1, r1, r2
 8008dac:	e7d0      	b.n	8008d50 <__ieee754_sqrtf+0x44>

08008dae <finite>:
 8008dae:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008db2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008db6:	0fc0      	lsrs	r0, r0, #31
 8008db8:	4770      	bx	lr

08008dba <fabsf>:
 8008dba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008dbe:	4770      	bx	lr

08008dc0 <nanf>:
 8008dc0:	4800      	ldr	r0, [pc, #0]	; (8008dc4 <nanf+0x4>)
 8008dc2:	4770      	bx	lr
 8008dc4:	7fc00000 	.word	0x7fc00000

08008dc8 <abort>:
 8008dc8:	2006      	movs	r0, #6
 8008dca:	b508      	push	{r3, lr}
 8008dcc:	f000 fdac 	bl	8009928 <raise>
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	f7f9 fea0 	bl	8002b16 <_exit>
	...

08008dd8 <__errno>:
 8008dd8:	4b01      	ldr	r3, [pc, #4]	; (8008de0 <__errno+0x8>)
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	2000000c 	.word	0x2000000c

08008de4 <__libc_init_array>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	2600      	movs	r6, #0
 8008de8:	4d0c      	ldr	r5, [pc, #48]	; (8008e1c <__libc_init_array+0x38>)
 8008dea:	4c0d      	ldr	r4, [pc, #52]	; (8008e20 <__libc_init_array+0x3c>)
 8008dec:	1b64      	subs	r4, r4, r5
 8008dee:	10a4      	asrs	r4, r4, #2
 8008df0:	42a6      	cmp	r6, r4
 8008df2:	d109      	bne.n	8008e08 <__libc_init_array+0x24>
 8008df4:	f002 fd14 	bl	800b820 <_init>
 8008df8:	2600      	movs	r6, #0
 8008dfa:	4d0a      	ldr	r5, [pc, #40]	; (8008e24 <__libc_init_array+0x40>)
 8008dfc:	4c0a      	ldr	r4, [pc, #40]	; (8008e28 <__libc_init_array+0x44>)
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	42a6      	cmp	r6, r4
 8008e04:	d105      	bne.n	8008e12 <__libc_init_array+0x2e>
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0c:	4798      	blx	r3
 8008e0e:	3601      	adds	r6, #1
 8008e10:	e7ee      	b.n	8008df0 <__libc_init_array+0xc>
 8008e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e16:	4798      	blx	r3
 8008e18:	3601      	adds	r6, #1
 8008e1a:	e7f2      	b.n	8008e02 <__libc_init_array+0x1e>
 8008e1c:	0800bcac 	.word	0x0800bcac
 8008e20:	0800bcac 	.word	0x0800bcac
 8008e24:	0800bcac 	.word	0x0800bcac
 8008e28:	0800bcb4 	.word	0x0800bcb4

08008e2c <malloc>:
 8008e2c:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <malloc+0xc>)
 8008e2e:	4601      	mov	r1, r0
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	f000 b887 	b.w	8008f44 <_malloc_r>
 8008e36:	bf00      	nop
 8008e38:	2000000c 	.word	0x2000000c

08008e3c <free>:
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <free+0xc>)
 8008e3e:	4601      	mov	r1, r0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f000 b833 	b.w	8008eac <_free_r>
 8008e46:	bf00      	nop
 8008e48:	2000000c 	.word	0x2000000c

08008e4c <memcpy>:
 8008e4c:	440a      	add	r2, r1
 8008e4e:	4291      	cmp	r1, r2
 8008e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e54:	d100      	bne.n	8008e58 <memcpy+0xc>
 8008e56:	4770      	bx	lr
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e64:	d1f9      	bne.n	8008e5a <memcpy+0xe>
 8008e66:	bd10      	pop	{r4, pc}

08008e68 <memmove>:
 8008e68:	4288      	cmp	r0, r1
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	eb01 0402 	add.w	r4, r1, r2
 8008e70:	d902      	bls.n	8008e78 <memmove+0x10>
 8008e72:	4284      	cmp	r4, r0
 8008e74:	4623      	mov	r3, r4
 8008e76:	d807      	bhi.n	8008e88 <memmove+0x20>
 8008e78:	1e43      	subs	r3, r0, #1
 8008e7a:	42a1      	cmp	r1, r4
 8008e7c:	d008      	beq.n	8008e90 <memmove+0x28>
 8008e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e86:	e7f8      	b.n	8008e7a <memmove+0x12>
 8008e88:	4601      	mov	r1, r0
 8008e8a:	4402      	add	r2, r0
 8008e8c:	428a      	cmp	r2, r1
 8008e8e:	d100      	bne.n	8008e92 <memmove+0x2a>
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e9a:	e7f7      	b.n	8008e8c <memmove+0x24>

08008e9c <memset>:
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	4402      	add	r2, r0
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d100      	bne.n	8008ea6 <memset+0xa>
 8008ea4:	4770      	bx	lr
 8008ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eaa:	e7f9      	b.n	8008ea0 <memset+0x4>

08008eac <_free_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4605      	mov	r5, r0
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	d043      	beq.n	8008f3c <_free_r+0x90>
 8008eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb8:	1f0c      	subs	r4, r1, #4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	bfb8      	it	lt
 8008ebe:	18e4      	addlt	r4, r4, r3
 8008ec0:	f001 fcd8 	bl	800a874 <__malloc_lock>
 8008ec4:	4a1e      	ldr	r2, [pc, #120]	; (8008f40 <_free_r+0x94>)
 8008ec6:	6813      	ldr	r3, [r2, #0]
 8008ec8:	4610      	mov	r0, r2
 8008eca:	b933      	cbnz	r3, 8008eda <_free_r+0x2e>
 8008ecc:	6063      	str	r3, [r4, #4]
 8008ece:	6014      	str	r4, [r2, #0]
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed6:	f001 bcd3 	b.w	800a880 <__malloc_unlock>
 8008eda:	42a3      	cmp	r3, r4
 8008edc:	d90a      	bls.n	8008ef4 <_free_r+0x48>
 8008ede:	6821      	ldr	r1, [r4, #0]
 8008ee0:	1862      	adds	r2, r4, r1
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	bf01      	itttt	eq
 8008ee6:	681a      	ldreq	r2, [r3, #0]
 8008ee8:	685b      	ldreq	r3, [r3, #4]
 8008eea:	1852      	addeq	r2, r2, r1
 8008eec:	6022      	streq	r2, [r4, #0]
 8008eee:	6063      	str	r3, [r4, #4]
 8008ef0:	6004      	str	r4, [r0, #0]
 8008ef2:	e7ed      	b.n	8008ed0 <_free_r+0x24>
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	b10b      	cbz	r3, 8008efe <_free_r+0x52>
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	d9fa      	bls.n	8008ef4 <_free_r+0x48>
 8008efe:	6811      	ldr	r1, [r2, #0]
 8008f00:	1850      	adds	r0, r2, r1
 8008f02:	42a0      	cmp	r0, r4
 8008f04:	d10b      	bne.n	8008f1e <_free_r+0x72>
 8008f06:	6820      	ldr	r0, [r4, #0]
 8008f08:	4401      	add	r1, r0
 8008f0a:	1850      	adds	r0, r2, r1
 8008f0c:	4283      	cmp	r3, r0
 8008f0e:	6011      	str	r1, [r2, #0]
 8008f10:	d1de      	bne.n	8008ed0 <_free_r+0x24>
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	4401      	add	r1, r0
 8008f18:	6011      	str	r1, [r2, #0]
 8008f1a:	6053      	str	r3, [r2, #4]
 8008f1c:	e7d8      	b.n	8008ed0 <_free_r+0x24>
 8008f1e:	d902      	bls.n	8008f26 <_free_r+0x7a>
 8008f20:	230c      	movs	r3, #12
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	e7d4      	b.n	8008ed0 <_free_r+0x24>
 8008f26:	6820      	ldr	r0, [r4, #0]
 8008f28:	1821      	adds	r1, r4, r0
 8008f2a:	428b      	cmp	r3, r1
 8008f2c:	bf01      	itttt	eq
 8008f2e:	6819      	ldreq	r1, [r3, #0]
 8008f30:	685b      	ldreq	r3, [r3, #4]
 8008f32:	1809      	addeq	r1, r1, r0
 8008f34:	6021      	streq	r1, [r4, #0]
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	6054      	str	r4, [r2, #4]
 8008f3a:	e7c9      	b.n	8008ed0 <_free_r+0x24>
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000958 	.word	0x20000958

08008f44 <_malloc_r>:
 8008f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f46:	1ccd      	adds	r5, r1, #3
 8008f48:	f025 0503 	bic.w	r5, r5, #3
 8008f4c:	3508      	adds	r5, #8
 8008f4e:	2d0c      	cmp	r5, #12
 8008f50:	bf38      	it	cc
 8008f52:	250c      	movcc	r5, #12
 8008f54:	2d00      	cmp	r5, #0
 8008f56:	4606      	mov	r6, r0
 8008f58:	db01      	blt.n	8008f5e <_malloc_r+0x1a>
 8008f5a:	42a9      	cmp	r1, r5
 8008f5c:	d903      	bls.n	8008f66 <_malloc_r+0x22>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	6033      	str	r3, [r6, #0]
 8008f62:	2000      	movs	r0, #0
 8008f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f66:	f001 fc85 	bl	800a874 <__malloc_lock>
 8008f6a:	4921      	ldr	r1, [pc, #132]	; (8008ff0 <_malloc_r+0xac>)
 8008f6c:	680a      	ldr	r2, [r1, #0]
 8008f6e:	4614      	mov	r4, r2
 8008f70:	b99c      	cbnz	r4, 8008f9a <_malloc_r+0x56>
 8008f72:	4f20      	ldr	r7, [pc, #128]	; (8008ff4 <_malloc_r+0xb0>)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	b923      	cbnz	r3, 8008f82 <_malloc_r+0x3e>
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f000 fc9c 	bl	80098b8 <_sbrk_r>
 8008f80:	6038      	str	r0, [r7, #0]
 8008f82:	4629      	mov	r1, r5
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 fc97 	bl	80098b8 <_sbrk_r>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d123      	bne.n	8008fd6 <_malloc_r+0x92>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	4630      	mov	r0, r6
 8008f92:	6033      	str	r3, [r6, #0]
 8008f94:	f001 fc74 	bl	800a880 <__malloc_unlock>
 8008f98:	e7e3      	b.n	8008f62 <_malloc_r+0x1e>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	1b5b      	subs	r3, r3, r5
 8008f9e:	d417      	bmi.n	8008fd0 <_malloc_r+0x8c>
 8008fa0:	2b0b      	cmp	r3, #11
 8008fa2:	d903      	bls.n	8008fac <_malloc_r+0x68>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	441c      	add	r4, r3
 8008fa8:	6025      	str	r5, [r4, #0]
 8008faa:	e004      	b.n	8008fb6 <_malloc_r+0x72>
 8008fac:	6863      	ldr	r3, [r4, #4]
 8008fae:	42a2      	cmp	r2, r4
 8008fb0:	bf0c      	ite	eq
 8008fb2:	600b      	streq	r3, [r1, #0]
 8008fb4:	6053      	strne	r3, [r2, #4]
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f001 fc62 	bl	800a880 <__malloc_unlock>
 8008fbc:	f104 000b 	add.w	r0, r4, #11
 8008fc0:	1d23      	adds	r3, r4, #4
 8008fc2:	f020 0007 	bic.w	r0, r0, #7
 8008fc6:	1ac2      	subs	r2, r0, r3
 8008fc8:	d0cc      	beq.n	8008f64 <_malloc_r+0x20>
 8008fca:	1a1b      	subs	r3, r3, r0
 8008fcc:	50a3      	str	r3, [r4, r2]
 8008fce:	e7c9      	b.n	8008f64 <_malloc_r+0x20>
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	6864      	ldr	r4, [r4, #4]
 8008fd4:	e7cc      	b.n	8008f70 <_malloc_r+0x2c>
 8008fd6:	1cc4      	adds	r4, r0, #3
 8008fd8:	f024 0403 	bic.w	r4, r4, #3
 8008fdc:	42a0      	cmp	r0, r4
 8008fde:	d0e3      	beq.n	8008fa8 <_malloc_r+0x64>
 8008fe0:	1a21      	subs	r1, r4, r0
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f000 fc68 	bl	80098b8 <_sbrk_r>
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d1dd      	bne.n	8008fa8 <_malloc_r+0x64>
 8008fec:	e7cf      	b.n	8008f8e <_malloc_r+0x4a>
 8008fee:	bf00      	nop
 8008ff0:	20000958 	.word	0x20000958
 8008ff4:	2000095c 	.word	0x2000095c

08008ff8 <__cvt>:
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffe:	461f      	mov	r7, r3
 8009000:	bfbb      	ittet	lt
 8009002:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009006:	461f      	movlt	r7, r3
 8009008:	2300      	movge	r3, #0
 800900a:	232d      	movlt	r3, #45	; 0x2d
 800900c:	b088      	sub	sp, #32
 800900e:	4614      	mov	r4, r2
 8009010:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009012:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009014:	7013      	strb	r3, [r2, #0]
 8009016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009018:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800901c:	f023 0820 	bic.w	r8, r3, #32
 8009020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009024:	d005      	beq.n	8009032 <__cvt+0x3a>
 8009026:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800902a:	d100      	bne.n	800902e <__cvt+0x36>
 800902c:	3501      	adds	r5, #1
 800902e:	2302      	movs	r3, #2
 8009030:	e000      	b.n	8009034 <__cvt+0x3c>
 8009032:	2303      	movs	r3, #3
 8009034:	aa07      	add	r2, sp, #28
 8009036:	9204      	str	r2, [sp, #16]
 8009038:	aa06      	add	r2, sp, #24
 800903a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800903e:	e9cd 3500 	strd	r3, r5, [sp]
 8009042:	4622      	mov	r2, r4
 8009044:	463b      	mov	r3, r7
 8009046:	f000 fd1b 	bl	8009a80 <_dtoa_r>
 800904a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800904e:	4606      	mov	r6, r0
 8009050:	d102      	bne.n	8009058 <__cvt+0x60>
 8009052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009054:	07db      	lsls	r3, r3, #31
 8009056:	d522      	bpl.n	800909e <__cvt+0xa6>
 8009058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800905c:	eb06 0905 	add.w	r9, r6, r5
 8009060:	d110      	bne.n	8009084 <__cvt+0x8c>
 8009062:	7833      	ldrb	r3, [r6, #0]
 8009064:	2b30      	cmp	r3, #48	; 0x30
 8009066:	d10a      	bne.n	800907e <__cvt+0x86>
 8009068:	2200      	movs	r2, #0
 800906a:	2300      	movs	r3, #0
 800906c:	4620      	mov	r0, r4
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8009074:	b918      	cbnz	r0, 800907e <__cvt+0x86>
 8009076:	f1c5 0501 	rsb	r5, r5, #1
 800907a:	f8ca 5000 	str.w	r5, [sl]
 800907e:	f8da 3000 	ldr.w	r3, [sl]
 8009082:	4499      	add	r9, r3
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	4620      	mov	r0, r4
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 fc8c 	bl	80009a8 <__aeabi_dcmpeq>
 8009090:	b108      	cbz	r0, 8009096 <__cvt+0x9e>
 8009092:	f8cd 901c 	str.w	r9, [sp, #28]
 8009096:	2230      	movs	r2, #48	; 0x30
 8009098:	9b07      	ldr	r3, [sp, #28]
 800909a:	454b      	cmp	r3, r9
 800909c:	d307      	bcc.n	80090ae <__cvt+0xb6>
 800909e:	4630      	mov	r0, r6
 80090a0:	9b07      	ldr	r3, [sp, #28]
 80090a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80090a4:	1b9b      	subs	r3, r3, r6
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	b008      	add	sp, #32
 80090aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ae:	1c59      	adds	r1, r3, #1
 80090b0:	9107      	str	r1, [sp, #28]
 80090b2:	701a      	strb	r2, [r3, #0]
 80090b4:	e7f0      	b.n	8009098 <__cvt+0xa0>

080090b6 <__exponent>:
 80090b6:	4603      	mov	r3, r0
 80090b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ba:	2900      	cmp	r1, #0
 80090bc:	f803 2b02 	strb.w	r2, [r3], #2
 80090c0:	bfb6      	itet	lt
 80090c2:	222d      	movlt	r2, #45	; 0x2d
 80090c4:	222b      	movge	r2, #43	; 0x2b
 80090c6:	4249      	neglt	r1, r1
 80090c8:	2909      	cmp	r1, #9
 80090ca:	7042      	strb	r2, [r0, #1]
 80090cc:	dd2b      	ble.n	8009126 <__exponent+0x70>
 80090ce:	f10d 0407 	add.w	r4, sp, #7
 80090d2:	46a4      	mov	ip, r4
 80090d4:	270a      	movs	r7, #10
 80090d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80090da:	460a      	mov	r2, r1
 80090dc:	46a6      	mov	lr, r4
 80090de:	fb07 1516 	mls	r5, r7, r6, r1
 80090e2:	2a63      	cmp	r2, #99	; 0x63
 80090e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80090e8:	4631      	mov	r1, r6
 80090ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80090ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090f2:	dcf0      	bgt.n	80090d6 <__exponent+0x20>
 80090f4:	3130      	adds	r1, #48	; 0x30
 80090f6:	f1ae 0502 	sub.w	r5, lr, #2
 80090fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090fe:	4629      	mov	r1, r5
 8009100:	1c44      	adds	r4, r0, #1
 8009102:	4561      	cmp	r1, ip
 8009104:	d30a      	bcc.n	800911c <__exponent+0x66>
 8009106:	f10d 0209 	add.w	r2, sp, #9
 800910a:	eba2 020e 	sub.w	r2, r2, lr
 800910e:	4565      	cmp	r5, ip
 8009110:	bf88      	it	hi
 8009112:	2200      	movhi	r2, #0
 8009114:	4413      	add	r3, r2
 8009116:	1a18      	subs	r0, r3, r0
 8009118:	b003      	add	sp, #12
 800911a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009120:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009124:	e7ed      	b.n	8009102 <__exponent+0x4c>
 8009126:	2330      	movs	r3, #48	; 0x30
 8009128:	3130      	adds	r1, #48	; 0x30
 800912a:	7083      	strb	r3, [r0, #2]
 800912c:	70c1      	strb	r1, [r0, #3]
 800912e:	1d03      	adds	r3, r0, #4
 8009130:	e7f1      	b.n	8009116 <__exponent+0x60>
	...

08009134 <_printf_float>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	b091      	sub	sp, #68	; 0x44
 800913a:	460c      	mov	r4, r1
 800913c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009140:	4616      	mov	r6, r2
 8009142:	461f      	mov	r7, r3
 8009144:	4605      	mov	r5, r0
 8009146:	f001 fb7f 	bl	800a848 <_localeconv_r>
 800914a:	6803      	ldr	r3, [r0, #0]
 800914c:	4618      	mov	r0, r3
 800914e:	9309      	str	r3, [sp, #36]	; 0x24
 8009150:	f7f6 fffe 	bl	8000150 <strlen>
 8009154:	2300      	movs	r3, #0
 8009156:	930e      	str	r3, [sp, #56]	; 0x38
 8009158:	f8d8 3000 	ldr.w	r3, [r8]
 800915c:	900a      	str	r0, [sp, #40]	; 0x28
 800915e:	3307      	adds	r3, #7
 8009160:	f023 0307 	bic.w	r3, r3, #7
 8009164:	f103 0208 	add.w	r2, r3, #8
 8009168:	f894 9018 	ldrb.w	r9, [r4, #24]
 800916c:	f8d4 b000 	ldr.w	fp, [r4]
 8009170:	f8c8 2000 	str.w	r2, [r8]
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800917c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009180:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009184:	930b      	str	r3, [sp, #44]	; 0x2c
 8009186:	f04f 32ff 	mov.w	r2, #4294967295
 800918a:	4640      	mov	r0, r8
 800918c:	4b9c      	ldr	r3, [pc, #624]	; (8009400 <_printf_float+0x2cc>)
 800918e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009190:	f7f7 fc3c 	bl	8000a0c <__aeabi_dcmpun>
 8009194:	bb70      	cbnz	r0, 80091f4 <_printf_float+0xc0>
 8009196:	f04f 32ff 	mov.w	r2, #4294967295
 800919a:	4640      	mov	r0, r8
 800919c:	4b98      	ldr	r3, [pc, #608]	; (8009400 <_printf_float+0x2cc>)
 800919e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091a0:	f7f7 fc16 	bl	80009d0 <__aeabi_dcmple>
 80091a4:	bb30      	cbnz	r0, 80091f4 <_printf_float+0xc0>
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	4640      	mov	r0, r8
 80091ac:	4651      	mov	r1, sl
 80091ae:	f7f7 fc05 	bl	80009bc <__aeabi_dcmplt>
 80091b2:	b110      	cbz	r0, 80091ba <_printf_float+0x86>
 80091b4:	232d      	movs	r3, #45	; 0x2d
 80091b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ba:	4b92      	ldr	r3, [pc, #584]	; (8009404 <_printf_float+0x2d0>)
 80091bc:	4892      	ldr	r0, [pc, #584]	; (8009408 <_printf_float+0x2d4>)
 80091be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80091c2:	bf94      	ite	ls
 80091c4:	4698      	movls	r8, r3
 80091c6:	4680      	movhi	r8, r0
 80091c8:	2303      	movs	r3, #3
 80091ca:	f04f 0a00 	mov.w	sl, #0
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	f02b 0304 	bic.w	r3, fp, #4
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	4633      	mov	r3, r6
 80091d8:	4621      	mov	r1, r4
 80091da:	4628      	mov	r0, r5
 80091dc:	9700      	str	r7, [sp, #0]
 80091de:	aa0f      	add	r2, sp, #60	; 0x3c
 80091e0:	f000 f9d4 	bl	800958c <_printf_common>
 80091e4:	3001      	adds	r0, #1
 80091e6:	f040 8090 	bne.w	800930a <_printf_float+0x1d6>
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	b011      	add	sp, #68	; 0x44
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	4642      	mov	r2, r8
 80091f6:	4653      	mov	r3, sl
 80091f8:	4640      	mov	r0, r8
 80091fa:	4651      	mov	r1, sl
 80091fc:	f7f7 fc06 	bl	8000a0c <__aeabi_dcmpun>
 8009200:	b148      	cbz	r0, 8009216 <_printf_float+0xe2>
 8009202:	f1ba 0f00 	cmp.w	sl, #0
 8009206:	bfb8      	it	lt
 8009208:	232d      	movlt	r3, #45	; 0x2d
 800920a:	4880      	ldr	r0, [pc, #512]	; (800940c <_printf_float+0x2d8>)
 800920c:	bfb8      	it	lt
 800920e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009212:	4b7f      	ldr	r3, [pc, #508]	; (8009410 <_printf_float+0x2dc>)
 8009214:	e7d3      	b.n	80091be <_printf_float+0x8a>
 8009216:	6863      	ldr	r3, [r4, #4]
 8009218:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	d142      	bne.n	80092a6 <_printf_float+0x172>
 8009220:	2306      	movs	r3, #6
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	9206      	str	r2, [sp, #24]
 8009228:	aa0e      	add	r2, sp, #56	; 0x38
 800922a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800922e:	aa0d      	add	r2, sp, #52	; 0x34
 8009230:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009234:	9203      	str	r2, [sp, #12]
 8009236:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800923a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	6863      	ldr	r3, [r4, #4]
 8009242:	4642      	mov	r2, r8
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4628      	mov	r0, r5
 8009248:	4653      	mov	r3, sl
 800924a:	910b      	str	r1, [sp, #44]	; 0x2c
 800924c:	f7ff fed4 	bl	8008ff8 <__cvt>
 8009250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009252:	4680      	mov	r8, r0
 8009254:	2947      	cmp	r1, #71	; 0x47
 8009256:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009258:	d108      	bne.n	800926c <_printf_float+0x138>
 800925a:	1cc8      	adds	r0, r1, #3
 800925c:	db02      	blt.n	8009264 <_printf_float+0x130>
 800925e:	6863      	ldr	r3, [r4, #4]
 8009260:	4299      	cmp	r1, r3
 8009262:	dd40      	ble.n	80092e6 <_printf_float+0x1b2>
 8009264:	f1a9 0902 	sub.w	r9, r9, #2
 8009268:	fa5f f989 	uxtb.w	r9, r9
 800926c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009270:	d81f      	bhi.n	80092b2 <_printf_float+0x17e>
 8009272:	464a      	mov	r2, r9
 8009274:	3901      	subs	r1, #1
 8009276:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800927a:	910d      	str	r1, [sp, #52]	; 0x34
 800927c:	f7ff ff1b 	bl	80090b6 <__exponent>
 8009280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009282:	4682      	mov	sl, r0
 8009284:	1813      	adds	r3, r2, r0
 8009286:	2a01      	cmp	r2, #1
 8009288:	6123      	str	r3, [r4, #16]
 800928a:	dc02      	bgt.n	8009292 <_printf_float+0x15e>
 800928c:	6822      	ldr	r2, [r4, #0]
 800928e:	07d2      	lsls	r2, r2, #31
 8009290:	d501      	bpl.n	8009296 <_printf_float+0x162>
 8009292:	3301      	adds	r3, #1
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800929a:	2b00      	cmp	r3, #0
 800929c:	d09b      	beq.n	80091d6 <_printf_float+0xa2>
 800929e:	232d      	movs	r3, #45	; 0x2d
 80092a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a4:	e797      	b.n	80091d6 <_printf_float+0xa2>
 80092a6:	2947      	cmp	r1, #71	; 0x47
 80092a8:	d1bc      	bne.n	8009224 <_printf_float+0xf0>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1ba      	bne.n	8009224 <_printf_float+0xf0>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e7b7      	b.n	8009222 <_printf_float+0xee>
 80092b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80092b6:	d118      	bne.n	80092ea <_printf_float+0x1b6>
 80092b8:	2900      	cmp	r1, #0
 80092ba:	6863      	ldr	r3, [r4, #4]
 80092bc:	dd0b      	ble.n	80092d6 <_printf_float+0x1a2>
 80092be:	6121      	str	r1, [r4, #16]
 80092c0:	b913      	cbnz	r3, 80092c8 <_printf_float+0x194>
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	07d0      	lsls	r0, r2, #31
 80092c6:	d502      	bpl.n	80092ce <_printf_float+0x19a>
 80092c8:	3301      	adds	r3, #1
 80092ca:	440b      	add	r3, r1
 80092cc:	6123      	str	r3, [r4, #16]
 80092ce:	f04f 0a00 	mov.w	sl, #0
 80092d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80092d4:	e7df      	b.n	8009296 <_printf_float+0x162>
 80092d6:	b913      	cbnz	r3, 80092de <_printf_float+0x1aa>
 80092d8:	6822      	ldr	r2, [r4, #0]
 80092da:	07d2      	lsls	r2, r2, #31
 80092dc:	d501      	bpl.n	80092e2 <_printf_float+0x1ae>
 80092de:	3302      	adds	r3, #2
 80092e0:	e7f4      	b.n	80092cc <_printf_float+0x198>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e7f2      	b.n	80092cc <_printf_float+0x198>
 80092e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80092ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ec:	4299      	cmp	r1, r3
 80092ee:	db05      	blt.n	80092fc <_printf_float+0x1c8>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	6121      	str	r1, [r4, #16]
 80092f4:	07d8      	lsls	r0, r3, #31
 80092f6:	d5ea      	bpl.n	80092ce <_printf_float+0x19a>
 80092f8:	1c4b      	adds	r3, r1, #1
 80092fa:	e7e7      	b.n	80092cc <_printf_float+0x198>
 80092fc:	2900      	cmp	r1, #0
 80092fe:	bfcc      	ite	gt
 8009300:	2201      	movgt	r2, #1
 8009302:	f1c1 0202 	rsble	r2, r1, #2
 8009306:	4413      	add	r3, r2
 8009308:	e7e0      	b.n	80092cc <_printf_float+0x198>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	055a      	lsls	r2, r3, #21
 800930e:	d407      	bmi.n	8009320 <_printf_float+0x1ec>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	4642      	mov	r2, r8
 8009314:	4631      	mov	r1, r6
 8009316:	4628      	mov	r0, r5
 8009318:	47b8      	blx	r7
 800931a:	3001      	adds	r0, #1
 800931c:	d12b      	bne.n	8009376 <_printf_float+0x242>
 800931e:	e764      	b.n	80091ea <_printf_float+0xb6>
 8009320:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009324:	f240 80dd 	bls.w	80094e2 <_printf_float+0x3ae>
 8009328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800932c:	2200      	movs	r2, #0
 800932e:	2300      	movs	r3, #0
 8009330:	f7f7 fb3a 	bl	80009a8 <__aeabi_dcmpeq>
 8009334:	2800      	cmp	r0, #0
 8009336:	d033      	beq.n	80093a0 <_printf_float+0x26c>
 8009338:	2301      	movs	r3, #1
 800933a:	4631      	mov	r1, r6
 800933c:	4628      	mov	r0, r5
 800933e:	4a35      	ldr	r2, [pc, #212]	; (8009414 <_printf_float+0x2e0>)
 8009340:	47b8      	blx	r7
 8009342:	3001      	adds	r0, #1
 8009344:	f43f af51 	beq.w	80091ea <_printf_float+0xb6>
 8009348:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800934c:	429a      	cmp	r2, r3
 800934e:	db02      	blt.n	8009356 <_printf_float+0x222>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	07d8      	lsls	r0, r3, #31
 8009354:	d50f      	bpl.n	8009376 <_printf_float+0x242>
 8009356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	f43f af42 	beq.w	80091ea <_printf_float+0xb6>
 8009366:	f04f 0800 	mov.w	r8, #0
 800936a:	f104 091a 	add.w	r9, r4, #26
 800936e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009370:	3b01      	subs	r3, #1
 8009372:	4543      	cmp	r3, r8
 8009374:	dc09      	bgt.n	800938a <_printf_float+0x256>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	079b      	lsls	r3, r3, #30
 800937a:	f100 8102 	bmi.w	8009582 <_printf_float+0x44e>
 800937e:	68e0      	ldr	r0, [r4, #12]
 8009380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009382:	4298      	cmp	r0, r3
 8009384:	bfb8      	it	lt
 8009386:	4618      	movlt	r0, r3
 8009388:	e731      	b.n	80091ee <_printf_float+0xba>
 800938a:	2301      	movs	r3, #1
 800938c:	464a      	mov	r2, r9
 800938e:	4631      	mov	r1, r6
 8009390:	4628      	mov	r0, r5
 8009392:	47b8      	blx	r7
 8009394:	3001      	adds	r0, #1
 8009396:	f43f af28 	beq.w	80091ea <_printf_float+0xb6>
 800939a:	f108 0801 	add.w	r8, r8, #1
 800939e:	e7e6      	b.n	800936e <_printf_float+0x23a>
 80093a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	dc38      	bgt.n	8009418 <_printf_float+0x2e4>
 80093a6:	2301      	movs	r3, #1
 80093a8:	4631      	mov	r1, r6
 80093aa:	4628      	mov	r0, r5
 80093ac:	4a19      	ldr	r2, [pc, #100]	; (8009414 <_printf_float+0x2e0>)
 80093ae:	47b8      	blx	r7
 80093b0:	3001      	adds	r0, #1
 80093b2:	f43f af1a 	beq.w	80091ea <_printf_float+0xb6>
 80093b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80093ba:	4313      	orrs	r3, r2
 80093bc:	d102      	bne.n	80093c4 <_printf_float+0x290>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	07d9      	lsls	r1, r3, #31
 80093c2:	d5d8      	bpl.n	8009376 <_printf_float+0x242>
 80093c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b8      	blx	r7
 80093ce:	3001      	adds	r0, #1
 80093d0:	f43f af0b 	beq.w	80091ea <_printf_float+0xb6>
 80093d4:	f04f 0900 	mov.w	r9, #0
 80093d8:	f104 0a1a 	add.w	sl, r4, #26
 80093dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093de:	425b      	negs	r3, r3
 80093e0:	454b      	cmp	r3, r9
 80093e2:	dc01      	bgt.n	80093e8 <_printf_float+0x2b4>
 80093e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e6:	e794      	b.n	8009312 <_printf_float+0x1de>
 80093e8:	2301      	movs	r3, #1
 80093ea:	4652      	mov	r2, sl
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b8      	blx	r7
 80093f2:	3001      	adds	r0, #1
 80093f4:	f43f aef9 	beq.w	80091ea <_printf_float+0xb6>
 80093f8:	f109 0901 	add.w	r9, r9, #1
 80093fc:	e7ee      	b.n	80093dc <_printf_float+0x2a8>
 80093fe:	bf00      	nop
 8009400:	7fefffff 	.word	0x7fefffff
 8009404:	0800b8cc 	.word	0x0800b8cc
 8009408:	0800b8d0 	.word	0x0800b8d0
 800940c:	0800b8d8 	.word	0x0800b8d8
 8009410:	0800b8d4 	.word	0x0800b8d4
 8009414:	0800b8dc 	.word	0x0800b8dc
 8009418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800941a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800941c:	429a      	cmp	r2, r3
 800941e:	bfa8      	it	ge
 8009420:	461a      	movge	r2, r3
 8009422:	2a00      	cmp	r2, #0
 8009424:	4691      	mov	r9, r2
 8009426:	dc37      	bgt.n	8009498 <_printf_float+0x364>
 8009428:	f04f 0b00 	mov.w	fp, #0
 800942c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009430:	f104 021a 	add.w	r2, r4, #26
 8009434:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009438:	ebaa 0309 	sub.w	r3, sl, r9
 800943c:	455b      	cmp	r3, fp
 800943e:	dc33      	bgt.n	80094a8 <_printf_float+0x374>
 8009440:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009444:	429a      	cmp	r2, r3
 8009446:	db3b      	blt.n	80094c0 <_printf_float+0x38c>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	07da      	lsls	r2, r3, #31
 800944c:	d438      	bmi.n	80094c0 <_printf_float+0x38c>
 800944e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009450:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009452:	eba2 030a 	sub.w	r3, r2, sl
 8009456:	eba2 0901 	sub.w	r9, r2, r1
 800945a:	4599      	cmp	r9, r3
 800945c:	bfa8      	it	ge
 800945e:	4699      	movge	r9, r3
 8009460:	f1b9 0f00 	cmp.w	r9, #0
 8009464:	dc34      	bgt.n	80094d0 <_printf_float+0x39c>
 8009466:	f04f 0800 	mov.w	r8, #0
 800946a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800946e:	f104 0a1a 	add.w	sl, r4, #26
 8009472:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009476:	1a9b      	subs	r3, r3, r2
 8009478:	eba3 0309 	sub.w	r3, r3, r9
 800947c:	4543      	cmp	r3, r8
 800947e:	f77f af7a 	ble.w	8009376 <_printf_float+0x242>
 8009482:	2301      	movs	r3, #1
 8009484:	4652      	mov	r2, sl
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	f43f aeac 	beq.w	80091ea <_printf_float+0xb6>
 8009492:	f108 0801 	add.w	r8, r8, #1
 8009496:	e7ec      	b.n	8009472 <_printf_float+0x33e>
 8009498:	4613      	mov	r3, r2
 800949a:	4631      	mov	r1, r6
 800949c:	4642      	mov	r2, r8
 800949e:	4628      	mov	r0, r5
 80094a0:	47b8      	blx	r7
 80094a2:	3001      	adds	r0, #1
 80094a4:	d1c0      	bne.n	8009428 <_printf_float+0x2f4>
 80094a6:	e6a0      	b.n	80091ea <_printf_float+0xb6>
 80094a8:	2301      	movs	r3, #1
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	f43f ae99 	beq.w	80091ea <_printf_float+0xb6>
 80094b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094ba:	f10b 0b01 	add.w	fp, fp, #1
 80094be:	e7b9      	b.n	8009434 <_printf_float+0x300>
 80094c0:	4631      	mov	r1, r6
 80094c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b8      	blx	r7
 80094ca:	3001      	adds	r0, #1
 80094cc:	d1bf      	bne.n	800944e <_printf_float+0x31a>
 80094ce:	e68c      	b.n	80091ea <_printf_float+0xb6>
 80094d0:	464b      	mov	r3, r9
 80094d2:	4631      	mov	r1, r6
 80094d4:	4628      	mov	r0, r5
 80094d6:	eb08 020a 	add.w	r2, r8, sl
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	d1c2      	bne.n	8009466 <_printf_float+0x332>
 80094e0:	e683      	b.n	80091ea <_printf_float+0xb6>
 80094e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094e4:	2a01      	cmp	r2, #1
 80094e6:	dc01      	bgt.n	80094ec <_printf_float+0x3b8>
 80094e8:	07db      	lsls	r3, r3, #31
 80094ea:	d537      	bpl.n	800955c <_printf_float+0x428>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4642      	mov	r2, r8
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	f43f ae77 	beq.w	80091ea <_printf_float+0xb6>
 80094fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	f43f ae6f 	beq.w	80091ea <_printf_float+0xb6>
 800950c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009510:	2200      	movs	r2, #0
 8009512:	2300      	movs	r3, #0
 8009514:	f7f7 fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8009518:	b9d8      	cbnz	r0, 8009552 <_printf_float+0x41e>
 800951a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800951c:	f108 0201 	add.w	r2, r8, #1
 8009520:	3b01      	subs	r3, #1
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	d10e      	bne.n	800954a <_printf_float+0x416>
 800952c:	e65d      	b.n	80091ea <_printf_float+0xb6>
 800952e:	2301      	movs	r3, #1
 8009530:	464a      	mov	r2, r9
 8009532:	4631      	mov	r1, r6
 8009534:	4628      	mov	r0, r5
 8009536:	47b8      	blx	r7
 8009538:	3001      	adds	r0, #1
 800953a:	f43f ae56 	beq.w	80091ea <_printf_float+0xb6>
 800953e:	f108 0801 	add.w	r8, r8, #1
 8009542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009544:	3b01      	subs	r3, #1
 8009546:	4543      	cmp	r3, r8
 8009548:	dcf1      	bgt.n	800952e <_printf_float+0x3fa>
 800954a:	4653      	mov	r3, sl
 800954c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009550:	e6e0      	b.n	8009314 <_printf_float+0x1e0>
 8009552:	f04f 0800 	mov.w	r8, #0
 8009556:	f104 091a 	add.w	r9, r4, #26
 800955a:	e7f2      	b.n	8009542 <_printf_float+0x40e>
 800955c:	2301      	movs	r3, #1
 800955e:	4642      	mov	r2, r8
 8009560:	e7df      	b.n	8009522 <_printf_float+0x3ee>
 8009562:	2301      	movs	r3, #1
 8009564:	464a      	mov	r2, r9
 8009566:	4631      	mov	r1, r6
 8009568:	4628      	mov	r0, r5
 800956a:	47b8      	blx	r7
 800956c:	3001      	adds	r0, #1
 800956e:	f43f ae3c 	beq.w	80091ea <_printf_float+0xb6>
 8009572:	f108 0801 	add.w	r8, r8, #1
 8009576:	68e3      	ldr	r3, [r4, #12]
 8009578:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800957a:	1a5b      	subs	r3, r3, r1
 800957c:	4543      	cmp	r3, r8
 800957e:	dcf0      	bgt.n	8009562 <_printf_float+0x42e>
 8009580:	e6fd      	b.n	800937e <_printf_float+0x24a>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	f104 0919 	add.w	r9, r4, #25
 800958a:	e7f4      	b.n	8009576 <_printf_float+0x442>

0800958c <_printf_common>:
 800958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	4616      	mov	r6, r2
 8009592:	4699      	mov	r9, r3
 8009594:	688a      	ldr	r2, [r1, #8]
 8009596:	690b      	ldr	r3, [r1, #16]
 8009598:	4607      	mov	r7, r0
 800959a:	4293      	cmp	r3, r2
 800959c:	bfb8      	it	lt
 800959e:	4613      	movlt	r3, r2
 80095a0:	6033      	str	r3, [r6, #0]
 80095a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095a6:	460c      	mov	r4, r1
 80095a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095ac:	b10a      	cbz	r2, 80095b2 <_printf_common+0x26>
 80095ae:	3301      	adds	r3, #1
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	0699      	lsls	r1, r3, #26
 80095b6:	bf42      	ittt	mi
 80095b8:	6833      	ldrmi	r3, [r6, #0]
 80095ba:	3302      	addmi	r3, #2
 80095bc:	6033      	strmi	r3, [r6, #0]
 80095be:	6825      	ldr	r5, [r4, #0]
 80095c0:	f015 0506 	ands.w	r5, r5, #6
 80095c4:	d106      	bne.n	80095d4 <_printf_common+0x48>
 80095c6:	f104 0a19 	add.w	sl, r4, #25
 80095ca:	68e3      	ldr	r3, [r4, #12]
 80095cc:	6832      	ldr	r2, [r6, #0]
 80095ce:	1a9b      	subs	r3, r3, r2
 80095d0:	42ab      	cmp	r3, r5
 80095d2:	dc28      	bgt.n	8009626 <_printf_common+0x9a>
 80095d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095d8:	1e13      	subs	r3, r2, #0
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	bf18      	it	ne
 80095de:	2301      	movne	r3, #1
 80095e0:	0692      	lsls	r2, r2, #26
 80095e2:	d42d      	bmi.n	8009640 <_printf_common+0xb4>
 80095e4:	4649      	mov	r1, r9
 80095e6:	4638      	mov	r0, r7
 80095e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095ec:	47c0      	blx	r8
 80095ee:	3001      	adds	r0, #1
 80095f0:	d020      	beq.n	8009634 <_printf_common+0xa8>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	68e5      	ldr	r5, [r4, #12]
 80095f6:	f003 0306 	and.w	r3, r3, #6
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	bf18      	it	ne
 80095fe:	2500      	movne	r5, #0
 8009600:	6832      	ldr	r2, [r6, #0]
 8009602:	f04f 0600 	mov.w	r6, #0
 8009606:	68a3      	ldr	r3, [r4, #8]
 8009608:	bf08      	it	eq
 800960a:	1aad      	subeq	r5, r5, r2
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	bf08      	it	eq
 8009610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009614:	4293      	cmp	r3, r2
 8009616:	bfc4      	itt	gt
 8009618:	1a9b      	subgt	r3, r3, r2
 800961a:	18ed      	addgt	r5, r5, r3
 800961c:	341a      	adds	r4, #26
 800961e:	42b5      	cmp	r5, r6
 8009620:	d11a      	bne.n	8009658 <_printf_common+0xcc>
 8009622:	2000      	movs	r0, #0
 8009624:	e008      	b.n	8009638 <_printf_common+0xac>
 8009626:	2301      	movs	r3, #1
 8009628:	4652      	mov	r2, sl
 800962a:	4649      	mov	r1, r9
 800962c:	4638      	mov	r0, r7
 800962e:	47c0      	blx	r8
 8009630:	3001      	adds	r0, #1
 8009632:	d103      	bne.n	800963c <_printf_common+0xb0>
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963c:	3501      	adds	r5, #1
 800963e:	e7c4      	b.n	80095ca <_printf_common+0x3e>
 8009640:	2030      	movs	r0, #48	; 0x30
 8009642:	18e1      	adds	r1, r4, r3
 8009644:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800964e:	4422      	add	r2, r4
 8009650:	3302      	adds	r3, #2
 8009652:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009656:	e7c5      	b.n	80095e4 <_printf_common+0x58>
 8009658:	2301      	movs	r3, #1
 800965a:	4622      	mov	r2, r4
 800965c:	4649      	mov	r1, r9
 800965e:	4638      	mov	r0, r7
 8009660:	47c0      	blx	r8
 8009662:	3001      	adds	r0, #1
 8009664:	d0e6      	beq.n	8009634 <_printf_common+0xa8>
 8009666:	3601      	adds	r6, #1
 8009668:	e7d9      	b.n	800961e <_printf_common+0x92>
	...

0800966c <_printf_i>:
 800966c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009670:	460c      	mov	r4, r1
 8009672:	7e27      	ldrb	r7, [r4, #24]
 8009674:	4691      	mov	r9, r2
 8009676:	2f78      	cmp	r7, #120	; 0x78
 8009678:	4680      	mov	r8, r0
 800967a:	469a      	mov	sl, r3
 800967c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800967e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009682:	d807      	bhi.n	8009694 <_printf_i+0x28>
 8009684:	2f62      	cmp	r7, #98	; 0x62
 8009686:	d80a      	bhi.n	800969e <_printf_i+0x32>
 8009688:	2f00      	cmp	r7, #0
 800968a:	f000 80d9 	beq.w	8009840 <_printf_i+0x1d4>
 800968e:	2f58      	cmp	r7, #88	; 0x58
 8009690:	f000 80a4 	beq.w	80097dc <_printf_i+0x170>
 8009694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800969c:	e03a      	b.n	8009714 <_printf_i+0xa8>
 800969e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096a2:	2b15      	cmp	r3, #21
 80096a4:	d8f6      	bhi.n	8009694 <_printf_i+0x28>
 80096a6:	a001      	add	r0, pc, #4	; (adr r0, 80096ac <_printf_i+0x40>)
 80096a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096ac:	08009705 	.word	0x08009705
 80096b0:	08009719 	.word	0x08009719
 80096b4:	08009695 	.word	0x08009695
 80096b8:	08009695 	.word	0x08009695
 80096bc:	08009695 	.word	0x08009695
 80096c0:	08009695 	.word	0x08009695
 80096c4:	08009719 	.word	0x08009719
 80096c8:	08009695 	.word	0x08009695
 80096cc:	08009695 	.word	0x08009695
 80096d0:	08009695 	.word	0x08009695
 80096d4:	08009695 	.word	0x08009695
 80096d8:	08009827 	.word	0x08009827
 80096dc:	08009749 	.word	0x08009749
 80096e0:	08009809 	.word	0x08009809
 80096e4:	08009695 	.word	0x08009695
 80096e8:	08009695 	.word	0x08009695
 80096ec:	08009849 	.word	0x08009849
 80096f0:	08009695 	.word	0x08009695
 80096f4:	08009749 	.word	0x08009749
 80096f8:	08009695 	.word	0x08009695
 80096fc:	08009695 	.word	0x08009695
 8009700:	08009811 	.word	0x08009811
 8009704:	680b      	ldr	r3, [r1, #0]
 8009706:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800970a:	1d1a      	adds	r2, r3, #4
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	600a      	str	r2, [r1, #0]
 8009710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009714:	2301      	movs	r3, #1
 8009716:	e0a4      	b.n	8009862 <_printf_i+0x1f6>
 8009718:	6825      	ldr	r5, [r4, #0]
 800971a:	6808      	ldr	r0, [r1, #0]
 800971c:	062e      	lsls	r6, r5, #24
 800971e:	f100 0304 	add.w	r3, r0, #4
 8009722:	d50a      	bpl.n	800973a <_printf_i+0xce>
 8009724:	6805      	ldr	r5, [r0, #0]
 8009726:	600b      	str	r3, [r1, #0]
 8009728:	2d00      	cmp	r5, #0
 800972a:	da03      	bge.n	8009734 <_printf_i+0xc8>
 800972c:	232d      	movs	r3, #45	; 0x2d
 800972e:	426d      	negs	r5, r5
 8009730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009734:	230a      	movs	r3, #10
 8009736:	485e      	ldr	r0, [pc, #376]	; (80098b0 <_printf_i+0x244>)
 8009738:	e019      	b.n	800976e <_printf_i+0x102>
 800973a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800973e:	6805      	ldr	r5, [r0, #0]
 8009740:	600b      	str	r3, [r1, #0]
 8009742:	bf18      	it	ne
 8009744:	b22d      	sxthne	r5, r5
 8009746:	e7ef      	b.n	8009728 <_printf_i+0xbc>
 8009748:	680b      	ldr	r3, [r1, #0]
 800974a:	6825      	ldr	r5, [r4, #0]
 800974c:	1d18      	adds	r0, r3, #4
 800974e:	6008      	str	r0, [r1, #0]
 8009750:	0628      	lsls	r0, r5, #24
 8009752:	d501      	bpl.n	8009758 <_printf_i+0xec>
 8009754:	681d      	ldr	r5, [r3, #0]
 8009756:	e002      	b.n	800975e <_printf_i+0xf2>
 8009758:	0669      	lsls	r1, r5, #25
 800975a:	d5fb      	bpl.n	8009754 <_printf_i+0xe8>
 800975c:	881d      	ldrh	r5, [r3, #0]
 800975e:	2f6f      	cmp	r7, #111	; 0x6f
 8009760:	bf0c      	ite	eq
 8009762:	2308      	moveq	r3, #8
 8009764:	230a      	movne	r3, #10
 8009766:	4852      	ldr	r0, [pc, #328]	; (80098b0 <_printf_i+0x244>)
 8009768:	2100      	movs	r1, #0
 800976a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800976e:	6866      	ldr	r6, [r4, #4]
 8009770:	2e00      	cmp	r6, #0
 8009772:	bfa8      	it	ge
 8009774:	6821      	ldrge	r1, [r4, #0]
 8009776:	60a6      	str	r6, [r4, #8]
 8009778:	bfa4      	itt	ge
 800977a:	f021 0104 	bicge.w	r1, r1, #4
 800977e:	6021      	strge	r1, [r4, #0]
 8009780:	b90d      	cbnz	r5, 8009786 <_printf_i+0x11a>
 8009782:	2e00      	cmp	r6, #0
 8009784:	d04d      	beq.n	8009822 <_printf_i+0x1b6>
 8009786:	4616      	mov	r6, r2
 8009788:	fbb5 f1f3 	udiv	r1, r5, r3
 800978c:	fb03 5711 	mls	r7, r3, r1, r5
 8009790:	5dc7      	ldrb	r7, [r0, r7]
 8009792:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009796:	462f      	mov	r7, r5
 8009798:	42bb      	cmp	r3, r7
 800979a:	460d      	mov	r5, r1
 800979c:	d9f4      	bls.n	8009788 <_printf_i+0x11c>
 800979e:	2b08      	cmp	r3, #8
 80097a0:	d10b      	bne.n	80097ba <_printf_i+0x14e>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	07df      	lsls	r7, r3, #31
 80097a6:	d508      	bpl.n	80097ba <_printf_i+0x14e>
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	6861      	ldr	r1, [r4, #4]
 80097ac:	4299      	cmp	r1, r3
 80097ae:	bfde      	ittt	le
 80097b0:	2330      	movle	r3, #48	; 0x30
 80097b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097ba:	1b92      	subs	r2, r2, r6
 80097bc:	6122      	str	r2, [r4, #16]
 80097be:	464b      	mov	r3, r9
 80097c0:	4621      	mov	r1, r4
 80097c2:	4640      	mov	r0, r8
 80097c4:	f8cd a000 	str.w	sl, [sp]
 80097c8:	aa03      	add	r2, sp, #12
 80097ca:	f7ff fedf 	bl	800958c <_printf_common>
 80097ce:	3001      	adds	r0, #1
 80097d0:	d14c      	bne.n	800986c <_printf_i+0x200>
 80097d2:	f04f 30ff 	mov.w	r0, #4294967295
 80097d6:	b004      	add	sp, #16
 80097d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097dc:	4834      	ldr	r0, [pc, #208]	; (80098b0 <_printf_i+0x244>)
 80097de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097e2:	680e      	ldr	r6, [r1, #0]
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80097ea:	061f      	lsls	r7, r3, #24
 80097ec:	600e      	str	r6, [r1, #0]
 80097ee:	d514      	bpl.n	800981a <_printf_i+0x1ae>
 80097f0:	07d9      	lsls	r1, r3, #31
 80097f2:	bf44      	itt	mi
 80097f4:	f043 0320 	orrmi.w	r3, r3, #32
 80097f8:	6023      	strmi	r3, [r4, #0]
 80097fa:	b91d      	cbnz	r5, 8009804 <_printf_i+0x198>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	f023 0320 	bic.w	r3, r3, #32
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	2310      	movs	r3, #16
 8009806:	e7af      	b.n	8009768 <_printf_i+0xfc>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	f043 0320 	orr.w	r3, r3, #32
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	2378      	movs	r3, #120	; 0x78
 8009812:	4828      	ldr	r0, [pc, #160]	; (80098b4 <_printf_i+0x248>)
 8009814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009818:	e7e3      	b.n	80097e2 <_printf_i+0x176>
 800981a:	065e      	lsls	r6, r3, #25
 800981c:	bf48      	it	mi
 800981e:	b2ad      	uxthmi	r5, r5
 8009820:	e7e6      	b.n	80097f0 <_printf_i+0x184>
 8009822:	4616      	mov	r6, r2
 8009824:	e7bb      	b.n	800979e <_printf_i+0x132>
 8009826:	680b      	ldr	r3, [r1, #0]
 8009828:	6826      	ldr	r6, [r4, #0]
 800982a:	1d1d      	adds	r5, r3, #4
 800982c:	6960      	ldr	r0, [r4, #20]
 800982e:	600d      	str	r5, [r1, #0]
 8009830:	0635      	lsls	r5, r6, #24
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	d501      	bpl.n	800983a <_printf_i+0x1ce>
 8009836:	6018      	str	r0, [r3, #0]
 8009838:	e002      	b.n	8009840 <_printf_i+0x1d4>
 800983a:	0671      	lsls	r1, r6, #25
 800983c:	d5fb      	bpl.n	8009836 <_printf_i+0x1ca>
 800983e:	8018      	strh	r0, [r3, #0]
 8009840:	2300      	movs	r3, #0
 8009842:	4616      	mov	r6, r2
 8009844:	6123      	str	r3, [r4, #16]
 8009846:	e7ba      	b.n	80097be <_printf_i+0x152>
 8009848:	680b      	ldr	r3, [r1, #0]
 800984a:	1d1a      	adds	r2, r3, #4
 800984c:	600a      	str	r2, [r1, #0]
 800984e:	681e      	ldr	r6, [r3, #0]
 8009850:	2100      	movs	r1, #0
 8009852:	4630      	mov	r0, r6
 8009854:	6862      	ldr	r2, [r4, #4]
 8009856:	f000 fffe 	bl	800a856 <memchr>
 800985a:	b108      	cbz	r0, 8009860 <_printf_i+0x1f4>
 800985c:	1b80      	subs	r0, r0, r6
 800985e:	6060      	str	r0, [r4, #4]
 8009860:	6863      	ldr	r3, [r4, #4]
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	2300      	movs	r3, #0
 8009866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800986a:	e7a8      	b.n	80097be <_printf_i+0x152>
 800986c:	4632      	mov	r2, r6
 800986e:	4649      	mov	r1, r9
 8009870:	4640      	mov	r0, r8
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	47d0      	blx	sl
 8009876:	3001      	adds	r0, #1
 8009878:	d0ab      	beq.n	80097d2 <_printf_i+0x166>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	079b      	lsls	r3, r3, #30
 800987e:	d413      	bmi.n	80098a8 <_printf_i+0x23c>
 8009880:	68e0      	ldr	r0, [r4, #12]
 8009882:	9b03      	ldr	r3, [sp, #12]
 8009884:	4298      	cmp	r0, r3
 8009886:	bfb8      	it	lt
 8009888:	4618      	movlt	r0, r3
 800988a:	e7a4      	b.n	80097d6 <_printf_i+0x16a>
 800988c:	2301      	movs	r3, #1
 800988e:	4632      	mov	r2, r6
 8009890:	4649      	mov	r1, r9
 8009892:	4640      	mov	r0, r8
 8009894:	47d0      	blx	sl
 8009896:	3001      	adds	r0, #1
 8009898:	d09b      	beq.n	80097d2 <_printf_i+0x166>
 800989a:	3501      	adds	r5, #1
 800989c:	68e3      	ldr	r3, [r4, #12]
 800989e:	9903      	ldr	r1, [sp, #12]
 80098a0:	1a5b      	subs	r3, r3, r1
 80098a2:	42ab      	cmp	r3, r5
 80098a4:	dcf2      	bgt.n	800988c <_printf_i+0x220>
 80098a6:	e7eb      	b.n	8009880 <_printf_i+0x214>
 80098a8:	2500      	movs	r5, #0
 80098aa:	f104 0619 	add.w	r6, r4, #25
 80098ae:	e7f5      	b.n	800989c <_printf_i+0x230>
 80098b0:	0800b8de 	.word	0x0800b8de
 80098b4:	0800b8ef 	.word	0x0800b8ef

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	2300      	movs	r3, #0
 80098bc:	4d05      	ldr	r5, [pc, #20]	; (80098d4 <_sbrk_r+0x1c>)
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7f9 f99a 	bl	8002bfc <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000970 	.word	0x20000970

080098d8 <_raise_r>:
 80098d8:	291f      	cmp	r1, #31
 80098da:	b538      	push	{r3, r4, r5, lr}
 80098dc:	4604      	mov	r4, r0
 80098de:	460d      	mov	r5, r1
 80098e0:	d904      	bls.n	80098ec <_raise_r+0x14>
 80098e2:	2316      	movs	r3, #22
 80098e4:	6003      	str	r3, [r0, #0]
 80098e6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098ee:	b112      	cbz	r2, 80098f6 <_raise_r+0x1e>
 80098f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098f4:	b94b      	cbnz	r3, 800990a <_raise_r+0x32>
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f830 	bl	800995c <_getpid_r>
 80098fc:	462a      	mov	r2, r5
 80098fe:	4601      	mov	r1, r0
 8009900:	4620      	mov	r0, r4
 8009902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009906:	f000 b817 	b.w	8009938 <_kill_r>
 800990a:	2b01      	cmp	r3, #1
 800990c:	d00a      	beq.n	8009924 <_raise_r+0x4c>
 800990e:	1c59      	adds	r1, r3, #1
 8009910:	d103      	bne.n	800991a <_raise_r+0x42>
 8009912:	2316      	movs	r3, #22
 8009914:	6003      	str	r3, [r0, #0]
 8009916:	2001      	movs	r0, #1
 8009918:	e7e7      	b.n	80098ea <_raise_r+0x12>
 800991a:	2400      	movs	r4, #0
 800991c:	4628      	mov	r0, r5
 800991e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009922:	4798      	blx	r3
 8009924:	2000      	movs	r0, #0
 8009926:	e7e0      	b.n	80098ea <_raise_r+0x12>

08009928 <raise>:
 8009928:	4b02      	ldr	r3, [pc, #8]	; (8009934 <raise+0xc>)
 800992a:	4601      	mov	r1, r0
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	f7ff bfd3 	b.w	80098d8 <_raise_r>
 8009932:	bf00      	nop
 8009934:	2000000c 	.word	0x2000000c

08009938 <_kill_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	2300      	movs	r3, #0
 800993c:	4d06      	ldr	r5, [pc, #24]	; (8009958 <_kill_r+0x20>)
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	4611      	mov	r1, r2
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	f7f9 f8d6 	bl	8002af6 <_kill>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	d102      	bne.n	8009954 <_kill_r+0x1c>
 800994e:	682b      	ldr	r3, [r5, #0]
 8009950:	b103      	cbz	r3, 8009954 <_kill_r+0x1c>
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	bd38      	pop	{r3, r4, r5, pc}
 8009956:	bf00      	nop
 8009958:	20000970 	.word	0x20000970

0800995c <_getpid_r>:
 800995c:	f7f9 b8c4 	b.w	8002ae8 <_getpid>

08009960 <quorem>:
 8009960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	6903      	ldr	r3, [r0, #16]
 8009966:	690c      	ldr	r4, [r1, #16]
 8009968:	4607      	mov	r7, r0
 800996a:	42a3      	cmp	r3, r4
 800996c:	f2c0 8083 	blt.w	8009a76 <quorem+0x116>
 8009970:	3c01      	subs	r4, #1
 8009972:	f100 0514 	add.w	r5, r0, #20
 8009976:	f101 0814 	add.w	r8, r1, #20
 800997a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009984:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009988:	3301      	adds	r3, #1
 800998a:	429a      	cmp	r2, r3
 800998c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009998:	d332      	bcc.n	8009a00 <quorem+0xa0>
 800999a:	f04f 0e00 	mov.w	lr, #0
 800999e:	4640      	mov	r0, r8
 80099a0:	46ac      	mov	ip, r5
 80099a2:	46f2      	mov	sl, lr
 80099a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80099a8:	b293      	uxth	r3, r2
 80099aa:	fb06 e303 	mla	r3, r6, r3, lr
 80099ae:	0c12      	lsrs	r2, r2, #16
 80099b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099b4:	fb06 e202 	mla	r2, r6, r2, lr
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	ebaa 0303 	sub.w	r3, sl, r3
 80099be:	f8dc a000 	ldr.w	sl, [ip]
 80099c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099c6:	fa1f fa8a 	uxth.w	sl, sl
 80099ca:	4453      	add	r3, sl
 80099cc:	fa1f fa82 	uxth.w	sl, r2
 80099d0:	f8dc 2000 	ldr.w	r2, [ip]
 80099d4:	4581      	cmp	r9, r0
 80099d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80099da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099de:	b29b      	uxth	r3, r3
 80099e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099e8:	f84c 3b04 	str.w	r3, [ip], #4
 80099ec:	d2da      	bcs.n	80099a4 <quorem+0x44>
 80099ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80099f2:	b92b      	cbnz	r3, 8009a00 <quorem+0xa0>
 80099f4:	9b01      	ldr	r3, [sp, #4]
 80099f6:	3b04      	subs	r3, #4
 80099f8:	429d      	cmp	r5, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	d32f      	bcc.n	8009a5e <quorem+0xfe>
 80099fe:	613c      	str	r4, [r7, #16]
 8009a00:	4638      	mov	r0, r7
 8009a02:	f001 f9bd 	bl	800ad80 <__mcmp>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	db25      	blt.n	8009a56 <quorem+0xf6>
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f04f 0c00 	mov.w	ip, #0
 8009a10:	3601      	adds	r6, #1
 8009a12:	f858 1b04 	ldr.w	r1, [r8], #4
 8009a16:	f8d0 e000 	ldr.w	lr, [r0]
 8009a1a:	b28b      	uxth	r3, r1
 8009a1c:	ebac 0303 	sub.w	r3, ip, r3
 8009a20:	fa1f f28e 	uxth.w	r2, lr
 8009a24:	4413      	add	r3, r2
 8009a26:	0c0a      	lsrs	r2, r1, #16
 8009a28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a36:	45c1      	cmp	r9, r8
 8009a38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a3c:	f840 3b04 	str.w	r3, [r0], #4
 8009a40:	d2e7      	bcs.n	8009a12 <quorem+0xb2>
 8009a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a4a:	b922      	cbnz	r2, 8009a56 <quorem+0xf6>
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	429d      	cmp	r5, r3
 8009a50:	461a      	mov	r2, r3
 8009a52:	d30a      	bcc.n	8009a6a <quorem+0x10a>
 8009a54:	613c      	str	r4, [r7, #16]
 8009a56:	4630      	mov	r0, r6
 8009a58:	b003      	add	sp, #12
 8009a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5e:	6812      	ldr	r2, [r2, #0]
 8009a60:	3b04      	subs	r3, #4
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	d1cb      	bne.n	80099fe <quorem+0x9e>
 8009a66:	3c01      	subs	r4, #1
 8009a68:	e7c6      	b.n	80099f8 <quorem+0x98>
 8009a6a:	6812      	ldr	r2, [r2, #0]
 8009a6c:	3b04      	subs	r3, #4
 8009a6e:	2a00      	cmp	r2, #0
 8009a70:	d1f0      	bne.n	8009a54 <quorem+0xf4>
 8009a72:	3c01      	subs	r4, #1
 8009a74:	e7eb      	b.n	8009a4e <quorem+0xee>
 8009a76:	2000      	movs	r0, #0
 8009a78:	e7ee      	b.n	8009a58 <quorem+0xf8>
 8009a7a:	0000      	movs	r0, r0
 8009a7c:	0000      	movs	r0, r0
	...

08009a80 <_dtoa_r>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4616      	mov	r6, r2
 8009a86:	461f      	mov	r7, r3
 8009a88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a8a:	b099      	sub	sp, #100	; 0x64
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009a96:	b974      	cbnz	r4, 8009ab6 <_dtoa_r+0x36>
 8009a98:	2010      	movs	r0, #16
 8009a9a:	f7ff f9c7 	bl	8008e2c <malloc>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	6268      	str	r0, [r5, #36]	; 0x24
 8009aa2:	b920      	cbnz	r0, 8009aae <_dtoa_r+0x2e>
 8009aa4:	21ea      	movs	r1, #234	; 0xea
 8009aa6:	4bae      	ldr	r3, [pc, #696]	; (8009d60 <_dtoa_r+0x2e0>)
 8009aa8:	48ae      	ldr	r0, [pc, #696]	; (8009d64 <_dtoa_r+0x2e4>)
 8009aaa:	f001 fced 	bl	800b488 <__assert_func>
 8009aae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ab2:	6004      	str	r4, [r0, #0]
 8009ab4:	60c4      	str	r4, [r0, #12]
 8009ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ab8:	6819      	ldr	r1, [r3, #0]
 8009aba:	b151      	cbz	r1, 8009ad2 <_dtoa_r+0x52>
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	2301      	movs	r3, #1
 8009ac0:	4093      	lsls	r3, r2
 8009ac2:	604a      	str	r2, [r1, #4]
 8009ac4:	608b      	str	r3, [r1, #8]
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 ff20 	bl	800a90c <_Bfree>
 8009acc:	2200      	movs	r2, #0
 8009ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	1e3b      	subs	r3, r7, #0
 8009ad4:	bfaf      	iteee	ge
 8009ad6:	2300      	movge	r3, #0
 8009ad8:	2201      	movlt	r2, #1
 8009ada:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ade:	9305      	strlt	r3, [sp, #20]
 8009ae0:	bfa8      	it	ge
 8009ae2:	f8c8 3000 	strge.w	r3, [r8]
 8009ae6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009aea:	4b9f      	ldr	r3, [pc, #636]	; (8009d68 <_dtoa_r+0x2e8>)
 8009aec:	bfb8      	it	lt
 8009aee:	f8c8 2000 	strlt.w	r2, [r8]
 8009af2:	ea33 0309 	bics.w	r3, r3, r9
 8009af6:	d119      	bne.n	8009b2c <_dtoa_r+0xac>
 8009af8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009afc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b04:	4333      	orrs	r3, r6
 8009b06:	f000 8580 	beq.w	800a60a <_dtoa_r+0xb8a>
 8009b0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b0c:	b953      	cbnz	r3, 8009b24 <_dtoa_r+0xa4>
 8009b0e:	4b97      	ldr	r3, [pc, #604]	; (8009d6c <_dtoa_r+0x2ec>)
 8009b10:	e022      	b.n	8009b58 <_dtoa_r+0xd8>
 8009b12:	4b97      	ldr	r3, [pc, #604]	; (8009d70 <_dtoa_r+0x2f0>)
 8009b14:	9308      	str	r3, [sp, #32]
 8009b16:	3308      	adds	r3, #8
 8009b18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	9808      	ldr	r0, [sp, #32]
 8009b1e:	b019      	add	sp, #100	; 0x64
 8009b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b24:	4b91      	ldr	r3, [pc, #580]	; (8009d6c <_dtoa_r+0x2ec>)
 8009b26:	9308      	str	r3, [sp, #32]
 8009b28:	3303      	adds	r3, #3
 8009b2a:	e7f5      	b.n	8009b18 <_dtoa_r+0x98>
 8009b2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009b34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f7f6 ff34 	bl	80009a8 <__aeabi_dcmpeq>
 8009b40:	4680      	mov	r8, r0
 8009b42:	b158      	cbz	r0, 8009b5c <_dtoa_r+0xdc>
 8009b44:	2301      	movs	r3, #1
 8009b46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 8559 	beq.w	800a604 <_dtoa_r+0xb84>
 8009b52:	4888      	ldr	r0, [pc, #544]	; (8009d74 <_dtoa_r+0x2f4>)
 8009b54:	6018      	str	r0, [r3, #0]
 8009b56:	1e43      	subs	r3, r0, #1
 8009b58:	9308      	str	r3, [sp, #32]
 8009b5a:	e7df      	b.n	8009b1c <_dtoa_r+0x9c>
 8009b5c:	ab16      	add	r3, sp, #88	; 0x58
 8009b5e:	9301      	str	r3, [sp, #4]
 8009b60:	ab17      	add	r3, sp, #92	; 0x5c
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	4628      	mov	r0, r5
 8009b66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b6a:	f001 f9b5 	bl	800aed8 <__d2b>
 8009b6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b72:	4682      	mov	sl, r0
 8009b74:	2c00      	cmp	r4, #0
 8009b76:	d07e      	beq.n	8009c76 <_dtoa_r+0x1f6>
 8009b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009b8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009b8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009b92:	2200      	movs	r2, #0
 8009b94:	4b78      	ldr	r3, [pc, #480]	; (8009d78 <_dtoa_r+0x2f8>)
 8009b96:	f7f6 fae7 	bl	8000168 <__aeabi_dsub>
 8009b9a:	a36b      	add	r3, pc, #428	; (adr r3, 8009d48 <_dtoa_r+0x2c8>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fc9a 	bl	80004d8 <__aeabi_dmul>
 8009ba4:	a36a      	add	r3, pc, #424	; (adr r3, 8009d50 <_dtoa_r+0x2d0>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	f7f6 fadf 	bl	800016c <__adddf3>
 8009bae:	4606      	mov	r6, r0
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	f7f6 fc26 	bl	8000404 <__aeabi_i2d>
 8009bb8:	a367      	add	r3, pc, #412	; (adr r3, 8009d58 <_dtoa_r+0x2d8>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	f7f6 fc8b 	bl	80004d8 <__aeabi_dmul>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 facf 	bl	800016c <__adddf3>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460f      	mov	r7, r1
 8009bd2:	f7f6 ff31 	bl	8000a38 <__aeabi_d2iz>
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	4681      	mov	r9, r0
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 feec 	bl	80009bc <__aeabi_dcmplt>
 8009be4:	b148      	cbz	r0, 8009bfa <_dtoa_r+0x17a>
 8009be6:	4648      	mov	r0, r9
 8009be8:	f7f6 fc0c 	bl	8000404 <__aeabi_i2d>
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	f7f6 feda 	bl	80009a8 <__aeabi_dcmpeq>
 8009bf4:	b908      	cbnz	r0, 8009bfa <_dtoa_r+0x17a>
 8009bf6:	f109 39ff 	add.w	r9, r9, #4294967295
 8009bfa:	f1b9 0f16 	cmp.w	r9, #22
 8009bfe:	d857      	bhi.n	8009cb0 <_dtoa_r+0x230>
 8009c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c04:	4b5d      	ldr	r3, [pc, #372]	; (8009d7c <_dtoa_r+0x2fc>)
 8009c06:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	f7f6 fed5 	bl	80009bc <__aeabi_dcmplt>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d04e      	beq.n	8009cb4 <_dtoa_r+0x234>
 8009c16:	2300      	movs	r3, #0
 8009c18:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c20:	1b1c      	subs	r4, r3, r4
 8009c22:	1e63      	subs	r3, r4, #1
 8009c24:	9309      	str	r3, [sp, #36]	; 0x24
 8009c26:	bf49      	itett	mi
 8009c28:	f1c4 0301 	rsbmi	r3, r4, #1
 8009c2c:	2300      	movpl	r3, #0
 8009c2e:	9306      	strmi	r3, [sp, #24]
 8009c30:	2300      	movmi	r3, #0
 8009c32:	bf54      	ite	pl
 8009c34:	9306      	strpl	r3, [sp, #24]
 8009c36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009c38:	f1b9 0f00 	cmp.w	r9, #0
 8009c3c:	db3c      	blt.n	8009cb8 <_dtoa_r+0x238>
 8009c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c40:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009c44:	444b      	add	r3, r9
 8009c46:	9309      	str	r3, [sp, #36]	; 0x24
 8009c48:	2300      	movs	r3, #0
 8009c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c4e:	2b09      	cmp	r3, #9
 8009c50:	d86c      	bhi.n	8009d2c <_dtoa_r+0x2ac>
 8009c52:	2b05      	cmp	r3, #5
 8009c54:	bfc4      	itt	gt
 8009c56:	3b04      	subgt	r3, #4
 8009c58:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009c5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c5c:	bfc8      	it	gt
 8009c5e:	2400      	movgt	r4, #0
 8009c60:	f1a3 0302 	sub.w	r3, r3, #2
 8009c64:	bfd8      	it	le
 8009c66:	2401      	movle	r4, #1
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	f200 808b 	bhi.w	8009d84 <_dtoa_r+0x304>
 8009c6e:	e8df f003 	tbb	[pc, r3]
 8009c72:	4f2d      	.short	0x4f2d
 8009c74:	5b4d      	.short	0x5b4d
 8009c76:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009c7a:	441c      	add	r4, r3
 8009c7c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	bfc3      	ittte	gt
 8009c84:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c88:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009c8c:	fa09 f303 	lslgt.w	r3, r9, r3
 8009c90:	f1c3 0320 	rsble	r3, r3, #32
 8009c94:	bfc6      	itte	gt
 8009c96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c9a:	4318      	orrgt	r0, r3
 8009c9c:	fa06 f003 	lslle.w	r0, r6, r3
 8009ca0:	f7f6 fba0 	bl	80003e4 <__aeabi_ui2d>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009caa:	3c01      	subs	r4, #1
 8009cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cae:	e770      	b.n	8009b92 <_dtoa_r+0x112>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e7b3      	b.n	8009c1c <_dtoa_r+0x19c>
 8009cb4:	900f      	str	r0, [sp, #60]	; 0x3c
 8009cb6:	e7b2      	b.n	8009c1e <_dtoa_r+0x19e>
 8009cb8:	9b06      	ldr	r3, [sp, #24]
 8009cba:	eba3 0309 	sub.w	r3, r3, r9
 8009cbe:	9306      	str	r3, [sp, #24]
 8009cc0:	f1c9 0300 	rsb	r3, r9, #0
 8009cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8009cca:	e7bf      	b.n	8009c4c <_dtoa_r+0x1cc>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dc59      	bgt.n	8009d8a <_dtoa_r+0x30a>
 8009cd6:	f04f 0b01 	mov.w	fp, #1
 8009cda:	465b      	mov	r3, fp
 8009cdc:	f8cd b008 	str.w	fp, [sp, #8]
 8009ce0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009ce8:	6042      	str	r2, [r0, #4]
 8009cea:	2204      	movs	r2, #4
 8009cec:	f102 0614 	add.w	r6, r2, #20
 8009cf0:	429e      	cmp	r6, r3
 8009cf2:	6841      	ldr	r1, [r0, #4]
 8009cf4:	d94f      	bls.n	8009d96 <_dtoa_r+0x316>
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 fdc8 	bl	800a88c <_Balloc>
 8009cfc:	9008      	str	r0, [sp, #32]
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d14d      	bne.n	8009d9e <_dtoa_r+0x31e>
 8009d02:	4602      	mov	r2, r0
 8009d04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d08:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <_dtoa_r+0x300>)
 8009d0a:	e6cd      	b.n	8009aa8 <_dtoa_r+0x28>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e7de      	b.n	8009cce <_dtoa_r+0x24e>
 8009d10:	2300      	movs	r3, #0
 8009d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d16:	eb09 0b03 	add.w	fp, r9, r3
 8009d1a:	f10b 0301 	add.w	r3, fp, #1
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	bfb8      	it	lt
 8009d24:	2301      	movlt	r3, #1
 8009d26:	e7dd      	b.n	8009ce4 <_dtoa_r+0x264>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e7f2      	b.n	8009d12 <_dtoa_r+0x292>
 8009d2c:	2401      	movs	r4, #1
 8009d2e:	2300      	movs	r3, #0
 8009d30:	940b      	str	r4, [sp, #44]	; 0x2c
 8009d32:	9322      	str	r3, [sp, #136]	; 0x88
 8009d34:	f04f 3bff 	mov.w	fp, #4294967295
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2312      	movs	r3, #18
 8009d3c:	f8cd b008 	str.w	fp, [sp, #8]
 8009d40:	9223      	str	r2, [sp, #140]	; 0x8c
 8009d42:	e7cf      	b.n	8009ce4 <_dtoa_r+0x264>
 8009d44:	f3af 8000 	nop.w
 8009d48:	636f4361 	.word	0x636f4361
 8009d4c:	3fd287a7 	.word	0x3fd287a7
 8009d50:	8b60c8b3 	.word	0x8b60c8b3
 8009d54:	3fc68a28 	.word	0x3fc68a28
 8009d58:	509f79fb 	.word	0x509f79fb
 8009d5c:	3fd34413 	.word	0x3fd34413
 8009d60:	0800b90d 	.word	0x0800b90d
 8009d64:	0800b924 	.word	0x0800b924
 8009d68:	7ff00000 	.word	0x7ff00000
 8009d6c:	0800b909 	.word	0x0800b909
 8009d70:	0800b900 	.word	0x0800b900
 8009d74:	0800b8dd 	.word	0x0800b8dd
 8009d78:	3ff80000 	.word	0x3ff80000
 8009d7c:	0800ba80 	.word	0x0800ba80
 8009d80:	0800b983 	.word	0x0800b983
 8009d84:	2301      	movs	r3, #1
 8009d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d88:	e7d4      	b.n	8009d34 <_dtoa_r+0x2b4>
 8009d8a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009d8e:	465b      	mov	r3, fp
 8009d90:	f8cd b008 	str.w	fp, [sp, #8]
 8009d94:	e7a6      	b.n	8009ce4 <_dtoa_r+0x264>
 8009d96:	3101      	adds	r1, #1
 8009d98:	6041      	str	r1, [r0, #4]
 8009d9a:	0052      	lsls	r2, r2, #1
 8009d9c:	e7a6      	b.n	8009cec <_dtoa_r+0x26c>
 8009d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009da0:	9a08      	ldr	r2, [sp, #32]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	9b02      	ldr	r3, [sp, #8]
 8009da6:	2b0e      	cmp	r3, #14
 8009da8:	f200 80a8 	bhi.w	8009efc <_dtoa_r+0x47c>
 8009dac:	2c00      	cmp	r4, #0
 8009dae:	f000 80a5 	beq.w	8009efc <_dtoa_r+0x47c>
 8009db2:	f1b9 0f00 	cmp.w	r9, #0
 8009db6:	dd34      	ble.n	8009e22 <_dtoa_r+0x3a2>
 8009db8:	4a9a      	ldr	r2, [pc, #616]	; (800a024 <_dtoa_r+0x5a4>)
 8009dba:	f009 030f 	and.w	r3, r9, #15
 8009dbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009dc2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009dc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009dce:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009dd2:	d016      	beq.n	8009e02 <_dtoa_r+0x382>
 8009dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dd8:	4b93      	ldr	r3, [pc, #588]	; (800a028 <_dtoa_r+0x5a8>)
 8009dda:	2703      	movs	r7, #3
 8009ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009de0:	f7f6 fca4 	bl	800072c <__aeabi_ddiv>
 8009de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009de8:	f004 040f 	and.w	r4, r4, #15
 8009dec:	4e8e      	ldr	r6, [pc, #568]	; (800a028 <_dtoa_r+0x5a8>)
 8009dee:	b954      	cbnz	r4, 8009e06 <_dtoa_r+0x386>
 8009df0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009df8:	f7f6 fc98 	bl	800072c <__aeabi_ddiv>
 8009dfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e00:	e029      	b.n	8009e56 <_dtoa_r+0x3d6>
 8009e02:	2702      	movs	r7, #2
 8009e04:	e7f2      	b.n	8009dec <_dtoa_r+0x36c>
 8009e06:	07e1      	lsls	r1, r4, #31
 8009e08:	d508      	bpl.n	8009e1c <_dtoa_r+0x39c>
 8009e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e12:	f7f6 fb61 	bl	80004d8 <__aeabi_dmul>
 8009e16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e1a:	3701      	adds	r7, #1
 8009e1c:	1064      	asrs	r4, r4, #1
 8009e1e:	3608      	adds	r6, #8
 8009e20:	e7e5      	b.n	8009dee <_dtoa_r+0x36e>
 8009e22:	f000 80a5 	beq.w	8009f70 <_dtoa_r+0x4f0>
 8009e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e2a:	f1c9 0400 	rsb	r4, r9, #0
 8009e2e:	4b7d      	ldr	r3, [pc, #500]	; (800a024 <_dtoa_r+0x5a4>)
 8009e30:	f004 020f 	and.w	r2, r4, #15
 8009e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	f7f6 fb4c 	bl	80004d8 <__aeabi_dmul>
 8009e40:	2702      	movs	r7, #2
 8009e42:	2300      	movs	r3, #0
 8009e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e48:	4e77      	ldr	r6, [pc, #476]	; (800a028 <_dtoa_r+0x5a8>)
 8009e4a:	1124      	asrs	r4, r4, #4
 8009e4c:	2c00      	cmp	r4, #0
 8009e4e:	f040 8084 	bne.w	8009f5a <_dtoa_r+0x4da>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1d2      	bne.n	8009dfc <_dtoa_r+0x37c>
 8009e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 808b 	beq.w	8009f74 <_dtoa_r+0x4f4>
 8009e5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009e62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009e66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	4b6f      	ldr	r3, [pc, #444]	; (800a02c <_dtoa_r+0x5ac>)
 8009e6e:	f7f6 fda5 	bl	80009bc <__aeabi_dcmplt>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d07e      	beq.n	8009f74 <_dtoa_r+0x4f4>
 8009e76:	9b02      	ldr	r3, [sp, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d07b      	beq.n	8009f74 <_dtoa_r+0x4f4>
 8009e7c:	f1bb 0f00 	cmp.w	fp, #0
 8009e80:	dd38      	ble.n	8009ef4 <_dtoa_r+0x474>
 8009e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e86:	2200      	movs	r2, #0
 8009e88:	4b69      	ldr	r3, [pc, #420]	; (800a030 <_dtoa_r+0x5b0>)
 8009e8a:	f7f6 fb25 	bl	80004d8 <__aeabi_dmul>
 8009e8e:	465c      	mov	r4, fp
 8009e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e94:	f109 38ff 	add.w	r8, r9, #4294967295
 8009e98:	3701      	adds	r7, #1
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f7f6 fab2 	bl	8000404 <__aeabi_i2d>
 8009ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ea4:	f7f6 fb18 	bl	80004d8 <__aeabi_dmul>
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4b62      	ldr	r3, [pc, #392]	; (800a034 <_dtoa_r+0x5b4>)
 8009eac:	f7f6 f95e 	bl	800016c <__adddf3>
 8009eb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009eb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009eb8:	9611      	str	r6, [sp, #68]	; 0x44
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d15d      	bne.n	8009f7a <_dtoa_r+0x4fa>
 8009ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4b5c      	ldr	r3, [pc, #368]	; (800a038 <_dtoa_r+0x5b8>)
 8009ec6:	f7f6 f94f 	bl	8000168 <__aeabi_dsub>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ed2:	4633      	mov	r3, r6
 8009ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ed6:	f7f6 fd8f 	bl	80009f8 <__aeabi_dcmpgt>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f040 829e 	bne.w	800a41c <_dtoa_r+0x99c>
 8009ee0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ee6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009eea:	f7f6 fd67 	bl	80009bc <__aeabi_dcmplt>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f040 8292 	bne.w	800a418 <_dtoa_r+0x998>
 8009ef4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009ef8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f2c0 8153 	blt.w	800a1aa <_dtoa_r+0x72a>
 8009f04:	f1b9 0f0e 	cmp.w	r9, #14
 8009f08:	f300 814f 	bgt.w	800a1aa <_dtoa_r+0x72a>
 8009f0c:	4b45      	ldr	r3, [pc, #276]	; (800a024 <_dtoa_r+0x5a4>)
 8009f0e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009f12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009f1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f280 80db 	bge.w	800a0d8 <_dtoa_r+0x658>
 8009f22:	9b02      	ldr	r3, [sp, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f300 80d7 	bgt.w	800a0d8 <_dtoa_r+0x658>
 8009f2a:	f040 8274 	bne.w	800a416 <_dtoa_r+0x996>
 8009f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f32:	2200      	movs	r2, #0
 8009f34:	4b40      	ldr	r3, [pc, #256]	; (800a038 <_dtoa_r+0x5b8>)
 8009f36:	f7f6 facf 	bl	80004d8 <__aeabi_dmul>
 8009f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f3e:	f7f6 fd51 	bl	80009e4 <__aeabi_dcmpge>
 8009f42:	9c02      	ldr	r4, [sp, #8]
 8009f44:	4626      	mov	r6, r4
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f040 824a 	bne.w	800a3e0 <_dtoa_r+0x960>
 8009f4c:	2331      	movs	r3, #49	; 0x31
 8009f4e:	9f08      	ldr	r7, [sp, #32]
 8009f50:	f109 0901 	add.w	r9, r9, #1
 8009f54:	f807 3b01 	strb.w	r3, [r7], #1
 8009f58:	e246      	b.n	800a3e8 <_dtoa_r+0x968>
 8009f5a:	07e2      	lsls	r2, r4, #31
 8009f5c:	d505      	bpl.n	8009f6a <_dtoa_r+0x4ea>
 8009f5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f62:	f7f6 fab9 	bl	80004d8 <__aeabi_dmul>
 8009f66:	2301      	movs	r3, #1
 8009f68:	3701      	adds	r7, #1
 8009f6a:	1064      	asrs	r4, r4, #1
 8009f6c:	3608      	adds	r6, #8
 8009f6e:	e76d      	b.n	8009e4c <_dtoa_r+0x3cc>
 8009f70:	2702      	movs	r7, #2
 8009f72:	e770      	b.n	8009e56 <_dtoa_r+0x3d6>
 8009f74:	46c8      	mov	r8, r9
 8009f76:	9c02      	ldr	r4, [sp, #8]
 8009f78:	e78f      	b.n	8009e9a <_dtoa_r+0x41a>
 8009f7a:	9908      	ldr	r1, [sp, #32]
 8009f7c:	4b29      	ldr	r3, [pc, #164]	; (800a024 <_dtoa_r+0x5a4>)
 8009f7e:	4421      	add	r1, r4
 8009f80:	9112      	str	r1, [sp, #72]	; 0x48
 8009f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009f8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d055      	beq.n	800a040 <_dtoa_r+0x5c0>
 8009f94:	2000      	movs	r0, #0
 8009f96:	4929      	ldr	r1, [pc, #164]	; (800a03c <_dtoa_r+0x5bc>)
 8009f98:	f7f6 fbc8 	bl	800072c <__aeabi_ddiv>
 8009f9c:	463b      	mov	r3, r7
 8009f9e:	4632      	mov	r2, r6
 8009fa0:	f7f6 f8e2 	bl	8000168 <__aeabi_dsub>
 8009fa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fa8:	9f08      	ldr	r7, [sp, #32]
 8009faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fae:	f7f6 fd43 	bl	8000a38 <__aeabi_d2iz>
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	f7f6 fa26 	bl	8000404 <__aeabi_i2d>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fc0:	f7f6 f8d2 	bl	8000168 <__aeabi_dsub>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	3430      	adds	r4, #48	; 0x30
 8009fca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fd2:	f807 4b01 	strb.w	r4, [r7], #1
 8009fd6:	f7f6 fcf1 	bl	80009bc <__aeabi_dcmplt>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d174      	bne.n	800a0c8 <_dtoa_r+0x648>
 8009fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	4911      	ldr	r1, [pc, #68]	; (800a02c <_dtoa_r+0x5ac>)
 8009fe6:	f7f6 f8bf 	bl	8000168 <__aeabi_dsub>
 8009fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fee:	f7f6 fce5 	bl	80009bc <__aeabi_dcmplt>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	f040 80b6 	bne.w	800a164 <_dtoa_r+0x6e4>
 8009ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ffa:	429f      	cmp	r7, r3
 8009ffc:	f43f af7a 	beq.w	8009ef4 <_dtoa_r+0x474>
 800a000:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a004:	2200      	movs	r2, #0
 800a006:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <_dtoa_r+0x5b0>)
 800a008:	f7f6 fa66 	bl	80004d8 <__aeabi_dmul>
 800a00c:	2200      	movs	r2, #0
 800a00e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a016:	4b06      	ldr	r3, [pc, #24]	; (800a030 <_dtoa_r+0x5b0>)
 800a018:	f7f6 fa5e 	bl	80004d8 <__aeabi_dmul>
 800a01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a020:	e7c3      	b.n	8009faa <_dtoa_r+0x52a>
 800a022:	bf00      	nop
 800a024:	0800ba80 	.word	0x0800ba80
 800a028:	0800ba58 	.word	0x0800ba58
 800a02c:	3ff00000 	.word	0x3ff00000
 800a030:	40240000 	.word	0x40240000
 800a034:	401c0000 	.word	0x401c0000
 800a038:	40140000 	.word	0x40140000
 800a03c:	3fe00000 	.word	0x3fe00000
 800a040:	4630      	mov	r0, r6
 800a042:	4639      	mov	r1, r7
 800a044:	f7f6 fa48 	bl	80004d8 <__aeabi_dmul>
 800a048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a04a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a04e:	9c08      	ldr	r4, [sp, #32]
 800a050:	9314      	str	r3, [sp, #80]	; 0x50
 800a052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a056:	f7f6 fcef 	bl	8000a38 <__aeabi_d2iz>
 800a05a:	9015      	str	r0, [sp, #84]	; 0x54
 800a05c:	f7f6 f9d2 	bl	8000404 <__aeabi_i2d>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a068:	f7f6 f87e 	bl	8000168 <__aeabi_dsub>
 800a06c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a06e:	4606      	mov	r6, r0
 800a070:	3330      	adds	r3, #48	; 0x30
 800a072:	f804 3b01 	strb.w	r3, [r4], #1
 800a076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a078:	460f      	mov	r7, r1
 800a07a:	429c      	cmp	r4, r3
 800a07c:	f04f 0200 	mov.w	r2, #0
 800a080:	d124      	bne.n	800a0cc <_dtoa_r+0x64c>
 800a082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a086:	4bb3      	ldr	r3, [pc, #716]	; (800a354 <_dtoa_r+0x8d4>)
 800a088:	f7f6 f870 	bl	800016c <__adddf3>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4630      	mov	r0, r6
 800a092:	4639      	mov	r1, r7
 800a094:	f7f6 fcb0 	bl	80009f8 <__aeabi_dcmpgt>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d162      	bne.n	800a162 <_dtoa_r+0x6e2>
 800a09c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	49ac      	ldr	r1, [pc, #688]	; (800a354 <_dtoa_r+0x8d4>)
 800a0a4:	f7f6 f860 	bl	8000168 <__aeabi_dsub>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	f7f6 fc84 	bl	80009bc <__aeabi_dcmplt>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f43f af1d 	beq.w	8009ef4 <_dtoa_r+0x474>
 800a0ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a0bc:	1e7b      	subs	r3, r7, #1
 800a0be:	9314      	str	r3, [sp, #80]	; 0x50
 800a0c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a0c4:	2b30      	cmp	r3, #48	; 0x30
 800a0c6:	d0f8      	beq.n	800a0ba <_dtoa_r+0x63a>
 800a0c8:	46c1      	mov	r9, r8
 800a0ca:	e03a      	b.n	800a142 <_dtoa_r+0x6c2>
 800a0cc:	4ba2      	ldr	r3, [pc, #648]	; (800a358 <_dtoa_r+0x8d8>)
 800a0ce:	f7f6 fa03 	bl	80004d8 <__aeabi_dmul>
 800a0d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0d6:	e7bc      	b.n	800a052 <_dtoa_r+0x5d2>
 800a0d8:	9f08      	ldr	r7, [sp, #32]
 800a0da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0e2:	f7f6 fb23 	bl	800072c <__aeabi_ddiv>
 800a0e6:	f7f6 fca7 	bl	8000a38 <__aeabi_d2iz>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	f7f6 f98a 	bl	8000404 <__aeabi_i2d>
 800a0f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0f4:	f7f6 f9f0 	bl	80004d8 <__aeabi_dmul>
 800a0f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4602      	mov	r2, r0
 800a100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a104:	f7f6 f830 	bl	8000168 <__aeabi_dsub>
 800a108:	f807 6b01 	strb.w	r6, [r7], #1
 800a10c:	9e08      	ldr	r6, [sp, #32]
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	1bbe      	subs	r6, r7, r6
 800a112:	42b3      	cmp	r3, r6
 800a114:	d13a      	bne.n	800a18c <_dtoa_r+0x70c>
 800a116:	4602      	mov	r2, r0
 800a118:	460b      	mov	r3, r1
 800a11a:	f7f6 f827 	bl	800016c <__adddf3>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a12a:	f7f6 fc65 	bl	80009f8 <__aeabi_dcmpgt>
 800a12e:	bb58      	cbnz	r0, 800a188 <_dtoa_r+0x708>
 800a130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a138:	f7f6 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800a13c:	b108      	cbz	r0, 800a142 <_dtoa_r+0x6c2>
 800a13e:	07e1      	lsls	r1, r4, #31
 800a140:	d422      	bmi.n	800a188 <_dtoa_r+0x708>
 800a142:	4628      	mov	r0, r5
 800a144:	4651      	mov	r1, sl
 800a146:	f000 fbe1 	bl	800a90c <_Bfree>
 800a14a:	2300      	movs	r3, #0
 800a14c:	703b      	strb	r3, [r7, #0]
 800a14e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a150:	f109 0001 	add.w	r0, r9, #1
 800a154:	6018      	str	r0, [r3, #0]
 800a156:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f43f acdf 	beq.w	8009b1c <_dtoa_r+0x9c>
 800a15e:	601f      	str	r7, [r3, #0]
 800a160:	e4dc      	b.n	8009b1c <_dtoa_r+0x9c>
 800a162:	4627      	mov	r7, r4
 800a164:	463b      	mov	r3, r7
 800a166:	461f      	mov	r7, r3
 800a168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a16c:	2a39      	cmp	r2, #57	; 0x39
 800a16e:	d107      	bne.n	800a180 <_dtoa_r+0x700>
 800a170:	9a08      	ldr	r2, [sp, #32]
 800a172:	429a      	cmp	r2, r3
 800a174:	d1f7      	bne.n	800a166 <_dtoa_r+0x6e6>
 800a176:	2230      	movs	r2, #48	; 0x30
 800a178:	9908      	ldr	r1, [sp, #32]
 800a17a:	f108 0801 	add.w	r8, r8, #1
 800a17e:	700a      	strb	r2, [r1, #0]
 800a180:	781a      	ldrb	r2, [r3, #0]
 800a182:	3201      	adds	r2, #1
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e79f      	b.n	800a0c8 <_dtoa_r+0x648>
 800a188:	46c8      	mov	r8, r9
 800a18a:	e7eb      	b.n	800a164 <_dtoa_r+0x6e4>
 800a18c:	2200      	movs	r2, #0
 800a18e:	4b72      	ldr	r3, [pc, #456]	; (800a358 <_dtoa_r+0x8d8>)
 800a190:	f7f6 f9a2 	bl	80004d8 <__aeabi_dmul>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a19c:	2200      	movs	r2, #0
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f7f6 fc02 	bl	80009a8 <__aeabi_dcmpeq>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d098      	beq.n	800a0da <_dtoa_r+0x65a>
 800a1a8:	e7cb      	b.n	800a142 <_dtoa_r+0x6c2>
 800a1aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	f000 80cd 	beq.w	800a34c <_dtoa_r+0x8cc>
 800a1b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a1b4:	2a01      	cmp	r2, #1
 800a1b6:	f300 80af 	bgt.w	800a318 <_dtoa_r+0x898>
 800a1ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1bc:	2a00      	cmp	r2, #0
 800a1be:	f000 80a7 	beq.w	800a310 <_dtoa_r+0x890>
 800a1c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a1c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1c8:	9f06      	ldr	r7, [sp, #24]
 800a1ca:	9a06      	ldr	r2, [sp, #24]
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	441a      	add	r2, r3
 800a1d0:	9206      	str	r2, [sp, #24]
 800a1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	441a      	add	r2, r3
 800a1d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a1da:	f000 fc51 	bl	800aa80 <__i2b>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	2f00      	cmp	r7, #0
 800a1e2:	dd0c      	ble.n	800a1fe <_dtoa_r+0x77e>
 800a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dd09      	ble.n	800a1fe <_dtoa_r+0x77e>
 800a1ea:	42bb      	cmp	r3, r7
 800a1ec:	bfa8      	it	ge
 800a1ee:	463b      	movge	r3, r7
 800a1f0:	9a06      	ldr	r2, [sp, #24]
 800a1f2:	1aff      	subs	r7, r7, r3
 800a1f4:	1ad2      	subs	r2, r2, r3
 800a1f6:	9206      	str	r2, [sp, #24]
 800a1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a200:	b1f3      	cbz	r3, 800a240 <_dtoa_r+0x7c0>
 800a202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 80a9 	beq.w	800a35c <_dtoa_r+0x8dc>
 800a20a:	2c00      	cmp	r4, #0
 800a20c:	dd10      	ble.n	800a230 <_dtoa_r+0x7b0>
 800a20e:	4631      	mov	r1, r6
 800a210:	4622      	mov	r2, r4
 800a212:	4628      	mov	r0, r5
 800a214:	f000 fcee 	bl	800abf4 <__pow5mult>
 800a218:	4652      	mov	r2, sl
 800a21a:	4601      	mov	r1, r0
 800a21c:	4606      	mov	r6, r0
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 fc44 	bl	800aaac <__multiply>
 800a224:	4680      	mov	r8, r0
 800a226:	4651      	mov	r1, sl
 800a228:	4628      	mov	r0, r5
 800a22a:	f000 fb6f 	bl	800a90c <_Bfree>
 800a22e:	46c2      	mov	sl, r8
 800a230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a232:	1b1a      	subs	r2, r3, r4
 800a234:	d004      	beq.n	800a240 <_dtoa_r+0x7c0>
 800a236:	4651      	mov	r1, sl
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 fcdb 	bl	800abf4 <__pow5mult>
 800a23e:	4682      	mov	sl, r0
 800a240:	2101      	movs	r1, #1
 800a242:	4628      	mov	r0, r5
 800a244:	f000 fc1c 	bl	800aa80 <__i2b>
 800a248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a24a:	4604      	mov	r4, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f340 8087 	ble.w	800a360 <_dtoa_r+0x8e0>
 800a252:	461a      	mov	r2, r3
 800a254:	4601      	mov	r1, r0
 800a256:	4628      	mov	r0, r5
 800a258:	f000 fccc 	bl	800abf4 <__pow5mult>
 800a25c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a25e:	4604      	mov	r4, r0
 800a260:	2b01      	cmp	r3, #1
 800a262:	f340 8080 	ble.w	800a366 <_dtoa_r+0x8e6>
 800a266:	f04f 0800 	mov.w	r8, #0
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a270:	6918      	ldr	r0, [r3, #16]
 800a272:	f000 fbb7 	bl	800a9e4 <__hi0bits>
 800a276:	f1c0 0020 	rsb	r0, r0, #32
 800a27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27c:	4418      	add	r0, r3
 800a27e:	f010 001f 	ands.w	r0, r0, #31
 800a282:	f000 8092 	beq.w	800a3aa <_dtoa_r+0x92a>
 800a286:	f1c0 0320 	rsb	r3, r0, #32
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	f340 808a 	ble.w	800a3a4 <_dtoa_r+0x924>
 800a290:	f1c0 001c 	rsb	r0, r0, #28
 800a294:	9b06      	ldr	r3, [sp, #24]
 800a296:	4407      	add	r7, r0
 800a298:	4403      	add	r3, r0
 800a29a:	9306      	str	r3, [sp, #24]
 800a29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a29e:	4403      	add	r3, r0
 800a2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dd05      	ble.n	800a2b4 <_dtoa_r+0x834>
 800a2a8:	4651      	mov	r1, sl
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f000 fcfb 	bl	800aca8 <__lshift>
 800a2b2:	4682      	mov	sl, r0
 800a2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dd05      	ble.n	800a2c6 <_dtoa_r+0x846>
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 fcf2 	bl	800aca8 <__lshift>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d070      	beq.n	800a3ae <_dtoa_r+0x92e>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	f000 fd56 	bl	800ad80 <__mcmp>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	da6a      	bge.n	800a3ae <_dtoa_r+0x92e>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4651      	mov	r1, sl
 800a2dc:	220a      	movs	r2, #10
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 fb36 	bl	800a950 <__multadd>
 800a2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e6:	4682      	mov	sl, r0
 800a2e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 8193 	beq.w	800a618 <_dtoa_r+0xb98>
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	220a      	movs	r2, #10
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f000 fb29 	bl	800a950 <__multadd>
 800a2fe:	f1bb 0f00 	cmp.w	fp, #0
 800a302:	4606      	mov	r6, r0
 800a304:	f300 8093 	bgt.w	800a42e <_dtoa_r+0x9ae>
 800a308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	dc57      	bgt.n	800a3be <_dtoa_r+0x93e>
 800a30e:	e08e      	b.n	800a42e <_dtoa_r+0x9ae>
 800a310:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a312:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a316:	e756      	b.n	800a1c6 <_dtoa_r+0x746>
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	1e5c      	subs	r4, r3, #1
 800a31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31e:	42a3      	cmp	r3, r4
 800a320:	bfb7      	itett	lt
 800a322:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a324:	1b1c      	subge	r4, r3, r4
 800a326:	1ae2      	sublt	r2, r4, r3
 800a328:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a32a:	bfbe      	ittt	lt
 800a32c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a32e:	189b      	addlt	r3, r3, r2
 800a330:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	bfb8      	it	lt
 800a336:	2400      	movlt	r4, #0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfbb      	ittet	lt
 800a33c:	9b06      	ldrlt	r3, [sp, #24]
 800a33e:	9a02      	ldrlt	r2, [sp, #8]
 800a340:	9f06      	ldrge	r7, [sp, #24]
 800a342:	1a9f      	sublt	r7, r3, r2
 800a344:	bfac      	ite	ge
 800a346:	9b02      	ldrge	r3, [sp, #8]
 800a348:	2300      	movlt	r3, #0
 800a34a:	e73e      	b.n	800a1ca <_dtoa_r+0x74a>
 800a34c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a34e:	9f06      	ldr	r7, [sp, #24]
 800a350:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a352:	e745      	b.n	800a1e0 <_dtoa_r+0x760>
 800a354:	3fe00000 	.word	0x3fe00000
 800a358:	40240000 	.word	0x40240000
 800a35c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a35e:	e76a      	b.n	800a236 <_dtoa_r+0x7b6>
 800a360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a362:	2b01      	cmp	r3, #1
 800a364:	dc19      	bgt.n	800a39a <_dtoa_r+0x91a>
 800a366:	9b04      	ldr	r3, [sp, #16]
 800a368:	b9bb      	cbnz	r3, 800a39a <_dtoa_r+0x91a>
 800a36a:	9b05      	ldr	r3, [sp, #20]
 800a36c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a370:	b99b      	cbnz	r3, 800a39a <_dtoa_r+0x91a>
 800a372:	9b05      	ldr	r3, [sp, #20]
 800a374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a378:	0d1b      	lsrs	r3, r3, #20
 800a37a:	051b      	lsls	r3, r3, #20
 800a37c:	b183      	cbz	r3, 800a3a0 <_dtoa_r+0x920>
 800a37e:	f04f 0801 	mov.w	r8, #1
 800a382:	9b06      	ldr	r3, [sp, #24]
 800a384:	3301      	adds	r3, #1
 800a386:	9306      	str	r3, [sp, #24]
 800a388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a38a:	3301      	adds	r3, #1
 800a38c:	9309      	str	r3, [sp, #36]	; 0x24
 800a38e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a390:	2b00      	cmp	r3, #0
 800a392:	f47f af6a 	bne.w	800a26a <_dtoa_r+0x7ea>
 800a396:	2001      	movs	r0, #1
 800a398:	e76f      	b.n	800a27a <_dtoa_r+0x7fa>
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	e7f6      	b.n	800a38e <_dtoa_r+0x90e>
 800a3a0:	4698      	mov	r8, r3
 800a3a2:	e7f4      	b.n	800a38e <_dtoa_r+0x90e>
 800a3a4:	f43f af7d 	beq.w	800a2a2 <_dtoa_r+0x822>
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	301c      	adds	r0, #28
 800a3ac:	e772      	b.n	800a294 <_dtoa_r+0x814>
 800a3ae:	9b02      	ldr	r3, [sp, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dc36      	bgt.n	800a422 <_dtoa_r+0x9a2>
 800a3b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	dd33      	ble.n	800a422 <_dtoa_r+0x9a2>
 800a3ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a3be:	f1bb 0f00 	cmp.w	fp, #0
 800a3c2:	d10d      	bne.n	800a3e0 <_dtoa_r+0x960>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	465b      	mov	r3, fp
 800a3c8:	2205      	movs	r2, #5
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 fac0 	bl	800a950 <__multadd>
 800a3d0:	4601      	mov	r1, r0
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	f000 fcd3 	bl	800ad80 <__mcmp>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f73f adb6 	bgt.w	8009f4c <_dtoa_r+0x4cc>
 800a3e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3e2:	9f08      	ldr	r7, [sp, #32]
 800a3e4:	ea6f 0903 	mvn.w	r9, r3
 800a3e8:	f04f 0800 	mov.w	r8, #0
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 fa8c 	bl	800a90c <_Bfree>
 800a3f4:	2e00      	cmp	r6, #0
 800a3f6:	f43f aea4 	beq.w	800a142 <_dtoa_r+0x6c2>
 800a3fa:	f1b8 0f00 	cmp.w	r8, #0
 800a3fe:	d005      	beq.n	800a40c <_dtoa_r+0x98c>
 800a400:	45b0      	cmp	r8, r6
 800a402:	d003      	beq.n	800a40c <_dtoa_r+0x98c>
 800a404:	4641      	mov	r1, r8
 800a406:	4628      	mov	r0, r5
 800a408:	f000 fa80 	bl	800a90c <_Bfree>
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fa7c 	bl	800a90c <_Bfree>
 800a414:	e695      	b.n	800a142 <_dtoa_r+0x6c2>
 800a416:	2400      	movs	r4, #0
 800a418:	4626      	mov	r6, r4
 800a41a:	e7e1      	b.n	800a3e0 <_dtoa_r+0x960>
 800a41c:	46c1      	mov	r9, r8
 800a41e:	4626      	mov	r6, r4
 800a420:	e594      	b.n	8009f4c <_dtoa_r+0x4cc>
 800a422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a424:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 80fc 	beq.w	800a626 <_dtoa_r+0xba6>
 800a42e:	2f00      	cmp	r7, #0
 800a430:	dd05      	ble.n	800a43e <_dtoa_r+0x9be>
 800a432:	4631      	mov	r1, r6
 800a434:	463a      	mov	r2, r7
 800a436:	4628      	mov	r0, r5
 800a438:	f000 fc36 	bl	800aca8 <__lshift>
 800a43c:	4606      	mov	r6, r0
 800a43e:	f1b8 0f00 	cmp.w	r8, #0
 800a442:	d05c      	beq.n	800a4fe <_dtoa_r+0xa7e>
 800a444:	4628      	mov	r0, r5
 800a446:	6871      	ldr	r1, [r6, #4]
 800a448:	f000 fa20 	bl	800a88c <_Balloc>
 800a44c:	4607      	mov	r7, r0
 800a44e:	b928      	cbnz	r0, 800a45c <_dtoa_r+0x9dc>
 800a450:	4602      	mov	r2, r0
 800a452:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a456:	4b7e      	ldr	r3, [pc, #504]	; (800a650 <_dtoa_r+0xbd0>)
 800a458:	f7ff bb26 	b.w	8009aa8 <_dtoa_r+0x28>
 800a45c:	6932      	ldr	r2, [r6, #16]
 800a45e:	f106 010c 	add.w	r1, r6, #12
 800a462:	3202      	adds	r2, #2
 800a464:	0092      	lsls	r2, r2, #2
 800a466:	300c      	adds	r0, #12
 800a468:	f7fe fcf0 	bl	8008e4c <memcpy>
 800a46c:	2201      	movs	r2, #1
 800a46e:	4639      	mov	r1, r7
 800a470:	4628      	mov	r0, r5
 800a472:	f000 fc19 	bl	800aca8 <__lshift>
 800a476:	46b0      	mov	r8, r6
 800a478:	4606      	mov	r6, r0
 800a47a:	9b08      	ldr	r3, [sp, #32]
 800a47c:	3301      	adds	r3, #1
 800a47e:	9302      	str	r3, [sp, #8]
 800a480:	9b08      	ldr	r3, [sp, #32]
 800a482:	445b      	add	r3, fp
 800a484:	930a      	str	r3, [sp, #40]	; 0x28
 800a486:	9b04      	ldr	r3, [sp, #16]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	9309      	str	r3, [sp, #36]	; 0x24
 800a48e:	9b02      	ldr	r3, [sp, #8]
 800a490:	4621      	mov	r1, r4
 800a492:	4650      	mov	r0, sl
 800a494:	f103 3bff 	add.w	fp, r3, #4294967295
 800a498:	f7ff fa62 	bl	8009960 <quorem>
 800a49c:	4603      	mov	r3, r0
 800a49e:	4641      	mov	r1, r8
 800a4a0:	3330      	adds	r3, #48	; 0x30
 800a4a2:	9004      	str	r0, [sp, #16]
 800a4a4:	4650      	mov	r0, sl
 800a4a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4a8:	f000 fc6a 	bl	800ad80 <__mcmp>
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	9006      	str	r0, [sp, #24]
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f000 fc80 	bl	800adb8 <__mdiff>
 800a4b8:	68c2      	ldr	r2, [r0, #12]
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4be:	bb02      	cbnz	r2, 800a502 <_dtoa_r+0xa82>
 800a4c0:	4601      	mov	r1, r0
 800a4c2:	4650      	mov	r0, sl
 800a4c4:	f000 fc5c 	bl	800ad80 <__mcmp>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a4d4:	f000 fa1a 	bl	800a90c <_Bfree>
 800a4d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4dc:	9f02      	ldr	r7, [sp, #8]
 800a4de:	ea43 0102 	orr.w	r1, r3, r2
 800a4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e4:	430b      	orrs	r3, r1
 800a4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e8:	d10d      	bne.n	800a506 <_dtoa_r+0xa86>
 800a4ea:	2b39      	cmp	r3, #57	; 0x39
 800a4ec:	d027      	beq.n	800a53e <_dtoa_r+0xabe>
 800a4ee:	9a06      	ldr	r2, [sp, #24]
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	dd01      	ble.n	800a4f8 <_dtoa_r+0xa78>
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	3331      	adds	r3, #49	; 0x31
 800a4f8:	f88b 3000 	strb.w	r3, [fp]
 800a4fc:	e776      	b.n	800a3ec <_dtoa_r+0x96c>
 800a4fe:	4630      	mov	r0, r6
 800a500:	e7b9      	b.n	800a476 <_dtoa_r+0x9f6>
 800a502:	2201      	movs	r2, #1
 800a504:	e7e2      	b.n	800a4cc <_dtoa_r+0xa4c>
 800a506:	9906      	ldr	r1, [sp, #24]
 800a508:	2900      	cmp	r1, #0
 800a50a:	db04      	blt.n	800a516 <_dtoa_r+0xa96>
 800a50c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a50e:	4301      	orrs	r1, r0
 800a510:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a512:	4301      	orrs	r1, r0
 800a514:	d120      	bne.n	800a558 <_dtoa_r+0xad8>
 800a516:	2a00      	cmp	r2, #0
 800a518:	ddee      	ble.n	800a4f8 <_dtoa_r+0xa78>
 800a51a:	4651      	mov	r1, sl
 800a51c:	2201      	movs	r2, #1
 800a51e:	4628      	mov	r0, r5
 800a520:	9302      	str	r3, [sp, #8]
 800a522:	f000 fbc1 	bl	800aca8 <__lshift>
 800a526:	4621      	mov	r1, r4
 800a528:	4682      	mov	sl, r0
 800a52a:	f000 fc29 	bl	800ad80 <__mcmp>
 800a52e:	2800      	cmp	r0, #0
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	dc02      	bgt.n	800a53a <_dtoa_r+0xaba>
 800a534:	d1e0      	bne.n	800a4f8 <_dtoa_r+0xa78>
 800a536:	07da      	lsls	r2, r3, #31
 800a538:	d5de      	bpl.n	800a4f8 <_dtoa_r+0xa78>
 800a53a:	2b39      	cmp	r3, #57	; 0x39
 800a53c:	d1da      	bne.n	800a4f4 <_dtoa_r+0xa74>
 800a53e:	2339      	movs	r3, #57	; 0x39
 800a540:	f88b 3000 	strb.w	r3, [fp]
 800a544:	463b      	mov	r3, r7
 800a546:	461f      	mov	r7, r3
 800a548:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	2a39      	cmp	r2, #57	; 0x39
 800a550:	d050      	beq.n	800a5f4 <_dtoa_r+0xb74>
 800a552:	3201      	adds	r2, #1
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e749      	b.n	800a3ec <_dtoa_r+0x96c>
 800a558:	2a00      	cmp	r2, #0
 800a55a:	dd03      	ble.n	800a564 <_dtoa_r+0xae4>
 800a55c:	2b39      	cmp	r3, #57	; 0x39
 800a55e:	d0ee      	beq.n	800a53e <_dtoa_r+0xabe>
 800a560:	3301      	adds	r3, #1
 800a562:	e7c9      	b.n	800a4f8 <_dtoa_r+0xa78>
 800a564:	9a02      	ldr	r2, [sp, #8]
 800a566:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a568:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a56c:	428a      	cmp	r2, r1
 800a56e:	d02a      	beq.n	800a5c6 <_dtoa_r+0xb46>
 800a570:	4651      	mov	r1, sl
 800a572:	2300      	movs	r3, #0
 800a574:	220a      	movs	r2, #10
 800a576:	4628      	mov	r0, r5
 800a578:	f000 f9ea 	bl	800a950 <__multadd>
 800a57c:	45b0      	cmp	r8, r6
 800a57e:	4682      	mov	sl, r0
 800a580:	f04f 0300 	mov.w	r3, #0
 800a584:	f04f 020a 	mov.w	r2, #10
 800a588:	4641      	mov	r1, r8
 800a58a:	4628      	mov	r0, r5
 800a58c:	d107      	bne.n	800a59e <_dtoa_r+0xb1e>
 800a58e:	f000 f9df 	bl	800a950 <__multadd>
 800a592:	4680      	mov	r8, r0
 800a594:	4606      	mov	r6, r0
 800a596:	9b02      	ldr	r3, [sp, #8]
 800a598:	3301      	adds	r3, #1
 800a59a:	9302      	str	r3, [sp, #8]
 800a59c:	e777      	b.n	800a48e <_dtoa_r+0xa0e>
 800a59e:	f000 f9d7 	bl	800a950 <__multadd>
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4680      	mov	r8, r0
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 f9d0 	bl	800a950 <__multadd>
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	e7f0      	b.n	800a596 <_dtoa_r+0xb16>
 800a5b4:	f1bb 0f00 	cmp.w	fp, #0
 800a5b8:	bfcc      	ite	gt
 800a5ba:	465f      	movgt	r7, fp
 800a5bc:	2701      	movle	r7, #1
 800a5be:	f04f 0800 	mov.w	r8, #0
 800a5c2:	9a08      	ldr	r2, [sp, #32]
 800a5c4:	4417      	add	r7, r2
 800a5c6:	4651      	mov	r1, sl
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	9302      	str	r3, [sp, #8]
 800a5ce:	f000 fb6b 	bl	800aca8 <__lshift>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	f000 fbd3 	bl	800ad80 <__mcmp>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	dcb2      	bgt.n	800a544 <_dtoa_r+0xac4>
 800a5de:	d102      	bne.n	800a5e6 <_dtoa_r+0xb66>
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	07db      	lsls	r3, r3, #31
 800a5e4:	d4ae      	bmi.n	800a544 <_dtoa_r+0xac4>
 800a5e6:	463b      	mov	r3, r7
 800a5e8:	461f      	mov	r7, r3
 800a5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5ee:	2a30      	cmp	r2, #48	; 0x30
 800a5f0:	d0fa      	beq.n	800a5e8 <_dtoa_r+0xb68>
 800a5f2:	e6fb      	b.n	800a3ec <_dtoa_r+0x96c>
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d1a5      	bne.n	800a546 <_dtoa_r+0xac6>
 800a5fa:	2331      	movs	r3, #49	; 0x31
 800a5fc:	f109 0901 	add.w	r9, r9, #1
 800a600:	7013      	strb	r3, [r2, #0]
 800a602:	e6f3      	b.n	800a3ec <_dtoa_r+0x96c>
 800a604:	4b13      	ldr	r3, [pc, #76]	; (800a654 <_dtoa_r+0xbd4>)
 800a606:	f7ff baa7 	b.w	8009b58 <_dtoa_r+0xd8>
 800a60a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f47f aa80 	bne.w	8009b12 <_dtoa_r+0x92>
 800a612:	4b11      	ldr	r3, [pc, #68]	; (800a658 <_dtoa_r+0xbd8>)
 800a614:	f7ff baa0 	b.w	8009b58 <_dtoa_r+0xd8>
 800a618:	f1bb 0f00 	cmp.w	fp, #0
 800a61c:	dc03      	bgt.n	800a626 <_dtoa_r+0xba6>
 800a61e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a620:	2b02      	cmp	r3, #2
 800a622:	f73f aecc 	bgt.w	800a3be <_dtoa_r+0x93e>
 800a626:	9f08      	ldr	r7, [sp, #32]
 800a628:	4621      	mov	r1, r4
 800a62a:	4650      	mov	r0, sl
 800a62c:	f7ff f998 	bl	8009960 <quorem>
 800a630:	9a08      	ldr	r2, [sp, #32]
 800a632:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a636:	f807 3b01 	strb.w	r3, [r7], #1
 800a63a:	1aba      	subs	r2, r7, r2
 800a63c:	4593      	cmp	fp, r2
 800a63e:	ddb9      	ble.n	800a5b4 <_dtoa_r+0xb34>
 800a640:	4651      	mov	r1, sl
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	4628      	mov	r0, r5
 800a648:	f000 f982 	bl	800a950 <__multadd>
 800a64c:	4682      	mov	sl, r0
 800a64e:	e7eb      	b.n	800a628 <_dtoa_r+0xba8>
 800a650:	0800b983 	.word	0x0800b983
 800a654:	0800b8dc 	.word	0x0800b8dc
 800a658:	0800b900 	.word	0x0800b900

0800a65c <std>:
 800a65c:	2300      	movs	r3, #0
 800a65e:	b510      	push	{r4, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	e9c0 3300 	strd	r3, r3, [r0]
 800a666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a66a:	6083      	str	r3, [r0, #8]
 800a66c:	8181      	strh	r1, [r0, #12]
 800a66e:	6643      	str	r3, [r0, #100]	; 0x64
 800a670:	81c2      	strh	r2, [r0, #14]
 800a672:	6183      	str	r3, [r0, #24]
 800a674:	4619      	mov	r1, r3
 800a676:	2208      	movs	r2, #8
 800a678:	305c      	adds	r0, #92	; 0x5c
 800a67a:	f7fe fc0f 	bl	8008e9c <memset>
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <std+0x38>)
 800a680:	6224      	str	r4, [r4, #32]
 800a682:	6263      	str	r3, [r4, #36]	; 0x24
 800a684:	4b04      	ldr	r3, [pc, #16]	; (800a698 <std+0x3c>)
 800a686:	62a3      	str	r3, [r4, #40]	; 0x28
 800a688:	4b04      	ldr	r3, [pc, #16]	; (800a69c <std+0x40>)
 800a68a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a68c:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <std+0x44>)
 800a68e:	6323      	str	r3, [r4, #48]	; 0x30
 800a690:	bd10      	pop	{r4, pc}
 800a692:	bf00      	nop
 800a694:	0800b25d 	.word	0x0800b25d
 800a698:	0800b27f 	.word	0x0800b27f
 800a69c:	0800b2b7 	.word	0x0800b2b7
 800a6a0:	0800b2db 	.word	0x0800b2db

0800a6a4 <_cleanup_r>:
 800a6a4:	4901      	ldr	r1, [pc, #4]	; (800a6ac <_cleanup_r+0x8>)
 800a6a6:	f000 b8af 	b.w	800a808 <_fwalk_reent>
 800a6aa:	bf00      	nop
 800a6ac:	0800b5f1 	.word	0x0800b5f1

0800a6b0 <__sfmoreglue>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	2568      	movs	r5, #104	; 0x68
 800a6b4:	1e4a      	subs	r2, r1, #1
 800a6b6:	4355      	muls	r5, r2
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6be:	f7fe fc41 	bl	8008f44 <_malloc_r>
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	b140      	cbz	r0, 800a6d8 <__sfmoreglue+0x28>
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	e9c0 1600 	strd	r1, r6, [r0]
 800a6cc:	300c      	adds	r0, #12
 800a6ce:	60a0      	str	r0, [r4, #8]
 800a6d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6d4:	f7fe fbe2 	bl	8008e9c <memset>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	bd70      	pop	{r4, r5, r6, pc}

0800a6dc <__sfp_lock_acquire>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	; (800a6e4 <__sfp_lock_acquire+0x8>)
 800a6de:	f000 b8b8 	b.w	800a852 <__retarget_lock_acquire_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	2000096c 	.word	0x2000096c

0800a6e8 <__sfp_lock_release>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__sfp_lock_release+0x8>)
 800a6ea:	f000 b8b3 	b.w	800a854 <__retarget_lock_release_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	2000096c 	.word	0x2000096c

0800a6f4 <__sinit_lock_acquire>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__sinit_lock_acquire+0x8>)
 800a6f6:	f000 b8ac 	b.w	800a852 <__retarget_lock_acquire_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	20000967 	.word	0x20000967

0800a700 <__sinit_lock_release>:
 800a700:	4801      	ldr	r0, [pc, #4]	; (800a708 <__sinit_lock_release+0x8>)
 800a702:	f000 b8a7 	b.w	800a854 <__retarget_lock_release_recursive>
 800a706:	bf00      	nop
 800a708:	20000967 	.word	0x20000967

0800a70c <__sinit>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	4604      	mov	r4, r0
 800a710:	f7ff fff0 	bl	800a6f4 <__sinit_lock_acquire>
 800a714:	69a3      	ldr	r3, [r4, #24]
 800a716:	b11b      	cbz	r3, 800a720 <__sinit+0x14>
 800a718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a71c:	f7ff bff0 	b.w	800a700 <__sinit_lock_release>
 800a720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a724:	6523      	str	r3, [r4, #80]	; 0x50
 800a726:	4b13      	ldr	r3, [pc, #76]	; (800a774 <__sinit+0x68>)
 800a728:	4a13      	ldr	r2, [pc, #76]	; (800a778 <__sinit+0x6c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a72e:	42a3      	cmp	r3, r4
 800a730:	bf08      	it	eq
 800a732:	2301      	moveq	r3, #1
 800a734:	4620      	mov	r0, r4
 800a736:	bf08      	it	eq
 800a738:	61a3      	streq	r3, [r4, #24]
 800a73a:	f000 f81f 	bl	800a77c <__sfp>
 800a73e:	6060      	str	r0, [r4, #4]
 800a740:	4620      	mov	r0, r4
 800a742:	f000 f81b 	bl	800a77c <__sfp>
 800a746:	60a0      	str	r0, [r4, #8]
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 f817 	bl	800a77c <__sfp>
 800a74e:	2200      	movs	r2, #0
 800a750:	2104      	movs	r1, #4
 800a752:	60e0      	str	r0, [r4, #12]
 800a754:	6860      	ldr	r0, [r4, #4]
 800a756:	f7ff ff81 	bl	800a65c <std>
 800a75a:	2201      	movs	r2, #1
 800a75c:	2109      	movs	r1, #9
 800a75e:	68a0      	ldr	r0, [r4, #8]
 800a760:	f7ff ff7c 	bl	800a65c <std>
 800a764:	2202      	movs	r2, #2
 800a766:	2112      	movs	r1, #18
 800a768:	68e0      	ldr	r0, [r4, #12]
 800a76a:	f7ff ff77 	bl	800a65c <std>
 800a76e:	2301      	movs	r3, #1
 800a770:	61a3      	str	r3, [r4, #24]
 800a772:	e7d1      	b.n	800a718 <__sinit+0xc>
 800a774:	0800b8c8 	.word	0x0800b8c8
 800a778:	0800a6a5 	.word	0x0800a6a5

0800a77c <__sfp>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	4607      	mov	r7, r0
 800a780:	f7ff ffac 	bl	800a6dc <__sfp_lock_acquire>
 800a784:	4b1e      	ldr	r3, [pc, #120]	; (800a800 <__sfp+0x84>)
 800a786:	681e      	ldr	r6, [r3, #0]
 800a788:	69b3      	ldr	r3, [r6, #24]
 800a78a:	b913      	cbnz	r3, 800a792 <__sfp+0x16>
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff ffbd 	bl	800a70c <__sinit>
 800a792:	3648      	adds	r6, #72	; 0x48
 800a794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a798:	3b01      	subs	r3, #1
 800a79a:	d503      	bpl.n	800a7a4 <__sfp+0x28>
 800a79c:	6833      	ldr	r3, [r6, #0]
 800a79e:	b30b      	cbz	r3, 800a7e4 <__sfp+0x68>
 800a7a0:	6836      	ldr	r6, [r6, #0]
 800a7a2:	e7f7      	b.n	800a794 <__sfp+0x18>
 800a7a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7a8:	b9d5      	cbnz	r5, 800a7e0 <__sfp+0x64>
 800a7aa:	4b16      	ldr	r3, [pc, #88]	; (800a804 <__sfp+0x88>)
 800a7ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7b0:	60e3      	str	r3, [r4, #12]
 800a7b2:	6665      	str	r5, [r4, #100]	; 0x64
 800a7b4:	f000 f84c 	bl	800a850 <__retarget_lock_init_recursive>
 800a7b8:	f7ff ff96 	bl	800a6e8 <__sfp_lock_release>
 800a7bc:	2208      	movs	r2, #8
 800a7be:	4629      	mov	r1, r5
 800a7c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7c8:	6025      	str	r5, [r4, #0]
 800a7ca:	61a5      	str	r5, [r4, #24]
 800a7cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7d0:	f7fe fb64 	bl	8008e9c <memset>
 800a7d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7dc:	4620      	mov	r0, r4
 800a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e0:	3468      	adds	r4, #104	; 0x68
 800a7e2:	e7d9      	b.n	800a798 <__sfp+0x1c>
 800a7e4:	2104      	movs	r1, #4
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f7ff ff62 	bl	800a6b0 <__sfmoreglue>
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	6030      	str	r0, [r6, #0]
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1d5      	bne.n	800a7a0 <__sfp+0x24>
 800a7f4:	f7ff ff78 	bl	800a6e8 <__sfp_lock_release>
 800a7f8:	230c      	movs	r3, #12
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	e7ee      	b.n	800a7dc <__sfp+0x60>
 800a7fe:	bf00      	nop
 800a800:	0800b8c8 	.word	0x0800b8c8
 800a804:	ffff0001 	.word	0xffff0001

0800a808 <_fwalk_reent>:
 800a808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a80c:	4606      	mov	r6, r0
 800a80e:	4688      	mov	r8, r1
 800a810:	2700      	movs	r7, #0
 800a812:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a81a:	f1b9 0901 	subs.w	r9, r9, #1
 800a81e:	d505      	bpl.n	800a82c <_fwalk_reent+0x24>
 800a820:	6824      	ldr	r4, [r4, #0]
 800a822:	2c00      	cmp	r4, #0
 800a824:	d1f7      	bne.n	800a816 <_fwalk_reent+0xe>
 800a826:	4638      	mov	r0, r7
 800a828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a82c:	89ab      	ldrh	r3, [r5, #12]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d907      	bls.n	800a842 <_fwalk_reent+0x3a>
 800a832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a836:	3301      	adds	r3, #1
 800a838:	d003      	beq.n	800a842 <_fwalk_reent+0x3a>
 800a83a:	4629      	mov	r1, r5
 800a83c:	4630      	mov	r0, r6
 800a83e:	47c0      	blx	r8
 800a840:	4307      	orrs	r7, r0
 800a842:	3568      	adds	r5, #104	; 0x68
 800a844:	e7e9      	b.n	800a81a <_fwalk_reent+0x12>
	...

0800a848 <_localeconv_r>:
 800a848:	4800      	ldr	r0, [pc, #0]	; (800a84c <_localeconv_r+0x4>)
 800a84a:	4770      	bx	lr
 800a84c:	20000160 	.word	0x20000160

0800a850 <__retarget_lock_init_recursive>:
 800a850:	4770      	bx	lr

0800a852 <__retarget_lock_acquire_recursive>:
 800a852:	4770      	bx	lr

0800a854 <__retarget_lock_release_recursive>:
 800a854:	4770      	bx	lr

0800a856 <memchr>:
 800a856:	4603      	mov	r3, r0
 800a858:	b510      	push	{r4, lr}
 800a85a:	b2c9      	uxtb	r1, r1
 800a85c:	4402      	add	r2, r0
 800a85e:	4293      	cmp	r3, r2
 800a860:	4618      	mov	r0, r3
 800a862:	d101      	bne.n	800a868 <memchr+0x12>
 800a864:	2000      	movs	r0, #0
 800a866:	e003      	b.n	800a870 <memchr+0x1a>
 800a868:	7804      	ldrb	r4, [r0, #0]
 800a86a:	3301      	adds	r3, #1
 800a86c:	428c      	cmp	r4, r1
 800a86e:	d1f6      	bne.n	800a85e <memchr+0x8>
 800a870:	bd10      	pop	{r4, pc}
	...

0800a874 <__malloc_lock>:
 800a874:	4801      	ldr	r0, [pc, #4]	; (800a87c <__malloc_lock+0x8>)
 800a876:	f7ff bfec 	b.w	800a852 <__retarget_lock_acquire_recursive>
 800a87a:	bf00      	nop
 800a87c:	20000968 	.word	0x20000968

0800a880 <__malloc_unlock>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__malloc_unlock+0x8>)
 800a882:	f7ff bfe7 	b.w	800a854 <__retarget_lock_release_recursive>
 800a886:	bf00      	nop
 800a888:	20000968 	.word	0x20000968

0800a88c <_Balloc>:
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a890:	4604      	mov	r4, r0
 800a892:	460d      	mov	r5, r1
 800a894:	b976      	cbnz	r6, 800a8b4 <_Balloc+0x28>
 800a896:	2010      	movs	r0, #16
 800a898:	f7fe fac8 	bl	8008e2c <malloc>
 800a89c:	4602      	mov	r2, r0
 800a89e:	6260      	str	r0, [r4, #36]	; 0x24
 800a8a0:	b920      	cbnz	r0, 800a8ac <_Balloc+0x20>
 800a8a2:	2166      	movs	r1, #102	; 0x66
 800a8a4:	4b17      	ldr	r3, [pc, #92]	; (800a904 <_Balloc+0x78>)
 800a8a6:	4818      	ldr	r0, [pc, #96]	; (800a908 <_Balloc+0x7c>)
 800a8a8:	f000 fdee 	bl	800b488 <__assert_func>
 800a8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8b0:	6006      	str	r6, [r0, #0]
 800a8b2:	60c6      	str	r6, [r0, #12]
 800a8b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8b6:	68f3      	ldr	r3, [r6, #12]
 800a8b8:	b183      	cbz	r3, 800a8dc <_Balloc+0x50>
 800a8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8c2:	b9b8      	cbnz	r0, 800a8f4 <_Balloc+0x68>
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	fa01 f605 	lsl.w	r6, r1, r5
 800a8ca:	1d72      	adds	r2, r6, #5
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	0092      	lsls	r2, r2, #2
 800a8d0:	f000 fb5e 	bl	800af90 <_calloc_r>
 800a8d4:	b160      	cbz	r0, 800a8f0 <_Balloc+0x64>
 800a8d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8da:	e00e      	b.n	800a8fa <_Balloc+0x6e>
 800a8dc:	2221      	movs	r2, #33	; 0x21
 800a8de:	2104      	movs	r1, #4
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fb55 	bl	800af90 <_calloc_r>
 800a8e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e8:	60f0      	str	r0, [r6, #12]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1e4      	bne.n	800a8ba <_Balloc+0x2e>
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	6802      	ldr	r2, [r0, #0]
 800a8f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a900:	e7f7      	b.n	800a8f2 <_Balloc+0x66>
 800a902:	bf00      	nop
 800a904:	0800b90d 	.word	0x0800b90d
 800a908:	0800b9f4 	.word	0x0800b9f4

0800a90c <_Bfree>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a910:	4605      	mov	r5, r0
 800a912:	460c      	mov	r4, r1
 800a914:	b976      	cbnz	r6, 800a934 <_Bfree+0x28>
 800a916:	2010      	movs	r0, #16
 800a918:	f7fe fa88 	bl	8008e2c <malloc>
 800a91c:	4602      	mov	r2, r0
 800a91e:	6268      	str	r0, [r5, #36]	; 0x24
 800a920:	b920      	cbnz	r0, 800a92c <_Bfree+0x20>
 800a922:	218a      	movs	r1, #138	; 0x8a
 800a924:	4b08      	ldr	r3, [pc, #32]	; (800a948 <_Bfree+0x3c>)
 800a926:	4809      	ldr	r0, [pc, #36]	; (800a94c <_Bfree+0x40>)
 800a928:	f000 fdae 	bl	800b488 <__assert_func>
 800a92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a930:	6006      	str	r6, [r0, #0]
 800a932:	60c6      	str	r6, [r0, #12]
 800a934:	b13c      	cbz	r4, 800a946 <_Bfree+0x3a>
 800a936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a938:	6862      	ldr	r2, [r4, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a940:	6021      	str	r1, [r4, #0]
 800a942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	0800b90d 	.word	0x0800b90d
 800a94c:	0800b9f4 	.word	0x0800b9f4

0800a950 <__multadd>:
 800a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a954:	4698      	mov	r8, r3
 800a956:	460c      	mov	r4, r1
 800a958:	2300      	movs	r3, #0
 800a95a:	690e      	ldr	r6, [r1, #16]
 800a95c:	4607      	mov	r7, r0
 800a95e:	f101 0014 	add.w	r0, r1, #20
 800a962:	6805      	ldr	r5, [r0, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	b2a9      	uxth	r1, r5
 800a968:	fb02 8101 	mla	r1, r2, r1, r8
 800a96c:	0c2d      	lsrs	r5, r5, #16
 800a96e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a972:	fb02 c505 	mla	r5, r2, r5, ip
 800a976:	b289      	uxth	r1, r1
 800a978:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a97c:	429e      	cmp	r6, r3
 800a97e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a982:	f840 1b04 	str.w	r1, [r0], #4
 800a986:	dcec      	bgt.n	800a962 <__multadd+0x12>
 800a988:	f1b8 0f00 	cmp.w	r8, #0
 800a98c:	d022      	beq.n	800a9d4 <__multadd+0x84>
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	42b3      	cmp	r3, r6
 800a992:	dc19      	bgt.n	800a9c8 <__multadd+0x78>
 800a994:	6861      	ldr	r1, [r4, #4]
 800a996:	4638      	mov	r0, r7
 800a998:	3101      	adds	r1, #1
 800a99a:	f7ff ff77 	bl	800a88c <_Balloc>
 800a99e:	4605      	mov	r5, r0
 800a9a0:	b928      	cbnz	r0, 800a9ae <__multadd+0x5e>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	21b5      	movs	r1, #181	; 0xb5
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <__multadd+0x8c>)
 800a9a8:	480d      	ldr	r0, [pc, #52]	; (800a9e0 <__multadd+0x90>)
 800a9aa:	f000 fd6d 	bl	800b488 <__assert_func>
 800a9ae:	6922      	ldr	r2, [r4, #16]
 800a9b0:	f104 010c 	add.w	r1, r4, #12
 800a9b4:	3202      	adds	r2, #2
 800a9b6:	0092      	lsls	r2, r2, #2
 800a9b8:	300c      	adds	r0, #12
 800a9ba:	f7fe fa47 	bl	8008e4c <memcpy>
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f7ff ffa3 	bl	800a90c <_Bfree>
 800a9c6:	462c      	mov	r4, r5
 800a9c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a9cc:	3601      	adds	r6, #1
 800a9ce:	f8c3 8014 	str.w	r8, [r3, #20]
 800a9d2:	6126      	str	r6, [r4, #16]
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9da:	bf00      	nop
 800a9dc:	0800b983 	.word	0x0800b983
 800a9e0:	0800b9f4 	.word	0x0800b9f4

0800a9e4 <__hi0bits>:
 800a9e4:	0c02      	lsrs	r2, r0, #16
 800a9e6:	0412      	lsls	r2, r2, #16
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	b9ca      	cbnz	r2, 800aa20 <__hi0bits+0x3c>
 800a9ec:	0403      	lsls	r3, r0, #16
 800a9ee:	2010      	movs	r0, #16
 800a9f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a9f4:	bf04      	itt	eq
 800a9f6:	021b      	lsleq	r3, r3, #8
 800a9f8:	3008      	addeq	r0, #8
 800a9fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a9fe:	bf04      	itt	eq
 800aa00:	011b      	lsleq	r3, r3, #4
 800aa02:	3004      	addeq	r0, #4
 800aa04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aa08:	bf04      	itt	eq
 800aa0a:	009b      	lsleq	r3, r3, #2
 800aa0c:	3002      	addeq	r0, #2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	db05      	blt.n	800aa1e <__hi0bits+0x3a>
 800aa12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aa16:	f100 0001 	add.w	r0, r0, #1
 800aa1a:	bf08      	it	eq
 800aa1c:	2020      	moveq	r0, #32
 800aa1e:	4770      	bx	lr
 800aa20:	2000      	movs	r0, #0
 800aa22:	e7e5      	b.n	800a9f0 <__hi0bits+0xc>

0800aa24 <__lo0bits>:
 800aa24:	6803      	ldr	r3, [r0, #0]
 800aa26:	4602      	mov	r2, r0
 800aa28:	f013 0007 	ands.w	r0, r3, #7
 800aa2c:	d00b      	beq.n	800aa46 <__lo0bits+0x22>
 800aa2e:	07d9      	lsls	r1, r3, #31
 800aa30:	d422      	bmi.n	800aa78 <__lo0bits+0x54>
 800aa32:	0798      	lsls	r0, r3, #30
 800aa34:	bf49      	itett	mi
 800aa36:	085b      	lsrmi	r3, r3, #1
 800aa38:	089b      	lsrpl	r3, r3, #2
 800aa3a:	2001      	movmi	r0, #1
 800aa3c:	6013      	strmi	r3, [r2, #0]
 800aa3e:	bf5c      	itt	pl
 800aa40:	2002      	movpl	r0, #2
 800aa42:	6013      	strpl	r3, [r2, #0]
 800aa44:	4770      	bx	lr
 800aa46:	b299      	uxth	r1, r3
 800aa48:	b909      	cbnz	r1, 800aa4e <__lo0bits+0x2a>
 800aa4a:	2010      	movs	r0, #16
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aa52:	bf04      	itt	eq
 800aa54:	0a1b      	lsreq	r3, r3, #8
 800aa56:	3008      	addeq	r0, #8
 800aa58:	0719      	lsls	r1, r3, #28
 800aa5a:	bf04      	itt	eq
 800aa5c:	091b      	lsreq	r3, r3, #4
 800aa5e:	3004      	addeq	r0, #4
 800aa60:	0799      	lsls	r1, r3, #30
 800aa62:	bf04      	itt	eq
 800aa64:	089b      	lsreq	r3, r3, #2
 800aa66:	3002      	addeq	r0, #2
 800aa68:	07d9      	lsls	r1, r3, #31
 800aa6a:	d403      	bmi.n	800aa74 <__lo0bits+0x50>
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	f100 0001 	add.w	r0, r0, #1
 800aa72:	d003      	beq.n	800aa7c <__lo0bits+0x58>
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	4770      	bx	lr
 800aa78:	2000      	movs	r0, #0
 800aa7a:	4770      	bx	lr
 800aa7c:	2020      	movs	r0, #32
 800aa7e:	4770      	bx	lr

0800aa80 <__i2b>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	460c      	mov	r4, r1
 800aa84:	2101      	movs	r1, #1
 800aa86:	f7ff ff01 	bl	800a88c <_Balloc>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	b928      	cbnz	r0, 800aa9a <__i2b+0x1a>
 800aa8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa92:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <__i2b+0x24>)
 800aa94:	4804      	ldr	r0, [pc, #16]	; (800aaa8 <__i2b+0x28>)
 800aa96:	f000 fcf7 	bl	800b488 <__assert_func>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	6144      	str	r4, [r0, #20]
 800aa9e:	6103      	str	r3, [r0, #16]
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	bf00      	nop
 800aaa4:	0800b983 	.word	0x0800b983
 800aaa8:	0800b9f4 	.word	0x0800b9f4

0800aaac <__multiply>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	4614      	mov	r4, r2
 800aab2:	690a      	ldr	r2, [r1, #16]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	460d      	mov	r5, r1
 800aab8:	429a      	cmp	r2, r3
 800aaba:	bfbe      	ittt	lt
 800aabc:	460b      	movlt	r3, r1
 800aabe:	4625      	movlt	r5, r4
 800aac0:	461c      	movlt	r4, r3
 800aac2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aac6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aaca:	68ab      	ldr	r3, [r5, #8]
 800aacc:	6869      	ldr	r1, [r5, #4]
 800aace:	eb0a 0709 	add.w	r7, sl, r9
 800aad2:	42bb      	cmp	r3, r7
 800aad4:	b085      	sub	sp, #20
 800aad6:	bfb8      	it	lt
 800aad8:	3101      	addlt	r1, #1
 800aada:	f7ff fed7 	bl	800a88c <_Balloc>
 800aade:	b930      	cbnz	r0, 800aaee <__multiply+0x42>
 800aae0:	4602      	mov	r2, r0
 800aae2:	f240 115d 	movw	r1, #349	; 0x15d
 800aae6:	4b41      	ldr	r3, [pc, #260]	; (800abec <__multiply+0x140>)
 800aae8:	4841      	ldr	r0, [pc, #260]	; (800abf0 <__multiply+0x144>)
 800aaea:	f000 fccd 	bl	800b488 <__assert_func>
 800aaee:	f100 0614 	add.w	r6, r0, #20
 800aaf2:	4633      	mov	r3, r6
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aafa:	4543      	cmp	r3, r8
 800aafc:	d31e      	bcc.n	800ab3c <__multiply+0x90>
 800aafe:	f105 0c14 	add.w	ip, r5, #20
 800ab02:	f104 0314 	add.w	r3, r4, #20
 800ab06:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ab0a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ab0e:	9202      	str	r2, [sp, #8]
 800ab10:	ebac 0205 	sub.w	r2, ip, r5
 800ab14:	3a15      	subs	r2, #21
 800ab16:	f022 0203 	bic.w	r2, r2, #3
 800ab1a:	3204      	adds	r2, #4
 800ab1c:	f105 0115 	add.w	r1, r5, #21
 800ab20:	458c      	cmp	ip, r1
 800ab22:	bf38      	it	cc
 800ab24:	2204      	movcc	r2, #4
 800ab26:	9201      	str	r2, [sp, #4]
 800ab28:	9a02      	ldr	r2, [sp, #8]
 800ab2a:	9303      	str	r3, [sp, #12]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d808      	bhi.n	800ab42 <__multiply+0x96>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	dc55      	bgt.n	800abe0 <__multiply+0x134>
 800ab34:	6107      	str	r7, [r0, #16]
 800ab36:	b005      	add	sp, #20
 800ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3c:	f843 2b04 	str.w	r2, [r3], #4
 800ab40:	e7db      	b.n	800aafa <__multiply+0x4e>
 800ab42:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab46:	f1ba 0f00 	cmp.w	sl, #0
 800ab4a:	d020      	beq.n	800ab8e <__multiply+0xe2>
 800ab4c:	46b1      	mov	r9, r6
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f105 0e14 	add.w	lr, r5, #20
 800ab54:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ab58:	f8d9 b000 	ldr.w	fp, [r9]
 800ab5c:	b2a1      	uxth	r1, r4
 800ab5e:	fa1f fb8b 	uxth.w	fp, fp
 800ab62:	fb0a b101 	mla	r1, sl, r1, fp
 800ab66:	4411      	add	r1, r2
 800ab68:	f8d9 2000 	ldr.w	r2, [r9]
 800ab6c:	0c24      	lsrs	r4, r4, #16
 800ab6e:	0c12      	lsrs	r2, r2, #16
 800ab70:	fb0a 2404 	mla	r4, sl, r4, r2
 800ab74:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ab78:	b289      	uxth	r1, r1
 800ab7a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab7e:	45f4      	cmp	ip, lr
 800ab80:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ab84:	f849 1b04 	str.w	r1, [r9], #4
 800ab88:	d8e4      	bhi.n	800ab54 <__multiply+0xa8>
 800ab8a:	9901      	ldr	r1, [sp, #4]
 800ab8c:	5072      	str	r2, [r6, r1]
 800ab8e:	9a03      	ldr	r2, [sp, #12]
 800ab90:	3304      	adds	r3, #4
 800ab92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab96:	f1b9 0f00 	cmp.w	r9, #0
 800ab9a:	d01f      	beq.n	800abdc <__multiply+0x130>
 800ab9c:	46b6      	mov	lr, r6
 800ab9e:	f04f 0a00 	mov.w	sl, #0
 800aba2:	6834      	ldr	r4, [r6, #0]
 800aba4:	f105 0114 	add.w	r1, r5, #20
 800aba8:	880a      	ldrh	r2, [r1, #0]
 800abaa:	f8be b002 	ldrh.w	fp, [lr, #2]
 800abae:	b2a4      	uxth	r4, r4
 800abb0:	fb09 b202 	mla	r2, r9, r2, fp
 800abb4:	4492      	add	sl, r2
 800abb6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800abba:	f84e 4b04 	str.w	r4, [lr], #4
 800abbe:	f851 4b04 	ldr.w	r4, [r1], #4
 800abc2:	f8be 2000 	ldrh.w	r2, [lr]
 800abc6:	0c24      	lsrs	r4, r4, #16
 800abc8:	fb09 2404 	mla	r4, r9, r4, r2
 800abcc:	458c      	cmp	ip, r1
 800abce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800abd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800abd6:	d8e7      	bhi.n	800aba8 <__multiply+0xfc>
 800abd8:	9a01      	ldr	r2, [sp, #4]
 800abda:	50b4      	str	r4, [r6, r2]
 800abdc:	3604      	adds	r6, #4
 800abde:	e7a3      	b.n	800ab28 <__multiply+0x7c>
 800abe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1a5      	bne.n	800ab34 <__multiply+0x88>
 800abe8:	3f01      	subs	r7, #1
 800abea:	e7a1      	b.n	800ab30 <__multiply+0x84>
 800abec:	0800b983 	.word	0x0800b983
 800abf0:	0800b9f4 	.word	0x0800b9f4

0800abf4 <__pow5mult>:
 800abf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf8:	4615      	mov	r5, r2
 800abfa:	f012 0203 	ands.w	r2, r2, #3
 800abfe:	4606      	mov	r6, r0
 800ac00:	460f      	mov	r7, r1
 800ac02:	d007      	beq.n	800ac14 <__pow5mult+0x20>
 800ac04:	4c25      	ldr	r4, [pc, #148]	; (800ac9c <__pow5mult+0xa8>)
 800ac06:	3a01      	subs	r2, #1
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac0e:	f7ff fe9f 	bl	800a950 <__multadd>
 800ac12:	4607      	mov	r7, r0
 800ac14:	10ad      	asrs	r5, r5, #2
 800ac16:	d03d      	beq.n	800ac94 <__pow5mult+0xa0>
 800ac18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac1a:	b97c      	cbnz	r4, 800ac3c <__pow5mult+0x48>
 800ac1c:	2010      	movs	r0, #16
 800ac1e:	f7fe f905 	bl	8008e2c <malloc>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6270      	str	r0, [r6, #36]	; 0x24
 800ac26:	b928      	cbnz	r0, 800ac34 <__pow5mult+0x40>
 800ac28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac2c:	4b1c      	ldr	r3, [pc, #112]	; (800aca0 <__pow5mult+0xac>)
 800ac2e:	481d      	ldr	r0, [pc, #116]	; (800aca4 <__pow5mult+0xb0>)
 800ac30:	f000 fc2a 	bl	800b488 <__assert_func>
 800ac34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac38:	6004      	str	r4, [r0, #0]
 800ac3a:	60c4      	str	r4, [r0, #12]
 800ac3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac44:	b94c      	cbnz	r4, 800ac5a <__pow5mult+0x66>
 800ac46:	f240 2171 	movw	r1, #625	; 0x271
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ff18 	bl	800aa80 <__i2b>
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac58:	6003      	str	r3, [r0, #0]
 800ac5a:	f04f 0900 	mov.w	r9, #0
 800ac5e:	07eb      	lsls	r3, r5, #31
 800ac60:	d50a      	bpl.n	800ac78 <__pow5mult+0x84>
 800ac62:	4639      	mov	r1, r7
 800ac64:	4622      	mov	r2, r4
 800ac66:	4630      	mov	r0, r6
 800ac68:	f7ff ff20 	bl	800aaac <__multiply>
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	4639      	mov	r1, r7
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7ff fe4b 	bl	800a90c <_Bfree>
 800ac76:	4647      	mov	r7, r8
 800ac78:	106d      	asrs	r5, r5, #1
 800ac7a:	d00b      	beq.n	800ac94 <__pow5mult+0xa0>
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	b938      	cbnz	r0, 800ac90 <__pow5mult+0x9c>
 800ac80:	4622      	mov	r2, r4
 800ac82:	4621      	mov	r1, r4
 800ac84:	4630      	mov	r0, r6
 800ac86:	f7ff ff11 	bl	800aaac <__multiply>
 800ac8a:	6020      	str	r0, [r4, #0]
 800ac8c:	f8c0 9000 	str.w	r9, [r0]
 800ac90:	4604      	mov	r4, r0
 800ac92:	e7e4      	b.n	800ac5e <__pow5mult+0x6a>
 800ac94:	4638      	mov	r0, r7
 800ac96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	bf00      	nop
 800ac9c:	0800bb48 	.word	0x0800bb48
 800aca0:	0800b90d 	.word	0x0800b90d
 800aca4:	0800b9f4 	.word	0x0800b9f4

0800aca8 <__lshift>:
 800aca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acac:	460c      	mov	r4, r1
 800acae:	4607      	mov	r7, r0
 800acb0:	4691      	mov	r9, r2
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	6849      	ldr	r1, [r1, #4]
 800acb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acba:	68a3      	ldr	r3, [r4, #8]
 800acbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acc0:	f108 0601 	add.w	r6, r8, #1
 800acc4:	42b3      	cmp	r3, r6
 800acc6:	db0b      	blt.n	800ace0 <__lshift+0x38>
 800acc8:	4638      	mov	r0, r7
 800acca:	f7ff fddf 	bl	800a88c <_Balloc>
 800acce:	4605      	mov	r5, r0
 800acd0:	b948      	cbnz	r0, 800ace6 <__lshift+0x3e>
 800acd2:	4602      	mov	r2, r0
 800acd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acd8:	4b27      	ldr	r3, [pc, #156]	; (800ad78 <__lshift+0xd0>)
 800acda:	4828      	ldr	r0, [pc, #160]	; (800ad7c <__lshift+0xd4>)
 800acdc:	f000 fbd4 	bl	800b488 <__assert_func>
 800ace0:	3101      	adds	r1, #1
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	e7ee      	b.n	800acc4 <__lshift+0x1c>
 800ace6:	2300      	movs	r3, #0
 800ace8:	f100 0114 	add.w	r1, r0, #20
 800acec:	f100 0210 	add.w	r2, r0, #16
 800acf0:	4618      	mov	r0, r3
 800acf2:	4553      	cmp	r3, sl
 800acf4:	db33      	blt.n	800ad5e <__lshift+0xb6>
 800acf6:	6920      	ldr	r0, [r4, #16]
 800acf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acfc:	f104 0314 	add.w	r3, r4, #20
 800ad00:	f019 091f 	ands.w	r9, r9, #31
 800ad04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad0c:	d02b      	beq.n	800ad66 <__lshift+0xbe>
 800ad0e:	468a      	mov	sl, r1
 800ad10:	2200      	movs	r2, #0
 800ad12:	f1c9 0e20 	rsb	lr, r9, #32
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	fa00 f009 	lsl.w	r0, r0, r9
 800ad1c:	4302      	orrs	r2, r0
 800ad1e:	f84a 2b04 	str.w	r2, [sl], #4
 800ad22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad26:	459c      	cmp	ip, r3
 800ad28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad2c:	d8f3      	bhi.n	800ad16 <__lshift+0x6e>
 800ad2e:	ebac 0304 	sub.w	r3, ip, r4
 800ad32:	3b15      	subs	r3, #21
 800ad34:	f023 0303 	bic.w	r3, r3, #3
 800ad38:	3304      	adds	r3, #4
 800ad3a:	f104 0015 	add.w	r0, r4, #21
 800ad3e:	4584      	cmp	ip, r0
 800ad40:	bf38      	it	cc
 800ad42:	2304      	movcc	r3, #4
 800ad44:	50ca      	str	r2, [r1, r3]
 800ad46:	b10a      	cbz	r2, 800ad4c <__lshift+0xa4>
 800ad48:	f108 0602 	add.w	r6, r8, #2
 800ad4c:	3e01      	subs	r6, #1
 800ad4e:	4638      	mov	r0, r7
 800ad50:	4621      	mov	r1, r4
 800ad52:	612e      	str	r6, [r5, #16]
 800ad54:	f7ff fdda 	bl	800a90c <_Bfree>
 800ad58:	4628      	mov	r0, r5
 800ad5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad62:	3301      	adds	r3, #1
 800ad64:	e7c5      	b.n	800acf2 <__lshift+0x4a>
 800ad66:	3904      	subs	r1, #4
 800ad68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6c:	459c      	cmp	ip, r3
 800ad6e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad72:	d8f9      	bhi.n	800ad68 <__lshift+0xc0>
 800ad74:	e7ea      	b.n	800ad4c <__lshift+0xa4>
 800ad76:	bf00      	nop
 800ad78:	0800b983 	.word	0x0800b983
 800ad7c:	0800b9f4 	.word	0x0800b9f4

0800ad80 <__mcmp>:
 800ad80:	4603      	mov	r3, r0
 800ad82:	690a      	ldr	r2, [r1, #16]
 800ad84:	6900      	ldr	r0, [r0, #16]
 800ad86:	b530      	push	{r4, r5, lr}
 800ad88:	1a80      	subs	r0, r0, r2
 800ad8a:	d10d      	bne.n	800ada8 <__mcmp+0x28>
 800ad8c:	3314      	adds	r3, #20
 800ad8e:	3114      	adds	r1, #20
 800ad90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ada0:	4295      	cmp	r5, r2
 800ada2:	d002      	beq.n	800adaa <__mcmp+0x2a>
 800ada4:	d304      	bcc.n	800adb0 <__mcmp+0x30>
 800ada6:	2001      	movs	r0, #1
 800ada8:	bd30      	pop	{r4, r5, pc}
 800adaa:	42a3      	cmp	r3, r4
 800adac:	d3f4      	bcc.n	800ad98 <__mcmp+0x18>
 800adae:	e7fb      	b.n	800ada8 <__mcmp+0x28>
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	e7f8      	b.n	800ada8 <__mcmp+0x28>
	...

0800adb8 <__mdiff>:
 800adb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	460c      	mov	r4, r1
 800adbe:	4606      	mov	r6, r0
 800adc0:	4611      	mov	r1, r2
 800adc2:	4620      	mov	r0, r4
 800adc4:	4692      	mov	sl, r2
 800adc6:	f7ff ffdb 	bl	800ad80 <__mcmp>
 800adca:	1e05      	subs	r5, r0, #0
 800adcc:	d111      	bne.n	800adf2 <__mdiff+0x3a>
 800adce:	4629      	mov	r1, r5
 800add0:	4630      	mov	r0, r6
 800add2:	f7ff fd5b 	bl	800a88c <_Balloc>
 800add6:	4602      	mov	r2, r0
 800add8:	b928      	cbnz	r0, 800ade6 <__mdiff+0x2e>
 800adda:	f240 2132 	movw	r1, #562	; 0x232
 800adde:	4b3c      	ldr	r3, [pc, #240]	; (800aed0 <__mdiff+0x118>)
 800ade0:	483c      	ldr	r0, [pc, #240]	; (800aed4 <__mdiff+0x11c>)
 800ade2:	f000 fb51 	bl	800b488 <__assert_func>
 800ade6:	2301      	movs	r3, #1
 800ade8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adec:	4610      	mov	r0, r2
 800adee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	bfa4      	itt	ge
 800adf4:	4653      	movge	r3, sl
 800adf6:	46a2      	movge	sl, r4
 800adf8:	4630      	mov	r0, r6
 800adfa:	f8da 1004 	ldr.w	r1, [sl, #4]
 800adfe:	bfa6      	itte	ge
 800ae00:	461c      	movge	r4, r3
 800ae02:	2500      	movge	r5, #0
 800ae04:	2501      	movlt	r5, #1
 800ae06:	f7ff fd41 	bl	800a88c <_Balloc>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	b918      	cbnz	r0, 800ae16 <__mdiff+0x5e>
 800ae0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae12:	4b2f      	ldr	r3, [pc, #188]	; (800aed0 <__mdiff+0x118>)
 800ae14:	e7e4      	b.n	800ade0 <__mdiff+0x28>
 800ae16:	f100 0814 	add.w	r8, r0, #20
 800ae1a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ae1e:	60c5      	str	r5, [r0, #12]
 800ae20:	f04f 0c00 	mov.w	ip, #0
 800ae24:	f10a 0514 	add.w	r5, sl, #20
 800ae28:	f10a 0010 	add.w	r0, sl, #16
 800ae2c:	46c2      	mov	sl, r8
 800ae2e:	6926      	ldr	r6, [r4, #16]
 800ae30:	f104 0914 	add.w	r9, r4, #20
 800ae34:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ae38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae3c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ae40:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae44:	fa1f f18b 	uxth.w	r1, fp
 800ae48:	4461      	add	r1, ip
 800ae4a:	fa1f fc83 	uxth.w	ip, r3
 800ae4e:	0c1b      	lsrs	r3, r3, #16
 800ae50:	eba1 010c 	sub.w	r1, r1, ip
 800ae54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ae5c:	b289      	uxth	r1, r1
 800ae5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ae62:	454e      	cmp	r6, r9
 800ae64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ae68:	f84a 3b04 	str.w	r3, [sl], #4
 800ae6c:	d8e6      	bhi.n	800ae3c <__mdiff+0x84>
 800ae6e:	1b33      	subs	r3, r6, r4
 800ae70:	3b15      	subs	r3, #21
 800ae72:	f023 0303 	bic.w	r3, r3, #3
 800ae76:	3415      	adds	r4, #21
 800ae78:	3304      	adds	r3, #4
 800ae7a:	42a6      	cmp	r6, r4
 800ae7c:	bf38      	it	cc
 800ae7e:	2304      	movcc	r3, #4
 800ae80:	441d      	add	r5, r3
 800ae82:	4443      	add	r3, r8
 800ae84:	461e      	mov	r6, r3
 800ae86:	462c      	mov	r4, r5
 800ae88:	4574      	cmp	r4, lr
 800ae8a:	d30e      	bcc.n	800aeaa <__mdiff+0xf2>
 800ae8c:	f10e 0103 	add.w	r1, lr, #3
 800ae90:	1b49      	subs	r1, r1, r5
 800ae92:	f021 0103 	bic.w	r1, r1, #3
 800ae96:	3d03      	subs	r5, #3
 800ae98:	45ae      	cmp	lr, r5
 800ae9a:	bf38      	it	cc
 800ae9c:	2100      	movcc	r1, #0
 800ae9e:	4419      	add	r1, r3
 800aea0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aea4:	b18b      	cbz	r3, 800aeca <__mdiff+0x112>
 800aea6:	6117      	str	r7, [r2, #16]
 800aea8:	e7a0      	b.n	800adec <__mdiff+0x34>
 800aeaa:	f854 8b04 	ldr.w	r8, [r4], #4
 800aeae:	fa1f f188 	uxth.w	r1, r8
 800aeb2:	4461      	add	r1, ip
 800aeb4:	1408      	asrs	r0, r1, #16
 800aeb6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800aeba:	b289      	uxth	r1, r1
 800aebc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aec4:	f846 1b04 	str.w	r1, [r6], #4
 800aec8:	e7de      	b.n	800ae88 <__mdiff+0xd0>
 800aeca:	3f01      	subs	r7, #1
 800aecc:	e7e8      	b.n	800aea0 <__mdiff+0xe8>
 800aece:	bf00      	nop
 800aed0:	0800b983 	.word	0x0800b983
 800aed4:	0800b9f4 	.word	0x0800b9f4

0800aed8 <__d2b>:
 800aed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aedc:	2101      	movs	r1, #1
 800aede:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aee2:	4690      	mov	r8, r2
 800aee4:	461d      	mov	r5, r3
 800aee6:	f7ff fcd1 	bl	800a88c <_Balloc>
 800aeea:	4604      	mov	r4, r0
 800aeec:	b930      	cbnz	r0, 800aefc <__d2b+0x24>
 800aeee:	4602      	mov	r2, r0
 800aef0:	f240 310a 	movw	r1, #778	; 0x30a
 800aef4:	4b24      	ldr	r3, [pc, #144]	; (800af88 <__d2b+0xb0>)
 800aef6:	4825      	ldr	r0, [pc, #148]	; (800af8c <__d2b+0xb4>)
 800aef8:	f000 fac6 	bl	800b488 <__assert_func>
 800aefc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800af00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800af04:	bb2d      	cbnz	r5, 800af52 <__d2b+0x7a>
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	f1b8 0300 	subs.w	r3, r8, #0
 800af0c:	d026      	beq.n	800af5c <__d2b+0x84>
 800af0e:	4668      	mov	r0, sp
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	f7ff fd87 	bl	800aa24 <__lo0bits>
 800af16:	9900      	ldr	r1, [sp, #0]
 800af18:	b1f0      	cbz	r0, 800af58 <__d2b+0x80>
 800af1a:	9a01      	ldr	r2, [sp, #4]
 800af1c:	f1c0 0320 	rsb	r3, r0, #32
 800af20:	fa02 f303 	lsl.w	r3, r2, r3
 800af24:	430b      	orrs	r3, r1
 800af26:	40c2      	lsrs	r2, r0
 800af28:	6163      	str	r3, [r4, #20]
 800af2a:	9201      	str	r2, [sp, #4]
 800af2c:	9b01      	ldr	r3, [sp, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bf14      	ite	ne
 800af32:	2102      	movne	r1, #2
 800af34:	2101      	moveq	r1, #1
 800af36:	61a3      	str	r3, [r4, #24]
 800af38:	6121      	str	r1, [r4, #16]
 800af3a:	b1c5      	cbz	r5, 800af6e <__d2b+0x96>
 800af3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af40:	4405      	add	r5, r0
 800af42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af46:	603d      	str	r5, [r7, #0]
 800af48:	6030      	str	r0, [r6, #0]
 800af4a:	4620      	mov	r0, r4
 800af4c:	b002      	add	sp, #8
 800af4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af56:	e7d6      	b.n	800af06 <__d2b+0x2e>
 800af58:	6161      	str	r1, [r4, #20]
 800af5a:	e7e7      	b.n	800af2c <__d2b+0x54>
 800af5c:	a801      	add	r0, sp, #4
 800af5e:	f7ff fd61 	bl	800aa24 <__lo0bits>
 800af62:	2101      	movs	r1, #1
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	6121      	str	r1, [r4, #16]
 800af68:	6163      	str	r3, [r4, #20]
 800af6a:	3020      	adds	r0, #32
 800af6c:	e7e5      	b.n	800af3a <__d2b+0x62>
 800af6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800af72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af76:	6038      	str	r0, [r7, #0]
 800af78:	6918      	ldr	r0, [r3, #16]
 800af7a:	f7ff fd33 	bl	800a9e4 <__hi0bits>
 800af7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800af82:	6031      	str	r1, [r6, #0]
 800af84:	e7e1      	b.n	800af4a <__d2b+0x72>
 800af86:	bf00      	nop
 800af88:	0800b983 	.word	0x0800b983
 800af8c:	0800b9f4 	.word	0x0800b9f4

0800af90 <_calloc_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	fb02 f501 	mul.w	r5, r2, r1
 800af96:	4629      	mov	r1, r5
 800af98:	f7fd ffd4 	bl	8008f44 <_malloc_r>
 800af9c:	4604      	mov	r4, r0
 800af9e:	b118      	cbz	r0, 800afa8 <_calloc_r+0x18>
 800afa0:	462a      	mov	r2, r5
 800afa2:	2100      	movs	r1, #0
 800afa4:	f7fd ff7a 	bl	8008e9c <memset>
 800afa8:	4620      	mov	r0, r4
 800afaa:	bd38      	pop	{r3, r4, r5, pc}

0800afac <__sfputc_r>:
 800afac:	6893      	ldr	r3, [r2, #8]
 800afae:	b410      	push	{r4}
 800afb0:	3b01      	subs	r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	6093      	str	r3, [r2, #8]
 800afb6:	da07      	bge.n	800afc8 <__sfputc_r+0x1c>
 800afb8:	6994      	ldr	r4, [r2, #24]
 800afba:	42a3      	cmp	r3, r4
 800afbc:	db01      	blt.n	800afc2 <__sfputc_r+0x16>
 800afbe:	290a      	cmp	r1, #10
 800afc0:	d102      	bne.n	800afc8 <__sfputc_r+0x1c>
 800afc2:	bc10      	pop	{r4}
 800afc4:	f000 b98e 	b.w	800b2e4 <__swbuf_r>
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	1c58      	adds	r0, r3, #1
 800afcc:	6010      	str	r0, [r2, #0]
 800afce:	7019      	strb	r1, [r3, #0]
 800afd0:	4608      	mov	r0, r1
 800afd2:	bc10      	pop	{r4}
 800afd4:	4770      	bx	lr

0800afd6 <__sfputs_r>:
 800afd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd8:	4606      	mov	r6, r0
 800afda:	460f      	mov	r7, r1
 800afdc:	4614      	mov	r4, r2
 800afde:	18d5      	adds	r5, r2, r3
 800afe0:	42ac      	cmp	r4, r5
 800afe2:	d101      	bne.n	800afe8 <__sfputs_r+0x12>
 800afe4:	2000      	movs	r0, #0
 800afe6:	e007      	b.n	800aff8 <__sfputs_r+0x22>
 800afe8:	463a      	mov	r2, r7
 800afea:	4630      	mov	r0, r6
 800afec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff0:	f7ff ffdc 	bl	800afac <__sfputc_r>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d1f3      	bne.n	800afe0 <__sfputs_r+0xa>
 800aff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800affc <_vfiprintf_r>:
 800affc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b000:	460d      	mov	r5, r1
 800b002:	4614      	mov	r4, r2
 800b004:	4698      	mov	r8, r3
 800b006:	4606      	mov	r6, r0
 800b008:	b09d      	sub	sp, #116	; 0x74
 800b00a:	b118      	cbz	r0, 800b014 <_vfiprintf_r+0x18>
 800b00c:	6983      	ldr	r3, [r0, #24]
 800b00e:	b90b      	cbnz	r3, 800b014 <_vfiprintf_r+0x18>
 800b010:	f7ff fb7c 	bl	800a70c <__sinit>
 800b014:	4b89      	ldr	r3, [pc, #548]	; (800b23c <_vfiprintf_r+0x240>)
 800b016:	429d      	cmp	r5, r3
 800b018:	d11b      	bne.n	800b052 <_vfiprintf_r+0x56>
 800b01a:	6875      	ldr	r5, [r6, #4]
 800b01c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b01e:	07d9      	lsls	r1, r3, #31
 800b020:	d405      	bmi.n	800b02e <_vfiprintf_r+0x32>
 800b022:	89ab      	ldrh	r3, [r5, #12]
 800b024:	059a      	lsls	r2, r3, #22
 800b026:	d402      	bmi.n	800b02e <_vfiprintf_r+0x32>
 800b028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b02a:	f7ff fc12 	bl	800a852 <__retarget_lock_acquire_recursive>
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	071b      	lsls	r3, r3, #28
 800b032:	d501      	bpl.n	800b038 <_vfiprintf_r+0x3c>
 800b034:	692b      	ldr	r3, [r5, #16]
 800b036:	b9eb      	cbnz	r3, 800b074 <_vfiprintf_r+0x78>
 800b038:	4629      	mov	r1, r5
 800b03a:	4630      	mov	r0, r6
 800b03c:	f000 f9b6 	bl	800b3ac <__swsetup_r>
 800b040:	b1c0      	cbz	r0, 800b074 <_vfiprintf_r+0x78>
 800b042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b044:	07dc      	lsls	r4, r3, #31
 800b046:	d50e      	bpl.n	800b066 <_vfiprintf_r+0x6a>
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	b01d      	add	sp, #116	; 0x74
 800b04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b052:	4b7b      	ldr	r3, [pc, #492]	; (800b240 <_vfiprintf_r+0x244>)
 800b054:	429d      	cmp	r5, r3
 800b056:	d101      	bne.n	800b05c <_vfiprintf_r+0x60>
 800b058:	68b5      	ldr	r5, [r6, #8]
 800b05a:	e7df      	b.n	800b01c <_vfiprintf_r+0x20>
 800b05c:	4b79      	ldr	r3, [pc, #484]	; (800b244 <_vfiprintf_r+0x248>)
 800b05e:	429d      	cmp	r5, r3
 800b060:	bf08      	it	eq
 800b062:	68f5      	ldreq	r5, [r6, #12]
 800b064:	e7da      	b.n	800b01c <_vfiprintf_r+0x20>
 800b066:	89ab      	ldrh	r3, [r5, #12]
 800b068:	0598      	lsls	r0, r3, #22
 800b06a:	d4ed      	bmi.n	800b048 <_vfiprintf_r+0x4c>
 800b06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b06e:	f7ff fbf1 	bl	800a854 <__retarget_lock_release_recursive>
 800b072:	e7e9      	b.n	800b048 <_vfiprintf_r+0x4c>
 800b074:	2300      	movs	r3, #0
 800b076:	9309      	str	r3, [sp, #36]	; 0x24
 800b078:	2320      	movs	r3, #32
 800b07a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b07e:	2330      	movs	r3, #48	; 0x30
 800b080:	f04f 0901 	mov.w	r9, #1
 800b084:	f8cd 800c 	str.w	r8, [sp, #12]
 800b088:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b248 <_vfiprintf_r+0x24c>
 800b08c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b090:	4623      	mov	r3, r4
 800b092:	469a      	mov	sl, r3
 800b094:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b098:	b10a      	cbz	r2, 800b09e <_vfiprintf_r+0xa2>
 800b09a:	2a25      	cmp	r2, #37	; 0x25
 800b09c:	d1f9      	bne.n	800b092 <_vfiprintf_r+0x96>
 800b09e:	ebba 0b04 	subs.w	fp, sl, r4
 800b0a2:	d00b      	beq.n	800b0bc <_vfiprintf_r+0xc0>
 800b0a4:	465b      	mov	r3, fp
 800b0a6:	4622      	mov	r2, r4
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7ff ff93 	bl	800afd6 <__sfputs_r>
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	f000 80aa 	beq.w	800b20a <_vfiprintf_r+0x20e>
 800b0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b8:	445a      	add	r2, fp
 800b0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 80a2 	beq.w	800b20a <_vfiprintf_r+0x20e>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0d0:	f10a 0a01 	add.w	sl, sl, #1
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	9307      	str	r3, [sp, #28]
 800b0d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b0de:	4654      	mov	r4, sl
 800b0e0:	2205      	movs	r2, #5
 800b0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e6:	4858      	ldr	r0, [pc, #352]	; (800b248 <_vfiprintf_r+0x24c>)
 800b0e8:	f7ff fbb5 	bl	800a856 <memchr>
 800b0ec:	9a04      	ldr	r2, [sp, #16]
 800b0ee:	b9d8      	cbnz	r0, 800b128 <_vfiprintf_r+0x12c>
 800b0f0:	06d1      	lsls	r1, r2, #27
 800b0f2:	bf44      	itt	mi
 800b0f4:	2320      	movmi	r3, #32
 800b0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0fa:	0713      	lsls	r3, r2, #28
 800b0fc:	bf44      	itt	mi
 800b0fe:	232b      	movmi	r3, #43	; 0x2b
 800b100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b104:	f89a 3000 	ldrb.w	r3, [sl]
 800b108:	2b2a      	cmp	r3, #42	; 0x2a
 800b10a:	d015      	beq.n	800b138 <_vfiprintf_r+0x13c>
 800b10c:	4654      	mov	r4, sl
 800b10e:	2000      	movs	r0, #0
 800b110:	f04f 0c0a 	mov.w	ip, #10
 800b114:	9a07      	ldr	r2, [sp, #28]
 800b116:	4621      	mov	r1, r4
 800b118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b11c:	3b30      	subs	r3, #48	; 0x30
 800b11e:	2b09      	cmp	r3, #9
 800b120:	d94e      	bls.n	800b1c0 <_vfiprintf_r+0x1c4>
 800b122:	b1b0      	cbz	r0, 800b152 <_vfiprintf_r+0x156>
 800b124:	9207      	str	r2, [sp, #28]
 800b126:	e014      	b.n	800b152 <_vfiprintf_r+0x156>
 800b128:	eba0 0308 	sub.w	r3, r0, r8
 800b12c:	fa09 f303 	lsl.w	r3, r9, r3
 800b130:	4313      	orrs	r3, r2
 800b132:	46a2      	mov	sl, r4
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	e7d2      	b.n	800b0de <_vfiprintf_r+0xe2>
 800b138:	9b03      	ldr	r3, [sp, #12]
 800b13a:	1d19      	adds	r1, r3, #4
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	9103      	str	r1, [sp, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	bfbb      	ittet	lt
 800b144:	425b      	neglt	r3, r3
 800b146:	f042 0202 	orrlt.w	r2, r2, #2
 800b14a:	9307      	strge	r3, [sp, #28]
 800b14c:	9307      	strlt	r3, [sp, #28]
 800b14e:	bfb8      	it	lt
 800b150:	9204      	strlt	r2, [sp, #16]
 800b152:	7823      	ldrb	r3, [r4, #0]
 800b154:	2b2e      	cmp	r3, #46	; 0x2e
 800b156:	d10c      	bne.n	800b172 <_vfiprintf_r+0x176>
 800b158:	7863      	ldrb	r3, [r4, #1]
 800b15a:	2b2a      	cmp	r3, #42	; 0x2a
 800b15c:	d135      	bne.n	800b1ca <_vfiprintf_r+0x1ce>
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	3402      	adds	r4, #2
 800b162:	1d1a      	adds	r2, r3, #4
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	9203      	str	r2, [sp, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bfb8      	it	lt
 800b16c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b258 <_vfiprintf_r+0x25c>
 800b176:	2203      	movs	r2, #3
 800b178:	4650      	mov	r0, sl
 800b17a:	7821      	ldrb	r1, [r4, #0]
 800b17c:	f7ff fb6b 	bl	800a856 <memchr>
 800b180:	b140      	cbz	r0, 800b194 <_vfiprintf_r+0x198>
 800b182:	2340      	movs	r3, #64	; 0x40
 800b184:	eba0 000a 	sub.w	r0, r0, sl
 800b188:	fa03 f000 	lsl.w	r0, r3, r0
 800b18c:	9b04      	ldr	r3, [sp, #16]
 800b18e:	3401      	adds	r4, #1
 800b190:	4303      	orrs	r3, r0
 800b192:	9304      	str	r3, [sp, #16]
 800b194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b198:	2206      	movs	r2, #6
 800b19a:	482c      	ldr	r0, [pc, #176]	; (800b24c <_vfiprintf_r+0x250>)
 800b19c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1a0:	f7ff fb59 	bl	800a856 <memchr>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d03f      	beq.n	800b228 <_vfiprintf_r+0x22c>
 800b1a8:	4b29      	ldr	r3, [pc, #164]	; (800b250 <_vfiprintf_r+0x254>)
 800b1aa:	bb1b      	cbnz	r3, 800b1f4 <_vfiprintf_r+0x1f8>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	3307      	adds	r3, #7
 800b1b0:	f023 0307 	bic.w	r3, r3, #7
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	9303      	str	r3, [sp, #12]
 800b1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ba:	443b      	add	r3, r7
 800b1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1be:	e767      	b.n	800b090 <_vfiprintf_r+0x94>
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1c8:	e7a5      	b.n	800b116 <_vfiprintf_r+0x11a>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f04f 0c0a 	mov.w	ip, #10
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1dc:	3a30      	subs	r2, #48	; 0x30
 800b1de:	2a09      	cmp	r2, #9
 800b1e0:	d903      	bls.n	800b1ea <_vfiprintf_r+0x1ee>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0c5      	beq.n	800b172 <_vfiprintf_r+0x176>
 800b1e6:	9105      	str	r1, [sp, #20]
 800b1e8:	e7c3      	b.n	800b172 <_vfiprintf_r+0x176>
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1f2:	e7f0      	b.n	800b1d6 <_vfiprintf_r+0x1da>
 800b1f4:	ab03      	add	r3, sp, #12
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	462a      	mov	r2, r5
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	4b15      	ldr	r3, [pc, #84]	; (800b254 <_vfiprintf_r+0x258>)
 800b1fe:	a904      	add	r1, sp, #16
 800b200:	f7fd ff98 	bl	8009134 <_printf_float>
 800b204:	4607      	mov	r7, r0
 800b206:	1c78      	adds	r0, r7, #1
 800b208:	d1d6      	bne.n	800b1b8 <_vfiprintf_r+0x1bc>
 800b20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b20c:	07d9      	lsls	r1, r3, #31
 800b20e:	d405      	bmi.n	800b21c <_vfiprintf_r+0x220>
 800b210:	89ab      	ldrh	r3, [r5, #12]
 800b212:	059a      	lsls	r2, r3, #22
 800b214:	d402      	bmi.n	800b21c <_vfiprintf_r+0x220>
 800b216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b218:	f7ff fb1c 	bl	800a854 <__retarget_lock_release_recursive>
 800b21c:	89ab      	ldrh	r3, [r5, #12]
 800b21e:	065b      	lsls	r3, r3, #25
 800b220:	f53f af12 	bmi.w	800b048 <_vfiprintf_r+0x4c>
 800b224:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b226:	e711      	b.n	800b04c <_vfiprintf_r+0x50>
 800b228:	ab03      	add	r3, sp, #12
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	462a      	mov	r2, r5
 800b22e:	4630      	mov	r0, r6
 800b230:	4b08      	ldr	r3, [pc, #32]	; (800b254 <_vfiprintf_r+0x258>)
 800b232:	a904      	add	r1, sp, #16
 800b234:	f7fe fa1a 	bl	800966c <_printf_i>
 800b238:	e7e4      	b.n	800b204 <_vfiprintf_r+0x208>
 800b23a:	bf00      	nop
 800b23c:	0800b9b4 	.word	0x0800b9b4
 800b240:	0800b9d4 	.word	0x0800b9d4
 800b244:	0800b994 	.word	0x0800b994
 800b248:	0800bb54 	.word	0x0800bb54
 800b24c:	0800bb5e 	.word	0x0800bb5e
 800b250:	08009135 	.word	0x08009135
 800b254:	0800afd7 	.word	0x0800afd7
 800b258:	0800bb5a 	.word	0x0800bb5a

0800b25c <__sread>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	460c      	mov	r4, r1
 800b260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b264:	f000 fa9a 	bl	800b79c <_read_r>
 800b268:	2800      	cmp	r0, #0
 800b26a:	bfab      	itete	ge
 800b26c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b26e:	89a3      	ldrhlt	r3, [r4, #12]
 800b270:	181b      	addge	r3, r3, r0
 800b272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b276:	bfac      	ite	ge
 800b278:	6563      	strge	r3, [r4, #84]	; 0x54
 800b27a:	81a3      	strhlt	r3, [r4, #12]
 800b27c:	bd10      	pop	{r4, pc}

0800b27e <__swrite>:
 800b27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b282:	461f      	mov	r7, r3
 800b284:	898b      	ldrh	r3, [r1, #12]
 800b286:	4605      	mov	r5, r0
 800b288:	05db      	lsls	r3, r3, #23
 800b28a:	460c      	mov	r4, r1
 800b28c:	4616      	mov	r6, r2
 800b28e:	d505      	bpl.n	800b29c <__swrite+0x1e>
 800b290:	2302      	movs	r3, #2
 800b292:	2200      	movs	r2, #0
 800b294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b298:	f000 f9f8 	bl	800b68c <_lseek_r>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	4632      	mov	r2, r6
 800b2a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b2:	f000 b869 	b.w	800b388 <_write_r>

0800b2b6 <__sseek>:
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2be:	f000 f9e5 	bl	800b68c <_lseek_r>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	bf15      	itete	ne
 800b2c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2d2:	81a3      	strheq	r3, [r4, #12]
 800b2d4:	bf18      	it	ne
 800b2d6:	81a3      	strhne	r3, [r4, #12]
 800b2d8:	bd10      	pop	{r4, pc}

0800b2da <__sclose>:
 800b2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2de:	f000 b8f1 	b.w	800b4c4 <_close_r>
	...

0800b2e4 <__swbuf_r>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	460e      	mov	r6, r1
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b118      	cbz	r0, 800b2f6 <__swbuf_r+0x12>
 800b2ee:	6983      	ldr	r3, [r0, #24]
 800b2f0:	b90b      	cbnz	r3, 800b2f6 <__swbuf_r+0x12>
 800b2f2:	f7ff fa0b 	bl	800a70c <__sinit>
 800b2f6:	4b21      	ldr	r3, [pc, #132]	; (800b37c <__swbuf_r+0x98>)
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	d12b      	bne.n	800b354 <__swbuf_r+0x70>
 800b2fc:	686c      	ldr	r4, [r5, #4]
 800b2fe:	69a3      	ldr	r3, [r4, #24]
 800b300:	60a3      	str	r3, [r4, #8]
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	071a      	lsls	r2, r3, #28
 800b306:	d52f      	bpl.n	800b368 <__swbuf_r+0x84>
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	b36b      	cbz	r3, 800b368 <__swbuf_r+0x84>
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	6820      	ldr	r0, [r4, #0]
 800b310:	b2f6      	uxtb	r6, r6
 800b312:	1ac0      	subs	r0, r0, r3
 800b314:	6963      	ldr	r3, [r4, #20]
 800b316:	4637      	mov	r7, r6
 800b318:	4283      	cmp	r3, r0
 800b31a:	dc04      	bgt.n	800b326 <__swbuf_r+0x42>
 800b31c:	4621      	mov	r1, r4
 800b31e:	4628      	mov	r0, r5
 800b320:	f000 f966 	bl	800b5f0 <_fflush_r>
 800b324:	bb30      	cbnz	r0, 800b374 <__swbuf_r+0x90>
 800b326:	68a3      	ldr	r3, [r4, #8]
 800b328:	3001      	adds	r0, #1
 800b32a:	3b01      	subs	r3, #1
 800b32c:	60a3      	str	r3, [r4, #8]
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	1c5a      	adds	r2, r3, #1
 800b332:	6022      	str	r2, [r4, #0]
 800b334:	701e      	strb	r6, [r3, #0]
 800b336:	6963      	ldr	r3, [r4, #20]
 800b338:	4283      	cmp	r3, r0
 800b33a:	d004      	beq.n	800b346 <__swbuf_r+0x62>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	07db      	lsls	r3, r3, #31
 800b340:	d506      	bpl.n	800b350 <__swbuf_r+0x6c>
 800b342:	2e0a      	cmp	r6, #10
 800b344:	d104      	bne.n	800b350 <__swbuf_r+0x6c>
 800b346:	4621      	mov	r1, r4
 800b348:	4628      	mov	r0, r5
 800b34a:	f000 f951 	bl	800b5f0 <_fflush_r>
 800b34e:	b988      	cbnz	r0, 800b374 <__swbuf_r+0x90>
 800b350:	4638      	mov	r0, r7
 800b352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b354:	4b0a      	ldr	r3, [pc, #40]	; (800b380 <__swbuf_r+0x9c>)
 800b356:	429c      	cmp	r4, r3
 800b358:	d101      	bne.n	800b35e <__swbuf_r+0x7a>
 800b35a:	68ac      	ldr	r4, [r5, #8]
 800b35c:	e7cf      	b.n	800b2fe <__swbuf_r+0x1a>
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <__swbuf_r+0xa0>)
 800b360:	429c      	cmp	r4, r3
 800b362:	bf08      	it	eq
 800b364:	68ec      	ldreq	r4, [r5, #12]
 800b366:	e7ca      	b.n	800b2fe <__swbuf_r+0x1a>
 800b368:	4621      	mov	r1, r4
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 f81e 	bl	800b3ac <__swsetup_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	d0cb      	beq.n	800b30c <__swbuf_r+0x28>
 800b374:	f04f 37ff 	mov.w	r7, #4294967295
 800b378:	e7ea      	b.n	800b350 <__swbuf_r+0x6c>
 800b37a:	bf00      	nop
 800b37c:	0800b9b4 	.word	0x0800b9b4
 800b380:	0800b9d4 	.word	0x0800b9d4
 800b384:	0800b994 	.word	0x0800b994

0800b388 <_write_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4604      	mov	r4, r0
 800b38c:	4608      	mov	r0, r1
 800b38e:	4611      	mov	r1, r2
 800b390:	2200      	movs	r2, #0
 800b392:	4d05      	ldr	r5, [pc, #20]	; (800b3a8 <_write_r+0x20>)
 800b394:	602a      	str	r2, [r5, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	f7f7 fbe4 	bl	8002b64 <_write>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_write_r+0x1e>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_write_r+0x1e>
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	20000970 	.word	0x20000970

0800b3ac <__swsetup_r>:
 800b3ac:	4b32      	ldr	r3, [pc, #200]	; (800b478 <__swsetup_r+0xcc>)
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	681d      	ldr	r5, [r3, #0]
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	b125      	cbz	r5, 800b3c2 <__swsetup_r+0x16>
 800b3b8:	69ab      	ldr	r3, [r5, #24]
 800b3ba:	b913      	cbnz	r3, 800b3c2 <__swsetup_r+0x16>
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f7ff f9a5 	bl	800a70c <__sinit>
 800b3c2:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <__swsetup_r+0xd0>)
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	d10f      	bne.n	800b3e8 <__swsetup_r+0x3c>
 800b3c8:	686c      	ldr	r4, [r5, #4]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d0:	0719      	lsls	r1, r3, #28
 800b3d2:	d42c      	bmi.n	800b42e <__swsetup_r+0x82>
 800b3d4:	06dd      	lsls	r5, r3, #27
 800b3d6:	d411      	bmi.n	800b3fc <__swsetup_r+0x50>
 800b3d8:	2309      	movs	r3, #9
 800b3da:	6033      	str	r3, [r6, #0]
 800b3dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	81a3      	strh	r3, [r4, #12]
 800b3e6:	e03e      	b.n	800b466 <__swsetup_r+0xba>
 800b3e8:	4b25      	ldr	r3, [pc, #148]	; (800b480 <__swsetup_r+0xd4>)
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d101      	bne.n	800b3f2 <__swsetup_r+0x46>
 800b3ee:	68ac      	ldr	r4, [r5, #8]
 800b3f0:	e7eb      	b.n	800b3ca <__swsetup_r+0x1e>
 800b3f2:	4b24      	ldr	r3, [pc, #144]	; (800b484 <__swsetup_r+0xd8>)
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	bf08      	it	eq
 800b3f8:	68ec      	ldreq	r4, [r5, #12]
 800b3fa:	e7e6      	b.n	800b3ca <__swsetup_r+0x1e>
 800b3fc:	0758      	lsls	r0, r3, #29
 800b3fe:	d512      	bpl.n	800b426 <__swsetup_r+0x7a>
 800b400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b402:	b141      	cbz	r1, 800b416 <__swsetup_r+0x6a>
 800b404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b408:	4299      	cmp	r1, r3
 800b40a:	d002      	beq.n	800b412 <__swsetup_r+0x66>
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7fd fd4d 	bl	8008eac <_free_r>
 800b412:	2300      	movs	r3, #0
 800b414:	6363      	str	r3, [r4, #52]	; 0x34
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	2300      	movs	r3, #0
 800b420:	6063      	str	r3, [r4, #4]
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	f043 0308 	orr.w	r3, r3, #8
 800b42c:	81a3      	strh	r3, [r4, #12]
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	b94b      	cbnz	r3, 800b446 <__swsetup_r+0x9a>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b43c:	d003      	beq.n	800b446 <__swsetup_r+0x9a>
 800b43e:	4621      	mov	r1, r4
 800b440:	4630      	mov	r0, r6
 800b442:	f000 f959 	bl	800b6f8 <__smakebuf_r>
 800b446:	89a0      	ldrh	r0, [r4, #12]
 800b448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b44c:	f010 0301 	ands.w	r3, r0, #1
 800b450:	d00a      	beq.n	800b468 <__swsetup_r+0xbc>
 800b452:	2300      	movs	r3, #0
 800b454:	60a3      	str	r3, [r4, #8]
 800b456:	6963      	ldr	r3, [r4, #20]
 800b458:	425b      	negs	r3, r3
 800b45a:	61a3      	str	r3, [r4, #24]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	b943      	cbnz	r3, 800b472 <__swsetup_r+0xc6>
 800b460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b464:	d1ba      	bne.n	800b3dc <__swsetup_r+0x30>
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	0781      	lsls	r1, r0, #30
 800b46a:	bf58      	it	pl
 800b46c:	6963      	ldrpl	r3, [r4, #20]
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	e7f4      	b.n	800b45c <__swsetup_r+0xb0>
 800b472:	2000      	movs	r0, #0
 800b474:	e7f7      	b.n	800b466 <__swsetup_r+0xba>
 800b476:	bf00      	nop
 800b478:	2000000c 	.word	0x2000000c
 800b47c:	0800b9b4 	.word	0x0800b9b4
 800b480:	0800b9d4 	.word	0x0800b9d4
 800b484:	0800b994 	.word	0x0800b994

0800b488 <__assert_func>:
 800b488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b48a:	4614      	mov	r4, r2
 800b48c:	461a      	mov	r2, r3
 800b48e:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <__assert_func+0x2c>)
 800b490:	4605      	mov	r5, r0
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68d8      	ldr	r0, [r3, #12]
 800b496:	b14c      	cbz	r4, 800b4ac <__assert_func+0x24>
 800b498:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <__assert_func+0x30>)
 800b49a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b49e:	9100      	str	r1, [sp, #0]
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	4906      	ldr	r1, [pc, #24]	; (800b4bc <__assert_func+0x34>)
 800b4a4:	f000 f8e0 	bl	800b668 <fiprintf>
 800b4a8:	f7fd fc8e 	bl	8008dc8 <abort>
 800b4ac:	4b04      	ldr	r3, [pc, #16]	; (800b4c0 <__assert_func+0x38>)
 800b4ae:	461c      	mov	r4, r3
 800b4b0:	e7f3      	b.n	800b49a <__assert_func+0x12>
 800b4b2:	bf00      	nop
 800b4b4:	2000000c 	.word	0x2000000c
 800b4b8:	0800bb65 	.word	0x0800bb65
 800b4bc:	0800bb72 	.word	0x0800bb72
 800b4c0:	0800bba0 	.word	0x0800bba0

0800b4c4 <_close_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	4d05      	ldr	r5, [pc, #20]	; (800b4e0 <_close_r+0x1c>)
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	602b      	str	r3, [r5, #0]
 800b4d0:	f7f7 fb64 	bl	8002b9c <_close>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_close_r+0x1a>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_close_r+0x1a>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20000970 	.word	0x20000970

0800b4e4 <__sflush_r>:
 800b4e4:	898a      	ldrh	r2, [r1, #12]
 800b4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	0710      	lsls	r0, r2, #28
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	d458      	bmi.n	800b5a4 <__sflush_r+0xc0>
 800b4f2:	684b      	ldr	r3, [r1, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dc05      	bgt.n	800b504 <__sflush_r+0x20>
 800b4f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	dc02      	bgt.n	800b504 <__sflush_r+0x20>
 800b4fe:	2000      	movs	r0, #0
 800b500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b506:	2e00      	cmp	r6, #0
 800b508:	d0f9      	beq.n	800b4fe <__sflush_r+0x1a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b510:	682f      	ldr	r7, [r5, #0]
 800b512:	602b      	str	r3, [r5, #0]
 800b514:	d032      	beq.n	800b57c <__sflush_r+0x98>
 800b516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	075a      	lsls	r2, r3, #29
 800b51c:	d505      	bpl.n	800b52a <__sflush_r+0x46>
 800b51e:	6863      	ldr	r3, [r4, #4]
 800b520:	1ac0      	subs	r0, r0, r3
 800b522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b524:	b10b      	cbz	r3, 800b52a <__sflush_r+0x46>
 800b526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b528:	1ac0      	subs	r0, r0, r3
 800b52a:	2300      	movs	r3, #0
 800b52c:	4602      	mov	r2, r0
 800b52e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b530:	4628      	mov	r0, r5
 800b532:	6a21      	ldr	r1, [r4, #32]
 800b534:	47b0      	blx	r6
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	d106      	bne.n	800b54a <__sflush_r+0x66>
 800b53c:	6829      	ldr	r1, [r5, #0]
 800b53e:	291d      	cmp	r1, #29
 800b540:	d82c      	bhi.n	800b59c <__sflush_r+0xb8>
 800b542:	4a2a      	ldr	r2, [pc, #168]	; (800b5ec <__sflush_r+0x108>)
 800b544:	40ca      	lsrs	r2, r1
 800b546:	07d6      	lsls	r6, r2, #31
 800b548:	d528      	bpl.n	800b59c <__sflush_r+0xb8>
 800b54a:	2200      	movs	r2, #0
 800b54c:	6062      	str	r2, [r4, #4]
 800b54e:	6922      	ldr	r2, [r4, #16]
 800b550:	04d9      	lsls	r1, r3, #19
 800b552:	6022      	str	r2, [r4, #0]
 800b554:	d504      	bpl.n	800b560 <__sflush_r+0x7c>
 800b556:	1c42      	adds	r2, r0, #1
 800b558:	d101      	bne.n	800b55e <__sflush_r+0x7a>
 800b55a:	682b      	ldr	r3, [r5, #0]
 800b55c:	b903      	cbnz	r3, 800b560 <__sflush_r+0x7c>
 800b55e:	6560      	str	r0, [r4, #84]	; 0x54
 800b560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b562:	602f      	str	r7, [r5, #0]
 800b564:	2900      	cmp	r1, #0
 800b566:	d0ca      	beq.n	800b4fe <__sflush_r+0x1a>
 800b568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b56c:	4299      	cmp	r1, r3
 800b56e:	d002      	beq.n	800b576 <__sflush_r+0x92>
 800b570:	4628      	mov	r0, r5
 800b572:	f7fd fc9b 	bl	8008eac <_free_r>
 800b576:	2000      	movs	r0, #0
 800b578:	6360      	str	r0, [r4, #52]	; 0x34
 800b57a:	e7c1      	b.n	800b500 <__sflush_r+0x1c>
 800b57c:	6a21      	ldr	r1, [r4, #32]
 800b57e:	2301      	movs	r3, #1
 800b580:	4628      	mov	r0, r5
 800b582:	47b0      	blx	r6
 800b584:	1c41      	adds	r1, r0, #1
 800b586:	d1c7      	bne.n	800b518 <__sflush_r+0x34>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0c4      	beq.n	800b518 <__sflush_r+0x34>
 800b58e:	2b1d      	cmp	r3, #29
 800b590:	d001      	beq.n	800b596 <__sflush_r+0xb2>
 800b592:	2b16      	cmp	r3, #22
 800b594:	d101      	bne.n	800b59a <__sflush_r+0xb6>
 800b596:	602f      	str	r7, [r5, #0]
 800b598:	e7b1      	b.n	800b4fe <__sflush_r+0x1a>
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a0:	81a3      	strh	r3, [r4, #12]
 800b5a2:	e7ad      	b.n	800b500 <__sflush_r+0x1c>
 800b5a4:	690f      	ldr	r7, [r1, #16]
 800b5a6:	2f00      	cmp	r7, #0
 800b5a8:	d0a9      	beq.n	800b4fe <__sflush_r+0x1a>
 800b5aa:	0793      	lsls	r3, r2, #30
 800b5ac:	bf18      	it	ne
 800b5ae:	2300      	movne	r3, #0
 800b5b0:	680e      	ldr	r6, [r1, #0]
 800b5b2:	bf08      	it	eq
 800b5b4:	694b      	ldreq	r3, [r1, #20]
 800b5b6:	eba6 0807 	sub.w	r8, r6, r7
 800b5ba:	600f      	str	r7, [r1, #0]
 800b5bc:	608b      	str	r3, [r1, #8]
 800b5be:	f1b8 0f00 	cmp.w	r8, #0
 800b5c2:	dd9c      	ble.n	800b4fe <__sflush_r+0x1a>
 800b5c4:	4643      	mov	r3, r8
 800b5c6:	463a      	mov	r2, r7
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	6a21      	ldr	r1, [r4, #32]
 800b5cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5ce:	47b0      	blx	r6
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	dc06      	bgt.n	800b5e2 <__sflush_r+0xfe>
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	e78e      	b.n	800b500 <__sflush_r+0x1c>
 800b5e2:	4407      	add	r7, r0
 800b5e4:	eba8 0800 	sub.w	r8, r8, r0
 800b5e8:	e7e9      	b.n	800b5be <__sflush_r+0xda>
 800b5ea:	bf00      	nop
 800b5ec:	20400001 	.word	0x20400001

0800b5f0 <_fflush_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	690b      	ldr	r3, [r1, #16]
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	b913      	cbnz	r3, 800b600 <_fflush_r+0x10>
 800b5fa:	2500      	movs	r5, #0
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	b118      	cbz	r0, 800b60a <_fflush_r+0x1a>
 800b602:	6983      	ldr	r3, [r0, #24]
 800b604:	b90b      	cbnz	r3, 800b60a <_fflush_r+0x1a>
 800b606:	f7ff f881 	bl	800a70c <__sinit>
 800b60a:	4b14      	ldr	r3, [pc, #80]	; (800b65c <_fflush_r+0x6c>)
 800b60c:	429c      	cmp	r4, r3
 800b60e:	d11b      	bne.n	800b648 <_fflush_r+0x58>
 800b610:	686c      	ldr	r4, [r5, #4]
 800b612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0ef      	beq.n	800b5fa <_fflush_r+0xa>
 800b61a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b61c:	07d0      	lsls	r0, r2, #31
 800b61e:	d404      	bmi.n	800b62a <_fflush_r+0x3a>
 800b620:	0599      	lsls	r1, r3, #22
 800b622:	d402      	bmi.n	800b62a <_fflush_r+0x3a>
 800b624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b626:	f7ff f914 	bl	800a852 <__retarget_lock_acquire_recursive>
 800b62a:	4628      	mov	r0, r5
 800b62c:	4621      	mov	r1, r4
 800b62e:	f7ff ff59 	bl	800b4e4 <__sflush_r>
 800b632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b634:	4605      	mov	r5, r0
 800b636:	07da      	lsls	r2, r3, #31
 800b638:	d4e0      	bmi.n	800b5fc <_fflush_r+0xc>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	059b      	lsls	r3, r3, #22
 800b63e:	d4dd      	bmi.n	800b5fc <_fflush_r+0xc>
 800b640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b642:	f7ff f907 	bl	800a854 <__retarget_lock_release_recursive>
 800b646:	e7d9      	b.n	800b5fc <_fflush_r+0xc>
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <_fflush_r+0x70>)
 800b64a:	429c      	cmp	r4, r3
 800b64c:	d101      	bne.n	800b652 <_fflush_r+0x62>
 800b64e:	68ac      	ldr	r4, [r5, #8]
 800b650:	e7df      	b.n	800b612 <_fflush_r+0x22>
 800b652:	4b04      	ldr	r3, [pc, #16]	; (800b664 <_fflush_r+0x74>)
 800b654:	429c      	cmp	r4, r3
 800b656:	bf08      	it	eq
 800b658:	68ec      	ldreq	r4, [r5, #12]
 800b65a:	e7da      	b.n	800b612 <_fflush_r+0x22>
 800b65c:	0800b9b4 	.word	0x0800b9b4
 800b660:	0800b9d4 	.word	0x0800b9d4
 800b664:	0800b994 	.word	0x0800b994

0800b668 <fiprintf>:
 800b668:	b40e      	push	{r1, r2, r3}
 800b66a:	b503      	push	{r0, r1, lr}
 800b66c:	4601      	mov	r1, r0
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	4805      	ldr	r0, [pc, #20]	; (800b688 <fiprintf+0x20>)
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	6800      	ldr	r0, [r0, #0]
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f7ff fcbf 	bl	800affc <_vfiprintf_r>
 800b67e:	b002      	add	sp, #8
 800b680:	f85d eb04 	ldr.w	lr, [sp], #4
 800b684:	b003      	add	sp, #12
 800b686:	4770      	bx	lr
 800b688:	2000000c 	.word	0x2000000c

0800b68c <_lseek_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4604      	mov	r4, r0
 800b690:	4608      	mov	r0, r1
 800b692:	4611      	mov	r1, r2
 800b694:	2200      	movs	r2, #0
 800b696:	4d05      	ldr	r5, [pc, #20]	; (800b6ac <_lseek_r+0x20>)
 800b698:	602a      	str	r2, [r5, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	f7f7 faa2 	bl	8002be4 <_lseek>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_lseek_r+0x1e>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_lseek_r+0x1e>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	20000970 	.word	0x20000970

0800b6b0 <__swhatbuf_r>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	460e      	mov	r6, r1
 800b6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	2900      	cmp	r1, #0
 800b6bc:	461d      	mov	r5, r3
 800b6be:	b096      	sub	sp, #88	; 0x58
 800b6c0:	da07      	bge.n	800b6d2 <__swhatbuf_r+0x22>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	89b3      	ldrh	r3, [r6, #12]
 800b6c8:	061a      	lsls	r2, r3, #24
 800b6ca:	d410      	bmi.n	800b6ee <__swhatbuf_r+0x3e>
 800b6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6d0:	e00e      	b.n	800b6f0 <__swhatbuf_r+0x40>
 800b6d2:	466a      	mov	r2, sp
 800b6d4:	f000 f882 	bl	800b7dc <_fstat_r>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	dbf2      	blt.n	800b6c2 <__swhatbuf_r+0x12>
 800b6dc:	9a01      	ldr	r2, [sp, #4]
 800b6de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6e6:	425a      	negs	r2, r3
 800b6e8:	415a      	adcs	r2, r3
 800b6ea:	602a      	str	r2, [r5, #0]
 800b6ec:	e7ee      	b.n	800b6cc <__swhatbuf_r+0x1c>
 800b6ee:	2340      	movs	r3, #64	; 0x40
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	b016      	add	sp, #88	; 0x58
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}

0800b6f8 <__smakebuf_r>:
 800b6f8:	898b      	ldrh	r3, [r1, #12]
 800b6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6fc:	079d      	lsls	r5, r3, #30
 800b6fe:	4606      	mov	r6, r0
 800b700:	460c      	mov	r4, r1
 800b702:	d507      	bpl.n	800b714 <__smakebuf_r+0x1c>
 800b704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	6123      	str	r3, [r4, #16]
 800b70c:	2301      	movs	r3, #1
 800b70e:	6163      	str	r3, [r4, #20]
 800b710:	b002      	add	sp, #8
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	466a      	mov	r2, sp
 800b716:	ab01      	add	r3, sp, #4
 800b718:	f7ff ffca 	bl	800b6b0 <__swhatbuf_r>
 800b71c:	9900      	ldr	r1, [sp, #0]
 800b71e:	4605      	mov	r5, r0
 800b720:	4630      	mov	r0, r6
 800b722:	f7fd fc0f 	bl	8008f44 <_malloc_r>
 800b726:	b948      	cbnz	r0, 800b73c <__smakebuf_r+0x44>
 800b728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72c:	059a      	lsls	r2, r3, #22
 800b72e:	d4ef      	bmi.n	800b710 <__smakebuf_r+0x18>
 800b730:	f023 0303 	bic.w	r3, r3, #3
 800b734:	f043 0302 	orr.w	r3, r3, #2
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	e7e3      	b.n	800b704 <__smakebuf_r+0xc>
 800b73c:	4b0d      	ldr	r3, [pc, #52]	; (800b774 <__smakebuf_r+0x7c>)
 800b73e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	6020      	str	r0, [r4, #0]
 800b744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b748:	81a3      	strh	r3, [r4, #12]
 800b74a:	9b00      	ldr	r3, [sp, #0]
 800b74c:	6120      	str	r0, [r4, #16]
 800b74e:	6163      	str	r3, [r4, #20]
 800b750:	9b01      	ldr	r3, [sp, #4]
 800b752:	b15b      	cbz	r3, 800b76c <__smakebuf_r+0x74>
 800b754:	4630      	mov	r0, r6
 800b756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b75a:	f000 f851 	bl	800b800 <_isatty_r>
 800b75e:	b128      	cbz	r0, 800b76c <__smakebuf_r+0x74>
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	f023 0303 	bic.w	r3, r3, #3
 800b766:	f043 0301 	orr.w	r3, r3, #1
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	89a0      	ldrh	r0, [r4, #12]
 800b76e:	4305      	orrs	r5, r0
 800b770:	81a5      	strh	r5, [r4, #12]
 800b772:	e7cd      	b.n	800b710 <__smakebuf_r+0x18>
 800b774:	0800a6a5 	.word	0x0800a6a5

0800b778 <__ascii_mbtowc>:
 800b778:	b082      	sub	sp, #8
 800b77a:	b901      	cbnz	r1, 800b77e <__ascii_mbtowc+0x6>
 800b77c:	a901      	add	r1, sp, #4
 800b77e:	b142      	cbz	r2, 800b792 <__ascii_mbtowc+0x1a>
 800b780:	b14b      	cbz	r3, 800b796 <__ascii_mbtowc+0x1e>
 800b782:	7813      	ldrb	r3, [r2, #0]
 800b784:	600b      	str	r3, [r1, #0]
 800b786:	7812      	ldrb	r2, [r2, #0]
 800b788:	1e10      	subs	r0, r2, #0
 800b78a:	bf18      	it	ne
 800b78c:	2001      	movne	r0, #1
 800b78e:	b002      	add	sp, #8
 800b790:	4770      	bx	lr
 800b792:	4610      	mov	r0, r2
 800b794:	e7fb      	b.n	800b78e <__ascii_mbtowc+0x16>
 800b796:	f06f 0001 	mvn.w	r0, #1
 800b79a:	e7f8      	b.n	800b78e <__ascii_mbtowc+0x16>

0800b79c <_read_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4604      	mov	r4, r0
 800b7a0:	4608      	mov	r0, r1
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4d05      	ldr	r5, [pc, #20]	; (800b7bc <_read_r+0x20>)
 800b7a8:	602a      	str	r2, [r5, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f7f7 f9bd 	bl	8002b2a <_read>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d102      	bne.n	800b7ba <_read_r+0x1e>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b103      	cbz	r3, 800b7ba <_read_r+0x1e>
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	20000970 	.word	0x20000970

0800b7c0 <__ascii_wctomb>:
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	b141      	cbz	r1, 800b7d8 <__ascii_wctomb+0x18>
 800b7c6:	2aff      	cmp	r2, #255	; 0xff
 800b7c8:	d904      	bls.n	800b7d4 <__ascii_wctomb+0x14>
 800b7ca:	228a      	movs	r2, #138	; 0x8a
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	601a      	str	r2, [r3, #0]
 800b7d2:	4770      	bx	lr
 800b7d4:	2001      	movs	r0, #1
 800b7d6:	700a      	strb	r2, [r1, #0]
 800b7d8:	4770      	bx	lr
	...

0800b7dc <_fstat_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4d06      	ldr	r5, [pc, #24]	; (800b7fc <_fstat_r+0x20>)
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4608      	mov	r0, r1
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	f7f7 f9e2 	bl	8002bb2 <_fstat>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	d102      	bne.n	800b7f8 <_fstat_r+0x1c>
 800b7f2:	682b      	ldr	r3, [r5, #0]
 800b7f4:	b103      	cbz	r3, 800b7f8 <_fstat_r+0x1c>
 800b7f6:	6023      	str	r3, [r4, #0]
 800b7f8:	bd38      	pop	{r3, r4, r5, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20000970 	.word	0x20000970

0800b800 <_isatty_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	2300      	movs	r3, #0
 800b804:	4d05      	ldr	r5, [pc, #20]	; (800b81c <_isatty_r+0x1c>)
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	f7f7 f9e0 	bl	8002bd0 <_isatty>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_isatty_r+0x1a>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_isatty_r+0x1a>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20000970 	.word	0x20000970

0800b820 <_init>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr

0800b82c <_fini>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr
