
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b700  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800b810  0800b810  0001b810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcd0  0800bcd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800bcd0  0800bcd0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bcd0  0800bcd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bcd0  0800bcd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b60  20000078  0800bd54  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  0800bd54  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbbd  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004196  00000000  00000000  0003fc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00043df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  00045190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d154  00000000  00000000  00046400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001614c  00000000  00000000  00063554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096713  00000000  00000000  000796a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fdb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006070  00000000  00000000  0010fe08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b7f8 	.word	0x0800b7f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800b7f8 	.word	0x0800b7f8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpun>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800109c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a0:	d102      	bne.n	80010a8 <__aeabi_fcmpun+0x14>
 80010a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010a6:	d108      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ac:	d102      	bne.n	80010b4 <__aeabi_fcmpun+0x20>
 80010ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010b2:	d102      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0001 	mov.w	r0, #1
 80010be:	4770      	bx	lr

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800111a:	2301      	movs	r3, #1
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	1dbb      	adds	r3, r7, #6
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	22d0      	movs	r2, #208	; 0xd0
 800112a:	21ef      	movs	r1, #239	; 0xef
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <read_chip_id+0x3c>)
 800112e:	f003 f8d1 	bl	80042d4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b55      	cmp	r3, #85	; 0x55
 8001136:	d001      	beq.n	800113c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001138:	2301      	movs	r3, #1
 800113a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800113c:	79fb      	ldrb	r3, [r7, #7]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000098 	.word	0x20000098

0800114c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af04      	add	r7, sp, #16
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001158:	2300      	movs	r3, #0
 800115a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d81a      	bhi.n	8001198 <set_oss+0x4c>
 8001162:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <set_oss+0x1c>)
 8001164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001168:	08001179 	.word	0x08001179
 800116c:	08001181 	.word	0x08001181
 8001170:	08001189 	.word	0x08001189
 8001174:	08001191 	.word	0x08001191
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2205      	movs	r2, #5
 800117c:	705a      	strb	r2, [r3, #1]
			break;
 800117e:	e00f      	b.n	80011a0 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2208      	movs	r2, #8
 8001184:	705a      	strb	r2, [r3, #1]
			break;
 8001186:	e00b      	b.n	80011a0 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	220e      	movs	r2, #14
 800118c:	705a      	strb	r2, [r3, #1]
			break;
 800118e:	e007      	b.n	80011a0 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	221a      	movs	r2, #26
 8001194:	705a      	strb	r2, [r3, #1]
			break;
 8001196:	e003      	b.n	80011a0 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2208      	movs	r2, #8
 800119c:	705a      	strb	r2, [r3, #1]
			break;
 800119e:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	78fa      	ldrb	r2, [r7, #3]
 80011a4:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80011b0:	2301      	movs	r3, #1
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2302      	movs	r3, #2
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	22f4      	movs	r2, #244	; 0xf4
 80011c2:	21ee      	movs	r1, #238	; 0xee
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <set_oss+0x88>)
 80011c6:	f002 ff8b 	bl	80040e0 <HAL_I2C_Mem_Write>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000098 	.word	0x20000098

080011d8 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001206:	2301      	movs	r3, #1
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	2316      	movs	r3, #22
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	22aa      	movs	r2, #170	; 0xaa
 8001218:	21ef      	movs	r1, #239	; 0xef
 800121a:	4828      	ldr	r0, [pc, #160]	; (80012bc <read_calib_data+0xe4>)
 800121c:	f003 f85a 	bl	80042d4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001220:	2300      	movs	r3, #0
 8001222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001226:	e03e      	b.n	80012a6 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001232:	4413      	add	r3, r2
 8001234:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b219      	sxth	r1, r3
 800123c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001240:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001244:	4413      	add	r3, r2
 8001246:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800124a:	b21a      	sxth	r2, r3
 800124c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	4403      	add	r3, r0
 8001256:	430a      	orrs	r2, r1
 8001258:	b212      	sxth	r2, r2
 800125a:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 800125c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	440b      	add	r3, r1
 800127e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 8001296:	2302      	movs	r3, #2
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800129c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012a0:	3301      	adds	r3, #1
 80012a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012aa:	2b0b      	cmp	r3, #11
 80012ac:	d9bc      	bls.n	8001228 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80012ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000098 	.word	0x20000098

080012c0 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2204      	movs	r2, #4
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00a f982 	bl	800b5d8 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80012d4:	687c      	ldr	r4, [r7, #4]
 80012d6:	f7ff ff19 	bl	800110c <read_chip_id>
 80012da:	4603      	mov	r3, r0
 80012dc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	687c      	ldr	r4, [r7, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff77 	bl	80011d8 <read_calib_data>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3338      	adds	r3, #56	; 0x38
 80012f4:	2101      	movs	r1, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff28 	bl	800114c <set_oss>
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bd90      	pop	{r4, r7, pc}

08001304 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 800130a:	2351      	movs	r3, #81	; 0x51
 800130c:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 800130e:	1dba      	adds	r2, r7, #6
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	21e0      	movs	r1, #224	; 0xe0
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <request_range+0x2c>)
 800131a:	f002 fb83 	bl	8003a24 <HAL_I2C_Master_Transmit>
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <request_range+0x30>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000098 	.word	0x20000098
 8001334:	20000000 	.word	0x20000000

08001338 <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <getRange+0x34>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
			write = 1;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <getRange+0x38>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 800134a:	1d3a      	adds	r2, r7, #4
 800134c:	2364      	movs	r3, #100	; 0x64
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2302      	movs	r3, #2
 8001352:	21e1      	movs	r1, #225	; 0xe1
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <getRange+0x3c>)
 8001356:	f002 fc63 	bl	8003c20 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 800135a:	793b      	ldrb	r3, [r7, #4]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	797a      	ldrb	r2, [r7, #5]
 8001360:	4313      	orrs	r3, r2



	//return -1;

}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000bc0 	.word	0x20000bc0
 8001370:	20000000 	.word	0x20000000
 8001374:	20000098 	.word	0x20000098

08001378 <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <set_ucounter+0x30>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <set_ucounter+0x30>)
 8001388:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <set_ucounter+0x30>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4293      	cmp	r3, r2
 8001394:	d202      	bcs.n	800139c <set_ucounter+0x24>
		u_counter = 0;
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <set_ucounter+0x30>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
	}
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000094 	.word	0x20000094

080013ac <get_ucounter>:

int get_ucounter(void) {
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
	return u_counter;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <get_ucounter+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000094 	.word	0x20000094

080013c0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f008 ffa1 	bl	800a328 <asinf>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f008 ff21 	bl	800a240 <cosf>
 80013fe:	4603      	mov	r3, r0
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f008 ffaf 	bl	800a374 <sqrtf>
 8001416:	4603      	mov	r3, r0
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f001 f9e0 	bl	80027ee <_ZNSaIdED1Ev>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f9c3 	bl	80027ce <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZNSt6vectorIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ffeb 	bl	8001438 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f001 fe4a 	bl	8003108 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001474:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001478:	f001 fea8 	bl	80031cc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f86c 	bl	8001558 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 fb2c 	bl	8001adc <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001484:	f000 f8b8 	bl	80015f8 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8001488:	f000 f9b4 	bl	80017f4 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 800148c:	f000 f8e8 	bl	8001660 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001490:	f000 faf4 	bl	8001a7c <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8001494:	f000 fa0a 	bl	80018ac <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001498:	f000 fa92 	bl	80019c0 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 800149c:	f000 fba2 	bl	8001be4 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 80014a0:	4825      	ldr	r0, [pc, #148]	; (8001538 <main+0xcc>)
 80014a2:	f7ff ff0d 	bl	80012c0 <bmp_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 80014a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014aa:	f001 fe8f 	bl	80031cc <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR)/65.5; GyroYh=GyroErr(GYRO_Y_ADDR)/65.5; GyroZh=GyroErr(GYRO_Z_ADDR)/65.5;
 80014ae:	2043      	movs	r0, #67	; 0x43
 80014b0:	f000 fddc 	bl	800206c <_Z7GyroErrh>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4921      	ldr	r1, [pc, #132]	; (800153c <main+0xd0>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fcd9 	bl	8000e70 <__aeabi_fdiv>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <main+0xd4>)
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	2045      	movs	r0, #69	; 0x45
 80014c8:	f000 fdd0 	bl	800206c <_Z7GyroErrh>
 80014cc:	4603      	mov	r3, r0
 80014ce:	491b      	ldr	r1, [pc, #108]	; (800153c <main+0xd0>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fccd 	bl	8000e70 <__aeabi_fdiv>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <main+0xd8>)
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	2047      	movs	r0, #71	; 0x47
 80014e0:	f000 fdc4 	bl	800206c <_Z7GyroErrh>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4915      	ldr	r1, [pc, #84]	; (800153c <main+0xd0>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fcc1 	bl	8000e70 <__aeabi_fdiv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <main+0xdc>)
 80014f4:	601a      	str	r2, [r3, #0]
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 80014f6:	4815      	ldr	r0, [pc, #84]	; (800154c <main+0xe0>)
 80014f8:	f004 fab2 	bl	8005a60 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 80014fc:	4814      	ldr	r0, [pc, #80]	; (8001550 <main+0xe4>)
 80014fe:	f004 fa65 	bl	80059cc <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001502:	2100      	movs	r1, #0
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <main+0xe8>)
 8001506:	f004 fb4d 	bl	8005ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800150a:	2104      	movs	r1, #4
 800150c:	4811      	ldr	r0, [pc, #68]	; (8001554 <main+0xe8>)
 800150e:	f004 fb49 	bl	8005ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001512:	2108      	movs	r1, #8
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <main+0xe8>)
 8001516:	f004 fb45 	bl	8005ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800151a:	210c      	movs	r1, #12
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <main+0xe8>)
 800151e:	f004 fb41 	bl	8005ba4 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001522:	2108      	movs	r1, #8
 8001524:	480a      	ldr	r0, [pc, #40]	; (8001550 <main+0xe4>)
 8001526:	f004 fc37 	bl	8005d98 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SendTelem();
 800152a:	f000 fd11 	bl	8001f50 <_Z9SendTelemv>
	  Check_Arm();
 800152e:	f000 fb8d 	bl	8001c4c <_Z9Check_Armv>
	  Check_Disarm();
 8001532:	f000 fbe9 	bl	8001d08 <_Z12Check_Disarmv>
	  SendTelem();
 8001536:	e7f8      	b.n	800152a <main+0xbe>
 8001538:	20000848 	.word	0x20000848
 800153c:	42830000 	.word	0x42830000
 8001540:	20000264 	.word	0x20000264
 8001544:	20000268 	.word	0x20000268
 8001548:	2000026c 	.word	0x2000026c
 800154c:	20000134 	.word	0x20000134
 8001550:	2000017c 	.word	0x2000017c
 8001554:	200000ec 	.word	0x200000ec

08001558 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b090      	sub	sp, #64	; 0x40
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	2228      	movs	r2, #40	; 0x28
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f00a f836 	bl	800b5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001588:	2301      	movs	r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158c:	2302      	movs	r3, #2
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001596:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fda9 	bl	80050f8 <HAL_RCC_OscConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80015b6:	f001 f905 	bl	80027c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015be:	2302      	movs	r3, #2
 80015c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2102      	movs	r1, #2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 f80f 	bl	80055f8 <HAL_RCC_ClockConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80015ea:	f001 f8eb 	bl	80027c4 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3740      	adds	r7, #64	; 0x40
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <_ZL12MX_I2C1_Initv+0x60>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001604:	4a15      	ldr	r2, [pc, #84]	; (800165c <_ZL12MX_I2C1_Initv+0x64>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001636:	f002 f8b1 	bl	800379c <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf14      	ite	ne
 8001640:	2301      	movne	r3, #1
 8001642:	2300      	moveq	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800164a:	f001 f8bb 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000098 	.word	0x20000098
 8001658:	40005400 	.word	0x40005400
 800165c:	00061a80 	.word	0x00061a80

08001660 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b092      	sub	sp, #72	; 0x48
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2220      	movs	r2, #32
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f009 ffa4 	bl	800b5d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001690:	4b56      	ldr	r3, [pc, #344]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 8001692:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <_ZL12MX_TIM1_Initv+0x190>)
 8001694:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001696:	4b55      	ldr	r3, [pc, #340]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 8001698:	2247      	movs	r2, #71	; 0x47
 800169a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80016a2:	4b52      	ldr	r3, [pc, #328]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80016a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b50      	ldr	r3, [pc, #320]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b0:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016bc:	484b      	ldr	r0, [pc, #300]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80016be:	f004 fa21 	bl	8005b04 <HAL_TIM_PWM_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf14      	ite	ne
 80016c8:	2301      	movne	r3, #1
 80016ca:	2300      	moveq	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80016d2:	f001 f877 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e2:	4619      	mov	r1, r3
 80016e4:	4841      	ldr	r0, [pc, #260]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80016e6:	f005 fb8d 	bl	8006e04 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80016fa:	f001 f863 	bl	80027c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fe:	2360      	movs	r3, #96	; 0x60
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	4832      	ldr	r0, [pc, #200]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 8001724:	f004 fdda 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf14      	ite	ne
 800172e:	2301      	movne	r3, #1
 8001730:	2300      	moveq	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001738:	f001 f844 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	2204      	movs	r2, #4
 8001742:	4619      	mov	r1, r3
 8001744:	4829      	ldr	r0, [pc, #164]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 8001746:	f004 fdc9 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf14      	ite	ne
 8001750:	2301      	movne	r3, #1
 8001752:	2300      	moveq	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 800175a:	f001 f833 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	2208      	movs	r2, #8
 8001764:	4619      	mov	r1, r3
 8001766:	4821      	ldr	r0, [pc, #132]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 8001768:	f004 fdb8 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 800177c:	f001 f822 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	220c      	movs	r2, #12
 8001786:	4619      	mov	r1, r3
 8001788:	4818      	ldr	r0, [pc, #96]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 800178a:	f004 fda7 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 800179e:	f001 f811 	bl	80027c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80017c6:	f005 fb7b 	bl	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 80017da:	f000 fff3 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <_ZL12MX_TIM1_Initv+0x18c>)
 80017e0:	f001 fb54 	bl	8002e8c <HAL_TIM_MspPostInit>

}
 80017e4:	bf00      	nop
 80017e6:	3748      	adds	r7, #72	; 0x48
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200000ec 	.word	0x200000ec
 80017f0:	40012c00 	.word	0x40012c00

080017f4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001808:	463b      	mov	r3, r7
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 800181a:	2247      	movs	r2, #71	; 0x47
 800181c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001826:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800182a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001838:	481b      	ldr	r0, [pc, #108]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 800183a:	f004 f877 	bl	800592c <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800184e:	f000 ffb9 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	4619      	mov	r1, r3
 800185e:	4812      	ldr	r0, [pc, #72]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001860:	f004 fdfa 	bl	8006458 <HAL_TIM_ConfigClockSource>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001874:	f000 ffa6 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001886:	f005 fabd 	bl	8006e04 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 800189a:	f000 ff93 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000134 	.word	0x20000134

080018ac <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <_ZL12MX_TIM3_Initv+0x110>)
 80018da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80018de:	2247      	movs	r2, #71	; 0x47
 80018e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fc:	482e      	ldr	r0, [pc, #184]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80018fe:	f004 f815 	bl	800592c <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001912:	f000 ff57 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	4619      	mov	r1, r3
 8001922:	4825      	ldr	r0, [pc, #148]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001924:	f004 fd98 	bl	8006458 <HAL_TIM_ConfigClockSource>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001938:	f000 ff44 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800193c:	481e      	ldr	r0, [pc, #120]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 800193e:	f004 f9d3 	bl	8005ce8 <HAL_TIM_IC_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001952:	f000 ff37 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	4814      	ldr	r0, [pc, #80]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001966:	f005 fa4d 	bl	8006e04 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 800197a:	f000 ff23 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001982:	2301      	movs	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	2208      	movs	r2, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4808      	ldr	r0, [pc, #32]	; (80019b8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001996:	f004 fc0d 	bl	80061b4 <HAL_TIM_IC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80019aa:	f000 ff0b 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000017c 	.word	0x2000017c
 80019bc:	40000400 	.word	0x40000400

080019c0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 80019de:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <_ZL12MX_TIM4_Initv+0xb8>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 80019e4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80019e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 80019f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a04:	481b      	ldr	r0, [pc, #108]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a06:	f003 ff91 	bl	800592c <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001a1a:	f000 fed3 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4812      	ldr	r0, [pc, #72]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a2c:	f004 fd14 	bl	8006458 <HAL_TIM_ConfigClockSource>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8001a40:	f000 fec0 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a52:	f005 f9d7 	bl	8006e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8001a66:	f000 fead 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001c4 	.word	0x200001c4
 8001a78:	40000800 	.word	0x40000800

08001a7c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8001a8a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ab2:	f005 fa68 	bl	8006f86 <HAL_UART_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8001ac6:	f000 fe7d 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000020c 	.word	0x2000020c
 8001ad4:	40004400 	.word	0x40004400
 8001ad8:	000f4240 	.word	0x000f4240

08001adc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a37      	ldr	r2, [pc, #220]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b0e:	f043 0320 	orr.w	r3, r3, #32
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b3e:	f043 0308 	orr.w	r3, r3, #8
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b56:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <_ZL12MX_GPIO_Initv+0xfc>)
 8001b58:	f001 fdee 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2102      	movs	r1, #2
 8001b60:	481e      	ldr	r0, [pc, #120]	; (8001bdc <_ZL12MX_GPIO_Initv+0x100>)
 8001b62:	f001 fde9 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b6c:	481c      	ldr	r0, [pc, #112]	; (8001be0 <_ZL12MX_GPIO_Initv+0x104>)
 8001b6e:	f001 fde3 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <_ZL12MX_GPIO_Initv+0xfc>)
 8001b8c:	f001 fc50 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480d      	ldr	r0, [pc, #52]	; (8001bdc <_ZL12MX_GPIO_Initv+0x100>)
 8001ba8:	f001 fc42 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <_ZL12MX_GPIO_Initv+0x104>)
 8001bc6:	f001 fc33 	bl	8003430 <HAL_GPIO_Init>

}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40010800 	.word	0x40010800

08001be4 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8001bee:	2305      	movs	r3, #5
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	226b      	movs	r2, #107	; 0x6b
 8001bfe:	21d0      	movs	r1, #208	; 0xd0
 8001c00:	4811      	ldr	r0, [pc, #68]	; (8001c48 <_Z14MPU6050_Baslatv+0x64>)
 8001c02:	f002 fa6d 	bl	80040e0 <HAL_I2C_Mem_Write>
	config = 0x08;
 8001c06:	2308      	movs	r3, #8
 8001c08:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	221b      	movs	r2, #27
 8001c1a:	21d0      	movs	r1, #208	; 0xd0
 8001c1c:	480a      	ldr	r0, [pc, #40]	; (8001c48 <_Z14MPU6050_Baslatv+0x64>)
 8001c1e:	f002 fa5f 	bl	80040e0 <HAL_I2C_Mem_Write>
	config = 0x10;
 8001c22:	2310      	movs	r3, #16
 8001c24:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8001c26:	2305      	movs	r3, #5
 8001c28:	9302      	str	r3, [sp, #8]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	221c      	movs	r2, #28
 8001c36:	21d0      	movs	r1, #208	; 0xd0
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <_Z14MPU6050_Baslatv+0x64>)
 8001c3a:	f002 fa51 	bl	80040e0 <HAL_I2C_Mem_Write>
	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000098 	.word	0x20000098

08001c4c <_Z9Check_Armv>:


void Check_Arm() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	if(!armed) {
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <_Z9Check_Armv+0x9c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f083 0301 	eor.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d041      	beq.n	8001ce2 <_Z9Check_Armv+0x96>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <_Z9Check_Armv+0xa0>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f240 424b 	movw	r2, #1099	; 0x44b
 8001c66:	4293      	cmp	r3, r2
 8001c68:	dc37      	bgt.n	8001cda <_Z9Check_Armv+0x8e>
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <_Z9Check_Armv+0xa0>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001c72:	4293      	cmp	r3, r2
 8001c74:	dd31      	ble.n	8001cda <_Z9Check_Armv+0x8e>
				if(!arm_start){
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <_Z9Check_Armv+0xa4>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	f083 0301 	eor.w	r3, r3, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8001c84:	f001 fa98 	bl	80031b8 <HAL_GetTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <_Z9Check_Armv+0xa8>)
 8001c8e:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <_Z9Check_Armv+0xa4>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8001c96:	f001 fa8f 	bl	80031b8 <HAL_GetTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <_Z9Check_Armv+0xa8>)
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	bf8c      	ite	hi
 8001caa:	2301      	movhi	r3, #1
 8001cac:	2300      	movls	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d016      	beq.n	8001ce2 <_Z9Check_Armv+0x96>
					controller.pid_roll.reset();
 8001cb4:	4810      	ldr	r0, [pc, #64]	; (8001cf8 <_Z9Check_Armv+0xac>)
 8001cb6:	f008 f8bb 	bl	8009e30 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8001cba:	4810      	ldr	r0, [pc, #64]	; (8001cfc <_Z9Check_Armv+0xb0>)
 8001cbc:	f008 f8b8 	bl	8009e30 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8001cc0:	480f      	ldr	r0, [pc, #60]	; (8001d00 <_Z9Check_Armv+0xb4>)
 8001cc2:	f008 f8b5 	bl	8009e30 <_ZN3PID5resetEv>
					armed = true;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_Z9Check_Armv+0x9c>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <_Z9Check_Armv+0xb8>)
 8001cd4:	f001 fd30 	bl	8003738 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8001cd8:	e003      	b.n	8001ce2 <_Z9Check_Armv+0x96>
				}

		}

		else {
			arm_start = false;
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <_Z9Check_Armv+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001ce0:	e7ff      	b.n	8001ce2 <_Z9Check_Armv+0x96>
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000819 	.word	0x20000819
 8001cec:	200007e4 	.word	0x200007e4
 8001cf0:	20000818 	.word	0x20000818
 8001cf4:	2000080c 	.word	0x2000080c
 8001cf8:	20000660 	.word	0x20000660
 8001cfc:	200006d0 	.word	0x200006d0
 8001d00:	20000740 	.word	0x20000740
 8001d04:	40010800 	.word	0x40010800

08001d08 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if(armed) {
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <_Z12Check_Disarmv+0x84>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d038      	beq.n	8001d86 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <_Z12Check_Disarmv+0x88>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f240 424b 	movw	r2, #1099	; 0x44b
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	dc2e      	bgt.n	8001d7e <_Z12Check_Disarmv+0x76>
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <_Z12Check_Disarmv+0x88>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f240 424b 	movw	r2, #1099	; 0x44b
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	dc28      	bgt.n	8001d7e <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <_Z12Check_Disarmv+0x8c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8001d3a:	f001 fa3d 	bl	80031b8 <HAL_GetTick>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_Z12Check_Disarmv+0x90>)
 8001d44:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <_Z12Check_Disarmv+0x8c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8001d4c:	f001 fa34 	bl	80031b8 <HAL_GetTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <_Z12Check_Disarmv+0x90>)
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf8c      	ite	hi
 8001d60:	2301      	movhi	r3, #1
 8001d62:	2300      	movls	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00d      	beq.n	8001d86 <_Z12Check_Disarmv+0x7e>
					armed = false;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_Z12Check_Disarmv+0x84>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d76:	4809      	ldr	r0, [pc, #36]	; (8001d9c <_Z12Check_Disarmv+0x94>)
 8001d78:	f001 fcde 	bl	8003738 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8001d7c:	e003      	b.n	8001d86 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <_Z12Check_Disarmv+0x8c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001d84:	e7ff      	b.n	8001d86 <_Z12Check_Disarmv+0x7e>
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000819 	.word	0x20000819
 8001d90:	200007e4 	.word	0x200007e4
 8001d94:	2000081b 	.word	0x2000081b
 8001d98:	20000810 	.word	0x20000810
 8001d9c:	40010800 	.word	0x40010800

08001da0 <_Z9TelemPackv>:

void TelemPack() {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8001da4:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <_Z9TelemPackv+0x188>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a60      	ldr	r2, [pc, #384]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001daa:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <_Z9TelemPackv+0x188>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001db2:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8001db4:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <_Z9TelemPackv+0x188>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a5c      	ldr	r2, [pc, #368]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001dba:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <_Z9TelemPackv+0x190>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001dc4:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <_Z9TelemPackv+0x190>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001dce:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <_Z9TelemPackv+0x190>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001dd8:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <_Z9TelemPackv+0x190>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001de2:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <_Z9TelemPackv+0x194>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a50      	ldr	r2, [pc, #320]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001dea:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 8001dec:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <_Z9TelemPackv+0x194>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a4e      	ldr	r2, [pc, #312]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001df2:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <_Z9TelemPackv+0x194>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001dfa:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <_Z9TelemPackv+0x188>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e02:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8001e04:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <_Z9TelemPackv+0x188>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e0a:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <_Z9TelemPackv+0x188>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e12:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8001e14:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <_Z9TelemPackv+0x194>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a44      	ldr	r2, [pc, #272]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e1a:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8001e1c:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <_Z9TelemPackv+0x194>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4a42      	ldr	r2, [pc, #264]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e22:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <_Z9TelemPackv+0x198>)
 8001e26:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e2a:	4a40      	ldr	r2, [pc, #256]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e2c:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8001e2e:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <_Z9TelemPackv+0x198>)
 8001e30:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001e34:	4a3d      	ldr	r2, [pc, #244]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e36:	63d3      	str	r3, [r2, #60]	; 0x3c


	  telem_pack.ekf.roll_comp =  EKF.roll_comp;
 8001e38:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <_Z9TelemPackv+0x198>)
 8001e3a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e40:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <_Z9TelemPackv+0x198>)
 8001e44:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001e48:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e4a:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <_Z9TelemPackv+0x198>)
 8001e4e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001e52:	4a36      	ldr	r2, [pc, #216]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e54:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <_Z9TelemPackv+0x198>)
 8001e58:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001e5c:	4a33      	ldr	r2, [pc, #204]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e5e:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001e62:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fdef 	bl	8000a4c <__aeabi_d2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e72:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8001e74:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001e76:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fde5 	bl	8000a4c <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e86:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001e8a:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fddb 	bl	8000a4c <__aeabi_d2f>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001e9a:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001e9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001ea4:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001ea8:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fdcc 	bl	8000a4c <__aeabi_d2f>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001eb8:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001ebc:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe fdc2 	bl	8000a4c <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001ecc:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001ed0:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fdb8 	bl	8000a4c <__aeabi_d2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <_Z9TelemPackv+0x19c>)
 8001ee4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001ee8:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001eea:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = sonar_alt;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <_Z9TelemPackv+0x1a0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001ef2:	67d3      	str	r3, [r2, #124]	; 0x7c
	  telem_pack.sonar_vel = sonar_vel;
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <_Z9TelemPackv+0x1a4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001efa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.baro_alt = baro_alt;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <_Z9TelemPackv+0x1a8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001f04:	6793      	str	r3, [r2, #120]	; 0x78

	  telem_pack.time_millis = HAL_GetTick();
 8001f06:	f001 f957 	bl	80031b8 <HAL_GetTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001f0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <_Z9TelemPackv+0x1ac>)
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <_Z9TelemPackv+0x18c>)
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	2388      	movs	r3, #136	; 0x88
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f009 fb33 	bl	800b588 <memcpy>
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000029c 	.word	0x2000029c
 8001f2c:	200002c0 	.word	0x200002c0
 8001f30:	200007b0 	.word	0x200007b0
 8001f34:	20000278 	.word	0x20000278
 8001f38:	200003d0 	.word	0x200003d0
 8001f3c:	20000588 	.word	0x20000588
 8001f40:	2000082c 	.word	0x2000082c
 8001f44:	20000834 	.word	0x20000834
 8001f48:	20000828 	.word	0x20000828
 8001f4c:	20000348 	.word	0x20000348

08001f50 <_Z9SendTelemv>:

void SendTelem() {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
	  TelemPack();
 8001f56:	f7ff ff23 	bl	8001da0 <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	2288      	movs	r2, #136	; 0x88
 8001f5e:	490e      	ldr	r1, [pc, #56]	; (8001f98 <_Z9SendTelemv+0x48>)
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <_Z9SendTelemv+0x4c>)
 8001f62:	f005 f85d 	bl	8007020 <HAL_UART_Transmit>
	  char end_char = '@';
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8001f6a:	1df9      	adds	r1, r7, #7
 8001f6c:	2364      	movs	r3, #100	; 0x64
 8001f6e:	2201      	movs	r2, #1
 8001f70:	480a      	ldr	r0, [pc, #40]	; (8001f9c <_Z9SendTelemv+0x4c>)
 8001f72:	f005 f855 	bl	8007020 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8001f76:	1df9      	adds	r1, r7, #7
 8001f78:	2364      	movs	r3, #100	; 0x64
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4807      	ldr	r0, [pc, #28]	; (8001f9c <_Z9SendTelemv+0x4c>)
 8001f7e:	f005 f84f 	bl	8007020 <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 8001f82:	f001 f919 	bl	80031b8 <HAL_GetTick>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <_Z9SendTelemv+0x50>)
 8001f8c:	601a      	str	r2, [r3, #0]


}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000348 	.word	0x20000348
 8001f9c:	2000020c 	.word	0x2000020c
 8001fa0:	20000814 	.word	0x20000814

08001fa4 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af04      	add	r7, sp, #16
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	9302      	str	r3, [sp, #8]
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	21d1      	movs	r1, #209	; 0xd1
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <_Z7GyroOkuh+0x40>)
 8001fc6:	f002 f985 	bl	80042d4 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001fca:	7b3b      	ldrb	r3, [r7, #12]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000098 	.word	0x20000098

08001fe8 <_Z6PWMYazv>:




void PWMYaz() {
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > 1050) {
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <_Z6PWMYazv+0x78>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f240 52db 	movw	r2, #1499	; 0x5db
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	dc1a      	bgt.n	800202e <_Z6PWMYazv+0x46>
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <_Z6PWMYazv+0x78>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f240 421a 	movw	r2, #1050	; 0x41a
 8002000:	4293      	cmp	r3, r2
 8002002:	dd14      	ble.n	800202e <_Z6PWMYazv+0x46>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <_Z6PWMYazv+0x7c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <_Z6PWMYazv+0x80>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_Z6PWMYazv+0x7c>)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_Z6PWMYazv+0x80>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <_Z6PWMYazv+0x7c>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <_Z6PWMYazv+0x80>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_Z6PWMYazv+0x7c>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_Z6PWMYazv+0x80>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
 800202c:	e014      	b.n	8002058 <_Z6PWMYazv+0x70>
	  }

	  else {
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <_Z6PWMYazv+0x80>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <_Z6PWMYazv+0x80>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <_Z6PWMYazv+0x80>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <_Z6PWMYazv+0x80>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002054:	641a      	str	r2, [r3, #64]	; 0x40

	  }
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	200007e4 	.word	0x200007e4
 8002064:	200007b0 	.word	0x200007b0
 8002068:	200000ec 	.word	0x200000ec

0800206c <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002086:	da12      	bge.n	80020ae <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff8a 	bl	8001fa4 <_Z7GyroOkuh>
 8002090:	4603      	mov	r3, r0
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fde4 	bl	8000c60 <__aeabi_i2f>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7fe fd2b 	bl	8000af8 <__addsf3>
 80020a2:	4603      	mov	r3, r0
 80020a4:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	e7e8      	b.n	8002080 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80020ae:	4905      	ldr	r1, [pc, #20]	; (80020c4 <_Z7GyroErrh+0x58>)
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7fe fedd 	bl	8000e70 <__aeabi_fdiv>
 80020b6:	4603      	mov	r3, r0
 80020b8:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	44fa0000 	.word	0x44fa0000

080020c8 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <_Z11MotorBaslatv+0x38>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <_Z11MotorBaslatv+0x38>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_Z11MotorBaslatv+0x38>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020e8:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <_Z11MotorBaslatv+0x38>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 80020f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f8:	f001 f868 	bl	80031cc <HAL_Delay>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200000ec 	.word	0x200000ec
 8002104:	00000000 	.word	0x00000000

08002108 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	b0a1      	sub	sp, #132	; 0x84
 800210c:	af12      	add	r7, sp, #72	; 0x48
 800210e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002114:	4293      	cmp	r3, r2
 8002116:	f040 8287 	bne.w	8002628 <HAL_TIM_PeriodElapsedCallback+0x520>
		//1.25 ms || 800 Hz
		set_ucounter(SONAR_CLOCK_RATE);
 800211a:	2032      	movs	r0, #50	; 0x32
 800211c:	f7ff f92c 	bl	8001378 <set_ucounter>

		controller_counter++;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800212a:	801a      	strh	r2, [r3, #0]

		//if(sonar_counter == 40) { // || 20 Hz
		 // sonar_counter = 0;
		  //sonar_send_time = HAL_GetTick();
		if(get_ucounter() == 1) {
 800212c:	f7ff f93e 	bl	80013ac <get_ucounter>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x48>
			request_range();
 8002140:	f7ff f8e0 	bl	8001304 <request_range>
 8002144:	e0a5      	b.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x18a>
 8002146:	bf00      	nop
 8002148:	20000134 	.word	0x20000134
 800214c:	20000844 	.word	0x20000844
			//sonar_range = getRange();
		}

		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8002150:	f7ff f92c 	bl	80013ac <get_ucounter>
 8002154:	4603      	mov	r3, r0
 8002156:	2b32      	cmp	r3, #50	; 0x32
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8096 	beq.w	8002292 <HAL_TIM_PeriodElapsedCallback+0x18a>
		  sonar_range = getRange();
 8002166:	f7ff f8e7 	bl	8001338 <getRange>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	4bb2      	ldr	r3, [pc, #712]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002170:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8002172:	4bb2      	ldr	r3, [pc, #712]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4ab2      	ldr	r2, [pc, #712]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002178:	6013      	str	r3, [r2, #0]
		  sonar_alt = (float)sonar_range/100.0 * cos(abs(deg2rad*state.angles[0]))* cos(abs(deg2rad*state.angles[1]));
 800217a:	4baf      	ldr	r3, [pc, #700]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fd6a 	bl	8000c58 <__aeabi_ui2f>
 8002184:	4603      	mov	r3, r0
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f946 	bl	8000418 <__aeabi_f2d>
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	4bac      	ldr	r3, [pc, #688]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002192:	f7fe fac3 	bl	800071c <__aeabi_ddiv>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4614      	mov	r4, r2
 800219c:	461d      	mov	r5, r3
 800219e:	4baa      	ldr	r3, [pc, #680]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	49aa      	ldr	r1, [pc, #680]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fdaf 	bl	8000d08 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f907 	bl	80013c0 <_ZSt3absf>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f91b 	bl	80013f0 <_ZSt3cosf>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f92b 	bl	8000418 <__aeabi_f2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4620      	mov	r0, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	f7fe f97d 	bl	80004c8 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4614      	mov	r4, r2
 80021d4:	461d      	mov	r5, r3
 80021d6:	4b9c      	ldr	r3, [pc, #624]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	499c      	ldr	r1, [pc, #624]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fd93 	bl	8000d08 <__aeabi_fmul>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f8eb 	bl	80013c0 <_ZSt3absf>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f8ff 	bl	80013f0 <_ZSt3cosf>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f90f 	bl	8000418 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe f961 	bl	80004c8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fc1d 	bl	8000a4c <__aeabi_d2f>
 8002212:	4603      	mov	r3, r0
 8002214:	4a89      	ldr	r2, [pc, #548]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002216:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8002218:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
		  sonar_vel = (sonar_alt - sonar_alt_) / sonar_st;
 800221e:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a87      	ldr	r2, [pc, #540]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fc63 	bl	8000af4 <__aeabi_fsub>
 800222e:	4603      	mov	r3, r0
 8002230:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fe1c 	bl	8000e70 <__aeabi_fdiv>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800223e:	601a      	str	r2, [r3, #0]

		  if(abs(sonar_vel) > 10) {
 8002240:	4b83      	ldr	r3, [pc, #524]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f8bb 	bl	80013c0 <_ZSt3absf>
 800224a:	4603      	mov	r3, r0
 800224c:	2201      	movs	r2, #1
 800224e:	4614      	mov	r4, r2
 8002250:	4980      	ldr	r1, [pc, #512]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe ff14 	bl	8001080 <__aeabi_fcmpgt>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_PeriodElapsedCallback+0x15a>
 800225e:	2300      	movs	r3, #0
 8002260:	461c      	mov	r4, r3
 8002262:	b2e3      	uxtb	r3, r4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d014      	beq.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x18a>
			  sonar_alt = sonar_alt_;
 8002268:	4b75      	ldr	r3, [pc, #468]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a73      	ldr	r2, [pc, #460]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800226e:	6013      	str	r3, [r2, #0]
			  sonar_vel = (sonar_alt - sonar_alt_) / sonar_st;
 8002270:	4b72      	ldr	r3, [pc, #456]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a72      	ldr	r2, [pc, #456]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fc3a 	bl	8000af4 <__aeabi_fsub>
 8002280:	4603      	mov	r3, r0
 8002282:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fdf3 	bl	8000e70 <__aeabi_fdiv>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b70      	ldr	r3, [pc, #448]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002290:	601a      	str	r2, [r3, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 8002292:	4b71      	ldr	r3, [pc, #452]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	2b02      	cmp	r3, #2
 8002298:	f040 81c6 	bne.w	8002628 <HAL_TIM_PeriodElapsedCallback+0x520>

		  controller_counter = 0;
 800229c:	4b6e      	ldr	r3, [pc, #440]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800229e:	2200      	movs	r2, #0
 80022a0:	801a      	strh	r2, [r3, #0]
		  controller_time_pass = HAL_GetTick() - controller_time;
 80022a2:	f000 ff89 	bl	80031b8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80022b0:	6013      	str	r3, [r2, #0]
		  controller_time = HAL_GetTick();
 80022b2:	f000 ff81 	bl	80031b8 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80022ba:	6013      	str	r3, [r2, #0]
		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5 - GyroXh;
 80022bc:	2043      	movs	r0, #67	; 0x43
 80022be:	f7ff fe71 	bl	8001fa4 <_Z7GyroOkuh>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f895 	bl	80003f4 <__aeabi_i2d>
 80022ca:	a359      	add	r3, pc, #356	; (adr r3, 8002430 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe fa24 	bl	800071c <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4614      	mov	r4, r2
 80022da:	461d      	mov	r5, r3
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f899 	bl	8000418 <__aeabi_f2d>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ff33 	bl	8000158 <__aeabi_dsub>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7fe fba7 	bl	8000a4c <__aeabi_d2f>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002302:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/65.5 - GyroYh;
 8002304:	2045      	movs	r0, #69	; 0x45
 8002306:	f7ff fe4d 	bl	8001fa4 <_Z7GyroOkuh>
 800230a:	4603      	mov	r3, r0
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f871 	bl	80003f4 <__aeabi_i2d>
 8002312:	a347      	add	r3, pc, #284	; (adr r3, 8002430 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe fa00 	bl	800071c <__aeabi_ddiv>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4614      	mov	r4, r2
 8002322:	461d      	mov	r5, r3
 8002324:	4b51      	ldr	r3, [pc, #324]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f875 	bl	8000418 <__aeabi_f2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7fd ff0f 	bl	8000158 <__aeabi_dsub>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fb83 	bl	8000a4c <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	4a49      	ldr	r2, [pc, #292]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800234a:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/65.5 - GyroZh;
 800234c:	2047      	movs	r0, #71	; 0x47
 800234e:	f7ff fe29 	bl	8001fa4 <_Z7GyroOkuh>
 8002352:	4603      	mov	r3, r0
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f84d 	bl	80003f4 <__aeabi_i2d>
 800235a:	a335      	add	r3, pc, #212	; (adr r3, 8002430 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe f9dc 	bl	800071c <__aeabi_ddiv>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4614      	mov	r4, r2
 800236a:	461d      	mov	r5, r3
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f851 	bl	8000418 <__aeabi_f2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4620      	mov	r0, r4
 800237c:	4629      	mov	r1, r5
 800237e:	f7fd feeb 	bl	8000158 <__aeabi_dsub>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fb5f 	bl	8000a4c <__aeabi_d2f>
 800238e:	4603      	mov	r3, r0
 8002390:	4a39      	ldr	r2, [pc, #228]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002392:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  float gyro[3];
		  gyro[0] = gyroX;
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
		  gyro[1] = -1*gyroY;
 800239a:	4b35      	ldr	r3, [pc, #212]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	61fb      	str	r3, [r7, #28]
		  gyro[2] = gyroZ;
 80023a4:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	623b      	str	r3, [r7, #32]

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 80023aa:	203b      	movs	r0, #59	; 0x3b
 80023ac:	f7ff fdfa 	bl	8001fa4 <_Z7GyroOkuh>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fc54 	bl	8000c60 <__aeabi_i2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80023bc:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 80023be:	203d      	movs	r0, #61	; 0x3d
 80023c0:	f7ff fdf0 	bl	8001fa4 <_Z7GyroOkuh>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fc4a 	bl	8000c60 <__aeabi_i2f>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80023d0:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 80023d2:	203f      	movs	r0, #63	; 0x3f
 80023d4:	f7ff fde6 	bl	8001fa4 <_Z7GyroOkuh>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fc40 	bl	8000c60 <__aeabi_i2f>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80023e4:	6013      	str	r3, [r2, #0]

		  float acc[3];
		  acc[0] = accX;
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]
		  acc[1] = accY;
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	613b      	str	r3, [r7, #16]
		  acc[2] = accZ;
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fc80 	bl	8000d08 <__aeabi_fmul>
 8002408:	4603      	mov	r3, r0
 800240a:	461c      	mov	r4, r3
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fc76 	bl	8000d08 <__aeabi_fmul>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	4620      	mov	r0, r4
 8002422:	f7fe fb69 	bl	8000af8 <__addsf3>
 8002426:	4603      	mov	r3, r0
 8002428:	461c      	mov	r4, r3
 800242a:	e02d      	b.n	8002488 <HAL_TIM_PeriodElapsedCallback+0x380>
 800242c:	f3af 8000 	nop.w
 8002430:	00000000 	.word	0x00000000
 8002434:	40506000 	.word	0x40506000
 8002438:	20000838 	.word	0x20000838
 800243c:	2000082c 	.word	0x2000082c
 8002440:	20000830 	.word	0x20000830
 8002444:	40590000 	.word	0x40590000
 8002448:	2000029c 	.word	0x2000029c
 800244c:	3c8e8a72 	.word	0x3c8e8a72
 8002450:	20000834 	.word	0x20000834
 8002454:	41200000 	.word	0x41200000
 8002458:	20000844 	.word	0x20000844
 800245c:	2000083c 	.word	0x2000083c
 8002460:	20000840 	.word	0x20000840
 8002464:	20000264 	.word	0x20000264
 8002468:	2000024c 	.word	0x2000024c
 800246c:	20000268 	.word	0x20000268
 8002470:	20000250 	.word	0x20000250
 8002474:	2000026c 	.word	0x2000026c
 8002478:	20000254 	.word	0x20000254
 800247c:	20000258 	.word	0x20000258
 8002480:	2000025c 	.word	0x2000025c
 8002484:	20000260 	.word	0x20000260
 8002488:	4b6b      	ldr	r3, [pc, #428]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fc38 	bl	8000d08 <__aeabi_fmul>
 8002498:	4603      	mov	r3, r0
 800249a:	4619      	mov	r1, r3
 800249c:	4620      	mov	r0, r4
 800249e:	f7fe fb2b 	bl	8000af8 <__addsf3>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe ffaf 	bl	8001408 <_ZSt4sqrtf>
 80024aa:	6338      	str	r0, [r7, #48]	; 0x30
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 80024ac:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x534>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fcdc 	bl	8000e70 <__aeabi_fdiv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe ff8c 	bl	80013d8 <_ZSt4asinf>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fd ffa8 	bl	8000418 <__aeabi_f2d>
 80024c8:	a359      	add	r3, pc, #356	; (adr r3, 8002630 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fd fffb 	bl	80004c8 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f7fe fab7 	bl	8000a4c <__aeabi_d2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a57      	ldr	r2, [pc, #348]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80024e2:	6013      	str	r3, [r2, #0]

		  EKF.Run(gyro,acc);
 80024e4:	f107 020c 	add.w	r2, r7, #12
 80024e8:	f107 0318 	add.w	r3, r7, #24
 80024ec:	4619      	mov	r1, r3
 80024ee:	4855      	ldr	r0, [pc, #340]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80024f0:	f005 fd6a 	bl	8007fc8 <_ZN15Kalman_Filtresi3RunEPfS0_>
		  state.angles[0]  	  = EKF.state.angles[0];
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80024f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80024fa:	4a53      	ldr	r2, [pc, #332]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80024fc:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 80024fe:	4b51      	ldr	r3, [pc, #324]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002504:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002506:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8002508:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800250a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800250e:	4a4e      	ldr	r2, [pc, #312]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002510:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8002512:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002518:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800251a:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 800251c:	4b49      	ldr	r3, [pc, #292]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800251e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002522:	4a49      	ldr	r2, [pc, #292]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002524:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800252c:	4a46      	ldr	r2, [pc, #280]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800252e:	6153      	str	r3, [r2, #20]

		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));


		  controller_output_ang = controller.Run(state, state_des, ch[2]);
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 8002538:	4e43      	ldr	r6, [pc, #268]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800253a:	9310      	str	r3, [sp, #64]	; 0x40
 800253c:	4b44      	ldr	r3, [pc, #272]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800253e:	ac07      	add	r4, sp, #28
 8002540:	461d      	mov	r5, r3
 8002542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	466d      	mov	r5, sp
 8002550:	f106 0408 	add.w	r4, r6, #8
 8002554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002558:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800255c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002560:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002564:	493b      	ldr	r1, [pc, #236]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002566:	4660      	mov	r0, ip
 8002568:	f004 ff56 	bl	8007418 <_ZN10Controller3RunE5stateS0_i>
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	4619      	mov	r1, r3
 8002572:	4839      	ldr	r0, [pc, #228]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002574:	f000 f98f 	bl	8002896 <_ZNSt6vectorIdSaIdEEaSEOS1_>
 8002578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f96f 	bl	8002860 <_ZNSt6vectorIdSaIdEED1Ev>
		  controller_output[0] = controller.controller_output_pwm[0];
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002588:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 800258a:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800258e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002592:	4a32      	ldr	r2, [pc, #200]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002594:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8002596:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002598:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800259c:	4a2f      	ldr	r2, [pc, #188]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 800259e:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 80025a0:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80025a8:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80025b0:	4a27      	ldr	r2, [pc, #156]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80025b2:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025ba:	4a25      	ldr	r2, [pc, #148]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80025bc:	6113      	str	r3, [r2, #16]

		  ie_roll_sat = controller.pid_roll.ie_roll_sat;
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80025c6:	6013      	str	r3, [r2, #0]

		  w_ang = controller.pd_roll;
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025ca:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80025ce:	4925      	ldr	r1, [pc, #148]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80025d0:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 80025d4:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80025dc:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x564>)
 80025e6:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80025f0:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80025fa:	801a      	strh	r2, [r3, #0]

		  if(armed) {
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <HAL_TIM_PeriodElapsedCallback+0x518>
			  if(!motor_start) {
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f083 0301 	eor.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_TIM_PeriodElapsedCallback+0x514>
				  MotorBaslat();
 8002612:	f7ff fd59 	bl	80020c8 <_Z11MotorBaslatv>
				  motor_start = true;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
			  }

			  PWMYaz();
 800261c:	f7ff fce4 	bl	8001fe8 <_Z6PWMYazv>
		  }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002620:	2102      	movs	r1, #2
 8002622:	4817      	ldr	r0, [pc, #92]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002624:	f001 f8a0 	bl	8003768 <HAL_GPIO_TogglePin>
		}
		}
	}
 8002628:	bf00      	nop
 800262a:	373c      	adds	r7, #60	; 0x3c
 800262c:	46bd      	mov	sp, r7
 800262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002630:	d4fdf3b6 	.word	0xd4fdf3b6
 8002634:	404ca978 	.word	0x404ca978
 8002638:	20000260 	.word	0x20000260
 800263c:	2000025c 	.word	0x2000025c
 8002640:	20000270 	.word	0x20000270
 8002644:	200003d0 	.word	0x200003d0
 8002648:	2000029c 	.word	0x2000029c
 800264c:	200007e4 	.word	0x200007e4
 8002650:	20000278 	.word	0x20000278
 8002654:	20000588 	.word	0x20000588
 8002658:	200007c0 	.word	0x200007c0
 800265c:	200007b0 	.word	0x200007b0
 8002660:	20000274 	.word	0x20000274
 8002664:	20000820 	.word	0x20000820
 8002668:	200007cc 	.word	0x200007cc
 800266c:	200007ce 	.word	0x200007ce
 8002670:	200007d0 	.word	0x200007d0
 8002674:	200007d2 	.word	0x200007d2
 8002678:	20000819 	.word	0x20000819
 800267c:	2000081a 	.word	0x2000081a
 8002680:	40010c00 	.word	0x40010c00

08002684 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a43      	ldr	r2, [pc, #268]	; (800279c <HAL_TIM_IC_CaptureCallback+0x118>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d17f      	bne.n	8002794 <HAL_TIM_IC_CaptureCallback+0x110>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7f1b      	ldrb	r3, [r3, #28]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d17b      	bne.n	8002794 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 800269c:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <HAL_TIM_IC_CaptureCallback+0x120>)
 80026a2:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80026a4:	2108      	movs	r1, #8
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f003 ff9a 	bl	80065e0 <HAL_TIM_ReadCapturedValue>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80026b2:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 80026b4:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_TIM_IC_CaptureCallback+0x120>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <HAL_TIM_IC_CaptureCallback+0x124>)
 80026c0:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <HAL_TIM_IC_CaptureCallback+0x124>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0fdb      	lsrs	r3, r3, #31
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_TIM_IC_CaptureCallback+0x124>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80026d6:	33ff      	adds	r3, #255	; 0xff
 80026d8:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <HAL_TIM_IC_CaptureCallback+0x124>)
 80026da:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 80026dc:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x128>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4619      	mov	r1, r3
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <HAL_TIM_IC_CaptureCallback+0x124>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80026ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x128>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	bfcc      	ite	gt
 8002704:	2301      	movgt	r3, #1
 8002706:	2300      	movle	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x128>)
 8002710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002714:	801a      	strh	r2, [r3, #0]
						sync = 1;
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002718:	2201      	movs	r2, #1
 800271a:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	4824      	ldr	r0, [pc, #144]	; (80027b8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002726:	f007 fc4a 	bl	8009fbe <_ZN3PID7pwm2angEt>
 800272a:	4603      	mov	r3, r0
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_TIM_IC_CaptureCallback+0x138>)
 800272e:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	b29b      	uxth	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	481f      	ldr	r0, [pc, #124]	; (80027b8 <HAL_TIM_IC_CaptureCallback+0x134>)
 800273a:	f007 fc40 	bl	8009fbe <_ZN3PID7pwm2angEt>
 800273e:	4603      	mov	r3, r0
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_TIM_IC_CaptureCallback+0x138>)
 8002742:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_TIM_IC_CaptureCallback+0x138>)
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	4818      	ldr	r0, [pc, #96]	; (80027b8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002756:	f007 fc6f 	bl	800a038 <_ZN3PID8pwm2rateEt>
 800275a:	4603      	mov	r3, r0
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_TIM_IC_CaptureCallback+0x138>)
 800275e:	6153      	str	r3, [r2, #20]

				i++;
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x128>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b21b      	sxth	r3, r3
 8002766:	b29b      	uxth	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	b29b      	uxth	r3, r3
 800276c:	b21a      	sxth	r2, r3
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x128>)
 8002770:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x128>)
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b21b      	sxth	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800277c:	fb83 2301 	smull	r2, r3, r3, r1
 8002780:	105a      	asrs	r2, r3, #1
 8002782:	17cb      	asrs	r3, r1, #31
 8002784:	1ad2      	subs	r2, r2, r3
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	1aca      	subs	r2, r1, r3
 800278e:	b212      	sxth	r2, r2
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x128>)
 8002792:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000017c 	.word	0x2000017c
 80027a0:	200007d4 	.word	0x200007d4
 80027a4:	200007d8 	.word	0x200007d8
 80027a8:	200007dc 	.word	0x200007dc
 80027ac:	200007e0 	.word	0x200007e0
 80027b0:	200007e4 	.word	0x200007e4
 80027b4:	20000808 	.word	0x20000808
 80027b8:	20000518 	.word	0x20000518
 80027bc:	20000278 	.word	0x20000278
 80027c0:	38e38e39 	.word	0x38e38e39

080027c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c8:	b672      	cpsid	i
}
 80027ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027cc:	e7fe      	b.n	80027cc <Error_Handler+0x8>

080027ce <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f872 	bl	80028c0 <_ZNSaIdEC1Ev>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f87a 	bl	80028d8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f881 	bl	80028fe <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800281e:	461a      	mov	r2, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f876 	bl	8002912 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fdf9 	bl	8001420 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_ZN12MedianFilterIiLi100EEC1Ev>:
class MedianFilter {
public:

  /* Constructor
   */
  MedianFilter()
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  : m_idx(0), m_cnt(0), m_med(0)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
  {
  }
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681c      	ldr	r4, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f860 	bl	8002938 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002878:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800287a:	461a      	mov	r2, r3
 800287c:	4629      	mov	r1, r5
 800287e:	4620      	mov	r0, r4
 8002880:	f000 f864 	bl	800294c <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffbd 	bl	8002806 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bdb0      	pop	{r4, r5, r7, pc}

08002896 <_ZNSt6vectorIdSaIdEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002896:	b590      	push	{r4, r7, lr}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80028a4:	6838      	ldr	r0, [r7, #0]
 80028a6:	f000 f85f 	bl	8002968 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4622      	mov	r2, r4
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f863 	bl	800297c <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 80028b6:	687b      	ldr	r3, [r7, #4]
      }
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}

080028c0 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f895 	bl	80029f8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
	{ }
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
	if (__p)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f86e 	bl	8002a0c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f865 	bl	8002a2a <_ZSt8_DestroyIPdEvT_S1_>
    }
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f857 	bl	8002a44 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>
 8002996:	f107 021c 	add.w	r2, r7, #28
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f860 	bl	8002a66 <_ZNSt6vectorIdSaIdEEC1ERKS0_>
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff1f 	bl	80027ee <_ZNSaIdED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f864 	bl	8002a84 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f85d 	bl	8002a84 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ffb3 	bl	8002938 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80029d2:	4604      	mov	r4, r0
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ffae 	bl	8002938 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80029dc:	4603      	mov	r3, r0
 80029de:	4619      	mov	r1, r3
 80029e0:	4620      	mov	r0, r4
 80029e2:	f000 f86d 	bl	8002ac0 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>
	vector __tmp(get_allocator());
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff38 	bl	8002860 <_ZNSt6vectorIdSaIdEED1Ev>
      }
 80029f0:	bf00      	nop
 80029f2:	3724      	adds	r7, #36	; 0x24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f85d 	bl	8002adc <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002a34:	6839      	ldr	r1, [r7, #0]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f85d 	bl	8002af6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8002a4e:	6838      	ldr	r0, [r7, #0]
 8002a50:	f000 f85b 	bl	8002b0a <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f860 	bl	8002b1e <_ZNSaIdEC1ERKS_>
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f860 	bl	8002b3a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff20 	bl	80028d8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f85a 	bl	8002b58 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f856 	bl	8002b58 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6838      	ldr	r0, [r7, #0]
 8002ab4:	f000 f850 	bl	8002b58 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8002ab8:	bf00      	nop
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8002aca:	461a      	mov	r2, r3
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f858 	bl	8002b84 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002ae8:	68b8      	ldr	r0, [r7, #8]
 8002aea:	f007 fb87 	bl	800a1fc <_ZdlPv>
      }
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f837 	bl	8002b9e <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f833 	bl	8002bb4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	609a      	str	r2, [r3, #8]
	}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8002b90:	68b8      	ldr	r0, [r7, #8]
 8002b92:	f000 f821 	bl	8002bd8 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ffac 	bl	8002b1e <_ZNSaIdEC1ERKS_>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe85 	bl	80028d8 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d113      	bne.n	8002c24 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10e      	bne.n	8002c24 <_Z41__static_initialization_and_destruction_0ii+0x38>
Kalman_Filtresi EKF;
 8002c06:	4813      	ldr	r0, [pc, #76]	; (8002c54 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002c08:	f005 f956 	bl	8007eb8 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 8002c0c:	4812      	ldr	r0, [pc, #72]	; (8002c58 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002c0e:	f006 ff89 	bl	8009b24 <_ZN3PIDC1Ev>
Controller controller;
 8002c12:	4812      	ldr	r0, [pc, #72]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002c14:	f004 fb70 	bl	80072f8 <_ZN10ControllerC1Ev>
std::vector<double> controller_output_ang;
 8002c18:	4811      	ldr	r0, [pc, #68]	; (8002c60 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002c1a:	f7fe fc1a 	bl	8001452 <_ZNSt6vectorIdSaIdEEC1Ev>
MedianFilter<int, 100> sonar_filt;
 8002c1e:	4811      	ldr	r0, [pc, #68]	; (8002c64 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002c20:	f7ff fe0a 	bl	8002838 <_ZN12MedianFilterIiLi100EEC1Ev>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d110      	bne.n	8002c4c <_Z41__static_initialization_and_destruction_0ii+0x60>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10b      	bne.n	8002c4c <_Z41__static_initialization_and_destruction_0ii+0x60>
std::vector<double> controller_output_ang;
 8002c34:	480a      	ldr	r0, [pc, #40]	; (8002c60 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002c36:	f7ff fe13 	bl	8002860 <_ZNSt6vectorIdSaIdEED1Ev>
Controller controller;
 8002c3a:	4808      	ldr	r0, [pc, #32]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002c3c:	f004 ff00 	bl	8007a40 <_ZN10ControllerD1Ev>
PID pid;
 8002c40:	4805      	ldr	r0, [pc, #20]	; (8002c58 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002c42:	f007 fa6b 	bl	800a11c <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 8002c46:	4803      	ldr	r0, [pc, #12]	; (8002c54 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002c48:	f006 ff04 	bl	8009a54 <_ZN15Kalman_FiltresiD1Ev>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200003d0 	.word	0x200003d0
 8002c58:	20000518 	.word	0x20000518
 8002c5c:	20000588 	.word	0x20000588
 8002c60:	200007c0 	.word	0x200007c0
 8002c64:	20000884 	.word	0x20000884

08002c68 <_GLOBAL__sub_I_hi2c1>:
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7ff ffbb 	bl	8002bec <_Z41__static_initialization_and_destruction_0ii>
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_GLOBAL__sub_D_hi2c1>:
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7ff ffb3 	bl	8002bec <_Z41__static_initialization_and_destruction_0ii>
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_MspInit+0x5c>)
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_MspInit+0x5c>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6193      	str	r3, [r2, #24]
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_MspInit+0x5c>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_MspInit+0x5c>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_MspInit+0x5c>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	61d3      	str	r3, [r2, #28]
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_MspInit+0x5c>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_MspInit+0x60>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_MspInit+0x60>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000

08002cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <HAL_I2C_MspInit+0x70>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d123      	bne.n	8002d54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_I2C_MspInit+0x74>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <HAL_I2C_MspInit+0x74>)
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_I2C_MspInit+0x74>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d28:	2312      	movs	r3, #18
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	4619      	mov	r1, r3
 8002d36:	480b      	ldr	r0, [pc, #44]	; (8002d64 <HAL_I2C_MspInit+0x78>)
 8002d38:	f000 fb7a 	bl	8003430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_I2C_MspInit+0x74>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_I2C_MspInit+0x74>)
 8002d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d46:	61d3      	str	r3, [r2, #28]
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_I2C_MspInit+0x74>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40005400 	.word	0x40005400
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40010c00 	.word	0x40010c00

08002d68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_TIM_PWM_MspInit+0x34>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10b      	bne.n	8002d92 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_TIM_PWM_MspInit+0x38>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_TIM_PWM_MspInit+0x38>)
 8002d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d84:	6193      	str	r3, [r2, #24]
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_TIM_PWM_MspInit+0x38>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0318 	add.w	r3, r7, #24
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc2:	d114      	bne.n	8002dee <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	61d3      	str	r3, [r2, #28]
 8002dd0:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2101      	movs	r1, #1
 8002de0:	201c      	movs	r0, #28
 8002de2:	f000 faee 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002de6:	201c      	movs	r0, #28
 8002de8:	f000 fb07 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002dec:	e042      	b.n	8002e74 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <HAL_TIM_Base_MspInit+0xdc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d12c      	bne.n	8002e52 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	61d3      	str	r3, [r2, #28]
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	f107 0318 	add.w	r3, r7, #24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4812      	ldr	r0, [pc, #72]	; (8002e84 <HAL_TIM_Base_MspInit+0xe0>)
 8002e3c:	f000 faf8 	bl	8003430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2100      	movs	r1, #0
 8002e44:	201d      	movs	r0, #29
 8002e46:	f000 fabc 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e4a:	201d      	movs	r0, #29
 8002e4c:	f000 fad5 	bl	80033fa <HAL_NVIC_EnableIRQ>
}
 8002e50:	e010      	b.n	8002e74 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <HAL_TIM_Base_MspInit+0xe4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10b      	bne.n	8002e74 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002e62:	f043 0304 	orr.w	r3, r3, #4
 8002e66:	61d3      	str	r3, [r2, #28]
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <HAL_TIM_Base_MspInit+0xd8>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40010c00 	.word	0x40010c00
 8002e88:	40000800 	.word	0x40000800

08002e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_TIM_MspPostInit+0x5c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d118      	bne.n	8002ede <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_TIM_MspPostInit+0x60>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <HAL_TIM_MspPostInit+0x60>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6193      	str	r3, [r2, #24]
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_TIM_MspPostInit+0x60>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002ec4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0310 	add.w	r3, r7, #16
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <HAL_TIM_MspPostInit+0x64>)
 8002eda:	f000 faa9 	bl	8003430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ede:	bf00      	nop
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40012c00 	.word	0x40012c00
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40010800 	.word	0x40010800

08002ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <HAL_UART_MspInit+0x88>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d12f      	bne.n	8002f74 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_UART_MspInit+0x8c>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_UART_MspInit+0x8c>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1e:	61d3      	str	r3, [r2, #28]
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_UART_MspInit+0x8c>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_UART_MspInit+0x8c>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <HAL_UART_MspInit+0x8c>)
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	6193      	str	r3, [r2, #24]
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_UART_MspInit+0x8c>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f44:	2304      	movs	r3, #4
 8002f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4619      	mov	r1, r3
 8002f56:	480b      	ldr	r0, [pc, #44]	; (8002f84 <HAL_UART_MspInit+0x90>)
 8002f58:	f000 fa6a 	bl	8003430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4805      	ldr	r0, [pc, #20]	; (8002f84 <HAL_UART_MspInit+0x90>)
 8002f70:	f000 fa5e 	bl	8003430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f74:	bf00      	nop
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010800 	.word	0x40010800

08002f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <NMI_Handler+0x4>

08002f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <HardFault_Handler+0x4>

08002f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <MemManage_Handler+0x4>

08002f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <BusFault_Handler+0x4>

08002fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <UsageFault_Handler+0x4>

08002fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fce:	f000 f8e1 	bl	8003194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <TIM2_IRQHandler+0x10>)
 8002fde:	f002 ffe1 	bl	8005fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000134 	.word	0x20000134

08002fec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <TIM3_IRQHandler+0x10>)
 8002ff2:	f002 ffd7 	bl	8005fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000017c 	.word	0x2000017c

08003000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
	return 1;
 8003004:	2301      	movs	r3, #1
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <_kill>:

int _kill(int pid, int sig)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003018:	f008 fa7c 	bl	800b514 <__errno>
 800301c:	4603      	mov	r3, r0
 800301e:	2216      	movs	r2, #22
 8003020:	601a      	str	r2, [r3, #0]
	return -1;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_exit>:

void _exit (int status)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003036:	f04f 31ff 	mov.w	r1, #4294967295
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffe7 	bl	800300e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003040:	e7fe      	b.n	8003040 <_exit+0x12>
	...

08003044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800304c:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <_sbrk+0x5c>)
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <_sbrk+0x60>)
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <_sbrk+0x64>)
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <_sbrk+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003074:	f008 fa4e 	bl	800b514 <__errno>
 8003078:	4603      	mov	r3, r0
 800307a:	220c      	movs	r2, #12
 800307c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e009      	b.n	8003098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <_sbrk+0x64>)
 8003094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20005000 	.word	0x20005000
 80030a4:	00000400 	.word	0x00000400
 80030a8:	20000bb0 	.word	0x20000bb0
 80030ac:	20000bd8 	.word	0x20000bd8

080030b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030be:	e003      	b.n	80030c8 <LoopCopyDataInit>

080030c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030c6:	3104      	adds	r1, #4

080030c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030c8:	480a      	ldr	r0, [pc, #40]	; (80030f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030d0:	d3f6      	bcc.n	80030c0 <CopyDataInit>
  ldr r2, =_sbss
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030d4:	e002      	b.n	80030dc <LoopFillZerobss>

080030d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030d8:	f842 3b04 	str.w	r3, [r2], #4

080030dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030e0:	d3f9      	bcc.n	80030d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030e2:	f7ff ffe5 	bl	80030b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030e6:	f008 fa1b 	bl	800b520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030ea:	f7fe f9bf 	bl	800146c <main>
  bx lr
 80030ee:	4770      	bx	lr
  ldr r3, =_sidata
 80030f0:	0800bce0 	.word	0x0800bce0
  ldr r0, =_sdata
 80030f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030f8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80030fc:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003100:	20000bd8 	.word	0x20000bd8

08003104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003104:	e7fe      	b.n	8003104 <ADC1_2_IRQHandler>
	...

08003108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_Init+0x28>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a07      	ldr	r2, [pc, #28]	; (8003130 <HAL_Init+0x28>)
 8003112:	f043 0310 	orr.w	r3, r3, #16
 8003116:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003118:	2003      	movs	r0, #3
 800311a:	f000 f947 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800311e:	2000      	movs	r0, #0
 8003120:	f000 f808 	bl	8003134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003124:	f7ff fdb0 	bl	8002c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40022000 	.word	0x40022000

08003134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_InitTick+0x54>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_InitTick+0x58>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314a:	fbb3 f3f1 	udiv	r3, r3, r1
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f95f 	bl	8003416 <HAL_SYSTICK_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e00e      	b.n	8003180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d80a      	bhi.n	800317e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003168:	2200      	movs	r2, #0
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f000 f927 	bl	80033c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <HAL_InitTick+0x5c>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000004 	.word	0x20000004
 800318c:	2000000c 	.word	0x2000000c
 8003190:	20000008 	.word	0x20000008

08003194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_IncTick+0x1c>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_IncTick+0x20>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	4a03      	ldr	r2, [pc, #12]	; (80031b4 <HAL_IncTick+0x20>)
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	20000bc4 	.word	0x20000bc4

080031b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return uwTick;
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <HAL_GetTick+0x10>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000bc4 	.word	0x20000bc4

080031cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff fff0 	bl	80031b8 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d005      	beq.n	80031f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_Delay+0x44>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031f2:	bf00      	nop
 80031f4:	f7ff ffe0 	bl	80031b8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d8f7      	bhi.n	80031f4 <HAL_Delay+0x28>
  {
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c

08003214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003230:	4013      	ands	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800323c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	60d3      	str	r3, [r2, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <__NVIC_GetPriorityGrouping+0x18>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f003 0307 	and.w	r3, r3, #7
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	db0b      	blt.n	80032a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4906      	ldr	r1, [pc, #24]	; (80032ac <__NVIC_EnableIRQ+0x34>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2001      	movs	r0, #1
 800329a:	fa00 f202 	lsl.w	r2, r0, r2
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	; (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	; (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f1c3 0307 	rsb	r3, r3, #7
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf28      	it	cs
 8003322:	2304      	movcs	r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3304      	adds	r3, #4
 800332a:	2b06      	cmp	r3, #6
 800332c:	d902      	bls.n	8003334 <NVIC_EncodePriority+0x30>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3b03      	subs	r3, #3
 8003332:	e000      	b.n	8003336 <NVIC_EncodePriority+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	f04f 32ff 	mov.w	r2, #4294967295
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	4313      	orrs	r3, r2
         );
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff90 	bl	80032b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff2d 	bl	8003214 <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff42 	bl	800325c <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff90 	bl	8003304 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5f 	bl	80032b0 <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff35 	bl	8003278 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b08b      	sub	sp, #44	; 0x2c
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003442:	e169      	b.n	8003718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003444:	2201      	movs	r2, #1
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	429a      	cmp	r2, r3
 800345e:	f040 8158 	bne.w	8003712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a9a      	ldr	r2, [pc, #616]	; (80036d0 <HAL_GPIO_Init+0x2a0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d05e      	beq.n	800352a <HAL_GPIO_Init+0xfa>
 800346c:	4a98      	ldr	r2, [pc, #608]	; (80036d0 <HAL_GPIO_Init+0x2a0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d875      	bhi.n	800355e <HAL_GPIO_Init+0x12e>
 8003472:	4a98      	ldr	r2, [pc, #608]	; (80036d4 <HAL_GPIO_Init+0x2a4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d058      	beq.n	800352a <HAL_GPIO_Init+0xfa>
 8003478:	4a96      	ldr	r2, [pc, #600]	; (80036d4 <HAL_GPIO_Init+0x2a4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d86f      	bhi.n	800355e <HAL_GPIO_Init+0x12e>
 800347e:	4a96      	ldr	r2, [pc, #600]	; (80036d8 <HAL_GPIO_Init+0x2a8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d052      	beq.n	800352a <HAL_GPIO_Init+0xfa>
 8003484:	4a94      	ldr	r2, [pc, #592]	; (80036d8 <HAL_GPIO_Init+0x2a8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d869      	bhi.n	800355e <HAL_GPIO_Init+0x12e>
 800348a:	4a94      	ldr	r2, [pc, #592]	; (80036dc <HAL_GPIO_Init+0x2ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d04c      	beq.n	800352a <HAL_GPIO_Init+0xfa>
 8003490:	4a92      	ldr	r2, [pc, #584]	; (80036dc <HAL_GPIO_Init+0x2ac>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d863      	bhi.n	800355e <HAL_GPIO_Init+0x12e>
 8003496:	4a92      	ldr	r2, [pc, #584]	; (80036e0 <HAL_GPIO_Init+0x2b0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d046      	beq.n	800352a <HAL_GPIO_Init+0xfa>
 800349c:	4a90      	ldr	r2, [pc, #576]	; (80036e0 <HAL_GPIO_Init+0x2b0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d85d      	bhi.n	800355e <HAL_GPIO_Init+0x12e>
 80034a2:	2b12      	cmp	r3, #18
 80034a4:	d82a      	bhi.n	80034fc <HAL_GPIO_Init+0xcc>
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d859      	bhi.n	800355e <HAL_GPIO_Init+0x12e>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <HAL_GPIO_Init+0x80>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	0800352b 	.word	0x0800352b
 80034b4:	08003505 	.word	0x08003505
 80034b8:	08003517 	.word	0x08003517
 80034bc:	08003559 	.word	0x08003559
 80034c0:	0800355f 	.word	0x0800355f
 80034c4:	0800355f 	.word	0x0800355f
 80034c8:	0800355f 	.word	0x0800355f
 80034cc:	0800355f 	.word	0x0800355f
 80034d0:	0800355f 	.word	0x0800355f
 80034d4:	0800355f 	.word	0x0800355f
 80034d8:	0800355f 	.word	0x0800355f
 80034dc:	0800355f 	.word	0x0800355f
 80034e0:	0800355f 	.word	0x0800355f
 80034e4:	0800355f 	.word	0x0800355f
 80034e8:	0800355f 	.word	0x0800355f
 80034ec:	0800355f 	.word	0x0800355f
 80034f0:	0800355f 	.word	0x0800355f
 80034f4:	0800350d 	.word	0x0800350d
 80034f8:	08003521 	.word	0x08003521
 80034fc:	4a79      	ldr	r2, [pc, #484]	; (80036e4 <HAL_GPIO_Init+0x2b4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003502:	e02c      	b.n	800355e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	623b      	str	r3, [r7, #32]
          break;
 800350a:	e029      	b.n	8003560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	3304      	adds	r3, #4
 8003512:	623b      	str	r3, [r7, #32]
          break;
 8003514:	e024      	b.n	8003560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	3308      	adds	r3, #8
 800351c:	623b      	str	r3, [r7, #32]
          break;
 800351e:	e01f      	b.n	8003560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	330c      	adds	r3, #12
 8003526:	623b      	str	r3, [r7, #32]
          break;
 8003528:	e01a      	b.n	8003560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003532:	2304      	movs	r3, #4
 8003534:	623b      	str	r3, [r7, #32]
          break;
 8003536:	e013      	b.n	8003560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003540:	2308      	movs	r3, #8
 8003542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	611a      	str	r2, [r3, #16]
          break;
 800354a:	e009      	b.n	8003560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800354c:	2308      	movs	r3, #8
 800354e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	615a      	str	r2, [r3, #20]
          break;
 8003556:	e003      	b.n	8003560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003558:	2300      	movs	r3, #0
 800355a:	623b      	str	r3, [r7, #32]
          break;
 800355c:	e000      	b.n	8003560 <HAL_GPIO_Init+0x130>
          break;
 800355e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2bff      	cmp	r3, #255	; 0xff
 8003564:	d801      	bhi.n	800356a <HAL_GPIO_Init+0x13a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	e001      	b.n	800356e <HAL_GPIO_Init+0x13e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d802      	bhi.n	800357c <HAL_GPIO_Init+0x14c>
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	e002      	b.n	8003582 <HAL_GPIO_Init+0x152>
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	3b08      	subs	r3, #8
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	210f      	movs	r1, #15
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	401a      	ands	r2, r3
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	431a      	orrs	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80b1 	beq.w	8003712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035b0:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <HAL_GPIO_Init+0x2b8>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_GPIO_Init+0x2b8>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6193      	str	r3, [r2, #24]
 80035bc:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_GPIO_Init+0x2b8>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035c8:	4a48      	ldr	r2, [pc, #288]	; (80036ec <HAL_GPIO_Init+0x2bc>)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	220f      	movs	r2, #15
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <HAL_GPIO_Init+0x2c0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d013      	beq.n	800361c <HAL_GPIO_Init+0x1ec>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3f      	ldr	r2, [pc, #252]	; (80036f4 <HAL_GPIO_Init+0x2c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00d      	beq.n	8003618 <HAL_GPIO_Init+0x1e8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3e      	ldr	r2, [pc, #248]	; (80036f8 <HAL_GPIO_Init+0x2c8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <HAL_GPIO_Init+0x1e4>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <HAL_GPIO_Init+0x2cc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_GPIO_Init+0x1e0>
 800360c:	2303      	movs	r3, #3
 800360e:	e006      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 8003610:	2304      	movs	r3, #4
 8003612:	e004      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 8003614:	2302      	movs	r3, #2
 8003616:	e002      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 800361c:	2300      	movs	r3, #0
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	f002 0203 	and.w	r2, r2, #3
 8003624:	0092      	lsls	r2, r2, #2
 8003626:	4093      	lsls	r3, r2
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800362e:	492f      	ldr	r1, [pc, #188]	; (80036ec <HAL_GPIO_Init+0x2bc>)
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003648:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	492c      	ldr	r1, [pc, #176]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003656:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	43db      	mvns	r3, r3
 800365e:	4928      	ldr	r1, [pc, #160]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 8003660:	4013      	ands	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003670:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4922      	ldr	r1, [pc, #136]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
 800367c:	e006      	b.n	800368c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	43db      	mvns	r3, r3
 8003686:	491e      	ldr	r1, [pc, #120]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 8003688:	4013      	ands	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	4918      	ldr	r1, [pc, #96]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4914      	ldr	r1, [pc, #80]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d021      	beq.n	8003704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	490e      	ldr	r1, [pc, #56]	; (8003700 <HAL_GPIO_Init+0x2d0>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60cb      	str	r3, [r1, #12]
 80036cc:	e021      	b.n	8003712 <HAL_GPIO_Init+0x2e2>
 80036ce:	bf00      	nop
 80036d0:	10320000 	.word	0x10320000
 80036d4:	10310000 	.word	0x10310000
 80036d8:	10220000 	.word	0x10220000
 80036dc:	10210000 	.word	0x10210000
 80036e0:	10120000 	.word	0x10120000
 80036e4:	10110000 	.word	0x10110000
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40010800 	.word	0x40010800
 80036f4:	40010c00 	.word	0x40010c00
 80036f8:	40011000 	.word	0x40011000
 80036fc:	40011400 	.word	0x40011400
 8003700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_GPIO_Init+0x304>)
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	43db      	mvns	r3, r3
 800370c:	4909      	ldr	r1, [pc, #36]	; (8003734 <HAL_GPIO_Init+0x304>)
 800370e:	4013      	ands	r3, r2
 8003710:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	3301      	adds	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	f47f ae8e 	bne.w	8003444 <HAL_GPIO_Init+0x14>
  }
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	372c      	adds	r7, #44	; 0x2c
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43d9      	mvns	r1, r3
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	400b      	ands	r3, r1
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	611a      	str	r2, [r3, #16]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
	...

0800379c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e12b      	b.n	8003a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fa92 	bl	8002cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003800:	f002 f84e 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 8003804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a81      	ldr	r2, [pc, #516]	; (8003a10 <HAL_I2C_Init+0x274>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d807      	bhi.n	8003820 <HAL_I2C_Init+0x84>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a80      	ldr	r2, [pc, #512]	; (8003a14 <HAL_I2C_Init+0x278>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e006      	b.n	800382e <HAL_I2C_Init+0x92>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a7d      	ldr	r2, [pc, #500]	; (8003a18 <HAL_I2C_Init+0x27c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	bf94      	ite	ls
 8003828:	2301      	movls	r3, #1
 800382a:	2300      	movhi	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0e7      	b.n	8003a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a78      	ldr	r2, [pc, #480]	; (8003a1c <HAL_I2C_Init+0x280>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0c9b      	lsrs	r3, r3, #18
 8003840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <HAL_I2C_Init+0x274>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d802      	bhi.n	8003870 <HAL_I2C_Init+0xd4>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	e009      	b.n	8003884 <HAL_I2C_Init+0xe8>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <HAL_I2C_Init+0x284>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	3301      	adds	r3, #1
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	430b      	orrs	r3, r1
 800388a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	495c      	ldr	r1, [pc, #368]	; (8003a10 <HAL_I2C_Init+0x274>)
 80038a0:	428b      	cmp	r3, r1
 80038a2:	d819      	bhi.n	80038d8 <HAL_I2C_Init+0x13c>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e59      	subs	r1, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038b8:	400b      	ands	r3, r1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_I2C_Init+0x138>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1e59      	subs	r1, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d2:	e051      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 80038d4:	2304      	movs	r3, #4
 80038d6:	e04f      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d111      	bne.n	8003904 <HAL_I2C_Init+0x168>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e012      	b.n	800392a <HAL_I2C_Init+0x18e>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e58      	subs	r0, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	0099      	lsls	r1, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	fbb0 f3f3 	udiv	r3, r0, r3
 800391a:	3301      	adds	r3, #1
 800391c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Init+0x196>
 800392e:	2301      	movs	r3, #1
 8003930:	e022      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10e      	bne.n	8003958 <HAL_I2C_Init+0x1bc>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1e58      	subs	r0, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	440b      	add	r3, r1
 8003948:	fbb0 f3f3 	udiv	r3, r0, r3
 800394c:	3301      	adds	r3, #1
 800394e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003956:	e00f      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e58      	subs	r0, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	0099      	lsls	r1, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	fbb0 f3f3 	udiv	r3, r0, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	6809      	ldr	r1, [r1, #0]
 800397c:	4313      	orrs	r3, r2
 800397e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6911      	ldr	r1, [r2, #16]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68d2      	ldr	r2, [r2, #12]
 80039b2:	4311      	orrs	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	000186a0 	.word	0x000186a0
 8003a14:	001e847f 	.word	0x001e847f
 8003a18:	003d08ff 	.word	0x003d08ff
 8003a1c:	431bde83 	.word	0x431bde83
 8003a20:	10624dd3 	.word	0x10624dd3

08003a24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	460b      	mov	r3, r1
 8003a32:	817b      	strh	r3, [r7, #10]
 8003a34:	4613      	mov	r3, r2
 8003a36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a38:	f7ff fbbe 	bl	80031b8 <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	f040 80e0 	bne.w	8003c0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2319      	movs	r3, #25
 8003a52:	2201      	movs	r2, #1
 8003a54:	4970      	ldr	r1, [pc, #448]	; (8003c18 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f001 f972 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
 8003a64:	e0d3      	b.n	8003c0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_I2C_Master_Transmit+0x50>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0cc      	b.n	8003c0e <HAL_I2C_Master_Transmit+0x1ea>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d007      	beq.n	8003a9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2221      	movs	r2, #33	; 0x21
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	893a      	ldrh	r2, [r7, #8]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a50      	ldr	r2, [pc, #320]	; (8003c1c <HAL_I2C_Master_Transmit+0x1f8>)
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003adc:	8979      	ldrh	r1, [r7, #10]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fe5e 	bl	80047a4 <I2C_MasterRequestWrite>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e08d      	b.n	8003c0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b08:	e066      	b.n	8003bd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	6a39      	ldr	r1, [r7, #32]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 f9ec 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d107      	bne.n	8003b32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e06b      	b.n	8003c0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d11b      	bne.n	8003bac <HAL_I2C_Master_Transmit+0x188>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	6a39      	ldr	r1, [r7, #32]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f001 f9dc 	bl	8004f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d107      	bne.n	8003bd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e01a      	b.n	8003c0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d194      	bne.n	8003b0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	00100002 	.word	0x00100002
 8003c1c:	ffff0000 	.word	0xffff0000

08003c20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	817b      	strh	r3, [r7, #10]
 8003c30:	4613      	mov	r3, r2
 8003c32:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c38:	f7ff fabe 	bl	80031b8 <HAL_GetTick>
 8003c3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	f040 823f 	bne.w	80040ca <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2319      	movs	r3, #25
 8003c52:	2201      	movs	r2, #1
 8003c54:	497f      	ldr	r1, [pc, #508]	; (8003e54 <HAL_I2C_Master_Receive+0x234>)
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f001 f872 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	e232      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_I2C_Master_Receive+0x54>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e22b      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d007      	beq.n	8003c9a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2222      	movs	r2, #34	; 0x22
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	893a      	ldrh	r2, [r7, #8]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a5f      	ldr	r2, [pc, #380]	; (8003e58 <HAL_I2C_Master_Receive+0x238>)
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fde0 	bl	80048a8 <I2C_MasterRequestRead>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1ec      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d113      	bne.n	8003d22 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e1c0      	b.n	80040a4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d11e      	bne.n	8003d68 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3a:	b672      	cpsid	i
}
 8003d3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d64:	b662      	cpsie	i
}
 8003d66:	e035      	b.n	8003dd4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d11e      	bne.n	8003dae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d80:	b672      	cpsid	i
}
 8003d82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003daa:	b662      	cpsie	i
}
 8003dac:	e012      	b.n	8003dd4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003dd4:	e166      	b.n	80040a4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	f200 811f 	bhi.w	800401e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d123      	bne.n	8003e30 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f001 f8ff 	bl	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e167      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e2e:	e139      	b.n	80040a4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d152      	bne.n	8003ede <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4906      	ldr	r1, [pc, #24]	; (8003e5c <HAL_I2C_Master_Receive+0x23c>)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 ff7c 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e13c      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
 8003e52:	bf00      	nop
 8003e54:	00100002 	.word	0x00100002
 8003e58:	ffff0000 	.word	0xffff0000
 8003e5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e60:	b672      	cpsid	i
}
 8003e62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ea6:	b662      	cpsie	i
}
 8003ea8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003edc:	e0e2      	b.n	80040a4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	497b      	ldr	r1, [pc, #492]	; (80040d4 <HAL_I2C_Master_Receive+0x4b4>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 ff29 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0e9      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f08:	b672      	cpsid	i
}
 8003f0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f3e:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <HAL_I2C_Master_Receive+0x4b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_I2C_Master_Receive+0x4bc>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0a1a      	lsrs	r2, r3, #8
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00da      	lsls	r2, r3, #3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d118      	bne.n	8003f96 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f86:	b662      	cpsie	i
}
 8003f88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e09a      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d1d9      	bne.n	8003f58 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fe6:	b662      	cpsie	i
}
 8003fe8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800401c:	e042      	b.n	80040a4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 ffe4 	bl	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e04c      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d118      	bne.n	80040a4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f47f ae94 	bne.w	8003dd6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	00010004 	.word	0x00010004
 80040d8:	20000004 	.word	0x20000004
 80040dc:	14f8b589 	.word	0x14f8b589

080040e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	460b      	mov	r3, r1
 80040f4:	813b      	strh	r3, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040fa:	f7ff f85d 	bl	80031b8 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b20      	cmp	r3, #32
 800410a:	f040 80d9 	bne.w	80042c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2319      	movs	r3, #25
 8004114:	2201      	movs	r2, #1
 8004116:	496d      	ldr	r1, [pc, #436]	; (80042cc <HAL_I2C_Mem_Write+0x1ec>)
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fe11 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
 8004126:	e0cc      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Write+0x56>
 8004132:	2302      	movs	r3, #2
 8004134:	e0c5      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d007      	beq.n	800415c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2221      	movs	r2, #33	; 0x21
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_I2C_Mem_Write+0x1f0>)
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800419e:	88f8      	ldrh	r0, [r7, #6]
 80041a0:	893a      	ldrh	r2, [r7, #8]
 80041a2:	8979      	ldrh	r1, [r7, #10]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4603      	mov	r3, r0
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fc48 	bl	8004a44 <I2C_RequestMemoryWrite>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d052      	beq.n	8004260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e081      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fe92 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06b      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11b      	bne.n	8004260 <HAL_I2C_Mem_Write+0x180>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d017      	beq.n	8004260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1aa      	bne.n	80041be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fe7e 	bl	8004f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b04      	cmp	r3, #4
 800427e:	d107      	bne.n	8004290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e016      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	00100002 	.word	0x00100002
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	; 0x30
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042f2:	f7fe ff61 	bl	80031b8 <HAL_GetTick>
 80042f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	f040 8244 	bne.w	800478e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2319      	movs	r3, #25
 800430c:	2201      	movs	r2, #1
 800430e:	4982      	ldr	r1, [pc, #520]	; (8004518 <HAL_I2C_Mem_Read+0x244>)
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fd15 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
 800431e:	e237      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_I2C_Mem_Read+0x5a>
 800432a:	2302      	movs	r3, #2
 800432c:	e230      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d007      	beq.n	8004354 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2222      	movs	r2, #34	; 0x22
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a62      	ldr	r2, [pc, #392]	; (800451c <HAL_I2C_Mem_Read+0x248>)
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004396:	88f8      	ldrh	r0, [r7, #6]
 8004398:	893a      	ldrh	r2, [r7, #8]
 800439a:	8979      	ldrh	r1, [r7, #10]
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	4603      	mov	r3, r0
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fbe2 	bl	8004b70 <I2C_RequestMemoryRead>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1ec      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d113      	bne.n	80043e6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e1c0      	b.n	8004768 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d11e      	bne.n	800442c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043fe:	b672      	cpsid	i
}
 8004400:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004428:	b662      	cpsie	i
}
 800442a:	e035      	b.n	8004498 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	2b02      	cmp	r3, #2
 8004432:	d11e      	bne.n	8004472 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004442:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800446e:	b662      	cpsie	i
}
 8004470:	e012      	b.n	8004498 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004480:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004498:	e166      	b.n	8004768 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	2b03      	cmp	r3, #3
 80044a0:	f200 811f 	bhi.w	80046e2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d123      	bne.n	80044f4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fd9d 	bl	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e167      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044f2:	e139      	b.n	8004768 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d152      	bne.n	80045a2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	2200      	movs	r2, #0
 8004504:	4906      	ldr	r1, [pc, #24]	; (8004520 <HAL_I2C_Mem_Read+0x24c>)
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fc1a 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e13c      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
 8004516:	bf00      	nop
 8004518:	00100002 	.word	0x00100002
 800451c:	ffff0000 	.word	0xffff0000
 8004520:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004524:	b672      	cpsid	i
}
 8004526:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800456a:	b662      	cpsie	i
}
 800456c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045a0:	e0e2      	b.n	8004768 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	2200      	movs	r2, #0
 80045aa:	497b      	ldr	r1, [pc, #492]	; (8004798 <HAL_I2C_Mem_Read+0x4c4>)
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fbc7 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0e9      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045cc:	b672      	cpsid	i
}
 80045ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004602:	4b66      	ldr	r3, [pc, #408]	; (800479c <HAL_I2C_Mem_Read+0x4c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <HAL_I2C_Mem_Read+0x4cc>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0a1a      	lsrs	r2, r3, #8
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	00da      	lsls	r2, r3, #3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	3b01      	subs	r3, #1
 8004620:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d118      	bne.n	800465a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800464a:	b662      	cpsie	i
}
 800464c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e09a      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d1d9      	bne.n	800461c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046aa:	b662      	cpsie	i
}
 80046ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e0:	e042      	b.n	8004768 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fc82 	bl	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e04c      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d118      	bne.n	8004768 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f ae94 	bne.w	800449a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	00010004 	.word	0x00010004
 800479c:	20000004 	.word	0x20000004
 80047a0:	14f8b589 	.word	0x14f8b589

080047a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	460b      	mov	r3, r1
 80047b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d006      	beq.n	80047ce <I2C_MasterRequestWrite+0x2a>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d003      	beq.n	80047ce <I2C_MasterRequestWrite+0x2a>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047cc:	d108      	bne.n	80047e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e00b      	b.n	80047f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	2b12      	cmp	r3, #18
 80047e6:	d107      	bne.n	80047f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fa9b 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	d103      	bne.n	8004828 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e035      	b.n	8004898 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004834:	d108      	bne.n	8004848 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004844:	611a      	str	r2, [r3, #16]
 8004846:	e01b      	b.n	8004880 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004848:	897b      	ldrh	r3, [r7, #10]
 800484a:	11db      	asrs	r3, r3, #7
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f063 030f 	orn	r3, r3, #15
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	490e      	ldr	r1, [pc, #56]	; (80048a0 <I2C_MasterRequestWrite+0xfc>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fac1 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e010      	b.n	8004898 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004876:	897b      	ldrh	r3, [r7, #10]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <I2C_MasterRequestWrite+0x100>)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fab1 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	00010008 	.word	0x00010008
 80048a4:	00010002 	.word	0x00010002

080048a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	460b      	mov	r3, r1
 80048b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d006      	beq.n	80048e2 <I2C_MasterRequestRead+0x3a>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d003      	beq.n	80048e2 <I2C_MasterRequestRead+0x3a>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048e0:	d108      	bne.n	80048f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e00b      	b.n	800490c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	2b11      	cmp	r3, #17
 80048fa:	d107      	bne.n	800490c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fa11 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00d      	beq.n	8004940 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	d103      	bne.n	800493c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e079      	b.n	8004a34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004948:	d108      	bne.n	800495c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]
 800495a:	e05f      	b.n	8004a1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800495c:	897b      	ldrh	r3, [r7, #10]
 800495e:	11db      	asrs	r3, r3, #7
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 0306 	and.w	r3, r3, #6
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f063 030f 	orn	r3, r3, #15
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4930      	ldr	r1, [pc, #192]	; (8004a3c <I2C_MasterRequestRead+0x194>)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fa37 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e054      	b.n	8004a34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800498a:	897b      	ldrh	r3, [r7, #10]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4929      	ldr	r1, [pc, #164]	; (8004a40 <I2C_MasterRequestRead+0x198>)
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fa27 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e044      	b.n	8004a34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f9af 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00d      	beq.n	8004a04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f6:	d103      	bne.n	8004a00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e017      	b.n	8004a34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a04:	897b      	ldrh	r3, [r7, #10]
 8004a06:	11db      	asrs	r3, r3, #7
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0306 	and.w	r3, r3, #6
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f063 030e 	orn	r3, r3, #14
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4907      	ldr	r1, [pc, #28]	; (8004a40 <I2C_MasterRequestRead+0x198>)
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f9e3 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	00010008 	.word	0x00010008
 8004a40:	00010002 	.word	0x00010002

08004a44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	817b      	strh	r3, [r7, #10]
 8004a56:	460b      	mov	r3, r1
 8004a58:	813b      	strh	r3, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f960 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a94:	d103      	bne.n	8004a9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e05f      	b.n	8004b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	492d      	ldr	r1, [pc, #180]	; (8004b6c <I2C_RequestMemoryWrite+0x128>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f998 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e04c      	b.n	8004b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	6a39      	ldr	r1, [r7, #32]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fa02 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d107      	bne.n	8004b06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e02b      	b.n	8004b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	e021      	b.n	8004b60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	6a39      	ldr	r1, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f9dc 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d107      	bne.n	8004b52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e005      	b.n	8004b62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	00010002 	.word	0x00010002

08004b70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4603      	mov	r3, r0
 8004b80:	817b      	strh	r3, [r7, #10]
 8004b82:	460b      	mov	r3, r1
 8004b84:	813b      	strh	r3, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f8c2 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd0:	d103      	bne.n	8004bda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0aa      	b.n	8004d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bde:	897b      	ldrh	r3, [r7, #10]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	4952      	ldr	r1, [pc, #328]	; (8004d3c <I2C_RequestMemoryRead+0x1cc>)
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f8fa 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e097      	b.n	8004d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	6a39      	ldr	r1, [r7, #32]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f964 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d107      	bne.n	8004c42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e076      	b.n	8004d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4c:	893b      	ldrh	r3, [r7, #8]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]
 8004c56:	e021      	b.n	8004c9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c58:	893b      	ldrh	r3, [r7, #8]
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c68:	6a39      	ldr	r1, [r7, #32]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f93e 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d107      	bne.n	8004c8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e050      	b.n	8004d34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c92:	893b      	ldrh	r3, [r7, #8]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9e:	6a39      	ldr	r1, [r7, #32]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f923 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00d      	beq.n	8004cc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d107      	bne.n	8004cc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e035      	b.n	8004d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f82b 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfe:	d103      	bne.n	8004d08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e013      	b.n	8004d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d0c:	897b      	ldrh	r3, [r7, #10]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	4906      	ldr	r1, [pc, #24]	; (8004d3c <I2C_RequestMemoryRead+0x1cc>)
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f863 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	00010002 	.word	0x00010002

08004d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d50:	e025      	b.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d021      	beq.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fe fa2d 	bl	80031b8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d116      	bne.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e023      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10d      	bne.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	e00c      	b.n	8004dde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d0b6      	beq.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dfc:	e051      	b.n	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0c:	d123      	bne.n	8004e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f043 0204 	orr.w	r2, r3, #4
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e046      	b.n	8004ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d021      	beq.n	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fe f9ab 	bl	80031b8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d116      	bne.n	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e020      	b.n	8004ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d10c      	bne.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	e00b      	b.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	43da      	mvns	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d18d      	bne.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef8:	e02d      	b.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f8ce 	bl	800509c <I2C_IsAcknowledgeFailed>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e02d      	b.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d021      	beq.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fe f951 	bl	80031b8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e007      	b.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d1ca      	bne.n	8004efa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f7a:	e02d      	b.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f88d 	bl	800509c <I2C_IsAcknowledgeFailed>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e02d      	b.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d021      	beq.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f94:	f7fe f910 	bl	80031b8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d302      	bcc.n	8004faa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e007      	b.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d1ca      	bne.n	8004f7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ffc:	e042      	b.n	8005084 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b10      	cmp	r3, #16
 800500a:	d119      	bne.n	8005040 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0210 	mvn.w	r2, #16
 8005014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e029      	b.n	8005094 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005040:	f7fe f8ba 	bl	80031b8 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d116      	bne.n	8005084 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e007      	b.n	8005094 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d1b5      	bne.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d11b      	bne.n	80050ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	f043 0204 	orr.w	r2, r3, #4
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e26c      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8087 	beq.w	8005226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005118:	4b92      	ldr	r3, [pc, #584]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b04      	cmp	r3, #4
 8005122:	d00c      	beq.n	800513e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005124:	4b8f      	ldr	r3, [pc, #572]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b08      	cmp	r3, #8
 800512e:	d112      	bne.n	8005156 <HAL_RCC_OscConfig+0x5e>
 8005130:	4b8c      	ldr	r3, [pc, #560]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d10b      	bne.n	8005156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513e:	4b89      	ldr	r3, [pc, #548]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d06c      	beq.n	8005224 <HAL_RCC_OscConfig+0x12c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d168      	bne.n	8005224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e246      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x76>
 8005160:	4b80      	ldr	r3, [pc, #512]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a7f      	ldr	r2, [pc, #508]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e02e      	b.n	80051cc <HAL_RCC_OscConfig+0xd4>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x98>
 8005176:	4b7b      	ldr	r3, [pc, #492]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a7a      	ldr	r2, [pc, #488]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 800517c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4b78      	ldr	r3, [pc, #480]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a77      	ldr	r2, [pc, #476]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e01d      	b.n	80051cc <HAL_RCC_OscConfig+0xd4>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0xbc>
 800519a:	4b72      	ldr	r3, [pc, #456]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a71      	ldr	r2, [pc, #452]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	4b6f      	ldr	r3, [pc, #444]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a6e      	ldr	r2, [pc, #440]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0xd4>
 80051b4:	4b6b      	ldr	r3, [pc, #428]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6a      	ldr	r2, [pc, #424]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4b68      	ldr	r3, [pc, #416]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a67      	ldr	r2, [pc, #412]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fd fff0 	bl	80031b8 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fd ffec 	bl	80031b8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e1fa      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b5d      	ldr	r3, [pc, #372]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0xe4>
 80051fa:	e014      	b.n	8005226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fd ffdc 	bl	80031b8 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005204:	f7fd ffd8 	bl	80031b8 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e1e6      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005216:	4b53      	ldr	r3, [pc, #332]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x10c>
 8005222:	e000      	b.n	8005226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d063      	beq.n	80052fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005232:	4b4c      	ldr	r3, [pc, #304]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800523e:	4b49      	ldr	r3, [pc, #292]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	2b08      	cmp	r3, #8
 8005248:	d11c      	bne.n	8005284 <HAL_RCC_OscConfig+0x18c>
 800524a:	4b46      	ldr	r3, [pc, #280]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d116      	bne.n	8005284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005256:	4b43      	ldr	r3, [pc, #268]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_RCC_OscConfig+0x176>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e1ba      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526e:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4939      	ldr	r1, [pc, #228]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005282:	e03a      	b.n	80052fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d020      	beq.n	80052ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800528c:	4b36      	ldr	r3, [pc, #216]	; (8005368 <HAL_RCC_OscConfig+0x270>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005292:	f7fd ff91 	bl	80031b8 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529a:	f7fd ff8d 	bl	80031b8 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e19b      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ac:	4b2d      	ldr	r3, [pc, #180]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b8:	4b2a      	ldr	r3, [pc, #168]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4927      	ldr	r1, [pc, #156]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
 80052cc:	e015      	b.n	80052fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <HAL_RCC_OscConfig+0x270>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fd ff70 	bl	80031b8 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052dc:	f7fd ff6c 	bl	80031b8 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e17a      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03a      	beq.n	800537c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d019      	beq.n	8005342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005314:	f7fd ff50 	bl	80031b8 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531c:	f7fd ff4c 	bl	80031b8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e15a      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <HAL_RCC_OscConfig+0x26c>)
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800533a:	2001      	movs	r0, #1
 800533c:	f000 fad8 	bl	80058f0 <RCC_Delay>
 8005340:	e01c      	b.n	800537c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005348:	f7fd ff36 	bl	80031b8 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800534e:	e00f      	b.n	8005370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005350:	f7fd ff32 	bl	80031b8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d908      	bls.n	8005370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e140      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000
 8005368:	42420000 	.word	0x42420000
 800536c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005370:	4b9e      	ldr	r3, [pc, #632]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e9      	bne.n	8005350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80a6 	beq.w	80054d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538e:	4b97      	ldr	r3, [pc, #604]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10d      	bne.n	80053b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800539a:	4b94      	ldr	r3, [pc, #592]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	4a93      	ldr	r2, [pc, #588]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80053a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a4:	61d3      	str	r3, [r2, #28]
 80053a6:	4b91      	ldr	r3, [pc, #580]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	4b8e      	ldr	r3, [pc, #568]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d118      	bne.n	80053f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053c2:	4b8b      	ldr	r3, [pc, #556]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a8a      	ldr	r2, [pc, #552]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ce:	f7fd fef3 	bl	80031b8 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d6:	f7fd feef 	bl	80031b8 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	; 0x64
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0fd      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e8:	4b81      	ldr	r3, [pc, #516]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d106      	bne.n	800540a <HAL_RCC_OscConfig+0x312>
 80053fc:	4b7b      	ldr	r3, [pc, #492]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	4a7a      	ldr	r2, [pc, #488]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6213      	str	r3, [r2, #32]
 8005408:	e02d      	b.n	8005466 <HAL_RCC_OscConfig+0x36e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0x334>
 8005412:	4b76      	ldr	r3, [pc, #472]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	4a75      	ldr	r2, [pc, #468]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	6213      	str	r3, [r2, #32]
 800541e:	4b73      	ldr	r3, [pc, #460]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	4a72      	ldr	r2, [pc, #456]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005424:	f023 0304 	bic.w	r3, r3, #4
 8005428:	6213      	str	r3, [r2, #32]
 800542a:	e01c      	b.n	8005466 <HAL_RCC_OscConfig+0x36e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b05      	cmp	r3, #5
 8005432:	d10c      	bne.n	800544e <HAL_RCC_OscConfig+0x356>
 8005434:	4b6d      	ldr	r3, [pc, #436]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	4a6c      	ldr	r2, [pc, #432]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 800543a:	f043 0304 	orr.w	r3, r3, #4
 800543e:	6213      	str	r3, [r2, #32]
 8005440:	4b6a      	ldr	r3, [pc, #424]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	4a69      	ldr	r2, [pc, #420]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6213      	str	r3, [r2, #32]
 800544c:	e00b      	b.n	8005466 <HAL_RCC_OscConfig+0x36e>
 800544e:	4b67      	ldr	r3, [pc, #412]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	4a66      	ldr	r2, [pc, #408]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	6213      	str	r3, [r2, #32]
 800545a:	4b64      	ldr	r3, [pc, #400]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	4a63      	ldr	r2, [pc, #396]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546e:	f7fd fea3 	bl	80031b8 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005476:	f7fd fe9f 	bl	80031b8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e0ab      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548c:	4b57      	ldr	r3, [pc, #348]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ee      	beq.n	8005476 <HAL_RCC_OscConfig+0x37e>
 8005498:	e014      	b.n	80054c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549a:	f7fd fe8d 	bl	80031b8 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fd fe89 	bl	80031b8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e095      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b8:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ee      	bne.n	80054a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ca:	4b48      	ldr	r3, [pc, #288]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	4a47      	ldr	r2, [pc, #284]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8081 	beq.w	80055e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054e0:	4b42      	ldr	r3, [pc, #264]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d061      	beq.n	80055b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d146      	bne.n	8005582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f4:	4b3f      	ldr	r3, [pc, #252]	; (80055f4 <HAL_RCC_OscConfig+0x4fc>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fd fe5d 	bl	80031b8 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005502:	f7fd fe59 	bl	80031b8 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e067      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005514:	4b35      	ldr	r3, [pc, #212]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f0      	bne.n	8005502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d108      	bne.n	800553c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800552a:	4b30      	ldr	r3, [pc, #192]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	492d      	ldr	r1, [pc, #180]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800553c:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a19      	ldr	r1, [r3, #32]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	430b      	orrs	r3, r1
 800554e:	4927      	ldr	r1, [pc, #156]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005554:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <HAL_RCC_OscConfig+0x4fc>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fd fe2d 	bl	80031b8 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005562:	f7fd fe29 	bl	80031b8 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e037      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005574:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x46a>
 8005580:	e02f      	b.n	80055e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005582:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <HAL_RCC_OscConfig+0x4fc>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fd fe16 	bl	80031b8 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005590:	f7fd fe12 	bl	80031b8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e020      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x498>
 80055ae:	e018      	b.n	80055e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e013      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_RCC_OscConfig+0x4f4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d106      	bne.n	80055de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d001      	beq.n	80055e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40007000 	.word	0x40007000
 80055f4:	42420060 	.word	0x42420060

080055f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0d0      	b.n	80057ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800560c:	4b6a      	ldr	r3, [pc, #424]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d910      	bls.n	800563c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b67      	ldr	r3, [pc, #412]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0207 	bic.w	r2, r3, #7
 8005622:	4965      	ldr	r1, [pc, #404]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b63      	ldr	r3, [pc, #396]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0b8      	b.n	80057ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a58      	ldr	r2, [pc, #352]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800565e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800566c:	4b53      	ldr	r3, [pc, #332]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a52      	ldr	r2, [pc, #328]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b50      	ldr	r3, [pc, #320]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	494d      	ldr	r1, [pc, #308]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d040      	beq.n	8005718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b47      	ldr	r3, [pc, #284]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d115      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d107      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b6:	4b41      	ldr	r3, [pc, #260]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e073      	b.n	80057ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c6:	4b3d      	ldr	r3, [pc, #244]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e06b      	b.n	80057ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4936      	ldr	r1, [pc, #216]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056e8:	f7fd fd66 	bl	80031b8 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f0:	f7fd fd62 	bl	80031b8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e053      	b.n	80057ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 020c 	and.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	429a      	cmp	r2, r3
 8005716:	d1eb      	bne.n	80056f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005718:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d210      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 0207 	bic.w	r2, r3, #7
 800572e:	4922      	ldr	r1, [pc, #136]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e032      	b.n	80057ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4916      	ldr	r1, [pc, #88]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005762:	4313      	orrs	r3, r2
 8005764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	490e      	ldr	r1, [pc, #56]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005786:	f000 f821 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <HAL_RCC_ClockConfig+0x1c4>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490a      	ldr	r1, [pc, #40]	; (80057c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <HAL_RCC_ClockConfig+0x1cc>)
 80057a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_RCC_ClockConfig+0x1d0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fd fcc4 	bl	8003134 <HAL_InitTick>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40022000 	.word	0x40022000
 80057bc:	40021000 	.word	0x40021000
 80057c0:	0800b854 	.word	0x0800b854
 80057c4:	20000004 	.word	0x20000004
 80057c8:	20000008 	.word	0x20000008

080057cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	b490      	push	{r4, r7}
 80057ce:	b08a      	sub	sp, #40	; 0x28
 80057d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <HAL_RCC_GetSysClockFreq+0xb0>)
 80057d4:	1d3c      	adds	r4, r7, #4
 80057d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80057dc:	f240 2301 	movw	r3, #513	; 0x201
 80057e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <HAL_RCC_GetSysClockFreq+0xb4>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 030c 	and.w	r3, r3, #12
 8005802:	2b04      	cmp	r3, #4
 8005804:	d002      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x40>
 8005806:	2b08      	cmp	r3, #8
 8005808:	d003      	beq.n	8005812 <HAL_RCC_GetSysClockFreq+0x46>
 800580a:	e02d      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800580e:	623b      	str	r3, [r7, #32]
      break;
 8005810:	e02d      	b.n	800586e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	0c9b      	lsrs	r3, r3, #18
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800581e:	4413      	add	r3, r2
 8005820:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005824:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	0c5b      	lsrs	r3, r3, #17
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800583e:	4413      	add	r3, r2
 8005840:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005844:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4a0e      	ldr	r2, [pc, #56]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800584a:	fb02 f203 	mul.w	r2, r2, r3
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	e004      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	623b      	str	r3, [r7, #32]
      break;
 8005866:	e002      	b.n	800586e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800586a:	623b      	str	r3, [r7, #32]
      break;
 800586c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800586e:	6a3b      	ldr	r3, [r7, #32]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3728      	adds	r7, #40	; 0x28
 8005874:	46bd      	mov	sp, r7
 8005876:	bc90      	pop	{r4, r7}
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	0800b810 	.word	0x0800b810
 8005880:	40021000 	.word	0x40021000
 8005884:	007a1200 	.word	0x007a1200
 8005888:	003d0900 	.word	0x003d0900

0800588c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <HAL_RCC_GetHCLKFreq+0x10>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	20000004 	.word	0x20000004

080058a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058a4:	f7ff fff2 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4903      	ldr	r1, [pc, #12]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b6:	5ccb      	ldrb	r3, [r1, r3]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40021000 	.word	0x40021000
 80058c4:	0800b864 	.word	0x0800b864

080058c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058cc:	f7ff ffde 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	0adb      	lsrs	r3, r3, #11
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	4903      	ldr	r1, [pc, #12]	; (80058ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40021000 	.word	0x40021000
 80058ec:	0800b864 	.word	0x0800b864

080058f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058f8:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <RCC_Delay+0x34>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <RCC_Delay+0x38>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	0a5b      	lsrs	r3, r3, #9
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	fb02 f303 	mul.w	r3, r2, r3
 800590a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800590c:	bf00      	nop
  }
  while (Delay --);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1e5a      	subs	r2, r3, #1
 8005912:	60fa      	str	r2, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1f9      	bne.n	800590c <RCC_Delay+0x1c>
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	20000004 	.word	0x20000004
 8005928:	10624dd3 	.word	0x10624dd3

0800592c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e041      	b.n	80059c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fd fa26 	bl	8002da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fe98 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e032      	b.n	8005a4a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <HAL_TIM_Base_Start+0x88>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_TIM_Base_Start+0x48>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fe:	d009      	beq.n	8005a14 <HAL_TIM_Base_Start+0x48>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <HAL_TIM_Base_Start+0x8c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_Base_Start+0x48>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <HAL_TIM_Base_Start+0x90>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d111      	bne.n	8005a38 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b06      	cmp	r3, #6
 8005a24:	d010      	beq.n	8005a48 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a36:	e007      	b.n	8005a48 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800

08005a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e03a      	b.n	8005aee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <HAL_TIM_Base_Start_IT+0x98>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00e      	beq.n	8005ab8 <HAL_TIM_Base_Start_IT+0x58>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d009      	beq.n	8005ab8 <HAL_TIM_Base_Start_IT+0x58>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <HAL_TIM_Base_Start_IT+0x9c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_TIM_Base_Start_IT+0x58>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d111      	bne.n	8005adc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d010      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ada:	e007      	b.n	8005aec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800

08005b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e041      	b.n	8005b9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fd f91c 	bl	8002d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f000 fdac 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x24>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e022      	b.n	8005c0e <HAL_TIM_PWM_Start+0x6a>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d109      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x3e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	e015      	b.n	8005c0e <HAL_TIM_PWM_Start+0x6a>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x58>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e008      	b.n	8005c0e <HAL_TIM_PWM_Start+0x6a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e05e      	b.n	8005cd4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0x82>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	e013      	b.n	8005c4e <HAL_TIM_PWM_Start+0xaa>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_Start+0x92>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c34:	e00b      	b.n	8005c4e <HAL_TIM_PWM_Start+0xaa>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c44:	e003      	b.n	8005c4e <HAL_TIM_PWM_Start+0xaa>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f8af 	bl	8006dba <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <HAL_TIM_PWM_Start+0x138>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <HAL_TIM_PWM_Start+0x138>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_TIM_PWM_Start+0xfa>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d009      	beq.n	8005c9e <HAL_TIM_PWM_Start+0xfa>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <HAL_TIM_PWM_Start+0x13c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_TIM_PWM_Start+0xfa>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a12      	ldr	r2, [pc, #72]	; (8005ce4 <HAL_TIM_PWM_Start+0x140>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d111      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b06      	cmp	r3, #6
 8005cae:	d010      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc0:	e007      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800

08005ce8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e041      	b.n	8005d7e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f839 	bl	8005d86 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f000 fcba 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_IC_Start_IT+0x1a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e013      	b.n	8005dda <HAL_TIM_IC_Start_IT+0x42>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_IC_Start_IT+0x2a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e00b      	b.n	8005dda <HAL_TIM_IC_Start_IT+0x42>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_IC_Start_IT+0x3a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	e003      	b.n	8005dda <HAL_TIM_IC_Start_IT+0x42>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <HAL_TIM_IC_Start_IT+0x54>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	e013      	b.n	8005e14 <HAL_TIM_IC_Start_IT+0x7c>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d104      	bne.n	8005dfc <HAL_TIM_IC_Start_IT+0x64>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e00b      	b.n	8005e14 <HAL_TIM_IC_Start_IT+0x7c>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d104      	bne.n	8005e0c <HAL_TIM_IC_Start_IT+0x74>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e003      	b.n	8005e14 <HAL_TIM_IC_Start_IT+0x7c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e1c:	7bbb      	ldrb	r3, [r7, #14]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e0b3      	b.n	8005f8e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_IC_Start_IT+0x9e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e34:	e013      	b.n	8005e5e <HAL_TIM_IC_Start_IT+0xc6>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d104      	bne.n	8005e46 <HAL_TIM_IC_Start_IT+0xae>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e44:	e00b      	b.n	8005e5e <HAL_TIM_IC_Start_IT+0xc6>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d104      	bne.n	8005e56 <HAL_TIM_IC_Start_IT+0xbe>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e54:	e003      	b.n	8005e5e <HAL_TIM_IC_Start_IT+0xc6>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_IC_Start_IT+0xd6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e6c:	e013      	b.n	8005e96 <HAL_TIM_IC_Start_IT+0xfe>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_IC_Start_IT+0xe6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e7c:	e00b      	b.n	8005e96 <HAL_TIM_IC_Start_IT+0xfe>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_IC_Start_IT+0xf6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e8c:	e003      	b.n	8005e96 <HAL_TIM_IC_Start_IT+0xfe>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	d841      	bhi.n	8005f20 <HAL_TIM_IC_Start_IT+0x188>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <HAL_TIM_IC_Start_IT+0x10c>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ed9 	.word	0x08005ed9
 8005ea8:	08005f21 	.word	0x08005f21
 8005eac:	08005f21 	.word	0x08005f21
 8005eb0:	08005f21 	.word	0x08005f21
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005f21 	.word	0x08005f21
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005f21 	.word	0x08005f21
 8005ec4:	08005efd 	.word	0x08005efd
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005f21 	.word	0x08005f21
 8005ed4:	08005f0f 	.word	0x08005f0f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0202 	orr.w	r2, r2, #2
 8005ee6:	60da      	str	r2, [r3, #12]
      break;
 8005ee8:	e01b      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0204 	orr.w	r2, r2, #4
 8005ef8:	60da      	str	r2, [r3, #12]
      break;
 8005efa:	e012      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	60da      	str	r2, [r3, #12]
      break;
 8005f0c:	e009      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0210 	orr.w	r2, r2, #16
 8005f1c:	60da      	str	r2, [r3, #12]
      break;
 8005f1e:	e000      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005f20:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2201      	movs	r2, #1
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 ff45 	bl	8006dba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_TIM_IC_Start_IT+0x200>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_TIM_IC_Start_IT+0x1c0>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f42:	d009      	beq.n	8005f58 <HAL_TIM_IC_Start_IT+0x1c0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a14      	ldr	r2, [pc, #80]	; (8005f9c <HAL_TIM_IC_Start_IT+0x204>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_TIM_IC_Start_IT+0x1c0>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <HAL_TIM_IC_Start_IT+0x208>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d111      	bne.n	8005f7c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d010      	beq.n	8005f8c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7a:	e007      	b.n	8005f8c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800

08005fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d122      	bne.n	8006000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0202 	mvn.w	r2, #2
 8005fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fc fb4c 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fb3a 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fb40 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b04      	cmp	r3, #4
 800600c:	d122      	bne.n	8006054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b04      	cmp	r3, #4
 800601a:	d11b      	bne.n	8006054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0204 	mvn.w	r2, #4
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc fb22 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fb10 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb16 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b08      	cmp	r3, #8
 8006060:	d122      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b08      	cmp	r3, #8
 800606e:	d11b      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0208 	mvn.w	r2, #8
 8006078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2204      	movs	r2, #4
 800607e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fc faf8 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8006094:	e005      	b.n	80060a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fae6 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 faec 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d122      	bne.n	80060fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d11b      	bne.n	80060fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0210 	mvn.w	r2, #16
 80060cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2208      	movs	r2, #8
 80060d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc face 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fabc 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fac2 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b01      	cmp	r3, #1
 8006108:	d10e      	bne.n	8006128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b01      	cmp	r3, #1
 8006116:	d107      	bne.n	8006128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0201 	mvn.w	r2, #1
 8006120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fff0 	bl	8002108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006140:	2b80      	cmp	r3, #128	; 0x80
 8006142:	d107      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 ff10 	bl	8006f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d10e      	bne.n	8006180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d107      	bne.n	8006180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa86 	bl	800668c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b20      	cmp	r3, #32
 800618c:	d10e      	bne.n	80061ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b20      	cmp	r3, #32
 800619a:	d107      	bne.n	80061ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0220 	mvn.w	r2, #32
 80061a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fedb 	bl	8006f62 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_IC_ConfigChannel+0x1a>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e082      	b.n	80062d4 <HAL_TIM_IC_ConfigChannel+0x120>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11b      	bne.n	8006214 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f000 fc42 	bl	8006a74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 020c 	bic.w	r2, r2, #12
 80061fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	619a      	str	r2, [r3, #24]
 8006212:	e05a      	b.n	80062ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d11c      	bne.n	8006254 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6819      	ldr	r1, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f000 fcab 	bl	8006b84 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699a      	ldr	r2, [r3, #24]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800623c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6999      	ldr	r1, [r3, #24]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	021a      	lsls	r2, r3, #8
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	619a      	str	r2, [r3, #24]
 8006252:	e03a      	b.n	80062ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b08      	cmp	r3, #8
 8006258:	d11b      	bne.n	8006292 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f000 fcf6 	bl	8006c5a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 020c 	bic.w	r2, r2, #12
 800627c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	61da      	str	r2, [r3, #28]
 8006290:	e01b      	b.n	80062ca <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f000 fd15 	bl	8006cd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	021a      	lsls	r2, r3, #8
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e0ac      	b.n	8006450 <HAL_TIM_PWM_ConfigChannel+0x174>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b0c      	cmp	r3, #12
 8006302:	f200 809f 	bhi.w	8006444 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006341 	.word	0x08006341
 8006310:	08006445 	.word	0x08006445
 8006314:	08006445 	.word	0x08006445
 8006318:	08006445 	.word	0x08006445
 800631c:	08006381 	.word	0x08006381
 8006320:	08006445 	.word	0x08006445
 8006324:	08006445 	.word	0x08006445
 8006328:	08006445 	.word	0x08006445
 800632c:	080063c3 	.word	0x080063c3
 8006330:	08006445 	.word	0x08006445
 8006334:	08006445 	.word	0x08006445
 8006338:	08006445 	.word	0x08006445
 800633c:	08006403 	.word	0x08006403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fa0c 	bl	8006764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0208 	orr.w	r2, r2, #8
 800635a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0204 	bic.w	r2, r2, #4
 800636a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6999      	ldr	r1, [r3, #24]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	619a      	str	r2, [r3, #24]
      break;
 800637e:	e062      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa52 	bl	8006830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6999      	ldr	r1, [r3, #24]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	619a      	str	r2, [r3, #24]
      break;
 80063c0:	e041      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fa9b 	bl	8006904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0208 	orr.w	r2, r2, #8
 80063dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0204 	bic.w	r2, r2, #4
 80063ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69d9      	ldr	r1, [r3, #28]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	61da      	str	r2, [r3, #28]
      break;
 8006400:	e021      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fae5 	bl	80069d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800642c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	021a      	lsls	r2, r3, #8
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	61da      	str	r2, [r3, #28]
      break;
 8006442:	e000      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_ConfigClockSource+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e0b3      	b.n	80065d8 <HAL_TIM_ConfigClockSource+0x180>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800648e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a8:	d03e      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0xd0>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ae:	f200 8087 	bhi.w	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b6:	f000 8085 	beq.w	80065c4 <HAL_TIM_ConfigClockSource+0x16c>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064be:	d87f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064c0:	2b70      	cmp	r3, #112	; 0x70
 80064c2:	d01a      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0xa2>
 80064c4:	2b70      	cmp	r3, #112	; 0x70
 80064c6:	d87b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064c8:	2b60      	cmp	r3, #96	; 0x60
 80064ca:	d050      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x116>
 80064cc:	2b60      	cmp	r3, #96	; 0x60
 80064ce:	d877      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064d0:	2b50      	cmp	r3, #80	; 0x50
 80064d2:	d03c      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xf6>
 80064d4:	2b50      	cmp	r3, #80	; 0x50
 80064d6:	d873      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d058      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x136>
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d86f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064e0:	2b30      	cmp	r3, #48	; 0x30
 80064e2:	d064      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x156>
 80064e4:	2b30      	cmp	r3, #48	; 0x30
 80064e6:	d86b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d060      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x156>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d867      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x156>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d05a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064f8:	e062      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f000 fc37 	bl	8006d7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800651c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	609a      	str	r2, [r3, #8]
      break;
 8006526:	e04e      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f000 fc20 	bl	8006d7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800654a:	609a      	str	r2, [r3, #8]
      break;
 800654c:	e03b      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fae4 	bl	8006b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2150      	movs	r1, #80	; 0x50
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fbee 	bl	8006d48 <TIM_ITRx_SetConfig>
      break;
 800656c:	e02b      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	461a      	mov	r2, r3
 800657c:	f000 fb3e 	bl	8006bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2160      	movs	r1, #96	; 0x60
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fbde 	bl	8006d48 <TIM_ITRx_SetConfig>
      break;
 800658c:	e01b      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f000 fac4 	bl	8006b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2140      	movs	r1, #64	; 0x40
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fbce 	bl	8006d48 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e00b      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 fbc5 	bl	8006d48 <TIM_ITRx_SetConfig>
        break;
 80065be:	e002      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	d831      	bhi.n	8006658 <HAL_TIM_ReadCapturedValue+0x78>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006631 	.word	0x08006631
 8006600:	08006659 	.word	0x08006659
 8006604:	08006659 	.word	0x08006659
 8006608:	08006659 	.word	0x08006659
 800660c:	0800663b 	.word	0x0800663b
 8006610:	08006659 	.word	0x08006659
 8006614:	08006659 	.word	0x08006659
 8006618:	08006659 	.word	0x08006659
 800661c:	08006645 	.word	0x08006645
 8006620:	08006659 	.word	0x08006659
 8006624:	08006659 	.word	0x08006659
 8006628:	08006659 	.word	0x08006659
 800662c:	0800664f 	.word	0x0800664f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	60fb      	str	r3, [r7, #12]

      break;
 8006638:	e00f      	b.n	800665a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	60fb      	str	r3, [r7, #12]

      break;
 8006642:	e00a      	b.n	800665a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	60fb      	str	r3, [r7, #12]

      break;
 800664c:	e005      	b.n	800665a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	60fb      	str	r3, [r7, #12]

      break;
 8006656:	e000      	b.n	800665a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006658:	bf00      	nop
  }

  return tmpreg;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr

0800667a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
	...

080066a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a29      	ldr	r2, [pc, #164]	; (8006758 <TIM_Base_SetConfig+0xb8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <TIM_Base_SetConfig+0x30>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066be:	d007      	beq.n	80066d0 <TIM_Base_SetConfig+0x30>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a26      	ldr	r2, [pc, #152]	; (800675c <TIM_Base_SetConfig+0xbc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0x30>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a25      	ldr	r2, [pc, #148]	; (8006760 <TIM_Base_SetConfig+0xc0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d108      	bne.n	80066e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a1c      	ldr	r2, [pc, #112]	; (8006758 <TIM_Base_SetConfig+0xb8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <TIM_Base_SetConfig+0x62>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d007      	beq.n	8006702 <TIM_Base_SetConfig+0x62>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <TIM_Base_SetConfig+0xbc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_Base_SetConfig+0x62>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a18      	ldr	r2, [pc, #96]	; (8006760 <TIM_Base_SetConfig+0xc0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d108      	bne.n	8006714 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a07      	ldr	r2, [pc, #28]	; (8006758 <TIM_Base_SetConfig+0xb8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	615a      	str	r2, [r3, #20]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800

08006764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f023 0201 	bic.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 0302 	bic.w	r3, r3, #2
 80067ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a1c      	ldr	r2, [pc, #112]	; (800682c <TIM_OC1_SetConfig+0xc8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10c      	bne.n	80067da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f023 0308 	bic.w	r3, r3, #8
 80067c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 0304 	bic.w	r3, r3, #4
 80067d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a13      	ldr	r2, [pc, #76]	; (800682c <TIM_OC1_SetConfig+0xc8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d111      	bne.n	8006806 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40012c00 	.word	0x40012c00

08006830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0210 	bic.w	r2, r3, #16
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0320 	bic.w	r3, r3, #32
 800687a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a1d      	ldr	r2, [pc, #116]	; (8006900 <TIM_OC2_SetConfig+0xd0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10d      	bne.n	80068ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a14      	ldr	r2, [pc, #80]	; (8006900 <TIM_OC2_SetConfig+0xd0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d113      	bne.n	80068dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr
 8006900:	40012c00 	.word	0x40012c00

08006904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800694c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <TIM_OC3_SetConfig+0xd0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10d      	bne.n	800697e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800697c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <TIM_OC3_SetConfig+0xd0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d113      	bne.n	80069ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800698c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00

080069d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	031b      	lsls	r3, r3, #12
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <TIM_OC4_SetConfig+0x98>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d109      	bne.n	8006a4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr
 8006a70:	40012c00 	.word	0x40012c00

08006a74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0201 	bic.w	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <TIM_TI1_SetConfig+0xa8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00b      	beq.n	8006aba <TIM_TI1_SetConfig+0x46>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa8:	d007      	beq.n	8006aba <TIM_TI1_SetConfig+0x46>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a1c      	ldr	r2, [pc, #112]	; (8006b20 <TIM_TI1_SetConfig+0xac>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_TI1_SetConfig+0x46>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <TIM_TI1_SetConfig+0xb0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d101      	bne.n	8006abe <TIM_TI1_SetConfig+0x4a>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <TIM_TI1_SetConfig+0x4c>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 0303 	bic.w	r3, r3, #3
 8006aca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e003      	b.n	8006ade <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f023 030a 	bic.w	r3, r3, #10
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f003 030a 	and.w	r3, r3, #10
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr
 8006b1c:	40012c00 	.word	0x40012c00
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800

08006b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 030a 	bic.w	r3, r3, #10
 8006b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	621a      	str	r2, [r3, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f023 0210 	bic.w	r2, r3, #16
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	021b      	lsls	r3, r3, #8
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	031b      	lsls	r3, r3, #12
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f023 0210 	bic.w	r2, r3, #16
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	031b      	lsls	r3, r3, #12
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	621a      	str	r2, [r3, #32]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr

08006c5a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b087      	sub	sp, #28
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	031b      	lsls	r3, r3, #12
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	031b      	lsls	r3, r3, #12
 8006d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f043 0307 	orr.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	609a      	str	r2, [r3, #8]
}
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b087      	sub	sp, #28
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	2201      	movs	r2, #1
 8006dce:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	401a      	ands	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1a      	ldr	r2, [r3, #32]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	fa01 f303 	lsl.w	r3, r1, r3
 8006df2:	431a      	orrs	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]
}
 8006df8:	bf00      	nop
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
	...

08006e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e046      	b.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e68:	d009      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d10c      	bne.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr
 8006eb4:	40012c00 	.word	0x40012c00
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800

08006ec0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e03d      	b.n	8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bc80      	pop	{r7}
 8006f60:	4770      	bx	lr

08006f62 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e03f      	b.n	8007018 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fb ffa1 	bl	8002ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2224      	movs	r2, #36	; 0x24
 8006fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f904 	bl	80071d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691a      	ldr	r2, [r3, #16]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	; 0x28
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	4613      	mov	r3, r2
 800702e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b20      	cmp	r3, #32
 800703e:	d17c      	bne.n	800713a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_UART_Transmit+0x2c>
 8007046:	88fb      	ldrh	r3, [r7, #6]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e075      	b.n	800713c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_UART_Transmit+0x3e>
 800705a:	2302      	movs	r3, #2
 800705c:	e06e      	b.n	800713c <HAL_UART_Transmit+0x11c>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2221      	movs	r2, #33	; 0x21
 8007070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007074:	f7fc f8a0 	bl	80031b8 <HAL_GetTick>
 8007078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	88fa      	ldrh	r2, [r7, #6]
 800707e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708e:	d108      	bne.n	80070a2 <HAL_UART_Transmit+0x82>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e003      	b.n	80070aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80070b2:	e02a      	b.n	800710a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2200      	movs	r2, #0
 80070bc:	2180      	movs	r1, #128	; 0x80
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f840 	bl	8007144 <UART_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e036      	b.n	800713c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	3302      	adds	r3, #2
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e007      	b.n	80070fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	3301      	adds	r3, #1
 80070fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1cf      	bne.n	80070b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2200      	movs	r2, #0
 800711c:	2140      	movs	r1, #64	; 0x40
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 f810 	bl	8007144 <UART_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e006      	b.n	800713c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e000      	b.n	800713c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
  }
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	4613      	mov	r3, r2
 8007152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007154:	e02c      	b.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d028      	beq.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <UART_WaitOnFlagUntilTimeout+0x30>
 8007164:	f7fc f828 	bl	80031b8 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	429a      	cmp	r2, r3
 8007172:	d21d      	bcs.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007182:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e00f      	b.n	80071d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	429a      	cmp	r2, r3
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461a      	mov	r2, r3
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d0c3      	beq.n	8007156 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007212:	f023 030c 	bic.w	r3, r3, #12
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	430b      	orrs	r3, r1
 800721e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <UART_SetConfig+0x114>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007240:	f7fe fb42 	bl	80058c8 <HAL_RCC_GetPCLK2Freq>
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	e002      	b.n	800724e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007248:	f7fe fb2a 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 800724c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	009a      	lsls	r2, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	4a22      	ldr	r2, [pc, #136]	; (80072f0 <UART_SetConfig+0x118>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	0119      	lsls	r1, r3, #4
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009a      	lsls	r2, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	fbb2 f2f3 	udiv	r2, r2, r3
 8007284:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <UART_SetConfig+0x118>)
 8007286:	fba3 0302 	umull	r0, r3, r3, r2
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2064      	movs	r0, #100	; 0x64
 800728e:	fb00 f303 	mul.w	r3, r0, r3
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	3332      	adds	r3, #50	; 0x32
 8007298:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <UART_SetConfig+0x118>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a4:	4419      	add	r1, r3
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009a      	lsls	r2, r3, #2
 80072b0:	441a      	add	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <UART_SetConfig+0x118>)
 80072be:	fba3 0302 	umull	r0, r3, r3, r2
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	2064      	movs	r0, #100	; 0x64
 80072c6:	fb00 f303 	mul.w	r3, r0, r3
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	3332      	adds	r3, #50	; 0x32
 80072d0:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <UART_SetConfig+0x118>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	f003 020f 	and.w	r2, r3, #15
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	440a      	add	r2, r1
 80072e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40013800 	.word	0x40013800
 80072f0:	51eb851f 	.word	0x51eb851f
 80072f4:	00000000 	.word	0x00000000

080072f8 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a41      	ldr	r2, [pc, #260]	; (8007408 <_ZN10ControllerC1Ev+0x110>)
 8007304:	651a      	str	r2, [r3, #80]	; 0x50
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a40      	ldr	r2, [pc, #256]	; (800740c <_ZN10ControllerC1Ev+0x114>)
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007312:	659a      	str	r2, [r3, #88]	; 0x58
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007318:	4618      	mov	r0, r3
 800731a:	f7f9 fca1 	bl	8000c60 <__aeabi_i2f>
 800731e:	4603      	mov	r3, r0
 8007320:	4619      	mov	r1, r3
 8007322:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007326:	f7f9 fda3 	bl	8000e70 <__aeabi_fdiv>
 800732a:	4603      	mov	r3, r0
 800732c:	461a      	mov	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	65da      	str	r2, [r3, #92]	; 0x5c
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	a32c      	add	r3, pc, #176	; (adr r3, 80073e8 <_ZN10ControllerC1Ev+0xf0>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	a32b      	add	r3, pc, #172	; (adr r3, 80073f0 <_ZN10ControllerC1Ev+0xf8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	a32a      	add	r3, pc, #168	; (adr r3, 80073f8 <_ZN10ControllerC1Ev+0x100>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	4b23      	ldr	r3, [pc, #140]	; (8007410 <_ZN10ControllerC1Ev+0x118>)
 8007382:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	4b21      	ldr	r3, [pc, #132]	; (8007414 <_ZN10ControllerC1Ev+0x11c>)
 800738e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007396:	4618      	mov	r0, r3
 8007398:	f7f9 f82c 	bl	80003f4 <__aeabi_i2d>
 800739c:	a318      	add	r3, pc, #96	; (adr r3, 8007400 <_ZN10ControllerC1Ev+0x108>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f9 f891 	bl	80004c8 <__aeabi_dmul>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4610      	mov	r0, r2
 80073ac:	4619      	mov	r1, r3
 80073ae:	f7f9 fb4d 	bl	8000a4c <__aeabi_d2f>
 80073b2:	4602      	mov	r2, r0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	33d8      	adds	r3, #216	; 0xd8
 80073be:	4618      	mov	r0, r3
 80073c0:	f002 fbb0 	bl	8009b24 <_ZN3PIDC1Ev>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80073ca:	4618      	mov	r0, r3
 80073cc:	f002 fbaa 	bl	8009b24 <_ZN3PIDC1Ev>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073d6:	4618      	mov	r0, r3
 80073d8:	f002 fba4 	bl	8009b24 <_ZN3PIDC1Ev>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	9999999a 	.word	0x9999999a
 80073ec:	3fb99999 	.word	0x3fb99999
 80073f0:	47ae147b 	.word	0x47ae147b
 80073f4:	3fb47ae1 	.word	0x3fb47ae1
 80073f8:	47ae147b 	.word	0x47ae147b
 80073fc:	3f947ae1 	.word	0x3f947ae1
 8007400:	eb851eb8 	.word	0xeb851eb8
 8007404:	3f9eb851 	.word	0x3f9eb851
 8007408:	44c1c000 	.word	0x44c1c000
 800740c:	42654ca3 	.word	0x42654ca3
 8007410:	40140000 	.word	0x40140000
 8007414:	401a0000 	.word	0x401a0000

08007418 <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 8007418:	b082      	sub	sp, #8
 800741a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741e:	b09f      	sub	sp, #124	; 0x7c
 8007420:	af08      	add	r7, sp, #32
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800742a:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 800742e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007432:	4618      	mov	r0, r3
 8007434:	f7f8 fff0 	bl	8000418 <__aeabi_f2d>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 8007442:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007446:	4618      	mov	r0, r3
 8007448:	f7f8 ffe6 	bl	8000418 <__aeabi_f2d>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 8007456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800745a:	4618      	mov	r0, r3
 800745c:	f7f8 ffdc 	bl	8000418 <__aeabi_f2d>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800746a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746e:	4618      	mov	r0, r3
 8007470:	f7f8 ffd2 	bl	8000418 <__aeabi_f2d>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 800747e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007482:	4618      	mov	r0, r3
 8007484:	f7f8 ffc8 	bl	8000418 <__aeabi_f2d>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 8007492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007496:	4618      	mov	r0, r3
 8007498:	f7f8 ffbe 	bl	8000418 <__aeabi_f2d>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 80074a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 80074ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 80074b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 80074be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074c2:	657b      	str	r3, [r7, #84]	; 0x54
        float pitch_des 	 = state_des.angles[1];
 80074c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074c8:	653b      	str	r3, [r7, #80]	; 0x50
        float yaw_rate_des = state_des.rates[2];
 80074ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074ce:	64fb      	str	r3, [r7, #76]	; 0x4c

    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f103 06d8 	add.w	r6, r3, #216	; 0xd8
 80074d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80074d8:	f7f8 ff9e 	bl	8000418 <__aeabi_f2d>
 80074dc:	4680      	mov	r8, r0
 80074de:	4689      	mov	r9, r1
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7f8 ff93 	bl	8000418 <__aeabi_f2d>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074fa:	e9cd 4500 	strd	r4, r5, [sp]
 80074fe:	4642      	mov	r2, r8
 8007500:	464b      	mov	r3, r9
 8007502:	4630      	mov	r0, r6
 8007504:	f002 fb3e 	bl	8009b84 <_ZN3PID7P_AngleEddd>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	f7f9 fa9c 	bl	8000a4c <__aeabi_d2f>
 8007514:	4602      	mov	r2, r0
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f503 76a4 	add.w	r6, r3, #328	; 0x148
 8007522:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007524:	f7f8 ff78 	bl	8000418 <__aeabi_f2d>
 8007528:	4680      	mov	r8, r0
 800752a:	4689      	mov	r9, r1
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007538:	4618      	mov	r0, r3
 800753a:	f7f8 ff6d 	bl	8000418 <__aeabi_f2d>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007546:	e9cd 4500 	strd	r4, r5, [sp]
 800754a:	4642      	mov	r2, r8
 800754c:	464b      	mov	r3, r9
 800754e:	4630      	mov	r0, r6
 8007550:	f002 fb18 	bl	8009b84 <_ZN3PID7P_AngleEddd>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	f7f9 fa76 	bl	8000a4c <__aeabi_d2f>
 8007560:	4602      	mov	r2, r0
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
/*
    //printf("\nroll_rate_des: %.2f",roll_rate_des);
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    //printf("\nyaw_rate_des: %.2f",yaw_rate_des);
*/  //printf("\nroll_rate_des: %.2f",roll_rate_des);
    pd_roll  = pid_roll.PD_Rate(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	33d8      	adds	r3, #216	; 0xd8
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8007574:	4618      	mov	r0, r3
 8007576:	f7f8 ff4f 	bl	8000418 <__aeabi_f2d>
 800757a:	4682      	mov	sl, r0
 800757c:	468b      	mov	fp, r1
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 800758a:	68bc      	ldr	r4, [r7, #8]
 800758c:	f104 0568 	add.w	r5, r4, #104	; 0x68
 8007590:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007594:	68be      	ldr	r6, [r7, #8]
 8007596:	e9d6 891c 	ldrd	r8, r9, [r6, #112]	; 0x70
 800759a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800759e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80075a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a6:	e9cd 2300 	strd	r2, r3, [sp]
 80075aa:	4652      	mov	r2, sl
 80075ac:	465b      	mov	r3, fp
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f002 fb0a 	bl	8009bc8 <_ZN3PID7PD_RateEddddd>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80075c4:	607b      	str	r3, [r7, #4]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f8 ff23 	bl	8000418 <__aeabi_f2d>
 80075d2:	4682      	mov	sl, r0
 80075d4:	468b      	mov	fp, r1
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	e9d1 011e 	ldrd	r0, r1, [r1, #120]	; 0x78
 80075e2:	68bc      	ldr	r4, [r7, #8]
 80075e4:	f104 0580 	add.w	r5, r4, #128	; 0x80
 80075e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075ec:	68be      	ldr	r6, [r7, #8]
 80075ee:	e9d6 8922 	ldrd	r8, r9, [r6, #136]	; 0x88
 80075f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80075f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80075fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fe:	e9cd 2300 	strd	r2, r3, [sp]
 8007602:	4652      	mov	r2, sl
 8007604:	465b      	mov	r3, fp
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f002 fade 	bl	8009bc8 <_ZN3PID7PD_RateEddddd>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    //p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f503 76dc 	add.w	r6, r3, #440	; 0x1b8
 800761c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800761e:	f7f8 fefb 	bl	8000418 <__aeabi_f2d>
 8007622:	4680      	mov	r8, r0
 8007624:	4689      	mov	r9, r1
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 8007632:	68bc      	ldr	r4, [r7, #8]
 8007634:	f104 0598 	add.w	r5, r4, #152	; 0x98
 8007638:	e9d5 4500 	ldrd	r4, r5, [r5]
 800763c:	f04f 0a00 	mov.w	sl, #0
 8007640:	f04f 0b00 	mov.w	fp, #0
 8007644:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8007648:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800764c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007650:	e9cd 2300 	strd	r2, r3, [sp]
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	4630      	mov	r0, r6
 800765a:	f002 fab5 	bl	8009bc8 <_ZN3PID7PD_RateEddddd>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    thr = pid_roll.Sat(thr, 1800, 1000);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800766e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007672:	f7f8 febf 	bl	80003f4 <__aeabi_i2d>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800767e:	9101      	str	r1, [sp, #4]
 8007680:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8007684:	9100      	str	r1, [sp, #0]
 8007686:	4620      	mov	r0, r4
 8007688:	f002 fc60 	bl	8009f4c <_ZN3PID3SatEdii>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4610      	mov	r0, r2
 8007692:	4619      	mov	r1, r3
 8007694:	f7f9 f9b2 	bl	80009fc <__aeabi_d2iz>
 8007698:	4603      	mov	r3, r0
 800769a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800769e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80076a2:	f7f8 fea7 	bl	80003f4 <__aeabi_i2d>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80076ac:	f7f8 fd56 	bl	800015c <__adddf3>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4610      	mov	r0, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80076be:	f7f8 fd4b 	bl	8000158 <__aeabi_dsub>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4610      	mov	r0, r2
 80076c8:	4619      	mov	r1, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80076d0:	f7f8 fd42 	bl	8000158 <__aeabi_dsub>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4610      	mov	r0, r2
 80076da:	4619      	mov	r1, r3
 80076dc:	a3c6      	add	r3, pc, #792	; (adr r3, 80079f8 <_ZN10Controller3RunE5stateS0_i+0x5e0>)
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	f7f8 fd39 	bl	8000158 <__aeabi_dsub>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	a3c4      	add	r3, pc, #784	; (adr r3, 8007a00 <_ZN10Controller3RunE5stateS0_i+0x5e8>)
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	f7f8 fd30 	bl	8000158 <__aeabi_dsub>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4610      	mov	r0, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	f7f9 f97c 	bl	80009fc <__aeabi_d2iz>
 8007704:	4603      	mov	r3, r0
 8007706:	64bb      	str	r3, [r7, #72]	; 0x48
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 8007708:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800770c:	f7f8 fe72 	bl	80003f4 <__aeabi_i2d>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8007716:	f7f8 fd1f 	bl	8000158 <__aeabi_dsub>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4610      	mov	r0, r2
 8007720:	4619      	mov	r1, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8007728:	f7f8 fd18 	bl	800015c <__adddf3>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4610      	mov	r0, r2
 8007732:	4619      	mov	r1, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800773a:	f7f8 fd0d 	bl	8000158 <__aeabi_dsub>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	a3ac      	add	r3, pc, #688	; (adr r3, 80079f8 <_ZN10Controller3RunE5stateS0_i+0x5e0>)
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f7f8 fd06 	bl	800015c <__adddf3>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4610      	mov	r0, r2
 8007756:	4619      	mov	r1, r3
 8007758:	a3a9      	add	r3, pc, #676	; (adr r3, 8007a00 <_ZN10Controller3RunE5stateS0_i+0x5e8>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f8 fcfd 	bl	800015c <__adddf3>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4610      	mov	r0, r2
 8007768:	4619      	mov	r1, r3
 800776a:	f7f9 f947 	bl	80009fc <__aeabi_d2iz>
 800776e:	4603      	mov	r3, r0
 8007770:	647b      	str	r3, [r7, #68]	; 0x44
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 8007772:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007776:	f7f8 fe3d 	bl	80003f4 <__aeabi_i2d>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8007780:	f7f8 fcec 	bl	800015c <__adddf3>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4610      	mov	r0, r2
 800778a:	4619      	mov	r1, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8007792:	f7f8 fce3 	bl	800015c <__adddf3>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4610      	mov	r0, r2
 800779c:	4619      	mov	r1, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80077a4:	f7f8 fcda 	bl	800015c <__adddf3>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4610      	mov	r0, r2
 80077ae:	4619      	mov	r1, r3
 80077b0:	a391      	add	r3, pc, #580	; (adr r3, 80079f8 <_ZN10Controller3RunE5stateS0_i+0x5e0>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 fccf 	bl	8000158 <__aeabi_dsub>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	a38f      	add	r3, pc, #572	; (adr r3, 8007a00 <_ZN10Controller3RunE5stateS0_i+0x5e8>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f7f8 fcc8 	bl	800015c <__adddf3>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	f7f9 f912 	bl	80009fc <__aeabi_d2iz>
 80077d8:	4603      	mov	r3, r0
 80077da:	643b      	str	r3, [r7, #64]	; 0x40
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 80077dc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80077e0:	f7f8 fe08 	bl	80003f4 <__aeabi_i2d>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80077ea:	f7f8 fcb5 	bl	8000158 <__aeabi_dsub>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80077fc:	f7f8 fcac 	bl	8000158 <__aeabi_dsub>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4610      	mov	r0, r2
 8007806:	4619      	mov	r1, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800780e:	f7f8 fca5 	bl	800015c <__adddf3>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4610      	mov	r0, r2
 8007818:	4619      	mov	r1, r3
 800781a:	a377      	add	r3, pc, #476	; (adr r3, 80079f8 <_ZN10Controller3RunE5stateS0_i+0x5e0>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 fc9c 	bl	800015c <__adddf3>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4610      	mov	r0, r2
 800782a:	4619      	mov	r1, r3
 800782c:	a374      	add	r3, pc, #464	; (adr r3, 8007a00 <_ZN10Controller3RunE5stateS0_i+0x5e8>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fc91 	bl	8000158 <__aeabi_dsub>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4610      	mov	r0, r2
 800783c:	4619      	mov	r1, r3
 800783e:	f7f9 f8dd 	bl	80009fc <__aeabi_d2iz>
 8007842:	4603      	mov	r3, r0
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800784c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800784e:	f7f8 fdd1 	bl	80003f4 <__aeabi_i2d>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800785a:	9102      	str	r1, [sp, #8]
 800785c:	f240 414c 	movw	r1, #1100	; 0x44c
 8007860:	9101      	str	r1, [sp, #4]
 8007862:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007866:	9100      	str	r1, [sp, #0]
 8007868:	4620      	mov	r0, r4
 800786a:	f002 fb29 	bl	8009ec0 <_ZN3PID3SatEdiii>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4610      	mov	r0, r2
 8007874:	4619      	mov	r1, r3
 8007876:	f7f9 f8c1 	bl	80009fc <__aeabi_d2iz>
 800787a:	4603      	mov	r3, r0
 800787c:	64bb      	str	r3, [r7, #72]	; 0x48
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8007884:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007886:	f7f8 fdb5 	bl	80003f4 <__aeabi_i2d>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007892:	9102      	str	r1, [sp, #8]
 8007894:	f240 414c 	movw	r1, #1100	; 0x44c
 8007898:	9101      	str	r1, [sp, #4]
 800789a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800789e:	9100      	str	r1, [sp, #0]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f002 fb0d 	bl	8009ec0 <_ZN3PID3SatEdiii>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4610      	mov	r0, r2
 80078ac:	4619      	mov	r1, r3
 80078ae:	f7f9 f8a5 	bl	80009fc <__aeabi_d2iz>
 80078b2:	4603      	mov	r3, r0
 80078b4:	647b      	str	r3, [r7, #68]	; 0x44
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80078bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80078be:	f7f8 fd99 	bl	80003f4 <__aeabi_i2d>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80078ca:	9102      	str	r1, [sp, #8]
 80078cc:	f240 414c 	movw	r1, #1100	; 0x44c
 80078d0:	9101      	str	r1, [sp, #4]
 80078d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80078d6:	9100      	str	r1, [sp, #0]
 80078d8:	4620      	mov	r0, r4
 80078da:	f002 faf1 	bl	8009ec0 <_ZN3PID3SatEdiii>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4610      	mov	r0, r2
 80078e4:	4619      	mov	r1, r3
 80078e6:	f7f9 f889 	bl	80009fc <__aeabi_d2iz>
 80078ea:	4603      	mov	r3, r0
 80078ec:	643b      	str	r3, [r7, #64]	; 0x40
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80078f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80078f6:	f7f8 fd7d 	bl	80003f4 <__aeabi_i2d>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007902:	9102      	str	r1, [sp, #8]
 8007904:	f240 414c 	movw	r1, #1100	; 0x44c
 8007908:	9101      	str	r1, [sp, #4]
 800790a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800790e:	9100      	str	r1, [sp, #0]
 8007910:	4620      	mov	r0, r4
 8007912:	f002 fad5 	bl	8009ec0 <_ZN3PID3SatEdiii>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4610      	mov	r0, r2
 800791c:	4619      	mov	r1, r3
 800791e:	f7f9 f86d 	bl	80009fc <__aeabi_d2iz>
 8007922:	4603      	mov	r3, r0
 8007924:	63fb      	str	r3, [r7, #60]	; 0x3c

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	33d8      	adds	r3, #216	; 0xd8
 800792a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792c:	b291      	uxth	r1, r2
 800792e:	2201      	movs	r2, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f002 fbab 	bl	800a08c <_ZN3PID7pwm2motEti>
 8007936:	4602      	mov	r2, r0
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	33d8      	adds	r3, #216	; 0xd8
 8007940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007942:	b291      	uxth	r1, r2
 8007944:	2201      	movs	r2, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f002 fba0 	bl	800a08c <_ZN3PID7pwm2motEti>
 800794c:	4602      	mov	r2, r0
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	33d8      	adds	r3, #216	; 0xd8
 8007956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007958:	b291      	uxth	r1, r2
 800795a:	f04f 32ff 	mov.w	r2, #4294967295
 800795e:	4618      	mov	r0, r3
 8007960:	f002 fb94 	bl	800a08c <_ZN3PID7pwm2motEti>
 8007964:	4602      	mov	r2, r0
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	33d8      	adds	r3, #216	; 0xd8
 800796e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007970:	b291      	uxth	r1, r2
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	4618      	mov	r0, r3
 8007978:	f002 fb88 	bl	800a08c <_ZN3PID7pwm2motEti>
 800797c:	4602      	mov	r2, r0
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	4618      	mov	r0, r3
 8007988:	f7f8 fd46 	bl	8000418 <__aeabi_f2d>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007998:	4618      	mov	r0, r3
 800799a:	f7f8 fd3d 	bl	8000418 <__aeabi_f2d>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f8 fd34 	bl	8000418 <__aeabi_f2d>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079bc:	4618      	mov	r0, r3
 80079be:	f7f8 fd2b 	bl	8000418 <__aeabi_f2d>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80079ca:	f107 0318 	add.w	r3, r7, #24
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	2304      	movs	r3, #4
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fa ff71 	bl	80028c0 <_ZNSaIdEC1Ev>
 80079de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079e2:	f107 0210 	add.w	r2, r7, #16
 80079e6:	ca06      	ldmia	r2, {r1, r2}
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f843 	bl	8007a74 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 80079ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079f2:	e009      	b.n	8007a08 <_ZN10Controller3RunE5stateS0_i+0x5f0>
 80079f4:	f3af 8000 	nop.w
 80079f8:	66666666 	.word	0x66666666
 80079fc:	40306666 	.word	0x40306666
 8007a00:	28f5c28f 	.word	0x28f5c28f
 8007a04:	40068f5c 	.word	0x40068f5c
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fa fef0 	bl	80027ee <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller_output_pwm[1] = pwm2;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a1a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller_output_pwm[2] = pwm3;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    controller_output_pwm[3] = pwm4;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    return controller_output;
 8007a2e:	bf00      	nop
}
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	375c      	adds	r7, #92	; 0x5c
 8007a34:	46bd      	mov	sp, r7
 8007a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	b002      	add	sp, #8
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f002 fb64 	bl	800a11c <_ZN3PIDD1Ev>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f002 fb5e 	bl	800a11c <_ZN3PIDD1Ev>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	33d8      	adds	r3, #216	; 0xd8
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 fb59 	bl	800a11c <_ZN3PIDD1Ev>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 8007a74:	b5b0      	push	{r4, r5, r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	1d38      	adds	r0, r7, #4
 8007a7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007a82:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fb f856 	bl	8002b3a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8007a8e:	1d3b      	adds	r3, r7, #4
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f810 	bl	8007ab6 <_ZNKSt16initializer_listIdE5beginEv>
 8007a96:	4604      	mov	r4, r0
 8007a98:	1d3b      	adds	r3, r7, #4
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f816 	bl	8007acc <_ZNKSt16initializer_listIdE3endEv>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	462b      	mov	r3, r5
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 f822 	bl	8007af0 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bdb0      	pop	{r4, r5, r7, pc}

08007ab6 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8007acc:	b590      	push	{r4, r7, lr}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ffee 	bl	8007ab6 <_ZNKSt16initializer_listIdE5beginEv>
 8007ada:	4604      	mov	r4, r0
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f840 	bl	8007b62 <_ZNKSt16initializer_listIdE4sizeEv>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4423      	add	r3, r4
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd90      	pop	{r4, r7, pc}

08007af0 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8007af0:	b590      	push	{r4, r7, lr}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	68b8      	ldr	r0, [r7, #8]
 8007b02:	f000 f839 	bl	8007b78 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007b06:	4603      	mov	r3, r0
 8007b08:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007b0a:	68fc      	ldr	r4, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa ff12 	bl	8002938 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8007b14:	4603      	mov	r3, r0
 8007b16:	4619      	mov	r1, r3
 8007b18:	6978      	ldr	r0, [r7, #20]
 8007b1a:	f000 f841 	bl	8007ba0 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4619      	mov	r1, r3
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f864 	bl	8007bf0 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8007b28:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	441a      	add	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fa fef8 	bl	8002938 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8007b48:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	68b8      	ldr	r0, [r7, #8]
 8007b50:	f000 f862 	bl	8007c18 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8007b54:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	605a      	str	r2, [r3, #4]
	}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd90      	pop	{r4, r7, pc}

08007b62 <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr

08007b78 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8007b78:	b5b0      	push	{r4, r5, r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8007b82:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f857 	bl	8007c3a <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8007b8c:	462a      	mov	r2, r5
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 f85b 	bl	8007c4c <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8007b96:	4603      	mov	r3, r0
    }
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bdb0      	pop	{r4, r5, r7, pc}

08007ba0 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8007ba0:	b590      	push	{r4, r7, lr}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fa ffb4 	bl	8002b1e <_ZNSaIdEC1ERKS_>
 8007bb6:	f107 030c 	add.w	r3, r7, #12
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f855 	bl	8007c6a <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bf8c      	ite	hi
 8007bc8:	2301      	movhi	r3, #1
 8007bca:	2300      	movls	r3, #0
 8007bcc:	b2dc      	uxtb	r4, r3
 8007bce:	f107 030c 	add.w	r3, r7, #12
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fa fe0b 	bl	80027ee <_ZNSaIdED1Ev>
 8007bd8:	2c00      	cmp	r4, #0
 8007bda:	d002      	beq.n	8007be2 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8007bdc:	4803      	ldr	r0, [pc, #12]	; (8007bec <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8007bde:	f002 fb23 	bl	800a228 <_ZSt20__throw_length_errorPKc>
	return __n;
 8007be2:	687b      	ldr	r3, [r7, #4]
      }
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd90      	pop	{r4, r7, pc}
 8007bec:	0800b820 	.word	0x0800b820

08007bf0 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 f84a 	bl	8007c9e <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	e000      	b.n	8007c10 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8007c0e:	2300      	movs	r3, #0
      }
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 f846 	bl	8007cbc <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8007c30:	4603      	mov	r3, r0
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr

08007c4c <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	10db      	asrs	r3, r3, #3
    }
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr

08007c6a <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007c72:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007c76:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f831 	bl	8007ce0 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007c82:	f107 0208 	add.w	r2, r7, #8
 8007c86:	f107 030c 	add.w	r3, r7, #12
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 f833 	bl	8007cf8 <_ZSt3minIjERKT_S2_S2_>
 8007c92:	4603      	mov	r3, r0
 8007c94:	681b      	ldr	r3, [r3, #0]
      }
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007ca8:	2200      	movs	r2, #0
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f836 	bl	8007d1e <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 f842 	bl	8007d5a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 8007cd6:	4603      	mov	r3, r0
    }
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f846 	bl	8007d7a <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d201      	bcs.n	8007d12 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	e000      	b.n	8007d14 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007d12:	687b      	ldr	r3, [r7, #4]
    }
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f825 	bl	8007d7a <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8007d30:	4602      	mov	r2, r0
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	bf8c      	ite	hi
 8007d38:	2301      	movhi	r3, #1
 8007d3a:	2300      	movls	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007d42:	f002 fa6e 	bl	800a222 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f002 fa58 	bl	800a200 <_Znwj>
 8007d50:	4603      	mov	r3, r0
      }
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f810 	bl	8007d90 <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8007d70:	4603      	mov	r3, r0
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007d82:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <_ZSt4copyIPKdPdET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f80f 	bl	8007dc0 <_ZSt12__miter_baseIPKdET_S2_>
 8007da2:	4604      	mov	r4, r0
 8007da4:	68b8      	ldr	r0, [r7, #8]
 8007da6:	f000 f80b 	bl	8007dc0 <_ZSt12__miter_baseIPKdET_S2_>
 8007daa:	4603      	mov	r3, r0
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4619      	mov	r1, r3
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 f80f 	bl	8007dd4 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8007db6:	4603      	mov	r3, r0
    }
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd90      	pop	{r4, r7, pc}

08007dc0 <_ZSt12__miter_baseIPKdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007dd4:	b5b0      	push	{r4, r5, r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f81a 	bl	8007e1a <_ZSt12__niter_baseIPKdET_S2_>
 8007de6:	4604      	mov	r4, r0
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f000 f816 	bl	8007e1a <_ZSt12__niter_baseIPKdET_S2_>
 8007dee:	4605      	mov	r5, r0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 f81b 	bl	8007e2e <_ZSt12__niter_baseIPdET_S1_>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 f81f 	bl	8007e42 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8007e04:	4602      	mov	r2, r0
 8007e06:	1d3b      	adds	r3, r7, #4
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f82b 	bl	8007e66 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8007e10:	4603      	mov	r3, r0
    }
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bdb0      	pop	{r4, r5, r7, pc}

08007e1a <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr

08007e2e <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8007e4e:	2301      	movs	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f810 	bl	8007e7c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8007e5c:	4603      	mov	r3, r0
    }
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr

08007e7c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	10db      	asrs	r3, r3, #3
 8007e90:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f003 fb7f 	bl	800b5a4 <memmove>
	  return __result + _Num;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	4413      	add	r3, r2
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	645a      	str	r2, [r3, #68]	; 0x44
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f04f 0200 	mov.w	r2, #0
 8007ede:	649a      	str	r2, [r3, #72]	; 0x48
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	a333      	add	r3, pc, #204	; (adr r3, 8007fb0 <_ZN15Kalman_FiltresiC1Ev+0xf8>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	a330      	add	r3, pc, #192	; (adr r3, 8007fb0 <_ZN15Kalman_FiltresiC1Ev+0xf8>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	a32d      	add	r3, pc, #180	; (adr r3, 8007fb0 <_ZN15Kalman_FiltresiC1Ev+0xf8>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	a32a      	add	r3, pc, #168	; (adr r3, 8007fb0 <_ZN15Kalman_FiltresiC1Ev+0xf8>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	679a      	str	r2, [r3, #120]	; 0x78
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	67da      	str	r2, [r3, #124]	; 0x7c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	a320      	add	r3, pc, #128	; (adr r3, 8007fb8 <_ZN15Kalman_FiltresiC1Ev+0x100>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <_ZN15Kalman_FiltresiC1Ev+0x108>)
 8007f44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007f4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7f8 fe81 	bl	8000c60 <__aeabi_i2f>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4619      	mov	r1, r3
 8007f62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007f66:	f7f8 ff83 	bl	8000e70 <__aeabi_fdiv>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7f8 fa53 	bl	8000418 <__aeabi_f2d>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007f82:	4618      	mov	r0, r3
 8007f84:	f002 f8d4 	bl	800a130 <_ZN3lpfC1Ev>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f002 f8ce 	bl	800a130 <_ZN3lpfC1Ev>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f002 f8c8 	bl	800a130 <_ZN3lpfC1Ev>

}
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w
 8007fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007fb4:	3f50624d 	.word	0x3f50624d
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	40c38800 	.word	0x40c38800
 8007fc0:	42654ca3 	.word	0x42654ca3
 8007fc4:	00000000 	.word	0x00000000

08007fc8 <_ZN15Kalman_Filtresi3RunEPfS0_>:


void Kalman_Filtresi::Run(float gyro[3], float acc[3]) {
 8007fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fcc:	b098      	sub	sp, #96	; 0x60
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007fd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fd4:	637a      	str	r2, [r7, #52]	; 0x34

  float accX = acc[0]; 
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	65fb      	str	r3, [r7, #92]	; 0x5c
  float accY = acc[1];
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	65bb      	str	r3, [r7, #88]	; 0x58
  float accZ = acc[2];
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	657b      	str	r3, [r7, #84]	; 0x54

  float gyroX = gyro[0]; 
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	653b      	str	r3, [r7, #80]	; 0x50
  float gyroY = gyro[1];
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  float gyroZ = gyro[2];
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	64bb      	str	r3, [r7, #72]	; 0x48

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8007ffa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ffc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007ffe:	f7f8 fe83 	bl	8000d08 <__aeabi_fmul>
 8008002:	4603      	mov	r3, r0
 8008004:	461c      	mov	r4, r3
 8008006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008008:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800800a:	f7f8 fe7d 	bl	8000d08 <__aeabi_fmul>
 800800e:	4603      	mov	r3, r0
 8008010:	4619      	mov	r1, r3
 8008012:	4620      	mov	r0, r4
 8008014:	f7f8 fd70 	bl	8000af8 <__addsf3>
 8008018:	4603      	mov	r3, r0
 800801a:	461c      	mov	r4, r3
 800801c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800801e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008020:	f7f8 fe72 	bl	8000d08 <__aeabi_fmul>
 8008024:	4603      	mov	r3, r0
 8008026:	4619      	mov	r1, r3
 8008028:	4620      	mov	r0, r4
 800802a:	f7f8 fd65 	bl	8000af8 <__addsf3>
 800802e:	4603      	mov	r3, r0
 8008030:	4618      	mov	r0, r3
 8008032:	f7f9 f9e9 	bl	8001408 <_ZSt4sqrtf>
 8008036:	6478      	str	r0, [r7, #68]	; 0x44

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 8008038:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800803a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800803c:	f7f8 ff18 	bl	8000e70 <__aeabi_fdiv>
 8008040:	4603      	mov	r3, r0
 8008042:	4618      	mov	r0, r3
 8008044:	f7f9 f9c8 	bl	80013d8 <_ZSt4asinf>
 8008048:	4602      	mov	r2, r0
 800804a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7f8 fe58 	bl	8000d08 <__aeabi_fmul>
 8008058:	4603      	mov	r3, r0
 800805a:	4618      	mov	r0, r3
 800805c:	f7f8 f9dc 	bl	8000418 <__aeabi_f2d>
 8008060:	a3c1      	add	r3, pc, #772	; (adr r3, 8008368 <_ZN15Kalman_Filtresi3RunEPfS0_+0x3a0>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f7f8 f877 	bl	8000158 <__aeabi_dsub>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4610      	mov	r0, r2
 8008070:	4619      	mov	r1, r3
 8008072:	f7f8 fceb 	bl	8000a4c <__aeabi_d2f>
 8008076:	4602      	mov	r2, r0
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800807e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008080:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008082:	f7f8 fef5 	bl	8000e70 <__aeabi_fdiv>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	f7f9 f9a5 	bl	80013d8 <_ZSt4asinf>
 800808e:	4602      	mov	r2, r0
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008092:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f7f8 fe35 	bl	8000d08 <__aeabi_fmul>
 800809e:	4603      	mov	r3, r0
 80080a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7f8 fd27 	bl	8000af8 <__addsf3>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461a      	mov	r2, r3
 80080ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 80080b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80080b6:	f7f8 f9af 	bl	8000418 <__aeabi_f2d>
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80080c0:	f7f8 fa02 	bl	80004c8 <__aeabi_dmul>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4610      	mov	r0, r2
 80080ca:	4619      	mov	r1, r3
 80080cc:	f7f8 fcbe 	bl	8000a4c <__aeabi_d2f>
 80080d0:	4602      	mov	r2, r0
 80080d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  roll_gyro =  gyroX * st;
 80080d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80080da:	f7f8 f99d 	bl	8000418 <__aeabi_f2d>
 80080de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80080e4:	f7f8 f9f0 	bl	80004c8 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4610      	mov	r0, r2
 80080ee:	4619      	mov	r1, r3
 80080f0:	f7f8 fcac 	bl	8000a4c <__aeabi_d2f>
 80080f4:	4602      	mov	r2, r0
 80080f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 80080fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fe:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8008102:	2b00      	cmp	r3, #0
 8008104:	f001 8438 	beq.w	8009978 <_ZN15Kalman_Filtresi3RunEPfS0_+0x19b0>

    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 8008108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800810e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008110:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008114:	4619      	mov	r1, r3
 8008116:	4610      	mov	r0, r2
 8008118:	f7f8 fcee 	bl	8000af8 <__addsf3>
 800811c:	4603      	mov	r3, r0
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 f97a 	bl	8000418 <__aeabi_f2d>
 8008124:	a392      	add	r3, pc, #584	; (adr r3, 8008370 <_ZN15Kalman_Filtresi3RunEPfS0_+0x3a8>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f9cd 	bl	80004c8 <__aeabi_dmul>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4614      	mov	r4, r2
 8008134:	461d      	mov	r5, r3
 8008136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008138:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800813c:	4618      	mov	r0, r3
 800813e:	f7f8 f96b 	bl	8000418 <__aeabi_f2d>
 8008142:	a38d      	add	r3, pc, #564	; (adr r3, 8008378 <_ZN15Kalman_Filtresi3RunEPfS0_+0x3b0>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 f9be 	bl	80004c8 <__aeabi_dmul>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4620      	mov	r0, r4
 8008152:	4629      	mov	r1, r5
 8008154:	f7f8 f802 	bl	800015c <__adddf3>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4610      	mov	r0, r2
 800815e:	4619      	mov	r1, r3
 8008160:	f7f8 fc74 	bl	8000a4c <__aeabi_d2f>
 8008164:	4602      	mov	r2, r0
 8008166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008168:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 800816c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7f8 fcbc 	bl	8000af8 <__addsf3>
 8008180:	4603      	mov	r3, r0
 8008182:	4618      	mov	r0, r3
 8008184:	f7f8 f948 	bl	8000418 <__aeabi_f2d>
 8008188:	a379      	add	r3, pc, #484	; (adr r3, 8008370 <_ZN15Kalman_Filtresi3RunEPfS0_+0x3a8>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f7f8 f99b 	bl	80004c8 <__aeabi_dmul>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4614      	mov	r4, r2
 8008198:	461d      	mov	r5, r3
 800819a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7f8 f939 	bl	8000418 <__aeabi_f2d>
 80081a6:	a374      	add	r3, pc, #464	; (adr r3, 8008378 <_ZN15Kalman_Filtresi3RunEPfS0_+0x3b0>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f7f8 f98c 	bl	80004c8 <__aeabi_dmul>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4620      	mov	r0, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	f7f7 ffd0 	bl	800015c <__adddf3>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4610      	mov	r0, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	f7f8 fc42 	bl	8000a4c <__aeabi_d2f>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    pitch_ekf = pitch_ekf - st*pitch_bias + gyroY*(st) + ((pitch_acc - pitch_ekf + st*pitch_bias - gyroY*(st))*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 80081d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7f8 f91e 	bl	8000418 <__aeabi_f2d>
 80081dc:	4680      	mov	r8, r0
 80081de:	4689      	mov	r9, r1
 80081e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e2:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 80081e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7f8 f914 	bl	8000418 <__aeabi_f2d>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4620      	mov	r0, r4
 80081f6:	4629      	mov	r1, r5
 80081f8:	f7f8 f966 	bl	80004c8 <__aeabi_dmul>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f7 ffa8 	bl	8000158 <__aeabi_dsub>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4614      	mov	r4, r2
 800820e:	461d      	mov	r5, r3
 8008210:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008212:	f7f8 f901 	bl	8000418 <__aeabi_f2d>
 8008216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008218:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800821c:	f7f8 f954 	bl	80004c8 <__aeabi_dmul>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f7f7 ff98 	bl	800015c <__adddf3>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800823a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7f8 fc56 	bl	8000af4 <__aeabi_fsub>
 8008248:	4603      	mov	r3, r0
 800824a:	4618      	mov	r0, r3
 800824c:	f7f8 f8e4 	bl	8000418 <__aeabi_f2d>
 8008250:	4680      	mov	r8, r0
 8008252:	4689      	mov	r9, r1
 8008254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008256:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	4618      	mov	r0, r3
 8008260:	f7f8 f8da 	bl	8000418 <__aeabi_f2d>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4620      	mov	r0, r4
 800826a:	4629      	mov	r1, r5
 800826c:	f7f8 f92c 	bl	80004c8 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f7 ff70 	bl	800015c <__adddf3>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4614      	mov	r4, r2
 8008282:	461d      	mov	r5, r3
 8008284:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008286:	f7f8 f8c7 	bl	8000418 <__aeabi_f2d>
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008290:	f7f8 f91a 	bl	80004c8 <__aeabi_dmul>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	f7f7 ff5c 	bl	8000158 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	e9c7 2300 	strd	r2, r3, [r7]
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7f8 f8b3 	bl	8000418 <__aeabi_f2d>
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80082b8:	f7f7 ff50 	bl	800015c <__adddf3>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	461d      	mov	r5, r3
 80082c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7f8 f8a5 	bl	8000418 <__aeabi_f2d>
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80082d4:	f7f8 f8f8 	bl	80004c8 <__aeabi_dmul>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f7 ff3a 	bl	8000158 <__aeabi_dsub>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4692      	mov	sl, r2
 80082ea:	469b      	mov	fp, r3
 80082ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ee:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 80082f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7f8 f88e 	bl	8000418 <__aeabi_f2d>
 80082fc:	4604      	mov	r4, r0
 80082fe:	460d      	mov	r5, r1
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008304:	4618      	mov	r0, r3
 8008306:	f7f8 f887 	bl	8000418 <__aeabi_f2d>
 800830a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008310:	f7f8 f8da 	bl	80004c8 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4620      	mov	r0, r4
 800831a:	4629      	mov	r1, r5
 800831c:	f7f7 ff1c 	bl	8000158 <__aeabi_dsub>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4640      	mov	r0, r8
 8008326:	4649      	mov	r1, r9
 8008328:	f7f8 f8ce 	bl	80004c8 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4650      	mov	r0, sl
 8008332:	4659      	mov	r1, fp
 8008334:	f7f7 ff10 	bl	8000158 <__aeabi_dsub>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008340:	f7f8 f8c2 	bl	80004c8 <__aeabi_dmul>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	e9c7 2300 	strd	r2, r3, [r7]
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8008352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008356:	4618      	mov	r0, r3
 8008358:	f7f8 f85e 	bl	8000418 <__aeabi_f2d>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4620      	mov	r0, r4
 8008362:	4629      	mov	r1, r5
 8008364:	e00c      	b.n	8008380 <_ZN15Kalman_Filtresi3RunEPfS0_+0x3b8>
 8008366:	bf00      	nop
 8008368:	cccccccd 	.word	0xcccccccd
 800836c:	4013cccc 	.word	0x4013cccc
 8008370:	b22d0e56 	.word	0xb22d0e56
 8008374:	3fefef9d 	.word	0x3fefef9d
 8008378:	d2f1a9fc 	.word	0xd2f1a9fc
 800837c:	3f60624d 	.word	0x3f60624d
 8008380:	f7f7 feec 	bl	800015c <__adddf3>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4610      	mov	r0, r2
 800838a:	4619      	mov	r1, r3
 800838c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008392:	f7f7 fee3 	bl	800015c <__adddf3>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4614      	mov	r4, r2
 800839c:	461d      	mov	r5, r3
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f8 f838 	bl	8000418 <__aeabi_f2d>
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80083ae:	f7f8 f88b 	bl	80004c8 <__aeabi_dmul>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f7 fecd 	bl	8000158 <__aeabi_dsub>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4692      	mov	sl, r2
 80083c4:	469b      	mov	fp, r3
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 80083cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f8 f821 	bl	8000418 <__aeabi_f2d>
 80083d6:	4604      	mov	r4, r0
 80083d8:	460d      	mov	r5, r1
 80083da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f8 f81a 	bl	8000418 <__aeabi_f2d>
 80083e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80083ea:	f7f8 f86d 	bl	80004c8 <__aeabi_dmul>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7f7 feaf 	bl	8000158 <__aeabi_dsub>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 f861 	bl	80004c8 <__aeabi_dmul>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4650      	mov	r0, sl
 800840c:	4659      	mov	r1, fp
 800840e:	f7f7 fea3 	bl	8000158 <__aeabi_dsub>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800841a:	f7f8 f97f 	bl	800071c <__aeabi_ddiv>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008426:	f7f7 fe99 	bl	800015c <__adddf3>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4610      	mov	r0, r2
 8008430:	4619      	mov	r1, r3
 8008432:	f7f8 fb0b 	bl	8000a4c <__aeabi_d2f>
 8008436:	4602      	mov	r2, r0
 8008438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  pitch_bias = pitch_bias + ((S21_pitch + (sb_p) - S22_pitch*(st))*(pitch_acc - pitch_ekf + st*pitch_bias - gyroY*(st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 800843e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008442:	4618      	mov	r0, r3
 8008444:	f7f7 ffe8 	bl	8000418 <__aeabi_f2d>
 8008448:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800844c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008450:	4618      	mov	r0, r3
 8008452:	f7f7 ffe1 	bl	8000418 <__aeabi_f2d>
 8008456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008458:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800845c:	f7f7 fe7e 	bl	800015c <__adddf3>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4614      	mov	r4, r2
 8008466:	461d      	mov	r5, r3
 8008468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800846c:	4618      	mov	r0, r3
 800846e:	f7f7 ffd3 	bl	8000418 <__aeabi_f2d>
 8008472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008474:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008478:	f7f8 f826 	bl	80004c8 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4620      	mov	r0, r4
 8008482:	4629      	mov	r1, r5
 8008484:	f7f7 fe68 	bl	8000158 <__aeabi_dsub>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4692      	mov	sl, r2
 800848e:	469b      	mov	fp, r3
 8008490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008492:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008498:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800849c:	4619      	mov	r1, r3
 800849e:	4610      	mov	r0, r2
 80084a0:	f7f8 fb28 	bl	8000af4 <__aeabi_fsub>
 80084a4:	4603      	mov	r3, r0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7f7 ffb6 	bl	8000418 <__aeabi_f2d>
 80084ac:	4680      	mov	r8, r0
 80084ae:	4689      	mov	r9, r1
 80084b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b2:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7f7 ffac 	bl	8000418 <__aeabi_f2d>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4620      	mov	r0, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7f7 fffe 	bl	80004c8 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4640      	mov	r0, r8
 80084d2:	4649      	mov	r1, r9
 80084d4:	f7f7 fe42 	bl	800015c <__adddf3>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4614      	mov	r4, r2
 80084de:	461d      	mov	r5, r3
 80084e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084e2:	f7f7 ff99 	bl	8000418 <__aeabi_f2d>
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e8:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80084ec:	f7f7 ffec 	bl	80004c8 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4620      	mov	r0, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	f7f7 fe2e 	bl	8000158 <__aeabi_dsub>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4650      	mov	r0, sl
 8008502:	4659      	mov	r1, fp
 8008504:	f7f7 ffe0 	bl	80004c8 <__aeabi_dmul>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	e9c7 2300 	strd	r2, r3, [r7]
 8008510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008512:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8008516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	4618      	mov	r0, r3
 800851c:	f7f7 ff7c 	bl	8000418 <__aeabi_f2d>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4620      	mov	r0, r4
 8008526:	4629      	mov	r1, r5
 8008528:	f7f7 fe18 	bl	800015c <__adddf3>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4610      	mov	r0, r2
 8008532:	4619      	mov	r1, r3
 8008534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008536:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800853a:	f7f7 fe0f 	bl	800015c <__adddf3>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4614      	mov	r4, r2
 8008544:	461d      	mov	r5, r3
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	4618      	mov	r0, r3
 800854c:	f7f7 ff64 	bl	8000418 <__aeabi_f2d>
 8008550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008552:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008556:	f7f7 ffb7 	bl	80004c8 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f7 fdf9 	bl	8000158 <__aeabi_dsub>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4692      	mov	sl, r2
 800856c:	469b      	mov	fp, r3
 800856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008570:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	4618      	mov	r0, r3
 800857a:	f7f7 ff4d 	bl	8000418 <__aeabi_f2d>
 800857e:	4604      	mov	r4, r0
 8008580:	460d      	mov	r5, r1
 8008582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008586:	4618      	mov	r0, r3
 8008588:	f7f7 ff46 	bl	8000418 <__aeabi_f2d>
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008592:	f7f7 ff99 	bl	80004c8 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	f7f7 fddb 	bl	8000158 <__aeabi_dsub>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4640      	mov	r0, r8
 80085a8:	4649      	mov	r1, r9
 80085aa:	f7f7 ff8d 	bl	80004c8 <__aeabi_dmul>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4650      	mov	r0, sl
 80085b4:	4659      	mov	r1, fp
 80085b6:	f7f7 fdcf 	bl	8000158 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085c2:	f7f8 f8ab 	bl	800071c <__aeabi_ddiv>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085ce:	f7f7 fdc5 	bl	800015c <__adddf3>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4610      	mov	r0, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	f7f8 fa37 	bl	8000a4c <__aeabi_d2f>
 80085de:	4602      	mov	r2, r0
 80085e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30

  S11_pitch = -((S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)) - 1)*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7f7 ff15 	bl	8000418 <__aeabi_f2d>
 80085ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80085f4:	f7f7 fdb2 	bl	800015c <__adddf3>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	461d      	mov	r5, r3
 8008600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008604:	4618      	mov	r0, r3
 8008606:	f7f7 ff07 	bl	8000418 <__aeabi_f2d>
 800860a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008610:	f7f7 ff5a 	bl	80004c8 <__aeabi_dmul>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4620      	mov	r0, r4
 800861a:	4629      	mov	r1, r5
 800861c:	f7f7 fd9c 	bl	8000158 <__aeabi_dsub>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4692      	mov	sl, r2
 8008626:	469b      	mov	fp, r3
 8008628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862a:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	4618      	mov	r0, r3
 8008634:	f7f7 fef0 	bl	8000418 <__aeabi_f2d>
 8008638:	4604      	mov	r4, r0
 800863a:	460d      	mov	r5, r1
 800863c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008640:	4618      	mov	r0, r3
 8008642:	f7f7 fee9 	bl	8000418 <__aeabi_f2d>
 8008646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008648:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800864c:	f7f7 ff3c 	bl	80004c8 <__aeabi_dmul>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4620      	mov	r0, r4
 8008656:	4629      	mov	r1, r5
 8008658:	f7f7 fd7e 	bl	8000158 <__aeabi_dsub>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4640      	mov	r0, r8
 8008662:	4649      	mov	r1, r9
 8008664:	f7f7 ff30 	bl	80004c8 <__aeabi_dmul>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4650      	mov	r0, sl
 800866e:	4659      	mov	r1, fp
 8008670:	f7f7 fd72 	bl	8000158 <__aeabi_dsub>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800867c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867e:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008686:	4618      	mov	r0, r3
 8008688:	f7f7 fec6 	bl	8000418 <__aeabi_f2d>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4620      	mov	r0, r4
 8008692:	4629      	mov	r1, r5
 8008694:	f7f7 fd62 	bl	800015c <__adddf3>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4610      	mov	r0, r2
 800869e:	4619      	mov	r1, r3
 80086a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80086a6:	f7f7 fd59 	bl	800015c <__adddf3>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4614      	mov	r4, r2
 80086b0:	461d      	mov	r5, r3
 80086b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f7 feae 	bl	8000418 <__aeabi_f2d>
 80086bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086be:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80086c2:	f7f7 ff01 	bl	80004c8 <__aeabi_dmul>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f7 fd43 	bl	8000158 <__aeabi_dsub>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4692      	mov	sl, r2
 80086d8:	469b      	mov	fp, r3
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 80086e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7f7 fe97 	bl	8000418 <__aeabi_f2d>
 80086ea:	4604      	mov	r4, r0
 80086ec:	460d      	mov	r5, r1
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7f7 fe90 	bl	8000418 <__aeabi_f2d>
 80086f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80086fe:	f7f7 fee3 	bl	80004c8 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f7 fd25 	bl	8000158 <__aeabi_dsub>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fed7 	bl	80004c8 <__aeabi_dmul>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4650      	mov	r0, sl
 8008720:	4659      	mov	r1, fp
 8008722:	f7f7 fd19 	bl	8000158 <__aeabi_dsub>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800872e:	f7f7 fff5 	bl	800071c <__aeabi_ddiv>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	4bbc      	ldr	r3, [pc, #752]	; (8008a30 <_ZN15Kalman_Filtresi3RunEPfS0_+0xa68>)
 8008740:	f7f7 fd0a 	bl	8000158 <__aeabi_dsub>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	62ba      	str	r2, [r7, #40]	; 0x28
 800874a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008754:	4618      	mov	r0, r3
 8008756:	f7f7 fe5f 	bl	8000418 <__aeabi_f2d>
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008760:	f7f7 fcfc 	bl	800015c <__adddf3>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4614      	mov	r4, r2
 800876a:	461d      	mov	r5, r3
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008770:	4618      	mov	r0, r3
 8008772:	f7f7 fe51 	bl	8000418 <__aeabi_f2d>
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800877c:	f7f7 fea4 	bl	80004c8 <__aeabi_dmul>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4620      	mov	r0, r4
 8008786:	4629      	mov	r1, r5
 8008788:	f7f7 fce6 	bl	8000158 <__aeabi_dsub>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4692      	mov	sl, r2
 8008792:	469b      	mov	fp, r3
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 800879a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f7 fe3a 	bl	8000418 <__aeabi_f2d>
 80087a4:	4604      	mov	r4, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f7 fe33 	bl	8000418 <__aeabi_f2d>
 80087b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b4:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80087b8:	f7f7 fe86 	bl	80004c8 <__aeabi_dmul>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4620      	mov	r0, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	f7f7 fcc8 	bl	8000158 <__aeabi_dsub>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4640      	mov	r0, r8
 80087ce:	4649      	mov	r1, r9
 80087d0:	f7f7 fe7a 	bl	80004c8 <__aeabi_dmul>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4650      	mov	r0, sl
 80087da:	4659      	mov	r1, fp
 80087dc:	f7f7 fcbc 	bl	8000158 <__aeabi_dsub>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087e8:	f7f7 fe6e 	bl	80004c8 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4610      	mov	r0, r2
 80087f2:	4619      	mov	r1, r3
 80087f4:	f7f8 f92a 	bl	8000a4c <__aeabi_d2f>
 80087f8:	4602      	mov	r2, r0
 80087fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fc:	63da      	str	r2, [r3, #60]	; 0x3c
  S12_pitch = -((S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)) - 1)*(S12_pitch + (sa_p) - S22_pitch*st);
 80087fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	4618      	mov	r0, r3
 8008804:	f7f7 fe08 	bl	8000418 <__aeabi_f2d>
 8008808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800880e:	f7f7 fca5 	bl	800015c <__adddf3>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4614      	mov	r4, r2
 8008818:	461d      	mov	r5, r3
 800881a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881e:	4618      	mov	r0, r3
 8008820:	f7f7 fdfa 	bl	8000418 <__aeabi_f2d>
 8008824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008826:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800882a:	f7f7 fe4d 	bl	80004c8 <__aeabi_dmul>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4620      	mov	r0, r4
 8008834:	4629      	mov	r1, r5
 8008836:	f7f7 fc8f 	bl	8000158 <__aeabi_dsub>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4692      	mov	sl, r2
 8008840:	469b      	mov	fp, r3
 8008842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008844:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8008848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	4618      	mov	r0, r3
 800884e:	f7f7 fde3 	bl	8000418 <__aeabi_f2d>
 8008852:	4604      	mov	r4, r0
 8008854:	460d      	mov	r5, r1
 8008856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885a:	4618      	mov	r0, r3
 800885c:	f7f7 fddc 	bl	8000418 <__aeabi_f2d>
 8008860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008862:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008866:	f7f7 fe2f 	bl	80004c8 <__aeabi_dmul>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f7 fc71 	bl	8000158 <__aeabi_dsub>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	f7f7 fe23 	bl	80004c8 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4650      	mov	r0, sl
 8008888:	4659      	mov	r1, fp
 800888a:	f7f7 fc65 	bl	8000158 <__aeabi_dsub>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008898:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800889c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7f7 fdb9 	bl	8000418 <__aeabi_f2d>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7f7 fc55 	bl	800015c <__adddf3>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4610      	mov	r0, r2
 80088b8:	4619      	mov	r1, r3
 80088ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80088c0:	f7f7 fc4c 	bl	800015c <__adddf3>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4614      	mov	r4, r2
 80088ca:	461d      	mov	r5, r3
 80088cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7f7 fda1 	bl	8000418 <__aeabi_f2d>
 80088d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d8:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80088dc:	f7f7 fdf4 	bl	80004c8 <__aeabi_dmul>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fc36 	bl	8000158 <__aeabi_dsub>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4692      	mov	sl, r2
 80088f2:	469b      	mov	fp, r3
 80088f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f6:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f7 fd8a 	bl	8000418 <__aeabi_f2d>
 8008904:	4604      	mov	r4, r0
 8008906:	460d      	mov	r5, r1
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800890c:	4618      	mov	r0, r3
 800890e:	f7f7 fd83 	bl	8000418 <__aeabi_f2d>
 8008912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008914:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008918:	f7f7 fdd6 	bl	80004c8 <__aeabi_dmul>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4620      	mov	r0, r4
 8008922:	4629      	mov	r1, r5
 8008924:	f7f7 fc18 	bl	8000158 <__aeabi_dsub>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4640      	mov	r0, r8
 800892e:	4649      	mov	r1, r9
 8008930:	f7f7 fdca 	bl	80004c8 <__aeabi_dmul>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4650      	mov	r0, sl
 800893a:	4659      	mov	r1, fp
 800893c:	f7f7 fc0c 	bl	8000158 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008948:	f7f7 fee8 	bl	800071c <__aeabi_ddiv>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4610      	mov	r0, r2
 8008952:	4619      	mov	r1, r3
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	4b35      	ldr	r3, [pc, #212]	; (8008a30 <_ZN15Kalman_Filtresi3RunEPfS0_+0xa68>)
 800895a:	f7f7 fbfd 	bl	8000158 <__aeabi_dsub>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	623a      	str	r2, [r7, #32]
 8008964:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
 800896a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	4618      	mov	r0, r3
 8008970:	f7f7 fd52 	bl	8000418 <__aeabi_f2d>
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800897a:	f7f7 fbef 	bl	800015c <__adddf3>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4614      	mov	r4, r2
 8008984:	461d      	mov	r5, r3
 8008986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800898a:	4618      	mov	r0, r3
 800898c:	f7f7 fd44 	bl	8000418 <__aeabi_f2d>
 8008990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008992:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008996:	f7f7 fd97 	bl	80004c8 <__aeabi_dmul>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f7 fbd9 	bl	8000158 <__aeabi_dsub>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80089ae:	f7f7 fd8b 	bl	80004c8 <__aeabi_dmul>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7f8 f847 	bl	8000a4c <__aeabi_d2f>
 80089be:	4602      	mov	r2, r0
 80089c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40
  S21_pitch = S21_pitch + (sb_p) - S22_pitch*(st) - ((S21_pitch + (sb_p) - S22_pitch*(st))*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 80089c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7f7 fd25 	bl	8000418 <__aeabi_f2d>
 80089ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80089d4:	f7f7 fbc2 	bl	800015c <__adddf3>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4614      	mov	r4, r2
 80089de:	461d      	mov	r5, r3
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7f7 fd17 	bl	8000418 <__aeabi_f2d>
 80089ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ec:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80089f0:	f7f7 fd6a 	bl	80004c8 <__aeabi_dmul>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fbac 	bl	8000158 <__aeabi_dsub>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7f7 fd03 	bl	8000418 <__aeabi_f2d>
 8008a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a14:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008a18:	f7f7 fba0 	bl	800015c <__adddf3>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	461d      	mov	r5, r3
 8008a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7f7 fcf5 	bl	8000418 <__aeabi_f2d>
 8008a2e:	e001      	b.n	8008a34 <_ZN15Kalman_Filtresi3RunEPfS0_+0xa6c>
 8008a30:	3ff00000 	.word	0x3ff00000
 8008a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a36:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008a3a:	f7f7 fd45 	bl	80004c8 <__aeabi_dmul>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f7 fb87 	bl	8000158 <__aeabi_dsub>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f7 fcde 	bl	8000418 <__aeabi_f2d>
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008a62:	f7f7 fb7b 	bl	800015c <__adddf3>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	461d      	mov	r5, r3
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f7 fcd0 	bl	8000418 <__aeabi_f2d>
 8008a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008a7e:	f7f7 fd23 	bl	80004c8 <__aeabi_dmul>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 fb65 	bl	8000158 <__aeabi_dsub>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4692      	mov	sl, r2
 8008a94:	469b      	mov	fp, r3
 8008a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a98:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7f7 fcb9 	bl	8000418 <__aeabi_f2d>
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7f7 fcb2 	bl	8000418 <__aeabi_f2d>
 8008ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008aba:	f7f7 fd05 	bl	80004c8 <__aeabi_dmul>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	f7f7 fb47 	bl	8000158 <__aeabi_dsub>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f7 fcf9 	bl	80004c8 <__aeabi_dmul>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fb3b 	bl	8000158 <__aeabi_dsub>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008aea:	f7f7 fced 	bl	80004c8 <__aeabi_dmul>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af8:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8008afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7f7 fc89 	bl	8000418 <__aeabi_f2d>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fb25 	bl	800015c <__adddf3>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4610      	mov	r0, r2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008b20:	f7f7 fb1c 	bl	800015c <__adddf3>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	461d      	mov	r5, r3
 8008b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 fc71 	bl	8000418 <__aeabi_f2d>
 8008b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b38:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008b3c:	f7f7 fcc4 	bl	80004c8 <__aeabi_dmul>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4620      	mov	r0, r4
 8008b46:	4629      	mov	r1, r5
 8008b48:	f7f7 fb06 	bl	8000158 <__aeabi_dsub>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4692      	mov	sl, r2
 8008b52:	469b      	mov	fp, r3
 8008b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b56:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7f7 fc5a 	bl	8000418 <__aeabi_f2d>
 8008b64:	4604      	mov	r4, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7f7 fc53 	bl	8000418 <__aeabi_f2d>
 8008b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b74:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008b78:	f7f7 fca6 	bl	80004c8 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7f7 fae8 	bl	8000158 <__aeabi_dsub>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	f7f7 fc9a 	bl	80004c8 <__aeabi_dmul>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4650      	mov	r0, sl
 8008b9a:	4659      	mov	r1, fp
 8008b9c:	f7f7 fadc 	bl	8000158 <__aeabi_dsub>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ba8:	f7f7 fdb8 	bl	800071c <__aeabi_ddiv>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008bb4:	f7f7 fad0 	bl	8000158 <__aeabi_dsub>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	f7f7 ff44 	bl	8000a4c <__aeabi_d2f>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc8:	645a      	str	r2, [r3, #68]	; 0x44
  S22_pitch = S22_pitch + (sb_p) - ((S21_pitch + (sb_p) - S22_pitch*(st))*(S12_pitch + (sa_p) - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 8008bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7f7 fc22 	bl	8000418 <__aeabi_f2d>
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008bda:	f7f7 fabf 	bl	800015c <__adddf3>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f7 fc14 	bl	8000418 <__aeabi_f2d>
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008bf6:	f7f7 fab1 	bl	800015c <__adddf3>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4614      	mov	r4, r2
 8008c00:	461d      	mov	r5, r3
 8008c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f7 fc06 	bl	8000418 <__aeabi_f2d>
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008c12:	f7f7 fc59 	bl	80004c8 <__aeabi_dmul>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7f7 fa9b 	bl	8000158 <__aeabi_dsub>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4690      	mov	r8, r2
 8008c28:	4699      	mov	r9, r3
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f7 fbf2 	bl	8000418 <__aeabi_f2d>
 8008c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008c3a:	f7f7 fa8f 	bl	800015c <__adddf3>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4614      	mov	r4, r2
 8008c44:	461d      	mov	r5, r3
 8008c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f7 fbe4 	bl	8000418 <__aeabi_f2d>
 8008c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c52:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008c56:	f7f7 fc37 	bl	80004c8 <__aeabi_dmul>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fa79 	bl	8000158 <__aeabi_dsub>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	f7f7 fc2b 	bl	80004c8 <__aeabi_dmul>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7c:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8008c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7f7 fbc7 	bl	8000418 <__aeabi_f2d>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7f7 fa63 	bl	800015c <__adddf3>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008ca4:	f7f7 fa5a 	bl	800015c <__adddf3>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	461d      	mov	r5, r3
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7f7 fbaf 	bl	8000418 <__aeabi_f2d>
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008cc0:	f7f7 fc02 	bl	80004c8 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4620      	mov	r0, r4
 8008cca:	4629      	mov	r1, r5
 8008ccc:	f7f7 fa44 	bl	8000158 <__aeabi_dsub>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4692      	mov	sl, r2
 8008cd6:	469b      	mov	fp, r3
 8008cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cda:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8008cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f7 fb98 	bl	8000418 <__aeabi_f2d>
 8008ce8:	4604      	mov	r4, r0
 8008cea:	460d      	mov	r5, r1
 8008cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f7 fb91 	bl	8000418 <__aeabi_f2d>
 8008cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf8:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008cfc:	f7f7 fbe4 	bl	80004c8 <__aeabi_dmul>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4620      	mov	r0, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	f7f7 fa26 	bl	8000158 <__aeabi_dsub>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4640      	mov	r0, r8
 8008d12:	4649      	mov	r1, r9
 8008d14:	f7f7 fbd8 	bl	80004c8 <__aeabi_dmul>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4650      	mov	r0, sl
 8008d1e:	4659      	mov	r1, fp
 8008d20:	f7f7 fa1a 	bl	8000158 <__aeabi_dsub>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d2c:	f7f7 fcf6 	bl	800071c <__aeabi_ddiv>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008d38:	f7f7 fa0e 	bl	8000158 <__aeabi_dsub>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4610      	mov	r0, r2
 8008d42:	4619      	mov	r1, r3
 8008d44:	f7f7 fe82 	bl	8000a4c <__aeabi_d2f>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4c:	649a      	str	r2, [r3, #72]	; 0x48
    pitch_rate = gyroY;
 8008d4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008d50:	f7f7 fb62 	bl	8000418 <__aeabi_f2d>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d5a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    roll_ekf = roll_ekf - st*roll_bias + gyroX*(st) + ((roll_acc - roll_ekf + st*roll_bias - gyroX*(st))*(S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st)))/(Q + S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st));
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7f7 fb57 	bl	8000418 <__aeabi_f2d>
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	4689      	mov	r9, r1
 8008d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d70:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8008d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7f7 fb4d 	bl	8000418 <__aeabi_f2d>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4620      	mov	r0, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	f7f7 fb9f 	bl	80004c8 <__aeabi_dmul>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4640      	mov	r0, r8
 8008d90:	4649      	mov	r1, r9
 8008d92:	f7f7 f9e1 	bl	8000158 <__aeabi_dsub>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	461d      	mov	r5, r3
 8008d9e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008da0:	f7f7 fb3a 	bl	8000418 <__aeabi_f2d>
 8008da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008daa:	f7f7 fb8d 	bl	80004c8 <__aeabi_dmul>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4620      	mov	r0, r4
 8008db4:	4629      	mov	r1, r5
 8008db6:	f7f7 f9d1 	bl	800015c <__adddf3>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8008dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7f7 fe8f 	bl	8000af4 <__aeabi_fsub>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f7 fb1d 	bl	8000418 <__aeabi_f2d>
 8008dde:	4680      	mov	r8, r0
 8008de0:	4689      	mov	r9, r1
 8008de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de4:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8008de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f7 fb13 	bl	8000418 <__aeabi_f2d>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f7f7 fb65 	bl	80004c8 <__aeabi_dmul>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4640      	mov	r0, r8
 8008e04:	4649      	mov	r1, r9
 8008e06:	f7f7 f9a9 	bl	800015c <__adddf3>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4614      	mov	r4, r2
 8008e10:	461d      	mov	r5, r3
 8008e12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e14:	f7f7 fb00 	bl	8000418 <__aeabi_f2d>
 8008e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008e1e:	f7f7 fb53 	bl	80004c8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 f995 	bl	8000158 <__aeabi_dsub>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7f7 faec 	bl	8000418 <__aeabi_f2d>
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008e46:	f7f7 f989 	bl	800015c <__adddf3>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4614      	mov	r4, r2
 8008e50:	461d      	mov	r5, r3
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7f7 fadd 	bl	8000418 <__aeabi_f2d>
 8008e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e60:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008e64:	f7f7 fb30 	bl	80004c8 <__aeabi_dmul>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f7f7 f972 	bl	8000158 <__aeabi_dsub>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4692      	mov	sl, r2
 8008e7a:	469b      	mov	fp, r3
 8008e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7e:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8008e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7f7 fac6 	bl	8000418 <__aeabi_f2d>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f7 fabe 	bl	8000418 <__aeabi_f2d>
 8008e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008ea2:	f7f7 fb11 	bl	80004c8 <__aeabi_dmul>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4629      	mov	r1, r5
 8008eae:	f7f7 f953 	bl	8000158 <__aeabi_dsub>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 fb05 	bl	80004c8 <__aeabi_dmul>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	f7f7 f947 	bl	8000158 <__aeabi_dsub>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ed2:	f7f7 faf9 	bl	80004c8 <__aeabi_dmul>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee0:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7f7 fa95 	bl	8000418 <__aeabi_f2d>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 f931 	bl	800015c <__adddf3>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4610      	mov	r0, r2
 8008f00:	4619      	mov	r1, r3
 8008f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f04:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008f08:	f7f7 f928 	bl	800015c <__adddf3>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4614      	mov	r4, r2
 8008f12:	461d      	mov	r5, r3
 8008f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f7 fa7c 	bl	8000418 <__aeabi_f2d>
 8008f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f22:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008f26:	f7f7 facf 	bl	80004c8 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7f7 f911 	bl	8000158 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4692      	mov	sl, r2
 8008f3c:	469b      	mov	fp, r3
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f40:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8008f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7f7 fa65 	bl	8000418 <__aeabi_f2d>
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
 8008f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7f7 fa5d 	bl	8000418 <__aeabi_f2d>
 8008f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f60:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008f64:	f7f7 fab0 	bl	80004c8 <__aeabi_dmul>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 f8f2 	bl	8000158 <__aeabi_dsub>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 faa4 	bl	80004c8 <__aeabi_dmul>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4650      	mov	r0, sl
 8008f86:	4659      	mov	r1, fp
 8008f88:	f7f7 f8e6 	bl	8000158 <__aeabi_dsub>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f94:	f7f7 fbc2 	bl	800071c <__aeabi_ddiv>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008fa0:	f7f7 f8dc 	bl	800015c <__adddf3>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4619      	mov	r1, r3
 8008fac:	f7f7 fd4e 	bl	8000a4c <__aeabi_d2f>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  roll_bias = roll_bias + ((S21_roll + (sb_r) - S22_roll*(st))*(roll_acc - roll_ekf + st*roll_bias - gyroX*(st)))/(Q + S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st));
 8008fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7f7 fa2b 	bl	8000418 <__aeabi_f2d>
 8008fc2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8008fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7f7 fa23 	bl	8000418 <__aeabi_f2d>
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008fd8:	f7f7 f8c0 	bl	800015c <__adddf3>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	461d      	mov	r5, r3
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f7 fa14 	bl	8000418 <__aeabi_f2d>
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff2:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8008ff6:	f7f7 fa67 	bl	80004c8 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 f8a9 	bl	8000158 <__aeabi_dsub>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4692      	mov	sl, r2
 800900c:	469b      	mov	fp, r3
 800900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009010:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8009014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009016:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800901a:	4619      	mov	r1, r3
 800901c:	4610      	mov	r0, r2
 800901e:	f7f7 fd69 	bl	8000af4 <__aeabi_fsub>
 8009022:	4603      	mov	r3, r0
 8009024:	4618      	mov	r0, r3
 8009026:	f7f7 f9f7 	bl	8000418 <__aeabi_f2d>
 800902a:	4680      	mov	r8, r0
 800902c:	4689      	mov	r9, r1
 800902e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009030:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8009034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	4618      	mov	r0, r3
 800903a:	f7f7 f9ed 	bl	8000418 <__aeabi_f2d>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4620      	mov	r0, r4
 8009044:	4629      	mov	r1, r5
 8009046:	f7f7 fa3f 	bl	80004c8 <__aeabi_dmul>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4640      	mov	r0, r8
 8009050:	4649      	mov	r1, r9
 8009052:	f7f7 f883 	bl	800015c <__adddf3>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4614      	mov	r4, r2
 800905c:	461d      	mov	r5, r3
 800905e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009060:	f7f7 f9da 	bl	8000418 <__aeabi_f2d>
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800906a:	f7f7 fa2d 	bl	80004c8 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 f86f 	bl	8000158 <__aeabi_dsub>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4650      	mov	r0, sl
 8009080:	4659      	mov	r1, fp
 8009082:	f7f7 fa21 	bl	80004c8 <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800908e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009090:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8009094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009098:	4618      	mov	r0, r3
 800909a:	f7f7 f9bd 	bl	8000418 <__aeabi_f2d>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 f859 	bl	800015c <__adddf3>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4610      	mov	r0, r2
 80090b0:	4619      	mov	r1, r3
 80090b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80090b8:	f7f7 f850 	bl	800015c <__adddf3>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4614      	mov	r4, r2
 80090c2:	461d      	mov	r5, r3
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f7 f9a4 	bl	8000418 <__aeabi_f2d>
 80090d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d2:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80090d6:	f7f7 f9f7 	bl	80004c8 <__aeabi_dmul>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 f839 	bl	8000158 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4692      	mov	sl, r2
 80090ec:	469b      	mov	fp, r3
 80090ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f0:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 80090f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 f98d 	bl	8000418 <__aeabi_f2d>
 80090fe:	4604      	mov	r4, r0
 8009100:	460d      	mov	r5, r1
 8009102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009108:	4618      	mov	r0, r3
 800910a:	f7f7 f985 	bl	8000418 <__aeabi_f2d>
 800910e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009110:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009114:	f7f7 f9d8 	bl	80004c8 <__aeabi_dmul>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4620      	mov	r0, r4
 800911e:	4629      	mov	r1, r5
 8009120:	f7f7 f81a 	bl	8000158 <__aeabi_dsub>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 f9cc 	bl	80004c8 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4650      	mov	r0, sl
 8009136:	4659      	mov	r1, fp
 8009138:	f7f7 f80e 	bl	8000158 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009144:	f7f7 faea 	bl	800071c <__aeabi_ddiv>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009150:	f7f7 f804 	bl	800015c <__adddf3>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4610      	mov	r0, r2
 800915a:	4619      	mov	r1, r3
 800915c:	f7f7 fc76 	bl	8000a4c <__aeabi_d2f>
 8009160:	4602      	mov	r2, r0
 8009162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009164:	635a      	str	r2, [r3, #52]	; 0x34

  S11_roll = -((S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st))/(Q + S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st)) - 1)*(S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st));
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800916a:	4618      	mov	r0, r3
 800916c:	f7f7 f954 	bl	8000418 <__aeabi_f2d>
 8009170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009172:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009176:	f7f6 fff1 	bl	800015c <__adddf3>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4614      	mov	r4, r2
 8009180:	461d      	mov	r5, r3
 8009182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009188:	4618      	mov	r0, r3
 800918a:	f7f7 f945 	bl	8000418 <__aeabi_f2d>
 800918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009190:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009194:	f7f7 f998 	bl	80004c8 <__aeabi_dmul>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f6 ffda 	bl	8000158 <__aeabi_dsub>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4692      	mov	sl, r2
 80091aa:	469b      	mov	fp, r3
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f7 f92e 	bl	8000418 <__aeabi_f2d>
 80091bc:	4680      	mov	r8, r0
 80091be:	4689      	mov	r9, r1
 80091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f7 f926 	bl	8000418 <__aeabi_f2d>
 80091cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ce:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80091d2:	f7f7 f979 	bl	80004c8 <__aeabi_dmul>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4640      	mov	r0, r8
 80091dc:	4649      	mov	r1, r9
 80091de:	f7f6 ffbb 	bl	8000158 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 f96d 	bl	80004c8 <__aeabi_dmul>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4650      	mov	r0, sl
 80091f4:	4659      	mov	r1, fp
 80091f6:	f7f6 ffaf 	bl	8000158 <__aeabi_dsub>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009204:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800920c:	4618      	mov	r0, r3
 800920e:	f7f7 f903 	bl	8000418 <__aeabi_f2d>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f7f6 ff9f 	bl	800015c <__adddf3>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	4610      	mov	r0, r2
 8009224:	4619      	mov	r1, r3
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800922c:	f7f6 ff96 	bl	800015c <__adddf3>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4614      	mov	r4, r2
 8009236:	461d      	mov	r5, r3
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923e:	4618      	mov	r0, r3
 8009240:	f7f7 f8ea 	bl	8000418 <__aeabi_f2d>
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800924a:	f7f7 f93d 	bl	80004c8 <__aeabi_dmul>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f6 ff7f 	bl	8000158 <__aeabi_dsub>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4692      	mov	sl, r2
 8009260:	469b      	mov	fp, r3
 8009262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009264:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926c:	4618      	mov	r0, r3
 800926e:	f7f7 f8d3 	bl	8000418 <__aeabi_f2d>
 8009272:	4604      	mov	r4, r0
 8009274:	460d      	mov	r5, r1
 8009276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800927c:	4618      	mov	r0, r3
 800927e:	f7f7 f8cb 	bl	8000418 <__aeabi_f2d>
 8009282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009284:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009288:	f7f7 f91e 	bl	80004c8 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f6 ff60 	bl	8000158 <__aeabi_dsub>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f7 f912 	bl	80004c8 <__aeabi_dmul>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4650      	mov	r0, sl
 80092aa:	4659      	mov	r1, fp
 80092ac:	f7f6 ff54 	bl	8000158 <__aeabi_dsub>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80092b8:	f7f7 fa30 	bl	800071c <__aeabi_ddiv>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4610      	mov	r0, r2
 80092c2:	4619      	mov	r1, r3
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	4bc1      	ldr	r3, [pc, #772]	; (80095d0 <_ZN15Kalman_Filtresi3RunEPfS0_+0x1608>)
 80092ca:	f7f6 ff45 	bl	8000158 <__aeabi_dsub>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	61ba      	str	r2, [r7, #24]
 80092d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f7 f89a 	bl	8000418 <__aeabi_f2d>
 80092e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80092ea:	f7f6 ff37 	bl	800015c <__adddf3>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4614      	mov	r4, r2
 80092f4:	461d      	mov	r5, r3
 80092f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7f7 f88b 	bl	8000418 <__aeabi_f2d>
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009308:	f7f7 f8de 	bl	80004c8 <__aeabi_dmul>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4620      	mov	r0, r4
 8009312:	4629      	mov	r1, r5
 8009314:	f7f6 ff20 	bl	8000158 <__aeabi_dsub>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4692      	mov	sl, r2
 800931e:	469b      	mov	fp, r3
 8009320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009322:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932a:	4618      	mov	r0, r3
 800932c:	f7f7 f874 	bl	8000418 <__aeabi_f2d>
 8009330:	4680      	mov	r8, r0
 8009332:	4689      	mov	r9, r1
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800933a:	4618      	mov	r0, r3
 800933c:	f7f7 f86c 	bl	8000418 <__aeabi_f2d>
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009342:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009346:	f7f7 f8bf 	bl	80004c8 <__aeabi_dmul>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	f7f6 ff01 	bl	8000158 <__aeabi_dsub>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4620      	mov	r0, r4
 800935c:	4629      	mov	r1, r5
 800935e:	f7f7 f8b3 	bl	80004c8 <__aeabi_dmul>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4650      	mov	r0, sl
 8009368:	4659      	mov	r1, fp
 800936a:	f7f6 fef5 	bl	8000158 <__aeabi_dsub>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009376:	f7f7 f8a7 	bl	80004c8 <__aeabi_dmul>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4610      	mov	r0, r2
 8009380:	4619      	mov	r1, r3
 8009382:	f7f7 fb63 	bl	8000a4c <__aeabi_d2f>
 8009386:	4602      	mov	r2, r0
 8009388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938a:	679a      	str	r2, [r3, #120]	; 0x78
  S12_roll = -((S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st))/(Q + S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st)) - 1)*(S12_roll + (sa_r) - S22_roll*st);
 800938c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009390:	4618      	mov	r0, r3
 8009392:	f7f7 f841 	bl	8000418 <__aeabi_f2d>
 8009396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009398:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800939c:	f7f6 fede 	bl	800015c <__adddf3>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4614      	mov	r4, r2
 80093a6:	461d      	mov	r5, r3
 80093a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7f7 f832 	bl	8000418 <__aeabi_f2d>
 80093b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80093ba:	f7f7 f885 	bl	80004c8 <__aeabi_dmul>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4620      	mov	r0, r4
 80093c4:	4629      	mov	r1, r5
 80093c6:	f7f6 fec7 	bl	8000158 <__aeabi_dsub>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4692      	mov	sl, r2
 80093d0:	469b      	mov	fp, r3
 80093d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d4:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 80093d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093dc:	4618      	mov	r0, r3
 80093de:	f7f7 f81b 	bl	8000418 <__aeabi_f2d>
 80093e2:	4680      	mov	r8, r0
 80093e4:	4689      	mov	r9, r1
 80093e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f7 f813 	bl	8000418 <__aeabi_f2d>
 80093f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f4:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80093f8:	f7f7 f866 	bl	80004c8 <__aeabi_dmul>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f6 fea8 	bl	8000158 <__aeabi_dsub>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4620      	mov	r0, r4
 800940e:	4629      	mov	r1, r5
 8009410:	f7f7 f85a 	bl	80004c8 <__aeabi_dmul>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4650      	mov	r0, sl
 800941a:	4659      	mov	r1, fp
 800941c:	f7f6 fe9c 	bl	8000158 <__aeabi_dsub>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4692      	mov	sl, r2
 8009426:	469b      	mov	fp, r3
 8009428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942a:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800942e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009432:	4618      	mov	r0, r3
 8009434:	f7f6 fff0 	bl	8000418 <__aeabi_f2d>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4620      	mov	r0, r4
 800943e:	4629      	mov	r1, r5
 8009440:	f7f6 fe8c 	bl	800015c <__adddf3>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4610      	mov	r0, r2
 800944a:	4619      	mov	r1, r3
 800944c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009452:	f7f6 fe83 	bl	800015c <__adddf3>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4614      	mov	r4, r2
 800945c:	461d      	mov	r5, r3
 800945e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009464:	4618      	mov	r0, r3
 8009466:	f7f6 ffd7 	bl	8000418 <__aeabi_f2d>
 800946a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009470:	f7f7 f82a 	bl	80004c8 <__aeabi_dmul>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4620      	mov	r0, r4
 800947a:	4629      	mov	r1, r5
 800947c:	f7f6 fe6c 	bl	8000158 <__aeabi_dsub>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948a:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800948e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009492:	4618      	mov	r0, r3
 8009494:	f7f6 ffc0 	bl	8000418 <__aeabi_f2d>
 8009498:	4680      	mov	r8, r0
 800949a:	4689      	mov	r9, r1
 800949c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f6 ffb8 	bl	8000418 <__aeabi_f2d>
 80094a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094aa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80094ae:	f7f7 f80b 	bl	80004c8 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4640      	mov	r0, r8
 80094b8:	4649      	mov	r1, r9
 80094ba:	f7f6 fe4d 	bl	8000158 <__aeabi_dsub>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4620      	mov	r0, r4
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7f6 ffff 	bl	80004c8 <__aeabi_dmul>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80094d2:	f7f6 fe41 	bl	8000158 <__aeabi_dsub>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4650      	mov	r0, sl
 80094dc:	4659      	mov	r1, fp
 80094de:	f7f7 f91d 	bl	800071c <__aeabi_ddiv>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4610      	mov	r0, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	f04f 0200 	mov.w	r2, #0
 80094ee:	4b38      	ldr	r3, [pc, #224]	; (80095d0 <_ZN15Kalman_Filtresi3RunEPfS0_+0x1608>)
 80094f0:	f7f6 fe32 	bl	8000158 <__aeabi_dsub>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	613a      	str	r2, [r7, #16]
 80094fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009504:	4618      	mov	r0, r3
 8009506:	f7f6 ff87 	bl	8000418 <__aeabi_f2d>
 800950a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009510:	f7f6 fe24 	bl	800015c <__adddf3>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4614      	mov	r4, r2
 800951a:	461d      	mov	r5, r3
 800951c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009522:	4618      	mov	r0, r3
 8009524:	f7f6 ff78 	bl	8000418 <__aeabi_f2d>
 8009528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800952e:	f7f6 ffcb 	bl	80004c8 <__aeabi_dmul>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4620      	mov	r0, r4
 8009538:	4629      	mov	r1, r5
 800953a:	f7f6 fe0d 	bl	8000158 <__aeabi_dsub>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009546:	f7f6 ffbf 	bl	80004c8 <__aeabi_dmul>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4610      	mov	r0, r2
 8009550:	4619      	mov	r1, r3
 8009552:	f7f7 fa7b 	bl	8000a4c <__aeabi_d2f>
 8009556:	4602      	mov	r2, r0
 8009558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955a:	67da      	str	r2, [r3, #124]	; 0x7c
  S21_roll = S21_roll + (sb_r) - S22_roll*(st) - ((S21_roll + (sb_r) - S22_roll*(st))*(S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st)))/(Q + S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st));
 800955c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009562:	4618      	mov	r0, r3
 8009564:	f7f6 ff58 	bl	8000418 <__aeabi_f2d>
 8009568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800956e:	f7f6 fdf5 	bl	800015c <__adddf3>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4614      	mov	r4, r2
 8009578:	461d      	mov	r5, r3
 800957a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009580:	4618      	mov	r0, r3
 8009582:	f7f6 ff49 	bl	8000418 <__aeabi_f2d>
 8009586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009588:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800958c:	f7f6 ff9c 	bl	80004c8 <__aeabi_dmul>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 fdde 	bl	8000158 <__aeabi_dsub>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80095a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f6 ff34 	bl	8000418 <__aeabi_f2d>
 80095b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80095b6:	f7f6 fdd1 	bl	800015c <__adddf3>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4614      	mov	r4, r2
 80095c0:	461d      	mov	r5, r3
 80095c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7f6 ff25 	bl	8000418 <__aeabi_f2d>
 80095ce:	e001      	b.n	80095d4 <_ZN15Kalman_Filtresi3RunEPfS0_+0x160c>
 80095d0:	3ff00000 	.word	0x3ff00000
 80095d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80095da:	f7f6 ff75 	bl	80004c8 <__aeabi_dmul>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4620      	mov	r0, r4
 80095e4:	4629      	mov	r1, r5
 80095e6:	f7f6 fdb7 	bl	8000158 <__aeabi_dsub>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4692      	mov	sl, r2
 80095f0:	469b      	mov	fp, r3
 80095f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7f6 ff0e 	bl	8000418 <__aeabi_f2d>
 80095fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009602:	f7f6 fdab 	bl	800015c <__adddf3>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4614      	mov	r4, r2
 800960c:	461d      	mov	r5, r3
 800960e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009614:	4618      	mov	r0, r3
 8009616:	f7f6 feff 	bl	8000418 <__aeabi_f2d>
 800961a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009620:	f7f6 ff52 	bl	80004c8 <__aeabi_dmul>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4620      	mov	r0, r4
 800962a:	4629      	mov	r1, r5
 800962c:	f7f6 fd94 	bl	8000158 <__aeabi_dsub>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963a:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800963e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009642:	4618      	mov	r0, r3
 8009644:	f7f6 fee8 	bl	8000418 <__aeabi_f2d>
 8009648:	4680      	mov	r8, r0
 800964a:	4689      	mov	r9, r1
 800964c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009652:	4618      	mov	r0, r3
 8009654:	f7f6 fee0 	bl	8000418 <__aeabi_f2d>
 8009658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800965e:	f7f6 ff33 	bl	80004c8 <__aeabi_dmul>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	4640      	mov	r0, r8
 8009668:	4649      	mov	r1, r9
 800966a:	f7f6 fd75 	bl	8000158 <__aeabi_dsub>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4620      	mov	r0, r4
 8009674:	4629      	mov	r1, r5
 8009676:	f7f6 ff27 	bl	80004c8 <__aeabi_dmul>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009682:	f7f6 fd69 	bl	8000158 <__aeabi_dsub>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4650      	mov	r0, sl
 800968c:	4659      	mov	r1, fp
 800968e:	f7f6 ff1b 	bl	80004c8 <__aeabi_dmul>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4692      	mov	sl, r2
 8009698:	469b      	mov	fp, r3
 800969a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969c:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 80096a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f6 feb7 	bl	8000418 <__aeabi_f2d>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f6 fd53 	bl	800015c <__adddf3>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4610      	mov	r0, r2
 80096bc:	4619      	mov	r1, r3
 80096be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80096c4:	f7f6 fd4a 	bl	800015c <__adddf3>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	461d      	mov	r5, r3
 80096d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7f6 fe9e 	bl	8000418 <__aeabi_f2d>
 80096dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096de:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80096e2:	f7f6 fef1 	bl	80004c8 <__aeabi_dmul>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7f6 fd33 	bl	8000158 <__aeabi_dsub>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80096fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fc:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8009700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009704:	4618      	mov	r0, r3
 8009706:	f7f6 fe87 	bl	8000418 <__aeabi_f2d>
 800970a:	4680      	mov	r8, r0
 800970c:	4689      	mov	r9, r1
 800970e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009714:	4618      	mov	r0, r3
 8009716:	f7f6 fe7f 	bl	8000418 <__aeabi_f2d>
 800971a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009720:	f7f6 fed2 	bl	80004c8 <__aeabi_dmul>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4640      	mov	r0, r8
 800972a:	4649      	mov	r1, r9
 800972c:	f7f6 fd14 	bl	8000158 <__aeabi_dsub>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4620      	mov	r0, r4
 8009736:	4629      	mov	r1, r5
 8009738:	f7f6 fec6 	bl	80004c8 <__aeabi_dmul>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009744:	f7f6 fd08 	bl	8000158 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4650      	mov	r0, sl
 800974e:	4659      	mov	r1, fp
 8009750:	f7f6 ffe4 	bl	800071c <__aeabi_ddiv>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800975c:	f7f6 fcfc 	bl	8000158 <__aeabi_dsub>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4610      	mov	r0, r2
 8009766:	4619      	mov	r1, r3
 8009768:	f7f7 f970 	bl	8000a4c <__aeabi_d2f>
 800976c:	4602      	mov	r2, r0
 800976e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  S22_roll = S22_roll + (sb_r) - ((S21_roll + (sb_r) - S22_roll*(st))*(S12_roll + (sa_r) - S22_roll*st))/(Q + S11_roll + (sa_r) - S21_roll*st - (st)*(S12_roll - S22_roll*st));
 8009774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800977a:	4618      	mov	r0, r3
 800977c:	f7f6 fe4c 	bl	8000418 <__aeabi_f2d>
 8009780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009782:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009786:	f7f6 fce9 	bl	800015c <__adddf3>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4692      	mov	sl, r2
 8009790:	469b      	mov	fp, r3
 8009792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009798:	4618      	mov	r0, r3
 800979a:	f7f6 fe3d 	bl	8000418 <__aeabi_f2d>
 800979e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80097a4:	f7f6 fcda 	bl	800015c <__adddf3>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	461d      	mov	r5, r3
 80097b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f6 fe2e 	bl	8000418 <__aeabi_f2d>
 80097bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097be:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80097c2:	f7f6 fe81 	bl	80004c8 <__aeabi_dmul>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4620      	mov	r0, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f6 fcc3 	bl	8000158 <__aeabi_dsub>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4614      	mov	r4, r2
 80097d8:	461d      	mov	r5, r3
 80097da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f6 fe1a 	bl	8000418 <__aeabi_f2d>
 80097e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80097ea:	f7f6 fcb7 	bl	800015c <__adddf3>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4690      	mov	r8, r2
 80097f4:	4699      	mov	r9, r3
 80097f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f6 fe0b 	bl	8000418 <__aeabi_f2d>
 8009802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009804:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009808:	f7f6 fe5e 	bl	80004c8 <__aeabi_dmul>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f6 fca0 	bl	8000158 <__aeabi_dsub>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4620      	mov	r0, r4
 800981e:	4629      	mov	r1, r5
 8009820:	f7f6 fe52 	bl	80004c8 <__aeabi_dmul>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800982c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982e:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8009832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009836:	4618      	mov	r0, r3
 8009838:	f7f6 fdee 	bl	8000418 <__aeabi_f2d>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7f6 fc8a 	bl	800015c <__adddf3>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4610      	mov	r0, r2
 800984e:	4619      	mov	r1, r3
 8009850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009852:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009856:	f7f6 fc81 	bl	800015c <__adddf3>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	4614      	mov	r4, r2
 8009860:	461d      	mov	r5, r3
 8009862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009868:	4618      	mov	r0, r3
 800986a:	f7f6 fdd5 	bl	8000418 <__aeabi_f2d>
 800986e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009870:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009874:	f7f6 fe28 	bl	80004c8 <__aeabi_dmul>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4620      	mov	r0, r4
 800987e:	4629      	mov	r1, r5
 8009880:	f7f6 fc6a 	bl	8000158 <__aeabi_dsub>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800988c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988e:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8009892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009896:	4618      	mov	r0, r3
 8009898:	f7f6 fdbe 	bl	8000418 <__aeabi_f2d>
 800989c:	4680      	mov	r8, r0
 800989e:	4689      	mov	r9, r1
 80098a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7f6 fdb6 	bl	8000418 <__aeabi_f2d>
 80098ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ae:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80098b2:	f7f6 fe09 	bl	80004c8 <__aeabi_dmul>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4640      	mov	r0, r8
 80098bc:	4649      	mov	r1, r9
 80098be:	f7f6 fc4b 	bl	8000158 <__aeabi_dsub>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f6 fdfd 	bl	80004c8 <__aeabi_dmul>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80098d6:	f7f6 fc3f 	bl	8000158 <__aeabi_dsub>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80098e2:	f7f6 ff1b 	bl	800071c <__aeabi_ddiv>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4650      	mov	r0, sl
 80098ec:	4659      	mov	r1, fp
 80098ee:	f7f6 fc33 	bl	8000158 <__aeabi_dsub>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4610      	mov	r0, r2
 80098f8:	4619      	mov	r1, r3
 80098fa:	f7f7 f8a7 	bl	8000a4c <__aeabi_d2f>
 80098fe:	4602      	mov	r2, r0
 8009900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    roll_rate = gyroX;
 8009906:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009908:	f7f6 fd86 	bl	8000418 <__aeabi_f2d>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009912:	e9c1 2306 	strd	r2, r3, [r1, #24]

	S11_p_yaw = -S11_m_yaw*(Kt11_yaw-1);  S12_p_yaw = -S12_m_yaw*(Kt11_yaw-1);
	S21_p_yaw = S21_m_yaw-S11_m_yaw*Kt21_yaw; S22_p_yaw = S22_m_yaw-S12_m_yaw*Kt21_yaw;

	S11_m_yaw = S11_p_yaw; S12_m_yaw = S12_p_yaw; S21_m_yaw = S21_p_yaw; S22_m_yaw = S22_p_yaw; */
  roll_rate  = lpf_roll.Run(gyroX);
 8009916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009918:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800991c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fc12 	bl	800a148 <_ZN3lpf3RunEf>
 8009924:	4603      	mov	r3, r0
 8009926:	4618      	mov	r0, r3
 8009928:	f7f6 fd76 	bl	8000418 <__aeabi_f2d>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009932:	e9c1 2306 	strd	r2, r3, [r1, #24]
  pitch_rate = lpf_pitch.Run(gyroY);
 8009936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009938:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800993c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800993e:	4618      	mov	r0, r3
 8009940:	f000 fc02 	bl	800a148 <_ZN3lpf3RunEf>
 8009944:	4603      	mov	r3, r0
 8009946:	4618      	mov	r0, r3
 8009948:	f7f6 fd66 	bl	8000418 <__aeabi_f2d>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009952:	e9c1 2308 	strd	r2, r3, [r1, #32]
  yaw_rate   = lpf_yaw.Run(gyroZ);
 8009956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009958:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800995c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fbf2 	bl	800a148 <_ZN3lpf3RunEf>
 8009964:	4603      	mov	r3, r0
 8009966:	4618      	mov	r0, r3
 8009968:	f7f6 fd56 	bl	8000418 <__aeabi_f2d>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009972:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8009976:	e01b      	b.n	80099b0 <_ZN15Kalman_Filtresi3RunEPfS0_+0x19e8>
    //=================================

    }

    else {
    	roll_ekf = roll_acc;
 8009978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800997e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009980:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    	pitch_ekf = pitch_acc;
 8009984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009986:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

    	roll_comp  = roll_acc;
 8009990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009992:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8009996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009998:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    	pitch_comp = pitch_acc;
 800999c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80099a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

    	gyro_ready = true;
 80099a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    }

	pitch_eski=pitch_comp;
 80099b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80099b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	roll_eski=roll_comp;
 80099bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099be:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80099c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

    state.angles[0] = roll_ekf;
 80099c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ca:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80099ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    state.angles[1] = pitch_ekf;
 80099d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80099da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    state.angles[2] = 0;
 80099e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    state.rates[0] = roll_rate;
 80099ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80099f0:	4610      	mov	r0, r2
 80099f2:	4619      	mov	r1, r3
 80099f4:	f7f7 f82a 	bl	8000a4c <__aeabi_d2f>
 80099f8:	4602      	mov	r2, r0
 80099fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    state.rates[1] = pitch_rate;
 8009a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a06:	4610      	mov	r0, r2
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f7f7 f81f 	bl	8000a4c <__aeabi_d2f>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a12:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    state.rates[2] = yaw_rate;
 8009a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4619      	mov	r1, r3
 8009a20:	f7f7 f814 	bl	8000a4c <__aeabi_d2f>
 8009a24:	4602      	mov	r2, r0
 8009a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a28:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    state.bias[0] = roll_bias;
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a32:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    state.bias[1] = pitch_bias;
 8009a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    state.bias[2] = yaw_bias;
 8009a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a46:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

}
 8009a4a:	bf00      	nop
 8009a4c:	3760      	adds	r7, #96	; 0x60
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a54 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fbc0 	bl	800a1e8 <_ZN3lpfD1Ev>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 fbba 	bl	800a1e8 <_ZN3lpfD1Ev>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fbb4 	bl	800a1e8 <_ZN3lpfD1Ev>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	0000      	movs	r0, r0
 8009a8c:	0000      	movs	r0, r0
	...

08009a90 <_ZN13LowPassFilterC1Eff>:

LowPassFilter::LowPassFilter():
	output(0),
	ePow(0){}

LowPassFilter::LowPassFilter(float iCutOffFrequency, float iDeltaTime):
 8009a90:	b5b0      	push	{r4, r5, r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
	output(0),
	ePow(1-exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f04f 0200 	mov.w	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f7 f823 	bl	8000af8 <__addsf3>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f6 fcaf 	bl	8000418 <__aeabi_f2d>
 8009aba:	a317      	add	r3, pc, #92	; (adr r3, 8009b18 <_ZN13LowPassFilterC1Eff+0x88>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fd02 	bl	80004c8 <__aeabi_dmul>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4614      	mov	r4, r2
 8009aca:	461d      	mov	r5, r3
 8009acc:	68b8      	ldr	r0, [r7, #8]
 8009ace:	f7f6 fca3 	bl	8000418 <__aeabi_f2d>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7f6 fcf5 	bl	80004c8 <__aeabi_dmul>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f000 fbdf 	bl	800a2a8 <exp>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	f04f 0000 	mov.w	r0, #0
 8009af2:	490b      	ldr	r1, [pc, #44]	; (8009b20 <_ZN13LowPassFilterC1Eff+0x90>)
 8009af4:	f7f6 fb30 	bl	8000158 <__aeabi_dsub>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4610      	mov	r0, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	f7f6 ffa4 	bl	8000a4c <__aeabi_d2f>
 8009b04:	4602      	mov	r2, r0
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	605a      	str	r2, [r3, #4]
	if(iCutOffFrequency <= 0){
		std::cout << "Warning: A LowPassFilter instance has been configured with 0 Hz as cut-off frequency.";
		ePow = 0;
	}
	#endif
}
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bdb0      	pop	{r4, r5, r7, pc}
 8009b14:	f3af 8000 	nop.w
 8009b18:	54442d18 	.word	0x54442d18
 8009b1c:	400921fb 	.word	0x400921fb
 8009b20:	3ff00000 	.word	0x3ff00000

08009b24 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID(): lpf(LP_FILTER_CUT_FREQ,st) {};
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a13      	ldr	r2, [pc, #76]	; (8009b7c <_ZN3PIDC1Ev+0x58>)
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a12      	ldr	r2, [pc, #72]	; (8009b80 <_ZN3PIDC1Ev+0x5c>)
 8009b36:	605a      	str	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b3e:	609a      	str	r2, [r3, #8]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7f7 f88b 	bl	8000c60 <__aeabi_i2f>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009b52:	f7f7 f98d 	bl	8000e70 <__aeabi_fdiv>
 8009b56:	4603      	mov	r3, r0
 8009b58:	461a      	mov	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	60da      	str	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f103 0018 	add.w	r0, r3, #24
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009b6e:	f7ff ff8f 	bl	8009a90 <_ZN13LowPassFilterC1Eff>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	42f00000 	.word	0x42f00000
 8009b80:	c2f00000 	.word	0xc2f00000

08009b84 <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e = alpha_des - alpha;
 8009b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b98:	f7f6 fade 	bl	8000158 <__aeabi_dsub>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp_angle*e;
 8009ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ba8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009bac:	f7f6 fc8c 	bl	80004c8 <__aeabi_dmul>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 8009bb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	3720      	adds	r7, #32
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <_ZN3PID7PD_RateEddddd>:


double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 8009bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bca:	b089      	sub	sp, #36	; 0x24
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	e9c7 2300 	strd	r2, r3, [r7]

	e_roll = alpha_dot_des - alpha_dot;
 8009bd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bdc:	f7f6 fabc 	bl	8000158 <__aeabi_dsub>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4610      	mov	r0, r2
 8009be6:	4619      	mov	r1, r3
 8009be8:	f7f6 ff30 	bl	8000a4c <__aeabi_d2f>
 8009bec:	4602      	mov	r2, r0
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
  double e_roll_int = e_roll;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7f6 fc0e 	bl	8000418 <__aeabi_f2d>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	e9c7 2304 	strd	r2, r3, [r7, #16]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7f7 fa59 	bl	80010c0 <__aeabi_f2iz>
 8009c0e:	4604      	mov	r4, r0
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7f7 fa53 	bl	80010c0 <__aeabi_f2iz>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	d02b      	beq.n	8009c78 <_ZN3PID7PD_RateEddddd+0xb0>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f6 fbf7 	bl	8000418 <__aeabi_f2d>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 f914 	bl	8009e5c <_ZN3PID3sgnEd>
 8009c34:	4604      	mov	r4, r0
 8009c36:	460d      	mov	r5, r1
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7f6 fbeb 	bl	8000418 <__aeabi_f2d>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 f908 	bl	8009e5c <_ZN3PID3sgnEd>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	2101      	movs	r1, #1
 8009c52:	460e      	mov	r6, r1
 8009c54:	4620      	mov	r0, r4
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7f6 fe9e 	bl	8000998 <__aeabi_dcmpeq>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <_ZN3PID7PD_RateEddddd+0x9e>
 8009c62:	2300      	movs	r3, #0
 8009c64:	461e      	mov	r6, r3
 8009c66:	b2f3      	uxtb	r3, r6
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <_ZN3PID7PD_RateEddddd+0xb0>
      e_roll_int = 0;
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7f6 fbcb 	bl	8000418 <__aeabi_f2d>
 8009c82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c86:	f7f6 fc1f 	bl	80004c8 <__aeabi_dmul>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4614      	mov	r4, r2
 8009c90:	461d      	mov	r5, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f6 fbbe 	bl	8000418 <__aeabi_f2d>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f7f6 fa58 	bl	8000158 <__aeabi_dsub>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4610      	mov	r0, r2
 8009cae:	4619      	mov	r1, r3
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	4b5c      	ldr	r3, [pc, #368]	; (8009e28 <_ZN3PID7PD_RateEddddd+0x260>)
 8009cb6:	f7f6 fc07 	bl	80004c8 <__aeabi_dmul>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f7f6 fec3 	bl	8000a4c <__aeabi_d2f>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	645a      	str	r2, [r3, #68]	; 0x44
  	de_int += de_filt*st;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f7f7 f814 	bl	8000d08 <__aeabi_fmul>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f7f6 ff07 	bl	8000af8 <__addsf3>
 8009cea:	4603      	mov	r3, r0
 8009cec:	461a      	mov	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	649a      	str	r2, [r3, #72]	; 0x48

	de = e_roll - e_eski_roll;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1a      	ldr	r2, [r3, #32]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	f7f6 fef9 	bl	8000af4 <__aeabi_fsub>
 8009d02:	4603      	mov	r3, r0
 8009d04:	461a      	mov	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	641a      	str	r2, [r3, #64]	; 0x40
	e_eski_roll = e_roll;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6a1a      	ldr	r2, [r3, #32]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	629a      	str	r2, [r3, #40]	; 0x28

  ie_roll += e_roll_int*st;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7f6 fb7e 	bl	8000418 <__aeabi_f2d>
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	460d      	mov	r5, r1
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7f6 fb77 	bl	8000418 <__aeabi_f2d>
 8009d2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009d2e:	f7f6 fbcb 	bl	80004c8 <__aeabi_dmul>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fa0f 	bl	800015c <__adddf3>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4610      	mov	r0, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	f7f6 fe81 	bl	8000a4c <__aeabi_d2f>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30

  ie_roll_sat = ie_roll;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	639a      	str	r2, [r3, #56]	; 0x38
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7f6 fb5b 	bl	8000418 <__aeabi_f2d>
 8009d62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d66:	f7f6 fbaf 	bl	80004c8 <__aeabi_dmul>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f6 fb4d 	bl	8000418 <__aeabi_f2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f6 fb43 	bl	8000418 <__aeabi_f2d>
 8009d92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d96:	f7f6 fb97 	bl	80004c8 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	68f9      	ldr	r1, [r7, #12]
 8009da0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//D = lpf.update(D);
	pd = P + I + D;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009db0:	f7f6 f9d4 	bl	800015c <__adddf3>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4610      	mov	r0, r2
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009dc2:	f7f6 f9cb 	bl	800015c <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	68f9      	ldr	r1, [r7, #12]
 8009dcc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  	pd_roll_buf = pd;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f7f6 fe37 	bl	8000a4c <__aeabi_d2f>
 8009dde:	4602      	mov	r2, r0
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	611a      	str	r2, [r3, #16]
	pd  = Sat(pd,  300, -300);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009dea:	4910      	ldr	r1, [pc, #64]	; (8009e2c <_ZN3PID7PD_RateEddddd+0x264>)
 8009dec:	9101      	str	r1, [sp, #4]
 8009dee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009df2:	9100      	str	r1, [sp, #0]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f8a9 	bl	8009f4c <_ZN3PID3SatEdii>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pd_roll_sat_buf = pd;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f7f6 fe1d 	bl	8000a4c <__aeabi_d2f>
 8009e12:	4602      	mov	r2, r0
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	63da      	str	r2, [r3, #60]	; 0x3c
    return pd;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68

}
 8009e1e:	4610      	mov	r0, r2
 8009e20:	4619      	mov	r1, r3
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e28:	40240000 	.word	0x40240000
 8009e2c:	fffffed4 	.word	0xfffffed4

08009e30 <_ZN3PID5resetEv>:

void PID::reset() {
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f04f 0200 	mov.w	r2, #0
 8009e3e:	639a      	str	r2, [r3, #56]	; 0x38
	de_filt = 0;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f04f 0200 	mov.w	r2, #0
 8009e46:	645a      	str	r2, [r3, #68]	; 0x44
	de_int = 0;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f04f 0200 	mov.w	r2, #0
 8009e4e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr
	...

08009e5c <_ZN3PID3sgnEd>:

    return P;

}

double PID::sgn(double v) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 8009e68:	f04f 0200 	mov.w	r2, #0
 8009e6c:	f04f 0300 	mov.w	r3, #0
 8009e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e74:	f7f6 fd9a 	bl	80009ac <__aeabi_dcmplt>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <_ZN3PID3sgnEd+0x2a>
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <_ZN3PID3sgnEd+0x5c>)
 8009e84:	e012      	b.n	8009eac <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 8009e86:	f04f 0200 	mov.w	r2, #0
 8009e8a:	f04f 0300 	mov.w	r3, #0
 8009e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e92:	f7f6 fda9 	bl	80009e8 <__aeabi_dcmpgt>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <_ZN3PID3sgnEd+0x48>
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <_ZN3PID3sgnEd+0x60>)
 8009ea2:	e003      	b.n	8009eac <_ZN3PID3sgnEd+0x50>
  return 0;
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
}
 8009eac:	4610      	mov	r0, r2
 8009eae:	4619      	mov	r1, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	bff00000 	.word	0xbff00000
 8009ebc:	3ff00000 	.word	0x3ff00000

08009ec0 <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8009ed2:	dd2c      	ble.n	8009f2e <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 8009ed4:	6a38      	ldr	r0, [r7, #32]
 8009ed6:	f7f6 fa8d 	bl	80003f4 <__aeabi_i2d>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ee2:	f7f6 fd81 	bl	80009e8 <__aeabi_dcmpgt>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 8009eec:	6a38      	ldr	r0, [r7, #32]
 8009eee:	f7f6 fa81 	bl	80003f4 <__aeabi_i2d>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009efa:	e01d      	b.n	8009f38 <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 8009efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009efe:	f7f6 fa79 	bl	80003f4 <__aeabi_i2d>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f0a:	f7f6 fd4f 	bl	80009ac <__aeabi_dcmplt>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 8009f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f16:	f7f6 fa6d 	bl	80003f4 <__aeabi_i2d>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009f22:	e009      	b.n	8009f38 <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 8009f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009f2c:	e004      	b.n	8009f38 <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <_ZN3PID3SatEdiii+0x88>)
 8009f34:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 8009f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	408f4000 	.word	0x408f4000

08009f4c <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 8009f58:	6a38      	ldr	r0, [r7, #32]
 8009f5a:	f7f6 fa4b 	bl	80003f4 <__aeabi_i2d>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f66:	f7f6 fd3f 	bl	80009e8 <__aeabi_dcmpgt>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d007      	beq.n	8009f80 <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 8009f70:	6a38      	ldr	r0, [r7, #32]
 8009f72:	f7f6 fa3f 	bl	80003f4 <__aeabi_i2d>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009f7e:	e017      	b.n	8009fb0 <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 8009f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f82:	f7f6 fa37 	bl	80003f4 <__aeabi_i2d>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f8e:	f7f6 fd0d 	bl	80009ac <__aeabi_dcmplt>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d007      	beq.n	8009fa8 <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 8009f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f9a:	f7f6 fa2b 	bl	80003f4 <__aeabi_i2d>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009fa6:	e003      	b.n	8009fb0 <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 8009fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fac:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 8009fb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b088      	sub	sp, #32
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	807b      	strh	r3, [r7, #2]
	int dead_zone = 5;
 8009fca:	2305      	movs	r3, #5
 8009fcc:	61bb      	str	r3, [r7, #24]
	int in_min  = 1000;
 8009fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009fd2:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8009fd4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009fd8:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 8009fda:	f06f 031d 	mvn.w	r3, #29
 8009fde:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 8009fe0:	231e      	movs	r3, #30
 8009fe2:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8009fe4:	887a      	ldrh	r2, [r7, #2]
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8009fec:	3304      	adds	r3, #4
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	dd09      	ble.n	800a006 <_ZN3PID7pwm2angEt+0x48>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8009ff8:	887b      	ldrh	r3, [r7, #2]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	db03      	blt.n	800a006 <_ZN3PID7pwm2angEt+0x48>
		pwm_out = 1500;
 8009ffe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a002:	83fb      	strh	r3, [r7, #30]
 800a004:	e001      	b.n	800a00a <_ZN3PID7pwm2angEt+0x4c>
	}

	else {
		pwm_out = pwm;
 800a006:	887b      	ldrh	r3, [r7, #2]
 800a008:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a00a:	8bfa      	ldrh	r2, [r7, #30]
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	68b9      	ldr	r1, [r7, #8]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	1a8a      	subs	r2, r1, r2
 800a016:	fb02 f203 	mul.w	r2, r2, r3
 800a01a:	6939      	ldr	r1, [r7, #16]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	1acb      	subs	r3, r1, r3
 800a020:	fb92 f2f3 	sdiv	r2, r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4413      	add	r3, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f6 fe19 	bl	8000c60 <__aeabi_i2f>
 800a02e:	4603      	mov	r3, r0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 800a044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a048:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800a04a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a04e:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 800a050:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800a054:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 800a056:	2364      	movs	r3, #100	; 0x64
 800a058:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800a05a:	887a      	ldrh	r2, [r7, #2]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	1a8a      	subs	r2, r1, r2
 800a066:	fb02 f203 	mul.w	r2, r2, r3
 800a06a:	6939      	ldr	r1, [r7, #16]
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	1acb      	subs	r3, r1, r3
 800a070:	fb92 f2f3 	sdiv	r2, r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4413      	add	r3, r2
 800a078:	425b      	negs	r3, r3
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f6 fdf0 	bl	8000c60 <__aeabi_i2f>
 800a080:	4603      	mov	r3, r0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b089      	sub	sp, #36	; 0x24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	460b      	mov	r3, r1
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 800a09a:	4b1d      	ldr	r3, [pc, #116]	; (800a110 <_ZN3PID7pwm2motEti+0x84>)
 800a09c:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800a09e:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <_ZN3PID7pwm2motEti+0x88>)
 800a0a0:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800a0a2:	f04f 0300 	mov.w	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 800a0a8:	4b1b      	ldr	r3, [pc, #108]	; (800a118 <_ZN3PID7pwm2motEti+0x8c>)
 800a0aa:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7f6 fdd7 	bl	8000c60 <__aeabi_i2f>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	897b      	ldrh	r3, [r7, #10]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7f6 fdce 	bl	8000c58 <__aeabi_ui2f>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	69f9      	ldr	r1, [r7, #28]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f6 fd17 	bl	8000af4 <__aeabi_fsub>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f7f6 fe1c 	bl	8000d08 <__aeabi_fmul>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	461c      	mov	r4, r3
 800a0d4:	6979      	ldr	r1, [r7, #20]
 800a0d6:	6938      	ldr	r0, [r7, #16]
 800a0d8:	f7f6 fd0c 	bl	8000af4 <__aeabi_fsub>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f7f6 fe11 	bl	8000d08 <__aeabi_fmul>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	461c      	mov	r4, r3
 800a0ea:	69f9      	ldr	r1, [r7, #28]
 800a0ec:	69b8      	ldr	r0, [r7, #24]
 800a0ee:	f7f6 fd01 	bl	8000af4 <__aeabi_fsub>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7f6 feba 	bl	8000e70 <__aeabi_fdiv>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	6979      	ldr	r1, [r7, #20]
 800a100:	4618      	mov	r0, r3
 800a102:	f7f6 fcf9 	bl	8000af8 <__addsf3>
 800a106:	4603      	mov	r3, r0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3724      	adds	r7, #36	; 0x24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd90      	pop	{r4, r7, pc}
 800a110:	447a0000 	.word	0x447a0000
 800a114:	44fa0000 	.word	0x44fa0000
 800a118:	44a5c000 	.word	0x44a5c000

0800a11c <_ZN3PIDD1Ev>:

PID::~PID() {};
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bc80      	pop	{r7}
 800a12e:	4770      	bx	lr

0800a130 <_ZN3lpfC1Ev>:
#include "lpf.hpp"

lpf::lpf()  {
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]

}
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	bc80      	pop	{r7}
 800a142:	4770      	bx	lr
 800a144:	0000      	movs	r0, r0
	...

0800a148 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800a148:	b5b0      	push	{r4, r5, r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]


	float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	f7f6 f95e 	bl	8000418 <__aeabi_f2d>
 800a15c:	a31e      	add	r3, pc, #120	; (adr r3, 800a1d8 <_ZN3lpf3RunEf+0x90>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 f9b1 	bl	80004c8 <__aeabi_dmul>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4614      	mov	r4, r2
 800a16c:	461d      	mov	r5, r3
 800a16e:	6838      	ldr	r0, [r7, #0]
 800a170:	f7f6 f952 	bl	8000418 <__aeabi_f2d>
 800a174:	a31a      	add	r3, pc, #104	; (adr r3, 800a1e0 <_ZN3lpf3RunEf+0x98>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f7f6 f9a5 	bl	80004c8 <__aeabi_dmul>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4620      	mov	r0, r4
 800a184:	4629      	mov	r1, r5
 800a186:	f7f5 ffe9 	bl	800015c <__adddf3>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4614      	mov	r4, r2
 800a190:	461d      	mov	r5, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4618      	mov	r0, r3
 800a198:	f7f6 f93e 	bl	8000418 <__aeabi_f2d>
 800a19c:	a310      	add	r3, pc, #64	; (adr r3, 800a1e0 <_ZN3lpf3RunEf+0x98>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f6 f991 	bl	80004c8 <__aeabi_dmul>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	f7f5 ffd5 	bl	800015c <__adddf3>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	f7f6 fc47 	bl	8000a4c <__aeabi_d2f>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	601a      	str	r2, [r3, #0]
	y_ = y;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	605a      	str	r2, [r3, #4]
	return y;
 800a1ce:	68fb      	ldr	r3, [r7, #12]

}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bdb0      	pop	{r4, r5, r7, pc}
 800a1d8:	ab367a10 	.word	0xab367a10
 800a1dc:	3feb573e 	.word	0x3feb573e
 800a1e0:	de7ea5f8 	.word	0xde7ea5f8
 800a1e4:	3fb2a454 	.word	0x3fb2a454

0800a1e8 <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bc80      	pop	{r7}
 800a1fa:	4770      	bx	lr

0800a1fc <_ZdlPv>:
 800a1fc:	f001 b9bc 	b.w	800b578 <free>

0800a200 <_Znwj>:
 800a200:	2801      	cmp	r0, #1
 800a202:	bf38      	it	cc
 800a204:	2001      	movcc	r0, #1
 800a206:	b510      	push	{r4, lr}
 800a208:	4604      	mov	r4, r0
 800a20a:	4620      	mov	r0, r4
 800a20c:	f001 f9ac 	bl	800b568 <malloc>
 800a210:	b930      	cbnz	r0, 800a220 <_Znwj+0x20>
 800a212:	f000 f80d 	bl	800a230 <_ZSt15get_new_handlerv>
 800a216:	b908      	cbnz	r0, 800a21c <_Znwj+0x1c>
 800a218:	f001 f974 	bl	800b504 <abort>
 800a21c:	4780      	blx	r0
 800a21e:	e7f4      	b.n	800a20a <_Znwj+0xa>
 800a220:	bd10      	pop	{r4, pc}

0800a222 <_ZSt17__throw_bad_allocv>:
 800a222:	b508      	push	{r3, lr}
 800a224:	f001 f96e 	bl	800b504 <abort>

0800a228 <_ZSt20__throw_length_errorPKc>:
 800a228:	b508      	push	{r3, lr}
 800a22a:	f001 f96b 	bl	800b504 <abort>
	...

0800a230 <_ZSt15get_new_handlerv>:
 800a230:	4b02      	ldr	r3, [pc, #8]	; (800a23c <_ZSt15get_new_handlerv+0xc>)
 800a232:	6818      	ldr	r0, [r3, #0]
 800a234:	f3bf 8f5b 	dmb	ish
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	20000bb4 	.word	0x20000bb4

0800a240 <cosf>:
 800a240:	b507      	push	{r0, r1, r2, lr}
 800a242:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <cosf+0x64>)
 800a244:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a248:	4293      	cmp	r3, r2
 800a24a:	4601      	mov	r1, r0
 800a24c:	dc03      	bgt.n	800a256 <cosf+0x16>
 800a24e:	2100      	movs	r1, #0
 800a250:	f000 fd10 	bl	800ac74 <__kernel_cosf>
 800a254:	e004      	b.n	800a260 <cosf+0x20>
 800a256:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a25a:	db04      	blt.n	800a266 <cosf+0x26>
 800a25c:	f7f6 fc4a 	bl	8000af4 <__aeabi_fsub>
 800a260:	b003      	add	sp, #12
 800a262:	f85d fb04 	ldr.w	pc, [sp], #4
 800a266:	4669      	mov	r1, sp
 800a268:	f000 fb54 	bl	800a914 <__ieee754_rem_pio2f>
 800a26c:	f000 0203 	and.w	r2, r0, #3
 800a270:	2a01      	cmp	r2, #1
 800a272:	d005      	beq.n	800a280 <cosf+0x40>
 800a274:	2a02      	cmp	r2, #2
 800a276:	d00a      	beq.n	800a28e <cosf+0x4e>
 800a278:	b972      	cbnz	r2, 800a298 <cosf+0x58>
 800a27a:	9901      	ldr	r1, [sp, #4]
 800a27c:	9800      	ldr	r0, [sp, #0]
 800a27e:	e7e7      	b.n	800a250 <cosf+0x10>
 800a280:	9901      	ldr	r1, [sp, #4]
 800a282:	9800      	ldr	r0, [sp, #0]
 800a284:	f001 f82c 	bl	800b2e0 <__kernel_sinf>
 800a288:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a28c:	e7e8      	b.n	800a260 <cosf+0x20>
 800a28e:	9901      	ldr	r1, [sp, #4]
 800a290:	9800      	ldr	r0, [sp, #0]
 800a292:	f000 fcef 	bl	800ac74 <__kernel_cosf>
 800a296:	e7f7      	b.n	800a288 <cosf+0x48>
 800a298:	2201      	movs	r2, #1
 800a29a:	9901      	ldr	r1, [sp, #4]
 800a29c:	9800      	ldr	r0, [sp, #0]
 800a29e:	f001 f81f 	bl	800b2e0 <__kernel_sinf>
 800a2a2:	e7dd      	b.n	800a260 <cosf+0x20>
 800a2a4:	3f490fd8 	.word	0x3f490fd8

0800a2a8 <exp>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	f000 f883 	bl	800a3b8 <__ieee754_exp>
 800a2b2:	4b1b      	ldr	r3, [pc, #108]	; (800a320 <exp+0x78>)
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	f993 3000 	ldrsb.w	r3, [r3]
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	3301      	adds	r3, #1
 800a2be:	d012      	beq.n	800a2e6 <exp+0x3e>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	f001 f882 	bl	800b3cc <finite>
 800a2c8:	b168      	cbz	r0, 800a2e6 <exp+0x3e>
 800a2ca:	a311      	add	r3, pc, #68	; (adr r3, 800a310 <exp+0x68>)
 800a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f6 fb88 	bl	80009e8 <__aeabi_dcmpgt>
 800a2d8:	b140      	cbz	r0, 800a2ec <exp+0x44>
 800a2da:	f001 f91b 	bl	800b514 <__errno>
 800a2de:	2322      	movs	r3, #34	; 0x22
 800a2e0:	2400      	movs	r4, #0
 800a2e2:	4d10      	ldr	r5, [pc, #64]	; (800a324 <exp+0x7c>)
 800a2e4:	6003      	str	r3, [r0, #0]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	a30a      	add	r3, pc, #40	; (adr r3, 800a318 <exp+0x70>)
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f6 fb59 	bl	80009ac <__aeabi_dcmplt>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d0f3      	beq.n	800a2e6 <exp+0x3e>
 800a2fe:	f001 f909 	bl	800b514 <__errno>
 800a302:	2322      	movs	r3, #34	; 0x22
 800a304:	2400      	movs	r4, #0
 800a306:	2500      	movs	r5, #0
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	e7ec      	b.n	800a2e6 <exp+0x3e>
 800a30c:	f3af 8000 	nop.w
 800a310:	fefa39ef 	.word	0xfefa39ef
 800a314:	40862e42 	.word	0x40862e42
 800a318:	d52d3051 	.word	0xd52d3051
 800a31c:	c0874910 	.word	0xc0874910
 800a320:	2000000d 	.word	0x2000000d
 800a324:	7ff00000 	.word	0x7ff00000

0800a328 <asinf>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4604      	mov	r4, r0
 800a32c:	f000 f9ae 	bl	800a68c <__ieee754_asinf>
 800a330:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <asinf+0x44>)
 800a332:	4605      	mov	r5, r0
 800a334:	f993 3000 	ldrsb.w	r3, [r3]
 800a338:	3301      	adds	r3, #1
 800a33a:	d015      	beq.n	800a368 <asinf+0x40>
 800a33c:	4621      	mov	r1, r4
 800a33e:	4620      	mov	r0, r4
 800a340:	f7f6 fea8 	bl	8001094 <__aeabi_fcmpun>
 800a344:	b980      	cbnz	r0, 800a368 <asinf+0x40>
 800a346:	4620      	mov	r0, r4
 800a348:	f001 f846 	bl	800b3d8 <fabsf>
 800a34c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a350:	f7f6 fe96 	bl	8001080 <__aeabi_fcmpgt>
 800a354:	b140      	cbz	r0, 800a368 <asinf+0x40>
 800a356:	f001 f8dd 	bl	800b514 <__errno>
 800a35a:	2321      	movs	r3, #33	; 0x21
 800a35c:	6003      	str	r3, [r0, #0]
 800a35e:	4804      	ldr	r0, [pc, #16]	; (800a370 <asinf+0x48>)
 800a360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a364:	f001 b87e 	b.w	800b464 <nanf>
 800a368:	4628      	mov	r0, r5
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	2000000d 	.word	0x2000000d
 800a370:	0800b86c 	.word	0x0800b86c

0800a374 <sqrtf>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4605      	mov	r5, r0
 800a378:	f000 fc2a 	bl	800abd0 <__ieee754_sqrtf>
 800a37c:	4b0d      	ldr	r3, [pc, #52]	; (800a3b4 <sqrtf+0x40>)
 800a37e:	4604      	mov	r4, r0
 800a380:	f993 3000 	ldrsb.w	r3, [r3]
 800a384:	3301      	adds	r3, #1
 800a386:	d012      	beq.n	800a3ae <sqrtf+0x3a>
 800a388:	4629      	mov	r1, r5
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7f6 fe82 	bl	8001094 <__aeabi_fcmpun>
 800a390:	b968      	cbnz	r0, 800a3ae <sqrtf+0x3a>
 800a392:	2100      	movs	r1, #0
 800a394:	4628      	mov	r0, r5
 800a396:	f7f6 fe55 	bl	8001044 <__aeabi_fcmplt>
 800a39a:	b140      	cbz	r0, 800a3ae <sqrtf+0x3a>
 800a39c:	f001 f8ba 	bl	800b514 <__errno>
 800a3a0:	2321      	movs	r3, #33	; 0x21
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	6003      	str	r3, [r0, #0]
 800a3a6:	4608      	mov	r0, r1
 800a3a8:	f7f6 fd62 	bl	8000e70 <__aeabi_fdiv>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	bd38      	pop	{r3, r4, r5, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2000000d 	.word	0x2000000d

0800a3b8 <__ieee754_exp>:
 800a3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3bc:	4faa      	ldr	r7, [pc, #680]	; (800a668 <__ieee754_exp+0x2b0>)
 800a3be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3c2:	42bb      	cmp	r3, r7
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a3cc:	d92f      	bls.n	800a42e <__ieee754_exp+0x76>
 800a3ce:	4fa7      	ldr	r7, [pc, #668]	; (800a66c <__ieee754_exp+0x2b4>)
 800a3d0:	42bb      	cmp	r3, r7
 800a3d2:	d911      	bls.n	800a3f8 <__ieee754_exp+0x40>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	d006      	beq.n	800a3ec <__ieee754_exp+0x34>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	f7f5 febb 	bl	800015c <__adddf3>
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	e000      	b.n	800a3ee <__ieee754_exp+0x36>
 800a3ec:	b9e6      	cbnz	r6, 800a428 <__ieee754_exp+0x70>
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	b004      	add	sp, #16
 800a3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f8:	a385      	add	r3, pc, #532	; (adr r3, 800a610 <__ieee754_exp+0x258>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f6 faf3 	bl	80009e8 <__aeabi_dcmpgt>
 800a402:	b138      	cbz	r0, 800a414 <__ieee754_exp+0x5c>
 800a404:	a384      	add	r3, pc, #528	; (adr r3, 800a618 <__ieee754_exp+0x260>)
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	4610      	mov	r0, r2
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7f6 f85b 	bl	80004c8 <__aeabi_dmul>
 800a412:	e7e8      	b.n	800a3e6 <__ieee754_exp+0x2e>
 800a414:	4628      	mov	r0, r5
 800a416:	a382      	add	r3, pc, #520	; (adr r3, 800a620 <__ieee754_exp+0x268>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	4621      	mov	r1, r4
 800a41e:	f7f6 fac5 	bl	80009ac <__aeabi_dcmplt>
 800a422:	2800      	cmp	r0, #0
 800a424:	f000 8082 	beq.w	800a52c <__ieee754_exp+0x174>
 800a428:	2500      	movs	r5, #0
 800a42a:	462c      	mov	r4, r5
 800a42c:	e7df      	b.n	800a3ee <__ieee754_exp+0x36>
 800a42e:	4a90      	ldr	r2, [pc, #576]	; (800a670 <__ieee754_exp+0x2b8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	f240 80a7 	bls.w	800a584 <__ieee754_exp+0x1cc>
 800a436:	4a8f      	ldr	r2, [pc, #572]	; (800a674 <__ieee754_exp+0x2bc>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d877      	bhi.n	800a52c <__ieee754_exp+0x174>
 800a43c:	4b8e      	ldr	r3, [pc, #568]	; (800a678 <__ieee754_exp+0x2c0>)
 800a43e:	00f4      	lsls	r4, r6, #3
 800a440:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f7f5 fe86 	bl	8000158 <__aeabi_dsub>
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	4b8a      	ldr	r3, [pc, #552]	; (800a67c <__ieee754_exp+0x2c4>)
 800a452:	f1c6 0a01 	rsb	sl, r6, #1
 800a456:	4423      	add	r3, r4
 800a458:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a45c:	e9cd 3400 	strd	r3, r4, [sp]
 800a460:	ebaa 0a06 	sub.w	sl, sl, r6
 800a464:	4640      	mov	r0, r8
 800a466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a46a:	4649      	mov	r1, r9
 800a46c:	f7f5 fe74 	bl	8000158 <__aeabi_dsub>
 800a470:	4605      	mov	r5, r0
 800a472:	460c      	mov	r4, r1
 800a474:	462a      	mov	r2, r5
 800a476:	4623      	mov	r3, r4
 800a478:	4628      	mov	r0, r5
 800a47a:	4621      	mov	r1, r4
 800a47c:	f7f6 f824 	bl	80004c8 <__aeabi_dmul>
 800a480:	a369      	add	r3, pc, #420	; (adr r3, 800a628 <__ieee754_exp+0x270>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	f7f6 f81d 	bl	80004c8 <__aeabi_dmul>
 800a48e:	a368      	add	r3, pc, #416	; (adr r3, 800a630 <__ieee754_exp+0x278>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f5 fe60 	bl	8000158 <__aeabi_dsub>
 800a498:	4632      	mov	r2, r6
 800a49a:	463b      	mov	r3, r7
 800a49c:	f7f6 f814 	bl	80004c8 <__aeabi_dmul>
 800a4a0:	a365      	add	r3, pc, #404	; (adr r3, 800a638 <__ieee754_exp+0x280>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	f7f5 fe59 	bl	800015c <__adddf3>
 800a4aa:	4632      	mov	r2, r6
 800a4ac:	463b      	mov	r3, r7
 800a4ae:	f7f6 f80b 	bl	80004c8 <__aeabi_dmul>
 800a4b2:	a363      	add	r3, pc, #396	; (adr r3, 800a640 <__ieee754_exp+0x288>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f5 fe4e 	bl	8000158 <__aeabi_dsub>
 800a4bc:	4632      	mov	r2, r6
 800a4be:	463b      	mov	r3, r7
 800a4c0:	f7f6 f802 	bl	80004c8 <__aeabi_dmul>
 800a4c4:	a360      	add	r3, pc, #384	; (adr r3, 800a648 <__ieee754_exp+0x290>)
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f7f5 fe47 	bl	800015c <__adddf3>
 800a4ce:	4632      	mov	r2, r6
 800a4d0:	463b      	mov	r3, r7
 800a4d2:	f7f5 fff9 	bl	80004c8 <__aeabi_dmul>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4628      	mov	r0, r5
 800a4dc:	4621      	mov	r1, r4
 800a4de:	f7f5 fe3b 	bl	8000158 <__aeabi_dsub>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460f      	mov	r7, r1
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f7f5 ffeb 	bl	80004c8 <__aeabi_dmul>
 800a4f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4f6:	f1ba 0f00 	cmp.w	sl, #0
 800a4fa:	d15a      	bne.n	800a5b2 <__ieee754_exp+0x1fa>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a502:	4630      	mov	r0, r6
 800a504:	4639      	mov	r1, r7
 800a506:	f7f5 fe27 	bl	8000158 <__aeabi_dsub>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a512:	f7f6 f903 	bl	800071c <__aeabi_ddiv>
 800a516:	462a      	mov	r2, r5
 800a518:	4623      	mov	r3, r4
 800a51a:	f7f5 fe1d 	bl	8000158 <__aeabi_dsub>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	2000      	movs	r0, #0
 800a524:	4956      	ldr	r1, [pc, #344]	; (800a680 <__ieee754_exp+0x2c8>)
 800a526:	f7f5 fe17 	bl	8000158 <__aeabi_dsub>
 800a52a:	e75c      	b.n	800a3e6 <__ieee754_exp+0x2e>
 800a52c:	4855      	ldr	r0, [pc, #340]	; (800a684 <__ieee754_exp+0x2cc>)
 800a52e:	a348      	add	r3, pc, #288	; (adr r3, 800a650 <__ieee754_exp+0x298>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a538:	4621      	mov	r1, r4
 800a53a:	4628      	mov	r0, r5
 800a53c:	f7f5 ffc4 	bl	80004c8 <__aeabi_dmul>
 800a540:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a544:	f7f5 fe0a 	bl	800015c <__adddf3>
 800a548:	f7f6 fa58 	bl	80009fc <__aeabi_d2iz>
 800a54c:	4682      	mov	sl, r0
 800a54e:	f7f5 ff51 	bl	80003f4 <__aeabi_i2d>
 800a552:	a341      	add	r3, pc, #260	; (adr r3, 800a658 <__ieee754_exp+0x2a0>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	4606      	mov	r6, r0
 800a55a:	460f      	mov	r7, r1
 800a55c:	f7f5 ffb4 	bl	80004c8 <__aeabi_dmul>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4628      	mov	r0, r5
 800a566:	4621      	mov	r1, r4
 800a568:	f7f5 fdf6 	bl	8000158 <__aeabi_dsub>
 800a56c:	a33c      	add	r3, pc, #240	; (adr r3, 800a660 <__ieee754_exp+0x2a8>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	4680      	mov	r8, r0
 800a574:	4689      	mov	r9, r1
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	f7f5 ffa5 	bl	80004c8 <__aeabi_dmul>
 800a57e:	e9cd 0100 	strd	r0, r1, [sp]
 800a582:	e76f      	b.n	800a464 <__ieee754_exp+0xac>
 800a584:	4a40      	ldr	r2, [pc, #256]	; (800a688 <__ieee754_exp+0x2d0>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d80e      	bhi.n	800a5a8 <__ieee754_exp+0x1f0>
 800a58a:	a323      	add	r3, pc, #140	; (adr r3, 800a618 <__ieee754_exp+0x260>)
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	f7f5 fde4 	bl	800015c <__adddf3>
 800a594:	2200      	movs	r2, #0
 800a596:	4b3a      	ldr	r3, [pc, #232]	; (800a680 <__ieee754_exp+0x2c8>)
 800a598:	f7f6 fa26 	bl	80009e8 <__aeabi_dcmpgt>
 800a59c:	b138      	cbz	r0, 800a5ae <__ieee754_exp+0x1f6>
 800a59e:	2200      	movs	r2, #0
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4b36      	ldr	r3, [pc, #216]	; (800a680 <__ieee754_exp+0x2c8>)
 800a5a6:	e71c      	b.n	800a3e2 <__ieee754_exp+0x2a>
 800a5a8:	f04f 0a00 	mov.w	sl, #0
 800a5ac:	e762      	b.n	800a474 <__ieee754_exp+0xbc>
 800a5ae:	4682      	mov	sl, r0
 800a5b0:	e760      	b.n	800a474 <__ieee754_exp+0xbc>
 800a5b2:	4632      	mov	r2, r6
 800a5b4:	463b      	mov	r3, r7
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a5bc:	f7f5 fdcc 	bl	8000158 <__aeabi_dsub>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c8:	f7f6 f8a8 	bl	800071c <__aeabi_ddiv>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5d4:	f7f5 fdc0 	bl	8000158 <__aeabi_dsub>
 800a5d8:	4642      	mov	r2, r8
 800a5da:	464b      	mov	r3, r9
 800a5dc:	f7f5 fdbc 	bl	8000158 <__aeabi_dsub>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	4926      	ldr	r1, [pc, #152]	; (800a680 <__ieee754_exp+0x2c8>)
 800a5e8:	f7f5 fdb6 	bl	8000158 <__aeabi_dsub>
 800a5ec:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a5f0:	4592      	cmp	sl, r2
 800a5f2:	db02      	blt.n	800a5fa <__ieee754_exp+0x242>
 800a5f4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a5f8:	e6f5      	b.n	800a3e6 <__ieee754_exp+0x2e>
 800a5fa:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a5fe:	2200      	movs	r2, #0
 800a600:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a604:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a608:	e701      	b.n	800a40e <__ieee754_exp+0x56>
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w
 800a610:	fefa39ef 	.word	0xfefa39ef
 800a614:	40862e42 	.word	0x40862e42
 800a618:	8800759c 	.word	0x8800759c
 800a61c:	7e37e43c 	.word	0x7e37e43c
 800a620:	d52d3051 	.word	0xd52d3051
 800a624:	c0874910 	.word	0xc0874910
 800a628:	72bea4d0 	.word	0x72bea4d0
 800a62c:	3e663769 	.word	0x3e663769
 800a630:	c5d26bf1 	.word	0xc5d26bf1
 800a634:	3ebbbd41 	.word	0x3ebbbd41
 800a638:	af25de2c 	.word	0xaf25de2c
 800a63c:	3f11566a 	.word	0x3f11566a
 800a640:	16bebd93 	.word	0x16bebd93
 800a644:	3f66c16c 	.word	0x3f66c16c
 800a648:	5555553e 	.word	0x5555553e
 800a64c:	3fc55555 	.word	0x3fc55555
 800a650:	652b82fe 	.word	0x652b82fe
 800a654:	3ff71547 	.word	0x3ff71547
 800a658:	fee00000 	.word	0xfee00000
 800a65c:	3fe62e42 	.word	0x3fe62e42
 800a660:	35793c76 	.word	0x35793c76
 800a664:	3dea39ef 	.word	0x3dea39ef
 800a668:	40862e41 	.word	0x40862e41
 800a66c:	7fefffff 	.word	0x7fefffff
 800a670:	3fd62e42 	.word	0x3fd62e42
 800a674:	3ff0a2b1 	.word	0x3ff0a2b1
 800a678:	0800b880 	.word	0x0800b880
 800a67c:	0800b890 	.word	0x0800b890
 800a680:	3ff00000 	.word	0x3ff00000
 800a684:	0800b870 	.word	0x0800b870
 800a688:	3e2fffff 	.word	0x3e2fffff

0800a68c <__ieee754_asinf>:
 800a68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800a694:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a698:	4604      	mov	r4, r0
 800a69a:	4605      	mov	r5, r0
 800a69c:	d10c      	bne.n	800a6b8 <__ieee754_asinf+0x2c>
 800a69e:	498d      	ldr	r1, [pc, #564]	; (800a8d4 <__ieee754_asinf+0x248>)
 800a6a0:	f7f6 fb32 	bl	8000d08 <__aeabi_fmul>
 800a6a4:	498c      	ldr	r1, [pc, #560]	; (800a8d8 <__ieee754_asinf+0x24c>)
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f7f6 fb2d 	bl	8000d08 <__aeabi_fmul>
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f7f6 fa21 	bl	8000af8 <__addsf3>
 800a6b6:	e006      	b.n	800a6c6 <__ieee754_asinf+0x3a>
 800a6b8:	dd07      	ble.n	800a6ca <__ieee754_asinf+0x3e>
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	f7f6 fa1a 	bl	8000af4 <__aeabi_fsub>
 800a6c0:	4601      	mov	r1, r0
 800a6c2:	f7f6 fbd5 	bl	8000e70 <__aeabi_fdiv>
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	e00e      	b.n	800a6e8 <__ieee754_asinf+0x5c>
 800a6ca:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800a6ce:	da58      	bge.n	800a782 <__ieee754_asinf+0xf6>
 800a6d0:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800a6d4:	da0b      	bge.n	800a6ee <__ieee754_asinf+0x62>
 800a6d6:	4981      	ldr	r1, [pc, #516]	; (800a8dc <__ieee754_asinf+0x250>)
 800a6d8:	f7f6 fa0e 	bl	8000af8 <__addsf3>
 800a6dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a6e0:	f7f6 fcce 	bl	8001080 <__aeabi_fcmpgt>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d04c      	beq.n	800a782 <__ieee754_asinf+0xf6>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	f7f6 fb0a 	bl	8000d08 <__aeabi_fmul>
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	497a      	ldr	r1, [pc, #488]	; (800a8e0 <__ieee754_asinf+0x254>)
 800a6f8:	f7f6 fb06 	bl	8000d08 <__aeabi_fmul>
 800a6fc:	4979      	ldr	r1, [pc, #484]	; (800a8e4 <__ieee754_asinf+0x258>)
 800a6fe:	f7f6 f9fb 	bl	8000af8 <__addsf3>
 800a702:	4629      	mov	r1, r5
 800a704:	f7f6 fb00 	bl	8000d08 <__aeabi_fmul>
 800a708:	4977      	ldr	r1, [pc, #476]	; (800a8e8 <__ieee754_asinf+0x25c>)
 800a70a:	f7f6 f9f3 	bl	8000af4 <__aeabi_fsub>
 800a70e:	4629      	mov	r1, r5
 800a710:	f7f6 fafa 	bl	8000d08 <__aeabi_fmul>
 800a714:	4975      	ldr	r1, [pc, #468]	; (800a8ec <__ieee754_asinf+0x260>)
 800a716:	f7f6 f9ef 	bl	8000af8 <__addsf3>
 800a71a:	4629      	mov	r1, r5
 800a71c:	f7f6 faf4 	bl	8000d08 <__aeabi_fmul>
 800a720:	4973      	ldr	r1, [pc, #460]	; (800a8f0 <__ieee754_asinf+0x264>)
 800a722:	f7f6 f9e7 	bl	8000af4 <__aeabi_fsub>
 800a726:	4629      	mov	r1, r5
 800a728:	f7f6 faee 	bl	8000d08 <__aeabi_fmul>
 800a72c:	4971      	ldr	r1, [pc, #452]	; (800a8f4 <__ieee754_asinf+0x268>)
 800a72e:	f7f6 f9e3 	bl	8000af8 <__addsf3>
 800a732:	4629      	mov	r1, r5
 800a734:	f7f6 fae8 	bl	8000d08 <__aeabi_fmul>
 800a738:	496f      	ldr	r1, [pc, #444]	; (800a8f8 <__ieee754_asinf+0x26c>)
 800a73a:	4606      	mov	r6, r0
 800a73c:	4628      	mov	r0, r5
 800a73e:	f7f6 fae3 	bl	8000d08 <__aeabi_fmul>
 800a742:	496e      	ldr	r1, [pc, #440]	; (800a8fc <__ieee754_asinf+0x270>)
 800a744:	f7f6 f9d6 	bl	8000af4 <__aeabi_fsub>
 800a748:	4629      	mov	r1, r5
 800a74a:	f7f6 fadd 	bl	8000d08 <__aeabi_fmul>
 800a74e:	496c      	ldr	r1, [pc, #432]	; (800a900 <__ieee754_asinf+0x274>)
 800a750:	f7f6 f9d2 	bl	8000af8 <__addsf3>
 800a754:	4629      	mov	r1, r5
 800a756:	f7f6 fad7 	bl	8000d08 <__aeabi_fmul>
 800a75a:	496a      	ldr	r1, [pc, #424]	; (800a904 <__ieee754_asinf+0x278>)
 800a75c:	f7f6 f9ca 	bl	8000af4 <__aeabi_fsub>
 800a760:	4629      	mov	r1, r5
 800a762:	f7f6 fad1 	bl	8000d08 <__aeabi_fmul>
 800a766:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a76a:	f7f6 f9c5 	bl	8000af8 <__addsf3>
 800a76e:	4601      	mov	r1, r0
 800a770:	4630      	mov	r0, r6
 800a772:	f7f6 fb7d 	bl	8000e70 <__aeabi_fdiv>
 800a776:	4621      	mov	r1, r4
 800a778:	f7f6 fac6 	bl	8000d08 <__aeabi_fmul>
 800a77c:	4601      	mov	r1, r0
 800a77e:	4620      	mov	r0, r4
 800a780:	e797      	b.n	800a6b2 <__ieee754_asinf+0x26>
 800a782:	4620      	mov	r0, r4
 800a784:	f000 fe28 	bl	800b3d8 <fabsf>
 800a788:	4601      	mov	r1, r0
 800a78a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a78e:	f7f6 f9b1 	bl	8000af4 <__aeabi_fsub>
 800a792:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a796:	f7f6 fab7 	bl	8000d08 <__aeabi_fmul>
 800a79a:	4606      	mov	r6, r0
 800a79c:	4950      	ldr	r1, [pc, #320]	; (800a8e0 <__ieee754_asinf+0x254>)
 800a79e:	f7f6 fab3 	bl	8000d08 <__aeabi_fmul>
 800a7a2:	4950      	ldr	r1, [pc, #320]	; (800a8e4 <__ieee754_asinf+0x258>)
 800a7a4:	f7f6 f9a8 	bl	8000af8 <__addsf3>
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	f7f6 faad 	bl	8000d08 <__aeabi_fmul>
 800a7ae:	494e      	ldr	r1, [pc, #312]	; (800a8e8 <__ieee754_asinf+0x25c>)
 800a7b0:	f7f6 f9a0 	bl	8000af4 <__aeabi_fsub>
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	f7f6 faa7 	bl	8000d08 <__aeabi_fmul>
 800a7ba:	494c      	ldr	r1, [pc, #304]	; (800a8ec <__ieee754_asinf+0x260>)
 800a7bc:	f7f6 f99c 	bl	8000af8 <__addsf3>
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	f7f6 faa1 	bl	8000d08 <__aeabi_fmul>
 800a7c6:	494a      	ldr	r1, [pc, #296]	; (800a8f0 <__ieee754_asinf+0x264>)
 800a7c8:	f7f6 f994 	bl	8000af4 <__aeabi_fsub>
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	f7f6 fa9b 	bl	8000d08 <__aeabi_fmul>
 800a7d2:	4948      	ldr	r1, [pc, #288]	; (800a8f4 <__ieee754_asinf+0x268>)
 800a7d4:	f7f6 f990 	bl	8000af8 <__addsf3>
 800a7d8:	4631      	mov	r1, r6
 800a7da:	f7f6 fa95 	bl	8000d08 <__aeabi_fmul>
 800a7de:	4946      	ldr	r1, [pc, #280]	; (800a8f8 <__ieee754_asinf+0x26c>)
 800a7e0:	4681      	mov	r9, r0
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7f6 fa90 	bl	8000d08 <__aeabi_fmul>
 800a7e8:	4944      	ldr	r1, [pc, #272]	; (800a8fc <__ieee754_asinf+0x270>)
 800a7ea:	f7f6 f983 	bl	8000af4 <__aeabi_fsub>
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	f7f6 fa8a 	bl	8000d08 <__aeabi_fmul>
 800a7f4:	4942      	ldr	r1, [pc, #264]	; (800a900 <__ieee754_asinf+0x274>)
 800a7f6:	f7f6 f97f 	bl	8000af8 <__addsf3>
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	f7f6 fa84 	bl	8000d08 <__aeabi_fmul>
 800a800:	4940      	ldr	r1, [pc, #256]	; (800a904 <__ieee754_asinf+0x278>)
 800a802:	f7f6 f977 	bl	8000af4 <__aeabi_fsub>
 800a806:	4631      	mov	r1, r6
 800a808:	f7f6 fa7e 	bl	8000d08 <__aeabi_fmul>
 800a80c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a810:	f7f6 f972 	bl	8000af8 <__addsf3>
 800a814:	4682      	mov	sl, r0
 800a816:	4630      	mov	r0, r6
 800a818:	f000 f9da 	bl	800abd0 <__ieee754_sqrtf>
 800a81c:	4b3a      	ldr	r3, [pc, #232]	; (800a908 <__ieee754_asinf+0x27c>)
 800a81e:	4607      	mov	r7, r0
 800a820:	4598      	cmp	r8, r3
 800a822:	dd1a      	ble.n	800a85a <__ieee754_asinf+0x1ce>
 800a824:	4651      	mov	r1, sl
 800a826:	4648      	mov	r0, r9
 800a828:	f7f6 fb22 	bl	8000e70 <__aeabi_fdiv>
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7f6 fa6b 	bl	8000d08 <__aeabi_fmul>
 800a832:	4639      	mov	r1, r7
 800a834:	f7f6 f960 	bl	8000af8 <__addsf3>
 800a838:	4601      	mov	r1, r0
 800a83a:	f7f6 f95d 	bl	8000af8 <__addsf3>
 800a83e:	4933      	ldr	r1, [pc, #204]	; (800a90c <__ieee754_asinf+0x280>)
 800a840:	f7f6 f95a 	bl	8000af8 <__addsf3>
 800a844:	4601      	mov	r1, r0
 800a846:	4823      	ldr	r0, [pc, #140]	; (800a8d4 <__ieee754_asinf+0x248>)
 800a848:	f7f6 f954 	bl	8000af4 <__aeabi_fsub>
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	4604      	mov	r4, r0
 800a850:	f73f af4a 	bgt.w	800a6e8 <__ieee754_asinf+0x5c>
 800a854:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a858:	e735      	b.n	800a6c6 <__ieee754_asinf+0x3a>
 800a85a:	4601      	mov	r1, r0
 800a85c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800a860:	f7f6 f94a 	bl	8000af8 <__addsf3>
 800a864:	4651      	mov	r1, sl
 800a866:	4604      	mov	r4, r0
 800a868:	4648      	mov	r0, r9
 800a86a:	f7f6 fb01 	bl	8000e70 <__aeabi_fdiv>
 800a86e:	4601      	mov	r1, r0
 800a870:	4620      	mov	r0, r4
 800a872:	f7f6 fa49 	bl	8000d08 <__aeabi_fmul>
 800a876:	f028 080f 	bic.w	r8, r8, #15
 800a87a:	4681      	mov	r9, r0
 800a87c:	4641      	mov	r1, r8
 800a87e:	4640      	mov	r0, r8
 800a880:	f7f6 fa42 	bl	8000d08 <__aeabi_fmul>
 800a884:	4601      	mov	r1, r0
 800a886:	4630      	mov	r0, r6
 800a888:	f7f6 f934 	bl	8000af4 <__aeabi_fsub>
 800a88c:	4641      	mov	r1, r8
 800a88e:	4604      	mov	r4, r0
 800a890:	4638      	mov	r0, r7
 800a892:	f7f6 f931 	bl	8000af8 <__addsf3>
 800a896:	4601      	mov	r1, r0
 800a898:	4620      	mov	r0, r4
 800a89a:	f7f6 fae9 	bl	8000e70 <__aeabi_fdiv>
 800a89e:	4601      	mov	r1, r0
 800a8a0:	f7f6 f92a 	bl	8000af8 <__addsf3>
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	480c      	ldr	r0, [pc, #48]	; (800a8d8 <__ieee754_asinf+0x24c>)
 800a8a8:	f7f6 f924 	bl	8000af4 <__aeabi_fsub>
 800a8ac:	4601      	mov	r1, r0
 800a8ae:	4648      	mov	r0, r9
 800a8b0:	f7f6 f920 	bl	8000af4 <__aeabi_fsub>
 800a8b4:	4641      	mov	r1, r8
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	f7f6 f91d 	bl	8000af8 <__addsf3>
 800a8be:	4601      	mov	r1, r0
 800a8c0:	4813      	ldr	r0, [pc, #76]	; (800a910 <__ieee754_asinf+0x284>)
 800a8c2:	f7f6 f917 	bl	8000af4 <__aeabi_fsub>
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7f6 f913 	bl	8000af4 <__aeabi_fsub>
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	480f      	ldr	r0, [pc, #60]	; (800a910 <__ieee754_asinf+0x284>)
 800a8d2:	e7b9      	b.n	800a848 <__ieee754_asinf+0x1bc>
 800a8d4:	3fc90fdb 	.word	0x3fc90fdb
 800a8d8:	b33bbd2e 	.word	0xb33bbd2e
 800a8dc:	7149f2ca 	.word	0x7149f2ca
 800a8e0:	3811ef08 	.word	0x3811ef08
 800a8e4:	3a4f7f04 	.word	0x3a4f7f04
 800a8e8:	3d241146 	.word	0x3d241146
 800a8ec:	3e4e0aa8 	.word	0x3e4e0aa8
 800a8f0:	3ea6b090 	.word	0x3ea6b090
 800a8f4:	3e2aaaab 	.word	0x3e2aaaab
 800a8f8:	3d9dc62e 	.word	0x3d9dc62e
 800a8fc:	3f303361 	.word	0x3f303361
 800a900:	4001572d 	.word	0x4001572d
 800a904:	4019d139 	.word	0x4019d139
 800a908:	3f799999 	.word	0x3f799999
 800a90c:	333bbd2e 	.word	0x333bbd2e
 800a910:	3f490fdb 	.word	0x3f490fdb

0800a914 <__ieee754_rem_pio2f>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	4aa0      	ldr	r2, [pc, #640]	; (800ab9c <__ieee754_rem_pio2f+0x288>)
 800a91a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a91e:	4296      	cmp	r6, r2
 800a920:	460c      	mov	r4, r1
 800a922:	4682      	mov	sl, r0
 800a924:	b087      	sub	sp, #28
 800a926:	dc04      	bgt.n	800a932 <__ieee754_rem_pio2f+0x1e>
 800a928:	2300      	movs	r3, #0
 800a92a:	6008      	str	r0, [r1, #0]
 800a92c:	604b      	str	r3, [r1, #4]
 800a92e:	2500      	movs	r5, #0
 800a930:	e01a      	b.n	800a968 <__ieee754_rem_pio2f+0x54>
 800a932:	4a9b      	ldr	r2, [pc, #620]	; (800aba0 <__ieee754_rem_pio2f+0x28c>)
 800a934:	4296      	cmp	r6, r2
 800a936:	dc4b      	bgt.n	800a9d0 <__ieee754_rem_pio2f+0xbc>
 800a938:	2800      	cmp	r0, #0
 800a93a:	499a      	ldr	r1, [pc, #616]	; (800aba4 <__ieee754_rem_pio2f+0x290>)
 800a93c:	4f9a      	ldr	r7, [pc, #616]	; (800aba8 <__ieee754_rem_pio2f+0x294>)
 800a93e:	f026 060f 	bic.w	r6, r6, #15
 800a942:	dd23      	ble.n	800a98c <__ieee754_rem_pio2f+0x78>
 800a944:	f7f6 f8d6 	bl	8000af4 <__aeabi_fsub>
 800a948:	42be      	cmp	r6, r7
 800a94a:	4605      	mov	r5, r0
 800a94c:	d010      	beq.n	800a970 <__ieee754_rem_pio2f+0x5c>
 800a94e:	4997      	ldr	r1, [pc, #604]	; (800abac <__ieee754_rem_pio2f+0x298>)
 800a950:	f7f6 f8d0 	bl	8000af4 <__aeabi_fsub>
 800a954:	4601      	mov	r1, r0
 800a956:	6020      	str	r0, [r4, #0]
 800a958:	4628      	mov	r0, r5
 800a95a:	f7f6 f8cb 	bl	8000af4 <__aeabi_fsub>
 800a95e:	4993      	ldr	r1, [pc, #588]	; (800abac <__ieee754_rem_pio2f+0x298>)
 800a960:	f7f6 f8c8 	bl	8000af4 <__aeabi_fsub>
 800a964:	2501      	movs	r5, #1
 800a966:	6060      	str	r0, [r4, #4]
 800a968:	4628      	mov	r0, r5
 800a96a:	b007      	add	sp, #28
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	498f      	ldr	r1, [pc, #572]	; (800abb0 <__ieee754_rem_pio2f+0x29c>)
 800a972:	f7f6 f8bf 	bl	8000af4 <__aeabi_fsub>
 800a976:	498f      	ldr	r1, [pc, #572]	; (800abb4 <__ieee754_rem_pio2f+0x2a0>)
 800a978:	4605      	mov	r5, r0
 800a97a:	f7f6 f8bb 	bl	8000af4 <__aeabi_fsub>
 800a97e:	4601      	mov	r1, r0
 800a980:	6020      	str	r0, [r4, #0]
 800a982:	4628      	mov	r0, r5
 800a984:	f7f6 f8b6 	bl	8000af4 <__aeabi_fsub>
 800a988:	498a      	ldr	r1, [pc, #552]	; (800abb4 <__ieee754_rem_pio2f+0x2a0>)
 800a98a:	e7e9      	b.n	800a960 <__ieee754_rem_pio2f+0x4c>
 800a98c:	f7f6 f8b4 	bl	8000af8 <__addsf3>
 800a990:	42be      	cmp	r6, r7
 800a992:	4605      	mov	r5, r0
 800a994:	d00e      	beq.n	800a9b4 <__ieee754_rem_pio2f+0xa0>
 800a996:	4985      	ldr	r1, [pc, #532]	; (800abac <__ieee754_rem_pio2f+0x298>)
 800a998:	f7f6 f8ae 	bl	8000af8 <__addsf3>
 800a99c:	4601      	mov	r1, r0
 800a99e:	6020      	str	r0, [r4, #0]
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f7f6 f8a7 	bl	8000af4 <__aeabi_fsub>
 800a9a6:	4981      	ldr	r1, [pc, #516]	; (800abac <__ieee754_rem_pio2f+0x298>)
 800a9a8:	f7f6 f8a6 	bl	8000af8 <__addsf3>
 800a9ac:	f04f 35ff 	mov.w	r5, #4294967295
 800a9b0:	6060      	str	r0, [r4, #4]
 800a9b2:	e7d9      	b.n	800a968 <__ieee754_rem_pio2f+0x54>
 800a9b4:	497e      	ldr	r1, [pc, #504]	; (800abb0 <__ieee754_rem_pio2f+0x29c>)
 800a9b6:	f7f6 f89f 	bl	8000af8 <__addsf3>
 800a9ba:	497e      	ldr	r1, [pc, #504]	; (800abb4 <__ieee754_rem_pio2f+0x2a0>)
 800a9bc:	4605      	mov	r5, r0
 800a9be:	f7f6 f89b 	bl	8000af8 <__addsf3>
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	6020      	str	r0, [r4, #0]
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f7f6 f894 	bl	8000af4 <__aeabi_fsub>
 800a9cc:	4979      	ldr	r1, [pc, #484]	; (800abb4 <__ieee754_rem_pio2f+0x2a0>)
 800a9ce:	e7eb      	b.n	800a9a8 <__ieee754_rem_pio2f+0x94>
 800a9d0:	4a79      	ldr	r2, [pc, #484]	; (800abb8 <__ieee754_rem_pio2f+0x2a4>)
 800a9d2:	4296      	cmp	r6, r2
 800a9d4:	f300 8091 	bgt.w	800aafa <__ieee754_rem_pio2f+0x1e6>
 800a9d8:	f000 fcfe 	bl	800b3d8 <fabsf>
 800a9dc:	4977      	ldr	r1, [pc, #476]	; (800abbc <__ieee754_rem_pio2f+0x2a8>)
 800a9de:	4607      	mov	r7, r0
 800a9e0:	f7f6 f992 	bl	8000d08 <__aeabi_fmul>
 800a9e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a9e8:	f7f6 f886 	bl	8000af8 <__addsf3>
 800a9ec:	f7f6 fb68 	bl	80010c0 <__aeabi_f2iz>
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	f7f6 f935 	bl	8000c60 <__aeabi_i2f>
 800a9f6:	496b      	ldr	r1, [pc, #428]	; (800aba4 <__ieee754_rem_pio2f+0x290>)
 800a9f8:	4681      	mov	r9, r0
 800a9fa:	f7f6 f985 	bl	8000d08 <__aeabi_fmul>
 800a9fe:	4601      	mov	r1, r0
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7f6 f877 	bl	8000af4 <__aeabi_fsub>
 800aa06:	4969      	ldr	r1, [pc, #420]	; (800abac <__ieee754_rem_pio2f+0x298>)
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4648      	mov	r0, r9
 800aa0c:	f7f6 f97c 	bl	8000d08 <__aeabi_fmul>
 800aa10:	2d1f      	cmp	r5, #31
 800aa12:	4607      	mov	r7, r0
 800aa14:	dc0c      	bgt.n	800aa30 <__ieee754_rem_pio2f+0x11c>
 800aa16:	4a6a      	ldr	r2, [pc, #424]	; (800abc0 <__ieee754_rem_pio2f+0x2ac>)
 800aa18:	1e69      	subs	r1, r5, #1
 800aa1a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aa1e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d004      	beq.n	800aa30 <__ieee754_rem_pio2f+0x11c>
 800aa26:	4639      	mov	r1, r7
 800aa28:	4640      	mov	r0, r8
 800aa2a:	f7f6 f863 	bl	8000af4 <__aeabi_fsub>
 800aa2e:	e00b      	b.n	800aa48 <__ieee754_rem_pio2f+0x134>
 800aa30:	4639      	mov	r1, r7
 800aa32:	4640      	mov	r0, r8
 800aa34:	f7f6 f85e 	bl	8000af4 <__aeabi_fsub>
 800aa38:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800aa3c:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800aa40:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800aa44:	2e08      	cmp	r6, #8
 800aa46:	dc01      	bgt.n	800aa4c <__ieee754_rem_pio2f+0x138>
 800aa48:	6020      	str	r0, [r4, #0]
 800aa4a:	e026      	b.n	800aa9a <__ieee754_rem_pio2f+0x186>
 800aa4c:	4958      	ldr	r1, [pc, #352]	; (800abb0 <__ieee754_rem_pio2f+0x29c>)
 800aa4e:	4648      	mov	r0, r9
 800aa50:	f7f6 f95a 	bl	8000d08 <__aeabi_fmul>
 800aa54:	4607      	mov	r7, r0
 800aa56:	4601      	mov	r1, r0
 800aa58:	4640      	mov	r0, r8
 800aa5a:	f7f6 f84b 	bl	8000af4 <__aeabi_fsub>
 800aa5e:	4601      	mov	r1, r0
 800aa60:	4606      	mov	r6, r0
 800aa62:	4640      	mov	r0, r8
 800aa64:	f7f6 f846 	bl	8000af4 <__aeabi_fsub>
 800aa68:	4639      	mov	r1, r7
 800aa6a:	f7f6 f843 	bl	8000af4 <__aeabi_fsub>
 800aa6e:	4607      	mov	r7, r0
 800aa70:	4950      	ldr	r1, [pc, #320]	; (800abb4 <__ieee754_rem_pio2f+0x2a0>)
 800aa72:	4648      	mov	r0, r9
 800aa74:	f7f6 f948 	bl	8000d08 <__aeabi_fmul>
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f6 f83b 	bl	8000af4 <__aeabi_fsub>
 800aa7e:	4601      	mov	r1, r0
 800aa80:	4607      	mov	r7, r0
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7f6 f836 	bl	8000af4 <__aeabi_fsub>
 800aa88:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800aa8c:	ebab 0b03 	sub.w	fp, fp, r3
 800aa90:	f1bb 0f19 	cmp.w	fp, #25
 800aa94:	dc16      	bgt.n	800aac4 <__ieee754_rem_pio2f+0x1b0>
 800aa96:	46b0      	mov	r8, r6
 800aa98:	6020      	str	r0, [r4, #0]
 800aa9a:	6826      	ldr	r6, [r4, #0]
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	f7f6 f828 	bl	8000af4 <__aeabi_fsub>
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f6 f825 	bl	8000af4 <__aeabi_fsub>
 800aaaa:	f1ba 0f00 	cmp.w	sl, #0
 800aaae:	6060      	str	r0, [r4, #4]
 800aab0:	f6bf af5a 	bge.w	800a968 <__ieee754_rem_pio2f+0x54>
 800aab4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800aab8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aabc:	6026      	str	r6, [r4, #0]
 800aabe:	6060      	str	r0, [r4, #4]
 800aac0:	426d      	negs	r5, r5
 800aac2:	e751      	b.n	800a968 <__ieee754_rem_pio2f+0x54>
 800aac4:	493f      	ldr	r1, [pc, #252]	; (800abc4 <__ieee754_rem_pio2f+0x2b0>)
 800aac6:	4648      	mov	r0, r9
 800aac8:	f7f6 f91e 	bl	8000d08 <__aeabi_fmul>
 800aacc:	4607      	mov	r7, r0
 800aace:	4601      	mov	r1, r0
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7f6 f80f 	bl	8000af4 <__aeabi_fsub>
 800aad6:	4601      	mov	r1, r0
 800aad8:	4680      	mov	r8, r0
 800aada:	4630      	mov	r0, r6
 800aadc:	f7f6 f80a 	bl	8000af4 <__aeabi_fsub>
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f6 f807 	bl	8000af4 <__aeabi_fsub>
 800aae6:	4606      	mov	r6, r0
 800aae8:	4937      	ldr	r1, [pc, #220]	; (800abc8 <__ieee754_rem_pio2f+0x2b4>)
 800aaea:	4648      	mov	r0, r9
 800aaec:	f7f6 f90c 	bl	8000d08 <__aeabi_fmul>
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	f7f5 ffff 	bl	8000af4 <__aeabi_fsub>
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	e795      	b.n	800aa26 <__ieee754_rem_pio2f+0x112>
 800aafa:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800aafe:	db05      	blt.n	800ab0c <__ieee754_rem_pio2f+0x1f8>
 800ab00:	4601      	mov	r1, r0
 800ab02:	f7f5 fff7 	bl	8000af4 <__aeabi_fsub>
 800ab06:	6060      	str	r0, [r4, #4]
 800ab08:	6020      	str	r0, [r4, #0]
 800ab0a:	e710      	b.n	800a92e <__ieee754_rem_pio2f+0x1a>
 800ab0c:	15f7      	asrs	r7, r6, #23
 800ab0e:	3f86      	subs	r7, #134	; 0x86
 800ab10:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7f6 fad3 	bl	80010c0 <__aeabi_f2iz>
 800ab1a:	f7f6 f8a1 	bl	8000c60 <__aeabi_i2f>
 800ab1e:	4601      	mov	r1, r0
 800ab20:	9003      	str	r0, [sp, #12]
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7f5 ffe6 	bl	8000af4 <__aeabi_fsub>
 800ab28:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ab2c:	f7f6 f8ec 	bl	8000d08 <__aeabi_fmul>
 800ab30:	4606      	mov	r6, r0
 800ab32:	f7f6 fac5 	bl	80010c0 <__aeabi_f2iz>
 800ab36:	f7f6 f893 	bl	8000c60 <__aeabi_i2f>
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	9004      	str	r0, [sp, #16]
 800ab3e:	4605      	mov	r5, r0
 800ab40:	4630      	mov	r0, r6
 800ab42:	f7f5 ffd7 	bl	8000af4 <__aeabi_fsub>
 800ab46:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ab4a:	f7f6 f8dd 	bl	8000d08 <__aeabi_fmul>
 800ab4e:	2100      	movs	r1, #0
 800ab50:	9005      	str	r0, [sp, #20]
 800ab52:	f7f6 fa6d 	bl	8001030 <__aeabi_fcmpeq>
 800ab56:	b1f0      	cbz	r0, 800ab96 <__ieee754_rem_pio2f+0x282>
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f7f6 fa68 	bl	8001030 <__aeabi_fcmpeq>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	bf14      	ite	ne
 800ab64:	2301      	movne	r3, #1
 800ab66:	2302      	moveq	r3, #2
 800ab68:	4a18      	ldr	r2, [pc, #96]	; (800abcc <__ieee754_rem_pio2f+0x2b8>)
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	9201      	str	r2, [sp, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	a803      	add	r0, sp, #12
 800ab72:	9200      	str	r2, [sp, #0]
 800ab74:	463a      	mov	r2, r7
 800ab76:	f000 f8fd 	bl	800ad74 <__kernel_rem_pio2f>
 800ab7a:	f1ba 0f00 	cmp.w	sl, #0
 800ab7e:	4605      	mov	r5, r0
 800ab80:	f6bf aef2 	bge.w	800a968 <__ieee754_rem_pio2f+0x54>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab8a:	6023      	str	r3, [r4, #0]
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab92:	6063      	str	r3, [r4, #4]
 800ab94:	e794      	b.n	800aac0 <__ieee754_rem_pio2f+0x1ac>
 800ab96:	2303      	movs	r3, #3
 800ab98:	e7e6      	b.n	800ab68 <__ieee754_rem_pio2f+0x254>
 800ab9a:	bf00      	nop
 800ab9c:	3f490fd8 	.word	0x3f490fd8
 800aba0:	4016cbe3 	.word	0x4016cbe3
 800aba4:	3fc90f80 	.word	0x3fc90f80
 800aba8:	3fc90fd0 	.word	0x3fc90fd0
 800abac:	37354443 	.word	0x37354443
 800abb0:	37354400 	.word	0x37354400
 800abb4:	2e85a308 	.word	0x2e85a308
 800abb8:	43490f80 	.word	0x43490f80
 800abbc:	3f22f984 	.word	0x3f22f984
 800abc0:	0800b8a0 	.word	0x0800b8a0
 800abc4:	2e85a300 	.word	0x2e85a300
 800abc8:	248d3132 	.word	0x248d3132
 800abcc:	0800b920 	.word	0x0800b920

0800abd0 <__ieee754_sqrtf>:
 800abd0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800abd4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	4603      	mov	r3, r0
 800abdc:	4604      	mov	r4, r0
 800abde:	d309      	bcc.n	800abf4 <__ieee754_sqrtf+0x24>
 800abe0:	4601      	mov	r1, r0
 800abe2:	f7f6 f891 	bl	8000d08 <__aeabi_fmul>
 800abe6:	4601      	mov	r1, r0
 800abe8:	4620      	mov	r0, r4
 800abea:	f7f5 ff85 	bl	8000af8 <__addsf3>
 800abee:	4604      	mov	r4, r0
 800abf0:	4620      	mov	r0, r4
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	2a00      	cmp	r2, #0
 800abf6:	d0fb      	beq.n	800abf0 <__ieee754_sqrtf+0x20>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	da06      	bge.n	800ac0a <__ieee754_sqrtf+0x3a>
 800abfc:	4601      	mov	r1, r0
 800abfe:	f7f5 ff79 	bl	8000af4 <__aeabi_fsub>
 800ac02:	4601      	mov	r1, r0
 800ac04:	f7f6 f934 	bl	8000e70 <__aeabi_fdiv>
 800ac08:	e7f1      	b.n	800abee <__ieee754_sqrtf+0x1e>
 800ac0a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800ac0e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ac12:	d029      	beq.n	800ac68 <__ieee754_sqrtf+0x98>
 800ac14:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800ac18:	07cb      	lsls	r3, r1, #31
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800ac22:	f04f 0419 	mov.w	r4, #25
 800ac26:	461e      	mov	r6, r3
 800ac28:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800ac2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ac30:	bf58      	it	pl
 800ac32:	0052      	lslpl	r2, r2, #1
 800ac34:	1040      	asrs	r0, r0, #1
 800ac36:	0052      	lsls	r2, r2, #1
 800ac38:	1875      	adds	r5, r6, r1
 800ac3a:	4295      	cmp	r5, r2
 800ac3c:	bfde      	ittt	le
 800ac3e:	186e      	addle	r6, r5, r1
 800ac40:	1b52      	suble	r2, r2, r5
 800ac42:	185b      	addle	r3, r3, r1
 800ac44:	3c01      	subs	r4, #1
 800ac46:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ac4e:	d1f3      	bne.n	800ac38 <__ieee754_sqrtf+0x68>
 800ac50:	b112      	cbz	r2, 800ac58 <__ieee754_sqrtf+0x88>
 800ac52:	3301      	adds	r3, #1
 800ac54:	f023 0301 	bic.w	r3, r3, #1
 800ac58:	105c      	asrs	r4, r3, #1
 800ac5a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ac5e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800ac62:	e7c5      	b.n	800abf0 <__ieee754_sqrtf+0x20>
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	3201      	adds	r2, #1
 800ac68:	0218      	lsls	r0, r3, #8
 800ac6a:	d5fb      	bpl.n	800ac64 <__ieee754_sqrtf+0x94>
 800ac6c:	3a01      	subs	r2, #1
 800ac6e:	1a89      	subs	r1, r1, r2
 800ac70:	e7d0      	b.n	800ac14 <__ieee754_sqrtf+0x44>
	...

0800ac74 <__kernel_cosf>:
 800ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac78:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800ac7c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ac80:	4606      	mov	r6, r0
 800ac82:	4688      	mov	r8, r1
 800ac84:	da03      	bge.n	800ac8e <__kernel_cosf+0x1a>
 800ac86:	f7f6 fa1b 	bl	80010c0 <__aeabi_f2iz>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d05c      	beq.n	800ad48 <__kernel_cosf+0xd4>
 800ac8e:	4631      	mov	r1, r6
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7f6 f839 	bl	8000d08 <__aeabi_fmul>
 800ac96:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	f7f6 f834 	bl	8000d08 <__aeabi_fmul>
 800aca0:	492b      	ldr	r1, [pc, #172]	; (800ad50 <__kernel_cosf+0xdc>)
 800aca2:	4607      	mov	r7, r0
 800aca4:	4628      	mov	r0, r5
 800aca6:	f7f6 f82f 	bl	8000d08 <__aeabi_fmul>
 800acaa:	492a      	ldr	r1, [pc, #168]	; (800ad54 <__kernel_cosf+0xe0>)
 800acac:	f7f5 ff24 	bl	8000af8 <__addsf3>
 800acb0:	4629      	mov	r1, r5
 800acb2:	f7f6 f829 	bl	8000d08 <__aeabi_fmul>
 800acb6:	4928      	ldr	r1, [pc, #160]	; (800ad58 <__kernel_cosf+0xe4>)
 800acb8:	f7f5 ff1c 	bl	8000af4 <__aeabi_fsub>
 800acbc:	4629      	mov	r1, r5
 800acbe:	f7f6 f823 	bl	8000d08 <__aeabi_fmul>
 800acc2:	4926      	ldr	r1, [pc, #152]	; (800ad5c <__kernel_cosf+0xe8>)
 800acc4:	f7f5 ff18 	bl	8000af8 <__addsf3>
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f6 f81d 	bl	8000d08 <__aeabi_fmul>
 800acce:	4924      	ldr	r1, [pc, #144]	; (800ad60 <__kernel_cosf+0xec>)
 800acd0:	f7f5 ff10 	bl	8000af4 <__aeabi_fsub>
 800acd4:	4629      	mov	r1, r5
 800acd6:	f7f6 f817 	bl	8000d08 <__aeabi_fmul>
 800acda:	4922      	ldr	r1, [pc, #136]	; (800ad64 <__kernel_cosf+0xf0>)
 800acdc:	f7f5 ff0c 	bl	8000af8 <__addsf3>
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7f6 f811 	bl	8000d08 <__aeabi_fmul>
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f6 f80e 	bl	8000d08 <__aeabi_fmul>
 800acec:	4641      	mov	r1, r8
 800acee:	4605      	mov	r5, r0
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7f6 f809 	bl	8000d08 <__aeabi_fmul>
 800acf6:	4601      	mov	r1, r0
 800acf8:	4628      	mov	r0, r5
 800acfa:	f7f5 fefb 	bl	8000af4 <__aeabi_fsub>
 800acfe:	4b1a      	ldr	r3, [pc, #104]	; (800ad68 <__kernel_cosf+0xf4>)
 800ad00:	4605      	mov	r5, r0
 800ad02:	429c      	cmp	r4, r3
 800ad04:	dc0a      	bgt.n	800ad1c <__kernel_cosf+0xa8>
 800ad06:	4601      	mov	r1, r0
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7f5 fef3 	bl	8000af4 <__aeabi_fsub>
 800ad0e:	4601      	mov	r1, r0
 800ad10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad14:	f7f5 feee 	bl	8000af4 <__aeabi_fsub>
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <__kernel_cosf+0xf8>)
 800ad1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad22:	429c      	cmp	r4, r3
 800ad24:	bfcc      	ite	gt
 800ad26:	4c12      	ldrgt	r4, [pc, #72]	; (800ad70 <__kernel_cosf+0xfc>)
 800ad28:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	f7f5 fee1 	bl	8000af4 <__aeabi_fsub>
 800ad32:	4621      	mov	r1, r4
 800ad34:	4606      	mov	r6, r0
 800ad36:	4638      	mov	r0, r7
 800ad38:	f7f5 fedc 	bl	8000af4 <__aeabi_fsub>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f7f5 fed9 	bl	8000af4 <__aeabi_fsub>
 800ad42:	4601      	mov	r1, r0
 800ad44:	4630      	mov	r0, r6
 800ad46:	e7e5      	b.n	800ad14 <__kernel_cosf+0xa0>
 800ad48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad4c:	e7e4      	b.n	800ad18 <__kernel_cosf+0xa4>
 800ad4e:	bf00      	nop
 800ad50:	ad47d74e 	.word	0xad47d74e
 800ad54:	310f74f6 	.word	0x310f74f6
 800ad58:	3493f27c 	.word	0x3493f27c
 800ad5c:	37d00d01 	.word	0x37d00d01
 800ad60:	3ab60b61 	.word	0x3ab60b61
 800ad64:	3d2aaaab 	.word	0x3d2aaaab
 800ad68:	3e999999 	.word	0x3e999999
 800ad6c:	3f480000 	.word	0x3f480000
 800ad70:	3e900000 	.word	0x3e900000

0800ad74 <__kernel_rem_pio2f>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	b0db      	sub	sp, #364	; 0x16c
 800ad7a:	9202      	str	r2, [sp, #8]
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ad80:	4bc5      	ldr	r3, [pc, #788]	; (800b098 <__kernel_rem_pio2f+0x324>)
 800ad82:	9005      	str	r0, [sp, #20]
 800ad84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad88:	9100      	str	r1, [sp, #0]
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	9303      	str	r3, [sp, #12]
 800ad92:	9b02      	ldr	r3, [sp, #8]
 800ad94:	1d1a      	adds	r2, r3, #4
 800ad96:	f2c0 809b 	blt.w	800aed0 <__kernel_rem_pio2f+0x15c>
 800ad9a:	1edc      	subs	r4, r3, #3
 800ad9c:	bf48      	it	mi
 800ad9e:	1d1c      	addmi	r4, r3, #4
 800ada0:	10e4      	asrs	r4, r4, #3
 800ada2:	2500      	movs	r5, #0
 800ada4:	f04f 0a00 	mov.w	sl, #0
 800ada8:	1c67      	adds	r7, r4, #1
 800adaa:	00fb      	lsls	r3, r7, #3
 800adac:	9306      	str	r3, [sp, #24]
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	9a03      	ldr	r2, [sp, #12]
 800adb2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	1aa6      	subs	r6, r4, r2
 800adba:	eb03 0802 	add.w	r8, r3, r2
 800adbe:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800adc0:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800adc4:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800adc8:	4545      	cmp	r5, r8
 800adca:	f340 8083 	ble.w	800aed4 <__kernel_rem_pio2f+0x160>
 800adce:	f04f 0800 	mov.w	r8, #0
 800add2:	f04f 0b00 	mov.w	fp, #0
 800add6:	9b04      	ldr	r3, [sp, #16]
 800add8:	aa1e      	add	r2, sp, #120	; 0x78
 800adda:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800adde:	ab46      	add	r3, sp, #280	; 0x118
 800ade0:	9a01      	ldr	r2, [sp, #4]
 800ade2:	4590      	cmp	r8, r2
 800ade4:	f340 809c 	ble.w	800af20 <__kernel_rem_pio2f+0x1ac>
 800ade8:	4613      	mov	r3, r2
 800adea:	aa0a      	add	r2, sp, #40	; 0x28
 800adec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adf0:	9308      	str	r3, [sp, #32]
 800adf2:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800adf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800adf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800adfc:	9307      	str	r3, [sp, #28]
 800adfe:	ad0a      	add	r5, sp, #40	; 0x28
 800ae00:	462e      	mov	r6, r5
 800ae02:	46c3      	mov	fp, r8
 800ae04:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800ae08:	ab5a      	add	r3, sp, #360	; 0x168
 800ae0a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ae0e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800ae12:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800ae16:	f1bb 0f00 	cmp.w	fp, #0
 800ae1a:	f300 8086 	bgt.w	800af2a <__kernel_rem_pio2f+0x1b6>
 800ae1e:	4639      	mov	r1, r7
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 fb23 	bl	800b46c <scalbnf>
 800ae26:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	f7f5 ff6c 	bl	8000d08 <__aeabi_fmul>
 800ae30:	f000 fad6 	bl	800b3e0 <floorf>
 800ae34:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800ae38:	f7f5 ff66 	bl	8000d08 <__aeabi_fmul>
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f7f5 fe58 	bl	8000af4 <__aeabi_fsub>
 800ae44:	4604      	mov	r4, r0
 800ae46:	f7f6 f93b 	bl	80010c0 <__aeabi_f2iz>
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	f7f5 ff08 	bl	8000c60 <__aeabi_i2f>
 800ae50:	4601      	mov	r1, r0
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7f5 fe4e 	bl	8000af4 <__aeabi_fsub>
 800ae58:	2f00      	cmp	r7, #0
 800ae5a:	4681      	mov	r9, r0
 800ae5c:	f340 8084 	ble.w	800af68 <__kernel_rem_pio2f+0x1f4>
 800ae60:	f108 32ff 	add.w	r2, r8, #4294967295
 800ae64:	ab0a      	add	r3, sp, #40	; 0x28
 800ae66:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800ae6a:	f1c7 0108 	rsb	r1, r7, #8
 800ae6e:	fa44 f301 	asr.w	r3, r4, r1
 800ae72:	441e      	add	r6, r3
 800ae74:	408b      	lsls	r3, r1
 800ae76:	1ae4      	subs	r4, r4, r3
 800ae78:	f1c7 0007 	rsb	r0, r7, #7
 800ae7c:	ab0a      	add	r3, sp, #40	; 0x28
 800ae7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae82:	4104      	asrs	r4, r0
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	dd7e      	ble.n	800af86 <__kernel_rem_pio2f+0x212>
 800ae88:	2200      	movs	r2, #0
 800ae8a:	4692      	mov	sl, r2
 800ae8c:	3601      	adds	r6, #1
 800ae8e:	4590      	cmp	r8, r2
 800ae90:	f300 80b0 	bgt.w	800aff4 <__kernel_rem_pio2f+0x280>
 800ae94:	2f00      	cmp	r7, #0
 800ae96:	dd05      	ble.n	800aea4 <__kernel_rem_pio2f+0x130>
 800ae98:	2f01      	cmp	r7, #1
 800ae9a:	f000 80bd 	beq.w	800b018 <__kernel_rem_pio2f+0x2a4>
 800ae9e:	2f02      	cmp	r7, #2
 800aea0:	f000 80c5 	beq.w	800b02e <__kernel_rem_pio2f+0x2ba>
 800aea4:	2c02      	cmp	r4, #2
 800aea6:	d16e      	bne.n	800af86 <__kernel_rem_pio2f+0x212>
 800aea8:	4649      	mov	r1, r9
 800aeaa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aeae:	f7f5 fe21 	bl	8000af4 <__aeabi_fsub>
 800aeb2:	4681      	mov	r9, r0
 800aeb4:	f1ba 0f00 	cmp.w	sl, #0
 800aeb8:	d065      	beq.n	800af86 <__kernel_rem_pio2f+0x212>
 800aeba:	4639      	mov	r1, r7
 800aebc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aec0:	f000 fad4 	bl	800b46c <scalbnf>
 800aec4:	4601      	mov	r1, r0
 800aec6:	4648      	mov	r0, r9
 800aec8:	f7f5 fe14 	bl	8000af4 <__aeabi_fsub>
 800aecc:	4681      	mov	r9, r0
 800aece:	e05a      	b.n	800af86 <__kernel_rem_pio2f+0x212>
 800aed0:	2400      	movs	r4, #0
 800aed2:	e766      	b.n	800ada2 <__kernel_rem_pio2f+0x2e>
 800aed4:	42ee      	cmn	r6, r5
 800aed6:	d407      	bmi.n	800aee8 <__kernel_rem_pio2f+0x174>
 800aed8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aedc:	f7f5 fec0 	bl	8000c60 <__aeabi_i2f>
 800aee0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800aee4:	3501      	adds	r5, #1
 800aee6:	e76f      	b.n	800adc8 <__kernel_rem_pio2f+0x54>
 800aee8:	4650      	mov	r0, sl
 800aeea:	e7f9      	b.n	800aee0 <__kernel_rem_pio2f+0x16c>
 800aeec:	9b05      	ldr	r3, [sp, #20]
 800aeee:	f8da 1000 	ldr.w	r1, [sl]
 800aef2:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800aef6:	f7f5 ff07 	bl	8000d08 <__aeabi_fmul>
 800aefa:	4601      	mov	r1, r0
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7f5 fdfb 	bl	8000af8 <__addsf3>
 800af02:	4606      	mov	r6, r0
 800af04:	f109 0901 	add.w	r9, r9, #1
 800af08:	ab46      	add	r3, sp, #280	; 0x118
 800af0a:	9a03      	ldr	r2, [sp, #12]
 800af0c:	f1aa 0a04 	sub.w	sl, sl, #4
 800af10:	4591      	cmp	r9, r2
 800af12:	ddeb      	ble.n	800aeec <__kernel_rem_pio2f+0x178>
 800af14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800af18:	3504      	adds	r5, #4
 800af1a:	f108 0801 	add.w	r8, r8, #1
 800af1e:	e75f      	b.n	800ade0 <__kernel_rem_pio2f+0x6c>
 800af20:	46aa      	mov	sl, r5
 800af22:	465e      	mov	r6, fp
 800af24:	f04f 0900 	mov.w	r9, #0
 800af28:	e7ef      	b.n	800af0a <__kernel_rem_pio2f+0x196>
 800af2a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800af2e:	4620      	mov	r0, r4
 800af30:	f7f5 feea 	bl	8000d08 <__aeabi_fmul>
 800af34:	f7f6 f8c4 	bl	80010c0 <__aeabi_f2iz>
 800af38:	f7f5 fe92 	bl	8000c60 <__aeabi_i2f>
 800af3c:	4649      	mov	r1, r9
 800af3e:	9009      	str	r0, [sp, #36]	; 0x24
 800af40:	f7f5 fee2 	bl	8000d08 <__aeabi_fmul>
 800af44:	4601      	mov	r1, r0
 800af46:	4620      	mov	r0, r4
 800af48:	f7f5 fdd4 	bl	8000af4 <__aeabi_fsub>
 800af4c:	f7f6 f8b8 	bl	80010c0 <__aeabi_f2iz>
 800af50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af56:	f846 0b04 	str.w	r0, [r6], #4
 800af5a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f5 fdca 	bl	8000af8 <__addsf3>
 800af64:	4604      	mov	r4, r0
 800af66:	e756      	b.n	800ae16 <__kernel_rem_pio2f+0xa2>
 800af68:	d106      	bne.n	800af78 <__kernel_rem_pio2f+0x204>
 800af6a:	f108 33ff 	add.w	r3, r8, #4294967295
 800af6e:	aa0a      	add	r2, sp, #40	; 0x28
 800af70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af74:	1224      	asrs	r4, r4, #8
 800af76:	e785      	b.n	800ae84 <__kernel_rem_pio2f+0x110>
 800af78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800af7c:	f7f6 f876 	bl	800106c <__aeabi_fcmpge>
 800af80:	4604      	mov	r4, r0
 800af82:	2800      	cmp	r0, #0
 800af84:	d134      	bne.n	800aff0 <__kernel_rem_pio2f+0x27c>
 800af86:	2100      	movs	r1, #0
 800af88:	4648      	mov	r0, r9
 800af8a:	f7f6 f851 	bl	8001030 <__aeabi_fcmpeq>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f000 809a 	beq.w	800b0c8 <__kernel_rem_pio2f+0x354>
 800af94:	f108 35ff 	add.w	r5, r8, #4294967295
 800af98:	462b      	mov	r3, r5
 800af9a:	2200      	movs	r2, #0
 800af9c:	9901      	ldr	r1, [sp, #4]
 800af9e:	428b      	cmp	r3, r1
 800afa0:	da4d      	bge.n	800b03e <__kernel_rem_pio2f+0x2ca>
 800afa2:	2a00      	cmp	r2, #0
 800afa4:	d07c      	beq.n	800b0a0 <__kernel_rem_pio2f+0x32c>
 800afa6:	ab0a      	add	r3, sp, #40	; 0x28
 800afa8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800afac:	3f08      	subs	r7, #8
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 8088 	beq.w	800b0c4 <__kernel_rem_pio2f+0x350>
 800afb4:	4639      	mov	r1, r7
 800afb6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800afba:	f000 fa57 	bl	800b46c <scalbnf>
 800afbe:	46aa      	mov	sl, r5
 800afc0:	4681      	mov	r9, r0
 800afc2:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800afc6:	af46      	add	r7, sp, #280	; 0x118
 800afc8:	f1ba 0f00 	cmp.w	sl, #0
 800afcc:	f280 80b1 	bge.w	800b132 <__kernel_rem_pio2f+0x3be>
 800afd0:	46a9      	mov	r9, r5
 800afd2:	f04f 0a00 	mov.w	sl, #0
 800afd6:	2200      	movs	r2, #0
 800afd8:	f1b9 0f00 	cmp.w	r9, #0
 800afdc:	f2c0 80db 	blt.w	800b196 <__kernel_rem_pio2f+0x422>
 800afe0:	a946      	add	r1, sp, #280	; 0x118
 800afe2:	4617      	mov	r7, r2
 800afe4:	f04f 0800 	mov.w	r8, #0
 800afe8:	4b2c      	ldr	r3, [pc, #176]	; (800b09c <__kernel_rem_pio2f+0x328>)
 800afea:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800afee:	e0c3      	b.n	800b178 <__kernel_rem_pio2f+0x404>
 800aff0:	2402      	movs	r4, #2
 800aff2:	e749      	b.n	800ae88 <__kernel_rem_pio2f+0x114>
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	f1ba 0f00 	cmp.w	sl, #0
 800affa:	d108      	bne.n	800b00e <__kernel_rem_pio2f+0x29a>
 800affc:	b11b      	cbz	r3, 800b006 <__kernel_rem_pio2f+0x292>
 800affe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	2301      	movs	r3, #1
 800b006:	469a      	mov	sl, r3
 800b008:	3201      	adds	r2, #1
 800b00a:	3504      	adds	r5, #4
 800b00c:	e73f      	b.n	800ae8e <__kernel_rem_pio2f+0x11a>
 800b00e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b012:	602b      	str	r3, [r5, #0]
 800b014:	4653      	mov	r3, sl
 800b016:	e7f6      	b.n	800b006 <__kernel_rem_pio2f+0x292>
 800b018:	f108 32ff 	add.w	r2, r8, #4294967295
 800b01c:	ab0a      	add	r3, sp, #40	; 0x28
 800b01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b026:	a90a      	add	r1, sp, #40	; 0x28
 800b028:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b02c:	e73a      	b.n	800aea4 <__kernel_rem_pio2f+0x130>
 800b02e:	f108 32ff 	add.w	r2, r8, #4294967295
 800b032:	ab0a      	add	r3, sp, #40	; 0x28
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b03c:	e7f3      	b.n	800b026 <__kernel_rem_pio2f+0x2b2>
 800b03e:	a90a      	add	r1, sp, #40	; 0x28
 800b040:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b044:	3b01      	subs	r3, #1
 800b046:	430a      	orrs	r2, r1
 800b048:	e7a8      	b.n	800af9c <__kernel_rem_pio2f+0x228>
 800b04a:	3301      	adds	r3, #1
 800b04c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b050:	2900      	cmp	r1, #0
 800b052:	d0fa      	beq.n	800b04a <__kernel_rem_pio2f+0x2d6>
 800b054:	9a04      	ldr	r2, [sp, #16]
 800b056:	f108 0501 	add.w	r5, r8, #1
 800b05a:	eb08 0402 	add.w	r4, r8, r2
 800b05e:	aa1e      	add	r2, sp, #120	; 0x78
 800b060:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b064:	4498      	add	r8, r3
 800b066:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800b06a:	45a8      	cmp	r8, r5
 800b06c:	f6ff aec7 	blt.w	800adfe <__kernel_rem_pio2f+0x8a>
 800b070:	9b07      	ldr	r3, [sp, #28]
 800b072:	46a3      	mov	fp, r4
 800b074:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b078:	f7f5 fdf2 	bl	8000c60 <__aeabi_i2f>
 800b07c:	f04f 0a00 	mov.w	sl, #0
 800b080:	2600      	movs	r6, #0
 800b082:	f84b 0b04 	str.w	r0, [fp], #4
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	459a      	cmp	sl, r3
 800b08a:	dd0c      	ble.n	800b0a6 <__kernel_rem_pio2f+0x332>
 800b08c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800b090:	465c      	mov	r4, fp
 800b092:	3501      	adds	r5, #1
 800b094:	e7e9      	b.n	800b06a <__kernel_rem_pio2f+0x2f6>
 800b096:	bf00      	nop
 800b098:	0800bc64 	.word	0x0800bc64
 800b09c:	0800bc38 	.word	0x0800bc38
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	9a08      	ldr	r2, [sp, #32]
 800b0a4:	e7d2      	b.n	800b04c <__kernel_rem_pio2f+0x2d8>
 800b0a6:	9b05      	ldr	r3, [sp, #20]
 800b0a8:	f854 0904 	ldr.w	r0, [r4], #-4
 800b0ac:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800b0b0:	f7f5 fe2a 	bl	8000d08 <__aeabi_fmul>
 800b0b4:	4601      	mov	r1, r0
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7f5 fd1e 	bl	8000af8 <__addsf3>
 800b0bc:	f10a 0a01 	add.w	sl, sl, #1
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	e7e0      	b.n	800b086 <__kernel_rem_pio2f+0x312>
 800b0c4:	3d01      	subs	r5, #1
 800b0c6:	e76e      	b.n	800afa6 <__kernel_rem_pio2f+0x232>
 800b0c8:	9b06      	ldr	r3, [sp, #24]
 800b0ca:	9a02      	ldr	r2, [sp, #8]
 800b0cc:	4648      	mov	r0, r9
 800b0ce:	1a99      	subs	r1, r3, r2
 800b0d0:	f000 f9cc 	bl	800b46c <scalbnf>
 800b0d4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b0d8:	4605      	mov	r5, r0
 800b0da:	f7f5 ffc7 	bl	800106c <__aeabi_fcmpge>
 800b0de:	b300      	cbz	r0, 800b122 <__kernel_rem_pio2f+0x3ae>
 800b0e0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f7f5 fe0f 	bl	8000d08 <__aeabi_fmul>
 800b0ea:	f7f5 ffe9 	bl	80010c0 <__aeabi_f2iz>
 800b0ee:	f7f5 fdb7 	bl	8000c60 <__aeabi_i2f>
 800b0f2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b0f6:	4681      	mov	r9, r0
 800b0f8:	f7f5 fe06 	bl	8000d08 <__aeabi_fmul>
 800b0fc:	4601      	mov	r1, r0
 800b0fe:	4628      	mov	r0, r5
 800b100:	f7f5 fcf8 	bl	8000af4 <__aeabi_fsub>
 800b104:	f7f5 ffdc 	bl	80010c0 <__aeabi_f2iz>
 800b108:	ab0a      	add	r3, sp, #40	; 0x28
 800b10a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b10e:	4648      	mov	r0, r9
 800b110:	f7f5 ffd6 	bl	80010c0 <__aeabi_f2iz>
 800b114:	f108 0501 	add.w	r5, r8, #1
 800b118:	ab0a      	add	r3, sp, #40	; 0x28
 800b11a:	3708      	adds	r7, #8
 800b11c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b120:	e748      	b.n	800afb4 <__kernel_rem_pio2f+0x240>
 800b122:	4628      	mov	r0, r5
 800b124:	f7f5 ffcc 	bl	80010c0 <__aeabi_f2iz>
 800b128:	ab0a      	add	r3, sp, #40	; 0x28
 800b12a:	4645      	mov	r5, r8
 800b12c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b130:	e740      	b.n	800afb4 <__kernel_rem_pio2f+0x240>
 800b132:	ab0a      	add	r3, sp, #40	; 0x28
 800b134:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b138:	f7f5 fd92 	bl	8000c60 <__aeabi_i2f>
 800b13c:	4649      	mov	r1, r9
 800b13e:	f7f5 fde3 	bl	8000d08 <__aeabi_fmul>
 800b142:	4641      	mov	r1, r8
 800b144:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800b148:	4648      	mov	r0, r9
 800b14a:	f7f5 fddd 	bl	8000d08 <__aeabi_fmul>
 800b14e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b152:	4681      	mov	r9, r0
 800b154:	e738      	b.n	800afc8 <__kernel_rem_pio2f+0x254>
 800b156:	f853 0b04 	ldr.w	r0, [r3], #4
 800b15a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800b15e:	9203      	str	r2, [sp, #12]
 800b160:	9302      	str	r3, [sp, #8]
 800b162:	f7f5 fdd1 	bl	8000d08 <__aeabi_fmul>
 800b166:	4601      	mov	r1, r0
 800b168:	4638      	mov	r0, r7
 800b16a:	f7f5 fcc5 	bl	8000af8 <__addsf3>
 800b16e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b172:	4607      	mov	r7, r0
 800b174:	f108 0801 	add.w	r8, r8, #1
 800b178:	9901      	ldr	r1, [sp, #4]
 800b17a:	4588      	cmp	r8, r1
 800b17c:	dc01      	bgt.n	800b182 <__kernel_rem_pio2f+0x40e>
 800b17e:	45c2      	cmp	sl, r8
 800b180:	dae9      	bge.n	800b156 <__kernel_rem_pio2f+0x3e2>
 800b182:	ab5a      	add	r3, sp, #360	; 0x168
 800b184:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b188:	f843 7ca0 	str.w	r7, [r3, #-160]
 800b18c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b190:	f10a 0a01 	add.w	sl, sl, #1
 800b194:	e720      	b.n	800afd8 <__kernel_rem_pio2f+0x264>
 800b196:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b198:	2b02      	cmp	r3, #2
 800b19a:	dc07      	bgt.n	800b1ac <__kernel_rem_pio2f+0x438>
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dc4d      	bgt.n	800b23c <__kernel_rem_pio2f+0x4c8>
 800b1a0:	d02e      	beq.n	800b200 <__kernel_rem_pio2f+0x48c>
 800b1a2:	f006 0007 	and.w	r0, r6, #7
 800b1a6:	b05b      	add	sp, #364	; 0x16c
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d1f7      	bne.n	800b1a2 <__kernel_rem_pio2f+0x42e>
 800b1b2:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800b1b6:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800b1ba:	46b8      	mov	r8, r7
 800b1bc:	46aa      	mov	sl, r5
 800b1be:	f1ba 0f00 	cmp.w	sl, #0
 800b1c2:	dc48      	bgt.n	800b256 <__kernel_rem_pio2f+0x4e2>
 800b1c4:	46a9      	mov	r9, r5
 800b1c6:	f1b9 0f01 	cmp.w	r9, #1
 800b1ca:	dc5f      	bgt.n	800b28c <__kernel_rem_pio2f+0x518>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	2d01      	cmp	r5, #1
 800b1d0:	dc75      	bgt.n	800b2be <__kernel_rem_pio2f+0x54a>
 800b1d2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b1d4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800b1d6:	2c00      	cmp	r4, #0
 800b1d8:	d177      	bne.n	800b2ca <__kernel_rem_pio2f+0x556>
 800b1da:	9900      	ldr	r1, [sp, #0]
 800b1dc:	600a      	str	r2, [r1, #0]
 800b1de:	460a      	mov	r2, r1
 800b1e0:	604b      	str	r3, [r1, #4]
 800b1e2:	6090      	str	r0, [r2, #8]
 800b1e4:	e7dd      	b.n	800b1a2 <__kernel_rem_pio2f+0x42e>
 800b1e6:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800b1ea:	f7f5 fc85 	bl	8000af8 <__addsf3>
 800b1ee:	3d01      	subs	r5, #1
 800b1f0:	2d00      	cmp	r5, #0
 800b1f2:	daf8      	bge.n	800b1e6 <__kernel_rem_pio2f+0x472>
 800b1f4:	b10c      	cbz	r4, 800b1fa <__kernel_rem_pio2f+0x486>
 800b1f6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b1fa:	9b00      	ldr	r3, [sp, #0]
 800b1fc:	6018      	str	r0, [r3, #0]
 800b1fe:	e7d0      	b.n	800b1a2 <__kernel_rem_pio2f+0x42e>
 800b200:	2000      	movs	r0, #0
 800b202:	af32      	add	r7, sp, #200	; 0xc8
 800b204:	e7f4      	b.n	800b1f0 <__kernel_rem_pio2f+0x47c>
 800b206:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b20a:	f7f5 fc75 	bl	8000af8 <__addsf3>
 800b20e:	3f01      	subs	r7, #1
 800b210:	2f00      	cmp	r7, #0
 800b212:	daf8      	bge.n	800b206 <__kernel_rem_pio2f+0x492>
 800b214:	b1bc      	cbz	r4, 800b246 <__kernel_rem_pio2f+0x4d2>
 800b216:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b21a:	9a00      	ldr	r2, [sp, #0]
 800b21c:	4601      	mov	r1, r0
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800b222:	f7f5 fc67 	bl	8000af4 <__aeabi_fsub>
 800b226:	2701      	movs	r7, #1
 800b228:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b22c:	42bd      	cmp	r5, r7
 800b22e:	da0c      	bge.n	800b24a <__kernel_rem_pio2f+0x4d6>
 800b230:	b10c      	cbz	r4, 800b236 <__kernel_rem_pio2f+0x4c2>
 800b232:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	6058      	str	r0, [r3, #4]
 800b23a:	e7b2      	b.n	800b1a2 <__kernel_rem_pio2f+0x42e>
 800b23c:	462f      	mov	r7, r5
 800b23e:	2000      	movs	r0, #0
 800b240:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b244:	e7e4      	b.n	800b210 <__kernel_rem_pio2f+0x49c>
 800b246:	4603      	mov	r3, r0
 800b248:	e7e7      	b.n	800b21a <__kernel_rem_pio2f+0x4a6>
 800b24a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b24e:	f7f5 fc53 	bl	8000af8 <__addsf3>
 800b252:	3701      	adds	r7, #1
 800b254:	e7ea      	b.n	800b22c <__kernel_rem_pio2f+0x4b8>
 800b256:	f8d8 3000 	ldr.w	r3, [r8]
 800b25a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b25e:	4619      	mov	r1, r3
 800b260:	4610      	mov	r0, r2
 800b262:	9302      	str	r3, [sp, #8]
 800b264:	9201      	str	r2, [sp, #4]
 800b266:	f7f5 fc47 	bl	8000af8 <__addsf3>
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	4601      	mov	r1, r0
 800b26e:	4681      	mov	r9, r0
 800b270:	4610      	mov	r0, r2
 800b272:	f7f5 fc3f 	bl	8000af4 <__aeabi_fsub>
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b27c:	4619      	mov	r1, r3
 800b27e:	f7f5 fc3b 	bl	8000af8 <__addsf3>
 800b282:	f848 0904 	str.w	r0, [r8], #-4
 800b286:	f8c8 9000 	str.w	r9, [r8]
 800b28a:	e798      	b.n	800b1be <__kernel_rem_pio2f+0x44a>
 800b28c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b290:	f8d7 a000 	ldr.w	sl, [r7]
 800b294:	4618      	mov	r0, r3
 800b296:	4651      	mov	r1, sl
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	f7f5 fc2d 	bl	8000af8 <__addsf3>
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	4680      	mov	r8, r0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7f5 fc25 	bl	8000af4 <__aeabi_fsub>
 800b2aa:	4651      	mov	r1, sl
 800b2ac:	f7f5 fc24 	bl	8000af8 <__addsf3>
 800b2b0:	f847 0904 	str.w	r0, [r7], #-4
 800b2b4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b2b8:	f8c7 8000 	str.w	r8, [r7]
 800b2bc:	e783      	b.n	800b1c6 <__kernel_rem_pio2f+0x452>
 800b2be:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800b2c2:	f7f5 fc19 	bl	8000af8 <__addsf3>
 800b2c6:	3d01      	subs	r5, #1
 800b2c8:	e781      	b.n	800b1ce <__kernel_rem_pio2f+0x45a>
 800b2ca:	9900      	ldr	r1, [sp, #0]
 800b2cc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800b2d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2d4:	600a      	str	r2, [r1, #0]
 800b2d6:	604b      	str	r3, [r1, #4]
 800b2d8:	460a      	mov	r2, r1
 800b2da:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2de:	e780      	b.n	800b1e2 <__kernel_rem_pio2f+0x46e>

0800b2e0 <__kernel_sinf>:
 800b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b2e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	460f      	mov	r7, r1
 800b2f0:	4691      	mov	r9, r2
 800b2f2:	da03      	bge.n	800b2fc <__kernel_sinf+0x1c>
 800b2f4:	f7f5 fee4 	bl	80010c0 <__aeabi_f2iz>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d035      	beq.n	800b368 <__kernel_sinf+0x88>
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7f5 fd02 	bl	8000d08 <__aeabi_fmul>
 800b304:	4605      	mov	r5, r0
 800b306:	4601      	mov	r1, r0
 800b308:	4620      	mov	r0, r4
 800b30a:	f7f5 fcfd 	bl	8000d08 <__aeabi_fmul>
 800b30e:	4929      	ldr	r1, [pc, #164]	; (800b3b4 <__kernel_sinf+0xd4>)
 800b310:	4606      	mov	r6, r0
 800b312:	4628      	mov	r0, r5
 800b314:	f7f5 fcf8 	bl	8000d08 <__aeabi_fmul>
 800b318:	4927      	ldr	r1, [pc, #156]	; (800b3b8 <__kernel_sinf+0xd8>)
 800b31a:	f7f5 fbeb 	bl	8000af4 <__aeabi_fsub>
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 fcf2 	bl	8000d08 <__aeabi_fmul>
 800b324:	4925      	ldr	r1, [pc, #148]	; (800b3bc <__kernel_sinf+0xdc>)
 800b326:	f7f5 fbe7 	bl	8000af8 <__addsf3>
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f5 fcec 	bl	8000d08 <__aeabi_fmul>
 800b330:	4923      	ldr	r1, [pc, #140]	; (800b3c0 <__kernel_sinf+0xe0>)
 800b332:	f7f5 fbdf 	bl	8000af4 <__aeabi_fsub>
 800b336:	4629      	mov	r1, r5
 800b338:	f7f5 fce6 	bl	8000d08 <__aeabi_fmul>
 800b33c:	4921      	ldr	r1, [pc, #132]	; (800b3c4 <__kernel_sinf+0xe4>)
 800b33e:	f7f5 fbdb 	bl	8000af8 <__addsf3>
 800b342:	4680      	mov	r8, r0
 800b344:	f1b9 0f00 	cmp.w	r9, #0
 800b348:	d111      	bne.n	800b36e <__kernel_sinf+0x8e>
 800b34a:	4601      	mov	r1, r0
 800b34c:	4628      	mov	r0, r5
 800b34e:	f7f5 fcdb 	bl	8000d08 <__aeabi_fmul>
 800b352:	491d      	ldr	r1, [pc, #116]	; (800b3c8 <__kernel_sinf+0xe8>)
 800b354:	f7f5 fbce 	bl	8000af4 <__aeabi_fsub>
 800b358:	4631      	mov	r1, r6
 800b35a:	f7f5 fcd5 	bl	8000d08 <__aeabi_fmul>
 800b35e:	4601      	mov	r1, r0
 800b360:	4620      	mov	r0, r4
 800b362:	f7f5 fbc9 	bl	8000af8 <__addsf3>
 800b366:	4604      	mov	r4, r0
 800b368:	4620      	mov	r0, r4
 800b36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b372:	4638      	mov	r0, r7
 800b374:	f7f5 fcc8 	bl	8000d08 <__aeabi_fmul>
 800b378:	4641      	mov	r1, r8
 800b37a:	4681      	mov	r9, r0
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7f5 fcc3 	bl	8000d08 <__aeabi_fmul>
 800b382:	4601      	mov	r1, r0
 800b384:	4648      	mov	r0, r9
 800b386:	f7f5 fbb5 	bl	8000af4 <__aeabi_fsub>
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f5 fcbc 	bl	8000d08 <__aeabi_fmul>
 800b390:	4639      	mov	r1, r7
 800b392:	f7f5 fbaf 	bl	8000af4 <__aeabi_fsub>
 800b396:	490c      	ldr	r1, [pc, #48]	; (800b3c8 <__kernel_sinf+0xe8>)
 800b398:	4605      	mov	r5, r0
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7f5 fcb4 	bl	8000d08 <__aeabi_fmul>
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f7f5 fba8 	bl	8000af8 <__addsf3>
 800b3a8:	4601      	mov	r1, r0
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f7f5 fba2 	bl	8000af4 <__aeabi_fsub>
 800b3b0:	e7d9      	b.n	800b366 <__kernel_sinf+0x86>
 800b3b2:	bf00      	nop
 800b3b4:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3b8:	32d72f34 	.word	0x32d72f34
 800b3bc:	3638ef1b 	.word	0x3638ef1b
 800b3c0:	39500d01 	.word	0x39500d01
 800b3c4:	3c088889 	.word	0x3c088889
 800b3c8:	3e2aaaab 	.word	0x3e2aaaab

0800b3cc <finite>:
 800b3cc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b3d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b3d4:	0fc0      	lsrs	r0, r0, #31
 800b3d6:	4770      	bx	lr

0800b3d8 <fabsf>:
 800b3d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <floorf>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800b3e6:	3d7f      	subs	r5, #127	; 0x7f
 800b3e8:	2d16      	cmp	r5, #22
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b3f2:	dc26      	bgt.n	800b442 <floorf+0x62>
 800b3f4:	2d00      	cmp	r5, #0
 800b3f6:	da0e      	bge.n	800b416 <floorf+0x36>
 800b3f8:	4917      	ldr	r1, [pc, #92]	; (800b458 <floorf+0x78>)
 800b3fa:	f7f5 fb7d 	bl	8000af8 <__addsf3>
 800b3fe:	2100      	movs	r1, #0
 800b400:	f7f5 fe3e 	bl	8001080 <__aeabi_fcmpgt>
 800b404:	b128      	cbz	r0, 800b412 <floorf+0x32>
 800b406:	2c00      	cmp	r4, #0
 800b408:	da23      	bge.n	800b452 <floorf+0x72>
 800b40a:	4b14      	ldr	r3, [pc, #80]	; (800b45c <floorf+0x7c>)
 800b40c:	2e00      	cmp	r6, #0
 800b40e:	bf18      	it	ne
 800b410:	461c      	movne	r4, r3
 800b412:	4621      	mov	r1, r4
 800b414:	e01b      	b.n	800b44e <floorf+0x6e>
 800b416:	4e12      	ldr	r6, [pc, #72]	; (800b460 <floorf+0x80>)
 800b418:	412e      	asrs	r6, r5
 800b41a:	4230      	tst	r0, r6
 800b41c:	d017      	beq.n	800b44e <floorf+0x6e>
 800b41e:	490e      	ldr	r1, [pc, #56]	; (800b458 <floorf+0x78>)
 800b420:	f7f5 fb6a 	bl	8000af8 <__addsf3>
 800b424:	2100      	movs	r1, #0
 800b426:	f7f5 fe2b 	bl	8001080 <__aeabi_fcmpgt>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0f1      	beq.n	800b412 <floorf+0x32>
 800b42e:	2c00      	cmp	r4, #0
 800b430:	bfbe      	ittt	lt
 800b432:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800b436:	fa43 f505 	asrlt.w	r5, r3, r5
 800b43a:	1964      	addlt	r4, r4, r5
 800b43c:	ea24 0406 	bic.w	r4, r4, r6
 800b440:	e7e7      	b.n	800b412 <floorf+0x32>
 800b442:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b446:	d302      	bcc.n	800b44e <floorf+0x6e>
 800b448:	f7f5 fb56 	bl	8000af8 <__addsf3>
 800b44c:	4601      	mov	r1, r0
 800b44e:	4608      	mov	r0, r1
 800b450:	bd70      	pop	{r4, r5, r6, pc}
 800b452:	2400      	movs	r4, #0
 800b454:	e7dd      	b.n	800b412 <floorf+0x32>
 800b456:	bf00      	nop
 800b458:	7149f2ca 	.word	0x7149f2ca
 800b45c:	bf800000 	.word	0xbf800000
 800b460:	007fffff 	.word	0x007fffff

0800b464 <nanf>:
 800b464:	4800      	ldr	r0, [pc, #0]	; (800b468 <nanf+0x4>)
 800b466:	4770      	bx	lr
 800b468:	7fc00000 	.word	0x7fc00000

0800b46c <scalbnf>:
 800b46c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4603      	mov	r3, r0
 800b474:	460d      	mov	r5, r1
 800b476:	4604      	mov	r4, r0
 800b478:	d02a      	beq.n	800b4d0 <scalbnf+0x64>
 800b47a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b47e:	d304      	bcc.n	800b48a <scalbnf+0x1e>
 800b480:	4601      	mov	r1, r0
 800b482:	f7f5 fb39 	bl	8000af8 <__addsf3>
 800b486:	4603      	mov	r3, r0
 800b488:	e022      	b.n	800b4d0 <scalbnf+0x64>
 800b48a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800b48e:	d117      	bne.n	800b4c0 <scalbnf+0x54>
 800b490:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b494:	f7f5 fc38 	bl	8000d08 <__aeabi_fmul>
 800b498:	4a17      	ldr	r2, [pc, #92]	; (800b4f8 <scalbnf+0x8c>)
 800b49a:	4603      	mov	r3, r0
 800b49c:	4295      	cmp	r5, r2
 800b49e:	db0b      	blt.n	800b4b8 <scalbnf+0x4c>
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b4a6:	3a19      	subs	r2, #25
 800b4a8:	442a      	add	r2, r5
 800b4aa:	2afe      	cmp	r2, #254	; 0xfe
 800b4ac:	dd0a      	ble.n	800b4c4 <scalbnf+0x58>
 800b4ae:	4913      	ldr	r1, [pc, #76]	; (800b4fc <scalbnf+0x90>)
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f361 001e 	bfi	r0, r1, #0, #31
 800b4b6:	e000      	b.n	800b4ba <scalbnf+0x4e>
 800b4b8:	4911      	ldr	r1, [pc, #68]	; (800b500 <scalbnf+0x94>)
 800b4ba:	f7f5 fc25 	bl	8000d08 <__aeabi_fmul>
 800b4be:	e7e2      	b.n	800b486 <scalbnf+0x1a>
 800b4c0:	0dd2      	lsrs	r2, r2, #23
 800b4c2:	e7f1      	b.n	800b4a8 <scalbnf+0x3c>
 800b4c4:	2a00      	cmp	r2, #0
 800b4c6:	dd05      	ble.n	800b4d4 <scalbnf+0x68>
 800b4c8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800b4cc:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	f112 0f16 	cmn.w	r2, #22
 800b4d8:	da05      	bge.n	800b4e6 <scalbnf+0x7a>
 800b4da:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b4de:	4295      	cmp	r5, r2
 800b4e0:	dce5      	bgt.n	800b4ae <scalbnf+0x42>
 800b4e2:	4907      	ldr	r1, [pc, #28]	; (800b500 <scalbnf+0x94>)
 800b4e4:	e7e4      	b.n	800b4b0 <scalbnf+0x44>
 800b4e6:	3219      	adds	r2, #25
 800b4e8:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800b4ec:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800b4f0:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800b4f4:	e7e1      	b.n	800b4ba <scalbnf+0x4e>
 800b4f6:	bf00      	nop
 800b4f8:	ffff3cb0 	.word	0xffff3cb0
 800b4fc:	7149f2ca 	.word	0x7149f2ca
 800b500:	0da24260 	.word	0x0da24260

0800b504 <abort>:
 800b504:	2006      	movs	r0, #6
 800b506:	b508      	push	{r3, lr}
 800b508:	f000 f94c 	bl	800b7a4 <raise>
 800b50c:	2001      	movs	r0, #1
 800b50e:	f7f7 fd8e 	bl	800302e <_exit>
	...

0800b514 <__errno>:
 800b514:	4b01      	ldr	r3, [pc, #4]	; (800b51c <__errno+0x8>)
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	20000010 	.word	0x20000010

0800b520 <__libc_init_array>:
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	2600      	movs	r6, #0
 800b524:	4d0c      	ldr	r5, [pc, #48]	; (800b558 <__libc_init_array+0x38>)
 800b526:	4c0d      	ldr	r4, [pc, #52]	; (800b55c <__libc_init_array+0x3c>)
 800b528:	1b64      	subs	r4, r4, r5
 800b52a:	10a4      	asrs	r4, r4, #2
 800b52c:	42a6      	cmp	r6, r4
 800b52e:	d109      	bne.n	800b544 <__libc_init_array+0x24>
 800b530:	f000 f962 	bl	800b7f8 <_init>
 800b534:	2600      	movs	r6, #0
 800b536:	4d0a      	ldr	r5, [pc, #40]	; (800b560 <__libc_init_array+0x40>)
 800b538:	4c0a      	ldr	r4, [pc, #40]	; (800b564 <__libc_init_array+0x44>)
 800b53a:	1b64      	subs	r4, r4, r5
 800b53c:	10a4      	asrs	r4, r4, #2
 800b53e:	42a6      	cmp	r6, r4
 800b540:	d105      	bne.n	800b54e <__libc_init_array+0x2e>
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	f855 3b04 	ldr.w	r3, [r5], #4
 800b548:	4798      	blx	r3
 800b54a:	3601      	adds	r6, #1
 800b54c:	e7ee      	b.n	800b52c <__libc_init_array+0xc>
 800b54e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b552:	4798      	blx	r3
 800b554:	3601      	adds	r6, #1
 800b556:	e7f2      	b.n	800b53e <__libc_init_array+0x1e>
 800b558:	0800bcd0 	.word	0x0800bcd0
 800b55c:	0800bcd0 	.word	0x0800bcd0
 800b560:	0800bcd0 	.word	0x0800bcd0
 800b564:	0800bcd8 	.word	0x0800bcd8

0800b568 <malloc>:
 800b568:	4b02      	ldr	r3, [pc, #8]	; (800b574 <malloc+0xc>)
 800b56a:	4601      	mov	r1, r0
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	f000 b887 	b.w	800b680 <_malloc_r>
 800b572:	bf00      	nop
 800b574:	20000010 	.word	0x20000010

0800b578 <free>:
 800b578:	4b02      	ldr	r3, [pc, #8]	; (800b584 <free+0xc>)
 800b57a:	4601      	mov	r1, r0
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	f000 b833 	b.w	800b5e8 <_free_r>
 800b582:	bf00      	nop
 800b584:	20000010 	.word	0x20000010

0800b588 <memcpy>:
 800b588:	440a      	add	r2, r1
 800b58a:	4291      	cmp	r1, r2
 800b58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b590:	d100      	bne.n	800b594 <memcpy+0xc>
 800b592:	4770      	bx	lr
 800b594:	b510      	push	{r4, lr}
 800b596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b59a:	4291      	cmp	r1, r2
 800b59c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5a0:	d1f9      	bne.n	800b596 <memcpy+0xe>
 800b5a2:	bd10      	pop	{r4, pc}

0800b5a4 <memmove>:
 800b5a4:	4288      	cmp	r0, r1
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	eb01 0402 	add.w	r4, r1, r2
 800b5ac:	d902      	bls.n	800b5b4 <memmove+0x10>
 800b5ae:	4284      	cmp	r4, r0
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	d807      	bhi.n	800b5c4 <memmove+0x20>
 800b5b4:	1e43      	subs	r3, r0, #1
 800b5b6:	42a1      	cmp	r1, r4
 800b5b8:	d008      	beq.n	800b5cc <memmove+0x28>
 800b5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5c2:	e7f8      	b.n	800b5b6 <memmove+0x12>
 800b5c4:	4601      	mov	r1, r0
 800b5c6:	4402      	add	r2, r0
 800b5c8:	428a      	cmp	r2, r1
 800b5ca:	d100      	bne.n	800b5ce <memmove+0x2a>
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5d6:	e7f7      	b.n	800b5c8 <memmove+0x24>

0800b5d8 <memset>:
 800b5d8:	4603      	mov	r3, r0
 800b5da:	4402      	add	r2, r0
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d100      	bne.n	800b5e2 <memset+0xa>
 800b5e0:	4770      	bx	lr
 800b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e6:	e7f9      	b.n	800b5dc <memset+0x4>

0800b5e8 <_free_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	d043      	beq.n	800b678 <_free_r+0x90>
 800b5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f4:	1f0c      	subs	r4, r1, #4
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	bfb8      	it	lt
 800b5fa:	18e4      	addlt	r4, r4, r3
 800b5fc:	f000 f8f0 	bl	800b7e0 <__malloc_lock>
 800b600:	4a1e      	ldr	r2, [pc, #120]	; (800b67c <_free_r+0x94>)
 800b602:	6813      	ldr	r3, [r2, #0]
 800b604:	4610      	mov	r0, r2
 800b606:	b933      	cbnz	r3, 800b616 <_free_r+0x2e>
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	6014      	str	r4, [r2, #0]
 800b60c:	4628      	mov	r0, r5
 800b60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b612:	f000 b8eb 	b.w	800b7ec <__malloc_unlock>
 800b616:	42a3      	cmp	r3, r4
 800b618:	d90a      	bls.n	800b630 <_free_r+0x48>
 800b61a:	6821      	ldr	r1, [r4, #0]
 800b61c:	1862      	adds	r2, r4, r1
 800b61e:	4293      	cmp	r3, r2
 800b620:	bf01      	itttt	eq
 800b622:	681a      	ldreq	r2, [r3, #0]
 800b624:	685b      	ldreq	r3, [r3, #4]
 800b626:	1852      	addeq	r2, r2, r1
 800b628:	6022      	streq	r2, [r4, #0]
 800b62a:	6063      	str	r3, [r4, #4]
 800b62c:	6004      	str	r4, [r0, #0]
 800b62e:	e7ed      	b.n	800b60c <_free_r+0x24>
 800b630:	461a      	mov	r2, r3
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	b10b      	cbz	r3, 800b63a <_free_r+0x52>
 800b636:	42a3      	cmp	r3, r4
 800b638:	d9fa      	bls.n	800b630 <_free_r+0x48>
 800b63a:	6811      	ldr	r1, [r2, #0]
 800b63c:	1850      	adds	r0, r2, r1
 800b63e:	42a0      	cmp	r0, r4
 800b640:	d10b      	bne.n	800b65a <_free_r+0x72>
 800b642:	6820      	ldr	r0, [r4, #0]
 800b644:	4401      	add	r1, r0
 800b646:	1850      	adds	r0, r2, r1
 800b648:	4283      	cmp	r3, r0
 800b64a:	6011      	str	r1, [r2, #0]
 800b64c:	d1de      	bne.n	800b60c <_free_r+0x24>
 800b64e:	6818      	ldr	r0, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	4401      	add	r1, r0
 800b654:	6011      	str	r1, [r2, #0]
 800b656:	6053      	str	r3, [r2, #4]
 800b658:	e7d8      	b.n	800b60c <_free_r+0x24>
 800b65a:	d902      	bls.n	800b662 <_free_r+0x7a>
 800b65c:	230c      	movs	r3, #12
 800b65e:	602b      	str	r3, [r5, #0]
 800b660:	e7d4      	b.n	800b60c <_free_r+0x24>
 800b662:	6820      	ldr	r0, [r4, #0]
 800b664:	1821      	adds	r1, r4, r0
 800b666:	428b      	cmp	r3, r1
 800b668:	bf01      	itttt	eq
 800b66a:	6819      	ldreq	r1, [r3, #0]
 800b66c:	685b      	ldreq	r3, [r3, #4]
 800b66e:	1809      	addeq	r1, r1, r0
 800b670:	6021      	streq	r1, [r4, #0]
 800b672:	6063      	str	r3, [r4, #4]
 800b674:	6054      	str	r4, [r2, #4]
 800b676:	e7c9      	b.n	800b60c <_free_r+0x24>
 800b678:	bd38      	pop	{r3, r4, r5, pc}
 800b67a:	bf00      	nop
 800b67c:	20000bb8 	.word	0x20000bb8

0800b680 <_malloc_r>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	1ccd      	adds	r5, r1, #3
 800b684:	f025 0503 	bic.w	r5, r5, #3
 800b688:	3508      	adds	r5, #8
 800b68a:	2d0c      	cmp	r5, #12
 800b68c:	bf38      	it	cc
 800b68e:	250c      	movcc	r5, #12
 800b690:	2d00      	cmp	r5, #0
 800b692:	4606      	mov	r6, r0
 800b694:	db01      	blt.n	800b69a <_malloc_r+0x1a>
 800b696:	42a9      	cmp	r1, r5
 800b698:	d903      	bls.n	800b6a2 <_malloc_r+0x22>
 800b69a:	230c      	movs	r3, #12
 800b69c:	6033      	str	r3, [r6, #0]
 800b69e:	2000      	movs	r0, #0
 800b6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a2:	f000 f89d 	bl	800b7e0 <__malloc_lock>
 800b6a6:	4921      	ldr	r1, [pc, #132]	; (800b72c <_malloc_r+0xac>)
 800b6a8:	680a      	ldr	r2, [r1, #0]
 800b6aa:	4614      	mov	r4, r2
 800b6ac:	b99c      	cbnz	r4, 800b6d6 <_malloc_r+0x56>
 800b6ae:	4f20      	ldr	r7, [pc, #128]	; (800b730 <_malloc_r+0xb0>)
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	b923      	cbnz	r3, 800b6be <_malloc_r+0x3e>
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f000 f83c 	bl	800b734 <_sbrk_r>
 800b6bc:	6038      	str	r0, [r7, #0]
 800b6be:	4629      	mov	r1, r5
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f000 f837 	bl	800b734 <_sbrk_r>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d123      	bne.n	800b712 <_malloc_r+0x92>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	6033      	str	r3, [r6, #0]
 800b6d0:	f000 f88c 	bl	800b7ec <__malloc_unlock>
 800b6d4:	e7e3      	b.n	800b69e <_malloc_r+0x1e>
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	1b5b      	subs	r3, r3, r5
 800b6da:	d417      	bmi.n	800b70c <_malloc_r+0x8c>
 800b6dc:	2b0b      	cmp	r3, #11
 800b6de:	d903      	bls.n	800b6e8 <_malloc_r+0x68>
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	441c      	add	r4, r3
 800b6e4:	6025      	str	r5, [r4, #0]
 800b6e6:	e004      	b.n	800b6f2 <_malloc_r+0x72>
 800b6e8:	6863      	ldr	r3, [r4, #4]
 800b6ea:	42a2      	cmp	r2, r4
 800b6ec:	bf0c      	ite	eq
 800b6ee:	600b      	streq	r3, [r1, #0]
 800b6f0:	6053      	strne	r3, [r2, #4]
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f000 f87a 	bl	800b7ec <__malloc_unlock>
 800b6f8:	f104 000b 	add.w	r0, r4, #11
 800b6fc:	1d23      	adds	r3, r4, #4
 800b6fe:	f020 0007 	bic.w	r0, r0, #7
 800b702:	1ac2      	subs	r2, r0, r3
 800b704:	d0cc      	beq.n	800b6a0 <_malloc_r+0x20>
 800b706:	1a1b      	subs	r3, r3, r0
 800b708:	50a3      	str	r3, [r4, r2]
 800b70a:	e7c9      	b.n	800b6a0 <_malloc_r+0x20>
 800b70c:	4622      	mov	r2, r4
 800b70e:	6864      	ldr	r4, [r4, #4]
 800b710:	e7cc      	b.n	800b6ac <_malloc_r+0x2c>
 800b712:	1cc4      	adds	r4, r0, #3
 800b714:	f024 0403 	bic.w	r4, r4, #3
 800b718:	42a0      	cmp	r0, r4
 800b71a:	d0e3      	beq.n	800b6e4 <_malloc_r+0x64>
 800b71c:	1a21      	subs	r1, r4, r0
 800b71e:	4630      	mov	r0, r6
 800b720:	f000 f808 	bl	800b734 <_sbrk_r>
 800b724:	3001      	adds	r0, #1
 800b726:	d1dd      	bne.n	800b6e4 <_malloc_r+0x64>
 800b728:	e7cf      	b.n	800b6ca <_malloc_r+0x4a>
 800b72a:	bf00      	nop
 800b72c:	20000bb8 	.word	0x20000bb8
 800b730:	20000bbc 	.word	0x20000bbc

0800b734 <_sbrk_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	2300      	movs	r3, #0
 800b738:	4d05      	ldr	r5, [pc, #20]	; (800b750 <_sbrk_r+0x1c>)
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	f7f7 fc80 	bl	8003044 <_sbrk>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_sbrk_r+0x1a>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_sbrk_r+0x1a>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	20000bd4 	.word	0x20000bd4

0800b754 <_raise_r>:
 800b754:	291f      	cmp	r1, #31
 800b756:	b538      	push	{r3, r4, r5, lr}
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	d904      	bls.n	800b768 <_raise_r+0x14>
 800b75e:	2316      	movs	r3, #22
 800b760:	6003      	str	r3, [r0, #0]
 800b762:	f04f 30ff 	mov.w	r0, #4294967295
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b76a:	b112      	cbz	r2, 800b772 <_raise_r+0x1e>
 800b76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b770:	b94b      	cbnz	r3, 800b786 <_raise_r+0x32>
 800b772:	4620      	mov	r0, r4
 800b774:	f000 f830 	bl	800b7d8 <_getpid_r>
 800b778:	462a      	mov	r2, r5
 800b77a:	4601      	mov	r1, r0
 800b77c:	4620      	mov	r0, r4
 800b77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b782:	f000 b817 	b.w	800b7b4 <_kill_r>
 800b786:	2b01      	cmp	r3, #1
 800b788:	d00a      	beq.n	800b7a0 <_raise_r+0x4c>
 800b78a:	1c59      	adds	r1, r3, #1
 800b78c:	d103      	bne.n	800b796 <_raise_r+0x42>
 800b78e:	2316      	movs	r3, #22
 800b790:	6003      	str	r3, [r0, #0]
 800b792:	2001      	movs	r0, #1
 800b794:	e7e7      	b.n	800b766 <_raise_r+0x12>
 800b796:	2400      	movs	r4, #0
 800b798:	4628      	mov	r0, r5
 800b79a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b79e:	4798      	blx	r3
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e7e0      	b.n	800b766 <_raise_r+0x12>

0800b7a4 <raise>:
 800b7a4:	4b02      	ldr	r3, [pc, #8]	; (800b7b0 <raise+0xc>)
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	6818      	ldr	r0, [r3, #0]
 800b7aa:	f7ff bfd3 	b.w	800b754 <_raise_r>
 800b7ae:	bf00      	nop
 800b7b0:	20000010 	.word	0x20000010

0800b7b4 <_kill_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4d06      	ldr	r5, [pc, #24]	; (800b7d4 <_kill_r+0x20>)
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4608      	mov	r0, r1
 800b7be:	4611      	mov	r1, r2
 800b7c0:	602b      	str	r3, [r5, #0]
 800b7c2:	f7f7 fc24 	bl	800300e <_kill>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	d102      	bne.n	800b7d0 <_kill_r+0x1c>
 800b7ca:	682b      	ldr	r3, [r5, #0]
 800b7cc:	b103      	cbz	r3, 800b7d0 <_kill_r+0x1c>
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	bf00      	nop
 800b7d4:	20000bd4 	.word	0x20000bd4

0800b7d8 <_getpid_r>:
 800b7d8:	f7f7 bc12 	b.w	8003000 <_getpid>

0800b7dc <__retarget_lock_acquire_recursive>:
 800b7dc:	4770      	bx	lr

0800b7de <__retarget_lock_release_recursive>:
 800b7de:	4770      	bx	lr

0800b7e0 <__malloc_lock>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	; (800b7e8 <__malloc_lock+0x8>)
 800b7e2:	f7ff bffb 	b.w	800b7dc <__retarget_lock_acquire_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	20000bcc 	.word	0x20000bcc

0800b7ec <__malloc_unlock>:
 800b7ec:	4801      	ldr	r0, [pc, #4]	; (800b7f4 <__malloc_unlock+0x8>)
 800b7ee:	f7ff bff6 	b.w	800b7de <__retarget_lock_release_recursive>
 800b7f2:	bf00      	nop
 800b7f4:	20000bcc 	.word	0x20000bcc

0800b7f8 <_init>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	bf00      	nop
 800b7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fe:	bc08      	pop	{r3}
 800b800:	469e      	mov	lr, r3
 800b802:	4770      	bx	lr

0800b804 <_fini>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	bf00      	nop
 800b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80a:	bc08      	pop	{r3}
 800b80c:	469e      	mov	lr, r3
 800b80e:	4770      	bx	lr
