
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800ea08  0800ea08  0001ea08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eee0  0800eee0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800eee0  0800eee0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eee0  0800eee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eee0  0800eee0  0001eee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800eee8  0800eee8  0001eee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800eef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d10  20000078  0800ef64  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  0800ef64  00020d88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024396  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434c  00000000  00000000  00044433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00048780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  00049bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d275  00000000  00000000  0004af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001725b  00000000  00000000  000681a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096932  00000000  00000000  0007f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006548  00000000  00000000  00115d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e9ec 	.word	0x0800e9ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800e9ec 	.word	0x0800e9ec

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001186:	2301      	movs	r3, #1
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	22d0      	movs	r2, #208	; 0xd0
 8001196:	21ef      	movs	r1, #239	; 0xef
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <read_chip_id+0x3c>)
 800119a:	f004 f843 	bl	8005224 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	2b55      	cmp	r3, #85	; 0x55
 80011a2:	d001      	beq.n	80011a8 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000009c 	.word	0x2000009c

080011b8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af04      	add	r7, sp, #16
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d81a      	bhi.n	8001204 <set_oss+0x4c>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <set_oss+0x1c>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	080011fd 	.word	0x080011fd
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2205      	movs	r2, #5
 80011e8:	705a      	strb	r2, [r3, #1]
			break;
 80011ea:	e00f      	b.n	800120c <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2208      	movs	r2, #8
 80011f0:	705a      	strb	r2, [r3, #1]
			break;
 80011f2:	e00b      	b.n	800120c <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	220e      	movs	r2, #14
 80011f8:	705a      	strb	r2, [r3, #1]
			break;
 80011fa:	e007      	b.n	800120c <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	221a      	movs	r2, #26
 8001200:	705a      	strb	r2, [r3, #1]
			break;
 8001202:	e003      	b.n	800120c <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2208      	movs	r2, #8
 8001208:	705a      	strb	r2, [r3, #1]
			break;
 800120a:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	019b      	lsls	r3, r3, #6
 8001216:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800121c:	2301      	movs	r3, #1
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2302      	movs	r3, #2
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	22f4      	movs	r2, #244	; 0xf4
 800122e:	21ee      	movs	r1, #238	; 0xee
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <set_oss+0x88>)
 8001232:	f003 fefd 	bl	8005030 <HAL_I2C_Mem_Write>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000009c 	.word	0x2000009c

08001244 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001272:	2301      	movs	r3, #1
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2316      	movs	r3, #22
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	22aa      	movs	r2, #170	; 0xaa
 8001284:	21ef      	movs	r1, #239	; 0xef
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <read_calib_data+0xe4>)
 8001288:	f003 ffcc 	bl	8005224 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001292:	e03e      	b.n	8001312 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800129e:	4413      	add	r3, r2
 80012a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b219      	sxth	r1, r3
 80012a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4403      	add	r3, r0
 80012c2:	430a      	orrs	r2, r1
 80012c4:	b212      	sxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80012c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	440b      	add	r3, r1
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 8001302:	2302      	movs	r3, #2
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800130c:	3301      	adds	r3, #1
 800130e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001316:	2b0b      	cmp	r3, #11
 8001318:	d9bc      	bls.n	8001294 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800131e:	4618      	mov	r0, r3
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000009c 	.word	0x2000009c

0800132c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00d fa46 	bl	800e7cc <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001340:	687c      	ldr	r4, [r7, #4]
 8001342:	f7ff ff19 	bl	8001178 <read_chip_id>
 8001346:	4603      	mov	r3, r0
 8001348:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	687c      	ldr	r4, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff77 	bl	8001244 <read_calib_data>
 8001356:	4603      	mov	r3, r0
 8001358:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3338      	adds	r3, #56	; 0x38
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff28 	bl	80011b8 <set_oss>
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 8001376:	232e      	movs	r3, #46	; 0x2e
 8001378:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800137a:	2301      	movs	r3, #1
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	22f4      	movs	r2, #244	; 0xf4
 800138a:	21ee      	movs	r1, #238	; 0xee
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <write_ut+0x2c>)
 800138e:	f003 fe4f 	bl	8005030 <HAL_I2C_Mem_Write>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000009c 	.word	0x2000009c

080013a0 <read_ut>:

int32_t read_ut (void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 80013a6:	2301      	movs	r3, #1
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2302      	movs	r3, #2
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	22f6      	movs	r2, #246	; 0xf6
 80013b6:	21ef      	movs	r1, #239	; 0xef
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <read_ut+0x30>)
 80013ba:	f003 ff33 	bl	8005224 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	797a      	ldrb	r2, [r7, #5]
 80013c4:	4313      	orrs	r3, r2
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000009c 	.word	0x2000009c

080013d4 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe7c 	bl	80010ec <__aeabi_f2iz>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	895b      	ldrh	r3, [r3, #10]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	8912      	ldrh	r2, [r2, #8]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	13db      	asrs	r3, r3, #15
 8001406:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800140e:	02da      	lsls	r2, r3, #11
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001416:	4619      	mov	r1, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	440b      	add	r3, r1
 800141c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001420:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	441a      	add	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	3308      	adds	r3, #8
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc29 	bl	8000c8c <__aeabi_i2f>
 800143a:	4603      	mov	r3, r0
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <get_temp+0xa4>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc78 	bl	8000d34 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <get_temp+0xa8>)
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe1a 	bl	8001084 <__aeabi_fcmple>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <get_temp+0x90>
 8001456:	490a      	ldr	r1, [pc, #40]	; (8001480 <get_temp+0xac>)
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff fe1d 	bl	8001098 <__aeabi_fcmpge>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	3dcccccd 	.word	0x3dcccccd
 800147c:	c2200000 	.word	0xc2200000
 8001480:	42aa0000 	.word	0x42aa0000

08001484 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <write_up+0x38>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	803b      	strh	r3, [r7, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8001498:	2334      	movs	r3, #52	; 0x34
 800149a:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800149c:	2301      	movs	r3, #1
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	463b      	mov	r3, r7
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	22f4      	movs	r2, #244	; 0xf4
 80014ac:	21ee      	movs	r1, #238	; 0xee
 80014ae:	4804      	ldr	r0, [pc, #16]	; (80014c0 <write_up+0x3c>)
 80014b0:	f003 fdbe 	bl	8005030 <HAL_I2C_Mem_Write>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800ea08 	.word	0x0800ea08
 80014c0:	2000009c 	.word	0x2000009c

080014c4 <read_up>:

int32_t read_up (oss_t oss)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <read_up+0x54>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	813b      	strh	r3, [r7, #8]
 80014d2:	2300      	movs	r3, #0
 80014d4:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80014da:	2301      	movs	r3, #1
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2303      	movs	r3, #3
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	22f6      	movs	r2, #246	; 0xf6
 80014ec:	21ef      	movs	r1, #239	; 0xef
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <read_up+0x58>)
 80014f0:	f003 fe98 	bl	8005224 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80014f4:	7a3b      	ldrb	r3, [r7, #8]
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	7a7b      	ldrb	r3, [r7, #9]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4413      	add	r3, r2
 80014fe:	7aba      	ldrb	r2, [r7, #10]
 8001500:	441a      	add	r2, r3
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	f1c3 0308 	rsb	r3, r3, #8
 8001508:	fa42 f303 	asr.w	r3, r2, r3
 800150c:	60fb      	str	r3, [r7, #12]
	return up;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800ea08 	.word	0x0800ea08
 800151c:	2000009c 	.word	0x2000009c

08001520 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001520:	b084      	sub	sp, #16
 8001522:	b480      	push	{r7}
 8001524:	b089      	sub	sp, #36	; 0x24
 8001526:	af00      	add	r7, sp, #0
 8001528:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800152c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800153e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001540:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fb03 f303 	mul.w	r3, r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	da01      	bge.n	8001554 <get_pressure+0x34>
 8001550:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001554:	131b      	asrs	r3, r3, #12
 8001556:	fb03 f302 	mul.w	r3, r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	da01      	bge.n	8001562 <get_pressure+0x42>
 800155e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001562:	12db      	asrs	r3, r3, #11
 8001564:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001566:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800156a:	461a      	mov	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fb03 f302 	mul.w	r3, r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	da01      	bge.n	800157a <get_pressure+0x5a>
 8001576:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800157a:	12db      	asrs	r3, r3, #11
 800157c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001586:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800158a:	009a      	lsls	r2, r3, #2
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001594:	4093      	lsls	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	da00      	bge.n	800159e <get_pressure+0x7e>
 800159c:	3303      	adds	r3, #3
 800159e:	109b      	asrs	r3, r3, #2
 80015a0:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 80015a2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015a6:	461a      	mov	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fb03 f302 	mul.w	r3, r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da02      	bge.n	80015b8 <get_pressure+0x98>
 80015b2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80015b6:	331f      	adds	r3, #31
 80015b8:	135b      	asrs	r3, r3, #13
 80015ba:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80015bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80015c0:	461a      	mov	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fb03 f303 	mul.w	r3, r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da01      	bge.n	80015d0 <get_pressure+0xb0>
 80015cc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015d0:	131b      	asrs	r3, r3, #12
 80015d2:	fb03 f302 	mul.w	r3, r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da02      	bge.n	80015e0 <get_pressure+0xc0>
 80015da:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015de:	33ff      	adds	r3, #255	; 0xff
 80015e0:	141b      	asrs	r3, r3, #16
 80015e2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	3302      	adds	r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <get_pressure+0xd2>
 80015f0:	3303      	adds	r3, #3
 80015f2:	109b      	asrs	r3, r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80015f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001600:	fb03 f302 	mul.w	r3, r3, r2
 8001604:	0bdb      	lsrs	r3, r3, #15
 8001606:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001614:	4611      	mov	r1, r2
 8001616:	f24c 3250 	movw	r2, #50000	; 0xc350
 800161a:	410a      	asrs	r2, r1
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db06      	blt.n	8001636 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	005a      	lsls	r2, r3, #1
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	e005      	b.n	8001642 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da00      	bge.n	800164a <get_pressure+0x12a>
 8001648:	33ff      	adds	r3, #255	; 0xff
 800164a:	121b      	asrs	r3, r3, #8
 800164c:	461a      	mov	r2, r3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da00      	bge.n	8001656 <get_pressure+0x136>
 8001654:	33ff      	adds	r3, #255	; 0xff
 8001656:	121b      	asrs	r3, r3, #8
 8001658:	fb03 f302 	mul.w	r3, r3, r2
 800165c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f640 32de 	movw	r2, #3038	; 0xbde
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	da02      	bge.n	8001672 <get_pressure+0x152>
 800166c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001670:	33ff      	adds	r3, #255	; 0xff
 8001672:	141b      	asrs	r3, r3, #16
 8001674:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <get_pressure+0x194>)
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	da02      	bge.n	8001688 <get_pressure+0x168>
 8001682:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001686:	33ff      	adds	r3, #255	; 0xff
 8001688:	141b      	asrs	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001696:	2b00      	cmp	r3, #0
 8001698:	da00      	bge.n	800169c <get_pressure+0x17c>
 800169a:	330f      	adds	r3, #15
 800169c:	111b      	asrs	r3, r3, #4
 800169e:	461a      	mov	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]

	return p;
 80016a6:	69fb      	ldr	r3, [r7, #28]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3724      	adds	r7, #36	; 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	b004      	add	sp, #16
 80016b2:	4770      	bx	lr
 80016b4:	ffffe343 	.word	0xffffe343

080016b8 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fade 	bl	8000c8c <__aeabi_i2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4923      	ldr	r1, [pc, #140]	; (8001760 <get_altitude+0xa8>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbe1 	bl	8000e9c <__aeabi_fdiv>
 80016da:	4603      	mov	r3, r0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe9b 	bl	8000418 <__aeabi_f2d>
 80016e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001750 <get_altitude+0x98>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f00b f8f8 	bl	800c8dc <pow>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	f04f 0000 	mov.w	r0, #0
 80016f4:	491b      	ldr	r1, [pc, #108]	; (8001764 <get_altitude+0xac>)
 80016f6:	f7fe fd2f 	bl	8000158 <__aeabi_dsub>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	a315      	add	r3, pc, #84	; (adr r3, 8001758 <get_altitude+0xa0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe fede 	bl	80004c8 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9b0 	bl	8000a78 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800171c:	4912      	ldr	r1, [pc, #72]	; (8001768 <get_altitude+0xb0>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff fcb0 	bl	8001084 <__aeabi_fcmple>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <get_altitude+0x80>
 800172a:	4910      	ldr	r1, [pc, #64]	; (800176c <get_altitude+0xb4>)
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fcb3 	bl	8001098 <__aeabi_fcmpge>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2205      	movs	r2, #5
 800173c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	ccd9456c 	.word	0xccd9456c
 8001754:	3fc85b95 	.word	0x3fc85b95
 8001758:	00000000 	.word	0x00000000
 800175c:	40e5a540 	.word	0x40e5a540
 8001760:	47c5e680 	.word	0x47c5e680
 8001764:	3ff00000 	.word	0x3ff00000
 8001768:	c3fa0000 	.word	0xc3fa0000
 800176c:	460ca000 	.word	0x460ca000

08001770 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return b_counter;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <get_b_counter+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000094 	.word	0x20000094

08001784 <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

	b_counter++;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <set_b_counter+0x30>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <set_b_counter+0x30>)
 8001794:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <set_b_counter+0x30>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d202      	bcs.n	80017a8 <set_b_counter+0x24>
		b_counter = 0;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <set_b_counter+0x30>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	}
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000094 	.word	0x20000094

080017b8 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 80017be:	2351      	movs	r3, #81	; 0x51
 80017c0:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 80017c2:	1dba      	adds	r2, r7, #6
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	21e0      	movs	r1, #224	; 0xe0
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <request_range+0x2c>)
 80017ce:	f003 f8d1 	bl	8004974 <HAL_I2C_Master_Transmit>
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <request_range+0x30>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000009c 	.word	0x2000009c
 80017e8:	20000000 	.word	0x20000000

080017ec <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <getRange+0x34>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			write = 1;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <getRange+0x38>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 80017fe:	1d3a      	adds	r2, r7, #4
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2302      	movs	r3, #2
 8001806:	21e1      	movs	r1, #225	; 0xe1
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <getRange+0x3c>)
 800180a:	f003 f9b1 	bl	8004b70 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	797a      	ldrb	r2, [r7, #5]
 8001814:	4313      	orrs	r3, r2



	//return -1;

}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000d70 	.word	0x20000d70
 8001824:	20000000 	.word	0x20000000
 8001828:	2000009c 	.word	0x2000009c

0800182c <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <set_ucounter+0x30>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <set_ucounter+0x30>)
 800183c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <set_ucounter+0x30>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4293      	cmp	r3, r2
 8001848:	d202      	bcs.n	8001850 <set_ucounter+0x24>
		u_counter = 0;
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <set_ucounter+0x30>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
	}
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000098 	.word	0x20000098

08001860 <get_ucounter>:

int get_ucounter(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return u_counter;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <get_ucounter+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000098 	.word	0x20000098

08001874 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f00a ffed 	bl	800c874 <cosf>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f001 fce6 	bl	800327e <_ZNSaIfED1Ev>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fcc9 	bl	800325e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ffeb 	bl	80018bc <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f4:	f002 f9c2 	bl	8003c7c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 80018f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018fc:	f002 fa20 	bl	8003d40 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001900:	f000 f8a2 	bl	8001a48 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001904:	f000 fbae 	bl	8002064 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001908:	f000 fb8e 	bl	8002028 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 800190c:	f000 f8ec 	bl	8001ae8 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8001910:	f000 f9e8 	bl	8001ce4 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001914:	f000 f91c 	bl	8001b50 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001918:	f000 fb56 	bl	8001fc8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800191c:	f000 fa3e 	bl	8001d9c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001920:	f000 fac6 	bl	8001eb0 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8001924:	f000 fb22 	bl	8001f6c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8001928:	2209      	movs	r2, #9
 800192a:	4938      	ldr	r1, [pc, #224]	; (8001a0c <main+0x11c>)
 800192c:	4838      	ldr	r0, [pc, #224]	; (8001a10 <main+0x120>)
 800192e:	f006 fc73 	bl	8008218 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8001932:	f000 fc1b 	bl	800216c <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001936:	4837      	ldr	r0, [pc, #220]	; (8001a14 <main+0x124>)
 8001938:	f7ff fcf8 	bl	800132c <bmp_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 800193c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001940:	f002 f9fe 	bl	8003d40 <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001944:	2043      	movs	r0, #67	; 0x43
 8001946:	f000 fedd 	bl	8002704 <_Z7GyroErrh>
 800194a:	4603      	mov	r3, r0
 800194c:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <main+0x128>)
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	2045      	movs	r0, #69	; 0x45
 8001952:	f000 fed7 	bl	8002704 <_Z7GyroErrh>
 8001956:	4603      	mov	r3, r0
 8001958:	4a30      	ldr	r2, [pc, #192]	; (8001a1c <main+0x12c>)
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	2047      	movs	r0, #71	; 0x47
 800195e:	f000 fed1 	bl	8002704 <_Z7GyroErrh>
 8001962:	4603      	mov	r3, r0
 8001964:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <main+0x130>)
 8001966:	6013      	str	r3, [r2, #0]
  AccXh = GyroErr(ACC_X_ADDR); AccYh = GyroErr(ACC_Y_ADDR); AccZh = GyroErr(ACC_Z_ADDR);
 8001968:	203b      	movs	r0, #59	; 0x3b
 800196a:	f000 fecb 	bl	8002704 <_Z7GyroErrh>
 800196e:	4603      	mov	r3, r0
 8001970:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <main+0x134>)
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	203d      	movs	r0, #61	; 0x3d
 8001976:	f000 fec5 	bl	8002704 <_Z7GyroErrh>
 800197a:	4603      	mov	r3, r0
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <main+0x138>)
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	203f      	movs	r0, #63	; 0x3f
 8001982:	f000 febf 	bl	8002704 <_Z7GyroErrh>
 8001986:	4603      	mov	r3, r0
 8001988:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <main+0x13c>)
 800198a:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku
  accX = GyroOku(ACC_X_ADDR);
 800198c:	203b      	movs	r0, #59	; 0x3b
 800198e:	f000 fe3f 	bl	8002610 <_Z7GyroOkuh>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f979 	bl	8000c8c <__aeabi_i2f>
 800199a:	4603      	mov	r3, r0
 800199c:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <main+0x140>)
 800199e:	6013      	str	r3, [r2, #0]
  accY = GyroOku(ACC_Y_ADDR);
 80019a0:	203d      	movs	r0, #61	; 0x3d
 80019a2:	f000 fe35 	bl	8002610 <_Z7GyroOkuh>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f96f 	bl	8000c8c <__aeabi_i2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <main+0x144>)
 80019b2:	6013      	str	r3, [r2, #0]
  accZ = GyroOku(ACC_Z_ADDR);
 80019b4:	203f      	movs	r0, #63	; 0x3f
 80019b6:	f000 fe2b 	bl	8002610 <_Z7GyroOkuh>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f965 	bl	8000c8c <__aeabi_i2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <main+0x148>)
 80019c6:	6013      	str	r3, [r2, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
  */

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 80019c8:	481c      	ldr	r0, [pc, #112]	; (8001a3c <main+0x14c>)
 80019ca:	f004 fff1 	bl	80069b0 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <main+0x150>)
 80019d0:	f004 ffa4 	bl	800691c <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019d4:	2100      	movs	r1, #0
 80019d6:	481b      	ldr	r0, [pc, #108]	; (8001a44 <main+0x154>)
 80019d8:	f005 f88c 	bl	8006af4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80019dc:	2104      	movs	r1, #4
 80019de:	4819      	ldr	r0, [pc, #100]	; (8001a44 <main+0x154>)
 80019e0:	f006 f9b8 	bl	8007d54 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80019e4:	2108      	movs	r1, #8
 80019e6:	4817      	ldr	r0, [pc, #92]	; (8001a44 <main+0x154>)
 80019e8:	f006 f9b4 	bl	8007d54 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019ec:	210c      	movs	r1, #12
 80019ee:	4815      	ldr	r0, [pc, #84]	; (8001a44 <main+0x154>)
 80019f0:	f005 f880 	bl	8006af4 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80019f4:	2108      	movs	r1, #8
 80019f6:	4812      	ldr	r0, [pc, #72]	; (8001a40 <main+0x150>)
 80019f8:	f005 f976 	bl	8006ce8 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SendTelem();
 80019fc:	f000 fdde 	bl	80025bc <_Z9SendTelemv>
	  Check_Arm();
 8001a00:	f000 fc1a 	bl	8002238 <_Z9Check_Armv>
	  Check_Disarm();
 8001a04:	f000 fc86 	bl	8002314 <_Z12Check_Disarmv>
	  SendTelem();
 8001a08:	e7f8      	b.n	80019fc <main+0x10c>
 8001a0a:	bf00      	nop
 8001a0c:	20000d48 	.word	0x20000d48
 8001a10:	20000210 	.word	0x20000210
 8001a14:	20000d0c 	.word	0x20000d0c
 8001a18:	20000304 	.word	0x20000304
 8001a1c:	20000308 	.word	0x20000308
 8001a20:	2000030c 	.word	0x2000030c
 8001a24:	20000310 	.word	0x20000310
 8001a28:	20000314 	.word	0x20000314
 8001a2c:	20000318 	.word	0x20000318
 8001a30:	200002e0 	.word	0x200002e0
 8001a34:	200002e4 	.word	0x200002e4
 8001a38:	200002e8 	.word	0x200002e8
 8001a3c:	20000138 	.word	0x20000138
 8001a40:	20000180 	.word	0x20000180
 8001a44:	200000f0 	.word	0x200000f0

08001a48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b090      	sub	sp, #64	; 0x40
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 0318 	add.w	r3, r7, #24
 8001a52:	2228      	movs	r2, #40	; 0x28
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00c feb8 	bl	800e7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fad9 	bl	8006048 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001aa6:	f001 fbd5 	bl	8003254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aaa:	230f      	movs	r3, #15
 8001aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fd3f 	bl	8006548 <HAL_RCC_ClockConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001ada:	f001 fbbb 	bl	8003254 <Error_Handler>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3740      	adds	r7, #64	; 0x40
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <_ZL12MX_I2C1_Initv+0x60>)
 8001af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001af4:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <_ZL12MX_I2C1_Initv+0x64>)
 8001af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b26:	f002 fde1 	bl	80046ec <HAL_I2C_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001b3a:	f001 fb8b 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000009c 	.word	0x2000009c
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	00061a80 	.word	0x00061a80

08001b50 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b092      	sub	sp, #72	; 0x48
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	615a      	str	r2, [r3, #20]
 8001b72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2220      	movs	r2, #32
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00c fe26 	bl	800e7cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b80:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b82:	4a57      	ldr	r2, [pc, #348]	; (8001ce0 <_ZL12MX_TIM1_Initv+0x190>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001b86:	4b55      	ldr	r3, [pc, #340]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b88:	2247      	movs	r2, #71	; 0x47
 8001b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001b92:	4b52      	ldr	r3, [pc, #328]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b94:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9a:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bac:	484b      	ldr	r0, [pc, #300]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001bae:	f004 ff51 	bl	8006a54 <HAL_TIM_PWM_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001bc2:	f001 fb47 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4841      	ldr	r0, [pc, #260]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001bd6:	f006 f95b 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001bea:	f001 fb33 	bl	8003254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bee:	2360      	movs	r3, #96	; 0x60
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	4832      	ldr	r0, [pc, #200]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001c14:	f005 fb0a 	bl	800722c <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001c28:	f001 fb14 	bl	8003254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	2204      	movs	r2, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4829      	ldr	r0, [pc, #164]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001c36:	f005 faf9 	bl	800722c <HAL_TIM_PWM_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001c4a:	f001 fb03 	bl	8003254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	2208      	movs	r2, #8
 8001c54:	4619      	mov	r1, r3
 8001c56:	4821      	ldr	r0, [pc, #132]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001c58:	f005 fae8 	bl	800722c <HAL_TIM_PWM_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001c6c:	f001 faf2 	bl	8003254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	220c      	movs	r2, #12
 8001c76:	4619      	mov	r1, r3
 8001c78:	4818      	ldr	r0, [pc, #96]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001c7a:	f005 fad7 	bl	800722c <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001c8e:	f001 fae1 	bl	8003254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001caa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001cb6:	f006 f949 	bl	8007f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001cca:	f001 fac3 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <_ZL12MX_TIM1_Initv+0x18c>)
 8001cd0:	f001 fe0c 	bl	80038ec <HAL_TIM_MspPostInit>

}
 8001cd4:	bf00      	nop
 8001cd6:	3748      	adds	r7, #72	; 0x48
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200000f0 	.word	0x200000f0
 8001ce0:	40012c00 	.word	0x40012c00

08001ce4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d0a:	2247      	movs	r2, #71	; 0x47
 8001d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d16:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d28:	481b      	ldr	r0, [pc, #108]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d2a:	f004 fda7 	bl	800687c <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001d3e:	f001 fa89 	bl	8003254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4812      	ldr	r0, [pc, #72]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d50:	f005 fb2a 	bl	80073a8 <HAL_TIM_ConfigClockSource>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001d64:	f001 fa76 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	4619      	mov	r1, r3
 8001d74:	4808      	ldr	r0, [pc, #32]	; (8001d98 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d76:	f006 f88b 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001d8a:	f001 fa63 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000138 	.word	0x20000138

08001d9c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dba:	463b      	mov	r3, r7
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <_ZL12MX_TIM3_Initv+0x110>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001dce:	2247      	movs	r2, #71	; 0x47
 8001dd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dd8:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dec:	482e      	ldr	r0, [pc, #184]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001dee:	f004 fd45 	bl	800687c <HAL_TIM_Base_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001e02:	f001 fa27 	bl	8003254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	4619      	mov	r1, r3
 8001e12:	4825      	ldr	r0, [pc, #148]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001e14:	f005 fac8 	bl	80073a8 <HAL_TIM_ConfigClockSource>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001e28:	f001 fa14 	bl	8003254 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001e2c:	481e      	ldr	r0, [pc, #120]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001e2e:	f004 ff03 	bl	8006c38 <HAL_TIM_IC_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001e42:	f001 fa07 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001e56:	f006 f81b 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8001e6a:	f001 f9f3 	bl	8003254 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2301      	movs	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2208      	movs	r2, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <_ZL12MX_TIM3_Initv+0x10c>)
 8001e86:	f005 f93d 	bl	8007104 <HAL_TIM_IC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8001e9a:	f001 f9db 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000180 	.word	0x20000180
 8001eac:	40000400 	.word	0x40000400

08001eb0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <_ZL12MX_TIM4_Initv+0xb8>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ed4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001ed8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ef4:	481b      	ldr	r0, [pc, #108]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ef6:	f004 fcc1 	bl	800687c <HAL_TIM_Base_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001f0a:	f001 f9a3 	bl	8003254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f1c:	f005 fa44 	bl	80073a8 <HAL_TIM_ConfigClockSource>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8001f30:	f001 f990 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f42:	f005 ffa5 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8001f56:	f001 f97d 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200001c8 	.word	0x200001c8
 8001f68:	40000800 	.word	0x40000800

08001f6c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fa2:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fa4:	f006 f859 	bl	800805a <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001fb8:	f001 f94c 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000210 	.word	0x20000210
 8001fc4:	40013800 	.word	0x40013800

08001fc8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fd4:	4a13      	ldr	r2, [pc, #76]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8001fd6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fec:	220c      	movs	r2, #12
 8001fee:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ffc:	4807      	ldr	r0, [pc, #28]	; (800201c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ffe:	f006 f82c 	bl	800805a <HAL_UART_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8002012:	f001 f91f 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000250 	.word	0x20000250
 8002020:	40004400 	.word	0x40004400
 8002024:	000f4240 	.word	0x000f4240

08002028 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <_ZL11MX_DMA_Initv+0x38>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <_ZL11MX_DMA_Initv+0x38>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6153      	str	r3, [r2, #20]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <_ZL11MX_DMA_Initv+0x38>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	200f      	movs	r0, #15
 800204c:	f001 ff73 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002050:	200f      	movs	r0, #15
 8002052:	f001 ff8c 	bl	8003f6e <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a37      	ldr	r2, [pc, #220]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a31      	ldr	r2, [pc, #196]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 8002096:	f043 0320 	orr.w	r3, r3, #32
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <_ZL12MX_GPIO_Initv+0xf8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020de:	4820      	ldr	r0, [pc, #128]	; (8002160 <_ZL12MX_GPIO_Initv+0xfc>)
 80020e0:	f002 fad2 	bl	8004688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2102      	movs	r1, #2
 80020e8:	481e      	ldr	r0, [pc, #120]	; (8002164 <_ZL12MX_GPIO_Initv+0x100>)
 80020ea:	f002 facd 	bl	8004688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f4:	481c      	ldr	r0, [pc, #112]	; (8002168 <_ZL12MX_GPIO_Initv+0x104>)
 80020f6:	f002 fac7 	bl	8004688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80020fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002100:	2301      	movs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2302      	movs	r3, #2
 800210a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4619      	mov	r1, r3
 8002112:	4813      	ldr	r0, [pc, #76]	; (8002160 <_ZL12MX_GPIO_Initv+0xfc>)
 8002114:	f002 f934 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002118:	2302      	movs	r3, #2
 800211a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2302      	movs	r3, #2
 8002126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <_ZL12MX_GPIO_Initv+0x100>)
 8002130:	f002 f926 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2302      	movs	r3, #2
 8002144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	4619      	mov	r1, r3
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <_ZL12MX_GPIO_Initv+0x104>)
 800214e:	f002 f917 	bl	8004380 <HAL_GPIO_Init>

}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	40011000 	.word	0x40011000
 8002164:	40010c00 	.word	0x40010c00
 8002168:	40010800 	.word	0x40010800

0800216c <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8002172:	2300      	movs	r3, #0
 8002174:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8002176:	2305      	movs	r3, #5
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	2301      	movs	r3, #1
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2301      	movs	r3, #1
 8002184:	226b      	movs	r2, #107	; 0x6b
 8002186:	21d0      	movs	r1, #208	; 0xd0
 8002188:	4811      	ldr	r0, [pc, #68]	; (80021d0 <_Z14MPU6050_Baslatv+0x64>)
 800218a:	f002 ff51 	bl	8005030 <HAL_I2C_Mem_Write>
	config = 0x08;
 800218e:	2308      	movs	r3, #8
 8002190:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8002192:	2305      	movs	r3, #5
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	2301      	movs	r3, #1
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	221b      	movs	r2, #27
 80021a2:	21d0      	movs	r1, #208	; 0xd0
 80021a4:	480a      	ldr	r0, [pc, #40]	; (80021d0 <_Z14MPU6050_Baslatv+0x64>)
 80021a6:	f002 ff43 	bl	8005030 <HAL_I2C_Mem_Write>
	config = 0x10;
 80021aa:	2310      	movs	r3, #16
 80021ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80021ae:	2305      	movs	r3, #5
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2301      	movs	r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	221c      	movs	r2, #28
 80021be:	21d0      	movs	r1, #208	; 0xd0
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_Z14MPU6050_Baslatv+0x64>)
 80021c2:	f002 ff35 	bl	8005030 <HAL_I2C_Mem_Write>
	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000009c 	.word	0x2000009c

080021d4 <_Z9checkModei>:

void checkMode(int mod_ch) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80021e2:	da0d      	bge.n	8002200 <_Z9checkModei+0x2c>

		  controller.mod = STABILIZE;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <_Z9checkModei+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
		  controller.z0 = EKF.alt_gnd;
 80021ec:	4b10      	ldr	r3, [pc, #64]	; (8002230 <_Z9checkModei+0x5c>)
 80021ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <_Z9checkModei+0x58>)
 80021f4:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
		  controller.p_alt.reset();
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <_Z9checkModei+0x60>)
 80021fa:	f00a f90d 	bl	800c418 <_ZN3PID5resetEv>
	  }

	  else {
		  controller.mod = ALT_HOLD;
	  }
}
 80021fe:	e011      	b.n	8002224 <_Z9checkModei+0x50>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002206:	db09      	blt.n	800221c <_Z9checkModei+0x48>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800220e:	4293      	cmp	r3, r2
 8002210:	dc04      	bgt.n	800221c <_Z9checkModei+0x48>
		  controller.mod = ALT_HOLD;
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <_Z9checkModei+0x58>)
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
}
 800221a:	e003      	b.n	8002224 <_Z9checkModei+0x50>
		  controller.mod = ALT_HOLD;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <_Z9checkModei+0x58>)
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000740 	.word	0x20000740
 8002230:	200004d0 	.word	0x200004d0
 8002234:	20000aa8 	.word	0x20000aa8

08002238 <_Z9Check_Armv>:

void Check_Arm() {
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	if(!armed) {
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <_Z9Check_Armv+0xb4>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d04d      	beq.n	80022e6 <_Z9Check_Armv+0xae>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <_Z9Check_Armv+0xb8>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f240 424b 	movw	r2, #1099	; 0x44b
 8002252:	4293      	cmp	r3, r2
 8002254:	dc43      	bgt.n	80022de <_Z9Check_Armv+0xa6>
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <_Z9Check_Armv+0xb8>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800225e:	4293      	cmp	r3, r2
 8002260:	dd3d      	ble.n	80022de <_Z9Check_Armv+0xa6>
				if(!arm_start){
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <_Z9Check_Armv+0xbc>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8002270:	f001 fd5c 	bl	8003d2c <HAL_GetTick>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <_Z9Check_Armv+0xc0>)
 800227a:	601a      	str	r2, [r3, #0]
					arm_start = true;
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <_Z9Check_Armv+0xbc>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8002282:	f001 fd53 	bl	8003d2c <HAL_GetTick>
 8002286:	4603      	mov	r3, r0
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <_Z9Check_Armv+0xc0>)
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002292:	4293      	cmp	r3, r2
 8002294:	bf8c      	ite	hi
 8002296:	2301      	movhi	r3, #1
 8002298:	2300      	movls	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d022      	beq.n	80022e6 <_Z9Check_Armv+0xae>
					controller.pid_roll.reset();
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <_Z9Check_Armv+0xc4>)
 80022a2:	f00a f8b9 	bl	800c418 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80022a6:	4816      	ldr	r0, [pc, #88]	; (8002300 <_Z9Check_Armv+0xc8>)
 80022a8:	f00a f8b6 	bl	800c418 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 80022ac:	4815      	ldr	r0, [pc, #84]	; (8002304 <_Z9Check_Armv+0xcc>)
 80022ae:	f00a f8b3 	bl	800c418 <_ZN3PID5resetEv>
					armed = true;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <_Z9Check_Armv+0xb4>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022be:	4812      	ldr	r0, [pc, #72]	; (8002308 <_Z9Check_Armv+0xd0>)
 80022c0:	f002 f9e2 	bl	8004688 <HAL_GPIO_WritePin>

					controller.pid_roll.angle0   = EKF.state.angles[0];
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <_Z9Check_Armv+0xd4>)
 80022c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <_Z9Check_Armv+0xd8>)
 80022cc:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
					controller.pid_pitch.angle0  = EKF.state.angles[1];
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <_Z9Check_Armv+0xd4>)
 80022d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <_Z9Check_Armv+0xd8>)
 80022d8:	f8c2 32cc 	str.w	r3, [r2, #716]	; 0x2cc
				if(HAL_GetTick() - arm_timer > 3000) {
 80022dc:	e003      	b.n	80022e6 <_Z9Check_Armv+0xae>
				}

		}

		else {
			arm_start = false;
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <_Z9Check_Armv+0xbc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80022e4:	e7ff      	b.n	80022e6 <_Z9Check_Armv+0xae>
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000ce1 	.word	0x20000ce1
 80022f0:	20000cac 	.word	0x20000cac
 80022f4:	20000ce0 	.word	0x20000ce0
 80022f8:	20000cd4 	.word	0x20000cd4
 80022fc:	200008e0 	.word	0x200008e0
 8002300:	20000978 	.word	0x20000978
 8002304:	20000a10 	.word	0x20000a10
 8002308:	40010800 	.word	0x40010800
 800230c:	200004d0 	.word	0x200004d0
 8002310:	20000740 	.word	0x20000740

08002314 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
	if(armed) {
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <_Z12Check_Disarmv+0x84>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d038      	beq.n	8002392 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <_Z12Check_Disarmv+0x88>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f240 424b 	movw	r2, #1099	; 0x44b
 8002328:	4293      	cmp	r3, r2
 800232a:	dc2e      	bgt.n	800238a <_Z12Check_Disarmv+0x76>
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <_Z12Check_Disarmv+0x88>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f240 424b 	movw	r2, #1099	; 0x44b
 8002334:	4293      	cmp	r3, r2
 8002336:	dc28      	bgt.n	800238a <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <_Z12Check_Disarmv+0x8c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8002346:	f001 fcf1 	bl	8003d2c <HAL_GetTick>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <_Z12Check_Disarmv+0x90>)
 8002350:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <_Z12Check_Disarmv+0x8c>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8002358:	f001 fce8 	bl	8003d2c <HAL_GetTick>
 800235c:	4603      	mov	r3, r0
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <_Z12Check_Disarmv+0x90>)
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002368:	4293      	cmp	r3, r2
 800236a:	bf8c      	ite	hi
 800236c:	2301      	movhi	r3, #1
 800236e:	2300      	movls	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <_Z12Check_Disarmv+0x7e>
					armed = false;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <_Z12Check_Disarmv+0x84>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002382:	4809      	ldr	r0, [pc, #36]	; (80023a8 <_Z12Check_Disarmv+0x94>)
 8002384:	f002 f980 	bl	8004688 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8002388:	e003      	b.n	8002392 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <_Z12Check_Disarmv+0x8c>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002390:	e7ff      	b.n	8002392 <_Z12Check_Disarmv+0x7e>
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000ce1 	.word	0x20000ce1
 800239c:	20000cac 	.word	0x20000cac
 80023a0:	20000ce3 	.word	0x20000ce3
 80023a4:	20000cd8 	.word	0x20000cd8
 80023a8:	40010800 	.word	0x40010800

080023ac <_Z9TelemPackv>:

void TelemPack() {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 80023b0:	4b75      	ldr	r3, [pc, #468]	; (8002588 <_Z9TelemPackv+0x1dc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a75      	ldr	r2, [pc, #468]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023b6:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 80023b8:	4b73      	ldr	r3, [pc, #460]	; (8002588 <_Z9TelemPackv+0x1dc>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a73      	ldr	r2, [pc, #460]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023be:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 80023c0:	4b71      	ldr	r3, [pc, #452]	; (8002588 <_Z9TelemPackv+0x1dc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a71      	ldr	r2, [pc, #452]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023c6:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 80023c8:	4b71      	ldr	r3, [pc, #452]	; (8002590 <_Z9TelemPackv+0x1e4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023d0:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80023d2:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <_Z9TelemPackv+0x1e4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b6c      	ldr	r3, [pc, #432]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023da:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80023dc:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <_Z9TelemPackv+0x1e4>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b6a      	ldr	r3, [pc, #424]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023e4:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <_Z9TelemPackv+0x1e4>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b67      	ldr	r3, [pc, #412]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023ee:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <_Z9TelemPackv+0x1e8>)
 80023f2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80023f6:	4a65      	ldr	r2, [pc, #404]	; (800258c <_Z9TelemPackv+0x1e0>)
 80023f8:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 80023fa:	4b66      	ldr	r3, [pc, #408]	; (8002594 <_Z9TelemPackv+0x1e8>)
 80023fc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8002400:	4a62      	ldr	r2, [pc, #392]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002402:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = 0;
 8002404:	4b61      	ldr	r3, [pc, #388]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	615a      	str	r2, [r3, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 800240c:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <_Z9TelemPackv+0x1dc>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a5e      	ldr	r2, [pc, #376]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002412:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <_Z9TelemPackv+0x1dc>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a5c      	ldr	r2, [pc, #368]	; (800258c <_Z9TelemPackv+0x1e0>)
 800241a:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <_Z9TelemPackv+0x1dc>)
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	4a5a      	ldr	r2, [pc, #360]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002422:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8002424:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <_Z9TelemPackv+0x1ec>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <_Z9TelemPackv+0x1e0>)
 800242a:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 800242c:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <_Z9TelemPackv+0x1ec>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002432:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <_Z9TelemPackv+0x1f0>)
 8002436:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800243a:	4a54      	ldr	r2, [pc, #336]	; (800258c <_Z9TelemPackv+0x1e0>)
 800243c:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 800243e:	4b57      	ldr	r3, [pc, #348]	; (800259c <_Z9TelemPackv+0x1f0>)
 8002440:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002444:	4a51      	ldr	r2, [pc, #324]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002446:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = gyroX;
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <_Z9TelemPackv+0x1f4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a4f      	ldr	r2, [pc, #316]	; (800258c <_Z9TelemPackv+0x1e0>)
 800244e:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = gyroY;
 8002450:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <_Z9TelemPackv+0x1f8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4d      	ldr	r2, [pc, #308]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002456:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_comp;
 8002458:	4b50      	ldr	r3, [pc, #320]	; (800259c <_Z9TelemPackv+0x1f0>)
 800245a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800245e:	4a4b      	ldr	r2, [pc, #300]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002460:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 8002462:	4b4e      	ldr	r3, [pc, #312]	; (800259c <_Z9TelemPackv+0x1f0>)
 8002464:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002468:	4a48      	ldr	r2, [pc, #288]	; (800258c <_Z9TelemPackv+0x1e0>)
 800246a:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 800246c:	4b4b      	ldr	r3, [pc, #300]	; (800259c <_Z9TelemPackv+0x1f0>)
 800246e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002474:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <_Z9TelemPackv+0x1f0>)
 8002478:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800247c:	4a43      	ldr	r2, [pc, #268]	; (800258c <_Z9TelemPackv+0x1e0>)
 800247e:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8002480:	4b44      	ldr	r3, [pc, #272]	; (8002594 <_Z9TelemPackv+0x1e8>)
 8002482:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002486:	4a41      	ldr	r2, [pc, #260]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <_Z9TelemPackv+0x1e8>)
 800248c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002490:	4a3e      	ldr	r2, [pc, #248]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002492:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <_Z9TelemPackv+0x1e8>)
 8002496:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800249a:	4a3c      	ldr	r2, [pc, #240]	; (800258c <_Z9TelemPackv+0x1e0>)
 800249c:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <_Z9TelemPackv+0x1e8>)
 80024a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80024a4:	4a39      	ldr	r2, [pc, #228]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024a6:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <_Z9TelemPackv+0x1e8>)
 80024aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80024ae:	4a37      	ldr	r2, [pc, #220]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024b0:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <_Z9TelemPackv+0x1e8>)
 80024b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80024b8:	4a34      	ldr	r2, [pc, #208]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024ba:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <_Z9TelemPackv+0x1e8>)
 80024be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80024c2:	4a32      	ldr	r2, [pc, #200]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 80024c6:	4b33      	ldr	r3, [pc, #204]	; (8002594 <_Z9TelemPackv+0x1e8>)
 80024c8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80024cc:	4a2f      	ldr	r2, [pc, #188]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024ce:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <_Z9TelemPackv+0x1f0>)
 80024d2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80024d6:	4a2d      	ldr	r2, [pc, #180]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024d8:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <_Z9TelemPackv+0x1f0>)
 80024dc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <_Z9TelemPackv+0x1f0>)
 80024e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80024ec:	4a27      	ldr	r2, [pc, #156]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <_Z9TelemPackv+0x1fc>)
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <_Z9TelemPackv+0x1e0>)
 80024f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <_Z9TelemPackv+0x1fc>)
 80024fe:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8002502:	b21a      	sxth	r2, r3
 8002504:	4b21      	ldr	r3, [pc, #132]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002506:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <_Z9TelemPackv+0x1fc>)
 800250c:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8002510:	b21a      	sxth	r2, r3
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002514:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <_Z9TelemPackv+0x1fc>)
 800251a:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800251e:	b21a      	sxth	r2, r3
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002522:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.xpos;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <_Z9TelemPackv+0x1f0>)
 8002528:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800252c:	4a17      	ldr	r2, [pc, #92]	; (800258c <_Z9TelemPackv+0x1e0>)
 800252e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <_Z9TelemPackv+0x1f0>)
 8002534:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <_Z9TelemPackv+0x1e0>)
 800253a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  //telem_pack.position_body.y = EKF.ypos;

	  telem_pack.alt_thr = controller.alt_thr;
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <_Z9TelemPackv+0x1e8>)
 8002540:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002546:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 8002548:	f001 fbf0 	bl	8003d2c <HAL_GetTick>
 800254c:	4603      	mov	r3, r0
 800254e:	4a0f      	ldr	r2, [pc, #60]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002550:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accX;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_Z9TelemPackv+0x200>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <_Z9TelemPackv+0x1e0>)
 800255a:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accY;
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <_Z9TelemPackv+0x204>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002564:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZ;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <_Z9TelemPackv+0x208>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <_Z9TelemPackv+0x1e0>)
 800256e:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <_Z9TelemPackv+0x20c>)
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <_Z9TelemPackv+0x1e0>)
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	23b1      	movs	r3, #177	; 0xb1
 800257c:	461a      	mov	r2, r3
 800257e:	f00c f8fd 	bl	800e77c <memcpy>
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000340 	.word	0x20000340
 800258c:	20000364 	.word	0x20000364
 8002590:	20000c78 	.word	0x20000c78
 8002594:	20000740 	.word	0x20000740
 8002598:	2000031c 	.word	0x2000031c
 800259c:	200004d0 	.word	0x200004d0
 80025a0:	200002d4 	.word	0x200002d4
 80025a4:	200002d8 	.word	0x200002d8
 80025a8:	20000d54 	.word	0x20000d54
 80025ac:	200002e0 	.word	0x200002e0
 80025b0:	200002e4 	.word	0x200002e4
 80025b4:	200002e8 	.word	0x200002e8
 80025b8:	20000418 	.word	0x20000418

080025bc <_Z9SendTelemv>:

void SendTelem() {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
	  TelemPack();
 80025c2:	f7ff fef3 	bl	80023ac <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	22b1      	movs	r2, #177	; 0xb1
 80025ca:	490e      	ldr	r1, [pc, #56]	; (8002604 <_Z9SendTelemv+0x48>)
 80025cc:	480e      	ldr	r0, [pc, #56]	; (8002608 <_Z9SendTelemv+0x4c>)
 80025ce:	f005 fd91 	bl	80080f4 <HAL_UART_Transmit>
	  char end_char = '@';
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 80025d6:	1df9      	adds	r1, r7, #7
 80025d8:	2364      	movs	r3, #100	; 0x64
 80025da:	2201      	movs	r2, #1
 80025dc:	480a      	ldr	r0, [pc, #40]	; (8002608 <_Z9SendTelemv+0x4c>)
 80025de:	f005 fd89 	bl	80080f4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 80025e2:	1df9      	adds	r1, r7, #7
 80025e4:	2364      	movs	r3, #100	; 0x64
 80025e6:	2201      	movs	r2, #1
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <_Z9SendTelemv+0x4c>)
 80025ea:	f005 fd83 	bl	80080f4 <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 80025ee:	f001 fb9d 	bl	8003d2c <HAL_GetTick>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <_Z9SendTelemv+0x50>)
 80025f8:	601a      	str	r2, [r3, #0]


}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000418 	.word	0x20000418
 8002608:	20000250 	.word	0x20000250
 800260c:	20000cdc 	.word	0x20000cdc

08002610 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af04      	add	r7, sp, #16
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	b29a      	uxth	r2, r3
 800261e:	2301      	movs	r3, #1
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	2302      	movs	r3, #2
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	21d1      	movs	r1, #209	; 0xd1
 8002630:	4807      	ldr	r0, [pc, #28]	; (8002650 <_Z7GyroOkuh+0x40>)
 8002632:	f002 fdf7 	bl	8005224 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8002636:	7b3b      	ldrb	r3, [r7, #12]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	7b7b      	ldrb	r3, [r7, #13]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2000009c 	.word	0x2000009c

08002654 <_Z6PWMYazv>:




void PWMYaz() {
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	  if(armed) {
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <_Z6PWMYazv+0x9c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d045      	beq.n	80026ec <_Z6PWMYazv+0x98>

		  if(!motor_start) {
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <_Z6PWMYazv+0xa0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f083 0301 	eor.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <_Z6PWMYazv+0x24>
		  	  MotorBaslat();
 800266e:	f000 f877 	bl	8002760 <_Z11MotorBaslatv>
		  	  motor_start = true;
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <_Z6PWMYazv+0xa0>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
		  }

		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > 1050) {
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <_Z6PWMYazv+0xa4>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f240 52db 	movw	r2, #1499	; 0x5db
 8002680:	4293      	cmp	r3, r2
 8002682:	dc1b      	bgt.n	80026bc <_Z6PWMYazv+0x68>
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <_Z6PWMYazv+0xa4>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f240 421a 	movw	r2, #1050	; 0x41a
 800268c:	4293      	cmp	r3, r2
 800268e:	dd15      	ble.n	80026bc <_Z6PWMYazv+0x68>


			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <_Z6PWMYazv+0xa8>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <_Z6PWMYazv+0xac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <_Z6PWMYazv+0xa8>)
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <_Z6PWMYazv+0xac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <_Z6PWMYazv+0xa8>)
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_Z6PWMYazv+0xac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <_Z6PWMYazv+0xa8>)
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <_Z6PWMYazv+0xac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
 80026b8:	bf00      	nop
		  }
	  }



}
 80026ba:	e017      	b.n	80026ec <_Z6PWMYazv+0x98>
		  else if(motor_start) {
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <_Z6PWMYazv+0xa0>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <_Z6PWMYazv+0x98>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <_Z6PWMYazv+0xac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <_Z6PWMYazv+0xac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <_Z6PWMYazv+0xac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <_Z6PWMYazv+0xac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000ce1 	.word	0x20000ce1
 80026f4:	20000ce2 	.word	0x20000ce2
 80026f8:	20000cac 	.word	0x20000cac
 80026fc:	20000c78 	.word	0x20000c78
 8002700:	200000f0 	.word	0x200000f0

08002704 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800271e:	da12      	bge.n	8002746 <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff74 	bl	8002610 <_Z7GyroOkuh>
 8002728:	4603      	mov	r3, r0
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe faae 	bl	8000c8c <__aeabi_i2f>
 8002730:	4603      	mov	r3, r0
 8002732:	4619      	mov	r1, r3
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7fe f9f5 	bl	8000b24 <__addsf3>
 800273a:	4603      	mov	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3301      	adds	r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	e7e8      	b.n	8002718 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8002746:	4905      	ldr	r1, [pc, #20]	; (800275c <_Z7GyroErrh+0x58>)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7fe fba7 	bl	8000e9c <__aeabi_fdiv>
 800274e:	4603      	mov	r3, r0
 8002750:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	44fa0000 	.word	0x44fa0000

08002760 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <_Z11MotorBaslatv+0x38>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <_Z11MotorBaslatv+0x38>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002776:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <_Z11MotorBaslatv+0x38>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <_Z11MotorBaslatv+0x38>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 800278c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002790:	f001 fad6 	bl	8003d40 <HAL_Delay>
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	200000f0 	.word	0x200000f0
 800279c:	00000000 	.word	0x00000000

080027a0 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 80027a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a2:	b099      	sub	sp, #100	; 0x64
 80027a4:	af0c      	add	r7, sp, #48	; 0x30
 80027a6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a9d      	ldr	r2, [pc, #628]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	f040 84a2 	bne.w	80030f6 <HAL_TIM_PeriodElapsedCallback+0x956>
		//1.25 ms || 800 Hz


		set_ucounter(SONAR_CLOCK_RATE);
 80027b2:	2050      	movs	r0, #80	; 0x50
 80027b4:	f7ff f83a 	bl	800182c <set_ucounter>
		set_b_counter(12);
 80027b8:	200c      	movs	r0, #12
 80027ba:	f7fe ffe3 	bl	8001784 <set_b_counter>

		controller_counter++;
 80027be:	4b99      	ldr	r3, [pc, #612]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	4b97      	ldr	r3, [pc, #604]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80027c8:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 80027ca:	4b97      	ldr	r3, [pc, #604]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b95      	ldr	r3, [pc, #596]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80027d4:	801a      	strh	r2, [r3, #0]

		if(camera_counter == 40) {
 80027d6:	4b94      	ldr	r3, [pc, #592]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b28      	cmp	r3, #40	; 0x28
 80027dc:	d125      	bne.n	800282a <HAL_TIM_PeriodElapsedCallback+0x8a>
			  camera_counter = 0;
 80027de:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 80027e4:	4b91      	ldr	r3, [pc, #580]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80027e6:	4a92      	ldr	r2, [pc, #584]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80027e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ea:	c303      	stmia	r3!, {r0, r1}
 80027ec:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 80027ee:	4b90      	ldr	r3, [pc, #576]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80027f0:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fa48 	bl	8000c8c <__aeabi_i2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	498d      	ldr	r1, [pc, #564]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fb4b 	bl	8000e9c <__aeabi_fdiv>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800280c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

			  if(!cam_data.detected) {
 8002810:	4b87      	ldr	r3, [pc, #540]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x82>
				  EKF.Qc = 9e9;
 8002818:	4b87      	ldr	r3, [pc, #540]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800281a:	4a88      	ldr	r2, [pc, #544]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800281c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002820:	e003      	b.n	800282a <HAL_TIM_PeriodElapsedCallback+0x8a>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 8002822:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002824:	4a86      	ldr	r2, [pc, #536]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002826:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			  }
		}

		if(get_ucounter() == 1) {
 800282a:	f7ff f819 	bl	8001860 <get_ucounter>
 800282e:	4603      	mov	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xa4>
			request_range();
 800283e:	f7fe ffbb 	bl	80017b8 <request_range>
 8002842:	e0c0      	b.n	80029c6 <HAL_TIM_PeriodElapsedCallback+0x226>
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8002844:	f7ff f80c 	bl	8001860 <get_ucounter>
 8002848:	4603      	mov	r3, r0
 800284a:	2b50      	cmp	r3, #80	; 0x50
 800284c:	bf0c      	ite	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	2300      	movne	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80b6 	beq.w	80029c6 <HAL_TIM_PeriodElapsedCallback+0x226>
		  sonar_range = getRange();
 800285a:	f7fe ffc7 	bl	80017ec <getRange>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	4b78      	ldr	r3, [pc, #480]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002864:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8002866:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a78      	ldr	r2, [pc, #480]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800286c:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 800286e:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a78      	ldr	r2, [pc, #480]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002874:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 8002876:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4978      	ldr	r1, [pc, #480]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fa59 	bl	8000d34 <__aeabi_fmul>
 8002882:	4603      	mov	r3, r0
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fff5 	bl	8001874 <_ZSt3absf>
 800288a:	62f8      	str	r0, [r7, #44]	; 0x2c
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 800288c:	4b72      	ldr	r3, [pc, #456]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4972      	ldr	r1, [pc, #456]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fa4e 	bl	8000d34 <__aeabi_fmul>
 8002898:	4603      	mov	r3, r0
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe ffea 	bl	8001874 <_ZSt3absf>
 80028a0:	62b8      	str	r0, [r7, #40]	; 0x28
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 80028a2:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f9ec 	bl	8000c84 <__aeabi_ui2f>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fdb2 	bl	8000418 <__aeabi_f2d>
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	4b69      	ldr	r3, [pc, #420]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028ba:	f7fd ff2f 	bl	800071c <__aeabi_ddiv>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
 80028c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028c8:	f7fe ffe0 	bl	800188c <_ZSt3cosf>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fda2 	bl	8000418 <__aeabi_f2d>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4620      	mov	r0, r4
 80028da:	4629      	mov	r1, r5
 80028dc:	f7fd fdf4 	bl	80004c8 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4614      	mov	r4, r2
 80028e6:	461d      	mov	r5, r3
 80028e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ea:	f7fe ffcf 	bl	800188c <_ZSt3cosf>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fd91 	bl	8000418 <__aeabi_f2d>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4620      	mov	r0, r4
 80028fc:	4629      	mov	r1, r5
 80028fe:	f7fd fde3 	bl	80004c8 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe f8b5 	bl	8000a78 <__aeabi_d2f>
 800290e:	4603      	mov	r3, r0
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002912:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8002914:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 800291a:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f8fb 	bl	8000b20 <__aeabi_fsub>
 800292a:	4603      	mov	r3, r0
 800292c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fab4 	bl	8000e9c <__aeabi_fdiv>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800293a:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 800293c:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe ff97 	bl	8001874 <_ZSt3absf>
 8002946:	4603      	mov	r3, r0
 8002948:	2201      	movs	r2, #1
 800294a:	4614      	mov	r4, r2
 800294c:	4945      	ldr	r1, [pc, #276]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fbac 	bl	80010ac <__aeabi_fcmpgt>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_PeriodElapsedCallback+0x1be>
 800295a:	2300      	movs	r3, #0
 800295c:	461c      	mov	r4, r3
 800295e:	b2e3      	uxtb	r3, r4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			  sonar_alt = sonar_alt_;
 8002964:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800296a:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a37      	ldr	r2, [pc, #220]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002972:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	493b      	ldr	r1, [pc, #236]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fb96 	bl	80010ac <__aeabi_fcmpgt>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_TIM_PeriodElapsedCallback+0x200>
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fd44 	bl	8000418 <__aeabi_f2d>
 8002990:	a321      	add	r3, pc, #132	; (adr r3, 8002a18 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fe f809 	bl	80009ac <__aeabi_dcmplt>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0x212>
			  EKF.Qs = 9e9;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80029a4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			  EKF.salt = 50;
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80029aa:	4a30      	ldr	r2, [pc, #192]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80029ac:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 80029b0:	e009      	b.n	80029c6 <HAL_TIM_PeriodElapsedCallback+0x226>
		  }

		  else {
			  EKF.Qs = 0.25;
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80029b4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80029b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			  EKF.salt = 1;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80029be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		  }


		}

		if(get_b_counter() == 1) {
 80029c6:	f7fe fed3 	bl	8001770 <get_b_counter>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_TIM_PeriodElapsedCallback+0x240>
			write_ut();
 80029da:	f7fe fcc9 	bl	8001370 <write_ut>
 80029de:	e077      	b.n	8002ad0 <HAL_TIM_PeriodElapsedCallback+0x330>
		}

		else if(get_b_counter() == 5) { //5 ms
 80029e0:	f7fe fec6 	bl	8001770 <get_b_counter>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d03f      	beq.n	8002a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>
			bmp.uncomp.temp = read_ut ();
 80029f4:	f7fe fcd4 	bl	80013a0 <read_ut>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f946 	bl	8000c8c <__aeabi_i2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a04:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8002a06:	481a      	ldr	r0, [pc, #104]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a08:	f7fe fce4 	bl	80013d4 <get_temp>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a10:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 8002a12:	f7fe fd37 	bl	8001484 <write_up>
 8002a16:	e05b      	b.n	8002ad0 <HAL_TIM_PeriodElapsedCallback+0x330>
 8002a18:	33333333 	.word	0x33333333
 8002a1c:	3fd33333 	.word	0x3fd33333
 8002a20:	20000138 	.word	0x20000138
 8002a24:	20000d08 	.word	0x20000d08
 8002a28:	20000d0a 	.word	0x20000d0a
 8002a2c:	20000d54 	.word	0x20000d54
 8002a30:	20000d48 	.word	0x20000d48
 8002a34:	42c80000 	.word	0x42c80000
 8002a38:	200004d0 	.word	0x200004d0
 8002a3c:	50061c46 	.word	0x50061c46
 8002a40:	3cdd2f1b 	.word	0x3cdd2f1b
 8002a44:	20000d04 	.word	0x20000d04
 8002a48:	20000cf4 	.word	0x20000cf4
 8002a4c:	20000cf8 	.word	0x20000cf8
 8002a50:	20000cfc 	.word	0x20000cfc
 8002a54:	20000d00 	.word	0x20000d00
 8002a58:	20000340 	.word	0x20000340
 8002a5c:	3c8e8a72 	.word	0x3c8e8a72
 8002a60:	40590000 	.word	0x40590000
 8002a64:	40e00000 	.word	0x40e00000
 8002a68:	40c00000 	.word	0x40c00000
 8002a6c:	42480000 	.word	0x42480000
 8002a70:	20000d0c 	.word	0x20000d0c
		}

		else if(get_b_counter() == 12) { //
 8002a74:	f7fe fe7c 	bl	8001770 <get_b_counter>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d023      	beq.n	8002ad0 <HAL_TIM_PeriodElapsedCallback+0x330>
			bmp.uncomp.press = read_up (bmp.oss);
 8002a88:	4bb9      	ldr	r3, [pc, #740]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002a8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a8c:	f7fe fd1a 	bl	80014c4 <read_up>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4ab7      	ldr	r2, [pc, #732]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002a94:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 8002a96:	4eb6      	ldr	r6, [pc, #728]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002a98:	466d      	mov	r5, sp
 8002a9a:	f106 0410 	add.w	r4, r6, #16
 8002a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002aaa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002aae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ab2:	f7fe fd35 	bl	8001520 <get_pressure>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4aad      	ldr	r2, [pc, #692]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002aba:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8002abc:	48ac      	ldr	r0, [pc, #688]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002abe:	f7fe fdfb 	bl	80016b8 <get_altitude>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4aaa      	ldr	r2, [pc, #680]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002ac6:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 8002ac8:	4ba9      	ldr	r3, [pc, #676]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	4aa9      	ldr	r2, [pc, #676]	; (8002d74 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002ace:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 8002ad0:	4ba9      	ldr	r3, [pc, #676]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	f040 830e 	bne.w	80030f6 <HAL_TIM_PeriodElapsedCallback+0x956>

		  controller_counter = 0;
 8002ada:	4ba7      	ldr	r3, [pc, #668]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	801a      	strh	r2, [r3, #0]



		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/65.5 ;
 8002ae0:	2043      	movs	r0, #67	; 0x43
 8002ae2:	f7ff fd95 	bl	8002610 <_Z7GyroOkuh>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f8cf 	bl	8000c8c <__aeabi_i2f>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4ba2      	ldr	r3, [pc, #648]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f7fe f812 	bl	8000b20 <__aeabi_fsub>
 8002afc:	4603      	mov	r3, r0
 8002afe:	49a0      	ldr	r1, [pc, #640]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f9cb 	bl	8000e9c <__aeabi_fdiv>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b9e      	ldr	r3, [pc, #632]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002b0c:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/65.5 ;
 8002b0e:	2045      	movs	r0, #69	; 0x45
 8002b10:	f7ff fd7e 	bl	8002610 <_Z7GyroOkuh>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f8b8 	bl	8000c8c <__aeabi_i2f>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b9a      	ldr	r3, [pc, #616]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	f7fd fffb 	bl	8000b20 <__aeabi_fsub>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4994      	ldr	r1, [pc, #592]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f9b4 	bl	8000e9c <__aeabi_fdiv>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b94      	ldr	r3, [pc, #592]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8002b3a:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/65.5 ;
 8002b3c:	2047      	movs	r0, #71	; 0x47
 8002b3e:	f7ff fd67 	bl	8002610 <_Z7GyroOkuh>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f8a1 	bl	8000c8c <__aeabi_i2f>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b90      	ldr	r3, [pc, #576]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f7fd ffe4 	bl	8000b20 <__aeabi_fsub>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4989      	ldr	r1, [pc, #548]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f99d 	bl	8000e9c <__aeabi_fdiv>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b8b      	ldr	r3, [pc, #556]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8002b68:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8002b6a:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a8a      	ldr	r2, [pc, #552]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8002b70:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
		  EKF.gyro[1] = -1*gyroY;
 8002b74:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b7c:	4a86      	ldr	r2, [pc, #536]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8002b7e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
		  EKF.gyro[2] = gyroZ;
 8002b82:	4b84      	ldr	r3, [pc, #528]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a84      	ldr	r2, [pc, #528]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8002b88:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8002b8c:	203b      	movs	r0, #59	; 0x3b
 8002b8e:	f7ff fd3f 	bl	8002610 <_Z7GyroOkuh>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f879 	bl	8000c8c <__aeabi_i2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002b9e:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8002ba0:	203d      	movs	r0, #61	; 0x3d
 8002ba2:	f7ff fd35 	bl	8002610 <_Z7GyroOkuh>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe f86f 	bl	8000c8c <__aeabi_i2f>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a7b      	ldr	r2, [pc, #492]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8002bb2:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8002bb4:	203f      	movs	r0, #63	; 0x3f
 8002bb6:	f7ff fd2b 	bl	8002610 <_Z7GyroOkuh>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f865 	bl	8000c8c <__aeabi_i2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8002bc6:	6013      	str	r3, [r2, #0]

		  accXs = (float)accX/4096.0;
 8002bc8:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe f963 	bl	8000e9c <__aeabi_fdiv>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8002bdc:	601a      	str	r2, [r3, #0]
		  accYs = (float)accY/4096.0;
 8002bde:	4b70      	ldr	r3, [pc, #448]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f958 	bl	8000e9c <__aeabi_fdiv>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b6e      	ldr	r3, [pc, #440]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002bf2:	601a      	str	r2, [r3, #0]
		  accZs = (float)accZ/4096.0;
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f94d 	bl	8000e9c <__aeabi_fdiv>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8002c08:	601a      	str	r2, [r3, #0]

		  accXc = 0.815*accXs - 0.42592*accYs - 0.072464*accZs + 0.001334;
 8002c0a:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fc02 	bl	8000418 <__aeabi_f2d>
 8002c14:	a348      	add	r3, pc, #288	; (adr r3, 8002d38 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fc55 	bl	80004c8 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4614      	mov	r4, r2
 8002c24:	461d      	mov	r5, r3
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fbf4 	bl	8000418 <__aeabi_f2d>
 8002c30:	a343      	add	r3, pc, #268	; (adr r3, 8002d40 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f7fd fc47 	bl	80004c8 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7fd fa89 	bl	8000158 <__aeabi_dsub>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	461d      	mov	r5, r3
 8002c4e:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fbe0 	bl	8000418 <__aeabi_f2d>
 8002c58:	a33b      	add	r3, pc, #236	; (adr r3, 8002d48 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fc33 	bl	80004c8 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4620      	mov	r0, r4
 8002c68:	4629      	mov	r1, r5
 8002c6a:	f7fd fa75 	bl	8000158 <__aeabi_dsub>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	a336      	add	r3, pc, #216	; (adr r3, 8002d50 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f7fd fa6e 	bl	800015c <__adddf3>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fd fef6 	bl	8000a78 <__aeabi_d2f>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4a49      	ldr	r2, [pc, #292]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8002c90:	6013      	str	r3, [r2, #0]
		  accYc = 0.96009*accYs - 0.42592*accXs + 0.0091315*accZs + 0.042165;
 8002c92:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fbbe 	bl	8000418 <__aeabi_f2d>
 8002c9c:	a32e      	add	r3, pc, #184	; (adr r3, 8002d58 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd fc11 	bl	80004c8 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4614      	mov	r4, r2
 8002cac:	461d      	mov	r5, r3
 8002cae:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fbb0 	bl	8000418 <__aeabi_f2d>
 8002cb8:	a321      	add	r3, pc, #132	; (adr r3, 8002d40 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fc03 	bl	80004c8 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fa45 	bl	8000158 <__aeabi_dsub>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fb9c 	bl	8000418 <__aeabi_f2d>
 8002ce0:	a31f      	add	r3, pc, #124	; (adr r3, 8002d60 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fbef 	bl	80004c8 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd fa33 	bl	800015c <__adddf3>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	a31a      	add	r3, pc, #104	; (adr r3, 8002d68 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fa2a 	bl	800015c <__adddf3>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd feb2 	bl	8000a78 <__aeabi_d2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8002d18:	6013      	str	r3, [r2, #0]
		  accZc = 0.0091315*accYs - 0.072464*accXs + 0.98549*accZs + 0.08443;
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fb7a 	bl	8000418 <__aeabi_f2d>
 8002d24:	a30e      	add	r3, pc, #56	; (adr r3, 8002d60 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fbcd 	bl	80004c8 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4614      	mov	r4, r2
 8002d34:	461d      	mov	r5, r3
 8002d36:	e041      	b.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x61c>
 8002d38:	e147ae14 	.word	0xe147ae14
 8002d3c:	3fea147a 	.word	0x3fea147a
 8002d40:	f5ad96a7 	.word	0xf5ad96a7
 8002d44:	3fdb4245 	.word	0x3fdb4245
 8002d48:	2e2328fa 	.word	0x2e2328fa
 8002d4c:	3fb28d00 	.word	0x3fb28d00
 8002d50:	97dd00f7 	.word	0x97dd00f7
 8002d54:	3f55db33 	.word	0x3f55db33
 8002d58:	a9e6eeb7 	.word	0xa9e6eeb7
 8002d5c:	3feeb90e 	.word	0x3feeb90e
 8002d60:	2ee84ad8 	.word	0x2ee84ad8
 8002d64:	3f82b389 	.word	0x3f82b389
 8002d68:	a012599f 	.word	0xa012599f
 8002d6c:	3fa596a6 	.word	0x3fa596a6
 8002d70:	20000d0c 	.word	0x20000d0c
 8002d74:	20000cf0 	.word	0x20000cf0
 8002d78:	20000d08 	.word	0x20000d08
 8002d7c:	20000304 	.word	0x20000304
 8002d80:	42830000 	.word	0x42830000
 8002d84:	200002d4 	.word	0x200002d4
 8002d88:	20000308 	.word	0x20000308
 8002d8c:	200002d8 	.word	0x200002d8
 8002d90:	2000030c 	.word	0x2000030c
 8002d94:	200002dc 	.word	0x200002dc
 8002d98:	200004d0 	.word	0x200004d0
 8002d9c:	200002e0 	.word	0x200002e0
 8002da0:	200002e4 	.word	0x200002e4
 8002da4:	200002e8 	.word	0x200002e8
 8002da8:	200002f8 	.word	0x200002f8
 8002dac:	200002fc 	.word	0x200002fc
 8002db0:	20000300 	.word	0x20000300
 8002db4:	200002ec 	.word	0x200002ec
 8002db8:	200002f0 	.word	0x200002f0
 8002dbc:	4bac      	ldr	r3, [pc, #688]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fb29 	bl	8000418 <__aeabi_f2d>
 8002dc6:	a3a4      	add	r3, pc, #656	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fb7c 	bl	80004c8 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	f7fd f9be 	bl	8000158 <__aeabi_dsub>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	4ba3      	ldr	r3, [pc, #652]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fb15 	bl	8000418 <__aeabi_f2d>
 8002dee:	a39c      	add	r3, pc, #624	; (adr r3, 8003060 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fb68 	bl	80004c8 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7fd f9ac 	bl	800015c <__adddf3>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	a396      	add	r3, pc, #600	; (adr r3, 8003068 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd f9a3 	bl	800015c <__adddf3>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f7fd fe2b 	bl	8000a78 <__aeabi_d2f>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4a94      	ldr	r2, [pc, #592]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002e26:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accXc;// - AccXh;
 8002e28:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a94      	ldr	r2, [pc, #592]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002e2e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		  EKF.acc[1] = accYc;// - AccYh;
 8002e32:	4b94      	ldr	r3, [pc, #592]	; (8003084 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a92      	ldr	r2, [pc, #584]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002e38:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
		  EKF.acc[2] = accZc;// - AccZh;
 8002e3c:	4b8e      	ldr	r3, [pc, #568]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a8f      	ldr	r2, [pc, #572]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002e42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 8002e46:	4b90      	ldr	r3, [pc, #576]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8002e48:	623b      	str	r3, [r7, #32]
		  EKF.acc_vert = (accZ - AccZh) / 4096 * g;
 8002e4a:	4b90      	ldr	r3, [pc, #576]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fe63 	bl	8000b20 <__aeabi_fsub>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f81b 	bl	8000e9c <__aeabi_fdiv>
 8002e66:	4603      	mov	r3, r0
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd ff62 	bl	8000d34 <__aeabi_fmul>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b82      	ldr	r3, [pc, #520]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002e76:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		  float accXm = (accX - AccXh) / 4096  * g;
 8002e7a:	4b86      	ldr	r3, [pc, #536]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a86      	ldr	r2, [pc, #536]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fe4b 	bl	8000b20 <__aeabi_fsub>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe f803 	bl	8000e9c <__aeabi_fdiv>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6a38      	ldr	r0, [r7, #32]
 8002e9c:	f7fd ff4a 	bl	8000d34 <__aeabi_fmul>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	61fb      	str	r3, [r7, #28]
		  float accYm = (accY - AccYh) / 4096  * g;
 8002ea4:	4b7d      	ldr	r3, [pc, #500]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a7d      	ldr	r2, [pc, #500]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fe36 	bl	8000b20 <__aeabi_fsub>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd ffee 	bl	8000e9c <__aeabi_fdiv>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6a38      	ldr	r0, [r7, #32]
 8002ec6:	f7fd ff35 	bl	8000d34 <__aeabi_fmul>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	61bb      	str	r3, [r7, #24]

		  EKF.accXm = accXm * cos(deg2rad*EKF.state.angles[1]);
 8002ece:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed4:	4973      	ldr	r1, [pc, #460]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd ff2c 	bl	8000d34 <__aeabi_fmul>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fcd4 	bl	800188c <_ZSt3cosf>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	69f9      	ldr	r1, [r7, #28]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd ff23 	bl	8000d34 <__aeabi_fmul>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002ef4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		  EKF.accYm = accYm;
 8002ef8:	4a61      	ldr	r2, [pc, #388]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c

		  EKF.sonar_alt = sonar_alt;
 8002f00:	4b69      	ldr	r3, [pc, #420]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5e      	ldr	r2, [pc, #376]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f06:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		  EKF.baro_alt = baro_alt;
 8002f0a:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x90c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f10:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

		  EKF.Run();
 8002f14:	485a      	ldr	r0, [pc, #360]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f16:	f006 fb83 	bl	8009620 <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 8002f1a:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f20:	4a63      	ldr	r2, [pc, #396]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002f22:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8002f24:	4b56      	ldr	r3, [pc, #344]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f2a:	4a61      	ldr	r2, [pc, #388]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002f2c:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f30:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f34:	4a5e      	ldr	r2, [pc, #376]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002f36:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8002f38:	4b51      	ldr	r3, [pc, #324]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f3e:	4a5c      	ldr	r2, [pc, #368]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002f40:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8002f42:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f48:	4a59      	ldr	r2, [pc, #356]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002f4a:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f4e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8002f52:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002f54:	6153      	str	r3, [r2, #20]


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8002f56:	4b57      	ldr	r3, [pc, #348]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f93a 	bl	80021d4 <_Z9checkModei>

			controller.z_vel = EKF.vz;
 8002f60:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f62:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002f66:	4a54      	ldr	r2, [pc, #336]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002f68:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			controller.vx	 = EKF.vx;
 8002f6c:	4b44      	ldr	r3, [pc, #272]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f6e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002f72:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002f74:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			controller.x     = EKF.xpos;
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f7a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002f7e:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002f80:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			//controller.z0 = z0;
			controller.z = EKF.alt_gnd;
 8002f84:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f86:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f8a:	4a4b      	ldr	r2, [pc, #300]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002f8c:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178

		  controller.state = state;
 8002f90:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002f92:	4a47      	ldr	r2, [pc, #284]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002f94:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8002f98:	4615      	mov	r5, r2
 8002f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa2:	682b      	ldr	r3, [r5, #0]
 8002fa4:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002fa8:	4a44      	ldr	r2, [pc, #272]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x91c>)
 8002faa:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8002fae:	4615      	mov	r5, r2
 8002fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8002fbc:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fe63 	bl	8000c8c <__aeabi_i2f>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002fca:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c

		  controller_output_ang = controller.Run();
 8002fce:	f107 030c 	add.w	r3, r7, #12
 8002fd2:	4939      	ldr	r1, [pc, #228]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f005 fc2f 	bl	8008838 <_ZN10Controller3RunEv>
 8002fda:	f107 030c 	add.w	r3, r7, #12
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4837      	ldr	r0, [pc, #220]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8002fe2:	f000 f98c 	bl	80032fe <_ZNSt6vectorIfSaIfEEaSEOS1_>
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f96c 	bl	80032c8 <_ZNSt6vectorIfSaIfEED1Ev>

		  controller_output[0] = controller.controller_output_pwm[0];
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002ff2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002ff6:	4a33      	ldr	r2, [pc, #204]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002ff8:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8002ffa:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002ffc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003000:	4a30      	ldr	r2, [pc, #192]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8003002:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003006:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800300a:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800300c:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003010:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003014:	4a2b      	ldr	r2, [pc, #172]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8003016:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800301a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800301e:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x91c>)
 8003020:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003024:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003028:	4a24      	ldr	r2, [pc, #144]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800302a:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;

		  w_ang = controller.pd_roll;
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800302e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd f9f0 	bl	8000418 <__aeabi_f2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4922      	ldr	r1, [pc, #136]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800303e:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29a      	uxth	r2, r3
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800304a:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	e03e      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x930>
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	2e2328fa 	.word	0x2e2328fa
 800305c:	3fb28d00 	.word	0x3fb28d00
 8003060:	53111f0c 	.word	0x53111f0c
 8003064:	3fef8922 	.word	0x3fef8922
 8003068:	58cd20b0 	.word	0x58cd20b0
 800306c:	3fb59d34 	.word	0x3fb59d34
 8003070:	200002f8 	.word	0x200002f8
 8003074:	20000300 	.word	0x20000300
 8003078:	200002f4 	.word	0x200002f4
 800307c:	200002ec 	.word	0x200002ec
 8003080:	200004d0 	.word	0x200004d0
 8003084:	200002f0 	.word	0x200002f0
 8003088:	411cf5c3 	.word	0x411cf5c3
 800308c:	200002e8 	.word	0x200002e8
 8003090:	20000318 	.word	0x20000318
 8003094:	200002e0 	.word	0x200002e0
 8003098:	20000310 	.word	0x20000310
 800309c:	200002e4 	.word	0x200002e4
 80030a0:	20000314 	.word	0x20000314
 80030a4:	3c8e8a72 	.word	0x3c8e8a72
 80030a8:	20000cf4 	.word	0x20000cf4
 80030ac:	20000cf0 	.word	0x20000cf0
 80030b0:	20000340 	.word	0x20000340
 80030b4:	20000cac 	.word	0x20000cac
 80030b8:	20000740 	.word	0x20000740
 80030bc:	2000031c 	.word	0x2000031c
 80030c0:	20000c88 	.word	0x20000c88
 80030c4:	20000c78 	.word	0x20000c78
 80030c8:	20000ce8 	.word	0x20000ce8
 80030cc:	20000c94 	.word	0x20000c94
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x960>)
 80030d4:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x964>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80030de:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x964>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80030e8:	801a      	strh	r2, [r3, #0]


		  PWMYaz();
 80030ea:	f7ff fab3 	bl	8002654 <_Z6PWMYazv>


		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80030ee:	2102      	movs	r1, #2
 80030f0:	4807      	ldr	r0, [pc, #28]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x970>)
 80030f2:	f001 fae1 	bl	80046b8 <HAL_GPIO_TogglePin>
		}
		}
	}
 80030f6:	bf00      	nop
 80030f8:	3734      	adds	r7, #52	; 0x34
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000c96 	.word	0x20000c96
 8003104:	20000c78 	.word	0x20000c78
 8003108:	20000c98 	.word	0x20000c98
 800310c:	20000c9a 	.word	0x20000c9a
 8003110:	40010c00 	.word	0x40010c00

08003114 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a43      	ldr	r2, [pc, #268]	; (800322c <HAL_TIM_IC_CaptureCallback+0x118>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d17f      	bne.n	8003224 <HAL_TIM_IC_CaptureCallback+0x110>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7f1b      	ldrb	r3, [r3, #28]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d17b      	bne.n	8003224 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 800312c:	4b40      	ldr	r3, [pc, #256]	; (8003230 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a40      	ldr	r2, [pc, #256]	; (8003234 <HAL_TIM_IC_CaptureCallback+0x120>)
 8003132:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8003134:	2108      	movs	r1, #8
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f004 f9fa 	bl	8007530 <HAL_TIM_ReadCapturedValue>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003142:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8003144:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <HAL_TIM_IC_CaptureCallback+0x120>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	4a3a      	ldr	r2, [pc, #232]	; (8003238 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003150:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0fdb      	lsrs	r3, r3, #31
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003166:	33ff      	adds	r3, #255	; 0xff
 8003168:	4a33      	ldr	r2, [pc, #204]	; (8003238 <HAL_TIM_IC_CaptureCallback+0x124>)
 800316a:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <HAL_TIM_IC_CaptureCallback+0x128>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b21b      	sxth	r3, r3
 8003172:	4619      	mov	r1, r3
 8003174:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800317a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 800317e:	4b2f      	ldr	r3, [pc, #188]	; (800323c <HAL_TIM_IC_CaptureCallback+0x128>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b21b      	sxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8003188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	bfcc      	ite	gt
 8003194:	2301      	movgt	r3, #1
 8003196:	2300      	movle	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 800319e:	4b27      	ldr	r3, [pc, #156]	; (800323c <HAL_TIM_IC_CaptureCallback+0x128>)
 80031a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a4:	801a      	strh	r2, [r3, #0]
						sync = 1;
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_TIM_IC_CaptureCallback+0x130>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	4824      	ldr	r0, [pc, #144]	; (8003248 <HAL_TIM_IC_CaptureCallback+0x134>)
 80031b6:	f009 f9cd 	bl	800c554 <_ZN3PID7pwm2angEt>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4a23      	ldr	r2, [pc, #140]	; (800324c <HAL_TIM_IC_CaptureCallback+0x138>)
 80031be:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 80031c0:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4619      	mov	r1, r3
 80031c8:	481f      	ldr	r0, [pc, #124]	; (8003248 <HAL_TIM_IC_CaptureCallback+0x134>)
 80031ca:	f009 f9c3 	bl	800c554 <_ZN3PID7pwm2angEt>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_TIM_IC_CaptureCallback+0x138>)
 80031d2:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_TIM_IC_CaptureCallback+0x138>)
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4619      	mov	r1, r3
 80031e4:	4818      	ldr	r0, [pc, #96]	; (8003248 <HAL_TIM_IC_CaptureCallback+0x134>)
 80031e6:	f009 f9f2 	bl	800c5ce <_ZN3PID8pwm2rateEt>
 80031ea:	4603      	mov	r3, r0
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_TIM_IC_CaptureCallback+0x138>)
 80031ee:	6153      	str	r3, [r2, #20]

				i++;
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_TIM_IC_CaptureCallback+0x128>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	b21a      	sxth	r2, r3
 80031fe:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_TIM_IC_CaptureCallback+0x128>)
 8003200:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_TIM_IC_CaptureCallback+0x128>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b21b      	sxth	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800320c:	fb83 2301 	smull	r2, r3, r3, r1
 8003210:	105a      	asrs	r2, r3, #1
 8003212:	17cb      	asrs	r3, r1, #31
 8003214:	1ad2      	subs	r2, r2, r3
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	1aca      	subs	r2, r1, r3
 800321e:	b212      	sxth	r2, r2
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_TIM_IC_CaptureCallback+0x128>)
 8003222:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000180 	.word	0x20000180
 8003230:	20000c9c 	.word	0x20000c9c
 8003234:	20000ca0 	.word	0x20000ca0
 8003238:	20000ca4 	.word	0x20000ca4
 800323c:	20000ca8 	.word	0x20000ca8
 8003240:	20000cac 	.word	0x20000cac
 8003244:	20000cd0 	.word	0x20000cd0
 8003248:	200006a8 	.word	0x200006a8
 800324c:	2000031c 	.word	0x2000031c
 8003250:	38e38e39 	.word	0x38e38e39

08003254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003258:	b672      	cpsid	i
}
 800325a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800325c:	e7fe      	b.n	800325c <Error_Handler+0x8>

0800325e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f85e 	bl	8003328 <_ZNSaIfEC1Ev>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f866 	bl	8003340 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZNSaIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f86d 	bl	8003366 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80032ae:	461a      	mov	r2, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f862 	bl	800337a <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe faf3 	bl	80018a4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681c      	ldr	r4, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f860 	bl	80033a0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80032e0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80032e2:	461a      	mov	r2, r3
 80032e4:	4629      	mov	r1, r5
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 f864 	bl	80033b4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ffd1 	bl	8003296 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bdb0      	pop	{r4, r5, r7, pc}

080032fe <_ZNSt6vectorIfSaIfEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 800330c:	6838      	ldr	r0, [r7, #0]
 800330e:	f000 f85f 	bl	80033d0 <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>
 8003312:	4603      	mov	r3, r0
 8003314:	4622      	mov	r2, r4
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f863 	bl	80033e4 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 800331e:	687b      	ldr	r3, [r7, #4]
      }
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}

08003328 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f895 	bl	8003460 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
	{ }
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
	if (__p)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f86e 	bl	8003474 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f865 	bl	8003492 <_ZSt8_DestroyIPfEvT_S1_>
    }
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f857 	bl	80034ac <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>
 80033fe:	f107 021c 	add.w	r2, r7, #28
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f860 	bl	80034ce <_ZNSt6vectorIfSaIfEEC1ERKS0_>
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff33 	bl	800327e <_ZNSaIfED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f864 	bl	80034ec <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	f107 0310 	add.w	r3, r7, #16
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f85d 	bl	80034ec <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ffb3 	bl	80033a0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800343a:	4604      	mov	r4, r0
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ffae 	bl	80033a0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003444:	4603      	mov	r3, r0
 8003446:	4619      	mov	r1, r3
 8003448:	4620      	mov	r0, r4
 800344a:	f000 f86d 	bl	8003528 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>
	vector __tmp(get_allocator());
 800344e:	f107 0310 	add.w	r3, r7, #16
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff38 	bl	80032c8 <_ZNSt6vectorIfSaIfEED1Ev>
      }
 8003458:	bf00      	nop
 800345a:	3724      	adds	r7, #36	; 0x24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd90      	pop	{r4, r7, pc}

08003460 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f85d 	bl	8003544 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f85d 	bl	800355e <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	f000 f85b 	bl	8003572 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80034bc:	4603      	mov	r3, r0
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f860 	bl	8003586 <_ZNSaIfEC1ERKS_>
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_ZNSt6vectorIfSaIfEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f860 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff20 	bl	8003340 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f85a 	bl	80035c0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f856 	bl	80035c0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8003514:	f107 030c 	add.w	r3, r7, #12
 8003518:	4619      	mov	r1, r3
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	f000 f850 	bl	80035c0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8003532:	461a      	mov	r2, r3
 8003534:	6839      	ldr	r1, [r7, #0]
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f858 	bl	80035ec <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>
    }
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8003550:	68b8      	ldr	r0, [r7, #8]
 8003552:	f009 f96e 	bl	800c832 <_ZdlPv>
      }
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003590:	6839      	ldr	r1, [r7, #0]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f837 	bl	8003606 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f833 	bl	800361c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
	}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80035f8:	68b8      	ldr	r0, [r7, #8]
 80035fa:	f000 f821 	bl	8003640 <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ffac 	bl	8003586 <_ZNSaIfEC1ERKS_>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fe85 	bl	8003340 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d110      	bne.n	8003686 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366a:	4293      	cmp	r3, r2
 800366c:	d10b      	bne.n	8003686 <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 800366e:	4812      	ldr	r0, [pc, #72]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003670:	f005 ff0a 	bl	8009488 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 8003674:	4811      	ldr	r0, [pc, #68]	; (80036bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003676:	f008 fc67 	bl	800bf48 <_ZN3PIDC1Ev>
Controller controller;
 800367a:	4811      	ldr	r0, [pc, #68]	; (80036c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800367c:	f005 f800 	bl	8008680 <_ZN10ControllerC1Ev>
std::vector<float> controller_output_ang;
 8003680:	4810      	ldr	r0, [pc, #64]	; (80036c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003682:	f7fe f928 	bl	80018d6 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d110      	bne.n	80036ae <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003692:	4293      	cmp	r3, r2
 8003694:	d10b      	bne.n	80036ae <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8003696:	480b      	ldr	r0, [pc, #44]	; (80036c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003698:	f7ff fe16 	bl	80032c8 <_ZNSt6vectorIfSaIfEED1Ev>
Controller controller;
 800369c:	4808      	ldr	r0, [pc, #32]	; (80036c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800369e:	f005 fc7d 	bl	8008f9c <_ZN10ControllerD1Ev>
PID pid;
 80036a2:	4806      	ldr	r0, [pc, #24]	; (80036bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80036a4:	f009 f83c 	bl	800c720 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 80036a8:	4803      	ldr	r0, [pc, #12]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80036aa:	f008 fc35 	bl	800bf18 <_ZN15Kalman_FiltresiD1Ev>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200004d0 	.word	0x200004d0
 80036bc:	200006a8 	.word	0x200006a8
 80036c0:	20000740 	.word	0x20000740
 80036c4:	20000c88 	.word	0x20000c88

080036c8 <_GLOBAL__sub_I_hi2c1>:
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036d0:	2001      	movs	r0, #1
 80036d2:	f7ff ffbf 	bl	8003654 <_Z41__static_initialization_and_destruction_0ii>
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_GLOBAL__sub_D_hi2c1>:
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
 80036dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036e0:	2000      	movs	r0, #0
 80036e2:	f7ff ffb7 	bl	8003654 <_Z41__static_initialization_and_destruction_0ii>
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_MspInit+0x5c>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	4a14      	ldr	r2, [pc, #80]	; (8003744 <HAL_MspInit+0x5c>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6193      	str	r3, [r2, #24]
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_MspInit+0x5c>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_MspInit+0x5c>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <HAL_MspInit+0x5c>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]
 8003712:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <HAL_MspInit+0x5c>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_MspInit+0x60>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_MspInit+0x60>)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	40021000 	.word	0x40021000
 8003748:	40010000 	.word	0x40010000

0800374c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <HAL_I2C_MspInit+0x70>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d123      	bne.n	80037b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_I2C_MspInit+0x74>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_I2C_MspInit+0x74>)
 8003772:	f043 0308 	orr.w	r3, r3, #8
 8003776:	6193      	str	r3, [r2, #24]
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_I2C_MspInit+0x74>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003784:	23c0      	movs	r3, #192	; 0xc0
 8003786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003788:	2312      	movs	r3, #18
 800378a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	4619      	mov	r1, r3
 8003796:	480b      	ldr	r0, [pc, #44]	; (80037c4 <HAL_I2C_MspInit+0x78>)
 8003798:	f000 fdf2 	bl	8004380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <HAL_I2C_MspInit+0x74>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_I2C_MspInit+0x74>)
 80037a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037a6:	61d3      	str	r3, [r2, #28]
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_I2C_MspInit+0x74>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037b4:	bf00      	nop
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40005400 	.word	0x40005400
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40010c00 	.word	0x40010c00

080037c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_TIM_PWM_MspInit+0x34>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10b      	bne.n	80037f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_TIM_PWM_MspInit+0x38>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	4a08      	ldr	r2, [pc, #32]	; (8003800 <HAL_TIM_PWM_MspInit+0x38>)
 80037e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037e4:	6193      	str	r3, [r2, #24]
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_TIM_PWM_MspInit+0x38>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40021000 	.word	0x40021000

08003804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 0318 	add.w	r3, r7, #24
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d114      	bne.n	800384e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	61d3      	str	r3, [r2, #28]
 8003830:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800383c:	2200      	movs	r2, #0
 800383e:	2101      	movs	r1, #1
 8003840:	201c      	movs	r0, #28
 8003842:	f000 fb78 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003846:	201c      	movs	r0, #28
 8003848:	f000 fb91 	bl	8003f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800384c:	e042      	b.n	80038d4 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a23      	ldr	r2, [pc, #140]	; (80038e0 <HAL_TIM_Base_MspInit+0xdc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d12c      	bne.n	80038b2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003858:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	61d3      	str	r3, [r2, #28]
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003888:	2301      	movs	r3, #1
 800388a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003894:	f107 0318 	add.w	r3, r7, #24
 8003898:	4619      	mov	r1, r3
 800389a:	4812      	ldr	r0, [pc, #72]	; (80038e4 <HAL_TIM_Base_MspInit+0xe0>)
 800389c:	f000 fd70 	bl	8004380 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80038a0:	2200      	movs	r2, #0
 80038a2:	2100      	movs	r1, #0
 80038a4:	201d      	movs	r0, #29
 80038a6:	f000 fb46 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038aa:	201d      	movs	r0, #29
 80038ac:	f000 fb5f 	bl	8003f6e <HAL_NVIC_EnableIRQ>
}
 80038b0:	e010      	b.n	80038d4 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_TIM_Base_MspInit+0xe4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d10b      	bne.n	80038d4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4a06      	ldr	r2, [pc, #24]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	61d3      	str	r3, [r2, #28]
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_TIM_Base_MspInit+0xd8>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
}
 80038d4:	bf00      	nop
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40010c00 	.word	0x40010c00
 80038e8:	40000800 	.word	0x40000800

080038ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_TIM_MspPostInit+0x8c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d131      	bne.n	8003970 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_TIM_MspPostInit+0x90>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4a1a      	ldr	r2, [pc, #104]	; (800397c <HAL_TIM_MspPostInit+0x90>)
 8003912:	f043 0308 	orr.w	r3, r3, #8
 8003916:	6193      	str	r3, [r2, #24]
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <HAL_TIM_MspPostInit+0x90>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_TIM_MspPostInit+0x90>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <HAL_TIM_MspPostInit+0x90>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6193      	str	r3, [r2, #24]
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_TIM_MspPostInit+0x90>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800393c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003946:	2302      	movs	r3, #2
 8003948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394a:	f107 0310 	add.w	r3, r7, #16
 800394e:	4619      	mov	r1, r3
 8003950:	480b      	ldr	r0, [pc, #44]	; (8003980 <HAL_TIM_MspPostInit+0x94>)
 8003952:	f000 fd15 	bl	8004380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8003956:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800395a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003960:	2302      	movs	r3, #2
 8003962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	f107 0310 	add.w	r3, r7, #16
 8003968:	4619      	mov	r1, r3
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <HAL_TIM_MspPostInit+0x98>)
 800396c:	f000 fd08 	bl	8004380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003970:	bf00      	nop
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40021000 	.word	0x40021000
 8003980:	40010c00 	.word	0x40010c00
 8003984:	40010800 	.word	0x40010800

08003988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <HAL_UART_MspInit+0x148>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d159      	bne.n	8003a5c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039a8:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	4a49      	ldr	r2, [pc, #292]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 80039ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b2:	6193      	str	r3, [r2, #24]
 80039b4:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c0:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a43      	ldr	r2, [pc, #268]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 80039c6:	f043 0304 	orr.w	r3, r3, #4
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 0318 	add.w	r3, r7, #24
 80039ea:	4619      	mov	r1, r3
 80039ec:	483a      	ldr	r0, [pc, #232]	; (8003ad8 <HAL_UART_MspInit+0x150>)
 80039ee:	f000 fcc7 	bl	8004380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a00:	f107 0318 	add.w	r3, r7, #24
 8003a04:	4619      	mov	r1, r3
 8003a06:	4834      	ldr	r0, [pc, #208]	; (8003ad8 <HAL_UART_MspInit+0x150>)
 8003a08:	f000 fcba 	bl	8004380 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003a0c:	4b33      	ldr	r3, [pc, #204]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a0e:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <HAL_UART_MspInit+0x158>)
 8003a10:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a12:	4b32      	ldr	r3, [pc, #200]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a18:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a1e:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a32:	2220      	movs	r2, #32
 8003a34:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003a3e:	4827      	ldr	r0, [pc, #156]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a40:	f000 fab0 	bl	8003fa4 <HAL_DMA_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003a4a:	f7ff fc03 	bl	8003254 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <HAL_UART_MspInit+0x154>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a5a:	e034      	b.n	8003ac6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <HAL_UART_MspInit+0x15c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d12f      	bne.n	8003ac6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a70:	61d3      	str	r3, [r2, #28]
 8003a72:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	6193      	str	r3, [r2, #24]
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_UART_MspInit+0x14c>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a96:	2304      	movs	r3, #4
 8003a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa2:	f107 0318 	add.w	r3, r7, #24
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	480b      	ldr	r0, [pc, #44]	; (8003ad8 <HAL_UART_MspInit+0x150>)
 8003aaa:	f000 fc69 	bl	8004380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003aae:	2308      	movs	r3, #8
 8003ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aba:	f107 0318 	add.w	r3, r7, #24
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <HAL_UART_MspInit+0x150>)
 8003ac2:	f000 fc5d 	bl	8004380 <HAL_GPIO_Init>
}
 8003ac6:	bf00      	nop
 8003ac8:	3728      	adds	r7, #40	; 0x28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40010800 	.word	0x40010800
 8003adc:	20000290 	.word	0x20000290
 8003ae0:	40020058 	.word	0x40020058
 8003ae4:	40004400 	.word	0x40004400

08003ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <NMI_Handler+0x4>

08003aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003af2:	e7fe      	b.n	8003af2 <HardFault_Handler+0x4>

08003af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003af8:	e7fe      	b.n	8003af8 <MemManage_Handler+0x4>

08003afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003afe:	e7fe      	b.n	8003afe <BusFault_Handler+0x4>

08003b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b04:	e7fe      	b.n	8003b04 <UsageFault_Handler+0x4>

08003b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b06:	b480      	push	{r7}
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b2e:	f000 f8eb 	bl	8003d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <DMA1_Channel5_IRQHandler+0x10>)
 8003b3e:	f000 faeb 	bl	8004118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000290 	.word	0x20000290

08003b4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <TIM2_IRQHandler+0x10>)
 8003b52:	f003 f9cf 	bl	8006ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000138 	.word	0x20000138

08003b60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <TIM3_IRQHandler+0x10>)
 8003b66:	f003 f9c5 	bl	8006ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000180 	.word	0x20000180

08003b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
	return 1;
 8003b78:	2301      	movs	r3, #1
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <_kill>:

int _kill(int pid, int sig)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b8c:	f00a fdbc 	bl	800e708 <__errno>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2216      	movs	r2, #22
 8003b94:	601a      	str	r2, [r3, #0]
	return -1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_exit>:

void _exit (int status)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003baa:	f04f 31ff 	mov.w	r1, #4294967295
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffe7 	bl	8003b82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bb4:	e7fe      	b.n	8003bb4 <_exit+0x12>
	...

08003bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <_sbrk+0x5c>)
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <_sbrk+0x60>)
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bcc:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <_sbrk+0x64>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <_sbrk+0x64>)
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <_sbrk+0x68>)
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <_sbrk+0x64>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d207      	bcs.n	8003bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003be8:	f00a fd8e 	bl	800e708 <__errno>
 8003bec:	4603      	mov	r3, r0
 8003bee:	220c      	movs	r2, #12
 8003bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	e009      	b.n	8003c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <_sbrk+0x64>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <_sbrk+0x64>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <_sbrk+0x64>)
 8003c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20005000 	.word	0x20005000
 8003c18:	00000400 	.word	0x00000400
 8003c1c:	20000d60 	.word	0x20000d60
 8003c20:	20000d88 	.word	0x20000d88

08003c24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c32:	e003      	b.n	8003c3c <LoopCopyDataInit>

08003c34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003c36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c3a:	3104      	adds	r1, #4

08003c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c3c:	480a      	ldr	r0, [pc, #40]	; (8003c68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003c40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c44:	d3f6      	bcc.n	8003c34 <CopyDataInit>
  ldr r2, =_sbss
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003c48:	e002      	b.n	8003c50 <LoopFillZerobss>

08003c4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003c4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003c4c:	f842 3b04 	str.w	r3, [r2], #4

08003c50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003c52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c54:	d3f9      	bcc.n	8003c4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c56:	f7ff ffe5 	bl	8003c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c5a:	f00a fd5b 	bl	800e714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c5e:	f7fd fe47 	bl	80018f0 <main>
  bx lr
 8003c62:	4770      	bx	lr
  ldr r3, =_sidata
 8003c64:	0800eef0 	.word	0x0800eef0
  ldr r0, =_sdata
 8003c68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c6c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003c70:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003c74:	20000d88 	.word	0x20000d88

08003c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c78:	e7fe      	b.n	8003c78 <ADC1_2_IRQHandler>
	...

08003c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_Init+0x28>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <HAL_Init+0x28>)
 8003c86:	f043 0310 	orr.w	r3, r3, #16
 8003c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c8c:	2003      	movs	r0, #3
 8003c8e:	f000 f947 	bl	8003f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c92:	2000      	movs	r0, #0
 8003c94:	f000 f808 	bl	8003ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c98:	f7ff fd26 	bl	80036e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_InitTick+0x54>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_InitTick+0x58>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f95f 	bl	8003f8a <HAL_SYSTICK_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00e      	b.n	8003cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d80a      	bhi.n	8003cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	f000 f927 	bl	8003f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce8:	4a06      	ldr	r2, [pc, #24]	; (8003d04 <HAL_InitTick+0x5c>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	20000008 	.word	0x20000008

08003d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_IncTick+0x1c>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_IncTick+0x20>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4413      	add	r3, r2
 8003d18:	4a03      	ldr	r2, [pc, #12]	; (8003d28 <HAL_IncTick+0x20>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	2000000c 	.word	0x2000000c
 8003d28:	20000d74 	.word	0x20000d74

08003d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d30:	4b02      	ldr	r3, [pc, #8]	; (8003d3c <HAL_GetTick+0x10>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	20000d74 	.word	0x20000d74

08003d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff fff0 	bl	8003d2c <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d005      	beq.n	8003d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_Delay+0x44>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d66:	bf00      	nop
 8003d68:	f7ff ffe0 	bl	8003d2c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f7      	bhi.n	8003d68 <HAL_Delay+0x28>
  {
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000000c 	.word	0x2000000c

08003d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4906      	ldr	r1, [pc, #24]	; (8003e20 <__NVIC_EnableIRQ+0x34>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	; (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eec:	d301      	bcc.n	8003ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <SysTick_Config+0x40>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efa:	210f      	movs	r1, #15
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	f7ff ff90 	bl	8003e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <SysTick_Config+0x40>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <SysTick_Config+0x40>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff2d 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f48:	f7ff ff42 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff90 	bl	8003e78 <NVIC_EncodePriority>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff5f 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f66:	bf00      	nop
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff35 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ffa2 	bl	8003edc <SysTick_Config>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e043      	b.n	8004042 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_DMA_Init+0xa8>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_DMA_Init+0xac>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	009a      	lsls	r2, r3, #2
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HAL_DMA_Init+0xb0>)
 8003fd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ff2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	bffdfff8 	.word	0xbffdfff8
 8004050:	cccccccd 	.word	0xcccccccd
 8004054:	40020000 	.word	0x40020000

08004058 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_DMA_Start_IT+0x20>
 8004074:	2302      	movs	r3, #2
 8004076:	e04a      	b.n	800410e <HAL_DMA_Start_IT+0xb6>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004086:	2b01      	cmp	r3, #1
 8004088:	d13a      	bne.n	8004100 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f938 	bl	8004324 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 020e 	orr.w	r2, r2, #14
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e00f      	b.n	80040ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 020a 	orr.w	r2, r2, #10
 80040ec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e005      	b.n	800410c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004108:	2302      	movs	r3, #2
 800410a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	2204      	movs	r2, #4
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d04f      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xc8>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d04a      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a66      	ldr	r2, [pc, #408]	; (8004308 <HAL_DMA_IRQHandler+0x1f0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d029      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xae>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a65      	ldr	r2, [pc, #404]	; (800430c <HAL_DMA_IRQHandler+0x1f4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <HAL_DMA_IRQHandler+0xaa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a63      	ldr	r2, [pc, #396]	; (8004310 <HAL_DMA_IRQHandler+0x1f8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01a      	beq.n	80041bc <HAL_DMA_IRQHandler+0xa4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a62      	ldr	r2, [pc, #392]	; (8004314 <HAL_DMA_IRQHandler+0x1fc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d012      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x9e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a60      	ldr	r2, [pc, #384]	; (8004318 <HAL_DMA_IRQHandler+0x200>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00a      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x98>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a5f      	ldr	r2, [pc, #380]	; (800431c <HAL_DMA_IRQHandler+0x204>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d102      	bne.n	80041aa <HAL_DMA_IRQHandler+0x92>
 80041a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041a8:	e00e      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041ae:	e00b      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041b4:	e008      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041ba:	e005      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041c0:	e002      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041c2:	2340      	movs	r3, #64	; 0x40
 80041c4:	e000      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb0>
 80041c6:	2304      	movs	r3, #4
 80041c8:	4a55      	ldr	r2, [pc, #340]	; (8004320 <HAL_DMA_IRQHandler+0x208>)
 80041ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8094 	beq.w	80042fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80041de:	e08e      	b.n	80042fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2202      	movs	r2, #2
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d056      	beq.n	800429e <HAL_DMA_IRQHandler+0x186>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d051      	beq.n	800429e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020a 	bic.w	r2, r2, #10
 8004216:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a38      	ldr	r2, [pc, #224]	; (8004308 <HAL_DMA_IRQHandler+0x1f0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d029      	beq.n	800427e <HAL_DMA_IRQHandler+0x166>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a37      	ldr	r2, [pc, #220]	; (800430c <HAL_DMA_IRQHandler+0x1f4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d022      	beq.n	800427a <HAL_DMA_IRQHandler+0x162>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a35      	ldr	r2, [pc, #212]	; (8004310 <HAL_DMA_IRQHandler+0x1f8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01a      	beq.n	8004274 <HAL_DMA_IRQHandler+0x15c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a34      	ldr	r2, [pc, #208]	; (8004314 <HAL_DMA_IRQHandler+0x1fc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d012      	beq.n	800426e <HAL_DMA_IRQHandler+0x156>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a32      	ldr	r2, [pc, #200]	; (8004318 <HAL_DMA_IRQHandler+0x200>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00a      	beq.n	8004268 <HAL_DMA_IRQHandler+0x150>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a31      	ldr	r2, [pc, #196]	; (800431c <HAL_DMA_IRQHandler+0x204>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d102      	bne.n	8004262 <HAL_DMA_IRQHandler+0x14a>
 800425c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004260:	e00e      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 8004262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004266:	e00b      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 8004268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800426c:	e008      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 800426e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004272:	e005      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 8004274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004278:	e002      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 800427a:	2320      	movs	r3, #32
 800427c:	e000      	b.n	8004280 <HAL_DMA_IRQHandler+0x168>
 800427e:	2302      	movs	r3, #2
 8004280:	4a27      	ldr	r2, [pc, #156]	; (8004320 <HAL_DMA_IRQHandler+0x208>)
 8004282:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d034      	beq.n	80042fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800429c:	e02f      	b.n	80042fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2208      	movs	r2, #8
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d028      	beq.n	8004300 <HAL_DMA_IRQHandler+0x1e8>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d023      	beq.n	8004300 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 020e 	bic.w	r2, r2, #14
 80042c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
    }
  }
  return;
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
}
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40020008 	.word	0x40020008
 800430c:	4002001c 	.word	0x4002001c
 8004310:	40020030 	.word	0x40020030
 8004314:	40020044 	.word	0x40020044
 8004318:	40020058 	.word	0x40020058
 800431c:	4002006c 	.word	0x4002006c
 8004320:	40020000 	.word	0x40020000

08004324 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f202 	lsl.w	r2, r1, r2
 8004340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b10      	cmp	r3, #16
 8004350:	d108      	bne.n	8004364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004362:	e007      	b.n	8004374 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
	...

08004380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004380:	b480      	push	{r7}
 8004382:	b08b      	sub	sp, #44	; 0x2c
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004392:	e169      	b.n	8004668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004394:	2201      	movs	r2, #1
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	f040 8158 	bne.w	8004662 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a9a      	ldr	r2, [pc, #616]	; (8004620 <HAL_GPIO_Init+0x2a0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d05e      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043bc:	4a98      	ldr	r2, [pc, #608]	; (8004620 <HAL_GPIO_Init+0x2a0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d875      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043c2:	4a98      	ldr	r2, [pc, #608]	; (8004624 <HAL_GPIO_Init+0x2a4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d058      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043c8:	4a96      	ldr	r2, [pc, #600]	; (8004624 <HAL_GPIO_Init+0x2a4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d86f      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043ce:	4a96      	ldr	r2, [pc, #600]	; (8004628 <HAL_GPIO_Init+0x2a8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d052      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043d4:	4a94      	ldr	r2, [pc, #592]	; (8004628 <HAL_GPIO_Init+0x2a8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d869      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043da:	4a94      	ldr	r2, [pc, #592]	; (800462c <HAL_GPIO_Init+0x2ac>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04c      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043e0:	4a92      	ldr	r2, [pc, #584]	; (800462c <HAL_GPIO_Init+0x2ac>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d863      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043e6:	4a92      	ldr	r2, [pc, #584]	; (8004630 <HAL_GPIO_Init+0x2b0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d046      	beq.n	800447a <HAL_GPIO_Init+0xfa>
 80043ec:	4a90      	ldr	r2, [pc, #576]	; (8004630 <HAL_GPIO_Init+0x2b0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d85d      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043f2:	2b12      	cmp	r3, #18
 80043f4:	d82a      	bhi.n	800444c <HAL_GPIO_Init+0xcc>
 80043f6:	2b12      	cmp	r3, #18
 80043f8:	d859      	bhi.n	80044ae <HAL_GPIO_Init+0x12e>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <HAL_GPIO_Init+0x80>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	0800447b 	.word	0x0800447b
 8004404:	08004455 	.word	0x08004455
 8004408:	08004467 	.word	0x08004467
 800440c:	080044a9 	.word	0x080044a9
 8004410:	080044af 	.word	0x080044af
 8004414:	080044af 	.word	0x080044af
 8004418:	080044af 	.word	0x080044af
 800441c:	080044af 	.word	0x080044af
 8004420:	080044af 	.word	0x080044af
 8004424:	080044af 	.word	0x080044af
 8004428:	080044af 	.word	0x080044af
 800442c:	080044af 	.word	0x080044af
 8004430:	080044af 	.word	0x080044af
 8004434:	080044af 	.word	0x080044af
 8004438:	080044af 	.word	0x080044af
 800443c:	080044af 	.word	0x080044af
 8004440:	080044af 	.word	0x080044af
 8004444:	0800445d 	.word	0x0800445d
 8004448:	08004471 	.word	0x08004471
 800444c:	4a79      	ldr	r2, [pc, #484]	; (8004634 <HAL_GPIO_Init+0x2b4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004452:	e02c      	b.n	80044ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	623b      	str	r3, [r7, #32]
          break;
 800445a:	e029      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	3304      	adds	r3, #4
 8004462:	623b      	str	r3, [r7, #32]
          break;
 8004464:	e024      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	3308      	adds	r3, #8
 800446c:	623b      	str	r3, [r7, #32]
          break;
 800446e:	e01f      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	330c      	adds	r3, #12
 8004476:	623b      	str	r3, [r7, #32]
          break;
 8004478:	e01a      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004482:	2304      	movs	r3, #4
 8004484:	623b      	str	r3, [r7, #32]
          break;
 8004486:	e013      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004490:	2308      	movs	r3, #8
 8004492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	611a      	str	r2, [r3, #16]
          break;
 800449a:	e009      	b.n	80044b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800449c:	2308      	movs	r3, #8
 800449e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	615a      	str	r2, [r3, #20]
          break;
 80044a6:	e003      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044a8:	2300      	movs	r3, #0
 80044aa:	623b      	str	r3, [r7, #32]
          break;
 80044ac:	e000      	b.n	80044b0 <HAL_GPIO_Init+0x130>
          break;
 80044ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2bff      	cmp	r3, #255	; 0xff
 80044b4:	d801      	bhi.n	80044ba <HAL_GPIO_Init+0x13a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	e001      	b.n	80044be <HAL_GPIO_Init+0x13e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2bff      	cmp	r3, #255	; 0xff
 80044c4:	d802      	bhi.n	80044cc <HAL_GPIO_Init+0x14c>
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	e002      	b.n	80044d2 <HAL_GPIO_Init+0x152>
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	3b08      	subs	r3, #8
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	210f      	movs	r1, #15
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	6a39      	ldr	r1, [r7, #32]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80b1 	beq.w	8004662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <HAL_GPIO_Init+0x2b8>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	4a4c      	ldr	r2, [pc, #304]	; (8004638 <HAL_GPIO_Init+0x2b8>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6193      	str	r3, [r2, #24]
 800450c:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <HAL_GPIO_Init+0x2b8>)
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004518:	4a48      	ldr	r2, [pc, #288]	; (800463c <HAL_GPIO_Init+0x2bc>)
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004524:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220f      	movs	r2, #15
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4013      	ands	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a40      	ldr	r2, [pc, #256]	; (8004640 <HAL_GPIO_Init+0x2c0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_GPIO_Init+0x1ec>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3f      	ldr	r2, [pc, #252]	; (8004644 <HAL_GPIO_Init+0x2c4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00d      	beq.n	8004568 <HAL_GPIO_Init+0x1e8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3e      	ldr	r2, [pc, #248]	; (8004648 <HAL_GPIO_Init+0x2c8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <HAL_GPIO_Init+0x1e4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3d      	ldr	r2, [pc, #244]	; (800464c <HAL_GPIO_Init+0x2cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_GPIO_Init+0x1e0>
 800455c:	2303      	movs	r3, #3
 800455e:	e006      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 8004560:	2304      	movs	r3, #4
 8004562:	e004      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 8004564:	2302      	movs	r3, #2
 8004566:	e002      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_GPIO_Init+0x1ee>
 800456c:	2300      	movs	r3, #0
 800456e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004570:	f002 0203 	and.w	r2, r2, #3
 8004574:	0092      	lsls	r2, r2, #2
 8004576:	4093      	lsls	r3, r2
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800457e:	492f      	ldr	r1, [pc, #188]	; (800463c <HAL_GPIO_Init+0x2bc>)
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	3302      	adds	r3, #2
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004598:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	492c      	ldr	r1, [pc, #176]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]
 80045a4:	e006      	b.n	80045b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045a6:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	4928      	ldr	r1, [pc, #160]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	4922      	ldr	r1, [pc, #136]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
 80045cc:	e006      	b.n	80045dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	491e      	ldr	r1, [pc, #120]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045d8:	4013      	ands	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	4918      	ldr	r1, [pc, #96]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]
 80045f4:	e006      	b.n	8004604 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045f6:	4b16      	ldr	r3, [pc, #88]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	4914      	ldr	r1, [pc, #80]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 8004600:	4013      	ands	r3, r2
 8004602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d021      	beq.n	8004654 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	490e      	ldr	r1, [pc, #56]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	60cb      	str	r3, [r1, #12]
 800461c:	e021      	b.n	8004662 <HAL_GPIO_Init+0x2e2>
 800461e:	bf00      	nop
 8004620:	10320000 	.word	0x10320000
 8004624:	10310000 	.word	0x10310000
 8004628:	10220000 	.word	0x10220000
 800462c:	10210000 	.word	0x10210000
 8004630:	10120000 	.word	0x10120000
 8004634:	10110000 	.word	0x10110000
 8004638:	40021000 	.word	0x40021000
 800463c:	40010000 	.word	0x40010000
 8004640:	40010800 	.word	0x40010800
 8004644:	40010c00 	.word	0x40010c00
 8004648:	40011000 	.word	0x40011000
 800464c:	40011400 	.word	0x40011400
 8004650:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_GPIO_Init+0x304>)
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	43db      	mvns	r3, r3
 800465c:	4909      	ldr	r1, [pc, #36]	; (8004684 <HAL_GPIO_Init+0x304>)
 800465e:	4013      	ands	r3, r2
 8004660:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	f47f ae8e 	bne.w	8004394 <HAL_GPIO_Init+0x14>
  }
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	372c      	adds	r7, #44	; 0x2c
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	40010400 	.word	0x40010400

08004688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046a4:	e003      	b.n	80046ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	041a      	lsls	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	611a      	str	r2, [r3, #16]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4013      	ands	r3, r2
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	43d9      	mvns	r1, r3
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	400b      	ands	r3, r1
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	611a      	str	r2, [r3, #16]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e12b      	b.n	8004956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff f81a 	bl	800374c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800474e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004750:	f002 f84e 	bl	80067f0 <HAL_RCC_GetPCLK1Freq>
 8004754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4a81      	ldr	r2, [pc, #516]	; (8004960 <HAL_I2C_Init+0x274>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d807      	bhi.n	8004770 <HAL_I2C_Init+0x84>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a80      	ldr	r2, [pc, #512]	; (8004964 <HAL_I2C_Init+0x278>)
 8004764:	4293      	cmp	r3, r2
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e006      	b.n	800477e <HAL_I2C_Init+0x92>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a7d      	ldr	r2, [pc, #500]	; (8004968 <HAL_I2C_Init+0x27c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e0e7      	b.n	8004956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a78      	ldr	r2, [pc, #480]	; (800496c <HAL_I2C_Init+0x280>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	0c9b      	lsrs	r3, r3, #18
 8004790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a6a      	ldr	r2, [pc, #424]	; (8004960 <HAL_I2C_Init+0x274>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d802      	bhi.n	80047c0 <HAL_I2C_Init+0xd4>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3301      	adds	r3, #1
 80047be:	e009      	b.n	80047d4 <HAL_I2C_Init+0xe8>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	4a69      	ldr	r2, [pc, #420]	; (8004970 <HAL_I2C_Init+0x284>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	3301      	adds	r3, #1
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	430b      	orrs	r3, r1
 80047da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	495c      	ldr	r1, [pc, #368]	; (8004960 <HAL_I2C_Init+0x274>)
 80047f0:	428b      	cmp	r3, r1
 80047f2:	d819      	bhi.n	8004828 <HAL_I2C_Init+0x13c>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e59      	subs	r1, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004802:	1c59      	adds	r1, r3, #1
 8004804:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004808:	400b      	ands	r3, r1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_I2C_Init+0x138>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1e59      	subs	r1, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fbb1 f3f3 	udiv	r3, r1, r3
 800481c:	3301      	adds	r3, #1
 800481e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004822:	e051      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004824:	2304      	movs	r3, #4
 8004826:	e04f      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d111      	bne.n	8004854 <HAL_I2C_Init+0x168>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	440b      	add	r3, r1
 800483e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e012      	b.n	800487a <HAL_I2C_Init+0x18e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1e58      	subs	r0, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	0099      	lsls	r1, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	fbb0 f3f3 	udiv	r3, r0, r3
 800486a:	3301      	adds	r3, #1
 800486c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Init+0x196>
 800487e:	2301      	movs	r3, #1
 8004880:	e022      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10e      	bne.n	80048a8 <HAL_I2C_Init+0x1bc>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1e58      	subs	r0, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	440b      	add	r3, r1
 8004898:	fbb0 f3f3 	udiv	r3, r0, r3
 800489c:	3301      	adds	r3, #1
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	e00f      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1e58      	subs	r0, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	0099      	lsls	r1, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	6809      	ldr	r1, [r1, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6911      	ldr	r1, [r2, #16]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68d2      	ldr	r2, [r2, #12]
 8004902:	4311      	orrs	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	430b      	orrs	r3, r1
 800490a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	000186a0 	.word	0x000186a0
 8004964:	001e847f 	.word	0x001e847f
 8004968:	003d08ff 	.word	0x003d08ff
 800496c:	431bde83 	.word	0x431bde83
 8004970:	10624dd3 	.word	0x10624dd3

08004974 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	461a      	mov	r2, r3
 8004980:	460b      	mov	r3, r1
 8004982:	817b      	strh	r3, [r7, #10]
 8004984:	4613      	mov	r3, r2
 8004986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004988:	f7ff f9d0 	bl	8003d2c <HAL_GetTick>
 800498c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	f040 80e0 	bne.w	8004b5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2319      	movs	r3, #25
 80049a2:	2201      	movs	r2, #1
 80049a4:	4970      	ldr	r1, [pc, #448]	; (8004b68 <HAL_I2C_Master_Transmit+0x1f4>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f001 f972 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
 80049b4:	e0d3      	b.n	8004b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_I2C_Master_Transmit+0x50>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e0cc      	b.n	8004b5e <HAL_I2C_Master_Transmit+0x1ea>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d007      	beq.n	80049ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2221      	movs	r2, #33	; 0x21
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2210      	movs	r2, #16
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	893a      	ldrh	r2, [r7, #8]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a50      	ldr	r2, [pc, #320]	; (8004b6c <HAL_I2C_Master_Transmit+0x1f8>)
 8004a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a2c:	8979      	ldrh	r1, [r7, #10]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fe5e 	bl	80056f4 <I2C_MasterRequestWrite>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e08d      	b.n	8004b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a58:	e066      	b.n	8004b28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f001 f9ec 	bl	8005e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00d      	beq.n	8004a86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d107      	bne.n	8004a82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06b      	b.n	8004b5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d11b      	bne.n	8004afc <HAL_I2C_Master_Transmit+0x188>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d017      	beq.n	8004afc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	6a39      	ldr	r1, [r7, #32]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f001 f9dc 	bl	8005ebe <I2C_WaitOnBTFFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d107      	bne.n	8004b24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e01a      	b.n	8004b5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d194      	bne.n	8004a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e000      	b.n	8004b5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	00100002 	.word	0x00100002
 8004b6c:	ffff0000 	.word	0xffff0000

08004b70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	; 0x30
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	817b      	strh	r3, [r7, #10]
 8004b80:	4613      	mov	r3, r2
 8004b82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b88:	f7ff f8d0 	bl	8003d2c <HAL_GetTick>
 8004b8c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	f040 823f 	bne.w	800501a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2319      	movs	r3, #25
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	497f      	ldr	r1, [pc, #508]	; (8004da4 <HAL_I2C_Master_Receive+0x234>)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f001 f872 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e232      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_I2C_Master_Receive+0x54>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e22b      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d007      	beq.n	8004bea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2222      	movs	r2, #34	; 0x22
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2210      	movs	r2, #16
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	893a      	ldrh	r2, [r7, #8]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a5f      	ldr	r2, [pc, #380]	; (8004da8 <HAL_I2C_Master_Receive+0x238>)
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c2c:	8979      	ldrh	r1, [r7, #10]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fde0 	bl	80057f8 <I2C_MasterRequestRead>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e1ec      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d113      	bne.n	8004c72 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	e1c0      	b.n	8004ff4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d11e      	bne.n	8004cb8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c8a:	b672      	cpsid	i
}
 8004c8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cb4:	b662      	cpsie	i
}
 8004cb6:	e035      	b.n	8004d24 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d11e      	bne.n	8004cfe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd0:	b672      	cpsid	i
}
 8004cd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cfa:	b662      	cpsie	i
}
 8004cfc:	e012      	b.n	8004d24 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d24:	e166      	b.n	8004ff4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	f200 811f 	bhi.w	8004f6e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d123      	bne.n	8004d80 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f001 f8ff 	bl	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e167      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d7e:	e139      	b.n	8004ff4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d152      	bne.n	8004e2e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	2200      	movs	r2, #0
 8004d90:	4906      	ldr	r1, [pc, #24]	; (8004dac <HAL_I2C_Master_Receive+0x23c>)
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 ff7c 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e13c      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
 8004da2:	bf00      	nop
 8004da4:	00100002 	.word	0x00100002
 8004da8:	ffff0000 	.word	0xffff0000
 8004dac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004db0:	b672      	cpsid	i
}
 8004db2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004df6:	b662      	cpsie	i
}
 8004df8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e2c:	e0e2      	b.n	8004ff4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2200      	movs	r2, #0
 8004e36:	497b      	ldr	r1, [pc, #492]	; (8005024 <HAL_I2C_Master_Receive+0x4b4>)
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 ff29 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0e9      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e58:	b672      	cpsid	i
}
 8004e5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e8e:	4b66      	ldr	r3, [pc, #408]	; (8005028 <HAL_I2C_Master_Receive+0x4b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	08db      	lsrs	r3, r3, #3
 8004e94:	4a65      	ldr	r2, [pc, #404]	; (800502c <HAL_I2C_Master_Receive+0x4bc>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	0a1a      	lsrs	r2, r3, #8
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00da      	lsls	r2, r3, #3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d118      	bne.n	8004ee6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f043 0220 	orr.w	r2, r3, #32
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004ed6:	b662      	cpsie	i
}
 8004ed8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e09a      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d1d9      	bne.n	8004ea8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f36:	b662      	cpsie	i
}
 8004f38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f6c:	e042      	b.n	8004ff4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 ffe4 	bl	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e04c      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d118      	bne.n	8004ff4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f ae94 	bne.w	8004d26 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3728      	adds	r7, #40	; 0x28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	00010004 	.word	0x00010004
 8005028:	20000004 	.word	0x20000004
 800502c:	14f8b589 	.word	0x14f8b589

08005030 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	461a      	mov	r2, r3
 800503e:	4603      	mov	r3, r0
 8005040:	817b      	strh	r3, [r7, #10]
 8005042:	460b      	mov	r3, r1
 8005044:	813b      	strh	r3, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800504a:	f7fe fe6f 	bl	8003d2c <HAL_GetTick>
 800504e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b20      	cmp	r3, #32
 800505a:	f040 80d9 	bne.w	8005210 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2319      	movs	r3, #25
 8005064:	2201      	movs	r2, #1
 8005066:	496d      	ldr	r1, [pc, #436]	; (800521c <HAL_I2C_Mem_Write+0x1ec>)
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fe11 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005074:	2302      	movs	r3, #2
 8005076:	e0cc      	b.n	8005212 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_I2C_Mem_Write+0x56>
 8005082:	2302      	movs	r3, #2
 8005084:	e0c5      	b.n	8005212 <HAL_I2C_Mem_Write+0x1e2>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d007      	beq.n	80050ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a3a      	ldr	r2, [r7, #32]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a4d      	ldr	r2, [pc, #308]	; (8005220 <HAL_I2C_Mem_Write+0x1f0>)
 80050ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ee:	88f8      	ldrh	r0, [r7, #6]
 80050f0:	893a      	ldrh	r2, [r7, #8]
 80050f2:	8979      	ldrh	r1, [r7, #10]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4603      	mov	r3, r0
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fc48 	bl	8005994 <I2C_RequestMemoryWrite>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d052      	beq.n	80051b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e081      	b.n	8005212 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fe92 	bl	8005e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	2b04      	cmp	r3, #4
 8005124:	d107      	bne.n	8005136 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e06b      	b.n	8005212 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d11b      	bne.n	80051b0 <HAL_I2C_Mem_Write+0x180>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	2b00      	cmp	r3, #0
 800517e:	d017      	beq.n	80051b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1aa      	bne.n	800510e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fe7e 	bl	8005ebe <I2C_WaitOnBTFFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00d      	beq.n	80051e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d107      	bne.n	80051e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e016      	b.n	8005212 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	e000      	b.n	8005212 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	00100002 	.word	0x00100002
 8005220:	ffff0000 	.word	0xffff0000

08005224 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	4608      	mov	r0, r1
 800522e:	4611      	mov	r1, r2
 8005230:	461a      	mov	r2, r3
 8005232:	4603      	mov	r3, r0
 8005234:	817b      	strh	r3, [r7, #10]
 8005236:	460b      	mov	r3, r1
 8005238:	813b      	strh	r3, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005242:	f7fe fd73 	bl	8003d2c <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b20      	cmp	r3, #32
 8005252:	f040 8244 	bne.w	80056de <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2319      	movs	r3, #25
 800525c:	2201      	movs	r2, #1
 800525e:	4982      	ldr	r1, [pc, #520]	; (8005468 <HAL_I2C_Mem_Read+0x244>)
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fd15 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
 800526e:	e237      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_I2C_Mem_Read+0x5a>
 800527a:	2302      	movs	r3, #2
 800527c:	e230      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d007      	beq.n	80052a4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2222      	movs	r2, #34	; 0x22
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2240      	movs	r2, #64	; 0x40
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a62      	ldr	r2, [pc, #392]	; (800546c <HAL_I2C_Mem_Read+0x248>)
 80052e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052e6:	88f8      	ldrh	r0, [r7, #6]
 80052e8:	893a      	ldrh	r2, [r7, #8]
 80052ea:	8979      	ldrh	r1, [r7, #10]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	4603      	mov	r3, r0
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fbe2 	bl	8005ac0 <I2C_RequestMemoryRead>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e1ec      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	2b00      	cmp	r3, #0
 800530c:	d113      	bne.n	8005336 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e1c0      	b.n	80056b8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533a:	2b01      	cmp	r3, #1
 800533c:	d11e      	bne.n	800537c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800534e:	b672      	cpsid	i
}
 8005350:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005352:	2300      	movs	r3, #0
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005376:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005378:	b662      	cpsie	i
}
 800537a:	e035      	b.n	80053e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	2b02      	cmp	r3, #2
 8005382:	d11e      	bne.n	80053c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005392:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005394:	b672      	cpsid	i
}
 8005396:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053be:	b662      	cpsie	i
}
 80053c0:	e012      	b.n	80053e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80053e8:	e166      	b.n	80056b8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	f200 811f 	bhi.w	8005632 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d123      	bne.n	8005444 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fd9d 	bl	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e167      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005442:	e139      	b.n	80056b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	2b02      	cmp	r3, #2
 800544a:	d152      	bne.n	80054f2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	2200      	movs	r2, #0
 8005454:	4906      	ldr	r1, [pc, #24]	; (8005470 <HAL_I2C_Mem_Read+0x24c>)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fc1a 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e13c      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
 8005466:	bf00      	nop
 8005468:	00100002 	.word	0x00100002
 800546c:	ffff0000 	.word	0xffff0000
 8005470:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005474:	b672      	cpsid	i
}
 8005476:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80054ba:	b662      	cpsie	i
}
 80054bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054f0:	e0e2      	b.n	80056b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	2200      	movs	r2, #0
 80054fa:	497b      	ldr	r1, [pc, #492]	; (80056e8 <HAL_I2C_Mem_Read+0x4c4>)
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fbc7 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0e9      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800551c:	b672      	cpsid	i
}
 800551e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005552:	4b66      	ldr	r3, [pc, #408]	; (80056ec <HAL_I2C_Mem_Read+0x4c8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	08db      	lsrs	r3, r3, #3
 8005558:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_I2C_Mem_Read+0x4cc>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	0a1a      	lsrs	r2, r3, #8
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	00da      	lsls	r2, r3, #3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	3b01      	subs	r3, #1
 8005570:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d118      	bne.n	80055aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800559a:	b662      	cpsie	i
}
 800559c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e09a      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d1d9      	bne.n	800556c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055fa:	b662      	cpsie	i
}
 80055fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005630:	e042      	b.n	80056b8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005634:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fc82 	bl	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e04c      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d118      	bne.n	80056b8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f ae94 	bne.w	80053ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	e000      	b.n	80056e0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80056de:	2302      	movs	r3, #2
  }
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3728      	adds	r7, #40	; 0x28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	00010004 	.word	0x00010004
 80056ec:	20000004 	.word	0x20000004
 80056f0:	14f8b589 	.word	0x14f8b589

080056f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	460b      	mov	r3, r1
 8005702:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d006      	beq.n	800571e <I2C_MasterRequestWrite+0x2a>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d003      	beq.n	800571e <I2C_MasterRequestWrite+0x2a>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800571c:	d108      	bne.n	8005730 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e00b      	b.n	8005748 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	2b12      	cmp	r3, #18
 8005736:	d107      	bne.n	8005748 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005746:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fa9b 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576e:	d103      	bne.n	8005778 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e035      	b.n	80057e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005784:	d108      	bne.n	8005798 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005794:	611a      	str	r2, [r3, #16]
 8005796:	e01b      	b.n	80057d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005798:	897b      	ldrh	r3, [r7, #10]
 800579a:	11db      	asrs	r3, r3, #7
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f003 0306 	and.w	r3, r3, #6
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f063 030f 	orn	r3, r3, #15
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	490e      	ldr	r1, [pc, #56]	; (80057f0 <I2C_MasterRequestWrite+0xfc>)
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fac1 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e010      	b.n	80057e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057c6:	897b      	ldrh	r3, [r7, #10]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4907      	ldr	r1, [pc, #28]	; (80057f4 <I2C_MasterRequestWrite+0x100>)
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fab1 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	00010008 	.word	0x00010008
 80057f4:	00010002 	.word	0x00010002

080057f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	460b      	mov	r3, r1
 8005806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800581c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d006      	beq.n	8005832 <I2C_MasterRequestRead+0x3a>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d003      	beq.n	8005832 <I2C_MasterRequestRead+0x3a>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005830:	d108      	bne.n	8005844 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e00b      	b.n	800585c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	2b11      	cmp	r3, #17
 800584a:	d107      	bne.n	800585c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fa11 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	d103      	bne.n	800588c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e079      	b.n	8005984 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005898:	d108      	bne.n	80058ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	611a      	str	r2, [r3, #16]
 80058aa:	e05f      	b.n	800596c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058ac:	897b      	ldrh	r3, [r7, #10]
 80058ae:	11db      	asrs	r3, r3, #7
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f063 030f 	orn	r3, r3, #15
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	4930      	ldr	r1, [pc, #192]	; (800598c <I2C_MasterRequestRead+0x194>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fa37 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e054      	b.n	8005984 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4929      	ldr	r1, [pc, #164]	; (8005990 <I2C_MasterRequestRead+0x198>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fa27 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e044      	b.n	8005984 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800591e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f9af 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00d      	beq.n	8005954 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005946:	d103      	bne.n	8005950 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e017      	b.n	8005984 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005954:	897b      	ldrh	r3, [r7, #10]
 8005956:	11db      	asrs	r3, r3, #7
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 0306 	and.w	r3, r3, #6
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f063 030e 	orn	r3, r3, #14
 8005964:	b2da      	uxtb	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4907      	ldr	r1, [pc, #28]	; (8005990 <I2C_MasterRequestRead+0x198>)
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f9e3 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	00010008 	.word	0x00010008
 8005990:	00010002 	.word	0x00010002

08005994 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	4608      	mov	r0, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	461a      	mov	r2, r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	817b      	strh	r3, [r7, #10]
 80059a6:	460b      	mov	r3, r1
 80059a8:	813b      	strh	r3, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f960 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e4:	d103      	bne.n	80059ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e05f      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059f2:	897b      	ldrh	r3, [r7, #10]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	492d      	ldr	r1, [pc, #180]	; (8005abc <I2C_RequestMemoryWrite+0x128>)
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f998 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e04c      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a30:	6a39      	ldr	r1, [r7, #32]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fa02 	bl	8005e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d107      	bne.n	8005a56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e02b      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d105      	bne.n	8005a6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	e021      	b.n	8005ab0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a6c:	893b      	ldrh	r3, [r7, #8]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	6a39      	ldr	r1, [r7, #32]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f9dc 	bl	8005e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00d      	beq.n	8005aa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d107      	bne.n	8005aa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e005      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aa6:	893b      	ldrh	r3, [r7, #8]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	00010002 	.word	0x00010002

08005ac0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	817b      	strh	r3, [r7, #10]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	813b      	strh	r3, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f8c2 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b20:	d103      	bne.n	8005b2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e0aa      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b2e:	897b      	ldrh	r3, [r7, #10]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	6a3a      	ldr	r2, [r7, #32]
 8005b42:	4952      	ldr	r1, [pc, #328]	; (8005c8c <I2C_RequestMemoryRead+0x1cc>)
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f8fa 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e097      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	6a39      	ldr	r1, [r7, #32]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f964 	bl	8005e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d107      	bne.n	8005b92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e076      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d105      	bne.n	8005ba8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	611a      	str	r2, [r3, #16]
 8005ba6:	e021      	b.n	8005bec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ba8:	893b      	ldrh	r3, [r7, #8]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb8:	6a39      	ldr	r1, [r7, #32]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f93e 	bl	8005e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d107      	bne.n	8005bde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e050      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be2:	893b      	ldrh	r3, [r7, #8]
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	6a39      	ldr	r1, [r7, #32]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f923 	bl	8005e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d107      	bne.n	8005c14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e035      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f82b 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d103      	bne.n	8005c58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e013      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c5c:	897b      	ldrh	r3, [r7, #10]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	4906      	ldr	r1, [pc, #24]	; (8005c8c <I2C_RequestMemoryRead+0x1cc>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f863 	bl	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	00010002 	.word	0x00010002

08005c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ca0:	e025      	b.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d021      	beq.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005caa:	f7fe f83f 	bl	8003d2c <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d116      	bne.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f043 0220 	orr.w	r2, r3, #32
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e023      	b.n	8005d36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d10d      	bne.n	8005d14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4013      	ands	r3, r2
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	e00c      	b.n	8005d2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	43da      	mvns	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bf0c      	ite	eq
 8005d26:	2301      	moveq	r3, #1
 8005d28:	2300      	movne	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d0b6      	beq.n	8005ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d4c:	e051      	b.n	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	d123      	bne.n	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f043 0204 	orr.w	r2, r3, #4
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e046      	b.n	8005e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d021      	beq.n	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dae:	f7fd ffbd 	bl	8003d2c <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d116      	bne.n	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e020      	b.n	8005e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d10c      	bne.n	8005e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	43da      	mvns	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf14      	ite	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	2300      	moveq	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	e00b      	b.n	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	43da      	mvns	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4013      	ands	r3, r2
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bf14      	ite	ne
 8005e28:	2301      	movne	r3, #1
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d18d      	bne.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e48:	e02d      	b.n	8005ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f8ce 	bl	8005fec <I2C_IsAcknowledgeFailed>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e02d      	b.n	8005eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d021      	beq.n	8005ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fd ff63 	bl	8003d2c <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d116      	bne.n	8005ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0220 	orr.w	r2, r3, #32
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e007      	b.n	8005eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb0:	2b80      	cmp	r3, #128	; 0x80
 8005eb2:	d1ca      	bne.n	8005e4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005eca:	e02d      	b.n	8005f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f88d 	bl	8005fec <I2C_IsAcknowledgeFailed>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e02d      	b.n	8005f38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee2:	d021      	beq.n	8005f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee4:	f7fd ff22 	bl	8003d2c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d116      	bne.n	8005f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e007      	b.n	8005f38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d1ca      	bne.n	8005ecc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f4c:	e042      	b.n	8005fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d119      	bne.n	8005f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0210 	mvn.w	r2, #16
 8005f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e029      	b.n	8005fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f90:	f7fd fecc 	bl	8003d2c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d302      	bcc.n	8005fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d116      	bne.n	8005fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e007      	b.n	8005fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d1b5      	bne.n	8005f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006002:	d11b      	bne.n	800603c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800600c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f043 0204 	orr.w	r2, r3, #4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e26c      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8087 	beq.w	8006176 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006068:	4b92      	ldr	r3, [pc, #584]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b04      	cmp	r3, #4
 8006072:	d00c      	beq.n	800608e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006074:	4b8f      	ldr	r3, [pc, #572]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b08      	cmp	r3, #8
 800607e:	d112      	bne.n	80060a6 <HAL_RCC_OscConfig+0x5e>
 8006080:	4b8c      	ldr	r3, [pc, #560]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608c:	d10b      	bne.n	80060a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608e:	4b89      	ldr	r3, [pc, #548]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d06c      	beq.n	8006174 <HAL_RCC_OscConfig+0x12c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d168      	bne.n	8006174 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e246      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ae:	d106      	bne.n	80060be <HAL_RCC_OscConfig+0x76>
 80060b0:	4b80      	ldr	r3, [pc, #512]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a7f      	ldr	r2, [pc, #508]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e02e      	b.n	800611c <HAL_RCC_OscConfig+0xd4>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCC_OscConfig+0x98>
 80060c6:	4b7b      	ldr	r3, [pc, #492]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7a      	ldr	r2, [pc, #488]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	4b78      	ldr	r3, [pc, #480]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a77      	ldr	r2, [pc, #476]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e01d      	b.n	800611c <HAL_RCC_OscConfig+0xd4>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0xbc>
 80060ea:	4b72      	ldr	r3, [pc, #456]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a71      	ldr	r2, [pc, #452]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a6e      	ldr	r2, [pc, #440]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0xd4>
 8006104:	4b6b      	ldr	r3, [pc, #428]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6a      	ldr	r2, [pc, #424]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b68      	ldr	r3, [pc, #416]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a67      	ldr	r2, [pc, #412]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800611a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006124:	f7fd fe02 	bl	8003d2c <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800612c:	f7fd fdfe 	bl	8003d2c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b64      	cmp	r3, #100	; 0x64
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e1fa      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4b5d      	ldr	r3, [pc, #372]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0xe4>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614c:	f7fd fdee 	bl	8003d2c <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006154:	f7fd fdea 	bl	8003d2c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	; 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e1e6      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	4b53      	ldr	r3, [pc, #332]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x10c>
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d063      	beq.n	800624a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006182:	4b4c      	ldr	r3, [pc, #304]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800618e:	4b49      	ldr	r3, [pc, #292]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b08      	cmp	r3, #8
 8006198:	d11c      	bne.n	80061d4 <HAL_RCC_OscConfig+0x18c>
 800619a:	4b46      	ldr	r3, [pc, #280]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d116      	bne.n	80061d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	4b43      	ldr	r3, [pc, #268]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_RCC_OscConfig+0x176>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d001      	beq.n	80061be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e1ba      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4b3d      	ldr	r3, [pc, #244]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4939      	ldr	r1, [pc, #228]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d2:	e03a      	b.n	800624a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d020      	beq.n	800621e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061dc:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <HAL_RCC_OscConfig+0x270>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e2:	f7fd fda3 	bl	8003d2c <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ea:	f7fd fd9f 	bl	8003d2c <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e19b      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fc:	4b2d      	ldr	r3, [pc, #180]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0f0      	beq.n	80061ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006208:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	4927      	ldr	r1, [pc, #156]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006218:	4313      	orrs	r3, r2
 800621a:	600b      	str	r3, [r1, #0]
 800621c:	e015      	b.n	800624a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800621e:	4b26      	ldr	r3, [pc, #152]	; (80062b8 <HAL_RCC_OscConfig+0x270>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006224:	f7fd fd82 	bl	8003d2c <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800622c:	f7fd fd7e 	bl	8003d2c <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e17a      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d03a      	beq.n	80062cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d019      	beq.n	8006292 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800625e:	4b17      	ldr	r3, [pc, #92]	; (80062bc <HAL_RCC_OscConfig+0x274>)
 8006260:	2201      	movs	r2, #1
 8006262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006264:	f7fd fd62 	bl	8003d2c <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800626c:	f7fd fd5e 	bl	8003d2c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e15a      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <HAL_RCC_OscConfig+0x26c>)
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800628a:	2001      	movs	r0, #1
 800628c:	f000 fad8 	bl	8006840 <RCC_Delay>
 8006290:	e01c      	b.n	80062cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <HAL_RCC_OscConfig+0x274>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006298:	f7fd fd48 	bl	8003d2c <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800629e:	e00f      	b.n	80062c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a0:	f7fd fd44 	bl	8003d2c <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d908      	bls.n	80062c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e140      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
 80062b2:	bf00      	nop
 80062b4:	40021000 	.word	0x40021000
 80062b8:	42420000 	.word	0x42420000
 80062bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c0:	4b9e      	ldr	r3, [pc, #632]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e9      	bne.n	80062a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80a6 	beq.w	8006426 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062de:	4b97      	ldr	r3, [pc, #604]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	4b94      	ldr	r3, [pc, #592]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	4a93      	ldr	r2, [pc, #588]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80062f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f4:	61d3      	str	r3, [r2, #28]
 80062f6:	4b91      	ldr	r3, [pc, #580]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fe:	60bb      	str	r3, [r7, #8]
 8006300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006302:	2301      	movs	r3, #1
 8006304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006306:	4b8e      	ldr	r3, [pc, #568]	; (8006540 <HAL_RCC_OscConfig+0x4f8>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d118      	bne.n	8006344 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006312:	4b8b      	ldr	r3, [pc, #556]	; (8006540 <HAL_RCC_OscConfig+0x4f8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a8a      	ldr	r2, [pc, #552]	; (8006540 <HAL_RCC_OscConfig+0x4f8>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800631c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800631e:	f7fd fd05 	bl	8003d2c <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006326:	f7fd fd01 	bl	8003d2c <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b64      	cmp	r3, #100	; 0x64
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e0fd      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006338:	4b81      	ldr	r3, [pc, #516]	; (8006540 <HAL_RCC_OscConfig+0x4f8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f0      	beq.n	8006326 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d106      	bne.n	800635a <HAL_RCC_OscConfig+0x312>
 800634c:	4b7b      	ldr	r3, [pc, #492]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	4a7a      	ldr	r2, [pc, #488]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	6213      	str	r3, [r2, #32]
 8006358:	e02d      	b.n	80063b6 <HAL_RCC_OscConfig+0x36e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10c      	bne.n	800637c <HAL_RCC_OscConfig+0x334>
 8006362:	4b76      	ldr	r3, [pc, #472]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	4a75      	ldr	r2, [pc, #468]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	6213      	str	r3, [r2, #32]
 800636e:	4b73      	ldr	r3, [pc, #460]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	4a72      	ldr	r2, [pc, #456]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006374:	f023 0304 	bic.w	r3, r3, #4
 8006378:	6213      	str	r3, [r2, #32]
 800637a:	e01c      	b.n	80063b6 <HAL_RCC_OscConfig+0x36e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b05      	cmp	r3, #5
 8006382:	d10c      	bne.n	800639e <HAL_RCC_OscConfig+0x356>
 8006384:	4b6d      	ldr	r3, [pc, #436]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	4a6c      	ldr	r2, [pc, #432]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 800638a:	f043 0304 	orr.w	r3, r3, #4
 800638e:	6213      	str	r3, [r2, #32]
 8006390:	4b6a      	ldr	r3, [pc, #424]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	4a69      	ldr	r2, [pc, #420]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6213      	str	r3, [r2, #32]
 800639c:	e00b      	b.n	80063b6 <HAL_RCC_OscConfig+0x36e>
 800639e:	4b67      	ldr	r3, [pc, #412]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	4a66      	ldr	r2, [pc, #408]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80063a4:	f023 0301 	bic.w	r3, r3, #1
 80063a8:	6213      	str	r3, [r2, #32]
 80063aa:	4b64      	ldr	r3, [pc, #400]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	4a63      	ldr	r2, [pc, #396]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80063b0:	f023 0304 	bic.w	r3, r3, #4
 80063b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d015      	beq.n	80063ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063be:	f7fd fcb5 	bl	8003d2c <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c4:	e00a      	b.n	80063dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c6:	f7fd fcb1 	bl	8003d2c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e0ab      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063dc:	4b57      	ldr	r3, [pc, #348]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0ee      	beq.n	80063c6 <HAL_RCC_OscConfig+0x37e>
 80063e8:	e014      	b.n	8006414 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ea:	f7fd fc9f 	bl	8003d2c <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063f0:	e00a      	b.n	8006408 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f2:	f7fd fc9b 	bl	8003d2c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e095      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006408:	4b4c      	ldr	r3, [pc, #304]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1ee      	bne.n	80063f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d105      	bne.n	8006426 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800641a:	4b48      	ldr	r3, [pc, #288]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	4a47      	ldr	r2, [pc, #284]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006424:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8081 	beq.w	8006532 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006430:	4b42      	ldr	r3, [pc, #264]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 030c 	and.w	r3, r3, #12
 8006438:	2b08      	cmp	r3, #8
 800643a:	d061      	beq.n	8006500 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d146      	bne.n	80064d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006444:	4b3f      	ldr	r3, [pc, #252]	; (8006544 <HAL_RCC_OscConfig+0x4fc>)
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644a:	f7fd fc6f 	bl	8003d2c <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006452:	f7fd fc6b 	bl	8003d2c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e067      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006464:	4b35      	ldr	r3, [pc, #212]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006478:	d108      	bne.n	800648c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800647a:	4b30      	ldr	r3, [pc, #192]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	492d      	ldr	r1, [pc, #180]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 8006488:	4313      	orrs	r3, r2
 800648a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800648c:	4b2b      	ldr	r3, [pc, #172]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a19      	ldr	r1, [r3, #32]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	430b      	orrs	r3, r1
 800649e:	4927      	ldr	r1, [pc, #156]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a4:	4b27      	ldr	r3, [pc, #156]	; (8006544 <HAL_RCC_OscConfig+0x4fc>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064aa:	f7fd fc3f 	bl	8003d2c <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b2:	f7fd fc3b 	bl	8003d2c <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e037      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064c4:	4b1d      	ldr	r3, [pc, #116]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x46a>
 80064d0:	e02f      	b.n	8006532 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d2:	4b1c      	ldr	r3, [pc, #112]	; (8006544 <HAL_RCC_OscConfig+0x4fc>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d8:	f7fd fc28 	bl	8003d2c <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e0:	f7fd fc24 	bl	8003d2c <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e020      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064f2:	4b12      	ldr	r3, [pc, #72]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f0      	bne.n	80064e0 <HAL_RCC_OscConfig+0x498>
 80064fe:	e018      	b.n	8006532 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e013      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCC_OscConfig+0x4f4>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	429a      	cmp	r2, r3
 800651e:	d106      	bne.n	800652e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d001      	beq.n	8006532 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40021000 	.word	0x40021000
 8006540:	40007000 	.word	0x40007000
 8006544:	42420060 	.word	0x42420060

08006548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0d0      	b.n	80066fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800655c:	4b6a      	ldr	r3, [pc, #424]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d910      	bls.n	800658c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656a:	4b67      	ldr	r3, [pc, #412]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 0207 	bic.w	r2, r3, #7
 8006572:	4965      	ldr	r1, [pc, #404]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	4313      	orrs	r3, r2
 8006578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800657a:	4b63      	ldr	r3, [pc, #396]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d001      	beq.n	800658c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0b8      	b.n	80066fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d020      	beq.n	80065da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065a4:	4b59      	ldr	r3, [pc, #356]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	4a58      	ldr	r2, [pc, #352]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80065aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065bc:	4b53      	ldr	r3, [pc, #332]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a52      	ldr	r2, [pc, #328]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80065c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80065c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c8:	4b50      	ldr	r3, [pc, #320]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	494d      	ldr	r1, [pc, #308]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d040      	beq.n	8006668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ee:	4b47      	ldr	r3, [pc, #284]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d115      	bne.n	8006626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e07f      	b.n	80066fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d107      	bne.n	8006616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006606:	4b41      	ldr	r3, [pc, #260]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e073      	b.n	80066fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006616:	4b3d      	ldr	r3, [pc, #244]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e06b      	b.n	80066fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006626:	4b39      	ldr	r3, [pc, #228]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f023 0203 	bic.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	4936      	ldr	r1, [pc, #216]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006638:	f7fd fb78 	bl	8003d2c <HAL_GetTick>
 800663c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	e00a      	b.n	8006656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006640:	f7fd fb74 	bl	8003d2c <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	; 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e053      	b.n	80066fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006656:	4b2d      	ldr	r3, [pc, #180]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 020c 	and.w	r2, r3, #12
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	429a      	cmp	r2, r3
 8006666:	d1eb      	bne.n	8006640 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006668:	4b27      	ldr	r3, [pc, #156]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d210      	bcs.n	8006698 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b24      	ldr	r3, [pc, #144]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 0207 	bic.w	r2, r3, #7
 800667e:	4922      	ldr	r1, [pc, #136]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006686:	4b20      	ldr	r3, [pc, #128]	; (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d001      	beq.n	8006698 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e032      	b.n	80066fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066a4:	4b19      	ldr	r3, [pc, #100]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4916      	ldr	r1, [pc, #88]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	490e      	ldr	r1, [pc, #56]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066d6:	f000 f821 	bl	800671c <HAL_RCC_GetSysClockFreq>
 80066da:	4602      	mov	r2, r0
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	490a      	ldr	r1, [pc, #40]	; (8006710 <HAL_RCC_ClockConfig+0x1c8>)
 80066e8:	5ccb      	ldrb	r3, [r1, r3]
 80066ea:	fa22 f303 	lsr.w	r3, r2, r3
 80066ee:	4a09      	ldr	r2, [pc, #36]	; (8006714 <HAL_RCC_ClockConfig+0x1cc>)
 80066f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <HAL_RCC_ClockConfig+0x1d0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fd fad6 	bl	8003ca8 <HAL_InitTick>

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40022000 	.word	0x40022000
 800670c:	40021000 	.word	0x40021000
 8006710:	0800ea50 	.word	0x0800ea50
 8006714:	20000004 	.word	0x20000004
 8006718:	20000008 	.word	0x20000008

0800671c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800671c:	b490      	push	{r4, r7}
 800671e:	b08a      	sub	sp, #40	; 0x28
 8006720:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006722:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006724:	1d3c      	adds	r4, r7, #4
 8006726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800672c:	f240 2301 	movw	r3, #513	; 0x201
 8006730:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	2300      	movs	r3, #0
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	2300      	movs	r3, #0
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006746:	4b22      	ldr	r3, [pc, #136]	; (80067d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	2b04      	cmp	r3, #4
 8006754:	d002      	beq.n	800675c <HAL_RCC_GetSysClockFreq+0x40>
 8006756:	2b08      	cmp	r3, #8
 8006758:	d003      	beq.n	8006762 <HAL_RCC_GetSysClockFreq+0x46>
 800675a:	e02d      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800675c:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800675e:	623b      	str	r3, [r7, #32]
      break;
 8006760:	e02d      	b.n	80067be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	0c9b      	lsrs	r3, r3, #18
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800676e:	4413      	add	r3, r2
 8006770:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006774:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006780:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	0c5b      	lsrs	r3, r3, #17
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800678e:	4413      	add	r3, r2
 8006790:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006794:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	4a0e      	ldr	r2, [pc, #56]	; (80067d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800679a:	fb02 f203 	mul.w	r2, r2, r3
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
 80067a6:	e004      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	623b      	str	r3, [r7, #32]
      break;
 80067b6:	e002      	b.n	80067be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ba:	623b      	str	r3, [r7, #32]
      break;
 80067bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067be:	6a3b      	ldr	r3, [r7, #32]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3728      	adds	r7, #40	; 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc90      	pop	{r4, r7}
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	0800ea0c 	.word	0x0800ea0c
 80067d0:	40021000 	.word	0x40021000
 80067d4:	007a1200 	.word	0x007a1200
 80067d8:	003d0900 	.word	0x003d0900

080067dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <HAL_RCC_GetHCLKFreq+0x10>)
 80067e2:	681b      	ldr	r3, [r3, #0]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr
 80067ec:	20000004 	.word	0x20000004

080067f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067f4:	f7ff fff2 	bl	80067dc <HAL_RCC_GetHCLKFreq>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	4903      	ldr	r1, [pc, #12]	; (8006814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006806:	5ccb      	ldrb	r3, [r1, r3]
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40021000 	.word	0x40021000
 8006814:	0800ea60 	.word	0x0800ea60

08006818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800681c:	f7ff ffde 	bl	80067dc <HAL_RCC_GetHCLKFreq>
 8006820:	4602      	mov	r2, r0
 8006822:	4b05      	ldr	r3, [pc, #20]	; (8006838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	0adb      	lsrs	r3, r3, #11
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	4903      	ldr	r1, [pc, #12]	; (800683c <HAL_RCC_GetPCLK2Freq+0x24>)
 800682e:	5ccb      	ldrb	r3, [r1, r3]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006834:	4618      	mov	r0, r3
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40021000 	.word	0x40021000
 800683c:	0800ea60 	.word	0x0800ea60

08006840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <RCC_Delay+0x34>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <RCC_Delay+0x38>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	0a5b      	lsrs	r3, r3, #9
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800685c:	bf00      	nop
  }
  while (Delay --);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1e5a      	subs	r2, r3, #1
 8006862:	60fa      	str	r2, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f9      	bne.n	800685c <RCC_Delay+0x1c>
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	20000004 	.word	0x20000004
 8006878:	10624dd3 	.word	0x10624dd3

0800687c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e041      	b.n	8006912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fc ffae 	bl	8003804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f000 fe98 	bl	80075f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d001      	beq.n	8006934 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e032      	b.n	800699a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <HAL_TIM_Base_Start+0x88>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00e      	beq.n	8006964 <HAL_TIM_Base_Start+0x48>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694e:	d009      	beq.n	8006964 <HAL_TIM_Base_Start+0x48>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <HAL_TIM_Base_Start+0x8c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_TIM_Base_Start+0x48>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a13      	ldr	r2, [pc, #76]	; (80069ac <HAL_TIM_Base_Start+0x90>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d111      	bne.n	8006988 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b06      	cmp	r3, #6
 8006974:	d010      	beq.n	8006998 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	e007      	b.n	8006998 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr
 80069a4:	40012c00 	.word	0x40012c00
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800

080069b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d001      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e03a      	b.n	8006a3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_TIM_Base_Start_IT+0x98>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x58>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d009      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x58>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <HAL_TIM_Base_Start_IT+0x9c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x58>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d111      	bne.n	8006a2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d010      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	e007      	b.n	8006a3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800

08006a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e041      	b.n	8006aea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fc fea4 	bl	80037c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f000 fdac 	bl	80075f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <HAL_TIM_PWM_Start+0x24>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	bf14      	ite	ne
 8006b10:	2301      	movne	r3, #1
 8006b12:	2300      	moveq	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	e022      	b.n	8006b5e <HAL_TIM_PWM_Start+0x6a>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d109      	bne.n	8006b32 <HAL_TIM_PWM_Start+0x3e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	bf14      	ite	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	2300      	moveq	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	e015      	b.n	8006b5e <HAL_TIM_PWM_Start+0x6a>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d109      	bne.n	8006b4c <HAL_TIM_PWM_Start+0x58>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	bf14      	ite	ne
 8006b44:	2301      	movne	r3, #1
 8006b46:	2300      	moveq	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	e008      	b.n	8006b5e <HAL_TIM_PWM_Start+0x6a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	bf14      	ite	ne
 8006b58:	2301      	movne	r3, #1
 8006b5a:	2300      	moveq	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e05e      	b.n	8006c24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <HAL_TIM_PWM_Start+0x82>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b74:	e013      	b.n	8006b9e <HAL_TIM_PWM_Start+0xaa>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d104      	bne.n	8006b86 <HAL_TIM_PWM_Start+0x92>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b84:	e00b      	b.n	8006b9e <HAL_TIM_PWM_Start+0xaa>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d104      	bne.n	8006b96 <HAL_TIM_PWM_Start+0xa2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b94:	e003      	b.n	8006b9e <HAL_TIM_PWM_Start+0xaa>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 f8af 	bl	8007d0a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1e      	ldr	r2, [pc, #120]	; (8006c2c <HAL_TIM_PWM_Start+0x138>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d107      	bne.n	8006bc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <HAL_TIM_PWM_Start+0x138>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_TIM_PWM_Start+0xfa>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d009      	beq.n	8006bee <HAL_TIM_PWM_Start+0xfa>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <HAL_TIM_PWM_Start+0x13c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIM_PWM_Start+0xfa>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <HAL_TIM_PWM_Start+0x140>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d111      	bne.n	8006c12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b06      	cmp	r3, #6
 8006bfe:	d010      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c10:	e007      	b.n	8006c22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0201 	orr.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800

08006c38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e041      	b.n	8006cce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f839 	bl	8006cd6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f000 fcba 	bl	80075f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_IC_Start_IT+0x1a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	e013      	b.n	8006d2a <HAL_TIM_IC_Start_IT+0x42>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_IC_Start_IT+0x2a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e00b      	b.n	8006d2a <HAL_TIM_IC_Start_IT+0x42>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_IC_Start_IT+0x3a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	e003      	b.n	8006d2a <HAL_TIM_IC_Start_IT+0x42>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <HAL_TIM_IC_Start_IT+0x54>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	e013      	b.n	8006d64 <HAL_TIM_IC_Start_IT+0x7c>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d104      	bne.n	8006d4c <HAL_TIM_IC_Start_IT+0x64>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	e00b      	b.n	8006d64 <HAL_TIM_IC_Start_IT+0x7c>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d104      	bne.n	8006d5c <HAL_TIM_IC_Start_IT+0x74>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	e003      	b.n	8006d64 <HAL_TIM_IC_Start_IT+0x7c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d102      	bne.n	8006d72 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d001      	beq.n	8006d76 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e0b3      	b.n	8006ede <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_IC_Start_IT+0x9e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d84:	e013      	b.n	8006dae <HAL_TIM_IC_Start_IT+0xc6>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_IC_Start_IT+0xae>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d94:	e00b      	b.n	8006dae <HAL_TIM_IC_Start_IT+0xc6>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_IC_Start_IT+0xbe>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da4:	e003      	b.n	8006dae <HAL_TIM_IC_Start_IT+0xc6>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_IC_Start_IT+0xd6>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dbc:	e013      	b.n	8006de6 <HAL_TIM_IC_Start_IT+0xfe>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d104      	bne.n	8006dce <HAL_TIM_IC_Start_IT+0xe6>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dcc:	e00b      	b.n	8006de6 <HAL_TIM_IC_Start_IT+0xfe>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d104      	bne.n	8006dde <HAL_TIM_IC_Start_IT+0xf6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ddc:	e003      	b.n	8006de6 <HAL_TIM_IC_Start_IT+0xfe>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b0c      	cmp	r3, #12
 8006dea:	d841      	bhi.n	8006e70 <HAL_TIM_IC_Start_IT+0x188>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <HAL_TIM_IC_Start_IT+0x10c>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e29 	.word	0x08006e29
 8006df8:	08006e71 	.word	0x08006e71
 8006dfc:	08006e71 	.word	0x08006e71
 8006e00:	08006e71 	.word	0x08006e71
 8006e04:	08006e3b 	.word	0x08006e3b
 8006e08:	08006e71 	.word	0x08006e71
 8006e0c:	08006e71 	.word	0x08006e71
 8006e10:	08006e71 	.word	0x08006e71
 8006e14:	08006e4d 	.word	0x08006e4d
 8006e18:	08006e71 	.word	0x08006e71
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006e71 	.word	0x08006e71
 8006e24:	08006e5f 	.word	0x08006e5f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0202 	orr.w	r2, r2, #2
 8006e36:	60da      	str	r2, [r3, #12]
      break;
 8006e38:	e01b      	b.n	8006e72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0204 	orr.w	r2, r2, #4
 8006e48:	60da      	str	r2, [r3, #12]
      break;
 8006e4a:	e012      	b.n	8006e72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0208 	orr.w	r2, r2, #8
 8006e5a:	60da      	str	r2, [r3, #12]
      break;
 8006e5c:	e009      	b.n	8006e72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0210 	orr.w	r2, r2, #16
 8006e6c:	60da      	str	r2, [r3, #12]
      break;
 8006e6e:	e000      	b.n	8006e72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006e70:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2201      	movs	r2, #1
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 ff45 	bl	8007d0a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <HAL_TIM_IC_Start_IT+0x200>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00e      	beq.n	8006ea8 <HAL_TIM_IC_Start_IT+0x1c0>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e92:	d009      	beq.n	8006ea8 <HAL_TIM_IC_Start_IT+0x1c0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a14      	ldr	r2, [pc, #80]	; (8006eec <HAL_TIM_IC_Start_IT+0x204>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_TIM_IC_Start_IT+0x1c0>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <HAL_TIM_IC_Start_IT+0x208>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d111      	bne.n	8006ecc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d010      	beq.n	8006edc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eca:	e007      	b.n	8006edc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40000400 	.word	0x40000400
 8006ef0:	40000800 	.word	0x40000800

08006ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d122      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d11b      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0202 	mvn.w	r2, #2
 8006f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fc f8ec 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8006f3c:	e005      	b.n	8006f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fb3a 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fb40 	bl	80075ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d122      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d11b      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0204 	mvn.w	r2, #4
 8006f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fc f8c2 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8006f90:	e005      	b.n	8006f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fb10 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb16 	bl	80075ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d122      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d11b      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0208 	mvn.w	r2, #8
 8006fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fc f898 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8006fe4:	e005      	b.n	8006ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fae6 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 faec 	bl	80075ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	2b10      	cmp	r3, #16
 8007004:	d122      	bne.n	800704c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b10      	cmp	r3, #16
 8007012:	d11b      	bne.n	800704c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0210 	mvn.w	r2, #16
 800701c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2208      	movs	r2, #8
 8007022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fc f86e 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8007038:	e005      	b.n	8007046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fabc 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fac2 	bl	80075ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10e      	bne.n	8007078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	d107      	bne.n	8007078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0201 	mvn.w	r2, #1
 8007070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fb fb94 	bl	80027a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d10e      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d107      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800709c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 ffae 	bl	8008000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d10e      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d107      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa86 	bl	80075dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d10e      	bne.n	80070fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d107      	bne.n	80070fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0220 	mvn.w	r2, #32
 80070f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 ff79 	bl	8007fee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_TIM_IC_ConfigChannel+0x1a>
 800711a:	2302      	movs	r3, #2
 800711c:	e082      	b.n	8007224 <HAL_TIM_IC_ConfigChannel+0x120>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11b      	bne.n	8007164 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6819      	ldr	r1, [r3, #0]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f000 fc42 	bl	80079c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 020c 	bic.w	r2, r2, #12
 800714e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6999      	ldr	r1, [r3, #24]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	619a      	str	r2, [r3, #24]
 8007162:	e05a      	b.n	800721a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b04      	cmp	r3, #4
 8007168:	d11c      	bne.n	80071a4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6819      	ldr	r1, [r3, #0]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f000 fcab 	bl	8007ad4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800718c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6999      	ldr	r1, [r3, #24]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	021a      	lsls	r2, r3, #8
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	619a      	str	r2, [r3, #24]
 80071a2:	e03a      	b.n	800721a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d11b      	bne.n	80071e2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f000 fcf6 	bl	8007baa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 020c 	bic.w	r2, r2, #12
 80071cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69d9      	ldr	r1, [r3, #28]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	61da      	str	r2, [r3, #28]
 80071e0:	e01b      	b.n	800721a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f000 fd15 	bl	8007c20 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69da      	ldr	r2, [r3, #28]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007204:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69d9      	ldr	r1, [r3, #28]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	021a      	lsls	r2, r3, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007242:	2302      	movs	r3, #2
 8007244:	e0ac      	b.n	80073a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b0c      	cmp	r3, #12
 8007252:	f200 809f 	bhi.w	8007394 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007256:	a201      	add	r2, pc, #4	; (adr r2, 800725c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	08007291 	.word	0x08007291
 8007260:	08007395 	.word	0x08007395
 8007264:	08007395 	.word	0x08007395
 8007268:	08007395 	.word	0x08007395
 800726c:	080072d1 	.word	0x080072d1
 8007270:	08007395 	.word	0x08007395
 8007274:	08007395 	.word	0x08007395
 8007278:	08007395 	.word	0x08007395
 800727c:	08007313 	.word	0x08007313
 8007280:	08007395 	.word	0x08007395
 8007284:	08007395 	.word	0x08007395
 8007288:	08007395 	.word	0x08007395
 800728c:	08007353 	.word	0x08007353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fa0c 	bl	80076b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0208 	orr.w	r2, r2, #8
 80072aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0204 	bic.w	r2, r2, #4
 80072ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6999      	ldr	r1, [r3, #24]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	619a      	str	r2, [r3, #24]
      break;
 80072ce:	e062      	b.n	8007396 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fa52 	bl	8007780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6999      	ldr	r1, [r3, #24]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	619a      	str	r2, [r3, #24]
      break;
 8007310:	e041      	b.n	8007396 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fa9b 	bl	8007854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0208 	orr.w	r2, r2, #8
 800732c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0204 	bic.w	r2, r2, #4
 800733c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69d9      	ldr	r1, [r3, #28]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	61da      	str	r2, [r3, #28]
      break;
 8007350:	e021      	b.n	8007396 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fae5 	bl	8007928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69da      	ldr	r2, [r3, #28]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69d9      	ldr	r1, [r3, #28]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	021a      	lsls	r2, r3, #8
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	61da      	str	r2, [r3, #28]
      break;
 8007392:	e000      	b.n	8007396 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_TIM_ConfigClockSource+0x18>
 80073bc:	2302      	movs	r3, #2
 80073be:	e0b3      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x180>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f8:	d03e      	beq.n	8007478 <HAL_TIM_ConfigClockSource+0xd0>
 80073fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fe:	f200 8087 	bhi.w	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007406:	f000 8085 	beq.w	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740e:	d87f      	bhi.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007410:	2b70      	cmp	r3, #112	; 0x70
 8007412:	d01a      	beq.n	800744a <HAL_TIM_ConfigClockSource+0xa2>
 8007414:	2b70      	cmp	r3, #112	; 0x70
 8007416:	d87b      	bhi.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007418:	2b60      	cmp	r3, #96	; 0x60
 800741a:	d050      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x116>
 800741c:	2b60      	cmp	r3, #96	; 0x60
 800741e:	d877      	bhi.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007420:	2b50      	cmp	r3, #80	; 0x50
 8007422:	d03c      	beq.n	800749e <HAL_TIM_ConfigClockSource+0xf6>
 8007424:	2b50      	cmp	r3, #80	; 0x50
 8007426:	d873      	bhi.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	d058      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x136>
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	d86f      	bhi.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007430:	2b30      	cmp	r3, #48	; 0x30
 8007432:	d064      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x156>
 8007434:	2b30      	cmp	r3, #48	; 0x30
 8007436:	d86b      	bhi.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007438:	2b20      	cmp	r3, #32
 800743a:	d060      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x156>
 800743c:	2b20      	cmp	r3, #32
 800743e:	d867      	bhi.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d05c      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x156>
 8007444:	2b10      	cmp	r3, #16
 8007446:	d05a      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007448:	e062      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6899      	ldr	r1, [r3, #8]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f000 fc37 	bl	8007ccc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800746c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	609a      	str	r2, [r3, #8]
      break;
 8007476:	e04e      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6818      	ldr	r0, [r3, #0]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	6899      	ldr	r1, [r3, #8]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f000 fc20 	bl	8007ccc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800749a:	609a      	str	r2, [r3, #8]
      break;
 800749c:	e03b      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f000 fae4 	bl	8007a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2150      	movs	r1, #80	; 0x50
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fbee 	bl	8007c98 <TIM_ITRx_SetConfig>
      break;
 80074bc:	e02b      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6859      	ldr	r1, [r3, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f000 fb3e 	bl	8007b4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2160      	movs	r1, #96	; 0x60
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fbde 	bl	8007c98 <TIM_ITRx_SetConfig>
      break;
 80074dc:	e01b      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6859      	ldr	r1, [r3, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	461a      	mov	r2, r3
 80074ec:	f000 fac4 	bl	8007a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2140      	movs	r1, #64	; 0x40
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fbce 	bl	8007c98 <TIM_ITRx_SetConfig>
      break;
 80074fc:	e00b      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f000 fbc5 	bl	8007c98 <TIM_ITRx_SetConfig>
        break;
 800750e:	e002      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007514:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b0c      	cmp	r3, #12
 8007542:	d831      	bhi.n	80075a8 <HAL_TIM_ReadCapturedValue+0x78>
 8007544:	a201      	add	r2, pc, #4	; (adr r2, 800754c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	08007581 	.word	0x08007581
 8007550:	080075a9 	.word	0x080075a9
 8007554:	080075a9 	.word	0x080075a9
 8007558:	080075a9 	.word	0x080075a9
 800755c:	0800758b 	.word	0x0800758b
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	08007595 	.word	0x08007595
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075a9 	.word	0x080075a9
 800757c:	0800759f 	.word	0x0800759f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	60fb      	str	r3, [r7, #12]

      break;
 8007588:	e00f      	b.n	80075aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	60fb      	str	r3, [r7, #12]

      break;
 8007592:	e00a      	b.n	80075aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	60fb      	str	r3, [r7, #12]

      break;
 800759c:	e005      	b.n	80075aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	60fb      	str	r3, [r7, #12]

      break;
 80075a6:	e000      	b.n	80075aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80075a8:	bf00      	nop
  }

  return tmpreg;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop

080075b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
	...

080075f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a29      	ldr	r2, [pc, #164]	; (80076a8 <TIM_Base_SetConfig+0xb8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00b      	beq.n	8007620 <TIM_Base_SetConfig+0x30>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760e:	d007      	beq.n	8007620 <TIM_Base_SetConfig+0x30>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a26      	ldr	r2, [pc, #152]	; (80076ac <TIM_Base_SetConfig+0xbc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d003      	beq.n	8007620 <TIM_Base_SetConfig+0x30>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a25      	ldr	r2, [pc, #148]	; (80076b0 <TIM_Base_SetConfig+0xc0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d108      	bne.n	8007632 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a1c      	ldr	r2, [pc, #112]	; (80076a8 <TIM_Base_SetConfig+0xb8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00b      	beq.n	8007652 <TIM_Base_SetConfig+0x62>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007640:	d007      	beq.n	8007652 <TIM_Base_SetConfig+0x62>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a19      	ldr	r2, [pc, #100]	; (80076ac <TIM_Base_SetConfig+0xbc>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_Base_SetConfig+0x62>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a18      	ldr	r2, [pc, #96]	; (80076b0 <TIM_Base_SetConfig+0xc0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d108      	bne.n	8007664 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a07      	ldr	r2, [pc, #28]	; (80076a8 <TIM_Base_SetConfig+0xb8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	615a      	str	r2, [r3, #20]
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800

080076b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0201 	bic.w	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f023 0302 	bic.w	r3, r3, #2
 80076fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a1c      	ldr	r2, [pc, #112]	; (800777c <TIM_OC1_SetConfig+0xc8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10c      	bne.n	800772a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0308 	bic.w	r3, r3, #8
 8007716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f023 0304 	bic.w	r3, r3, #4
 8007728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a13      	ldr	r2, [pc, #76]	; (800777c <TIM_OC1_SetConfig+0xc8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d111      	bne.n	8007756 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4313      	orrs	r3, r2
 800774a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	621a      	str	r2, [r3, #32]
}
 8007770:	bf00      	nop
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00

08007780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f023 0210 	bic.w	r2, r3, #16
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f023 0320 	bic.w	r3, r3, #32
 80077ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <TIM_OC2_SetConfig+0xd0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10d      	bne.n	80077fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a14      	ldr	r2, [pc, #80]	; (8007850 <TIM_OC2_SetConfig+0xd0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d113      	bne.n	800782c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800780a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	621a      	str	r2, [r3, #32]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr
 8007850:	40012c00 	.word	0x40012c00

08007854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800789c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <TIM_OC3_SetConfig+0xd0>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d10d      	bne.n	80078ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a14      	ldr	r2, [pc, #80]	; (8007924 <TIM_OC3_SetConfig+0xd0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d113      	bne.n	80078fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	621a      	str	r2, [r3, #32]
}
 8007918:	bf00      	nop
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00

08007928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	031b      	lsls	r3, r3, #12
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	4313      	orrs	r3, r2
 800797e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a0f      	ldr	r2, [pc, #60]	; (80079c0 <TIM_OC4_SetConfig+0x98>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d109      	bne.n	800799c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800798e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	019b      	lsls	r3, r3, #6
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr
 80079c0:	40012c00 	.word	0x40012c00

080079c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0201 	bic.w	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a1f      	ldr	r2, [pc, #124]	; (8007a6c <TIM_TI1_SetConfig+0xa8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <TIM_TI1_SetConfig+0x46>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f8:	d007      	beq.n	8007a0a <TIM_TI1_SetConfig+0x46>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <TIM_TI1_SetConfig+0xac>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_TI1_SetConfig+0x46>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <TIM_TI1_SetConfig+0xb0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d101      	bne.n	8007a0e <TIM_TI1_SetConfig+0x4a>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <TIM_TI1_SetConfig+0x4c>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d008      	beq.n	8007a26 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e003      	b.n	8007a2e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f023 030a 	bic.w	r3, r3, #10
 8007a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f003 030a 	and.w	r3, r3, #10
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	621a      	str	r2, [r3, #32]
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40000400 	.word	0x40000400
 8007a74:	40000800 	.word	0x40000800

08007a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f023 0201 	bic.w	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f023 030a 	bic.w	r3, r3, #10
 8007ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr

08007ad4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f023 0210 	bic.w	r2, r3, #16
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	031b      	lsls	r3, r3, #12
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	621a      	str	r2, [r3, #32]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	f023 0210 	bic.w	r2, r3, #16
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	031b      	lsls	r3, r3, #12
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	621a      	str	r2, [r3, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr

08007baa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b087      	sub	sp, #28
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
 8007bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007be6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	021b      	lsls	r3, r3, #8
 8007c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	031b      	lsls	r3, r3, #12
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	031b      	lsls	r3, r3, #12
 8007c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	621a      	str	r2, [r3, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f043 0307 	orr.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	609a      	str	r2, [r3, #8]
}
 8007cc2:	bf00      	nop
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr

08007ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	021a      	lsls	r2, r3, #8
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	609a      	str	r2, [r3, #8]
}
 8007d00:	bf00      	nop
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr

08007d0a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1a      	ldr	r2, [r3, #32]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	401a      	ands	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a1a      	ldr	r2, [r3, #32]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d42:	431a      	orrs	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	621a      	str	r2, [r3, #32]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
	...

08007d54 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <HAL_TIMEx_PWMN_Start+0x24>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	bf14      	ite	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	2300      	moveq	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	e022      	b.n	8007dbe <HAL_TIMEx_PWMN_Start+0x6a>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d109      	bne.n	8007d92 <HAL_TIMEx_PWMN_Start+0x3e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	bf14      	ite	ne
 8007d8a:	2301      	movne	r3, #1
 8007d8c:	2300      	moveq	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	e015      	b.n	8007dbe <HAL_TIMEx_PWMN_Start+0x6a>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d109      	bne.n	8007dac <HAL_TIMEx_PWMN_Start+0x58>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	bf14      	ite	ne
 8007da4:	2301      	movne	r3, #1
 8007da6:	2300      	moveq	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e008      	b.n	8007dbe <HAL_TIMEx_PWMN_Start+0x6a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	bf14      	ite	ne
 8007db8:	2301      	movne	r3, #1
 8007dba:	2300      	moveq	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e059      	b.n	8007e7a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <HAL_TIMEx_PWMN_Start+0x82>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dd4:	e013      	b.n	8007dfe <HAL_TIMEx_PWMN_Start+0xaa>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d104      	bne.n	8007de6 <HAL_TIMEx_PWMN_Start+0x92>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007de4:	e00b      	b.n	8007dfe <HAL_TIMEx_PWMN_Start+0xaa>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d104      	bne.n	8007df6 <HAL_TIMEx_PWMN_Start+0xa2>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007df4:	e003      	b.n	8007dfe <HAL_TIMEx_PWMN_Start+0xaa>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2204      	movs	r2, #4
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f903 	bl	8008012 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a18      	ldr	r2, [pc, #96]	; (8007e84 <HAL_TIMEx_PWMN_Start+0x130>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00e      	beq.n	8007e44 <HAL_TIMEx_PWMN_Start+0xf0>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2e:	d009      	beq.n	8007e44 <HAL_TIMEx_PWMN_Start+0xf0>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <HAL_TIMEx_PWMN_Start+0x134>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d004      	beq.n	8007e44 <HAL_TIMEx_PWMN_Start+0xf0>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <HAL_TIMEx_PWMN_Start+0x138>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d111      	bne.n	8007e68 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b06      	cmp	r3, #6
 8007e54:	d010      	beq.n	8007e78 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0201 	orr.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e66:	e007      	b.n	8007e78 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800

08007e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e046      	b.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a16      	ldr	r2, [pc, #88]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00e      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef4:	d009      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d10c      	bne.n	8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40000400 	.word	0x40000400
 8007f48:	40000800 	.word	0x40000800

08007f4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e03d      	b.n	8007fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr

08007fee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f003 031f 	and.w	r3, r3, #31
 8008024:	2204      	movs	r2, #4
 8008026:	fa02 f303 	lsl.w	r3, r2, r3
 800802a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1a      	ldr	r2, [r3, #32]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	43db      	mvns	r3, r3
 8008034:	401a      	ands	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a1a      	ldr	r2, [r3, #32]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f003 031f 	and.w	r3, r3, #31
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	fa01 f303 	lsl.w	r3, r1, r3
 800804a:	431a      	orrs	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	621a      	str	r2, [r3, #32]
}
 8008050:	bf00      	nop
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr

0800805a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e03f      	b.n	80080ec <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fb fc81 	bl	8003988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2224      	movs	r2, #36	; 0x24
 800808a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800809c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa5e 	bl	8008560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691a      	ldr	r2, [r3, #16]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695a      	ldr	r2, [r3, #20]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	; 0x28
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	4613      	mov	r3, r2
 8008102:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b20      	cmp	r3, #32
 8008112:	d17c      	bne.n	800820e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_UART_Transmit+0x2c>
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e075      	b.n	8008210 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_UART_Transmit+0x3e>
 800812e:	2302      	movs	r3, #2
 8008130:	e06e      	b.n	8008210 <HAL_UART_Transmit+0x11c>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2221      	movs	r2, #33	; 0x21
 8008144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008148:	f7fb fdf0 	bl	8003d2c <HAL_GetTick>
 800814c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	88fa      	ldrh	r2, [r7, #6]
 8008158:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008162:	d108      	bne.n	8008176 <HAL_UART_Transmit+0x82>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	61bb      	str	r3, [r7, #24]
 8008174:	e003      	b.n	800817e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008186:	e02a      	b.n	80081de <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2200      	movs	r2, #0
 8008190:	2180      	movs	r1, #128	; 0x80
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f967 	bl	8008466 <UART_WaitOnFlagUntilTimeout>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e036      	b.n	8008210 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10b      	bne.n	80081c0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081b6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	3302      	adds	r3, #2
 80081bc:	61bb      	str	r3, [r7, #24]
 80081be:	e007      	b.n	80081d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1cf      	bne.n	8008188 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2200      	movs	r2, #0
 80081f0:	2140      	movs	r1, #64	; 0x40
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f937 	bl	8008466 <UART_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e006      	b.n	8008210 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	e000      	b.n	8008210 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800820e:	2302      	movs	r3, #2
  }
}
 8008210:	4618      	mov	r0, r3
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b20      	cmp	r3, #32
 8008230:	d166      	bne.n	8008300 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <HAL_UART_Receive_DMA+0x26>
 8008238:	88fb      	ldrh	r3, [r7, #6]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e05f      	b.n	8008302 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_UART_Receive_DMA+0x38>
 800824c:	2302      	movs	r3, #2
 800824e:	e058      	b.n	8008302 <HAL_UART_Receive_DMA+0xea>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	88fa      	ldrh	r2, [r7, #6]
 8008262:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2222      	movs	r2, #34	; 0x22
 800826e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	4a25      	ldr	r2, [pc, #148]	; (800830c <HAL_UART_Receive_DMA+0xf4>)
 8008278:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827e:	4a24      	ldr	r2, [pc, #144]	; (8008310 <HAL_UART_Receive_DMA+0xf8>)
 8008280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	4a23      	ldr	r2, [pc, #140]	; (8008314 <HAL_UART_Receive_DMA+0xfc>)
 8008288:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	2200      	movs	r2, #0
 8008290:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8008292:	f107 0308 	add.w	r3, r7, #8
 8008296:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4619      	mov	r1, r3
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	f7fb fed5 	bl	8004058 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80082ae:	2300      	movs	r3, #0
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	613b      	str	r3, [r7, #16]
 80082c2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082fa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	e000      	b.n	8008302 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008300:	2302      	movs	r3, #2
  }
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	0800834f 	.word	0x0800834f
 8008310:	080083b7 	.word	0x080083b7
 8008314:	080083d3 	.word	0x080083d3

08008318 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr

0800832a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr

0800834e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d11e      	bne.n	80083a8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800837e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695a      	ldr	r2, [r3, #20]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0201 	bic.w	r2, r2, #1
 800838e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695a      	ldr	r2, [r3, #20]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800839e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff ffb5 	bl	8008318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7ff ffb0 	bl	800832a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bf14      	ite	ne
 80083f2:	2301      	movne	r3, #1
 80083f4:	2300      	moveq	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b21      	cmp	r3, #33	; 0x21
 8008404:	d108      	bne.n	8008418 <UART_DMAError+0x46>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2200      	movs	r2, #0
 8008410:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008412:	68b8      	ldr	r0, [r7, #8]
 8008414:	f000 f871 	bl	80084fa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	bf14      	ite	ne
 8008426:	2301      	movne	r3, #1
 8008428:	2300      	moveq	r3, #0
 800842a:	b2db      	uxtb	r3, r3
 800842c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b22      	cmp	r3, #34	; 0x22
 8008438:	d108      	bne.n	800844c <UART_DMAError+0x7a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2200      	movs	r2, #0
 8008444:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008446:	68b8      	ldr	r0, [r7, #8]
 8008448:	f000 f86c 	bl	8008524 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008450:	f043 0210 	orr.w	r2, r3, #16
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008458:	68b8      	ldr	r0, [r7, #8]
 800845a:	f7ff ff6f 	bl	800833c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	603b      	str	r3, [r7, #0]
 8008472:	4613      	mov	r3, r2
 8008474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008476:	e02c      	b.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847e:	d028      	beq.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <UART_WaitOnFlagUntilTimeout+0x30>
 8008486:	f7fb fc51 	bl	8003d2c <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	429a      	cmp	r2, r3
 8008494:	d21d      	bcs.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695a      	ldr	r2, [r3, #20]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e00f      	b.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4013      	ands	r3, r2
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	429a      	cmp	r2, r3
 80084e0:	bf0c      	ite	eq
 80084e2:	2301      	moveq	r3, #1
 80084e4:	2300      	movne	r3, #0
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d0c3      	beq.n	8008478 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008510:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr

08008524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68da      	ldr	r2, [r3, #12]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800853a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695a      	ldr	r2, [r3, #20]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0201 	bic.w	r2, r2, #1
 800854a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
	...

08008560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800859a:	f023 030c 	bic.w	r3, r3, #12
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6812      	ldr	r2, [r2, #0]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	430b      	orrs	r3, r1
 80085a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699a      	ldr	r2, [r3, #24]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2c      	ldr	r2, [pc, #176]	; (8008674 <UART_SetConfig+0x114>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d103      	bne.n	80085d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085c8:	f7fe f926 	bl	8006818 <HAL_RCC_GetPCLK2Freq>
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	e002      	b.n	80085d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7fe f90e 	bl	80067f0 <HAL_RCC_GetPCLK1Freq>
 80085d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009a      	lsls	r2, r3, #2
 80085e0:	441a      	add	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	4a22      	ldr	r2, [pc, #136]	; (8008678 <UART_SetConfig+0x118>)
 80085ee:	fba2 2303 	umull	r2, r3, r2, r3
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	0119      	lsls	r1, r3, #4
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009a      	lsls	r2, r3, #2
 8008600:	441a      	add	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	fbb2 f2f3 	udiv	r2, r2, r3
 800860c:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <UART_SetConfig+0x118>)
 800860e:	fba3 0302 	umull	r0, r3, r3, r2
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	2064      	movs	r0, #100	; 0x64
 8008616:	fb00 f303 	mul.w	r3, r0, r3
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	3332      	adds	r3, #50	; 0x32
 8008620:	4a15      	ldr	r2, [pc, #84]	; (8008678 <UART_SetConfig+0x118>)
 8008622:	fba2 2303 	umull	r2, r3, r2, r3
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800862c:	4419      	add	r1, r3
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009a      	lsls	r2, r3, #2
 8008638:	441a      	add	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	fbb2 f2f3 	udiv	r2, r2, r3
 8008644:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <UART_SetConfig+0x118>)
 8008646:	fba3 0302 	umull	r0, r3, r3, r2
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	2064      	movs	r0, #100	; 0x64
 800864e:	fb00 f303 	mul.w	r3, r0, r3
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	3332      	adds	r3, #50	; 0x32
 8008658:	4a07      	ldr	r2, [pc, #28]	; (8008678 <UART_SetConfig+0x118>)
 800865a:	fba2 2303 	umull	r2, r3, r2, r3
 800865e:	095b      	lsrs	r3, r3, #5
 8008660:	f003 020f 	and.w	r2, r3, #15
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	440a      	add	r2, r1
 800866a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	40013800 	.word	0x40013800
 8008678:	51eb851f 	.word	0x51eb851f
 800867c:	00000000 	.word	0x00000000

08008680 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"




Controller::Controller() {}
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af04      	add	r7, sp, #16
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a5d      	ldr	r2, [pc, #372]	; (8008800 <_ZN10ControllerC1Ev+0x180>)
 800868c:	635a      	str	r2, [r3, #52]	; 0x34
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a5c      	ldr	r2, [pc, #368]	; (8008804 <_ZN10ControllerC1Ev+0x184>)
 8008692:	639a      	str	r2, [r3, #56]	; 0x38
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800869a:	63da      	str	r2, [r3, #60]	; 0x3c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7f8 faf3 	bl	8000c8c <__aeabi_i2f>
 80086a6:	4603      	mov	r3, r0
 80086a8:	4619      	mov	r1, r3
 80086aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80086ae:	f7f8 fbf5 	bl	8000e9c <__aeabi_fdiv>
 80086b2:	4603      	mov	r3, r0
 80086b4:	461a      	mov	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	641a      	str	r2, [r3, #64]	; 0x40
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a52      	ldr	r2, [pc, #328]	; (8008808 <_ZN10ControllerC1Ev+0x188>)
 80086be:	645a      	str	r2, [r3, #68]	; 0x44
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a52      	ldr	r2, [pc, #328]	; (800880c <_ZN10ControllerC1Ev+0x18c>)
 80086c4:	649a      	str	r2, [r3, #72]	; 0x48
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a51      	ldr	r2, [pc, #324]	; (8008810 <_ZN10ControllerC1Ev+0x190>)
 80086ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	651a      	str	r2, [r3, #80]	; 0x50
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a4f      	ldr	r2, [pc, #316]	; (8008814 <_ZN10ControllerC1Ev+0x194>)
 80086d8:	655a      	str	r2, [r3, #84]	; 0x54
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a4e      	ldr	r2, [pc, #312]	; (8008818 <_ZN10ControllerC1Ev+0x198>)
 80086de:	659a      	str	r2, [r3, #88]	; 0x58
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a4e      	ldr	r2, [pc, #312]	; (800881c <_ZN10ControllerC1Ev+0x19c>)
 80086e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	661a      	str	r2, [r3, #96]	; 0x60
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	665a      	str	r2, [r3, #100]	; 0x64
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	669a      	str	r2, [r3, #104]	; 0x68
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a47      	ldr	r2, [pc, #284]	; (8008820 <_ZN10ControllerC1Ev+0x1a0>)
 8008702:	66da      	str	r2, [r3, #108]	; 0x6c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a47      	ldr	r2, [pc, #284]	; (8008824 <_ZN10ControllerC1Ev+0x1a4>)
 8008708:	671a      	str	r2, [r3, #112]	; 0x70
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a46      	ldr	r2, [pc, #280]	; (8008828 <_ZN10ControllerC1Ev+0x1a8>)
 800870e:	675a      	str	r2, [r3, #116]	; 0x74
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a46      	ldr	r2, [pc, #280]	; (800882c <_ZN10ControllerC1Ev+0x1ac>)
 8008714:	679a      	str	r2, [r3, #120]	; 0x78
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a45      	ldr	r2, [pc, #276]	; (8008830 <_ZN10ControllerC1Ev+0x1b0>)
 800871a:	67da      	str	r2, [r3, #124]	; 0x7c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a45      	ldr	r2, [pc, #276]	; (8008834 <_ZN10ControllerC1Ev+0x1b4>)
 8008720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a43      	ldr	r2, [pc, #268]	; (8008834 <_ZN10ControllerC1Ev+0x1b4>)
 8008728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8008732:	a32f      	add	r3, pc, #188	; (adr r3, 80087f0 <_ZN10ControllerC1Ev+0x170>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800873c:	a32c      	add	r3, pc, #176	; (adr r3, 80087f0 <_ZN10ControllerC1Ev+0x170>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	e9cd 2300 	strd	r2, r3, [sp]
 8008746:	a32c      	add	r3, pc, #176	; (adr r3, 80087f8 <_ZN10ControllerC1Ev+0x178>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	4608      	mov	r0, r1
 800874e:	f003 fff5 	bl	800c73c <_ZN3lpfC1Eddd>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8008758:	a325      	add	r3, pc, #148	; (adr r3, 80087f0 <_ZN10ControllerC1Ev+0x170>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008762:	a323      	add	r3, pc, #140	; (adr r3, 80087f0 <_ZN10ControllerC1Ev+0x170>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	e9cd 2300 	strd	r2, r3, [sp]
 800876c:	a322      	add	r3, pc, #136	; (adr r3, 80087f8 <_ZN10ControllerC1Ev+0x178>)
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	4608      	mov	r0, r1
 8008774:	f003 ffe2 	bl	800c73c <_ZN3lpfC1Eddd>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 800877e:	a31c      	add	r3, pc, #112	; (adr r3, 80087f0 <_ZN10ControllerC1Ev+0x170>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008788:	a319      	add	r3, pc, #100	; (adr r3, 80087f0 <_ZN10ControllerC1Ev+0x170>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	e9cd 2300 	strd	r2, r3, [sp]
 8008792:	a319      	add	r3, pc, #100	; (adr r3, 80087f8 <_ZN10ControllerC1Ev+0x178>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	4608      	mov	r0, r1
 800879a:	f003 ffcf 	bl	800c73c <_ZN3lpfC1Eddd>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f003 fbcf 	bl	800bf48 <_ZN3PIDC1Ev>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80087b0:	4618      	mov	r0, r3
 80087b2:	f003 fbc9 	bl	800bf48 <_ZN3PIDC1Ev>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80087bc:	4618      	mov	r0, r3
 80087be:	f003 fbc3 	bl	800bf48 <_ZN3PIDC1Ev>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80087c8:	4618      	mov	r0, r3
 80087ca:	f003 fbbd 	bl	800bf48 <_ZN3PIDC1Ev>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087d4:	4618      	mov	r0, r3
 80087d6:	f003 fbb7 	bl	800bf48 <_ZN3PIDC1Ev>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80087e0:	4618      	mov	r0, r3
 80087e2:	f003 fbb1 	bl	800bf48 <_ZN3PIDC1Ev>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	fc3b4f61 	.word	0xfc3b4f61
 80087f4:	3fa35935 	.word	0x3fa35935
 80087f8:	4f0d844d 	.word	0x4f0d844d
 80087fc:	3fed94af 	.word	0x3fed94af
 8008800:	44c1c000 	.word	0x44c1c000
 8008804:	42654ca3 	.word	0x42654ca3
 8008808:	3fb33333 	.word	0x3fb33333
 800880c:	411cf5c3 	.word	0x411cf5c3
 8008810:	41f9d70a 	.word	0x41f9d70a
 8008814:	3ea8f5c3 	.word	0x3ea8f5c3
 8008818:	3e19999a 	.word	0x3e19999a
 800881c:	3ce56042 	.word	0x3ce56042
 8008820:	40a00000 	.word	0x40a00000
 8008824:	40d00000 	.word	0x40d00000
 8008828:	40900000 	.word	0x40900000
 800882c:	41200000 	.word	0x41200000
 8008830:	41700000 	.word	0x41700000
 8008834:	bf800000 	.word	0xbf800000

08008838 <_ZN10Controller3RunEv>:

std::vector<float> Controller::Run (void) {
 8008838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	b096      	sub	sp, #88	; 0x58
 800883e:	af04      	add	r7, sp, #16
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	609a      	str	r2, [r3, #8]
        


    int thr;

    switch(mod) {
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	f000 8145 	beq.w	8008b34 <_ZN10Controller3RunEv+0x2fc>
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	f300 8167 	bgt.w	8008b7e <_ZN10Controller3RunEv+0x346>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <_ZN10Controller3RunEv+0x82>
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d04f      	beq.n	8008958 <_ZN10Controller3RunEv+0x120>
 80088b8:	e161      	b.n	8008b7e <_ZN10Controller3RunEv+0x346>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	f8d3 117c 	ldr.w	r1, [r3, #380]	; 0x17c
 80088c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088ca:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80088ce:	f003 fe11 	bl	800c4f4 <_ZN3PID3SatEfii>
 80088d2:	4603      	mov	r3, r0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7f8 fc09 	bl	80010ec <__aeabi_f2iz>
 80088da:	4603      	mov	r3, r0
 80088dc:	647b      	str	r3, [r7, #68]	; 0x44
            roll_des     = state_des.angles[0];
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
            pitch_des 	 = state_des.angles[1];
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
            yaw_rate_des = state_des.rates[2];
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des 	  	= roll_des_filt.Run(roll_des);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f003 ff2e 	bl	800c772 <_ZN3lpf3RunEf>
 8008916:	4602      	mov	r2, r0
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f003 ff20 	bl	800c772 <_ZN3lpf3RunEf>
 8008932:	4602      	mov	r2, r0
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008946:	4619      	mov	r1, r3
 8008948:	4610      	mov	r0, r2
 800894a:	f003 ff12 	bl	800c772 <_ZN3lpf3RunEf>
 800894e:	4602      	mov	r2, r0
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    	    break;
 8008956:	e112      	b.n	8008b7e <_ZN10Controller3RunEv+0x346>
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f503 765a 	add.w	r6, r3, #872	; 0x368
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f8d3 8174 	ldr.w	r8, [r3, #372]	; 0x174
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	f8d3 9178 	ldr.w	r9, [r3, #376]	; 0x178
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	f8d3 a170 	ldr.w	sl, [r3, #368]	; 0x170
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800897e:	4618      	mov	r0, r3
 8008980:	f7f8 fbda 	bl	8001138 <__aeabi_f2uiz>
 8008984:	4603      	mov	r3, r0
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	9501      	str	r5, [sp, #4]
 800898a:	9400      	str	r4, [sp, #0]
 800898c:	4653      	mov	r3, sl
 800898e:	464a      	mov	r2, r9
 8008990:	4641      	mov	r1, r8
 8008992:	4630      	mov	r0, r6
 8008994:	f003 fb48 	bl	800c028 <_ZN3PID6PI_VelEfffffj>
 8008998:	4604      	mov	r4, r0
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7f8 f9c5 	bl	8000d34 <__aeabi_fmul>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4619      	mov	r1, r3
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7f8 f8b8 	bl	8000b24 <__addsf3>
 80089b4:	4603      	mov	r3, r0
 80089b6:	461a      	mov	r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			float deg2rad = 0.0175;
 80089be:	4b5c      	ldr	r3, [pc, #368]	; (8008b30 <_ZN10Controller3RunEv+0x2f8>)
 80089c0:	643b      	str	r3, [r7, #64]	; 0x40
			float roll_r = roll * deg2rad;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80089ca:	f7f8 f9b3 	bl	8000d34 <__aeabi_fmul>
 80089ce:	4603      	mov	r3, r0
 80089d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			float pitch_r = pitch * deg2rad;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80089da:	f7f8 f9ab 	bl	8000d34 <__aeabi_fmul>
 80089de:	4603      	mov	r3, r0
 80089e0:	63bb      	str	r3, [r7, #56]	; 0x38
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 80089e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089e4:	f7f8 ff52 	bl	800188c <_ZSt3cosf>
 80089e8:	4603      	mov	r3, r0
 80089ea:	4619      	mov	r1, r3
 80089ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80089f0:	f7f8 fa54 	bl	8000e9c <__aeabi_fdiv>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461c      	mov	r4, r3
 80089f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089fa:	f7f8 ff47 	bl	800188c <_ZSt3cosf>
 80089fe:	4603      	mov	r3, r0
 8008a00:	4619      	mov	r1, r3
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7f8 fa4a 	bl	8000e9c <__aeabi_fdiv>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34

			F = F * b2e ; // Body to Earth
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008a12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7f8 f98d 	bl	8000d34 <__aeabi_fmul>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			F = p_alt.Sat(F, F_max, F_min);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7f8 fb59 	bl	80010ec <__aeabi_f2iz>
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f8 fb53 	bl	80010ec <__aeabi_f2iz>
 8008a46:	4603      	mov	r3, r0
 8008a48:	4632      	mov	r2, r6
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f003 fd51 	bl	800c4f4 <_ZN3PID3SatEfii>
 8008a52:	4602      	mov	r2, r0
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			thr = p_alt.F2thr(F);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	f503 725a 	add.w	r2, r3, #872	; 0x368
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008a66:	4619      	mov	r1, r3
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f003 fe21 	bl	800c6b0 <_ZN3PID5F2thrEf>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	647b      	str	r3, [r7, #68]	; 0x44
			thr = p_alt.Sat(thr, 1800, 1100);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8008a78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008a7a:	f7f8 f907 	bl	8000c8c <__aeabi_i2f>
 8008a7e:	4601      	mov	r1, r0
 8008a80:	f240 434c 	movw	r3, #1100	; 0x44c
 8008a84:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f003 fd33 	bl	800c4f4 <_ZN3PID3SatEfii>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7f8 fb2b 	bl	80010ec <__aeabi_f2iz>
 8008a96:	4603      	mov	r3, r0
 8008a98:	647b      	str	r3, [r7, #68]	; 0x44
			alt_thr = thr;
 8008a9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008a9c:	f7f8 f8f6 	bl	8000c8c <__aeabi_i2f>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
			z0 = p_alt.zi;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f8d3 23f4 	ldr.w	r2, [r3, #1012]	; 0x3f4
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

            roll_des     = state_des.angles[0];
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
            pitch_des 	 = state_des.angles[1];
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
            yaw_rate_des = state_des.rates[2];
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des 	  	= roll_des_filt.Run(roll_des);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f003 fe43 	bl	800c772 <_ZN3lpf3RunEf>
 8008aec:	4602      	mov	r2, r0
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f003 fe35 	bl	800c772 <_ZN3lpf3RunEf>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f003 fe27 	bl	800c772 <_ZN3lpf3RunEf>
 8008b24:	4602      	mov	r2, r0
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			break;
 8008b2c:	e027      	b.n	8008b7e <_ZN10Controller3RunEv+0x346>
 8008b2e:	bf00      	nop
 8008b30:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);
    		pitch_des = p_velx.PI_Vel(0, x, vx, Kp_vel, Ki_vel, ch2);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f8d3 8188 	ldr.w	r8, [r3, #392]	; 0x188
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	f8d3 9180 	ldr.w	r9, [r3, #384]	; 0x180
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f8 faed 	bl	8001138 <__aeabi_f2uiz>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	9302      	str	r3, [sp, #8]
 8008b62:	9501      	str	r5, [sp, #4]
 8008b64:	9400      	str	r4, [sp, #0]
 8008b66:	464b      	mov	r3, r9
 8008b68:	4642      	mov	r2, r8
 8008b6a:	f04f 0100 	mov.w	r1, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f003 fa5a 	bl	800c028 <_ZN3PID6PI_VelEfffffj>
 8008b74:	4602      	mov	r2, r0
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    		break;
 8008b7c:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b92:	f003 fa2b 	bl	800bfec <_ZN3PID7P_AngleEfff>
 8008b96:	4602      	mov	r2, r0
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	f8d3 1198 	ldr.w	r1, [r3, #408]	; 0x198
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	691a      	ldr	r2, [r3, #16]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb2:	f003 fa1b 	bl	800bfec <_ZN3PID7P_AngleEfff>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120


	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	f8d3 511c 	ldr.w	r5, [r3, #284]	; 0x11c
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	699e      	ldr	r6, [r3, #24]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8008be0:	6838      	ldr	r0, [r7, #0]
 8008be2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008be4:	9003      	str	r0, [sp, #12]
 8008be6:	9102      	str	r1, [sp, #8]
 8008be8:	9201      	str	r2, [sp, #4]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4663      	mov	r3, ip
 8008bee:	4632      	mov	r2, r6
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f003 fa74 	bl	800c0e0 <_ZN3PID9PID_Rate2Efffffff>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	f503 740e 	add.w	r4, r3, #568	; 0x238
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	69de      	ldr	r6, [r3, #28]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008c22:	6838      	ldr	r0, [r7, #0]
 8008c24:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008c26:	9003      	str	r0, [sp, #12]
 8008c28:	9102      	str	r1, [sp, #8]
 8008c2a:	9201      	str	r2, [sp, #4]
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	4663      	mov	r3, ip
 8008c30:	4632      	mov	r2, r6
 8008c32:	4629      	mov	r1, r5
 8008c34:	4620      	mov	r0, r4
 8008c36:	f003 fa53 	bl	800c0e0 <_ZN3PID9PID_Rate2Efffffff>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f8d3 119c 	ldr.w	r1, [r3, #412]	; 0x19c
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6a1a      	ldr	r2, [r3, #32]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	f04f 0500 	mov.w	r5, #0
 8008c5e:	9501      	str	r5, [sp, #4]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4623      	mov	r3, r4
 8008c64:	f003 faf8 	bl	800c258 <_ZN3PID7PD_RateEfffff>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118



    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 8008c70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008c72:	f7f8 f80b 	bl	8000c8c <__aeabi_i2f>
 8008c76:	4602      	mov	r2, r0
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f7f7 ff4f 	bl	8000b24 <__addsf3>
 8008c86:	4603      	mov	r3, r0
 8008c88:	461a      	mov	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008c90:	4619      	mov	r1, r3
 8008c92:	4610      	mov	r0, r2
 8008c94:	f7f7 ff44 	bl	8000b20 <__aeabi_fsub>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f7f7 ff3b 	bl	8000b20 <__aeabi_fsub>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f7 ff35 	bl	8000b20 <__aeabi_fsub>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7f7 fbad 	bl	8000418 <__aeabi_f2d>
 8008cbe:	f04f 0200 	mov.w	r2, #0
 8008cc2:	4bb5      	ldr	r3, [pc, #724]	; (8008f98 <_ZN10Controller3RunEv+0x760>)
 8008cc4:	f7f7 fa48 	bl	8000158 <__aeabi_dsub>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f7f7 feaa 	bl	8000a28 <__aeabi_d2iz>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 8008cd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008cda:	f7f7 ffd7 	bl	8000c8c <__aeabi_i2f>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	f7f7 ff19 	bl	8000b20 <__aeabi_fsub>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7f7 ff12 	bl	8000b24 <__addsf3>
 8008d00:	4603      	mov	r3, r0
 8008d02:	461a      	mov	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7f7 ff07 	bl	8000b20 <__aeabi_fsub>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7f7 ff03 	bl	8000b24 <__addsf3>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7f7 fb79 	bl	8000418 <__aeabi_f2d>
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	4b9b      	ldr	r3, [pc, #620]	; (8008f98 <_ZN10Controller3RunEv+0x760>)
 8008d2c:	f7f7 fa16 	bl	800015c <__adddf3>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4610      	mov	r0, r2
 8008d36:	4619      	mov	r1, r3
 8008d38:	f7f7 fe76 	bl	8000a28 <__aeabi_d2iz>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 8008d40:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008d42:	f7f7 ffa3 	bl	8000c8c <__aeabi_i2f>
 8008d46:	4602      	mov	r2, r0
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7f7 fee7 	bl	8000b24 <__addsf3>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f7f7 fede 	bl	8000b24 <__addsf3>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008d72:	4619      	mov	r1, r3
 8008d74:	4610      	mov	r0, r2
 8008d76:	f7f7 fed5 	bl	8000b24 <__addsf3>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7f7 fecd 	bl	8000b20 <__aeabi_fsub>
 8008d86:	4603      	mov	r3, r0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7f7 fb45 	bl	8000418 <__aeabi_f2d>
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	4b81      	ldr	r3, [pc, #516]	; (8008f98 <_ZN10Controller3RunEv+0x760>)
 8008d94:	f7f7 f9e2 	bl	800015c <__adddf3>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	f7f7 fe42 	bl	8000a28 <__aeabi_d2iz>
 8008da4:	4603      	mov	r3, r0
 8008da6:	62bb      	str	r3, [r7, #40]	; 0x28
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 8008da8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008daa:	f7f7 ff6f 	bl	8000c8c <__aeabi_i2f>
 8008dae:	4602      	mov	r2, r0
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f7f7 feb1 	bl	8000b20 <__aeabi_fsub>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4610      	mov	r0, r2
 8008dcc:	f7f7 fea8 	bl	8000b20 <__aeabi_fsub>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7f7 fea1 	bl	8000b24 <__addsf3>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7f7 fe9b 	bl	8000b24 <__addsf3>
 8008dee:	4603      	mov	r3, r0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f7 fb11 	bl	8000418 <__aeabi_f2d>
 8008df6:	f04f 0200 	mov.w	r2, #0
 8008dfa:	4b67      	ldr	r3, [pc, #412]	; (8008f98 <_ZN10Controller3RunEv+0x760>)
 8008dfc:	f7f7 f9ac 	bl	8000158 <__aeabi_dsub>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4610      	mov	r0, r2
 8008e06:	4619      	mov	r1, r3
 8008e08:	f7f7 fe0e 	bl	8000a28 <__aeabi_d2iz>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8008e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e18:	f7f7 ff38 	bl	8000c8c <__aeabi_i2f>
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	f240 434c 	movw	r3, #1100	; 0x44c
 8008e26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f003 fb28 	bl	800c480 <_ZN3PID3SatEfiii>
 8008e30:	4603      	mov	r3, r0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7f8 f95a 	bl	80010ec <__aeabi_f2iz>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8008e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e44:	f7f7 ff22 	bl	8000c8c <__aeabi_i2f>
 8008e48:	4601      	mov	r1, r0
 8008e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	f240 434c 	movw	r3, #1100	; 0x44c
 8008e52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008e56:	4620      	mov	r0, r4
 8008e58:	f003 fb12 	bl	800c480 <_ZN3PID3SatEfiii>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7f8 f944 	bl	80010ec <__aeabi_f2iz>
 8008e64:	4603      	mov	r3, r0
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e70:	f7f7 ff0c 	bl	8000c8c <__aeabi_i2f>
 8008e74:	4601      	mov	r1, r0
 8008e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	f240 434c 	movw	r3, #1100	; 0x44c
 8008e7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008e82:	4620      	mov	r0, r4
 8008e84:	f003 fafc 	bl	800c480 <_ZN3PID3SatEfiii>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f8 f92e 	bl	80010ec <__aeabi_f2iz>
 8008e90:	4603      	mov	r3, r0
 8008e92:	62bb      	str	r3, [r7, #40]	; 0x28
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8008e9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e9c:	f7f7 fef6 	bl	8000c8c <__aeabi_i2f>
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	f240 434c 	movw	r3, #1100	; 0x44c
 8008eaa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f003 fae6 	bl	800c480 <_ZN3PID3SatEfiii>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f8 f918 	bl	80010ec <__aeabi_f2iz>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
    pwm2 = 1000;
    pwm3 = 1000;
    pwm4 = 1000;*/

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec8:	b291      	uxth	r1, r2
 8008eca:	2201      	movs	r2, #1
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f003 fba7 	bl	800c620 <_ZN3PID7pwm2motEti>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	625a      	str	r2, [r3, #36]	; 0x24
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee0:	b291      	uxth	r1, r2
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f003 fb9b 	bl	800c620 <_ZN3PID7pwm2motEti>
 8008eea:	4602      	mov	r2, r0
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	629a      	str	r2, [r3, #40]	; 0x28
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ef8:	b291      	uxth	r1, r2
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	4618      	mov	r0, r3
 8008f00:	f003 fb8e 	bl	800c620 <_ZN3PID7pwm2motEti>
 8008f04:	4602      	mov	r2, r0
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	62da      	str	r2, [r3, #44]	; 0x2c
    w4 = pid_roll.pwm2mot(pwm4,-1);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f12:	b291      	uxth	r1, r2
 8008f14:	f04f 32ff 	mov.w	r2, #4294967295
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f003 fb81 	bl	800c620 <_ZN3PID7pwm2motEti>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	631a      	str	r2, [r3, #48]	; 0x30


    std::vector<float> controller_output = 	{w1,w2,w3,w4};
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	613b      	str	r3, [r7, #16]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	61bb      	str	r3, [r7, #24]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	f107 0310 	add.w	r3, r7, #16
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	2304      	movs	r3, #4
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	f107 0320 	add.w	r3, r7, #32
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fa f9ec 	bl	8003328 <_ZNSaIfEC1Ev>
 8008f50:	f107 0320 	add.w	r3, r7, #32
 8008f54:	f107 0208 	add.w	r2, r7, #8
 8008f58:	ca06      	ldmia	r2, {r1, r2}
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f85a 	bl	8009014 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8008f60:	f107 0320 	add.w	r3, r7, #32
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fa f98a 	bl	800327e <_ZNSaIfED1Ev>
    controller_output_pwm[0] = pwm1;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    controller_output_pwm[1] = pwm2;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    controller_output_pwm[2] = pwm3;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    controller_output_pwm[3] = pwm4;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f86:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    return controller_output;
 8008f8a:	bf00      	nop
}
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	3748      	adds	r7, #72	; 0x48
 8008f90:	46bd      	mov	sp, r7
 8008f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f96:	bf00      	nop
 8008f98:	3ff80000 	.word	0x3ff80000

08008f9c <_ZN10ControllerD1Ev>:
    controller_output_pwm[3] = pwm4;

    return controller_output;
}
*/
Controller::~Controller() {}
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008faa:	4618      	mov	r0, r3
 8008fac:	f003 fbb8 	bl	800c720 <_ZN3PIDD1Ev>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f003 fbb2 	bl	800c720 <_ZN3PIDD1Ev>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f003 fbac 	bl	800c720 <_ZN3PIDD1Ev>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f003 fba6 	bl	800c720 <_ZN3PIDD1Ev>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f003 fba0 	bl	800c720 <_ZN3PIDD1Ev>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f003 fb9a 	bl	800c720 <_ZN3PIDD1Ev>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	33d8      	adds	r3, #216	; 0xd8
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f003 fc14 	bl	800c81e <_ZN3lpfD1Ev>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	33b0      	adds	r3, #176	; 0xb0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f003 fc0f 	bl	800c81e <_ZN3lpfD1Ev>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3388      	adds	r3, #136	; 0x88
 8009004:	4618      	mov	r0, r3
 8009006:	f003 fc0a 	bl	800c81e <_ZN3lpfD1Ev>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 8009014:	b5b0      	push	{r4, r5, r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	1d38      	adds	r0, r7, #4
 800901e:	e880 0006 	stmia.w	r0, {r1, r2}
 8009022:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f7fa faba 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800902e:	1d3b      	adds	r3, r7, #4
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f810 	bl	8009056 <_ZNKSt16initializer_listIfE5beginEv>
 8009036:	4604      	mov	r4, r0
 8009038:	1d3b      	adds	r3, r7, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f000 f816 	bl	800906c <_ZNKSt16initializer_listIfE3endEv>
 8009040:	4602      	mov	r2, r0
 8009042:	462b      	mov	r3, r5
 8009044:	4621      	mov	r1, r4
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 f822 	bl	8009090 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bdb0      	pop	{r4, r5, r7, pc}

08009056 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr

0800906c <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff ffee 	bl	8009056 <_ZNKSt16initializer_listIfE5beginEv>
 800907a:	4604      	mov	r4, r0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f840 	bl	8009102 <_ZNKSt16initializer_listIfE4sizeEv>
 8009082:	4603      	mov	r3, r0
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4423      	add	r3, r4
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	bd90      	pop	{r4, r7, pc}

08009090 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8009090:	b590      	push	{r4, r7, lr}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	68b8      	ldr	r0, [r7, #8]
 80090a2:	f000 f839 	bl	8009118 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80090a6:	4603      	mov	r3, r0
 80090a8:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80090aa:	68fc      	ldr	r4, [r7, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fa f976 	bl	80033a0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80090b4:	4603      	mov	r3, r0
 80090b6:	4619      	mov	r1, r3
 80090b8:	6978      	ldr	r0, [r7, #20]
 80090ba:	f000 f841 	bl	8009140 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 80090be:	4603      	mov	r3, r0
 80090c0:	4619      	mov	r1, r3
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 f864 	bl	8009190 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80090c8:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	441a      	add	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fa f95c 	bl	80033a0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80090e8:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80090ea:	4622      	mov	r2, r4
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	68b8      	ldr	r0, [r7, #8]
 80090f0:	f000 f862 	bl	80091b8 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 80090f4:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	605a      	str	r2, [r3, #4]
	}
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd90      	pop	{r4, r7, pc}

08009102 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8009118:	b5b0      	push	{r4, r5, r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8009122:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009124:	1d3b      	adds	r3, r7, #4
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f857 	bl	80091da <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800912c:	462a      	mov	r2, r5
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	4620      	mov	r0, r4
 8009132:	f000 f85b 	bl	80091ec <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8009136:	4603      	mov	r3, r0
    }
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bdb0      	pop	{r4, r5, r7, pc}

08009140 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800914a:	f107 030c 	add.w	r3, r7, #12
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	4618      	mov	r0, r3
 8009152:	f7fa fa18 	bl	8003586 <_ZNSaIfEC1ERKS_>
 8009156:	f107 030c 	add.w	r3, r7, #12
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f855 	bl	800920a <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8009160:	4602      	mov	r2, r0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4293      	cmp	r3, r2
 8009166:	bf8c      	ite	hi
 8009168:	2301      	movhi	r3, #1
 800916a:	2300      	movls	r3, #0
 800916c:	b2dc      	uxtb	r4, r3
 800916e:	f107 030c 	add.w	r3, r7, #12
 8009172:	4618      	mov	r0, r3
 8009174:	f7fa f883 	bl	800327e <_ZNSaIfED1Ev>
 8009178:	2c00      	cmp	r4, #0
 800917a:	d002      	beq.n	8009182 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800917c:	4803      	ldr	r0, [pc, #12]	; (800918c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 800917e:	f003 fb6e 	bl	800c85e <_ZSt20__throw_length_errorPKc>
	return __n;
 8009182:	687b      	ldr	r3, [r7, #4]
      }
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	bd90      	pop	{r4, r7, pc}
 800918c:	0800ea1c 	.word	0x0800ea1c

08009190 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d006      	beq.n	80091ae <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f84a 	bl	800923e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80091aa:	4603      	mov	r3, r0
 80091ac:	e000      	b.n	80091b0 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 80091ae:	2300      	movs	r3, #0
      }
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f846 	bl	800925c <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 80091d0:	4603      	mov	r3, r0
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bc80      	pop	{r7}
 80091ea:	4770      	bx	lr

080091ec <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	109b      	asrs	r3, r3, #2
    }
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	bc80      	pop	{r7}
 8009208:	4770      	bx	lr

0800920a <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009212:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009216:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f831 	bl	8009280 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800921e:	4603      	mov	r3, r0
 8009220:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009222:	f107 0208 	add.w	r2, r7, #8
 8009226:	f107 030c 	add.w	r3, r7, #12
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f833 	bl	8009298 <_ZSt3minIjERKT_S2_S2_>
 8009232:	4603      	mov	r3, r0
 8009234:	681b      	ldr	r3, [r3, #0]
      }
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009248:	2200      	movs	r2, #0
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f836 	bl	80092be <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8009252:	4603      	mov	r3, r0
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009268:	2301      	movs	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f842 	bl	80092fa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8009276:	4603      	mov	r3, r0
    }
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f846 	bl	800931a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800928e:	4603      	mov	r3, r0
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d201      	bcs.n	80092b2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	e000      	b.n	80092b4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80092b2:	687b      	ldr	r3, [r7, #4]
    }
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr

080092be <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f825 	bl	800931a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 80092d0:	4602      	mov	r2, r0
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	4293      	cmp	r3, r2
 80092d6:	bf8c      	ite	hi
 80092d8:	2301      	movhi	r3, #1
 80092da:	2300      	movls	r3, #0
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80092e2:	f003 fab9 	bl	800c858 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f003 faa3 	bl	800c836 <_Znwj>
 80092f0:	4603      	mov	r3, r0
      }
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 f810 	bl	8009330 <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8009310:	4603      	mov	r3, r0
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009322:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr

08009330 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f80f 	bl	8009360 <_ZSt12__miter_baseIPKfET_S2_>
 8009342:	4604      	mov	r4, r0
 8009344:	68b8      	ldr	r0, [r7, #8]
 8009346:	f000 f80b 	bl	8009360 <_ZSt12__miter_baseIPKfET_S2_>
 800934a:	4603      	mov	r3, r0
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	4619      	mov	r1, r3
 8009350:	4620      	mov	r0, r4
 8009352:	f000 f80f 	bl	8009374 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8009356:	4603      	mov	r3, r0
    }
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	bd90      	pop	{r4, r7, pc}

08009360 <_ZSt12__miter_baseIPKfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	bc80      	pop	{r7}
 8009372:	4770      	bx	lr

08009374 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009374:	b5b0      	push	{r4, r5, r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 f81a 	bl	80093ba <_ZSt12__niter_baseIPKfET_S2_>
 8009386:	4604      	mov	r4, r0
 8009388:	68b8      	ldr	r0, [r7, #8]
 800938a:	f000 f816 	bl	80093ba <_ZSt12__niter_baseIPKfET_S2_>
 800938e:	4605      	mov	r5, r0
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f81b 	bl	80093ce <_ZSt12__niter_baseIPfET_S1_>
 8009398:	4603      	mov	r3, r0
 800939a:	461a      	mov	r2, r3
 800939c:	4629      	mov	r1, r5
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 f81f 	bl	80093e2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80093a4:	4602      	mov	r2, r0
 80093a6:	1d3b      	adds	r3, r7, #4
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f82b 	bl	8009406 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80093b0:	4603      	mov	r3, r0
    }
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bdb0      	pop	{r4, r5, r7, pc}

080093ba <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bc80      	pop	{r7}
 80093cc:	4770      	bx	lr

080093ce <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80093ee:	2301      	movs	r3, #1
 80093f0:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	68b9      	ldr	r1, [r7, #8]
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f810 	bl	800941c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80093fc:	4603      	mov	r3, r0
    }
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	109b      	asrs	r3, r3, #2
 8009430:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d006      	beq.n	8009446 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	461a      	mov	r2, r3
 800943e:	68f9      	ldr	r1, [r7, #12]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f005 f9a9 	bl	800e798 <memmove>
	  return __result + _Num;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	4413      	add	r3, r2
	}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f003 fae8 	bl	800ca34 <asinf>
 8009464:	4603      	mov	r3, r0
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f003 fb02 	bl	800ca80 <sqrtf>
 800947c:	4603      	mov	r3, r0
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af04      	add	r7, sp, #16
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	625a      	str	r2, [r3, #36]	; 0x24
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f04f 0200 	mov.w	r2, #0
 800949e:	629a      	str	r2, [r3, #40]	; 0x28
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f04f 0200 	mov.w	r2, #0
 80094a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a53      	ldr	r2, [pc, #332]	; (80095f8 <_ZN15Kalman_FiltresiC1Ev+0x170>)
 80094ac:	631a      	str	r2, [r3, #48]	; 0x30
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a52      	ldr	r2, [pc, #328]	; (80095fc <_ZN15Kalman_FiltresiC1Ev+0x174>)
 80094b2:	649a      	str	r2, [r3, #72]	; 0x48
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a51      	ldr	r2, [pc, #324]	; (80095fc <_ZN15Kalman_FiltresiC1Ev+0x174>)
 80094b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a50      	ldr	r2, [pc, #320]	; (8009600 <_ZN15Kalman_FiltresiC1Ev+0x178>)
 80094be:	651a      	str	r2, [r3, #80]	; 0x50
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	655a      	str	r2, [r3, #84]	; 0x54
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f04f 0200 	mov.w	r2, #0
 80094ce:	659a      	str	r2, [r3, #88]	; 0x58
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f04f 0200 	mov.w	r2, #0
 80094d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a47      	ldr	r2, [pc, #284]	; (80095f8 <_ZN15Kalman_FiltresiC1Ev+0x170>)
 80094dc:	661a      	str	r2, [r3, #96]	; 0x60
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a48      	ldr	r2, [pc, #288]	; (8009604 <_ZN15Kalman_FiltresiC1Ev+0x17c>)
 80094e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a43      	ldr	r2, [pc, #268]	; (80095f8 <_ZN15Kalman_FiltresiC1Ev+0x170>)
 80094ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a45      	ldr	r2, [pc, #276]	; (8009608 <_ZN15Kalman_FiltresiC1Ev+0x180>)
 80094f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a44      	ldr	r2, [pc, #272]	; (800960c <_ZN15Kalman_FiltresiC1Ev+0x184>)
 80094fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009504:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a41      	ldr	r2, [pc, #260]	; (8009610 <_ZN15Kalman_FiltresiC1Ev+0x188>)
 800950c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a40      	ldr	r2, [pc, #256]	; (8009614 <_ZN15Kalman_FiltresiC1Ev+0x18c>)
 8009514:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a3e      	ldr	r2, [pc, #248]	; (8009614 <_ZN15Kalman_FiltresiC1Ev+0x18c>)
 800951c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a3d      	ldr	r2, [pc, #244]	; (8009618 <_ZN15Kalman_FiltresiC1Ev+0x190>)
 8009524:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800952e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009538:	4618      	mov	r0, r3
 800953a:	f7f7 fba7 	bl	8000c8c <__aeabi_i2f>
 800953e:	4603      	mov	r3, r0
 8009540:	4619      	mov	r1, r3
 8009542:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009546:	f7f7 fca9 	bl	8000e9c <__aeabi_fdiv>
 800954a:	4603      	mov	r3, r0
 800954c:	4618      	mov	r0, r3
 800954e:	f7f6 ff63 	bl	8000418 <__aeabi_f2d>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800956a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a2a      	ldr	r2, [pc, #168]	; (800961c <_ZN15Kalman_FiltresiC1Ev+0x194>)
 8009572:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800957c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8009586:	a314      	add	r3, pc, #80	; (adr r3, 80095d8 <_ZN15Kalman_FiltresiC1Ev+0x150>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009590:	a311      	add	r3, pc, #68	; (adr r3, 80095d8 <_ZN15Kalman_FiltresiC1Ev+0x150>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	e9cd 2300 	strd	r2, r3, [sp]
 800959a:	a311      	add	r3, pc, #68	; (adr r3, 80095e0 <_ZN15Kalman_FiltresiC1Ev+0x158>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	4608      	mov	r0, r1
 80095a2:	f003 f8cb 	bl	800c73c <_ZN3lpfC1Eddd>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 80095ac:	a30e      	add	r3, pc, #56	; (adr r3, 80095e8 <_ZN15Kalman_FiltresiC1Ev+0x160>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095b6:	a30c      	add	r3, pc, #48	; (adr r3, 80095e8 <_ZN15Kalman_FiltresiC1Ev+0x160>)
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	e9cd 2300 	strd	r2, r3, [sp]
 80095c0:	a30b      	add	r3, pc, #44	; (adr r3, 80095f0 <_ZN15Kalman_FiltresiC1Ev+0x168>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	4608      	mov	r0, r1
 80095c8:	f003 f8b8 	bl	800c73c <_ZN3lpfC1Eddd>

}
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	de7ea5f8 	.word	0xde7ea5f8
 80095dc:	3fb2a454 	.word	0x3fb2a454
 80095e0:	ab367a10 	.word	0xab367a10
 80095e4:	3feb573e 	.word	0x3feb573e
 80095e8:	fc3b4f61 	.word	0xfc3b4f61
 80095ec:	3fa35935 	.word	0x3fa35935
 80095f0:	4f0d844d 	.word	0x4f0d844d
 80095f4:	3fed94af 	.word	0x3fed94af
 80095f8:	47c35000 	.word	0x47c35000
 80095fc:	3a83126f 	.word	0x3a83126f
 8009600:	3ca3d70a 	.word	0x3ca3d70a
 8009604:	461c4000 	.word	0x461c4000
 8009608:	41200000 	.word	0x41200000
 800960c:	4b189680 	.word	0x4b189680
 8009610:	40a00000 	.word	0x40a00000
 8009614:	3727c5ac 	.word	0x3727c5ac
 8009618:	42654ca3 	.word	0x42654ca3
 800961c:	3cdd2f1b 	.word	0x3cdd2f1b

08009620 <_ZN15Kalman_Filtresi3RunEv>:


void Kalman_Filtresi::Run() {
 8009620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009624:	b09c      	sub	sp, #112	; 0x70
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]

  float accX = acc[0]; 
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009630:	66bb      	str	r3, [r7, #104]	; 0x68
  float accY = acc[1];
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009638:	667b      	str	r3, [r7, #100]	; 0x64
  float accZ = acc[2];
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009640:	663b      	str	r3, [r7, #96]	; 0x60

  float gyroX = gyro[0]; 
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009648:	65fb      	str	r3, [r7, #92]	; 0x5c
  float gyroY = gyro[1];
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8009650:	65bb      	str	r3, [r7, #88]	; 0x58
  float gyroZ = gyro[2];
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009658:	657b      	str	r3, [r7, #84]	; 0x54

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 800965a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800965c:	f7f6 fedc 	bl	8000418 <__aeabi_f2d>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8009666:	f7f6 ff2f 	bl	80004c8 <__aeabi_dmul>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4610      	mov	r0, r2
 8009670:	4619      	mov	r1, r3
 8009672:	f7f7 fa01 	bl	8000a78 <__aeabi_d2f>
 8009676:	4602      	mov	r2, r0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  roll_gyro =  gyroX * st;
 800967e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009680:	f7f6 feca 	bl	8000418 <__aeabi_f2d>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800968a:	f7f6 ff1d 	bl	80004c8 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4610      	mov	r0, r2
 8009694:	4619      	mov	r1, r3
 8009696:	f7f7 f9ef 	bl	8000a78 <__aeabi_d2f>
 800969a:	4602      	mov	r2, r0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f001 844b 	beq.w	800af44 <_ZN15Kalman_Filtresi3RunEv+0x1924>

  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 80096ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80096b2:	f7f7 fb3f 	bl	8000d34 <__aeabi_fmul>
 80096b6:	4603      	mov	r3, r0
 80096b8:	461c      	mov	r4, r3
 80096ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80096bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80096be:	f7f7 fb39 	bl	8000d34 <__aeabi_fmul>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4619      	mov	r1, r3
 80096c6:	4620      	mov	r0, r4
 80096c8:	f7f7 fa2c 	bl	8000b24 <__addsf3>
 80096cc:	4603      	mov	r3, r0
 80096ce:	461c      	mov	r4, r3
 80096d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80096d2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80096d4:	f7f7 fb2e 	bl	8000d34 <__aeabi_fmul>
 80096d8:	4603      	mov	r3, r0
 80096da:	4619      	mov	r1, r3
 80096dc:	4620      	mov	r0, r4
 80096de:	f7f7 fa21 	bl	8000b24 <__addsf3>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff fec2 	bl	800946e <_ZSt4sqrtf>
 80096ea:	6478      	str	r0, [r7, #68]	; 0x44

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 80096ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80096f0:	f7f7 fbd4 	bl	8000e9c <__aeabi_fdiv>
 80096f4:	4603      	mov	r3, r0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff fead 	bl	8009456 <_ZSt4asinf>
 80096fc:	4602      	mov	r2, r0
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f7f7 fb14 	bl	8000d34 <__aeabi_fmul>
 800970c:	4603      	mov	r3, r0
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8009716:	4619      	mov	r1, r3
 8009718:	4610      	mov	r0, r2
 800971a:	f7f7 fa03 	bl	8000b24 <__addsf3>
 800971e:	4603      	mov	r3, r0
 8009720:	461a      	mov	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 8009728:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800972a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800972c:	f7f7 fbb6 	bl	8000e9c <__aeabi_fdiv>
 8009730:	4603      	mov	r3, r0
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fe8f 	bl	8009456 <_ZSt4asinf>
 8009738:	4602      	mov	r2, r0
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7f7 faf6 	bl	8000d34 <__aeabi_fmul>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009752:	4619      	mov	r1, r3
 8009754:	4610      	mov	r0, r2
 8009756:	f7f7 f9e5 	bl	8000b24 <__addsf3>
 800975a:	4603      	mov	r3, r0
 800975c:	461a      	mov	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c


    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7f7 f9d6 	bl	8000b24 <__addsf3>
 8009778:	4603      	mov	r3, r0
 800977a:	4618      	mov	r0, r3
 800977c:	f7f6 fe4c 	bl	8000418 <__aeabi_f2d>
 8009780:	a3bb      	add	r3, pc, #748	; (adr r3, 8009a70 <_ZN15Kalman_Filtresi3RunEv+0x450>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 fe9f 	bl	80004c8 <__aeabi_dmul>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4614      	mov	r4, r2
 8009790:	461d      	mov	r5, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009798:	4618      	mov	r0, r3
 800979a:	f7f6 fe3d 	bl	8000418 <__aeabi_f2d>
 800979e:	a3b6      	add	r3, pc, #728	; (adr r3, 8009a78 <_ZN15Kalman_Filtresi3RunEv+0x458>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 fe90 	bl	80004c8 <__aeabi_dmul>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4620      	mov	r0, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f6 fcd4 	bl	800015c <__adddf3>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4610      	mov	r0, r2
 80097ba:	4619      	mov	r1, r3
 80097bc:	f7f7 f95c 	bl	8000a78 <__aeabi_d2f>
 80097c0:	4602      	mov	r2, r0
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7f7 f9a4 	bl	8000b24 <__addsf3>
 80097dc:	4603      	mov	r3, r0
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f6 fe1a 	bl	8000418 <__aeabi_f2d>
 80097e4:	a3a2      	add	r3, pc, #648	; (adr r3, 8009a70 <_ZN15Kalman_Filtresi3RunEv+0x450>)
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	f7f6 fe6d 	bl	80004c8 <__aeabi_dmul>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4614      	mov	r4, r2
 80097f4:	461d      	mov	r5, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f6 fe0b 	bl	8000418 <__aeabi_f2d>
 8009802:	a39d      	add	r3, pc, #628	; (adr r3, 8009a78 <_ZN15Kalman_Filtresi3RunEv+0x458>)
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f7f6 fe5e 	bl	80004c8 <__aeabi_dmul>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f6 fca2 	bl	800015c <__adddf3>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4610      	mov	r0, r2
 800981e:	4619      	mov	r1, r3
 8009820:	f7f7 f92a 	bl	8000a78 <__aeabi_d2f>
 8009824:	4602      	mov	r2, r0
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120


    //ANGLE PREDICTION
    roll_ekf = (roll_ekf) + st*(roll_rate);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009832:	4618      	mov	r0, r3
 8009834:	f7f6 fdf0 	bl	8000418 <__aeabi_f2d>
 8009838:	4680      	mov	r8, r0
 800983a:	4689      	mov	r9, r1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	4618      	mov	r0, r3
 8009848:	f7f6 fde6 	bl	8000418 <__aeabi_f2d>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4620      	mov	r0, r4
 8009852:	4629      	mov	r1, r5
 8009854:	f7f6 fe38 	bl	80004c8 <__aeabi_dmul>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4640      	mov	r0, r8
 800985e:	4649      	mov	r1, r9
 8009860:	f7f6 fc7c 	bl	800015c <__adddf3>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4610      	mov	r0, r2
 800986a:	4619      	mov	r1, r3
 800986c:	f7f7 f904 	bl	8000a78 <__aeabi_d2f>
 8009870:	4602      	mov	r2, r0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

    S11_roll = S11_roll + sa + S31_roll*st + (st*st*(S13_roll + S33_roll*st))/st;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7f7 f94e 	bl	8000b24 <__addsf3>
 8009888:	4603      	mov	r3, r0
 800988a:	4618      	mov	r0, r3
 800988c:	f7f6 fdc4 	bl	8000418 <__aeabi_f2d>
 8009890:	4604      	mov	r4, r0
 8009892:	460d      	mov	r5, r1
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009898:	4618      	mov	r0, r3
 800989a:	f7f6 fdbd 	bl	8000418 <__aeabi_f2d>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80098a4:	f7f6 fe10 	bl	80004c8 <__aeabi_dmul>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4620      	mov	r0, r4
 80098ae:	4629      	mov	r1, r5
 80098b0:	f7f6 fc54 	bl	800015c <__adddf3>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4690      	mov	r8, r2
 80098ba:	4699      	mov	r9, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80098c8:	f7f6 fdfe 	bl	80004c8 <__aeabi_dmul>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4692      	mov	sl, r2
 80098d2:	469b      	mov	fp, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098d8:	4618      	mov	r0, r3
 80098da:	f7f6 fd9d 	bl	8000418 <__aeabi_f2d>
 80098de:	4604      	mov	r4, r0
 80098e0:	460d      	mov	r5, r1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f6 fd96 	bl	8000418 <__aeabi_f2d>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80098f2:	f7f6 fde9 	bl	80004c8 <__aeabi_dmul>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4620      	mov	r0, r4
 80098fc:	4629      	mov	r1, r5
 80098fe:	f7f6 fc2d 	bl	800015c <__adddf3>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4650      	mov	r0, sl
 8009908:	4659      	mov	r1, fp
 800990a:	f7f6 fddd 	bl	80004c8 <__aeabi_dmul>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4610      	mov	r0, r2
 8009914:	4619      	mov	r1, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800991c:	f7f6 fefe 	bl	800071c <__aeabi_ddiv>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4640      	mov	r0, r8
 8009926:	4649      	mov	r1, r9
 8009928:	f7f6 fc18 	bl	800015c <__adddf3>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4610      	mov	r0, r2
 8009932:	4619      	mov	r1, r3
 8009934:	f7f7 f8a0 	bl	8000a78 <__aeabi_d2f>
 8009938:	4602      	mov	r2, r0
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	655a      	str	r2, [r3, #84]	; 0x54
    S12_roll = S12_roll + S32_roll*st;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009942:	4618      	mov	r0, r3
 8009944:	f7f6 fd68 	bl	8000418 <__aeabi_f2d>
 8009948:	4604      	mov	r4, r0
 800994a:	460d      	mov	r5, r1
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009950:	4618      	mov	r0, r3
 8009952:	f7f6 fd61 	bl	8000418 <__aeabi_f2d>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800995c:	f7f6 fdb4 	bl	80004c8 <__aeabi_dmul>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fbf8 	bl	800015c <__adddf3>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4610      	mov	r0, r2
 8009972:	4619      	mov	r1, r3
 8009974:	f7f7 f880 	bl	8000a78 <__aeabi_d2f>
 8009978:	4602      	mov	r2, r0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	659a      	str	r2, [r3, #88]	; 0x58
    S13_roll = S13_roll + S33_roll*st;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009982:	4618      	mov	r0, r3
 8009984:	f7f6 fd48 	bl	8000418 <__aeabi_f2d>
 8009988:	4604      	mov	r4, r0
 800998a:	460d      	mov	r5, r1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009990:	4618      	mov	r0, r3
 8009992:	f7f6 fd41 	bl	8000418 <__aeabi_f2d>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800999c:	f7f6 fd94 	bl	80004c8 <__aeabi_dmul>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f6 fbd8 	bl	800015c <__adddf3>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4610      	mov	r0, r2
 80099b2:	4619      	mov	r1, r3
 80099b4:	f7f7 f860 	bl	8000a78 <__aeabi_d2f>
 80099b8:	4602      	mov	r2, r0
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	665a      	str	r2, [r3, #100]	; 0x64

    S21_roll = S21_roll + S23_roll*(st);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f6 fd28 	bl	8000418 <__aeabi_f2d>
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7f6 fd21 	bl	8000418 <__aeabi_f2d>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80099dc:	f7f6 fd74 	bl	80004c8 <__aeabi_dmul>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fbb8 	bl	800015c <__adddf3>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4610      	mov	r0, r2
 80099f2:	4619      	mov	r1, r3
 80099f4:	f7f7 f840 	bl	8000a78 <__aeabi_d2f>
 80099f8:	4602      	mov	r2, r0
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	65da      	str	r2, [r3, #92]	; 0x5c
    S22_roll = S22_roll + sb;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	4619      	mov	r1, r3
 8009a08:	4610      	mov	r0, r2
 8009a0a:	f7f7 f88b 	bl	8000b24 <__addsf3>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	661a      	str	r2, [r3, #96]	; 0x60
    //S23_roll = S23_roll;

    S31_roll = S31_roll + S33_roll*(st);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f6 fcfc 	bl	8000418 <__aeabi_f2d>
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7f6 fcf5 	bl	8000418 <__aeabi_f2d>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8009a34:	f7f6 fd48 	bl	80004c8 <__aeabi_dmul>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	4629      	mov	r1, r5
 8009a40:	f7f6 fb8c 	bl	800015c <__adddf3>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	f7f7 f814 	bl	8000a78 <__aeabi_d2f>
 8009a50:	4602      	mov	r2, r0
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	66da      	str	r2, [r3, #108]	; 0x6c
    //S32_roll = S32_roll;
    S33_roll = S33_roll + sr;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7f7 f85f 	bl	8000b24 <__addsf3>
 8009a66:	4603      	mov	r3, r0
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	675a      	str	r2, [r3, #116]	; 0x74
 8009a6e:	e007      	b.n	8009a80 <_ZN15Kalman_Filtresi3RunEv+0x460>
 8009a70:	b22d0e56 	.word	0xb22d0e56
 8009a74:	3fefef9d 	.word	0x3fefef9d
 8009a78:	d2f1a9fc 	.word	0xd2f1a9fc
 8009a7c:	3f60624d 	.word	0x3f60624d

    //ANGLE CORRECTION
    A = (Qa*Qg + Qa*S22_roll + Qa*S23_roll + Qa*S32_roll + Qa*S33_roll + Qg*S11_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7f7 f950 	bl	8000d34 <__aeabi_fmul>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461c      	mov	r4, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7f7 f945 	bl	8000d34 <__aeabi_fmul>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	4619      	mov	r1, r3
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f7f7 f838 	bl	8000b24 <__addsf3>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	461c      	mov	r4, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f7f7 f935 	bl	8000d34 <__aeabi_fmul>
 8009aca:	4603      	mov	r3, r0
 8009acc:	4619      	mov	r1, r3
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7f7 f828 	bl	8000b24 <__addsf3>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	461c      	mov	r4, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	f7f7 f925 	bl	8000d34 <__aeabi_fmul>
 8009aea:	4603      	mov	r3, r0
 8009aec:	4619      	mov	r1, r3
 8009aee:	4620      	mov	r0, r4
 8009af0:	f7f7 f818 	bl	8000b24 <__addsf3>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461c      	mov	r4, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f7f7 f915 	bl	8000d34 <__aeabi_fmul>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f7f7 f808 	bl	8000b24 <__addsf3>
 8009b14:	4603      	mov	r3, r0
 8009b16:	461c      	mov	r4, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7f7 f905 	bl	8000d34 <__aeabi_fmul>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f7f6 fff8 	bl	8000b24 <__addsf3>
 8009b34:	4603      	mov	r3, r0
 8009b36:	461c      	mov	r4, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b40:	4619      	mov	r1, r3
 8009b42:	4610      	mov	r0, r2
 8009b44:	f7f7 f8f6 	bl	8000d34 <__aeabi_fmul>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f7f6 ffe9 	bl	8000b24 <__addsf3>
 8009b52:	4603      	mov	r3, r0
 8009b54:	461c      	mov	r4, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4610      	mov	r0, r2
 8009b62:	f7f7 f8e7 	bl	8000d34 <__aeabi_fmul>
 8009b66:	4603      	mov	r3, r0
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7f6 ffd8 	bl	8000b20 <__aeabi_fsub>
 8009b70:	4603      	mov	r3, r0
 8009b72:	461c      	mov	r4, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7f7 f8d8 	bl	8000d34 <__aeabi_fmul>
 8009b84:	4603      	mov	r3, r0
 8009b86:	4619      	mov	r1, r3
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f7f6 ffcb 	bl	8000b24 <__addsf3>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	461c      	mov	r4, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f7f7 f8c9 	bl	8000d34 <__aeabi_fmul>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f7f6 ffba 	bl	8000b20 <__aeabi_fsub>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461c      	mov	r4, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7f7 f8ba 	bl	8000d34 <__aeabi_fmul>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f7f6 ffad 	bl	8000b24 <__addsf3>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	461c      	mov	r4, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7f7 f8ab 	bl	8000d34 <__aeabi_fmul>
 8009bde:	4603      	mov	r3, r0
 8009be0:	4619      	mov	r1, r3
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7f6 ff9c 	bl	8000b20 <__aeabi_fsub>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461c      	mov	r4, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7f7 f89c 	bl	8000d34 <__aeabi_fmul>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7f6 ff8f 	bl	8000b24 <__addsf3>
 8009c06:	4603      	mov	r3, r0
 8009c08:	461c      	mov	r4, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7f7 f88d 	bl	8000d34 <__aeabi_fmul>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f7f6 ff7e 	bl	8000b20 <__aeabi_fsub>
 8009c24:	4603      	mov	r3, r0
 8009c26:	643b      	str	r3, [r7, #64]	; 0x40
    float Kt11_att = 1 - (Qa*(Qg + S22_roll + S23_roll + S32_roll + S33_roll))/A;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f7f6 ff72 	bl	8000b24 <__addsf3>
 8009c40:	4603      	mov	r3, r0
 8009c42:	461a      	mov	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	f7f6 ff6a 	bl	8000b24 <__addsf3>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	f7f6 ff62 	bl	8000b24 <__addsf3>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7f6 ff5a 	bl	8000b24 <__addsf3>
 8009c70:	4603      	mov	r3, r0
 8009c72:	4619      	mov	r1, r3
 8009c74:	4620      	mov	r0, r4
 8009c76:	f7f7 f85d 	bl	8000d34 <__aeabi_fmul>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7f7 f90c 	bl	8000e9c <__aeabi_fdiv>
 8009c84:	4603      	mov	r3, r0
 8009c86:	4619      	mov	r1, r3
 8009c88:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009c8c:	f7f6 ff48 	bl	8000b20 <__aeabi_fsub>
 8009c90:	4603      	mov	r3, r0
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
    float Kt12_att = (Qa*(S12_roll + S13_roll))/A;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	f7f6 ff3d 	bl	8000b24 <__addsf3>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4619      	mov	r1, r3
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7f7 f840 	bl	8000d34 <__aeabi_fmul>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f7 f8ef 	bl	8000e9c <__aeabi_fdiv>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	63bb      	str	r3, [r7, #56]	; 0x38
    float Kt21_att = (Qg*S21_roll + S21_roll*S32_roll - S22_roll*S31_roll + S21_roll*S33_roll - S23_roll*S31_roll)/A;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7f7 f830 	bl	8000d34 <__aeabi_fmul>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	461c      	mov	r4, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7f7 f826 	bl	8000d34 <__aeabi_fmul>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4619      	mov	r1, r3
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7f6 ff19 	bl	8000b24 <__addsf3>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461c      	mov	r4, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfe:	4619      	mov	r1, r3
 8009d00:	4610      	mov	r0, r2
 8009d02:	f7f7 f817 	bl	8000d34 <__aeabi_fmul>
 8009d06:	4603      	mov	r3, r0
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7f6 ff08 	bl	8000b20 <__aeabi_fsub>
 8009d10:	4603      	mov	r3, r0
 8009d12:	461c      	mov	r4, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f7f7 f808 	bl	8000d34 <__aeabi_fmul>
 8009d24:	4603      	mov	r3, r0
 8009d26:	4619      	mov	r1, r3
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7f6 fefb 	bl	8000b24 <__addsf3>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	461c      	mov	r4, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7f6 fff9 	bl	8000d34 <__aeabi_fmul>
 8009d42:	4603      	mov	r3, r0
 8009d44:	4619      	mov	r1, r3
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7f6 feea 	bl	8000b20 <__aeabi_fsub>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f7 f8a3 	bl	8000e9c <__aeabi_fdiv>
 8009d56:	4603      	mov	r3, r0
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
    float Kt22_att = (Qa*S22_roll + Qa*S23_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll)/A;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f7f6 ffe4 	bl	8000d34 <__aeabi_fmul>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	461c      	mov	r4, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	f7f6 ffd9 	bl	8000d34 <__aeabi_fmul>
 8009d82:	4603      	mov	r3, r0
 8009d84:	4619      	mov	r1, r3
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7f6 fecc 	bl	8000b24 <__addsf3>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	461c      	mov	r4, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f7f6 ffca 	bl	8000d34 <__aeabi_fmul>
 8009da0:	4603      	mov	r3, r0
 8009da2:	4619      	mov	r1, r3
 8009da4:	4620      	mov	r0, r4
 8009da6:	f7f6 febd 	bl	8000b24 <__addsf3>
 8009daa:	4603      	mov	r3, r0
 8009dac:	461c      	mov	r4, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db6:	4619      	mov	r1, r3
 8009db8:	4610      	mov	r0, r2
 8009dba:	f7f6 ffbb 	bl	8000d34 <__aeabi_fmul>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7f6 feac 	bl	8000b20 <__aeabi_fsub>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	461c      	mov	r4, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	f7f6 ffac 	bl	8000d34 <__aeabi_fmul>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4619      	mov	r1, r3
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7f6 fe9f 	bl	8000b24 <__addsf3>
 8009de6:	4603      	mov	r3, r0
 8009de8:	461c      	mov	r4, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f7f6 ff9d 	bl	8000d34 <__aeabi_fmul>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f7f6 fe8e 	bl	8000b20 <__aeabi_fsub>
 8009e04:	4603      	mov	r3, r0
 8009e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7f7 f847 	bl	8000e9c <__aeabi_fdiv>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	633b      	str	r3, [r7, #48]	; 0x30
    float Kt31_att = (Qg*S31_roll - S21_roll*S32_roll + S22_roll*S31_roll - S21_roll*S33_roll + S23_roll*S31_roll)/A;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4610      	mov	r0, r2
 8009e20:	f7f6 ff88 	bl	8000d34 <__aeabi_fmul>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461c      	mov	r4, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f7f6 ff7e 	bl	8000d34 <__aeabi_fmul>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f7f6 fe6f 	bl	8000b20 <__aeabi_fsub>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461c      	mov	r4, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4610      	mov	r0, r2
 8009e52:	f7f6 ff6f 	bl	8000d34 <__aeabi_fmul>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f7f6 fe62 	bl	8000b24 <__addsf3>
 8009e60:	4603      	mov	r3, r0
 8009e62:	461c      	mov	r4, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7f6 ff60 	bl	8000d34 <__aeabi_fmul>
 8009e74:	4603      	mov	r3, r0
 8009e76:	4619      	mov	r1, r3
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7f6 fe51 	bl	8000b20 <__aeabi_fsub>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	461c      	mov	r4, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	f7f6 ff51 	bl	8000d34 <__aeabi_fmul>
 8009e92:	4603      	mov	r3, r0
 8009e94:	4619      	mov	r1, r3
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7f6 fe44 	bl	8000b24 <__addsf3>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7f6 fffb 	bl	8000e9c <__aeabi_fdiv>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    float Kt32_att = (Qa*S32_roll + Qa*S33_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll)/A;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7f6 ff3c 	bl	8000d34 <__aeabi_fmul>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461c      	mov	r4, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f7f6 ff31 	bl	8000d34 <__aeabi_fmul>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7f6 fe24 	bl	8000b24 <__addsf3>
 8009edc:	4603      	mov	r3, r0
 8009ede:	461c      	mov	r4, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4610      	mov	r0, r2
 8009eec:	f7f6 ff22 	bl	8000d34 <__aeabi_fmul>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f7f6 fe15 	bl	8000b24 <__addsf3>
 8009efa:	4603      	mov	r3, r0
 8009efc:	461c      	mov	r4, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f7f6 ff13 	bl	8000d34 <__aeabi_fmul>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4619      	mov	r1, r3
 8009f12:	4620      	mov	r0, r4
 8009f14:	f7f6 fe04 	bl	8000b20 <__aeabi_fsub>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	461c      	mov	r4, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f7f6 ff04 	bl	8000d34 <__aeabi_fmul>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4620      	mov	r0, r4
 8009f32:	f7f6 fdf7 	bl	8000b24 <__addsf3>
 8009f36:	4603      	mov	r3, r0
 8009f38:	461c      	mov	r4, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f7f6 fef5 	bl	8000d34 <__aeabi_fmul>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7f6 fde6 	bl	8000b20 <__aeabi_fsub>
 8009f54:	4603      	mov	r3, r0
 8009f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7f6 ff9f 	bl	8000e9c <__aeabi_fdiv>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	62bb      	str	r3, [r7, #40]	; 0x28

    roll_ekf = (roll_ekf) + Kt11_att*((roll_acc) - (roll_ekf)) - Kt12_att*((roll_bias) - (gyroX) + (roll_rate));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009f74:	4619      	mov	r1, r3
 8009f76:	4610      	mov	r0, r2
 8009f78:	f7f6 fdd2 	bl	8000b20 <__aeabi_fsub>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f6 fed7 	bl	8000d34 <__aeabi_fmul>
 8009f86:	4603      	mov	r3, r0
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f7f6 fdca 	bl	8000b24 <__addsf3>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461c      	mov	r4, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f6 fdc0 	bl	8000b20 <__aeabi_fsub>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f7f6 fdba 	bl	8000b24 <__addsf3>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7f6 febd 	bl	8000d34 <__aeabi_fmul>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7f6 fdae 	bl	8000b20 <__aeabi_fsub>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124


    roll_bias = (roll_bias) + Kt21_att*((roll_acc) - (roll_ekf)) - Kt22_att*((roll_bias) - (gyroX) + (roll_rate));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	69dc      	ldr	r4, [r3, #28]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f7f6 fd9d 	bl	8000b20 <__aeabi_fsub>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f6 fea2 	bl	8000d34 <__aeabi_fmul>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f7f6 fd95 	bl	8000b24 <__addsf3>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	461c      	mov	r4, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a004:	4618      	mov	r0, r3
 800a006:	f7f6 fd8b 	bl	8000b20 <__aeabi_fsub>
 800a00a:	4603      	mov	r3, r0
 800a00c:	461a      	mov	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7f6 fd85 	bl	8000b24 <__addsf3>
 800a01a:	4603      	mov	r3, r0
 800a01c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a01e:	4618      	mov	r0, r3
 800a020:	f7f6 fe88 	bl	8000d34 <__aeabi_fmul>
 800a024:	4603      	mov	r3, r0
 800a026:	4619      	mov	r1, r3
 800a028:	4620      	mov	r0, r4
 800a02a:	f7f6 fd79 	bl	8000b20 <__aeabi_fsub>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	61da      	str	r2, [r3, #28]


    roll_rate = (roll_rate) + Kt31_att*((roll_acc) - (roll_ekf)) - Kt32_att*((roll_bias) - (gyroX) + (roll_rate));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68dc      	ldr	r4, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a046:	4619      	mov	r1, r3
 800a048:	4610      	mov	r0, r2
 800a04a:	f7f6 fd69 	bl	8000b20 <__aeabi_fsub>
 800a04e:	4603      	mov	r3, r0
 800a050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a052:	4618      	mov	r0, r3
 800a054:	f7f6 fe6e 	bl	8000d34 <__aeabi_fmul>
 800a058:	4603      	mov	r3, r0
 800a05a:	4619      	mov	r1, r3
 800a05c:	4620      	mov	r0, r4
 800a05e:	f7f6 fd61 	bl	8000b24 <__addsf3>
 800a062:	4603      	mov	r3, r0
 800a064:	461c      	mov	r4, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f6 fd57 	bl	8000b20 <__aeabi_fsub>
 800a072:	4603      	mov	r3, r0
 800a074:	461a      	mov	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	4619      	mov	r1, r3
 800a07c:	4610      	mov	r0, r2
 800a07e:	f7f6 fd51 	bl	8000b24 <__addsf3>
 800a082:	4603      	mov	r3, r0
 800a084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a086:	4618      	mov	r0, r3
 800a088:	f7f6 fe54 	bl	8000d34 <__aeabi_fmul>
 800a08c:	4603      	mov	r3, r0
 800a08e:	4619      	mov	r1, r3
 800a090:	4620      	mov	r0, r4
 800a092:	f7f6 fd45 	bl	8000b20 <__aeabi_fsub>
 800a096:	4603      	mov	r3, r0
 800a098:	461a      	mov	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60da      	str	r2, [r3, #12]


    S11_roll = - S11_roll*(Kt11_att - 1) - Kt12_att*S21_roll - Kt12_att*S31_roll;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a0a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a0aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a0ac:	f7f6 fd38 	bl	8000b20 <__aeabi_fsub>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f7f6 fe3d 	bl	8000d34 <__aeabi_fmul>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	461c      	mov	r4, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f6 fe35 	bl	8000d34 <__aeabi_fmul>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f7f6 fd26 	bl	8000b20 <__aeabi_fsub>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	461c      	mov	r4, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7f6 fe28 	bl	8000d34 <__aeabi_fmul>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f7f6 fd19 	bl	8000b20 <__aeabi_fsub>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	655a      	str	r2, [r3, #84]	; 0x54


    S12_roll = - S12_roll*(Kt11_att - 1) - Kt12_att*S22_roll - Kt12_att*S32_roll;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a0fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a102:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a104:	f7f6 fd0c 	bl	8000b20 <__aeabi_fsub>
 800a108:	4603      	mov	r3, r0
 800a10a:	4619      	mov	r1, r3
 800a10c:	4620      	mov	r0, r4
 800a10e:	f7f6 fe11 	bl	8000d34 <__aeabi_fmul>
 800a112:	4603      	mov	r3, r0
 800a114:	461c      	mov	r4, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a11a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7f6 fe09 	bl	8000d34 <__aeabi_fmul>
 800a122:	4603      	mov	r3, r0
 800a124:	4619      	mov	r1, r3
 800a126:	4620      	mov	r0, r4
 800a128:	f7f6 fcfa 	bl	8000b20 <__aeabi_fsub>
 800a12c:	4603      	mov	r3, r0
 800a12e:	461c      	mov	r4, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a136:	4618      	mov	r0, r3
 800a138:	f7f6 fdfc 	bl	8000d34 <__aeabi_fmul>
 800a13c:	4603      	mov	r3, r0
 800a13e:	4619      	mov	r1, r3
 800a140:	4620      	mov	r0, r4
 800a142:	f7f6 fced 	bl	8000b20 <__aeabi_fsub>
 800a146:	4603      	mov	r3, r0
 800a148:	461a      	mov	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	659a      	str	r2, [r3, #88]	; 0x58


    S13_roll = - S13_roll*(Kt11_att - 1) - Kt12_att*S23_roll - Kt12_att*S33_roll;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a152:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a156:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a15a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a15c:	f7f6 fce0 	bl	8000b20 <__aeabi_fsub>
 800a160:	4603      	mov	r3, r0
 800a162:	4619      	mov	r1, r3
 800a164:	4620      	mov	r0, r4
 800a166:	f7f6 fde5 	bl	8000d34 <__aeabi_fmul>
 800a16a:	4603      	mov	r3, r0
 800a16c:	461c      	mov	r4, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a174:	4618      	mov	r0, r3
 800a176:	f7f6 fddd 	bl	8000d34 <__aeabi_fmul>
 800a17a:	4603      	mov	r3, r0
 800a17c:	4619      	mov	r1, r3
 800a17e:	4620      	mov	r0, r4
 800a180:	f7f6 fcce 	bl	8000b20 <__aeabi_fsub>
 800a184:	4603      	mov	r3, r0
 800a186:	461c      	mov	r4, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a18c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a18e:	4618      	mov	r0, r3
 800a190:	f7f6 fdd0 	bl	8000d34 <__aeabi_fmul>
 800a194:	4603      	mov	r3, r0
 800a196:	4619      	mov	r1, r3
 800a198:	4620      	mov	r0, r4
 800a19a:	f7f6 fcc1 	bl	8000b20 <__aeabi_fsub>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	665a      	str	r2, [r3, #100]	; 0x64


    S21_roll = - S21_roll*(Kt22_att - 1) - Kt21_att*S11_roll - Kt22_att*S31_roll;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1aa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a1ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a1b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1b4:	f7f6 fcb4 	bl	8000b20 <__aeabi_fsub>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7f6 fdb9 	bl	8000d34 <__aeabi_fmul>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	461c      	mov	r4, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f6 fdb1 	bl	8000d34 <__aeabi_fmul>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7f6 fca2 	bl	8000b20 <__aeabi_fsub>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	461c      	mov	r4, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7f6 fda4 	bl	8000d34 <__aeabi_fmul>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f7f6 fc95 	bl	8000b20 <__aeabi_fsub>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	65da      	str	r2, [r3, #92]	; 0x5c


    S22_roll = - S22_roll*(Kt22_att - 1) - Kt21_att*S12_roll - Kt22_att*S32_roll;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a202:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a206:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a20a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a20c:	f7f6 fc88 	bl	8000b20 <__aeabi_fsub>
 800a210:	4603      	mov	r3, r0
 800a212:	4619      	mov	r1, r3
 800a214:	4620      	mov	r0, r4
 800a216:	f7f6 fd8d 	bl	8000d34 <__aeabi_fmul>
 800a21a:	4603      	mov	r3, r0
 800a21c:	461c      	mov	r4, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a222:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a224:	4618      	mov	r0, r3
 800a226:	f7f6 fd85 	bl	8000d34 <__aeabi_fmul>
 800a22a:	4603      	mov	r3, r0
 800a22c:	4619      	mov	r1, r3
 800a22e:	4620      	mov	r0, r4
 800a230:	f7f6 fc76 	bl	8000b20 <__aeabi_fsub>
 800a234:	4603      	mov	r3, r0
 800a236:	461c      	mov	r4, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f6 fd78 	bl	8000d34 <__aeabi_fmul>
 800a244:	4603      	mov	r3, r0
 800a246:	4619      	mov	r1, r3
 800a248:	4620      	mov	r0, r4
 800a24a:	f7f6 fc69 	bl	8000b20 <__aeabi_fsub>
 800a24e:	4603      	mov	r3, r0
 800a250:	461a      	mov	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	661a      	str	r2, [r3, #96]	; 0x60


    S23_roll = - S23_roll*(Kt22_att - 1) - Kt21_att*S13_roll - Kt22_att*S33_roll;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a25a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a25e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a264:	f7f6 fc5c 	bl	8000b20 <__aeabi_fsub>
 800a268:	4603      	mov	r3, r0
 800a26a:	4619      	mov	r1, r3
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7f6 fd61 	bl	8000d34 <__aeabi_fmul>
 800a272:	4603      	mov	r3, r0
 800a274:	461c      	mov	r4, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a27a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7f6 fd59 	bl	8000d34 <__aeabi_fmul>
 800a282:	4603      	mov	r3, r0
 800a284:	4619      	mov	r1, r3
 800a286:	4620      	mov	r0, r4
 800a288:	f7f6 fc4a 	bl	8000b20 <__aeabi_fsub>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461c      	mov	r4, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a296:	4618      	mov	r0, r3
 800a298:	f7f6 fd4c 	bl	8000d34 <__aeabi_fmul>
 800a29c:	4603      	mov	r3, r0
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f7f6 fc3d 	bl	8000b20 <__aeabi_fsub>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	669a      	str	r2, [r3, #104]	; 0x68


    S31_roll = - S31_roll*(Kt32_att - 1) - Kt31_att*S11_roll - Kt32_att*S21_roll;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a2b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2bc:	f7f6 fc30 	bl	8000b20 <__aeabi_fsub>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f7f6 fd35 	bl	8000d34 <__aeabi_fmul>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7f6 fd2d 	bl	8000d34 <__aeabi_fmul>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7f6 fc1e 	bl	8000b20 <__aeabi_fsub>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461c      	mov	r4, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f6 fd20 	bl	8000d34 <__aeabi_fmul>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f7f6 fc11 	bl	8000b20 <__aeabi_fsub>
 800a2fe:	4603      	mov	r3, r0
 800a300:	461a      	mov	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	66da      	str	r2, [r3, #108]	; 0x6c


    S32_roll = - S32_roll*(Kt32_att - 1) - Kt31_att*S12_roll - Kt32_att*S22_roll;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a30e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a314:	f7f6 fc04 	bl	8000b20 <__aeabi_fsub>
 800a318:	4603      	mov	r3, r0
 800a31a:	4619      	mov	r1, r3
 800a31c:	4620      	mov	r0, r4
 800a31e:	f7f6 fd09 	bl	8000d34 <__aeabi_fmul>
 800a322:	4603      	mov	r3, r0
 800a324:	461c      	mov	r4, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7f6 fd01 	bl	8000d34 <__aeabi_fmul>
 800a332:	4603      	mov	r3, r0
 800a334:	4619      	mov	r1, r3
 800a336:	4620      	mov	r0, r4
 800a338:	f7f6 fbf2 	bl	8000b20 <__aeabi_fsub>
 800a33c:	4603      	mov	r3, r0
 800a33e:	461c      	mov	r4, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a346:	4618      	mov	r0, r3
 800a348:	f7f6 fcf4 	bl	8000d34 <__aeabi_fmul>
 800a34c:	4603      	mov	r3, r0
 800a34e:	4619      	mov	r1, r3
 800a350:	4620      	mov	r0, r4
 800a352:	f7f6 fbe5 	bl	8000b20 <__aeabi_fsub>
 800a356:	4603      	mov	r3, r0
 800a358:	461a      	mov	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	671a      	str	r2, [r3, #112]	; 0x70


    S33_roll = - S33_roll*(Kt32_att - 1) - Kt31_att*S13_roll - Kt32_att*S23_roll;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a362:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a366:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a36c:	f7f6 fbd8 	bl	8000b20 <__aeabi_fsub>
 800a370:	4603      	mov	r3, r0
 800a372:	4619      	mov	r1, r3
 800a374:	4620      	mov	r0, r4
 800a376:	f7f6 fcdd 	bl	8000d34 <__aeabi_fmul>
 800a37a:	4603      	mov	r3, r0
 800a37c:	461c      	mov	r4, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a384:	4618      	mov	r0, r3
 800a386:	f7f6 fcd5 	bl	8000d34 <__aeabi_fmul>
 800a38a:	4603      	mov	r3, r0
 800a38c:	4619      	mov	r1, r3
 800a38e:	4620      	mov	r0, r4
 800a390:	f7f6 fbc6 	bl	8000b20 <__aeabi_fsub>
 800a394:	4603      	mov	r3, r0
 800a396:	461c      	mov	r4, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a39c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f6 fcc8 	bl	8000d34 <__aeabi_fmul>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7f6 fbb9 	bl	8000b20 <__aeabi_fsub>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	675a      	str	r2, [r3, #116]	; 0x74

    //============================

    //ANGLE PREDICTION
    pitch_ekf = (pitch_ekf) + st*(pitch_rate);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f6 f82b 	bl	8000418 <__aeabi_f2d>
 800a3c2:	4680      	mov	r8, r0
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f6 f821 	bl	8000418 <__aeabi_f2d>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	f7f6 f873 	bl	80004c8 <__aeabi_dmul>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7f5 feb7 	bl	800015c <__adddf3>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7f6 fb3f 	bl	8000a78 <__aeabi_d2f>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

    S11_pitch = S11_pitch + sa + S31_pitch*st + (st*st*(S13_pitch + S33_pitch*st))/st;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a40a:	4619      	mov	r1, r3
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7f6 fb89 	bl	8000b24 <__addsf3>
 800a412:	4603      	mov	r3, r0
 800a414:	4618      	mov	r0, r3
 800a416:	f7f5 ffff 	bl	8000418 <__aeabi_f2d>
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a422:	4618      	mov	r0, r3
 800a424:	f7f5 fff8 	bl	8000418 <__aeabi_f2d>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a42e:	f7f6 f84b 	bl	80004c8 <__aeabi_dmul>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4620      	mov	r0, r4
 800a438:	4629      	mov	r1, r5
 800a43a:	f7f5 fe8f 	bl	800015c <__adddf3>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4690      	mov	r8, r2
 800a444:	4699      	mov	r9, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a452:	f7f6 f839 	bl	80004c8 <__aeabi_dmul>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4692      	mov	sl, r2
 800a45c:	469b      	mov	fp, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a462:	4618      	mov	r0, r3
 800a464:	f7f5 ffd8 	bl	8000418 <__aeabi_f2d>
 800a468:	4604      	mov	r4, r0
 800a46a:	460d      	mov	r5, r1
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a470:	4618      	mov	r0, r3
 800a472:	f7f5 ffd1 	bl	8000418 <__aeabi_f2d>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a47c:	f7f6 f824 	bl	80004c8 <__aeabi_dmul>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4620      	mov	r0, r4
 800a486:	4629      	mov	r1, r5
 800a488:	f7f5 fe68 	bl	800015c <__adddf3>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4650      	mov	r0, sl
 800a492:	4659      	mov	r1, fp
 800a494:	f7f6 f818 	bl	80004c8 <__aeabi_dmul>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4610      	mov	r0, r2
 800a49e:	4619      	mov	r1, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a4a6:	f7f6 f939 	bl	800071c <__aeabi_ddiv>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	f7f5 fe53 	bl	800015c <__adddf3>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	4619      	mov	r1, r3
 800a4be:	f7f6 fadb 	bl	8000a78 <__aeabi_d2f>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	625a      	str	r2, [r3, #36]	; 0x24
    S12_pitch = S12_pitch + S32_pitch*st;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f5 ffa3 	bl	8000418 <__aeabi_f2d>
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	460d      	mov	r5, r1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7f5 ff9c 	bl	8000418 <__aeabi_f2d>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a4e6:	f7f5 ffef 	bl	80004c8 <__aeabi_dmul>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f5 fe33 	bl	800015c <__adddf3>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f7f6 fabb 	bl	8000a78 <__aeabi_d2f>
 800a502:	4602      	mov	r2, r0
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	629a      	str	r2, [r3, #40]	; 0x28
    S13_pitch = S13_pitch + S33_pitch*st;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f5 ff83 	bl	8000418 <__aeabi_f2d>
 800a512:	4604      	mov	r4, r0
 800a514:	460d      	mov	r5, r1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f5 ff7c 	bl	8000418 <__aeabi_f2d>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a526:	f7f5 ffcf 	bl	80004c8 <__aeabi_dmul>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f7f5 fe13 	bl	800015c <__adddf3>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4610      	mov	r0, r2
 800a53c:	4619      	mov	r1, r3
 800a53e:	f7f6 fa9b 	bl	8000a78 <__aeabi_d2f>
 800a542:	4602      	mov	r2, r0
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	635a      	str	r2, [r3, #52]	; 0x34

    S21_pitch = S21_pitch + S23_pitch*(st);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f5 ff63 	bl	8000418 <__aeabi_f2d>
 800a552:	4604      	mov	r4, r0
 800a554:	460d      	mov	r5, r1
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7f5 ff5c 	bl	8000418 <__aeabi_f2d>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a566:	f7f5 ffaf 	bl	80004c8 <__aeabi_dmul>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4620      	mov	r0, r4
 800a570:	4629      	mov	r1, r5
 800a572:	f7f5 fdf3 	bl	800015c <__adddf3>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4610      	mov	r0, r2
 800a57c:	4619      	mov	r1, r3
 800a57e:	f7f6 fa7b 	bl	8000a78 <__aeabi_d2f>
 800a582:	4602      	mov	r2, r0
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	62da      	str	r2, [r3, #44]	; 0x2c
    S22_pitch = S22_pitch + sb;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	f7f6 fac6 	bl	8000b24 <__addsf3>
 800a598:	4603      	mov	r3, r0
 800a59a:	461a      	mov	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	631a      	str	r2, [r3, #48]	; 0x30
    //S23_pitch = S23_pitch;

    S31_pitch = S31_pitch + S33_pitch*(st);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7f5 ff37 	bl	8000418 <__aeabi_f2d>
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	460d      	mov	r5, r1
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7f5 ff30 	bl	8000418 <__aeabi_f2d>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800a5be:	f7f5 ff83 	bl	80004c8 <__aeabi_dmul>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	f7f5 fdc7 	bl	800015c <__adddf3>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	f7f6 fa4f 	bl	8000a78 <__aeabi_d2f>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	63da      	str	r2, [r3, #60]	; 0x3c
    //S32_pitch = S32_pitch;
    S33_pitch = S33_pitch + sr;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	f7f6 fa9a 	bl	8000b24 <__addsf3>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	645a      	str	r2, [r3, #68]	; 0x44

    //ANGLE CORRECTION
    A = (Qa*Qg + Qa*S22_pitch + Qa*S23_pitch + Qa*S32_pitch + Qa*S33_pitch + Qg*S11_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f7f6 fb94 	bl	8000d34 <__aeabi_fmul>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461c      	mov	r4, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	4619      	mov	r1, r3
 800a61c:	4610      	mov	r0, r2
 800a61e:	f7f6 fb89 	bl	8000d34 <__aeabi_fmul>
 800a622:	4603      	mov	r3, r0
 800a624:	4619      	mov	r1, r3
 800a626:	4620      	mov	r0, r4
 800a628:	f7f6 fa7c 	bl	8000b24 <__addsf3>
 800a62c:	4603      	mov	r3, r0
 800a62e:	461c      	mov	r4, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f7f6 fb79 	bl	8000d34 <__aeabi_fmul>
 800a642:	4603      	mov	r3, r0
 800a644:	4619      	mov	r1, r3
 800a646:	4620      	mov	r0, r4
 800a648:	f7f6 fa6c 	bl	8000b24 <__addsf3>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461c      	mov	r4, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f7f6 fb69 	bl	8000d34 <__aeabi_fmul>
 800a662:	4603      	mov	r3, r0
 800a664:	4619      	mov	r1, r3
 800a666:	4620      	mov	r0, r4
 800a668:	f7f6 fa5c 	bl	8000b24 <__addsf3>
 800a66c:	4603      	mov	r3, r0
 800a66e:	461c      	mov	r4, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	f7f6 fb59 	bl	8000d34 <__aeabi_fmul>
 800a682:	4603      	mov	r3, r0
 800a684:	4619      	mov	r1, r3
 800a686:	4620      	mov	r0, r4
 800a688:	f7f6 fa4c 	bl	8000b24 <__addsf3>
 800a68c:	4603      	mov	r3, r0
 800a68e:	461c      	mov	r4, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	4619      	mov	r1, r3
 800a69c:	4610      	mov	r0, r2
 800a69e:	f7f6 fb49 	bl	8000d34 <__aeabi_fmul>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7f6 fa3c 	bl	8000b24 <__addsf3>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461c      	mov	r4, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	f7f6 fb3a 	bl	8000d34 <__aeabi_fmul>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7f6 fa2d 	bl	8000b24 <__addsf3>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	461c      	mov	r4, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7f6 fb2b 	bl	8000d34 <__aeabi_fmul>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7f6 fa1c 	bl	8000b20 <__aeabi_fsub>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	461c      	mov	r4, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	f7f6 fb1c 	bl	8000d34 <__aeabi_fmul>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4619      	mov	r1, r3
 800a700:	4620      	mov	r0, r4
 800a702:	f7f6 fa0f 	bl	8000b24 <__addsf3>
 800a706:	4603      	mov	r3, r0
 800a708:	461c      	mov	r4, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a712:	4619      	mov	r1, r3
 800a714:	4610      	mov	r0, r2
 800a716:	f7f6 fb0d 	bl	8000d34 <__aeabi_fmul>
 800a71a:	4603      	mov	r3, r0
 800a71c:	4619      	mov	r1, r3
 800a71e:	4620      	mov	r0, r4
 800a720:	f7f6 f9fe 	bl	8000b20 <__aeabi_fsub>
 800a724:	4603      	mov	r3, r0
 800a726:	461c      	mov	r4, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a730:	4619      	mov	r1, r3
 800a732:	4610      	mov	r0, r2
 800a734:	f7f6 fafe 	bl	8000d34 <__aeabi_fmul>
 800a738:	4603      	mov	r3, r0
 800a73a:	4619      	mov	r1, r3
 800a73c:	4620      	mov	r0, r4
 800a73e:	f7f6 f9f1 	bl	8000b24 <__addsf3>
 800a742:	4603      	mov	r3, r0
 800a744:	461c      	mov	r4, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	4619      	mov	r1, r3
 800a750:	4610      	mov	r0, r2
 800a752:	f7f6 faef 	bl	8000d34 <__aeabi_fmul>
 800a756:	4603      	mov	r3, r0
 800a758:	4619      	mov	r1, r3
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7f6 f9e0 	bl	8000b20 <__aeabi_fsub>
 800a760:	4603      	mov	r3, r0
 800a762:	461c      	mov	r4, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76c:	4619      	mov	r1, r3
 800a76e:	4610      	mov	r0, r2
 800a770:	f7f6 fae0 	bl	8000d34 <__aeabi_fmul>
 800a774:	4603      	mov	r3, r0
 800a776:	4619      	mov	r1, r3
 800a778:	4620      	mov	r0, r4
 800a77a:	f7f6 f9d3 	bl	8000b24 <__addsf3>
 800a77e:	4603      	mov	r3, r0
 800a780:	461c      	mov	r4, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78a:	4619      	mov	r1, r3
 800a78c:	4610      	mov	r0, r2
 800a78e:	f7f6 fad1 	bl	8000d34 <__aeabi_fmul>
 800a792:	4603      	mov	r3, r0
 800a794:	4619      	mov	r1, r3
 800a796:	4620      	mov	r0, r4
 800a798:	f7f6 f9c2 	bl	8000b20 <__aeabi_fsub>
 800a79c:	4603      	mov	r3, r0
 800a79e:	643b      	str	r3, [r7, #64]	; 0x40
     Kt11_att = 1 - (Qa*(Qg + S22_pitch + S23_pitch + S32_pitch + S33_pitch))/A;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f7f6 f9b6 	bl	8000b24 <__addsf3>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f7f6 f9ae 	bl	8000b24 <__addsf3>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	f7f6 f9a6 	bl	8000b24 <__addsf3>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7f6 f99e 	bl	8000b24 <__addsf3>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7f6 faa1 	bl	8000d34 <__aeabi_fmul>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7f6 fb50 	bl	8000e9c <__aeabi_fdiv>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	4619      	mov	r1, r3
 800a800:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a804:	f7f6 f98c 	bl	8000b20 <__aeabi_fsub>
 800a808:	4603      	mov	r3, r0
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
     Kt12_att = (Qa*(S12_pitch + S13_pitch))/A;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81a:	4619      	mov	r1, r3
 800a81c:	4610      	mov	r0, r2
 800a81e:	f7f6 f981 	bl	8000b24 <__addsf3>
 800a822:	4603      	mov	r3, r0
 800a824:	4619      	mov	r1, r3
 800a826:	4620      	mov	r0, r4
 800a828:	f7f6 fa84 	bl	8000d34 <__aeabi_fmul>
 800a82c:	4603      	mov	r3, r0
 800a82e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a830:	4618      	mov	r0, r3
 800a832:	f7f6 fb33 	bl	8000e9c <__aeabi_fdiv>
 800a836:	4603      	mov	r3, r0
 800a838:	63bb      	str	r3, [r7, #56]	; 0x38
     Kt21_att = (Qg*S21_pitch + S21_pitch*S32_pitch - S22_pitch*S31_pitch + S21_pitch*S33_pitch - S23_pitch*S31_pitch)/A;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a844:	4619      	mov	r1, r3
 800a846:	4610      	mov	r0, r2
 800a848:	f7f6 fa74 	bl	8000d34 <__aeabi_fmul>
 800a84c:	4603      	mov	r3, r0
 800a84e:	461c      	mov	r4, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f7f6 fa6a 	bl	8000d34 <__aeabi_fmul>
 800a860:	4603      	mov	r3, r0
 800a862:	4619      	mov	r1, r3
 800a864:	4620      	mov	r0, r4
 800a866:	f7f6 f95d 	bl	8000b24 <__addsf3>
 800a86a:	4603      	mov	r3, r0
 800a86c:	461c      	mov	r4, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7f6 fa5b 	bl	8000d34 <__aeabi_fmul>
 800a87e:	4603      	mov	r3, r0
 800a880:	4619      	mov	r1, r3
 800a882:	4620      	mov	r0, r4
 800a884:	f7f6 f94c 	bl	8000b20 <__aeabi_fsub>
 800a888:	4603      	mov	r3, r0
 800a88a:	461c      	mov	r4, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a894:	4619      	mov	r1, r3
 800a896:	4610      	mov	r0, r2
 800a898:	f7f6 fa4c 	bl	8000d34 <__aeabi_fmul>
 800a89c:	4603      	mov	r3, r0
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7f6 f93f 	bl	8000b24 <__addsf3>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	461c      	mov	r4, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	f7f6 fa3d 	bl	8000d34 <__aeabi_fmul>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7f6 f92e 	bl	8000b20 <__aeabi_fsub>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f6 fae7 	bl	8000e9c <__aeabi_fdiv>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	637b      	str	r3, [r7, #52]	; 0x34
     Kt22_att = (Qa*S22_pitch + Qa*S23_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch)/A;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f7f6 fa28 	bl	8000d34 <__aeabi_fmul>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	461c      	mov	r4, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7f6 fa1d 	bl	8000d34 <__aeabi_fmul>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7f6 f910 	bl	8000b24 <__addsf3>
 800a904:	4603      	mov	r3, r0
 800a906:	461c      	mov	r4, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	4619      	mov	r1, r3
 800a912:	4610      	mov	r0, r2
 800a914:	f7f6 fa0e 	bl	8000d34 <__aeabi_fmul>
 800a918:	4603      	mov	r3, r0
 800a91a:	4619      	mov	r1, r3
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7f6 f901 	bl	8000b24 <__addsf3>
 800a922:	4603      	mov	r3, r0
 800a924:	461c      	mov	r4, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f7f6 f9ff 	bl	8000d34 <__aeabi_fmul>
 800a936:	4603      	mov	r3, r0
 800a938:	4619      	mov	r1, r3
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7f6 f8f0 	bl	8000b20 <__aeabi_fsub>
 800a940:	4603      	mov	r3, r0
 800a942:	461c      	mov	r4, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f7f6 f9f0 	bl	8000d34 <__aeabi_fmul>
 800a954:	4603      	mov	r3, r0
 800a956:	4619      	mov	r1, r3
 800a958:	4620      	mov	r0, r4
 800a95a:	f7f6 f8e3 	bl	8000b24 <__addsf3>
 800a95e:	4603      	mov	r3, r0
 800a960:	461c      	mov	r4, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7f6 f9e1 	bl	8000d34 <__aeabi_fmul>
 800a972:	4603      	mov	r3, r0
 800a974:	4619      	mov	r1, r3
 800a976:	4620      	mov	r0, r4
 800a978:	f7f6 f8d2 	bl	8000b20 <__aeabi_fsub>
 800a97c:	4603      	mov	r3, r0
 800a97e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a980:	4618      	mov	r0, r3
 800a982:	f7f6 fa8b 	bl	8000e9c <__aeabi_fdiv>
 800a986:	4603      	mov	r3, r0
 800a988:	633b      	str	r3, [r7, #48]	; 0x30
     Kt31_att = (Qg*S31_pitch - S21_pitch*S32_pitch + S22_pitch*S31_pitch - S21_pitch*S33_pitch + S23_pitch*S31_pitch)/A;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a994:	4619      	mov	r1, r3
 800a996:	4610      	mov	r0, r2
 800a998:	f7f6 f9cc 	bl	8000d34 <__aeabi_fmul>
 800a99c:	4603      	mov	r3, r0
 800a99e:	461c      	mov	r4, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7f6 f9c2 	bl	8000d34 <__aeabi_fmul>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7f6 f8b3 	bl	8000b20 <__aeabi_fsub>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	461c      	mov	r4, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f7f6 f9b3 	bl	8000d34 <__aeabi_fmul>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7f6 f8a6 	bl	8000b24 <__addsf3>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	461c      	mov	r4, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f7f6 f9a4 	bl	8000d34 <__aeabi_fmul>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7f6 f895 	bl	8000b20 <__aeabi_fsub>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	461c      	mov	r4, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa02:	4619      	mov	r1, r3
 800aa04:	4610      	mov	r0, r2
 800aa06:	f7f6 f995 	bl	8000d34 <__aeabi_fmul>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7f6 f888 	bl	8000b24 <__addsf3>
 800aa14:	4603      	mov	r3, r0
 800aa16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7f6 fa3f 	bl	8000e9c <__aeabi_fdiv>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	62fb      	str	r3, [r7, #44]	; 0x2c
     Kt32_att = (Qa*S32_pitch + Qa*S33_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch)/A;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	f7f6 f980 	bl	8000d34 <__aeabi_fmul>
 800aa34:	4603      	mov	r3, r0
 800aa36:	461c      	mov	r4, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f7f6 f975 	bl	8000d34 <__aeabi_fmul>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7f6 f868 	bl	8000b24 <__addsf3>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461c      	mov	r4, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa60:	4619      	mov	r1, r3
 800aa62:	4610      	mov	r0, r2
 800aa64:	f7f6 f966 	bl	8000d34 <__aeabi_fmul>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f7f6 f859 	bl	8000b24 <__addsf3>
 800aa72:	4603      	mov	r3, r0
 800aa74:	461c      	mov	r4, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f7f6 f957 	bl	8000d34 <__aeabi_fmul>
 800aa86:	4603      	mov	r3, r0
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f7f6 f848 	bl	8000b20 <__aeabi_fsub>
 800aa90:	4603      	mov	r3, r0
 800aa92:	461c      	mov	r4, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	f7f6 f948 	bl	8000d34 <__aeabi_fmul>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7f6 f83b 	bl	8000b24 <__addsf3>
 800aaae:	4603      	mov	r3, r0
 800aab0:	461c      	mov	r4, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaba:	4619      	mov	r1, r3
 800aabc:	4610      	mov	r0, r2
 800aabe:	f7f6 f939 	bl	8000d34 <__aeabi_fmul>
 800aac2:	4603      	mov	r3, r0
 800aac4:	4619      	mov	r1, r3
 800aac6:	4620      	mov	r0, r4
 800aac8:	f7f6 f82a 	bl	8000b20 <__aeabi_fsub>
 800aacc:	4603      	mov	r3, r0
 800aace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7f6 f9e3 	bl	8000e9c <__aeabi_fdiv>
 800aad6:	4603      	mov	r3, r0
 800aad8:	62bb      	str	r3, [r7, #40]	; 0x28

    pitch_ekf = (pitch_ekf) + Kt11_att*((pitch_acc) - (pitch_ekf)) - Kt12_att*((pitch_bias) - (gyroY) + (pitch_rate));
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f7f6 f816 	bl	8000b20 <__aeabi_fsub>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7f6 f91b 	bl	8000d34 <__aeabi_fmul>
 800aafe:	4603      	mov	r3, r0
 800ab00:	4619      	mov	r1, r3
 800ab02:	4620      	mov	r0, r4
 800ab04:	f7f6 f80e 	bl	8000b24 <__addsf3>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	461c      	mov	r4, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7f6 f804 	bl	8000b20 <__aeabi_fsub>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7f5 fffe 	bl	8000b24 <__addsf3>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7f6 f901 	bl	8000d34 <__aeabi_fmul>
 800ab32:	4603      	mov	r3, r0
 800ab34:	4619      	mov	r1, r3
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7f5 fff2 	bl	8000b20 <__aeabi_fsub>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

    //pitch_ekf = 0;
    pitch_bias = (pitch_bias) + Kt21_att*((pitch_acc) - (pitch_ekf)) - Kt22_att*((pitch_bias) - (gyroY) + (pitch_rate));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	699c      	ldr	r4, [r3, #24]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800ab56:	4619      	mov	r1, r3
 800ab58:	4610      	mov	r0, r2
 800ab5a:	f7f5 ffe1 	bl	8000b20 <__aeabi_fsub>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7f6 f8e6 	bl	8000d34 <__aeabi_fmul>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7f5 ffd9 	bl	8000b24 <__addsf3>
 800ab72:	4603      	mov	r3, r0
 800ab74:	461c      	mov	r4, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7f5 ffcf 	bl	8000b20 <__aeabi_fsub>
 800ab82:	4603      	mov	r3, r0
 800ab84:	461a      	mov	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	f7f5 ffc9 	bl	8000b24 <__addsf3>
 800ab92:	4603      	mov	r3, r0
 800ab94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7f6 f8cc 	bl	8000d34 <__aeabi_fmul>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4620      	mov	r0, r4
 800aba2:	f7f5 ffbd 	bl	8000b20 <__aeabi_fsub>
 800aba6:	4603      	mov	r3, r0
 800aba8:	461a      	mov	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	619a      	str	r2, [r3, #24]
    //pitch_bias = 0;

    pitch_rate = (pitch_rate) + Kt31_att*((pitch_acc) - (pitch_ekf)) - Kt32_att*((pitch_bias) - (gyroY) + (pitch_rate));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691c      	ldr	r4, [r3, #16]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800abbe:	4619      	mov	r1, r3
 800abc0:	4610      	mov	r0, r2
 800abc2:	f7f5 ffad 	bl	8000b20 <__aeabi_fsub>
 800abc6:	4603      	mov	r3, r0
 800abc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f6 f8b2 	bl	8000d34 <__aeabi_fmul>
 800abd0:	4603      	mov	r3, r0
 800abd2:	4619      	mov	r1, r3
 800abd4:	4620      	mov	r0, r4
 800abd6:	f7f5 ffa5 	bl	8000b24 <__addsf3>
 800abda:	4603      	mov	r3, r0
 800abdc:	461c      	mov	r4, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7f5 ff9b 	bl	8000b20 <__aeabi_fsub>
 800abea:	4603      	mov	r3, r0
 800abec:	461a      	mov	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	4619      	mov	r1, r3
 800abf4:	4610      	mov	r0, r2
 800abf6:	f7f5 ff95 	bl	8000b24 <__addsf3>
 800abfa:	4603      	mov	r3, r0
 800abfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f6 f898 	bl	8000d34 <__aeabi_fmul>
 800ac04:	4603      	mov	r3, r0
 800ac06:	4619      	mov	r1, r3
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7f5 ff89 	bl	8000b20 <__aeabi_fsub>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	461a      	mov	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	611a      	str	r2, [r3, #16]


    S11_pitch = - S11_pitch*(Kt11_att - 1) - Kt12_att*S21_pitch - Kt12_att*S31_pitch;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ac1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac24:	f7f5 ff7c 	bl	8000b20 <__aeabi_fsub>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f7f6 f881 	bl	8000d34 <__aeabi_fmul>
 800ac32:	4603      	mov	r3, r0
 800ac34:	461c      	mov	r4, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7f6 f879 	bl	8000d34 <__aeabi_fmul>
 800ac42:	4603      	mov	r3, r0
 800ac44:	4619      	mov	r1, r3
 800ac46:	4620      	mov	r0, r4
 800ac48:	f7f5 ff6a 	bl	8000b20 <__aeabi_fsub>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	461c      	mov	r4, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7f6 f86c 	bl	8000d34 <__aeabi_fmul>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4620      	mov	r0, r4
 800ac62:	f7f5 ff5d 	bl	8000b20 <__aeabi_fsub>
 800ac66:	4603      	mov	r3, r0
 800ac68:	461a      	mov	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	625a      	str	r2, [r3, #36]	; 0x24


    S12_pitch = - S12_pitch*(Kt11_att - 1) - Kt12_att*S22_pitch - Kt12_att*S32_pitch;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac72:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ac76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac7c:	f7f5 ff50 	bl	8000b20 <__aeabi_fsub>
 800ac80:	4603      	mov	r3, r0
 800ac82:	4619      	mov	r1, r3
 800ac84:	4620      	mov	r0, r4
 800ac86:	f7f6 f855 	bl	8000d34 <__aeabi_fmul>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	461c      	mov	r4, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7f6 f84d 	bl	8000d34 <__aeabi_fmul>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7f5 ff3e 	bl	8000b20 <__aeabi_fsub>
 800aca4:	4603      	mov	r3, r0
 800aca6:	461c      	mov	r4, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acae:	4618      	mov	r0, r3
 800acb0:	f7f6 f840 	bl	8000d34 <__aeabi_fmul>
 800acb4:	4603      	mov	r3, r0
 800acb6:	4619      	mov	r1, r3
 800acb8:	4620      	mov	r0, r4
 800acba:	f7f5 ff31 	bl	8000b20 <__aeabi_fsub>
 800acbe:	4603      	mov	r3, r0
 800acc0:	461a      	mov	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	629a      	str	r2, [r3, #40]	; 0x28


    S13_pitch = - S13_pitch*(Kt11_att - 1) - Kt12_att*S23_pitch - Kt12_att*S33_pitch;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800acce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800acd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800acd4:	f7f5 ff24 	bl	8000b20 <__aeabi_fsub>
 800acd8:	4603      	mov	r3, r0
 800acda:	4619      	mov	r1, r3
 800acdc:	4620      	mov	r0, r4
 800acde:	f7f6 f829 	bl	8000d34 <__aeabi_fmul>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461c      	mov	r4, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acec:	4618      	mov	r0, r3
 800acee:	f7f6 f821 	bl	8000d34 <__aeabi_fmul>
 800acf2:	4603      	mov	r3, r0
 800acf4:	4619      	mov	r1, r3
 800acf6:	4620      	mov	r0, r4
 800acf8:	f7f5 ff12 	bl	8000b20 <__aeabi_fsub>
 800acfc:	4603      	mov	r3, r0
 800acfe:	461c      	mov	r4, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f6 f814 	bl	8000d34 <__aeabi_fmul>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4620      	mov	r0, r4
 800ad12:	f7f5 ff05 	bl	8000b20 <__aeabi_fsub>
 800ad16:	4603      	mov	r3, r0
 800ad18:	461a      	mov	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	635a      	str	r2, [r3, #52]	; 0x34


    S21_pitch = - S21_pitch*(Kt22_att - 1) - Kt21_att*S11_pitch - Kt22_att*S31_pitch;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad22:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ad26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ad2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad2c:	f7f5 fef8 	bl	8000b20 <__aeabi_fsub>
 800ad30:	4603      	mov	r3, r0
 800ad32:	4619      	mov	r1, r3
 800ad34:	4620      	mov	r0, r4
 800ad36:	f7f5 fffd 	bl	8000d34 <__aeabi_fmul>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	461c      	mov	r4, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7f5 fff5 	bl	8000d34 <__aeabi_fmul>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f7f5 fee6 	bl	8000b20 <__aeabi_fsub>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461c      	mov	r4, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7f5 ffe8 	bl	8000d34 <__aeabi_fmul>
 800ad64:	4603      	mov	r3, r0
 800ad66:	4619      	mov	r1, r3
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f7f5 fed9 	bl	8000b20 <__aeabi_fsub>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	461a      	mov	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	62da      	str	r2, [r3, #44]	; 0x2c


    S22_pitch = - S22_pitch*(Kt22_att - 1) - Kt21_att*S12_pitch - Kt22_att*S32_pitch;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ad7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ad82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad84:	f7f5 fecc 	bl	8000b20 <__aeabi_fsub>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f7f5 ffd1 	bl	8000d34 <__aeabi_fmul>
 800ad92:	4603      	mov	r3, r0
 800ad94:	461c      	mov	r4, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7f5 ffc9 	bl	8000d34 <__aeabi_fmul>
 800ada2:	4603      	mov	r3, r0
 800ada4:	4619      	mov	r1, r3
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7f5 feba 	bl	8000b20 <__aeabi_fsub>
 800adac:	4603      	mov	r3, r0
 800adae:	461c      	mov	r4, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f5 ffbc 	bl	8000d34 <__aeabi_fmul>
 800adbc:	4603      	mov	r3, r0
 800adbe:	4619      	mov	r1, r3
 800adc0:	4620      	mov	r0, r4
 800adc2:	f7f5 fead 	bl	8000b20 <__aeabi_fsub>
 800adc6:	4603      	mov	r3, r0
 800adc8:	461a      	mov	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	631a      	str	r2, [r3, #48]	; 0x30


    S23_pitch = - S23_pitch*(Kt22_att - 1) - Kt21_att*S13_pitch - Kt22_att*S33_pitch;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800add6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800adda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800addc:	f7f5 fea0 	bl	8000b20 <__aeabi_fsub>
 800ade0:	4603      	mov	r3, r0
 800ade2:	4619      	mov	r1, r3
 800ade4:	4620      	mov	r0, r4
 800ade6:	f7f5 ffa5 	bl	8000d34 <__aeabi_fmul>
 800adea:	4603      	mov	r3, r0
 800adec:	461c      	mov	r4, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7f5 ff9d 	bl	8000d34 <__aeabi_fmul>
 800adfa:	4603      	mov	r3, r0
 800adfc:	4619      	mov	r1, r3
 800adfe:	4620      	mov	r0, r4
 800ae00:	f7f5 fe8e 	bl	8000b20 <__aeabi_fsub>
 800ae04:	4603      	mov	r3, r0
 800ae06:	461c      	mov	r4, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f5 ff90 	bl	8000d34 <__aeabi_fmul>
 800ae14:	4603      	mov	r3, r0
 800ae16:	4619      	mov	r1, r3
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7f5 fe81 	bl	8000b20 <__aeabi_fsub>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	461a      	mov	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38


    S31_pitch = - S31_pitch*(Kt32_att - 1) - Kt31_att*S11_pitch - Kt32_att*S21_pitch;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ae2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ae32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae34:	f7f5 fe74 	bl	8000b20 <__aeabi_fsub>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f7f5 ff79 	bl	8000d34 <__aeabi_fmul>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461c      	mov	r4, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7f5 ff71 	bl	8000d34 <__aeabi_fmul>
 800ae52:	4603      	mov	r3, r0
 800ae54:	4619      	mov	r1, r3
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7f5 fe62 	bl	8000b20 <__aeabi_fsub>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461c      	mov	r4, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f5 ff64 	bl	8000d34 <__aeabi_fmul>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4620      	mov	r0, r4
 800ae72:	f7f5 fe55 	bl	8000b20 <__aeabi_fsub>
 800ae76:	4603      	mov	r3, r0
 800ae78:	461a      	mov	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	63da      	str	r2, [r3, #60]	; 0x3c


    S32_pitch = - S32_pitch*(Kt32_att - 1) - Kt31_att*S12_pitch - Kt32_att*S22_pitch;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ae86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ae8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8c:	f7f5 fe48 	bl	8000b20 <__aeabi_fsub>
 800ae90:	4603      	mov	r3, r0
 800ae92:	4619      	mov	r1, r3
 800ae94:	4620      	mov	r0, r4
 800ae96:	f7f5 ff4d 	bl	8000d34 <__aeabi_fmul>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	461c      	mov	r4, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7f5 ff45 	bl	8000d34 <__aeabi_fmul>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	4619      	mov	r1, r3
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7f5 fe36 	bl	8000b20 <__aeabi_fsub>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	461c      	mov	r4, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7f5 ff38 	bl	8000d34 <__aeabi_fmul>
 800aec4:	4603      	mov	r3, r0
 800aec6:	4619      	mov	r1, r3
 800aec8:	4620      	mov	r0, r4
 800aeca:	f7f5 fe29 	bl	8000b20 <__aeabi_fsub>
 800aece:	4603      	mov	r3, r0
 800aed0:	461a      	mov	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	641a      	str	r2, [r3, #64]	; 0x40


    S33_pitch = - S33_pitch*(Kt32_att - 1) - Kt31_att*S13_pitch - Kt32_att*S23_pitch;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeda:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aede:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee4:	f7f5 fe1c 	bl	8000b20 <__aeabi_fsub>
 800aee8:	4603      	mov	r3, r0
 800aeea:	4619      	mov	r1, r3
 800aeec:	4620      	mov	r0, r4
 800aeee:	f7f5 ff21 	bl	8000d34 <__aeabi_fmul>
 800aef2:	4603      	mov	r3, r0
 800aef4:	461c      	mov	r4, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7f5 ff19 	bl	8000d34 <__aeabi_fmul>
 800af02:	4603      	mov	r3, r0
 800af04:	4619      	mov	r1, r3
 800af06:	4620      	mov	r0, r4
 800af08:	f7f5 fe0a 	bl	8000b20 <__aeabi_fsub>
 800af0c:	4603      	mov	r3, r0
 800af0e:	461c      	mov	r4, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af16:	4618      	mov	r0, r3
 800af18:	f7f5 ff0c 	bl	8000d34 <__aeabi_fmul>
 800af1c:	4603      	mov	r3, r0
 800af1e:	4619      	mov	r1, r3
 800af20:	4620      	mov	r0, r4
 800af22:	f7f5 fdfd 	bl	8000b20 <__aeabi_fsub>
 800af26:	4603      	mov	r3, r0
 800af28:	461a      	mov	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	645a      	str	r2, [r3, #68]	; 0x44

/*
  roll_rate  = lpf_roll.Run(gyroX);
  pitch_rate = lpf_pitch.Run(gyroY);*/

  yaw_rate   = lpf_yaw.Run(gyroZ);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800af34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af36:	4618      	mov	r0, r3
 800af38:	f001 fc1b 	bl	800c772 <_ZN3lpf3RunEf>
 800af3c:	4602      	mov	r2, r0
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	615a      	str	r2, [r3, #20]
 800af42:	e087      	b.n	800b054 <_ZN15Kalman_Filtresi3RunEv+0x1a34>

    }


    else {
    	for(int i=0; i<2000; i++) {
 800af44:	2300      	movs	r3, #0
 800af46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800af4e:	da5e      	bge.n	800b00e <_ZN15Kalman_Filtresi3RunEv+0x19ee>
    		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800af50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800af54:	f7f5 feee 	bl	8000d34 <__aeabi_fmul>
 800af58:	4603      	mov	r3, r0
 800af5a:	461c      	mov	r4, r3
 800af5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800af5e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800af60:	f7f5 fee8 	bl	8000d34 <__aeabi_fmul>
 800af64:	4603      	mov	r3, r0
 800af66:	4619      	mov	r1, r3
 800af68:	4620      	mov	r0, r4
 800af6a:	f7f5 fddb 	bl	8000b24 <__addsf3>
 800af6e:	4603      	mov	r3, r0
 800af70:	461c      	mov	r4, r3
 800af72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800af74:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800af76:	f7f5 fedd 	bl	8000d34 <__aeabi_fmul>
 800af7a:	4603      	mov	r3, r0
 800af7c:	4619      	mov	r1, r3
 800af7e:	4620      	mov	r0, r4
 800af80:	f7f5 fdd0 	bl	8000b24 <__addsf3>
 800af84:	4603      	mov	r3, r0
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe fa71 	bl	800946e <_ZSt4sqrtf>
 800af8c:	6538      	str	r0, [r7, #80]	; 0x50

    		  float pitch_acc =  asin(accX/acctop)*rad2deg;
 800af8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af90:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800af92:	f7f5 ff83 	bl	8000e9c <__aeabi_fdiv>
 800af96:	4603      	mov	r3, r0
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fa5c 	bl	8009456 <_ZSt4asinf>
 800af9e:	4602      	mov	r2, r0
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7f5 fec3 	bl	8000d34 <__aeabi_fmul>
 800afae:	4603      	mov	r3, r0
 800afb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    		  float roll_acc  =  asin(accY/acctop)*rad2deg ;
 800afb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afb4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800afb6:	f7f5 ff71 	bl	8000e9c <__aeabi_fdiv>
 800afba:	4603      	mov	r3, r0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fe fa4a 	bl	8009456 <_ZSt4asinf>
 800afc2:	4602      	mov	r2, r0
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800afca:	4619      	mov	r1, r3
 800afcc:	4610      	mov	r0, r2
 800afce:	f7f5 feb1 	bl	8000d34 <__aeabi_fmul>
 800afd2:	4603      	mov	r3, r0
 800afd4:	64bb      	str	r3, [r7, #72]	; 0x48

        	ROLL_OFFSET += roll_acc;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800afdc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800afde:	4618      	mov	r0, r3
 800afe0:	f7f5 fda0 	bl	8000b24 <__addsf3>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        	PITCH_OFFSET += pitch_acc;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800aff4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f5 fd94 	bl	8000b24 <__addsf3>
 800affc:	4603      	mov	r3, r0
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    	for(int i=0; i<2000; i++) {
 800b006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b008:	3301      	adds	r3, #1
 800b00a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b00c:	e79c      	b.n	800af48 <_ZN15Kalman_Filtresi3RunEv+0x1928>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800b014:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b018:	490d      	ldr	r1, [pc, #52]	; (800b050 <_ZN15Kalman_Filtresi3RunEv+0x1a30>)
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7f5 ff3e 	bl	8000e9c <__aeabi_fdiv>
 800b020:	4603      	mov	r3, r0
 800b022:	461a      	mov	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b030:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b034:	4906      	ldr	r1, [pc, #24]	; (800b050 <_ZN15Kalman_Filtresi3RunEv+0x1a30>)
 800b036:	4618      	mov	r0, r3
 800b038:	f7f5 ff30 	bl	8000e9c <__aeabi_fdiv>
 800b03c:	4603      	mov	r3, r0
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    	gyro_ready = true;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 800b04e:	e001      	b.n	800b054 <_ZN15Kalman_Filtresi3RunEv+0x1a34>
 800b050:	44fa0000 	.word	0x44fa0000
    }

      float u = acc_vert;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24

      //ALT PREDICTION
	  alt_gnd = (alt_gnd) + st*(vz) + (u*(st)*st)/2;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b062:	4618      	mov	r0, r3
 800b064:	f7f5 f9d8 	bl	8000418 <__aeabi_f2d>
 800b068:	4680      	mov	r8, r0
 800b06a:	4689      	mov	r9, r1
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f5 f9cd 	bl	8000418 <__aeabi_f2d>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4620      	mov	r0, r4
 800b084:	4629      	mov	r1, r5
 800b086:	f7f5 fa1f 	bl	80004c8 <__aeabi_dmul>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4640      	mov	r0, r8
 800b090:	4649      	mov	r1, r9
 800b092:	f7f5 f863 	bl	800015c <__adddf3>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4614      	mov	r4, r2
 800b09c:	461d      	mov	r5, r3
 800b09e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0a0:	f7f5 f9ba 	bl	8000418 <__aeabi_f2d>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b0aa:	f7f5 fa0d 	bl	80004c8 <__aeabi_dmul>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b0bc:	f7f5 fa04 	bl	80004c8 <__aeabi_dmul>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	f04f 0200 	mov.w	r2, #0
 800b0cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0d0:	f7f5 fb24 	bl	800071c <__aeabi_ddiv>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4620      	mov	r0, r4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	f7f5 f83e 	bl	800015c <__adddf3>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	f7f5 fcc6 	bl	8000a78 <__aeabi_d2f>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	  vz = (vz) + u*(st);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7f5 f98c 	bl	8000418 <__aeabi_f2d>
 800b100:	4604      	mov	r4, r0
 800b102:	460d      	mov	r5, r1
 800b104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b106:	f7f5 f987 	bl	8000418 <__aeabi_f2d>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b110:	f7f5 f9da 	bl	80004c8 <__aeabi_dmul>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4620      	mov	r0, r4
 800b11a:	4629      	mov	r1, r5
 800b11c:	f7f5 f81e 	bl	800015c <__adddf3>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4610      	mov	r0, r2
 800b126:	4619      	mov	r1, r3
 800b128:	f7f5 fca6 	bl	8000a78 <__aeabi_d2f>
 800b12c:	4602      	mov	r2, r0
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	  //baro_gnd = (baro_gnd);

	  S11_alt = S11_alt + salt + S21_alt*st + (st)*(S12_alt + S22_alt*st);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f7f5 fcef 	bl	8000b24 <__addsf3>
 800b146:	4603      	mov	r3, r0
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f5 f965 	bl	8000418 <__aeabi_f2d>
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b158:	4618      	mov	r0, r3
 800b15a:	f7f5 f95d 	bl	8000418 <__aeabi_f2d>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b164:	f7f5 f9b0 	bl	80004c8 <__aeabi_dmul>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	4620      	mov	r0, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	f7f4 fff4 	bl	800015c <__adddf3>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4692      	mov	sl, r2
 800b17a:	469b      	mov	fp, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b186:	4618      	mov	r0, r3
 800b188:	f7f5 f946 	bl	8000418 <__aeabi_f2d>
 800b18c:	4680      	mov	r8, r0
 800b18e:	4689      	mov	r9, r1
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b196:	4618      	mov	r0, r3
 800b198:	f7f5 f93e 	bl	8000418 <__aeabi_f2d>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b1a2:	f7f5 f991 	bl	80004c8 <__aeabi_dmul>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f4 ffd5 	bl	800015c <__adddf3>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	f7f5 f985 	bl	80004c8 <__aeabi_dmul>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	f7f4 ffc9 	bl	800015c <__adddf3>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	f7f5 fc51 	bl	8000a78 <__aeabi_d2f>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	679a      	str	r2, [r3, #120]	; 0x78
	  S12_alt = S12_alt + S22_alt*st;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7f5 f919 	bl	8000418 <__aeabi_f2d>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7f5 f911 	bl	8000418 <__aeabi_f2d>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b1fc:	f7f5 f964 	bl	80004c8 <__aeabi_dmul>
 800b200:	4602      	mov	r2, r0
 800b202:	460b      	mov	r3, r1
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f4 ffa8 	bl	800015c <__adddf3>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	4610      	mov	r0, r2
 800b212:	4619      	mov	r1, r3
 800b214:	f7f5 fc30 	bl	8000a78 <__aeabi_d2f>
 800b218:	4602      	mov	r2, r0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	67da      	str	r2, [r3, #124]	; 0x7c
	  S13_alt = S13_alt + S23_alt*st;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b224:	4618      	mov	r0, r3
 800b226:	f7f5 f8f7 	bl	8000418 <__aeabi_f2d>
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b234:	4618      	mov	r0, r3
 800b236:	f7f5 f8ef 	bl	8000418 <__aeabi_f2d>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b240:	f7f5 f942 	bl	80004c8 <__aeabi_dmul>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4620      	mov	r0, r4
 800b24a:	4629      	mov	r1, r5
 800b24c:	f7f4 ff86 	bl	800015c <__adddf3>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4610      	mov	r0, r2
 800b256:	4619      	mov	r1, r3
 800b258:	f7f5 fc0e 	bl	8000a78 <__aeabi_d2f>
 800b25c:	4602      	mov	r2, r0
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	  S21_alt = S21_alt + S22_alt*(st);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7f5 f8d4 	bl	8000418 <__aeabi_f2d>
 800b270:	4604      	mov	r4, r0
 800b272:	460d      	mov	r5, r1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f5 f8cc 	bl	8000418 <__aeabi_f2d>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b286:	f7f5 f91f 	bl	80004c8 <__aeabi_dmul>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f4 ff63 	bl	800015c <__adddf3>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4610      	mov	r0, r2
 800b29c:	4619      	mov	r1, r3
 800b29e:	f7f5 fbeb 	bl	8000a78 <__aeabi_d2f>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  S22_alt =  S22_alt + svel;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f7f5 fc33 	bl	8000b24 <__addsf3>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	  //S23_alt = S23_alt;

	  S31_alt = S31_alt + S32_alt*(st);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7f5 f8a2 	bl	8000418 <__aeabi_f2d>
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	460d      	mov	r5, r1
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f5 f89a 	bl	8000418 <__aeabi_f2d>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800b2ea:	f7f5 f8ed 	bl	80004c8 <__aeabi_dmul>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	f7f4 ff31 	bl	800015c <__adddf3>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4610      	mov	r0, r2
 800b300:	4619      	mov	r1, r3
 800b302:	f7f5 fbb9 	bl	8000a78 <__aeabi_d2f>
 800b306:	4602      	mov	r2, r0
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	  //S32_alt = S32_alt;
	  S33_alt = S33_alt + sbar;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b31a:	4619      	mov	r1, r3
 800b31c:	4610      	mov	r0, r2
 800b31e:	f7f5 fc01 	bl	8000b24 <__addsf3>
 800b322:	4603      	mov	r3, r0
 800b324:	461a      	mov	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	  A = (Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b338:	4619      	mov	r1, r3
 800b33a:	4610      	mov	r0, r2
 800b33c:	f7f5 fcfa 	bl	8000d34 <__aeabi_fmul>
 800b340:	4603      	mov	r3, r0
 800b342:	461c      	mov	r4, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b34e:	4619      	mov	r1, r3
 800b350:	4610      	mov	r0, r2
 800b352:	f7f5 fcef 	bl	8000d34 <__aeabi_fmul>
 800b356:	4603      	mov	r3, r0
 800b358:	4619      	mov	r1, r3
 800b35a:	4620      	mov	r0, r4
 800b35c:	f7f5 fbe2 	bl	8000b24 <__addsf3>
 800b360:	4603      	mov	r3, r0
 800b362:	461c      	mov	r4, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b36e:	4619      	mov	r1, r3
 800b370:	4610      	mov	r0, r2
 800b372:	f7f5 fcdf 	bl	8000d34 <__aeabi_fmul>
 800b376:	4603      	mov	r3, r0
 800b378:	4619      	mov	r1, r3
 800b37a:	4620      	mov	r0, r4
 800b37c:	f7f5 fbd2 	bl	8000b24 <__addsf3>
 800b380:	4603      	mov	r3, r0
 800b382:	461c      	mov	r4, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b390:	4619      	mov	r1, r3
 800b392:	4610      	mov	r0, r2
 800b394:	f7f5 fcce 	bl	8000d34 <__aeabi_fmul>
 800b398:	4603      	mov	r3, r0
 800b39a:	4619      	mov	r1, r3
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7f5 fbc1 	bl	8000b24 <__addsf3>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	461c      	mov	r4, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f7f5 fcbd 	bl	8000d34 <__aeabi_fmul>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7f5 fbb0 	bl	8000b24 <__addsf3>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	461c      	mov	r4, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	f7f5 fcac 	bl	8000d34 <__aeabi_fmul>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f7f5 fb9f 	bl	8000b24 <__addsf3>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	461c      	mov	r4, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7f5 fc9c 	bl	8000d34 <__aeabi_fmul>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	4619      	mov	r1, r3
 800b400:	4620      	mov	r0, r4
 800b402:	f7f5 fb8f 	bl	8000b24 <__addsf3>
 800b406:	4603      	mov	r3, r0
 800b408:	461c      	mov	r4, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f7f5 fc8b 	bl	8000d34 <__aeabi_fmul>
 800b41e:	4603      	mov	r3, r0
 800b420:	4619      	mov	r1, r3
 800b422:	4620      	mov	r0, r4
 800b424:	f7f5 fb7c 	bl	8000b20 <__aeabi_fsub>
 800b428:	4603      	mov	r3, r0
 800b42a:	643b      	str	r3, [r7, #64]	; 0x40

	  //ALT CORRECTION
	  float Kt11 = (Qs*(S11_alt + S13_alt))/A;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f7f5 fb70 	bl	8000b24 <__addsf3>
 800b444:	4603      	mov	r3, r0
 800b446:	4619      	mov	r1, r3
 800b448:	4620      	mov	r0, r4
 800b44a:	f7f5 fc73 	bl	8000d34 <__aeabi_fmul>
 800b44e:	4603      	mov	r3, r0
 800b450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b452:	4618      	mov	r0, r3
 800b454:	f7f5 fd22 	bl	8000e9c <__aeabi_fdiv>
 800b458:	4603      	mov	r3, r0
 800b45a:	623b      	str	r3, [r7, #32]
	  float Kt12 = (Qb*S11_alt + S11_alt*S33_alt - S13_alt*S31_alt)/A;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b466:	4619      	mov	r1, r3
 800b468:	4610      	mov	r0, r2
 800b46a:	f7f5 fc63 	bl	8000d34 <__aeabi_fmul>
 800b46e:	4603      	mov	r3, r0
 800b470:	461c      	mov	r4, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b47c:	4619      	mov	r1, r3
 800b47e:	4610      	mov	r0, r2
 800b480:	f7f5 fc58 	bl	8000d34 <__aeabi_fmul>
 800b484:	4603      	mov	r3, r0
 800b486:	4619      	mov	r1, r3
 800b488:	4620      	mov	r0, r4
 800b48a:	f7f5 fb4b 	bl	8000b24 <__addsf3>
 800b48e:	4603      	mov	r3, r0
 800b490:	461c      	mov	r4, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	f7f5 fc47 	bl	8000d34 <__aeabi_fmul>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f7f5 fb38 	bl	8000b20 <__aeabi_fsub>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7f5 fcf1 	bl	8000e9c <__aeabi_fdiv>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	61fb      	str	r3, [r7, #28]

	  float Kt21 = (Qs*S21_alt + Qs*S23_alt + S11_alt*S23_alt - S13_alt*S21_alt)/A;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	f7f5 fc31 	bl	8000d34 <__aeabi_fmul>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	461c      	mov	r4, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f7f5 fc25 	bl	8000d34 <__aeabi_fmul>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f7f5 fb18 	bl	8000b24 <__addsf3>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	461c      	mov	r4, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b502:	4619      	mov	r1, r3
 800b504:	4610      	mov	r0, r2
 800b506:	f7f5 fc15 	bl	8000d34 <__aeabi_fmul>
 800b50a:	4603      	mov	r3, r0
 800b50c:	4619      	mov	r1, r3
 800b50e:	4620      	mov	r0, r4
 800b510:	f7f5 fb08 	bl	8000b24 <__addsf3>
 800b514:	4603      	mov	r3, r0
 800b516:	461c      	mov	r4, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f7f5 fc04 	bl	8000d34 <__aeabi_fmul>
 800b52c:	4603      	mov	r3, r0
 800b52e:	4619      	mov	r1, r3
 800b530:	4620      	mov	r0, r4
 800b532:	f7f5 faf5 	bl	8000b20 <__aeabi_fsub>
 800b536:	4603      	mov	r3, r0
 800b538:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7f5 fcae 	bl	8000e9c <__aeabi_fdiv>
 800b540:	4603      	mov	r3, r0
 800b542:	61bb      	str	r3, [r7, #24]
	  float Kt22 = (Qb*S21_alt - S11_alt*S23_alt + S13_alt*S21_alt + S21_alt*S33_alt - S23_alt*S31_alt)/A;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b550:	4619      	mov	r1, r3
 800b552:	4610      	mov	r0, r2
 800b554:	f7f5 fbee 	bl	8000d34 <__aeabi_fmul>
 800b558:	4603      	mov	r3, r0
 800b55a:	461c      	mov	r4, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b566:	4619      	mov	r1, r3
 800b568:	4610      	mov	r0, r2
 800b56a:	f7f5 fbe3 	bl	8000d34 <__aeabi_fmul>
 800b56e:	4603      	mov	r3, r0
 800b570:	4619      	mov	r1, r3
 800b572:	4620      	mov	r0, r4
 800b574:	f7f5 fad4 	bl	8000b20 <__aeabi_fsub>
 800b578:	4603      	mov	r3, r0
 800b57a:	461c      	mov	r4, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f7f5 fbd2 	bl	8000d34 <__aeabi_fmul>
 800b590:	4603      	mov	r3, r0
 800b592:	4619      	mov	r1, r3
 800b594:	4620      	mov	r0, r4
 800b596:	f7f5 fac5 	bl	8000b24 <__addsf3>
 800b59a:	4603      	mov	r3, r0
 800b59c:	461c      	mov	r4, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	f7f5 fbc1 	bl	8000d34 <__aeabi_fmul>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7f5 fab4 	bl	8000b24 <__addsf3>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	461c      	mov	r4, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f7f5 fbb0 	bl	8000d34 <__aeabi_fmul>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7f5 faa1 	bl	8000b20 <__aeabi_fsub>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f5 fc5a 	bl	8000e9c <__aeabi_fdiv>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	617b      	str	r3, [r7, #20]

	  float Kt31 = (Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt)/A;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	f7f5 fb9a 	bl	8000d34 <__aeabi_fmul>
 800b600:	4603      	mov	r3, r0
 800b602:	461c      	mov	r4, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f7f5 fb8e 	bl	8000d34 <__aeabi_fmul>
 800b618:	4603      	mov	r3, r0
 800b61a:	4619      	mov	r1, r3
 800b61c:	4620      	mov	r0, r4
 800b61e:	f7f5 fa81 	bl	8000b24 <__addsf3>
 800b622:	4603      	mov	r3, r0
 800b624:	461c      	mov	r4, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b630:	4619      	mov	r1, r3
 800b632:	4610      	mov	r0, r2
 800b634:	f7f5 fb7e 	bl	8000d34 <__aeabi_fmul>
 800b638:	4603      	mov	r3, r0
 800b63a:	4619      	mov	r1, r3
 800b63c:	4620      	mov	r0, r4
 800b63e:	f7f5 fa71 	bl	8000b24 <__addsf3>
 800b642:	4603      	mov	r3, r0
 800b644:	461c      	mov	r4, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b652:	4619      	mov	r1, r3
 800b654:	4610      	mov	r0, r2
 800b656:	f7f5 fb6d 	bl	8000d34 <__aeabi_fmul>
 800b65a:	4603      	mov	r3, r0
 800b65c:	4619      	mov	r1, r3
 800b65e:	4620      	mov	r0, r4
 800b660:	f7f5 fa5e 	bl	8000b20 <__aeabi_fsub>
 800b664:	4603      	mov	r3, r0
 800b666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b668:	4618      	mov	r0, r3
 800b66a:	f7f5 fc17 	bl	8000e9c <__aeabi_fdiv>
 800b66e:	4603      	mov	r3, r0
 800b670:	613b      	str	r3, [r7, #16]
	  float Kt32 = (Qb*S31_alt - S11_alt*S33_alt + S13_alt*S31_alt)/A;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f7f5 fb57 	bl	8000d34 <__aeabi_fmul>
 800b686:	4603      	mov	r3, r0
 800b688:	461c      	mov	r4, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	f7f5 fb4c 	bl	8000d34 <__aeabi_fmul>
 800b69c:	4603      	mov	r3, r0
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7f5 fa3d 	bl	8000b20 <__aeabi_fsub>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	461c      	mov	r4, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	f7f5 fb3b 	bl	8000d34 <__aeabi_fmul>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f5 fa2e 	bl	8000b24 <__addsf3>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7f5 fbe5 	bl	8000e9c <__aeabi_fdiv>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	60fb      	str	r3, [r7, #12]

	  alt_gnd = (alt_gnd) - Kt12*((alt_gnd) - (sonar_alt)) - Kt11*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	f7f5 fa18 	bl	8000b20 <__aeabi_fsub>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	69f9      	ldr	r1, [r7, #28]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7f5 fb1d 	bl	8000d34 <__aeabi_fmul>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7f5 fa0e 	bl	8000b20 <__aeabi_fsub>
 800b704:	4603      	mov	r3, r0
 800b706:	461c      	mov	r4, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b714:	4619      	mov	r1, r3
 800b716:	4610      	mov	r0, r2
 800b718:	f7f5 fa02 	bl	8000b20 <__aeabi_fsub>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b726:	4619      	mov	r1, r3
 800b728:	4610      	mov	r0, r2
 800b72a:	f7f5 f9fb 	bl	8000b24 <__addsf3>
 800b72e:	4603      	mov	r3, r0
 800b730:	6a39      	ldr	r1, [r7, #32]
 800b732:	4618      	mov	r0, r3
 800b734:	f7f5 fafe 	bl	8000d34 <__aeabi_fmul>
 800b738:	4603      	mov	r3, r0
 800b73a:	4619      	mov	r1, r3
 800b73c:	4620      	mov	r0, r4
 800b73e:	f7f5 f9ef 	bl	8000b20 <__aeabi_fsub>
 800b742:	4603      	mov	r3, r0
 800b744:	461a      	mov	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154


	  vz = (vz) - Kt22*((alt_gnd) - (sonar_alt)) - Kt21*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 4158 	ldr.w	r4, [r3, #344]	; 0x158
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7f5 f9dd 	bl	8000b20 <__aeabi_fsub>
 800b766:	4603      	mov	r3, r0
 800b768:	6979      	ldr	r1, [r7, #20]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7f5 fae2 	bl	8000d34 <__aeabi_fmul>
 800b770:	4603      	mov	r3, r0
 800b772:	4619      	mov	r1, r3
 800b774:	4620      	mov	r0, r4
 800b776:	f7f5 f9d3 	bl	8000b20 <__aeabi_fsub>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461c      	mov	r4, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b78a:	4619      	mov	r1, r3
 800b78c:	4610      	mov	r0, r2
 800b78e:	f7f5 f9c7 	bl	8000b20 <__aeabi_fsub>
 800b792:	4603      	mov	r3, r0
 800b794:	461a      	mov	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f7f5 f9c0 	bl	8000b24 <__addsf3>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	69b9      	ldr	r1, [r7, #24]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f5 fac3 	bl	8000d34 <__aeabi_fmul>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f7f5 f9b4 	bl	8000b20 <__aeabi_fsub>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158


	  baro_gnd = (baro_gnd) - Kt32*((alt_gnd) - (sonar_alt)) - Kt31*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 4164 	ldr.w	r4, [r3, #356]	; 0x164
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7f5 f9a2 	bl	8000b20 <__aeabi_fsub>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	68f9      	ldr	r1, [r7, #12]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f5 faa7 	bl	8000d34 <__aeabi_fmul>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f7f5 f998 	bl	8000b20 <__aeabi_fsub>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	461c      	mov	r4, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b800:	4619      	mov	r1, r3
 800b802:	4610      	mov	r0, r2
 800b804:	f7f5 f98c 	bl	8000b20 <__aeabi_fsub>
 800b808:	4603      	mov	r3, r0
 800b80a:	461a      	mov	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b812:	4619      	mov	r1, r3
 800b814:	4610      	mov	r0, r2
 800b816:	f7f5 f985 	bl	8000b24 <__addsf3>
 800b81a:	4603      	mov	r3, r0
 800b81c:	6939      	ldr	r1, [r7, #16]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7f5 fa88 	bl	8000d34 <__aeabi_fmul>
 800b824:	4603      	mov	r3, r0
 800b826:	4619      	mov	r1, r3
 800b828:	4620      	mov	r0, r4
 800b82a:	f7f5 f979 	bl	8000b20 <__aeabi_fsub>
 800b82e:	4603      	mov	r3, r0
 800b830:	461a      	mov	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164


	  S11_alt =  - S11_alt*(Kt11 + Kt12 - 1) - Kt11*S31_alt;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b83c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b840:	69f9      	ldr	r1, [r7, #28]
 800b842:	6a38      	ldr	r0, [r7, #32]
 800b844:	f7f5 f96e 	bl	8000b24 <__addsf3>
 800b848:	4603      	mov	r3, r0
 800b84a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b84e:	4618      	mov	r0, r3
 800b850:	f7f5 f966 	bl	8000b20 <__aeabi_fsub>
 800b854:	4603      	mov	r3, r0
 800b856:	4619      	mov	r1, r3
 800b858:	4620      	mov	r0, r4
 800b85a:	f7f5 fa6b 	bl	8000d34 <__aeabi_fmul>
 800b85e:	4603      	mov	r3, r0
 800b860:	461c      	mov	r4, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b868:	6a39      	ldr	r1, [r7, #32]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f5 fa62 	bl	8000d34 <__aeabi_fmul>
 800b870:	4603      	mov	r3, r0
 800b872:	4619      	mov	r1, r3
 800b874:	4620      	mov	r0, r4
 800b876:	f7f5 f953 	bl	8000b20 <__aeabi_fsub>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	679a      	str	r2, [r3, #120]	; 0x78


	  S12_alt = - S12_alt*(Kt11 + Kt12 - 1) - Kt11*S32_alt;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b886:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b88a:	69f9      	ldr	r1, [r7, #28]
 800b88c:	6a38      	ldr	r0, [r7, #32]
 800b88e:	f7f5 f949 	bl	8000b24 <__addsf3>
 800b892:	4603      	mov	r3, r0
 800b894:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b898:	4618      	mov	r0, r3
 800b89a:	f7f5 f941 	bl	8000b20 <__aeabi_fsub>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7f5 fa46 	bl	8000d34 <__aeabi_fmul>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461c      	mov	r4, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8b2:	6a39      	ldr	r1, [r7, #32]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7f5 fa3d 	bl	8000d34 <__aeabi_fmul>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f7f5 f92e 	bl	8000b20 <__aeabi_fsub>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	67da      	str	r2, [r3, #124]	; 0x7c


	  S13_alt = - S13_alt*(Kt11 + Kt12 - 1) - Kt11*S33_alt;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b8d6:	69f9      	ldr	r1, [r7, #28]
 800b8d8:	6a38      	ldr	r0, [r7, #32]
 800b8da:	f7f5 f923 	bl	8000b24 <__addsf3>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7f5 f91b 	bl	8000b20 <__aeabi_fsub>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f7f5 fa20 	bl	8000d34 <__aeabi_fmul>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	461c      	mov	r4, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8fe:	6a39      	ldr	r1, [r7, #32]
 800b900:	4618      	mov	r0, r3
 800b902:	f7f5 fa17 	bl	8000d34 <__aeabi_fmul>
 800b906:	4603      	mov	r3, r0
 800b908:	4619      	mov	r1, r3
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7f5 f908 	bl	8000b20 <__aeabi_fsub>
 800b910:	4603      	mov	r3, r0
 800b912:	461a      	mov	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


	  S21_alt =  S21_alt - S11_alt*(Kt21 + Kt22) - Kt21*S31_alt;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800b924:	6979      	ldr	r1, [r7, #20]
 800b926:	69b8      	ldr	r0, [r7, #24]
 800b928:	f7f5 f8fc 	bl	8000b24 <__addsf3>
 800b92c:	4603      	mov	r3, r0
 800b92e:	4619      	mov	r1, r3
 800b930:	4628      	mov	r0, r5
 800b932:	f7f5 f9ff 	bl	8000d34 <__aeabi_fmul>
 800b936:	4603      	mov	r3, r0
 800b938:	4619      	mov	r1, r3
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7f5 f8f0 	bl	8000b20 <__aeabi_fsub>
 800b940:	4603      	mov	r3, r0
 800b942:	461c      	mov	r4, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b94a:	69b9      	ldr	r1, [r7, #24]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7f5 f9f1 	bl	8000d34 <__aeabi_fmul>
 800b952:	4603      	mov	r3, r0
 800b954:	4619      	mov	r1, r3
 800b956:	4620      	mov	r0, r4
 800b958:	f7f5 f8e2 	bl	8000b20 <__aeabi_fsub>
 800b95c:	4603      	mov	r3, r0
 800b95e:	461a      	mov	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


	  S22_alt =  S22_alt - S12_alt*(Kt21 + Kt22) - Kt21*S32_alt;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 800b970:	6979      	ldr	r1, [r7, #20]
 800b972:	69b8      	ldr	r0, [r7, #24]
 800b974:	f7f5 f8d6 	bl	8000b24 <__addsf3>
 800b978:	4603      	mov	r3, r0
 800b97a:	4619      	mov	r1, r3
 800b97c:	4628      	mov	r0, r5
 800b97e:	f7f5 f9d9 	bl	8000d34 <__aeabi_fmul>
 800b982:	4603      	mov	r3, r0
 800b984:	4619      	mov	r1, r3
 800b986:	4620      	mov	r0, r4
 800b988:	f7f5 f8ca 	bl	8000b20 <__aeabi_fsub>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461c      	mov	r4, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b996:	69b9      	ldr	r1, [r7, #24]
 800b998:	4618      	mov	r0, r3
 800b99a:	f7f5 f9cb 	bl	8000d34 <__aeabi_fmul>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f7f5 f8bc 	bl	8000b20 <__aeabi_fsub>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	  S23_alt =  S23_alt - S13_alt*(Kt21 + Kt22) - Kt21*S33_alt;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800b9be:	6979      	ldr	r1, [r7, #20]
 800b9c0:	69b8      	ldr	r0, [r7, #24]
 800b9c2:	f7f5 f8af 	bl	8000b24 <__addsf3>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f7f5 f9b2 	bl	8000d34 <__aeabi_fmul>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f7f5 f8a3 	bl	8000b20 <__aeabi_fsub>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461c      	mov	r4, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b9e4:	69b9      	ldr	r1, [r7, #24]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7f5 f9a4 	bl	8000d34 <__aeabi_fmul>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7f5 f895 	bl	8000b20 <__aeabi_fsub>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


	  S31_alt = - S31_alt*(Kt31 - 1) - S11_alt*(Kt31 + Kt32);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba06:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ba0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ba0e:	6938      	ldr	r0, [r7, #16]
 800ba10:	f7f5 f886 	bl	8000b20 <__aeabi_fsub>
 800ba14:	4603      	mov	r3, r0
 800ba16:	4619      	mov	r1, r3
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f7f5 f98b 	bl	8000d34 <__aeabi_fmul>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	461d      	mov	r5, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ba26:	68f9      	ldr	r1, [r7, #12]
 800ba28:	6938      	ldr	r0, [r7, #16]
 800ba2a:	f7f5 f87b 	bl	8000b24 <__addsf3>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	4619      	mov	r1, r3
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7f5 f97e 	bl	8000d34 <__aeabi_fmul>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	f7f5 f86f 	bl	8000b20 <__aeabi_fsub>
 800ba42:	4603      	mov	r3, r0
 800ba44:	461a      	mov	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


	  S32_alt = - S32_alt*(Kt31 - 1) - S12_alt*(Kt31 + Kt32);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba52:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ba56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ba5a:	6938      	ldr	r0, [r7, #16]
 800ba5c:	f7f5 f860 	bl	8000b20 <__aeabi_fsub>
 800ba60:	4603      	mov	r3, r0
 800ba62:	4619      	mov	r1, r3
 800ba64:	4620      	mov	r0, r4
 800ba66:	f7f5 f965 	bl	8000d34 <__aeabi_fmul>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	461d      	mov	r5, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800ba72:	68f9      	ldr	r1, [r7, #12]
 800ba74:	6938      	ldr	r0, [r7, #16]
 800ba76:	f7f5 f855 	bl	8000b24 <__addsf3>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7f5 f958 	bl	8000d34 <__aeabi_fmul>
 800ba84:	4603      	mov	r3, r0
 800ba86:	4619      	mov	r1, r3
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f7f5 f849 	bl	8000b20 <__aeabi_fsub>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	461a      	mov	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94


	  S33_alt = - S33_alt*(Kt31 - 1) - S13_alt*(Kt31 + Kt32);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba9e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800baa2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800baa6:	6938      	ldr	r0, [r7, #16]
 800baa8:	f7f5 f83a 	bl	8000b20 <__aeabi_fsub>
 800baac:	4603      	mov	r3, r0
 800baae:	4619      	mov	r1, r3
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7f5 f93f 	bl	8000d34 <__aeabi_fmul>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461d      	mov	r5, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800bac0:	68f9      	ldr	r1, [r7, #12]
 800bac2:	6938      	ldr	r0, [r7, #16]
 800bac4:	f7f5 f82e 	bl	8000b24 <__addsf3>
 800bac8:	4603      	mov	r3, r0
 800baca:	4619      	mov	r1, r3
 800bacc:	4620      	mov	r0, r4
 800bace:	f7f5 f931 	bl	8000d34 <__aeabi_fmul>
 800bad2:	4603      	mov	r3, r0
 800bad4:	4619      	mov	r1, r3
 800bad6:	4628      	mov	r0, r5
 800bad8:	f7f5 f822 	bl	8000b20 <__aeabi_fsub>
 800badc:	4603      	mov	r3, r0
 800bade:	461a      	mov	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	  //X Position Estimation
	  //camx = cam_filt.Run(camx);
	  xpos = (xpos) + st*(vx) + (accXm*st*st)/2;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800baec:	4618      	mov	r0, r3
 800baee:	f7f4 fc93 	bl	8000418 <__aeabi_f2d>
 800baf2:	4680      	mov	r8, r0
 800baf4:	4689      	mov	r9, r1
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f4 fc88 	bl	8000418 <__aeabi_f2d>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f7f4 fcda 	bl	80004c8 <__aeabi_dmul>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	f7f4 fb1e 	bl	800015c <__adddf3>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4614      	mov	r4, r2
 800bb26:	461d      	mov	r5, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7f4 fc72 	bl	8000418 <__aeabi_f2d>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bb3a:	f7f4 fcc5 	bl	80004c8 <__aeabi_dmul>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4610      	mov	r0, r2
 800bb44:	4619      	mov	r1, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bb4c:	f7f4 fcbc 	bl	80004c8 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4610      	mov	r0, r2
 800bb56:	4619      	mov	r1, r3
 800bb58:	f04f 0200 	mov.w	r2, #0
 800bb5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb60:	f7f4 fddc 	bl	800071c <__aeabi_ddiv>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4620      	mov	r0, r4
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f7f4 faf6 	bl	800015c <__adddf3>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4610      	mov	r0, r2
 800bb76:	4619      	mov	r1, r3
 800bb78:	f7f4 ff7e 	bl	8000a78 <__aeabi_d2f>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	  vx = (vx) + accXm*(st);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7f4 fc44 	bl	8000418 <__aeabi_f2d>
 800bb90:	4604      	mov	r4, r0
 800bb92:	460d      	mov	r5, r1
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f4 fc3c 	bl	8000418 <__aeabi_f2d>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bba6:	f7f4 fc8f 	bl	80004c8 <__aeabi_dmul>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4620      	mov	r0, r4
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7f4 fad3 	bl	800015c <__adddf3>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4610      	mov	r0, r2
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	f7f4 ff5b 	bl	8000a78 <__aeabi_d2f>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178

	  S11_x = S11_x + spx + S21_x*st + (st*st*(S12_x + S22_x*st))/st;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	4610      	mov	r0, r2
 800bbda:	f7f4 ffa3 	bl	8000b24 <__addsf3>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7f4 fc19 	bl	8000418 <__aeabi_f2d>
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	460d      	mov	r5, r1
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f4 fc11 	bl	8000418 <__aeabi_f2d>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bbfc:	f7f4 fc64 	bl	80004c8 <__aeabi_dmul>
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4620      	mov	r0, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	f7f4 faa8 	bl	800015c <__adddf3>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4690      	mov	r8, r2
 800bc12:	4699      	mov	r9, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bc20:	f7f4 fc52 	bl	80004c8 <__aeabi_dmul>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	4692      	mov	sl, r2
 800bc2a:	469b      	mov	fp, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f4 fbf0 	bl	8000418 <__aeabi_f2d>
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f4 fbe8 	bl	8000418 <__aeabi_f2d>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bc4e:	f7f4 fc3b 	bl	80004c8 <__aeabi_dmul>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	4620      	mov	r0, r4
 800bc58:	4629      	mov	r1, r5
 800bc5a:	f7f4 fa7f 	bl	800015c <__adddf3>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4650      	mov	r0, sl
 800bc64:	4659      	mov	r1, fp
 800bc66:	f7f4 fc2f 	bl	80004c8 <__aeabi_dmul>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4610      	mov	r0, r2
 800bc70:	4619      	mov	r1, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bc78:	f7f4 fd50 	bl	800071c <__aeabi_ddiv>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4640      	mov	r0, r8
 800bc82:	4649      	mov	r1, r9
 800bc84:	f7f4 fa6a 	bl	800015c <__adddf3>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	4619      	mov	r1, r3
 800bc90:	f7f4 fef2 	bl	8000a78 <__aeabi_d2f>
 800bc94:	4602      	mov	r2, r0
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	  S12_x = S12_x + S22_x*st;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7f4 fbb8 	bl	8000418 <__aeabi_f2d>
 800bca8:	4604      	mov	r4, r0
 800bcaa:	460d      	mov	r5, r1
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7f4 fbb0 	bl	8000418 <__aeabi_f2d>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bcbe:	f7f4 fc03 	bl	80004c8 <__aeabi_dmul>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 fa47 	bl	800015c <__adddf3>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f7f4 fecf 	bl	8000a78 <__aeabi_d2f>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	  S21_x = S21_x + svx + S22_x*(st);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f7f4 ff17 	bl	8000b24 <__addsf3>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7f4 fb8d 	bl	8000418 <__aeabi_f2d>
 800bcfe:	4604      	mov	r4, r0
 800bd00:	460d      	mov	r5, r1
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7f4 fb85 	bl	8000418 <__aeabi_f2d>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800bd14:	f7f4 fbd8 	bl	80004c8 <__aeabi_dmul>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 fa1c 	bl	800015c <__adddf3>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4610      	mov	r0, r2
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f7f4 fea4 	bl	8000a78 <__aeabi_d2f>
 800bd30:	4602      	mov	r2, r0
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  //S22_x = S22_x;


	  //X Position Correction
	  Kt11 = S11_x/(Qc + S11_x);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7f4 fee9 	bl	8000b24 <__addsf3>
 800bd52:	4603      	mov	r3, r0
 800bd54:	4619      	mov	r1, r3
 800bd56:	4620      	mov	r0, r4
 800bd58:	f7f5 f8a0 	bl	8000e9c <__aeabi_fdiv>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	623b      	str	r3, [r7, #32]
	  Kt21 = S21_x/(Qc + S11_x);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7f4 fed5 	bl	8000b24 <__addsf3>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f7f5 f88c 	bl	8000e9c <__aeabi_fdiv>
 800bd84:	4603      	mov	r3, r0
 800bd86:	61bb      	str	r3, [r7, #24]



	  xpos = (xpos) + (Kt11)*(camx - (xpos));
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 4174 	ldr.w	r4, [r3, #372]	; 0x174
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	f7f4 febf 	bl	8000b20 <__aeabi_fsub>
 800bda2:	4603      	mov	r3, r0
 800bda4:	6a39      	ldr	r1, [r7, #32]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7f4 ffc4 	bl	8000d34 <__aeabi_fmul>
 800bdac:	4603      	mov	r3, r0
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f7f4 feb7 	bl	8000b24 <__addsf3>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	461a      	mov	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

	  vx = (vx) + (Kt21)*(camx - (xpos));
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f7f4 fea3 	bl	8000b20 <__aeabi_fsub>
 800bdda:	4603      	mov	r3, r0
 800bddc:	69b9      	ldr	r1, [r7, #24]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f4 ffa8 	bl	8000d34 <__aeabi_fmul>
 800bde4:	4603      	mov	r3, r0
 800bde6:	4619      	mov	r1, r3
 800bde8:	4620      	mov	r0, r4
 800bdea:	f7f4 fe9b 	bl	8000b24 <__addsf3>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178


	  S11_x = -S11_x*((Kt11) - 1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdfe:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800be02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be06:	6a38      	ldr	r0, [r7, #32]
 800be08:	f7f4 fe8a 	bl	8000b20 <__aeabi_fsub>
 800be0c:	4603      	mov	r3, r0
 800be0e:	4619      	mov	r1, r3
 800be10:	4620      	mov	r0, r4
 800be12:	f7f4 ff8f 	bl	8000d34 <__aeabi_fmul>
 800be16:	4603      	mov	r3, r0
 800be18:	461a      	mov	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	  S12_x = -S12_x*((Kt11) - 1);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be26:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800be2a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be2e:	6a38      	ldr	r0, [r7, #32]
 800be30:	f7f4 fe76 	bl	8000b20 <__aeabi_fsub>
 800be34:	4603      	mov	r3, r0
 800be36:	4619      	mov	r1, r3
 800be38:	4620      	mov	r0, r4
 800be3a:	f7f4 ff7b 	bl	8000d34 <__aeabi_fmul>
 800be3e:	4603      	mov	r3, r0
 800be40:	461a      	mov	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	  S21_x = S21_x - S11_x*(Kt21);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be54:	69b9      	ldr	r1, [r7, #24]
 800be56:	4618      	mov	r0, r3
 800be58:	f7f4 ff6c 	bl	8000d34 <__aeabi_fmul>
 800be5c:	4603      	mov	r3, r0
 800be5e:	4619      	mov	r1, r3
 800be60:	4620      	mov	r0, r4
 800be62:	f7f4 fe5d 	bl	8000b20 <__aeabi_fsub>
 800be66:	4603      	mov	r3, r0
 800be68:	461a      	mov	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	  S22_x = S22_x - S12_x*(Kt21);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be7c:	69b9      	ldr	r1, [r7, #24]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f4 ff58 	bl	8000d34 <__aeabi_fmul>
 800be84:	4603      	mov	r3, r0
 800be86:	4619      	mov	r1, r3
 800be88:	4620      	mov	r0, r4
 800be8a:	f7f4 fe49 	bl	8000b20 <__aeabi_fsub>
 800be8e:	4603      	mov	r3, r0
 800be90:	461a      	mov	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8




	pitch_eski=pitch_comp;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	roll_eski=roll_comp;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    state.angles[0] = roll_ekf;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    state.angles[1] = pitch_ekf;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    state.angles[2] = 0;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f04f 0200 	mov.w	r2, #0
 800bece:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    state.rates[0] = roll_rate;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68da      	ldr	r2, [r3, #12]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    state.rates[1] = pitch_rate;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	691a      	ldr	r2, [r3, #16]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    state.rates[2] = yaw_rate;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	695a      	ldr	r2, [r3, #20]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

    state.bias[0] = roll_bias;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	69da      	ldr	r2, [r3, #28]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    state.bias[1] = pitch_bias;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	699a      	ldr	r2, [r3, #24]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    state.bias[2] = yaw_bias;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1a      	ldr	r2, [r3, #32]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

}
 800bf0e:	bf00      	nop
 800bf10:	3770      	adds	r7, #112	; 0x70
 800bf12:	46bd      	mov	sp, r7
 800bf14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bf18 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 fc79 	bl	800c81e <_ZN3lpfD1Ev>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fc73 	bl	800c81e <_ZN3lpfD1Ev>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	0000      	movs	r0, r0
 800bf44:	0000      	movs	r0, r0
	...

0800bf48 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af04      	add	r7, sp, #16
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a23      	ldr	r2, [pc, #140]	; (800bfe0 <_ZN3PIDC1Ev+0x98>)
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a22      	ldr	r2, [pc, #136]	; (800bfe4 <_ZN3PIDC1Ev+0x9c>)
 800bf5a:	605a      	str	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bf62:	609a      	str	r2, [r3, #8]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7f4 fe8f 	bl	8000c8c <__aeabi_i2f>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	4619      	mov	r1, r3
 800bf72:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bf76:	f7f4 ff91 	bl	8000e9c <__aeabi_fdiv>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	60da      	str	r2, [r3, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a18      	ldr	r2, [pc, #96]	; (800bfe8 <_ZN3PIDC1Ev+0xa0>)
 800bf86:	611a      	str	r2, [r3, #16]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	4619      	mov	r1, r3
 800bf92:	4610      	mov	r0, r2
 800bf94:	f7f4 fece 	bl	8000d34 <__aeabi_fmul>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	615a      	str	r2, [r3, #20]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bfa6:	a30a      	add	r3, pc, #40	; (adr r3, 800bfd0 <_ZN3PIDC1Ev+0x88>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfb0:	a307      	add	r3, pc, #28	; (adr r3, 800bfd0 <_ZN3PIDC1Ev+0x88>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	e9cd 2300 	strd	r2, r3, [sp]
 800bfba:	a307      	add	r3, pc, #28	; (adr r3, 800bfd8 <_ZN3PIDC1Ev+0x90>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	f000 fbbb 	bl	800c73c <_ZN3lpfC1Eddd>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	de7ea5f8 	.word	0xde7ea5f8
 800bfd4:	3fb2a454 	.word	0x3fb2a454
 800bfd8:	ab367a10 	.word	0xab367a10
 800bfdc:	3feb573e 	.word	0x3feb573e
 800bfe0:	42f00000 	.word	0x42f00000
 800bfe4:	c2f00000 	.word	0xc2f00000
 800bfe8:	3e99999a 	.word	0x3e99999a

0800bfec <_ZN3PID7P_AngleEfff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle) {
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
	float P;
	e_angle = alpha_des - alpha;
 800bffa:	6879      	ldr	r1, [r7, #4]
 800bffc:	68b8      	ldr	r0, [r7, #8]
 800bffe:	f7f4 fd8f 	bl	8000b20 <__aeabi_fsub>
 800c002:	4603      	mov	r3, r0
 800c004:	461a      	mov	r2, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	P = Kp_angle*e_angle;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c012:	4619      	mov	r1, r3
 800c014:	6838      	ldr	r0, [r7, #0]
 800c016:	f7f4 fe8d 	bl	8000d34 <__aeabi_fmul>
 800c01a:	4603      	mov	r3, r0
 800c01c:	617b      	str	r3, [r7, #20]
    return P;
 800c01e:	697b      	ldr	r3, [r7, #20]

}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800c028:	b580      	push	{r7, lr}
 800c02a:	b08a      	sub	sp, #40	; 0x28
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d90e      	bls.n	800c05e <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	695b      	ldr	r3, [r3, #20]
 800c044:	68b9      	ldr	r1, [r7, #8]
 800c046:	4618      	mov	r0, r3
 800c048:	f7f4 fd6c 	bl	8000b24 <__addsf3>
 800c04c:	4603      	mov	r3, r0
 800c04e:	461a      	mov	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = vz_def;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	627b      	str	r3, [r7, #36]	; 0x24
 800c05c:	e01c      	b.n	800c098 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	f240 5213 	movw	r2, #1299	; 0x513
 800c064:	4293      	cmp	r3, r2
 800c066:	d810      	bhi.n	800c08a <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	695b      	ldr	r3, [r3, #20]
 800c06c:	4619      	mov	r1, r3
 800c06e:	68b8      	ldr	r0, [r7, #8]
 800c070:	f7f4 fd56 	bl	8000b20 <__aeabi_fsub>
 800c074:	4603      	mov	r3, r0
 800c076:	461a      	mov	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = -1 * vz_def;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
 800c088:	e006      	b.n	800c098 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = 0;
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c09c:	f7f4 fd40 	bl	8000b20 <__aeabi_fsub>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800c0a4:	6a39      	ldr	r1, [r7, #32]
 800c0a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0a8:	f7f4 fe44 	bl	8000d34 <__aeabi_fmul>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	68b8      	ldr	r0, [r7, #8]
 800c0b4:	f7f4 fd34 	bl	8000b20 <__aeabi_fsub>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800c0bc:	69b9      	ldr	r1, [r7, #24]
 800c0be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c0c0:	f7f4 fe38 	bl	8000d34 <__aeabi_fmul>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800c0c8:	6979      	ldr	r1, [r7, #20]
 800c0ca:	69f8      	ldr	r0, [r7, #28]
 800c0cc:	f7f4 fd2a 	bl	8000b24 <__addsf3>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	613b      	str	r3, [r7, #16]
    return PI;
 800c0d4:	693b      	ldr	r3, [r7, #16]

}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3728      	adds	r7, #40	; 0x28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
	...

0800c0e0 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800c0e0:	b590      	push	{r4, r7, lr}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	68b8      	ldr	r0, [r7, #8]
 800c0f2:	f7f4 fd15 	bl	8000b20 <__aeabi_fsub>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	651a      	str	r2, [r3, #80]	; 0x50
	P = Kp * e_roll;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c104:	4618      	mov	r0, r3
 800c106:	f7f4 fe15 	bl	8000d34 <__aeabi_fmul>
 800c10a:	4603      	mov	r3, r0
 800c10c:	461a      	mov	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	67da      	str	r2, [r3, #124]	; 0x7c

	ie_roll += e_angle*st;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	4619      	mov	r1, r3
 800c122:	4610      	mov	r0, r2
 800c124:	f7f4 fe06 	bl	8000d34 <__aeabi_fmul>
 800c128:	4603      	mov	r3, r0
 800c12a:	4619      	mov	r1, r3
 800c12c:	4620      	mov	r0, r4
 800c12e:	f7f4 fcf9 	bl	8000b24 <__addsf3>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	661a      	str	r2, [r3, #96]	; 0x60

	I = Ki * (ie_roll * Kp_angle - alpha);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c13e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c140:	4618      	mov	r0, r3
 800c142:	f7f4 fdf7 	bl	8000d34 <__aeabi_fmul>
 800c146:	4603      	mov	r3, r0
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7f4 fce8 	bl	8000b20 <__aeabi_fsub>
 800c150:	4603      	mov	r3, r0
 800c152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c154:	4618      	mov	r0, r3
 800c156:	f7f4 fded 	bl	8000d34 <__aeabi_fmul>
 800c15a:	4603      	mov	r3, r0
 800c15c:	461a      	mov	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	4619      	mov	r1, r3
 800c16a:	68b8      	ldr	r0, [r7, #8]
 800c16c:	f7f4 fcd8 	bl	8000b20 <__aeabi_fsub>
 800c170:	4603      	mov	r3, r0
 800c172:	617b      	str	r3, [r7, #20]
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7f4 fcd0 	bl	8000b20 <__aeabi_fsub>
 800c180:	4603      	mov	r3, r0
 800c182:	461a      	mov	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	4619      	mov	r1, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	f7f4 fe86 	bl	8000e9c <__aeabi_fdiv>
 800c190:	4603      	mov	r3, r0
 800c192:	613b      	str	r3, [r7, #16]
	alpha_dot_dot_des = alpha_dot_dot_des / st;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	4619      	mov	r1, r3
 800c19a:	6978      	ldr	r0, [r7, #20]
 800c19c:	f7f4 fe7e 	bl	8000e9c <__aeabi_fdiv>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	617b      	str	r3, [r7, #20]
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3328      	adds	r3, #40	; 0x28
 800c1a8:	6939      	ldr	r1, [r7, #16]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 fae1 	bl	800c772 <_ZN3lpf3RunEf>
 800c1b0:	6138      	str	r0, [r7, #16]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c1b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f4 fdba 	bl	8000d34 <__aeabi_fmul>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	6939      	ldr	r1, [r7, #16]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7f4 fcab 	bl	8000b20 <__aeabi_fsub>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7f4 fdb0 	bl	8000d34 <__aeabi_fmul>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7f4 fc9a 	bl	8000b24 <__addsf3>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	f7f4 fc91 	bl	8000b24 <__addsf3>
 800c202:	4603      	mov	r3, r0
 800c204:	461a      	mov	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	pd_roll_buf = pd;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800c21c:	4b0d      	ldr	r3, [pc, #52]	; (800c254 <_ZN3PID9PID_Rate2Efffffff+0x174>)
 800c21e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f000 f966 	bl	800c4f4 <_ZN3PID3SatEfii>
 800c228:	4602      	mov	r2, r0
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pd_roll_sat_buf = pd;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	66da      	str	r2, [r3, #108]	; 0x6c
	alpha_dot_des_ = alpha_dot_des;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	621a      	str	r2, [r3, #32]
	alpha_dot_ = alpha_dot;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	625a      	str	r2, [r3, #36]	; 0x24
	return pd;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	bd90      	pop	{r4, r7, pc}
 800c254:	fffffed4 	.word	0xfffffed4

0800c258 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800c258:	b590      	push	{r4, r7, lr}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800c266:	6879      	ldr	r1, [r7, #4]
 800c268:	68b8      	ldr	r0, [r7, #8]
 800c26a:	f7f4 fc59 	bl	8000b20 <__aeabi_fsub>
 800c26e:	4603      	mov	r3, r0
 800c270:	461a      	mov	r2, r3
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	651a      	str	r2, [r3, #80]	; 0x50
  float e_roll_der = - alpha_dot;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c27c:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c282:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7f4 ff2f 	bl	80010ec <__aeabi_f2iz>
 800c28e:	4604      	mov	r4, r0
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c294:	4618      	mov	r0, r3
 800c296:	f7f4 ff29 	bl	80010ec <__aeabi_f2iz>
 800c29a:	4603      	mov	r3, r0
 800c29c:	429c      	cmp	r4, r3
 800c29e:	d018      	beq.n	800c2d2 <_ZN3PID7PD_RateEfffff+0x7a>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f000 f8cb 	bl	800c442 <_ZN3PID3sgnEf>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461c      	mov	r4, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 f8c3 	bl	800c442 <_ZN3PID3sgnEf>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	429c      	cmp	r4, r3
 800c2c0:	bf0c      	ite	eq
 800c2c2:	2301      	moveq	r3, #1
 800c2c4:	2300      	movne	r3, #0
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <_ZN3PID7PD_RateEfffff+0x7a>
      e_roll_int = 0;
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7f4 fd2b 	bl	8000d34 <__aeabi_fmul>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7f4 fc19 	bl	8000b20 <__aeabi_fsub>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	4947      	ldr	r1, [pc, #284]	; (800c410 <_ZN3PID7PD_RateEfffff+0x1b8>)
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7f4 fd1e 	bl	8000d34 <__aeabi_fmul>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	675a      	str	r2, [r3, #116]	; 0x74
  	de_int += de_filt*st;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	f7f4 fd10 	bl	8000d34 <__aeabi_fmul>
 800c314:	4603      	mov	r3, r0
 800c316:	4619      	mov	r1, r3
 800c318:	4620      	mov	r0, r4
 800c31a:	f7f4 fc03 	bl	8000b24 <__addsf3>
 800c31e:	4603      	mov	r3, r0
 800c320:	461a      	mov	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	679a      	str	r2, [r3, #120]	; 0x78

	de = e_roll - e_eski_roll;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32e:	4619      	mov	r1, r3
 800c330:	4610      	mov	r0, r2
 800c332:	f7f4 fbf5 	bl	8000b20 <__aeabi_fsub>
 800c336:	4603      	mov	r3, r0
 800c338:	461a      	mov	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	671a      	str	r2, [r3, #112]	; 0x70
	e_eski_roll = e_roll;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	659a      	str	r2, [r3, #88]	; 0x58

  ie_roll += e_roll_int*st;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	6979      	ldr	r1, [r7, #20]
 800c350:	4618      	mov	r0, r3
 800c352:	f7f4 fcef 	bl	8000d34 <__aeabi_fmul>
 800c356:	4603      	mov	r3, r0
 800c358:	4619      	mov	r1, r3
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7f4 fbe2 	bl	8000b24 <__addsf3>
 800c360:	4603      	mov	r3, r0
 800c362:	461a      	mov	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	661a      	str	r2, [r3, #96]	; 0x60

  ie_roll_sat = ie_roll;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	669a      	str	r2, [r3, #104]	; 0x68
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	4618      	mov	r0, r3
 800c378:	f7f4 fcdc 	bl	8000d34 <__aeabi_fmul>
 800c37c:	4603      	mov	r3, r0
 800c37e:	461a      	mov	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	67da      	str	r2, [r3, #124]	; 0x7c
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c394:	4618      	mov	r0, r3
 800c396:	f7f4 fccd 	bl	8000d34 <__aeabi_fmul>
 800c39a:	4603      	mov	r3, r0
 800c39c:	461a      	mov	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//D = lpf.update(D);
	pd = P + I + D;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f7f4 fbb7 	bl	8000b24 <__addsf3>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	f7f4 fbae 	bl	8000b24 <__addsf3>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	pd_roll_buf = pd;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800c3e2:	4b0c      	ldr	r3, [pc, #48]	; (800c414 <_ZN3PID7PD_RateEfffff+0x1bc>)
 800c3e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 f883 	bl	800c4f4 <_ZN3PID3SatEfii>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pd_roll_sat_buf = pd;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	66da      	str	r2, [r3, #108]	; 0x6c
    return pd;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

}
 800c406:	4618      	mov	r0, r3
 800c408:	371c      	adds	r7, #28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd90      	pop	{r4, r7, pc}
 800c40e:	bf00      	nop
 800c410:	42c80000 	.word	0x42c80000
 800c414:	fffffed4 	.word	0xfffffed4

0800c418 <_ZN3PID5resetEv>:

void PID::reset() {
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	661a      	str	r2, [r3, #96]	; 0x60
	de_filt = 0;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f04f 0200 	mov.w	r2, #0
 800c42e:	675a      	str	r2, [r3, #116]	; 0x74
	de_int = 0;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f04f 0200 	mov.w	r2, #0
 800c436:	679a      	str	r2, [r3, #120]	; 0x78
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bc80      	pop	{r7}
 800c440:	4770      	bx	lr

0800c442 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800c442:	b580      	push	{r7, lr}
 800c444:	b082      	sub	sp, #8
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800c44c:	f04f 0100 	mov.w	r1, #0
 800c450:	6838      	ldr	r0, [r7, #0]
 800c452:	f7f4 fe0d 	bl	8001070 <__aeabi_fcmplt>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <_ZN3PID3sgnEf+0x1e>
 800c45c:	23ff      	movs	r3, #255	; 0xff
 800c45e:	e00a      	b.n	800c476 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800c460:	f04f 0100 	mov.w	r1, #0
 800c464:	6838      	ldr	r0, [r7, #0]
 800c466:	f7f4 fe21 	bl	80010ac <__aeabi_fcmpgt>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d001      	beq.n	800c474 <_ZN3PID3sgnEf+0x32>
 800c470:	2301      	movs	r3, #1
 800c472:	e000      	b.n	800c476 <_ZN3PID3sgnEf+0x34>
  return 0;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800c48e:	6a3b      	ldr	r3, [r7, #32]
 800c490:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800c494:	dd24      	ble.n	800c4e0 <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7f4 fbf8 	bl	8000c8c <__aeabi_i2f>
 800c49c:	4603      	mov	r3, r0
 800c49e:	4619      	mov	r1, r3
 800c4a0:	68b8      	ldr	r0, [r7, #8]
 800c4a2:	f7f4 fe03 	bl	80010ac <__aeabi_fcmpgt>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d005      	beq.n	800c4b8 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7f4 fbed 	bl	8000c8c <__aeabi_i2f>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	e015      	b.n	800c4e4 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800c4b8:	6838      	ldr	r0, [r7, #0]
 800c4ba:	f7f4 fbe7 	bl	8000c8c <__aeabi_i2f>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	68b8      	ldr	r0, [r7, #8]
 800c4c4:	f7f4 fdd4 	bl	8001070 <__aeabi_fcmplt>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800c4ce:	6838      	ldr	r0, [r7, #0]
 800c4d0:	f7f4 fbdc 	bl	8000c8c <__aeabi_i2f>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	e004      	b.n	800c4e4 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	617b      	str	r3, [r7, #20]
 800c4de:	e001      	b.n	800c4e4 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800c4e0:	4b03      	ldr	r3, [pc, #12]	; (800c4f0 <_ZN3PID3SatEfiii+0x70>)
 800c4e2:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800c4e4:	697b      	ldr	r3, [r7, #20]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	447a0000 	.word	0x447a0000

0800c4f4 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7f4 fbc2 	bl	8000c8c <__aeabi_i2f>
 800c508:	4603      	mov	r3, r0
 800c50a:	4619      	mov	r1, r3
 800c50c:	68b8      	ldr	r0, [r7, #8]
 800c50e:	f7f4 fdcd 	bl	80010ac <__aeabi_fcmpgt>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d005      	beq.n	800c524 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7f4 fbb7 	bl	8000c8c <__aeabi_i2f>
 800c51e:	4603      	mov	r3, r0
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	e012      	b.n	800c54a <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800c524:	6838      	ldr	r0, [r7, #0]
 800c526:	f7f4 fbb1 	bl	8000c8c <__aeabi_i2f>
 800c52a:	4603      	mov	r3, r0
 800c52c:	4619      	mov	r1, r3
 800c52e:	68b8      	ldr	r0, [r7, #8]
 800c530:	f7f4 fd9e 	bl	8001070 <__aeabi_fcmplt>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d005      	beq.n	800c546 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800c53a:	6838      	ldr	r0, [r7, #0]
 800c53c:	f7f4 fba6 	bl	8000c8c <__aeabi_i2f>
 800c540:	4603      	mov	r3, r0
 800c542:	617b      	str	r3, [r7, #20]
 800c544:	e001      	b.n	800c54a <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800c54a:	697b      	ldr	r3, [r7, #20]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3718      	adds	r7, #24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	807b      	strh	r3, [r7, #2]
	int dead_zone = 5;
 800c560:	2305      	movs	r3, #5
 800c562:	61bb      	str	r3, [r7, #24]
	int in_min  = 1000;
 800c564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c568:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800c56a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c56e:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800c570:	f06f 031d 	mvn.w	r3, #29
 800c574:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 800c576:	231e      	movs	r3, #30
 800c578:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 800c57a:	887a      	ldrh	r2, [r7, #2]
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800c582:	3304      	adds	r3, #4
 800c584:	429a      	cmp	r2, r3
 800c586:	dd09      	ble.n	800c59c <_ZN3PID7pwm2angEt+0x48>
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 800c58e:	887b      	ldrh	r3, [r7, #2]
 800c590:	429a      	cmp	r2, r3
 800c592:	db03      	blt.n	800c59c <_ZN3PID7pwm2angEt+0x48>
		pwm_out = 1500;
 800c594:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c598:	83fb      	strh	r3, [r7, #30]
 800c59a:	e001      	b.n	800c5a0 <_ZN3PID7pwm2angEt+0x4c>
	}

	else {
		pwm_out = pwm;
 800c59c:	887b      	ldrh	r3, [r7, #2]
 800c59e:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800c5a0:	8bfa      	ldrh	r2, [r7, #30]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	1a8a      	subs	r2, r1, r2
 800c5ac:	fb02 f203 	mul.w	r2, r2, r3
 800c5b0:	6939      	ldr	r1, [r7, #16]
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	1acb      	subs	r3, r1, r3
 800c5b6:	fb92 f2f3 	sdiv	r2, r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	4413      	add	r3, r2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7f4 fb64 	bl	8000c8c <__aeabi_i2f>
 800c5c4:	4603      	mov	r3, r0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3720      	adds	r7, #32
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b086      	sub	sp, #24
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 800c5da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5de:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800c5e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c5e4:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 800c5e6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800c5ea:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 800c5ec:	2364      	movs	r3, #100	; 0x64
 800c5ee:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800c5f0:	887a      	ldrh	r2, [r7, #2]
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	1a8a      	subs	r2, r1, r2
 800c5fc:	fb02 f203 	mul.w	r2, r2, r3
 800c600:	6939      	ldr	r1, [r7, #16]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	1acb      	subs	r3, r1, r3
 800c606:	fb92 f2f3 	sdiv	r2, r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	4413      	add	r3, r2
 800c60e:	425b      	negs	r3, r3
 800c610:	4618      	mov	r0, r3
 800c612:	f7f4 fb3b 	bl	8000c8c <__aeabi_i2f>
 800c616:	4603      	mov	r3, r0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 800c620:	b590      	push	{r4, r7, lr}
 800c622:	b089      	sub	sp, #36	; 0x24
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	460b      	mov	r3, r1
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 800c62e:	4b1d      	ldr	r3, [pc, #116]	; (800c6a4 <_ZN3PID7pwm2motEti+0x84>)
 800c630:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800c632:	4b1d      	ldr	r3, [pc, #116]	; (800c6a8 <_ZN3PID7pwm2motEti+0x88>)
 800c634:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800c636:	f04f 0300 	mov.w	r3, #0
 800c63a:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 800c63c:	4b1b      	ldr	r3, [pc, #108]	; (800c6ac <_ZN3PID7pwm2motEti+0x8c>)
 800c63e:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7f4 fb23 	bl	8000c8c <__aeabi_i2f>
 800c646:	4604      	mov	r4, r0
 800c648:	897b      	ldrh	r3, [r7, #10]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7f4 fb1a 	bl	8000c84 <__aeabi_ui2f>
 800c650:	4603      	mov	r3, r0
 800c652:	69f9      	ldr	r1, [r7, #28]
 800c654:	4618      	mov	r0, r3
 800c656:	f7f4 fa63 	bl	8000b20 <__aeabi_fsub>
 800c65a:	4603      	mov	r3, r0
 800c65c:	4619      	mov	r1, r3
 800c65e:	4620      	mov	r0, r4
 800c660:	f7f4 fb68 	bl	8000d34 <__aeabi_fmul>
 800c664:	4603      	mov	r3, r0
 800c666:	461c      	mov	r4, r3
 800c668:	6979      	ldr	r1, [r7, #20]
 800c66a:	6938      	ldr	r0, [r7, #16]
 800c66c:	f7f4 fa58 	bl	8000b20 <__aeabi_fsub>
 800c670:	4603      	mov	r3, r0
 800c672:	4619      	mov	r1, r3
 800c674:	4620      	mov	r0, r4
 800c676:	f7f4 fb5d 	bl	8000d34 <__aeabi_fmul>
 800c67a:	4603      	mov	r3, r0
 800c67c:	461c      	mov	r4, r3
 800c67e:	69f9      	ldr	r1, [r7, #28]
 800c680:	69b8      	ldr	r0, [r7, #24]
 800c682:	f7f4 fa4d 	bl	8000b20 <__aeabi_fsub>
 800c686:	4603      	mov	r3, r0
 800c688:	4619      	mov	r1, r3
 800c68a:	4620      	mov	r0, r4
 800c68c:	f7f4 fc06 	bl	8000e9c <__aeabi_fdiv>
 800c690:	4603      	mov	r3, r0
 800c692:	6979      	ldr	r1, [r7, #20]
 800c694:	4618      	mov	r0, r3
 800c696:	f7f4 fa45 	bl	8000b24 <__addsf3>
 800c69a:	4603      	mov	r3, r0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3724      	adds	r7, #36	; 0x24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd90      	pop	{r4, r7, pc}
 800c6a4:	447a0000 	.word	0x447a0000
 800c6a8:	44fa0000 	.word	0x44fa0000
 800c6ac:	44a5c000 	.word	0x44a5c000

0800c6b0 <_ZN3PID5F2thrEf>:

unsigned int PID::F2thr(float F) {
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800c6ba:	4b16      	ldr	r3, [pc, #88]	; (800c714 <_ZN3PID5F2thrEf+0x64>)
 800c6bc:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800c6be:	4b16      	ldr	r3, [pc, #88]	; (800c718 <_ZN3PID5F2thrEf+0x68>)
 800c6c0:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800c6c2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c6c6:	6838      	ldr	r0, [r7, #0]
 800c6c8:	f7f4 fbe8 	bl	8000e9c <__aeabi_fdiv>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800c6d0:	69f9      	ldr	r1, [r7, #28]
 800c6d2:	6978      	ldr	r0, [r7, #20]
 800c6d4:	f7f4 fbe2 	bl	8000e9c <__aeabi_fdiv>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fc fec7 	bl	800946e <_ZSt4sqrtf>
 800c6e0:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800c6e2:	490e      	ldr	r1, [pc, #56]	; (800c71c <_ZN3PID5F2thrEf+0x6c>)
 800c6e4:	6938      	ldr	r0, [r7, #16]
 800c6e6:	f7f4 fb25 	bl	8000d34 <__aeabi_fmul>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	69b9      	ldr	r1, [r7, #24]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f4 fbd4 	bl	8000e9c <__aeabi_fdiv>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	4909      	ldr	r1, [pc, #36]	; (800c71c <_ZN3PID5F2thrEf+0x6c>)
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7f4 fa13 	bl	8000b24 <__addsf3>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4618      	mov	r0, r3
 800c702:	f7f4 fd19 	bl	8001138 <__aeabi_f2uiz>
 800c706:	4603      	mov	r3, r0
 800c708:	60fb      	str	r3, [r7, #12]
	return thr;
 800c70a:	68fb      	ldr	r3, [r7, #12]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	3359f513 	.word	0x3359f513
 800c718:	46896e00 	.word	0x46896e00
 800c71c:	447a0000 	.word	0x447a0000

0800c720 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	3328      	adds	r3, #40	; 0x28
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 f876 	bl	800c81e <_ZN3lpfD1Ev>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800c748:	68f9      	ldr	r1, [r7, #12]
 800c74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c74e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800c752:	68f9      	ldr	r1, [r7, #12]
 800c754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c758:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800c75c:	68f9      	ldr	r1, [r7, #12]
 800c75e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c762:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr

0800c772 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800c772:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7f3 fe45 	bl	8000418 <__aeabi_f2d>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4620      	mov	r0, r4
 800c794:	4629      	mov	r1, r5
 800c796:	f7f3 fe97 	bl	80004c8 <__aeabi_dmul>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4690      	mov	r8, r2
 800c7a0:	4699      	mov	r9, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c7a8:	6838      	ldr	r0, [r7, #0]
 800c7aa:	f7f3 fe35 	bl	8000418 <__aeabi_f2d>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	f7f3 fe87 	bl	80004c8 <__aeabi_dmul>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4640      	mov	r0, r8
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	f7f3 fccb 	bl	800015c <__adddf3>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4690      	mov	r8, r2
 800c7cc:	4699      	mov	r9, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7f3 fe1d 	bl	8000418 <__aeabi_f2d>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f7f3 fe6f 	bl	80004c8 <__aeabi_dmul>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	4649      	mov	r1, r9
 800c7f2:	f7f3 fcb3 	bl	800015c <__adddf3>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	f7f4 f93b 	bl	8000a78 <__aeabi_d2f>
 800c802:	4603      	mov	r3, r0
 800c804:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	601a      	str	r2, [r3, #0]
	y_ = y;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	605a      	str	r2, [r3, #4]
	return y;
 800c812:	68fb      	ldr	r3, [r7, #12]

}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800c81e <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800c81e:	b480      	push	{r7}
 800c820:	b083      	sub	sp, #12
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bc80      	pop	{r7}
 800c830:	4770      	bx	lr

0800c832 <_ZdlPv>:
 800c832:	f001 bf9b 	b.w	800e76c <free>

0800c836 <_Znwj>:
 800c836:	2801      	cmp	r0, #1
 800c838:	bf38      	it	cc
 800c83a:	2001      	movcc	r0, #1
 800c83c:	b510      	push	{r4, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	4620      	mov	r0, r4
 800c842:	f001 ff8b 	bl	800e75c <malloc>
 800c846:	b930      	cbnz	r0, 800c856 <_Znwj+0x20>
 800c848:	f000 f80c 	bl	800c864 <_ZSt15get_new_handlerv>
 800c84c:	b908      	cbnz	r0, 800c852 <_Znwj+0x1c>
 800c84e:	f001 ff53 	bl	800e6f8 <abort>
 800c852:	4780      	blx	r0
 800c854:	e7f4      	b.n	800c840 <_Znwj+0xa>
 800c856:	bd10      	pop	{r4, pc}

0800c858 <_ZSt17__throw_bad_allocv>:
 800c858:	b508      	push	{r3, lr}
 800c85a:	f001 ff4d 	bl	800e6f8 <abort>

0800c85e <_ZSt20__throw_length_errorPKc>:
 800c85e:	b508      	push	{r3, lr}
 800c860:	f001 ff4a 	bl	800e6f8 <abort>

0800c864 <_ZSt15get_new_handlerv>:
 800c864:	4b02      	ldr	r3, [pc, #8]	; (800c870 <_ZSt15get_new_handlerv+0xc>)
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	f3bf 8f5b 	dmb	ish
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	20000d64 	.word	0x20000d64

0800c874 <cosf>:
 800c874:	b507      	push	{r0, r1, r2, lr}
 800c876:	4a18      	ldr	r2, [pc, #96]	; (800c8d8 <cosf+0x64>)
 800c878:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c87c:	4293      	cmp	r3, r2
 800c87e:	4601      	mov	r1, r0
 800c880:	dc03      	bgt.n	800c88a <cosf+0x16>
 800c882:	2100      	movs	r1, #0
 800c884:	f001 f9d6 	bl	800dc34 <__kernel_cosf>
 800c888:	e004      	b.n	800c894 <cosf+0x20>
 800c88a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c88e:	db04      	blt.n	800c89a <cosf+0x26>
 800c890:	f7f4 f946 	bl	8000b20 <__aeabi_fsub>
 800c894:	b003      	add	sp, #12
 800c896:	f85d fb04 	ldr.w	pc, [sp], #4
 800c89a:	4669      	mov	r1, sp
 800c89c:	f001 f81a 	bl	800d8d4 <__ieee754_rem_pio2f>
 800c8a0:	f000 0203 	and.w	r2, r0, #3
 800c8a4:	2a01      	cmp	r2, #1
 800c8a6:	d005      	beq.n	800c8b4 <cosf+0x40>
 800c8a8:	2a02      	cmp	r2, #2
 800c8aa:	d00a      	beq.n	800c8c2 <cosf+0x4e>
 800c8ac:	b972      	cbnz	r2, 800c8cc <cosf+0x58>
 800c8ae:	9901      	ldr	r1, [sp, #4]
 800c8b0:	9800      	ldr	r0, [sp, #0]
 800c8b2:	e7e7      	b.n	800c884 <cosf+0x10>
 800c8b4:	9901      	ldr	r1, [sp, #4]
 800c8b6:	9800      	ldr	r0, [sp, #0]
 800c8b8:	f001 fcf2 	bl	800e2a0 <__kernel_sinf>
 800c8bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c8c0:	e7e8      	b.n	800c894 <cosf+0x20>
 800c8c2:	9901      	ldr	r1, [sp, #4]
 800c8c4:	9800      	ldr	r0, [sp, #0]
 800c8c6:	f001 f9b5 	bl	800dc34 <__kernel_cosf>
 800c8ca:	e7f7      	b.n	800c8bc <cosf+0x48>
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	9901      	ldr	r1, [sp, #4]
 800c8d0:	9800      	ldr	r0, [sp, #0]
 800c8d2:	f001 fce5 	bl	800e2a0 <__kernel_sinf>
 800c8d6:	e7dd      	b.n	800c894 <cosf+0x20>
 800c8d8:	3f490fd8 	.word	0x3f490fd8

0800c8dc <pow>:
 800c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8e0:	461f      	mov	r7, r3
 800c8e2:	4680      	mov	r8, r0
 800c8e4:	4689      	mov	r9, r1
 800c8e6:	4616      	mov	r6, r2
 800c8e8:	f000 f8ee 	bl	800cac8 <__ieee754_pow>
 800c8ec:	4b4d      	ldr	r3, [pc, #308]	; (800ca24 <pow+0x148>)
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	f993 3000 	ldrsb.w	r3, [r3]
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	d015      	beq.n	800c926 <pow+0x4a>
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	463b      	mov	r3, r7
 800c8fe:	4630      	mov	r0, r6
 800c900:	4639      	mov	r1, r7
 800c902:	f7f4 f87b 	bl	80009fc <__aeabi_dcmpun>
 800c906:	b970      	cbnz	r0, 800c926 <pow+0x4a>
 800c908:	4642      	mov	r2, r8
 800c90a:	464b      	mov	r3, r9
 800c90c:	4640      	mov	r0, r8
 800c90e:	4649      	mov	r1, r9
 800c910:	f7f4 f874 	bl	80009fc <__aeabi_dcmpun>
 800c914:	2200      	movs	r2, #0
 800c916:	2300      	movs	r3, #0
 800c918:	b148      	cbz	r0, 800c92e <pow+0x52>
 800c91a:	4630      	mov	r0, r6
 800c91c:	4639      	mov	r1, r7
 800c91e:	f7f4 f83b 	bl	8000998 <__aeabi_dcmpeq>
 800c922:	2800      	cmp	r0, #0
 800c924:	d17b      	bne.n	800ca1e <pow+0x142>
 800c926:	4620      	mov	r0, r4
 800c928:	4629      	mov	r1, r5
 800c92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f4 f831 	bl	8000998 <__aeabi_dcmpeq>
 800c936:	b1e0      	cbz	r0, 800c972 <pow+0x96>
 800c938:	2200      	movs	r2, #0
 800c93a:	2300      	movs	r3, #0
 800c93c:	4630      	mov	r0, r6
 800c93e:	4639      	mov	r1, r7
 800c940:	f7f4 f82a 	bl	8000998 <__aeabi_dcmpeq>
 800c944:	2800      	cmp	r0, #0
 800c946:	d16a      	bne.n	800ca1e <pow+0x142>
 800c948:	4630      	mov	r0, r6
 800c94a:	4639      	mov	r1, r7
 800c94c:	f001 fd21 	bl	800e392 <finite>
 800c950:	2800      	cmp	r0, #0
 800c952:	d0e8      	beq.n	800c926 <pow+0x4a>
 800c954:	2200      	movs	r2, #0
 800c956:	2300      	movs	r3, #0
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	f7f4 f826 	bl	80009ac <__aeabi_dcmplt>
 800c960:	2800      	cmp	r0, #0
 800c962:	d0e0      	beq.n	800c926 <pow+0x4a>
 800c964:	f001 fed0 	bl	800e708 <__errno>
 800c968:	2321      	movs	r3, #33	; 0x21
 800c96a:	2400      	movs	r4, #0
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	4d2e      	ldr	r5, [pc, #184]	; (800ca28 <pow+0x14c>)
 800c970:	e7d9      	b.n	800c926 <pow+0x4a>
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f001 fd0c 	bl	800e392 <finite>
 800c97a:	bba8      	cbnz	r0, 800c9e8 <pow+0x10c>
 800c97c:	4640      	mov	r0, r8
 800c97e:	4649      	mov	r1, r9
 800c980:	f001 fd07 	bl	800e392 <finite>
 800c984:	b380      	cbz	r0, 800c9e8 <pow+0x10c>
 800c986:	4630      	mov	r0, r6
 800c988:	4639      	mov	r1, r7
 800c98a:	f001 fd02 	bl	800e392 <finite>
 800c98e:	b358      	cbz	r0, 800c9e8 <pow+0x10c>
 800c990:	4622      	mov	r2, r4
 800c992:	462b      	mov	r3, r5
 800c994:	4620      	mov	r0, r4
 800c996:	4629      	mov	r1, r5
 800c998:	f7f4 f830 	bl	80009fc <__aeabi_dcmpun>
 800c99c:	b160      	cbz	r0, 800c9b8 <pow+0xdc>
 800c99e:	f001 feb3 	bl	800e708 <__errno>
 800c9a2:	2321      	movs	r3, #33	; 0x21
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	6003      	str	r3, [r0, #0]
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	f7f3 feb5 	bl	800071c <__aeabi_ddiv>
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	e7b6      	b.n	800c926 <pow+0x4a>
 800c9b8:	f001 fea6 	bl	800e708 <__errno>
 800c9bc:	2322      	movs	r3, #34	; 0x22
 800c9be:	2200      	movs	r2, #0
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	f7f3 fff0 	bl	80009ac <__aeabi_dcmplt>
 800c9cc:	2400      	movs	r4, #0
 800c9ce:	b148      	cbz	r0, 800c9e4 <pow+0x108>
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f001 fcea 	bl	800e3ac <rint>
 800c9d8:	4632      	mov	r2, r6
 800c9da:	463b      	mov	r3, r7
 800c9dc:	f7f3 ffdc 	bl	8000998 <__aeabi_dcmpeq>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d0c4      	beq.n	800c96e <pow+0x92>
 800c9e4:	4d11      	ldr	r5, [pc, #68]	; (800ca2c <pow+0x150>)
 800c9e6:	e79e      	b.n	800c926 <pow+0x4a>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	f7f3 ffd2 	bl	8000998 <__aeabi_dcmpeq>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d096      	beq.n	800c926 <pow+0x4a>
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	f001 fcc9 	bl	800e392 <finite>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d090      	beq.n	800c926 <pow+0x4a>
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f001 fcc3 	bl	800e392 <finite>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d08a      	beq.n	800c926 <pow+0x4a>
 800ca10:	f001 fe7a 	bl	800e708 <__errno>
 800ca14:	2322      	movs	r3, #34	; 0x22
 800ca16:	2400      	movs	r4, #0
 800ca18:	2500      	movs	r5, #0
 800ca1a:	6003      	str	r3, [r0, #0]
 800ca1c:	e783      	b.n	800c926 <pow+0x4a>
 800ca1e:	2400      	movs	r4, #0
 800ca20:	4d03      	ldr	r5, [pc, #12]	; (800ca30 <pow+0x154>)
 800ca22:	e780      	b.n	800c926 <pow+0x4a>
 800ca24:	2000000d 	.word	0x2000000d
 800ca28:	fff00000 	.word	0xfff00000
 800ca2c:	7ff00000 	.word	0x7ff00000
 800ca30:	3ff00000 	.word	0x3ff00000

0800ca34 <asinf>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4604      	mov	r4, r0
 800ca38:	f000 fe08 	bl	800d64c <__ieee754_asinf>
 800ca3c:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <asinf+0x44>)
 800ca3e:	4605      	mov	r5, r0
 800ca40:	f993 3000 	ldrsb.w	r3, [r3]
 800ca44:	3301      	adds	r3, #1
 800ca46:	d015      	beq.n	800ca74 <asinf+0x40>
 800ca48:	4621      	mov	r1, r4
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f7f4 fb38 	bl	80010c0 <__aeabi_fcmpun>
 800ca50:	b980      	cbnz	r0, 800ca74 <asinf+0x40>
 800ca52:	4620      	mov	r0, r4
 800ca54:	f001 fdba 	bl	800e5cc <fabsf>
 800ca58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ca5c:	f7f4 fb26 	bl	80010ac <__aeabi_fcmpgt>
 800ca60:	b140      	cbz	r0, 800ca74 <asinf+0x40>
 800ca62:	f001 fe51 	bl	800e708 <__errno>
 800ca66:	2321      	movs	r3, #33	; 0x21
 800ca68:	6003      	str	r3, [r0, #0]
 800ca6a:	4804      	ldr	r0, [pc, #16]	; (800ca7c <asinf+0x48>)
 800ca6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca70:	f001 bdf2 	b.w	800e658 <nanf>
 800ca74:	4628      	mov	r0, r5
 800ca76:	bd38      	pop	{r3, r4, r5, pc}
 800ca78:	2000000d 	.word	0x2000000d
 800ca7c:	0800ea68 	.word	0x0800ea68

0800ca80 <sqrtf>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	4605      	mov	r5, r0
 800ca84:	f001 f884 	bl	800db90 <__ieee754_sqrtf>
 800ca88:	4b0d      	ldr	r3, [pc, #52]	; (800cac0 <sqrtf+0x40>)
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	f993 3000 	ldrsb.w	r3, [r3]
 800ca90:	3301      	adds	r3, #1
 800ca92:	d012      	beq.n	800caba <sqrtf+0x3a>
 800ca94:	4629      	mov	r1, r5
 800ca96:	4628      	mov	r0, r5
 800ca98:	f7f4 fb12 	bl	80010c0 <__aeabi_fcmpun>
 800ca9c:	b968      	cbnz	r0, 800caba <sqrtf+0x3a>
 800ca9e:	2100      	movs	r1, #0
 800caa0:	4628      	mov	r0, r5
 800caa2:	f7f4 fae5 	bl	8001070 <__aeabi_fcmplt>
 800caa6:	b140      	cbz	r0, 800caba <sqrtf+0x3a>
 800caa8:	f001 fe2e 	bl	800e708 <__errno>
 800caac:	2321      	movs	r3, #33	; 0x21
 800caae:	2100      	movs	r1, #0
 800cab0:	6003      	str	r3, [r0, #0]
 800cab2:	4608      	mov	r0, r1
 800cab4:	f7f4 f9f2 	bl	8000e9c <__aeabi_fdiv>
 800cab8:	4604      	mov	r4, r0
 800caba:	4620      	mov	r0, r4
 800cabc:	bd38      	pop	{r3, r4, r5, pc}
 800cabe:	bf00      	nop
 800cac0:	2000000d 	.word	0x2000000d
 800cac4:	00000000 	.word	0x00000000

0800cac8 <__ieee754_pow>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	b093      	sub	sp, #76	; 0x4c
 800cace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cad2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800cad6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cada:	ea55 0302 	orrs.w	r3, r5, r2
 800cade:	4607      	mov	r7, r0
 800cae0:	4688      	mov	r8, r1
 800cae2:	f000 84bf 	beq.w	800d464 <__ieee754_pow+0x99c>
 800cae6:	4b7e      	ldr	r3, [pc, #504]	; (800cce0 <__ieee754_pow+0x218>)
 800cae8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800caec:	429c      	cmp	r4, r3
 800caee:	4689      	mov	r9, r1
 800caf0:	4682      	mov	sl, r0
 800caf2:	dc09      	bgt.n	800cb08 <__ieee754_pow+0x40>
 800caf4:	d103      	bne.n	800cafe <__ieee754_pow+0x36>
 800caf6:	b978      	cbnz	r0, 800cb18 <__ieee754_pow+0x50>
 800caf8:	42a5      	cmp	r5, r4
 800cafa:	dd02      	ble.n	800cb02 <__ieee754_pow+0x3a>
 800cafc:	e00c      	b.n	800cb18 <__ieee754_pow+0x50>
 800cafe:	429d      	cmp	r5, r3
 800cb00:	dc02      	bgt.n	800cb08 <__ieee754_pow+0x40>
 800cb02:	429d      	cmp	r5, r3
 800cb04:	d10e      	bne.n	800cb24 <__ieee754_pow+0x5c>
 800cb06:	b16a      	cbz	r2, 800cb24 <__ieee754_pow+0x5c>
 800cb08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cb0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cb10:	ea54 030a 	orrs.w	r3, r4, sl
 800cb14:	f000 84a6 	beq.w	800d464 <__ieee754_pow+0x99c>
 800cb18:	4872      	ldr	r0, [pc, #456]	; (800cce4 <__ieee754_pow+0x21c>)
 800cb1a:	b013      	add	sp, #76	; 0x4c
 800cb1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	f001 bc3e 	b.w	800e3a0 <nan>
 800cb24:	f1b9 0f00 	cmp.w	r9, #0
 800cb28:	da39      	bge.n	800cb9e <__ieee754_pow+0xd6>
 800cb2a:	4b6f      	ldr	r3, [pc, #444]	; (800cce8 <__ieee754_pow+0x220>)
 800cb2c:	429d      	cmp	r5, r3
 800cb2e:	dc54      	bgt.n	800cbda <__ieee754_pow+0x112>
 800cb30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cb34:	429d      	cmp	r5, r3
 800cb36:	f340 84a6 	ble.w	800d486 <__ieee754_pow+0x9be>
 800cb3a:	152b      	asrs	r3, r5, #20
 800cb3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb40:	2b14      	cmp	r3, #20
 800cb42:	dd0f      	ble.n	800cb64 <__ieee754_pow+0x9c>
 800cb44:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cb48:	fa22 f103 	lsr.w	r1, r2, r3
 800cb4c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb50:	4293      	cmp	r3, r2
 800cb52:	f040 8498 	bne.w	800d486 <__ieee754_pow+0x9be>
 800cb56:	f001 0101 	and.w	r1, r1, #1
 800cb5a:	f1c1 0302 	rsb	r3, r1, #2
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	b182      	cbz	r2, 800cb84 <__ieee754_pow+0xbc>
 800cb62:	e05e      	b.n	800cc22 <__ieee754_pow+0x15a>
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	d15a      	bne.n	800cc1e <__ieee754_pow+0x156>
 800cb68:	f1c3 0314 	rsb	r3, r3, #20
 800cb6c:	fa45 f103 	asr.w	r1, r5, r3
 800cb70:	fa01 f303 	lsl.w	r3, r1, r3
 800cb74:	42ab      	cmp	r3, r5
 800cb76:	f040 8483 	bne.w	800d480 <__ieee754_pow+0x9b8>
 800cb7a:	f001 0101 	and.w	r1, r1, #1
 800cb7e:	f1c1 0302 	rsb	r3, r1, #2
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	4b59      	ldr	r3, [pc, #356]	; (800ccec <__ieee754_pow+0x224>)
 800cb86:	429d      	cmp	r5, r3
 800cb88:	d130      	bne.n	800cbec <__ieee754_pow+0x124>
 800cb8a:	2e00      	cmp	r6, #0
 800cb8c:	f280 8474 	bge.w	800d478 <__ieee754_pow+0x9b0>
 800cb90:	463a      	mov	r2, r7
 800cb92:	4643      	mov	r3, r8
 800cb94:	2000      	movs	r0, #0
 800cb96:	4955      	ldr	r1, [pc, #340]	; (800ccec <__ieee754_pow+0x224>)
 800cb98:	f7f3 fdc0 	bl	800071c <__aeabi_ddiv>
 800cb9c:	e02f      	b.n	800cbfe <__ieee754_pow+0x136>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	d13d      	bne.n	800cc22 <__ieee754_pow+0x15a>
 800cba6:	4b4e      	ldr	r3, [pc, #312]	; (800cce0 <__ieee754_pow+0x218>)
 800cba8:	429d      	cmp	r5, r3
 800cbaa:	d1eb      	bne.n	800cb84 <__ieee754_pow+0xbc>
 800cbac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cbb0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cbb4:	ea53 030a 	orrs.w	r3, r3, sl
 800cbb8:	f000 8454 	beq.w	800d464 <__ieee754_pow+0x99c>
 800cbbc:	4b4c      	ldr	r3, [pc, #304]	; (800ccf0 <__ieee754_pow+0x228>)
 800cbbe:	429c      	cmp	r4, r3
 800cbc0:	dd0d      	ble.n	800cbde <__ieee754_pow+0x116>
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	f280 8454 	bge.w	800d470 <__ieee754_pow+0x9a8>
 800cbc8:	f04f 0b00 	mov.w	fp, #0
 800cbcc:	f04f 0c00 	mov.w	ip, #0
 800cbd0:	4658      	mov	r0, fp
 800cbd2:	4661      	mov	r1, ip
 800cbd4:	b013      	add	sp, #76	; 0x4c
 800cbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbda:	2302      	movs	r3, #2
 800cbdc:	e7e0      	b.n	800cba0 <__ieee754_pow+0xd8>
 800cbde:	2e00      	cmp	r6, #0
 800cbe0:	daf2      	bge.n	800cbc8 <__ieee754_pow+0x100>
 800cbe2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800cbe6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800cbea:	e7f1      	b.n	800cbd0 <__ieee754_pow+0x108>
 800cbec:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800cbf0:	d108      	bne.n	800cc04 <__ieee754_pow+0x13c>
 800cbf2:	463a      	mov	r2, r7
 800cbf4:	4643      	mov	r3, r8
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	4641      	mov	r1, r8
 800cbfa:	f7f3 fc65 	bl	80004c8 <__aeabi_dmul>
 800cbfe:	4683      	mov	fp, r0
 800cc00:	468c      	mov	ip, r1
 800cc02:	e7e5      	b.n	800cbd0 <__ieee754_pow+0x108>
 800cc04:	4b3b      	ldr	r3, [pc, #236]	; (800ccf4 <__ieee754_pow+0x22c>)
 800cc06:	429e      	cmp	r6, r3
 800cc08:	d10b      	bne.n	800cc22 <__ieee754_pow+0x15a>
 800cc0a:	f1b9 0f00 	cmp.w	r9, #0
 800cc0e:	db08      	blt.n	800cc22 <__ieee754_pow+0x15a>
 800cc10:	4638      	mov	r0, r7
 800cc12:	4641      	mov	r1, r8
 800cc14:	b013      	add	sp, #76	; 0x4c
 800cc16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1a:	f000 bc6b 	b.w	800d4f4 <__ieee754_sqrt>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	4638      	mov	r0, r7
 800cc24:	4641      	mov	r1, r8
 800cc26:	f001 fbb1 	bl	800e38c <fabs>
 800cc2a:	4683      	mov	fp, r0
 800cc2c:	468c      	mov	ip, r1
 800cc2e:	f1ba 0f00 	cmp.w	sl, #0
 800cc32:	d129      	bne.n	800cc88 <__ieee754_pow+0x1c0>
 800cc34:	b124      	cbz	r4, 800cc40 <__ieee754_pow+0x178>
 800cc36:	4b2d      	ldr	r3, [pc, #180]	; (800ccec <__ieee754_pow+0x224>)
 800cc38:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d123      	bne.n	800cc88 <__ieee754_pow+0x1c0>
 800cc40:	2e00      	cmp	r6, #0
 800cc42:	da07      	bge.n	800cc54 <__ieee754_pow+0x18c>
 800cc44:	465a      	mov	r2, fp
 800cc46:	4663      	mov	r3, ip
 800cc48:	2000      	movs	r0, #0
 800cc4a:	4928      	ldr	r1, [pc, #160]	; (800ccec <__ieee754_pow+0x224>)
 800cc4c:	f7f3 fd66 	bl	800071c <__aeabi_ddiv>
 800cc50:	4683      	mov	fp, r0
 800cc52:	468c      	mov	ip, r1
 800cc54:	f1b9 0f00 	cmp.w	r9, #0
 800cc58:	daba      	bge.n	800cbd0 <__ieee754_pow+0x108>
 800cc5a:	9b00      	ldr	r3, [sp, #0]
 800cc5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cc60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cc64:	4323      	orrs	r3, r4
 800cc66:	d108      	bne.n	800cc7a <__ieee754_pow+0x1b2>
 800cc68:	465a      	mov	r2, fp
 800cc6a:	4663      	mov	r3, ip
 800cc6c:	4658      	mov	r0, fp
 800cc6e:	4661      	mov	r1, ip
 800cc70:	f7f3 fa72 	bl	8000158 <__aeabi_dsub>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	e78e      	b.n	800cb98 <__ieee754_pow+0xd0>
 800cc7a:	9b00      	ldr	r3, [sp, #0]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d1a7      	bne.n	800cbd0 <__ieee754_pow+0x108>
 800cc80:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cc84:	469c      	mov	ip, r3
 800cc86:	e7a3      	b.n	800cbd0 <__ieee754_pow+0x108>
 800cc88:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc92:	9b00      	ldr	r3, [sp, #0]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	d104      	bne.n	800cca2 <__ieee754_pow+0x1da>
 800cc98:	463a      	mov	r2, r7
 800cc9a:	4643      	mov	r3, r8
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	4641      	mov	r1, r8
 800cca0:	e7e6      	b.n	800cc70 <__ieee754_pow+0x1a8>
 800cca2:	4b15      	ldr	r3, [pc, #84]	; (800ccf8 <__ieee754_pow+0x230>)
 800cca4:	429d      	cmp	r5, r3
 800cca6:	f340 80f9 	ble.w	800ce9c <__ieee754_pow+0x3d4>
 800ccaa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ccae:	429d      	cmp	r5, r3
 800ccb0:	4b0f      	ldr	r3, [pc, #60]	; (800ccf0 <__ieee754_pow+0x228>)
 800ccb2:	dd09      	ble.n	800ccc8 <__ieee754_pow+0x200>
 800ccb4:	429c      	cmp	r4, r3
 800ccb6:	dc0c      	bgt.n	800ccd2 <__ieee754_pow+0x20a>
 800ccb8:	2e00      	cmp	r6, #0
 800ccba:	da85      	bge.n	800cbc8 <__ieee754_pow+0x100>
 800ccbc:	a306      	add	r3, pc, #24	; (adr r3, 800ccd8 <__ieee754_pow+0x210>)
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	e798      	b.n	800cbfa <__ieee754_pow+0x132>
 800ccc8:	429c      	cmp	r4, r3
 800ccca:	dbf5      	blt.n	800ccb8 <__ieee754_pow+0x1f0>
 800cccc:	4b07      	ldr	r3, [pc, #28]	; (800ccec <__ieee754_pow+0x224>)
 800ccce:	429c      	cmp	r4, r3
 800ccd0:	dd14      	ble.n	800ccfc <__ieee754_pow+0x234>
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	dcf2      	bgt.n	800ccbc <__ieee754_pow+0x1f4>
 800ccd6:	e777      	b.n	800cbc8 <__ieee754_pow+0x100>
 800ccd8:	8800759c 	.word	0x8800759c
 800ccdc:	7e37e43c 	.word	0x7e37e43c
 800cce0:	7ff00000 	.word	0x7ff00000
 800cce4:	0800ea68 	.word	0x0800ea68
 800cce8:	433fffff 	.word	0x433fffff
 800ccec:	3ff00000 	.word	0x3ff00000
 800ccf0:	3fefffff 	.word	0x3fefffff
 800ccf4:	3fe00000 	.word	0x3fe00000
 800ccf8:	41e00000 	.word	0x41e00000
 800ccfc:	4661      	mov	r1, ip
 800ccfe:	2200      	movs	r2, #0
 800cd00:	4658      	mov	r0, fp
 800cd02:	4b61      	ldr	r3, [pc, #388]	; (800ce88 <__ieee754_pow+0x3c0>)
 800cd04:	f7f3 fa28 	bl	8000158 <__aeabi_dsub>
 800cd08:	a355      	add	r3, pc, #340	; (adr r3, 800ce60 <__ieee754_pow+0x398>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	4604      	mov	r4, r0
 800cd10:	460d      	mov	r5, r1
 800cd12:	f7f3 fbd9 	bl	80004c8 <__aeabi_dmul>
 800cd16:	a354      	add	r3, pc, #336	; (adr r3, 800ce68 <__ieee754_pow+0x3a0>)
 800cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	460f      	mov	r7, r1
 800cd20:	4620      	mov	r0, r4
 800cd22:	4629      	mov	r1, r5
 800cd24:	f7f3 fbd0 	bl	80004c8 <__aeabi_dmul>
 800cd28:	2200      	movs	r2, #0
 800cd2a:	4682      	mov	sl, r0
 800cd2c:	468b      	mov	fp, r1
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	4b56      	ldr	r3, [pc, #344]	; (800ce8c <__ieee754_pow+0x3c4>)
 800cd34:	f7f3 fbc8 	bl	80004c8 <__aeabi_dmul>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	a14c      	add	r1, pc, #304	; (adr r1, 800ce70 <__ieee754_pow+0x3a8>)
 800cd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd42:	f7f3 fa09 	bl	8000158 <__aeabi_dsub>
 800cd46:	4622      	mov	r2, r4
 800cd48:	462b      	mov	r3, r5
 800cd4a:	f7f3 fbbd 	bl	80004c8 <__aeabi_dmul>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	2000      	movs	r0, #0
 800cd54:	494e      	ldr	r1, [pc, #312]	; (800ce90 <__ieee754_pow+0x3c8>)
 800cd56:	f7f3 f9ff 	bl	8000158 <__aeabi_dsub>
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	4680      	mov	r8, r0
 800cd60:	4689      	mov	r9, r1
 800cd62:	4620      	mov	r0, r4
 800cd64:	4629      	mov	r1, r5
 800cd66:	f7f3 fbaf 	bl	80004c8 <__aeabi_dmul>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4640      	mov	r0, r8
 800cd70:	4649      	mov	r1, r9
 800cd72:	f7f3 fba9 	bl	80004c8 <__aeabi_dmul>
 800cd76:	a340      	add	r3, pc, #256	; (adr r3, 800ce78 <__ieee754_pow+0x3b0>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fba4 	bl	80004c8 <__aeabi_dmul>
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	4650      	mov	r0, sl
 800cd86:	4659      	mov	r1, fp
 800cd88:	f7f3 f9e6 	bl	8000158 <__aeabi_dsub>
 800cd8c:	f04f 0a00 	mov.w	sl, #0
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4604      	mov	r4, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 f9de 	bl	800015c <__adddf3>
 800cda0:	4632      	mov	r2, r6
 800cda2:	463b      	mov	r3, r7
 800cda4:	4650      	mov	r0, sl
 800cda6:	468b      	mov	fp, r1
 800cda8:	f7f3 f9d6 	bl	8000158 <__aeabi_dsub>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	f7f3 f9d0 	bl	8000158 <__aeabi_dsub>
 800cdb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cdbc:	9b00      	ldr	r3, [sp, #0]
 800cdbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	f04f 0600 	mov.w	r6, #0
 800cdc8:	f04f 0200 	mov.w	r2, #0
 800cdcc:	bf0c      	ite	eq
 800cdce:	4b31      	ldreq	r3, [pc, #196]	; (800ce94 <__ieee754_pow+0x3cc>)
 800cdd0:	4b2d      	ldrne	r3, [pc, #180]	; (800ce88 <__ieee754_pow+0x3c0>)
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdda:	e9cd 2300 	strd	r2, r3, [sp]
 800cdde:	4632      	mov	r2, r6
 800cde0:	463b      	mov	r3, r7
 800cde2:	f7f3 f9b9 	bl	8000158 <__aeabi_dsub>
 800cde6:	4652      	mov	r2, sl
 800cde8:	465b      	mov	r3, fp
 800cdea:	f7f3 fb6d 	bl	80004c8 <__aeabi_dmul>
 800cdee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdf2:	4680      	mov	r8, r0
 800cdf4:	4689      	mov	r9, r1
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f7f3 fb65 	bl	80004c8 <__aeabi_dmul>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	460b      	mov	r3, r1
 800ce02:	4640      	mov	r0, r8
 800ce04:	4649      	mov	r1, r9
 800ce06:	f7f3 f9a9 	bl	800015c <__adddf3>
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	463b      	mov	r3, r7
 800ce0e:	4680      	mov	r8, r0
 800ce10:	4689      	mov	r9, r1
 800ce12:	4650      	mov	r0, sl
 800ce14:	4659      	mov	r1, fp
 800ce16:	f7f3 fb57 	bl	80004c8 <__aeabi_dmul>
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	460d      	mov	r5, r1
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4602      	mov	r2, r0
 800ce22:	4649      	mov	r1, r9
 800ce24:	4640      	mov	r0, r8
 800ce26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ce2a:	f7f3 f997 	bl	800015c <__adddf3>
 800ce2e:	4b1a      	ldr	r3, [pc, #104]	; (800ce98 <__ieee754_pow+0x3d0>)
 800ce30:	4682      	mov	sl, r0
 800ce32:	4299      	cmp	r1, r3
 800ce34:	460f      	mov	r7, r1
 800ce36:	460e      	mov	r6, r1
 800ce38:	f340 82ed 	ble.w	800d416 <__ieee754_pow+0x94e>
 800ce3c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce40:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce44:	4303      	orrs	r3, r0
 800ce46:	f000 81e7 	beq.w	800d218 <__ieee754_pow+0x750>
 800ce4a:	a30d      	add	r3, pc, #52	; (adr r3, 800ce80 <__ieee754_pow+0x3b8>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce54:	f7f3 fb38 	bl	80004c8 <__aeabi_dmul>
 800ce58:	a309      	add	r3, pc, #36	; (adr r3, 800ce80 <__ieee754_pow+0x3b8>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	e6cc      	b.n	800cbfa <__ieee754_pow+0x132>
 800ce60:	60000000 	.word	0x60000000
 800ce64:	3ff71547 	.word	0x3ff71547
 800ce68:	f85ddf44 	.word	0xf85ddf44
 800ce6c:	3e54ae0b 	.word	0x3e54ae0b
 800ce70:	55555555 	.word	0x55555555
 800ce74:	3fd55555 	.word	0x3fd55555
 800ce78:	652b82fe 	.word	0x652b82fe
 800ce7c:	3ff71547 	.word	0x3ff71547
 800ce80:	8800759c 	.word	0x8800759c
 800ce84:	7e37e43c 	.word	0x7e37e43c
 800ce88:	3ff00000 	.word	0x3ff00000
 800ce8c:	3fd00000 	.word	0x3fd00000
 800ce90:	3fe00000 	.word	0x3fe00000
 800ce94:	bff00000 	.word	0xbff00000
 800ce98:	408fffff 	.word	0x408fffff
 800ce9c:	4bd4      	ldr	r3, [pc, #848]	; (800d1f0 <__ieee754_pow+0x728>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	ea09 0303 	and.w	r3, r9, r3
 800cea4:	b943      	cbnz	r3, 800ceb8 <__ieee754_pow+0x3f0>
 800cea6:	4658      	mov	r0, fp
 800cea8:	4661      	mov	r1, ip
 800ceaa:	4bd2      	ldr	r3, [pc, #840]	; (800d1f4 <__ieee754_pow+0x72c>)
 800ceac:	f7f3 fb0c 	bl	80004c8 <__aeabi_dmul>
 800ceb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ceb4:	4683      	mov	fp, r0
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	1523      	asrs	r3, r4, #20
 800ceba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cebe:	4413      	add	r3, r2
 800cec0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cec2:	4bcd      	ldr	r3, [pc, #820]	; (800d1f8 <__ieee754_pow+0x730>)
 800cec4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cec8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cecc:	429c      	cmp	r4, r3
 800cece:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ced2:	dd08      	ble.n	800cee6 <__ieee754_pow+0x41e>
 800ced4:	4bc9      	ldr	r3, [pc, #804]	; (800d1fc <__ieee754_pow+0x734>)
 800ced6:	429c      	cmp	r4, r3
 800ced8:	f340 819c 	ble.w	800d214 <__ieee754_pow+0x74c>
 800cedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cede:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cee2:	3301      	adds	r3, #1
 800cee4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cee6:	2600      	movs	r6, #0
 800cee8:	00f3      	lsls	r3, r6, #3
 800ceea:	930d      	str	r3, [sp, #52]	; 0x34
 800ceec:	4bc4      	ldr	r3, [pc, #784]	; (800d200 <__ieee754_pow+0x738>)
 800ceee:	4658      	mov	r0, fp
 800cef0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cef4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cef8:	4629      	mov	r1, r5
 800cefa:	461a      	mov	r2, r3
 800cefc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800cf00:	4623      	mov	r3, r4
 800cf02:	f7f3 f929 	bl	8000158 <__aeabi_dsub>
 800cf06:	46da      	mov	sl, fp
 800cf08:	462b      	mov	r3, r5
 800cf0a:	4652      	mov	r2, sl
 800cf0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cf10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf14:	f7f3 f922 	bl	800015c <__adddf3>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	49b9      	ldr	r1, [pc, #740]	; (800d204 <__ieee754_pow+0x73c>)
 800cf20:	f7f3 fbfc 	bl	800071c <__aeabi_ddiv>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cf2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cf30:	f7f3 faca 	bl	80004c8 <__aeabi_dmul>
 800cf34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf38:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800cf3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cf40:	2300      	movs	r3, #0
 800cf42:	2200      	movs	r2, #0
 800cf44:	46ab      	mov	fp, r5
 800cf46:	106d      	asrs	r5, r5, #1
 800cf48:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cf52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cf56:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	4649      	mov	r1, r9
 800cf5e:	4614      	mov	r4, r2
 800cf60:	461d      	mov	r5, r3
 800cf62:	f7f3 fab1 	bl	80004c8 <__aeabi_dmul>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cf6e:	f7f3 f8f3 	bl	8000158 <__aeabi_dsub>
 800cf72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cf76:	4606      	mov	r6, r0
 800cf78:	460f      	mov	r7, r1
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	f7f3 f8eb 	bl	8000158 <__aeabi_dsub>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	4650      	mov	r0, sl
 800cf88:	4659      	mov	r1, fp
 800cf8a:	f7f3 f8e5 	bl	8000158 <__aeabi_dsub>
 800cf8e:	4642      	mov	r2, r8
 800cf90:	464b      	mov	r3, r9
 800cf92:	f7f3 fa99 	bl	80004c8 <__aeabi_dmul>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	4639      	mov	r1, r7
 800cf9e:	f7f3 f8db 	bl	8000158 <__aeabi_dsub>
 800cfa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cfa6:	f7f3 fa8f 	bl	80004c8 <__aeabi_dmul>
 800cfaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f7f3 fa87 	bl	80004c8 <__aeabi_dmul>
 800cfba:	a37b      	add	r3, pc, #492	; (adr r3, 800d1a8 <__ieee754_pow+0x6e0>)
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	460d      	mov	r5, r1
 800cfc4:	f7f3 fa80 	bl	80004c8 <__aeabi_dmul>
 800cfc8:	a379      	add	r3, pc, #484	; (adr r3, 800d1b0 <__ieee754_pow+0x6e8>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 f8c5 	bl	800015c <__adddf3>
 800cfd2:	4622      	mov	r2, r4
 800cfd4:	462b      	mov	r3, r5
 800cfd6:	f7f3 fa77 	bl	80004c8 <__aeabi_dmul>
 800cfda:	a377      	add	r3, pc, #476	; (adr r3, 800d1b8 <__ieee754_pow+0x6f0>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f7f3 f8bc 	bl	800015c <__adddf3>
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	462b      	mov	r3, r5
 800cfe8:	f7f3 fa6e 	bl	80004c8 <__aeabi_dmul>
 800cfec:	a374      	add	r3, pc, #464	; (adr r3, 800d1c0 <__ieee754_pow+0x6f8>)
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	f7f3 f8b3 	bl	800015c <__adddf3>
 800cff6:	4622      	mov	r2, r4
 800cff8:	462b      	mov	r3, r5
 800cffa:	f7f3 fa65 	bl	80004c8 <__aeabi_dmul>
 800cffe:	a372      	add	r3, pc, #456	; (adr r3, 800d1c8 <__ieee754_pow+0x700>)
 800d000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d004:	f7f3 f8aa 	bl	800015c <__adddf3>
 800d008:	4622      	mov	r2, r4
 800d00a:	462b      	mov	r3, r5
 800d00c:	f7f3 fa5c 	bl	80004c8 <__aeabi_dmul>
 800d010:	a36f      	add	r3, pc, #444	; (adr r3, 800d1d0 <__ieee754_pow+0x708>)
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f7f3 f8a1 	bl	800015c <__adddf3>
 800d01a:	4622      	mov	r2, r4
 800d01c:	4606      	mov	r6, r0
 800d01e:	460f      	mov	r7, r1
 800d020:	462b      	mov	r3, r5
 800d022:	4620      	mov	r0, r4
 800d024:	4629      	mov	r1, r5
 800d026:	f7f3 fa4f 	bl	80004c8 <__aeabi_dmul>
 800d02a:	4602      	mov	r2, r0
 800d02c:	460b      	mov	r3, r1
 800d02e:	4630      	mov	r0, r6
 800d030:	4639      	mov	r1, r7
 800d032:	f7f3 fa49 	bl	80004c8 <__aeabi_dmul>
 800d036:	4604      	mov	r4, r0
 800d038:	460d      	mov	r5, r1
 800d03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03e:	4642      	mov	r2, r8
 800d040:	464b      	mov	r3, r9
 800d042:	f7f3 f88b 	bl	800015c <__adddf3>
 800d046:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d04a:	f7f3 fa3d 	bl	80004c8 <__aeabi_dmul>
 800d04e:	4622      	mov	r2, r4
 800d050:	462b      	mov	r3, r5
 800d052:	f7f3 f883 	bl	800015c <__adddf3>
 800d056:	4642      	mov	r2, r8
 800d058:	4606      	mov	r6, r0
 800d05a:	460f      	mov	r7, r1
 800d05c:	464b      	mov	r3, r9
 800d05e:	4640      	mov	r0, r8
 800d060:	4649      	mov	r1, r9
 800d062:	f7f3 fa31 	bl	80004c8 <__aeabi_dmul>
 800d066:	2200      	movs	r2, #0
 800d068:	4b67      	ldr	r3, [pc, #412]	; (800d208 <__ieee754_pow+0x740>)
 800d06a:	4682      	mov	sl, r0
 800d06c:	468b      	mov	fp, r1
 800d06e:	f7f3 f875 	bl	800015c <__adddf3>
 800d072:	4632      	mov	r2, r6
 800d074:	463b      	mov	r3, r7
 800d076:	f7f3 f871 	bl	800015c <__adddf3>
 800d07a:	9c04      	ldr	r4, [sp, #16]
 800d07c:	460d      	mov	r5, r1
 800d07e:	4622      	mov	r2, r4
 800d080:	460b      	mov	r3, r1
 800d082:	4640      	mov	r0, r8
 800d084:	4649      	mov	r1, r9
 800d086:	f7f3 fa1f 	bl	80004c8 <__aeabi_dmul>
 800d08a:	2200      	movs	r2, #0
 800d08c:	4680      	mov	r8, r0
 800d08e:	4689      	mov	r9, r1
 800d090:	4620      	mov	r0, r4
 800d092:	4629      	mov	r1, r5
 800d094:	4b5c      	ldr	r3, [pc, #368]	; (800d208 <__ieee754_pow+0x740>)
 800d096:	f7f3 f85f 	bl	8000158 <__aeabi_dsub>
 800d09a:	4652      	mov	r2, sl
 800d09c:	465b      	mov	r3, fp
 800d09e:	f7f3 f85b 	bl	8000158 <__aeabi_dsub>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 f855 	bl	8000158 <__aeabi_dsub>
 800d0ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0b2:	f7f3 fa09 	bl	80004c8 <__aeabi_dmul>
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	460f      	mov	r7, r1
 800d0bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0c0:	462b      	mov	r3, r5
 800d0c2:	f7f3 fa01 	bl	80004c8 <__aeabi_dmul>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	f7f3 f845 	bl	800015c <__adddf3>
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	460f      	mov	r7, r1
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	460b      	mov	r3, r1
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	f7f3 f83d 	bl	800015c <__adddf3>
 800d0e2:	a33d      	add	r3, pc, #244	; (adr r3, 800d1d8 <__ieee754_pow+0x710>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	9c04      	ldr	r4, [sp, #16]
 800d0ea:	460d      	mov	r5, r1
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f7f3 f9eb 	bl	80004c8 <__aeabi_dmul>
 800d0f2:	4642      	mov	r2, r8
 800d0f4:	464b      	mov	r3, r9
 800d0f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7f3 f82b 	bl	8000158 <__aeabi_dsub>
 800d102:	4602      	mov	r2, r0
 800d104:	460b      	mov	r3, r1
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 f825 	bl	8000158 <__aeabi_dsub>
 800d10e:	a334      	add	r3, pc, #208	; (adr r3, 800d1e0 <__ieee754_pow+0x718>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 f9d8 	bl	80004c8 <__aeabi_dmul>
 800d118:	a333      	add	r3, pc, #204	; (adr r3, 800d1e8 <__ieee754_pow+0x720>)
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	4606      	mov	r6, r0
 800d120:	460f      	mov	r7, r1
 800d122:	4620      	mov	r0, r4
 800d124:	4629      	mov	r1, r5
 800d126:	f7f3 f9cf 	bl	80004c8 <__aeabi_dmul>
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	4630      	mov	r0, r6
 800d130:	4639      	mov	r1, r7
 800d132:	f7f3 f813 	bl	800015c <__adddf3>
 800d136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d138:	4b34      	ldr	r3, [pc, #208]	; (800d20c <__ieee754_pow+0x744>)
 800d13a:	4413      	add	r3, r2
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f7f3 f80c 	bl	800015c <__adddf3>
 800d144:	4680      	mov	r8, r0
 800d146:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d148:	4689      	mov	r9, r1
 800d14a:	f7f3 f953 	bl	80003f4 <__aeabi_i2d>
 800d14e:	4604      	mov	r4, r0
 800d150:	460d      	mov	r5, r1
 800d152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d154:	4b2e      	ldr	r3, [pc, #184]	; (800d210 <__ieee754_pow+0x748>)
 800d156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d15a:	4413      	add	r3, r2
 800d15c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d160:	4642      	mov	r2, r8
 800d162:	464b      	mov	r3, r9
 800d164:	f7f2 fffa 	bl	800015c <__adddf3>
 800d168:	4632      	mov	r2, r6
 800d16a:	463b      	mov	r3, r7
 800d16c:	f7f2 fff6 	bl	800015c <__adddf3>
 800d170:	4622      	mov	r2, r4
 800d172:	462b      	mov	r3, r5
 800d174:	f7f2 fff2 	bl	800015c <__adddf3>
 800d178:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d17c:	4622      	mov	r2, r4
 800d17e:	462b      	mov	r3, r5
 800d180:	4650      	mov	r0, sl
 800d182:	468b      	mov	fp, r1
 800d184:	f7f2 ffe8 	bl	8000158 <__aeabi_dsub>
 800d188:	4632      	mov	r2, r6
 800d18a:	463b      	mov	r3, r7
 800d18c:	f7f2 ffe4 	bl	8000158 <__aeabi_dsub>
 800d190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d194:	f7f2 ffe0 	bl	8000158 <__aeabi_dsub>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4640      	mov	r0, r8
 800d19e:	4649      	mov	r1, r9
 800d1a0:	e608      	b.n	800cdb4 <__ieee754_pow+0x2ec>
 800d1a2:	bf00      	nop
 800d1a4:	f3af 8000 	nop.w
 800d1a8:	4a454eef 	.word	0x4a454eef
 800d1ac:	3fca7e28 	.word	0x3fca7e28
 800d1b0:	93c9db65 	.word	0x93c9db65
 800d1b4:	3fcd864a 	.word	0x3fcd864a
 800d1b8:	a91d4101 	.word	0xa91d4101
 800d1bc:	3fd17460 	.word	0x3fd17460
 800d1c0:	518f264d 	.word	0x518f264d
 800d1c4:	3fd55555 	.word	0x3fd55555
 800d1c8:	db6fabff 	.word	0xdb6fabff
 800d1cc:	3fdb6db6 	.word	0x3fdb6db6
 800d1d0:	33333303 	.word	0x33333303
 800d1d4:	3fe33333 	.word	0x3fe33333
 800d1d8:	e0000000 	.word	0xe0000000
 800d1dc:	3feec709 	.word	0x3feec709
 800d1e0:	dc3a03fd 	.word	0xdc3a03fd
 800d1e4:	3feec709 	.word	0x3feec709
 800d1e8:	145b01f5 	.word	0x145b01f5
 800d1ec:	be3e2fe0 	.word	0xbe3e2fe0
 800d1f0:	7ff00000 	.word	0x7ff00000
 800d1f4:	43400000 	.word	0x43400000
 800d1f8:	0003988e 	.word	0x0003988e
 800d1fc:	000bb679 	.word	0x000bb679
 800d200:	0800ea70 	.word	0x0800ea70
 800d204:	3ff00000 	.word	0x3ff00000
 800d208:	40080000 	.word	0x40080000
 800d20c:	0800ea90 	.word	0x0800ea90
 800d210:	0800ea80 	.word	0x0800ea80
 800d214:	2601      	movs	r6, #1
 800d216:	e667      	b.n	800cee8 <__ieee754_pow+0x420>
 800d218:	a39d      	add	r3, pc, #628	; (adr r3, 800d490 <__ieee754_pow+0x9c8>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	4640      	mov	r0, r8
 800d220:	4649      	mov	r1, r9
 800d222:	f7f2 ff9b 	bl	800015c <__adddf3>
 800d226:	4622      	mov	r2, r4
 800d228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d22c:	462b      	mov	r3, r5
 800d22e:	4650      	mov	r0, sl
 800d230:	4639      	mov	r1, r7
 800d232:	f7f2 ff91 	bl	8000158 <__aeabi_dsub>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d23e:	f7f3 fbd3 	bl	80009e8 <__aeabi_dcmpgt>
 800d242:	2800      	cmp	r0, #0
 800d244:	f47f ae01 	bne.w	800ce4a <__ieee754_pow+0x382>
 800d248:	4aa5      	ldr	r2, [pc, #660]	; (800d4e0 <__ieee754_pow+0xa18>)
 800d24a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d24e:	4293      	cmp	r3, r2
 800d250:	f340 8103 	ble.w	800d45a <__ieee754_pow+0x992>
 800d254:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d258:	2000      	movs	r0, #0
 800d25a:	151b      	asrs	r3, r3, #20
 800d25c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d260:	fa4a f303 	asr.w	r3, sl, r3
 800d264:	4433      	add	r3, r6
 800d266:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d26a:	4f9e      	ldr	r7, [pc, #632]	; (800d4e4 <__ieee754_pow+0xa1c>)
 800d26c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d270:	4117      	asrs	r7, r2
 800d272:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d276:	ea23 0107 	bic.w	r1, r3, r7
 800d27a:	f1c2 0214 	rsb	r2, r2, #20
 800d27e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d282:	460b      	mov	r3, r1
 800d284:	fa4a fa02 	asr.w	sl, sl, r2
 800d288:	2e00      	cmp	r6, #0
 800d28a:	4602      	mov	r2, r0
 800d28c:	4629      	mov	r1, r5
 800d28e:	4620      	mov	r0, r4
 800d290:	bfb8      	it	lt
 800d292:	f1ca 0a00 	rsblt	sl, sl, #0
 800d296:	f7f2 ff5f 	bl	8000158 <__aeabi_dsub>
 800d29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2a2:	2400      	movs	r4, #0
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	f7f2 ff58 	bl	800015c <__adddf3>
 800d2ac:	a37a      	add	r3, pc, #488	; (adr r3, 800d498 <__ieee754_pow+0x9d0>)
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	460d      	mov	r5, r1
 800d2b6:	f7f3 f907 	bl	80004c8 <__aeabi_dmul>
 800d2ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2be:	4606      	mov	r6, r0
 800d2c0:	460f      	mov	r7, r1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7f2 ff47 	bl	8000158 <__aeabi_dsub>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	4649      	mov	r1, r9
 800d2d2:	f7f2 ff41 	bl	8000158 <__aeabi_dsub>
 800d2d6:	a372      	add	r3, pc, #456	; (adr r3, 800d4a0 <__ieee754_pow+0x9d8>)
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	f7f3 f8f4 	bl	80004c8 <__aeabi_dmul>
 800d2e0:	a371      	add	r3, pc, #452	; (adr r3, 800d4a8 <__ieee754_pow+0x9e0>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	4680      	mov	r8, r0
 800d2e8:	4689      	mov	r9, r1
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	f7f3 f8eb 	bl	80004c8 <__aeabi_dmul>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	f7f2 ff2f 	bl	800015c <__adddf3>
 800d2fe:	4604      	mov	r4, r0
 800d300:	460d      	mov	r5, r1
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4630      	mov	r0, r6
 800d308:	4639      	mov	r1, r7
 800d30a:	f7f2 ff27 	bl	800015c <__adddf3>
 800d30e:	4632      	mov	r2, r6
 800d310:	463b      	mov	r3, r7
 800d312:	4680      	mov	r8, r0
 800d314:	4689      	mov	r9, r1
 800d316:	f7f2 ff1f 	bl	8000158 <__aeabi_dsub>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	4620      	mov	r0, r4
 800d320:	4629      	mov	r1, r5
 800d322:	f7f2 ff19 	bl	8000158 <__aeabi_dsub>
 800d326:	4642      	mov	r2, r8
 800d328:	4606      	mov	r6, r0
 800d32a:	460f      	mov	r7, r1
 800d32c:	464b      	mov	r3, r9
 800d32e:	4640      	mov	r0, r8
 800d330:	4649      	mov	r1, r9
 800d332:	f7f3 f8c9 	bl	80004c8 <__aeabi_dmul>
 800d336:	a35e      	add	r3, pc, #376	; (adr r3, 800d4b0 <__ieee754_pow+0x9e8>)
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	4604      	mov	r4, r0
 800d33e:	460d      	mov	r5, r1
 800d340:	f7f3 f8c2 	bl	80004c8 <__aeabi_dmul>
 800d344:	a35c      	add	r3, pc, #368	; (adr r3, 800d4b8 <__ieee754_pow+0x9f0>)
 800d346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34a:	f7f2 ff05 	bl	8000158 <__aeabi_dsub>
 800d34e:	4622      	mov	r2, r4
 800d350:	462b      	mov	r3, r5
 800d352:	f7f3 f8b9 	bl	80004c8 <__aeabi_dmul>
 800d356:	a35a      	add	r3, pc, #360	; (adr r3, 800d4c0 <__ieee754_pow+0x9f8>)
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	f7f2 fefe 	bl	800015c <__adddf3>
 800d360:	4622      	mov	r2, r4
 800d362:	462b      	mov	r3, r5
 800d364:	f7f3 f8b0 	bl	80004c8 <__aeabi_dmul>
 800d368:	a357      	add	r3, pc, #348	; (adr r3, 800d4c8 <__ieee754_pow+0xa00>)
 800d36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36e:	f7f2 fef3 	bl	8000158 <__aeabi_dsub>
 800d372:	4622      	mov	r2, r4
 800d374:	462b      	mov	r3, r5
 800d376:	f7f3 f8a7 	bl	80004c8 <__aeabi_dmul>
 800d37a:	a355      	add	r3, pc, #340	; (adr r3, 800d4d0 <__ieee754_pow+0xa08>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f2 feec 	bl	800015c <__adddf3>
 800d384:	4622      	mov	r2, r4
 800d386:	462b      	mov	r3, r5
 800d388:	f7f3 f89e 	bl	80004c8 <__aeabi_dmul>
 800d38c:	4602      	mov	r2, r0
 800d38e:	460b      	mov	r3, r1
 800d390:	4640      	mov	r0, r8
 800d392:	4649      	mov	r1, r9
 800d394:	f7f2 fee0 	bl	8000158 <__aeabi_dsub>
 800d398:	4604      	mov	r4, r0
 800d39a:	460d      	mov	r5, r1
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4640      	mov	r0, r8
 800d3a2:	4649      	mov	r1, r9
 800d3a4:	f7f3 f890 	bl	80004c8 <__aeabi_dmul>
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	f7f2 fecf 	bl	8000158 <__aeabi_dsub>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	460b      	mov	r3, r1
 800d3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3c2:	f7f3 f9ab 	bl	800071c <__aeabi_ddiv>
 800d3c6:	4632      	mov	r2, r6
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	463b      	mov	r3, r7
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	4649      	mov	r1, r9
 800d3d2:	f7f3 f879 	bl	80004c8 <__aeabi_dmul>
 800d3d6:	4632      	mov	r2, r6
 800d3d8:	463b      	mov	r3, r7
 800d3da:	f7f2 febf 	bl	800015c <__adddf3>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	f7f2 feb7 	bl	8000158 <__aeabi_dsub>
 800d3ea:	4642      	mov	r2, r8
 800d3ec:	464b      	mov	r3, r9
 800d3ee:	f7f2 feb3 	bl	8000158 <__aeabi_dsub>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	493b      	ldr	r1, [pc, #236]	; (800d4e8 <__ieee754_pow+0xa20>)
 800d3fa:	f7f2 fead 	bl	8000158 <__aeabi_dsub>
 800d3fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d402:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d406:	da2b      	bge.n	800d460 <__ieee754_pow+0x998>
 800d408:	4652      	mov	r2, sl
 800d40a:	f001 f859 	bl	800e4c0 <scalbn>
 800d40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d412:	f7ff bbf2 	b.w	800cbfa <__ieee754_pow+0x132>
 800d416:	4b35      	ldr	r3, [pc, #212]	; (800d4ec <__ieee754_pow+0xa24>)
 800d418:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d41c:	429f      	cmp	r7, r3
 800d41e:	f77f af13 	ble.w	800d248 <__ieee754_pow+0x780>
 800d422:	4b33      	ldr	r3, [pc, #204]	; (800d4f0 <__ieee754_pow+0xa28>)
 800d424:	440b      	add	r3, r1
 800d426:	4303      	orrs	r3, r0
 800d428:	d00b      	beq.n	800d442 <__ieee754_pow+0x97a>
 800d42a:	a32b      	add	r3, pc, #172	; (adr r3, 800d4d8 <__ieee754_pow+0xa10>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d434:	f7f3 f848 	bl	80004c8 <__aeabi_dmul>
 800d438:	a327      	add	r3, pc, #156	; (adr r3, 800d4d8 <__ieee754_pow+0xa10>)
 800d43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43e:	f7ff bbdc 	b.w	800cbfa <__ieee754_pow+0x132>
 800d442:	4622      	mov	r2, r4
 800d444:	462b      	mov	r3, r5
 800d446:	f7f2 fe87 	bl	8000158 <__aeabi_dsub>
 800d44a:	4642      	mov	r2, r8
 800d44c:	464b      	mov	r3, r9
 800d44e:	f7f3 fac1 	bl	80009d4 <__aeabi_dcmpge>
 800d452:	2800      	cmp	r0, #0
 800d454:	f43f aef8 	beq.w	800d248 <__ieee754_pow+0x780>
 800d458:	e7e7      	b.n	800d42a <__ieee754_pow+0x962>
 800d45a:	f04f 0a00 	mov.w	sl, #0
 800d45e:	e71e      	b.n	800d29e <__ieee754_pow+0x7d6>
 800d460:	4621      	mov	r1, r4
 800d462:	e7d4      	b.n	800d40e <__ieee754_pow+0x946>
 800d464:	f04f 0b00 	mov.w	fp, #0
 800d468:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d4e8 <__ieee754_pow+0xa20>
 800d46c:	f7ff bbb0 	b.w	800cbd0 <__ieee754_pow+0x108>
 800d470:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d474:	f7ff bbac 	b.w	800cbd0 <__ieee754_pow+0x108>
 800d478:	4638      	mov	r0, r7
 800d47a:	4641      	mov	r1, r8
 800d47c:	f7ff bbbf 	b.w	800cbfe <__ieee754_pow+0x136>
 800d480:	9200      	str	r2, [sp, #0]
 800d482:	f7ff bb7f 	b.w	800cb84 <__ieee754_pow+0xbc>
 800d486:	2300      	movs	r3, #0
 800d488:	f7ff bb69 	b.w	800cb5e <__ieee754_pow+0x96>
 800d48c:	f3af 8000 	nop.w
 800d490:	652b82fe 	.word	0x652b82fe
 800d494:	3c971547 	.word	0x3c971547
 800d498:	00000000 	.word	0x00000000
 800d49c:	3fe62e43 	.word	0x3fe62e43
 800d4a0:	fefa39ef 	.word	0xfefa39ef
 800d4a4:	3fe62e42 	.word	0x3fe62e42
 800d4a8:	0ca86c39 	.word	0x0ca86c39
 800d4ac:	be205c61 	.word	0xbe205c61
 800d4b0:	72bea4d0 	.word	0x72bea4d0
 800d4b4:	3e663769 	.word	0x3e663769
 800d4b8:	c5d26bf1 	.word	0xc5d26bf1
 800d4bc:	3ebbbd41 	.word	0x3ebbbd41
 800d4c0:	af25de2c 	.word	0xaf25de2c
 800d4c4:	3f11566a 	.word	0x3f11566a
 800d4c8:	16bebd93 	.word	0x16bebd93
 800d4cc:	3f66c16c 	.word	0x3f66c16c
 800d4d0:	5555553e 	.word	0x5555553e
 800d4d4:	3fc55555 	.word	0x3fc55555
 800d4d8:	c2f8f359 	.word	0xc2f8f359
 800d4dc:	01a56e1f 	.word	0x01a56e1f
 800d4e0:	3fe00000 	.word	0x3fe00000
 800d4e4:	000fffff 	.word	0x000fffff
 800d4e8:	3ff00000 	.word	0x3ff00000
 800d4ec:	4090cbff 	.word	0x4090cbff
 800d4f0:	3f6f3400 	.word	0x3f6f3400

0800d4f4 <__ieee754_sqrt>:
 800d4f4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d648 <__ieee754_sqrt+0x154>
 800d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fc:	ea3c 0c01 	bics.w	ip, ip, r1
 800d500:	460b      	mov	r3, r1
 800d502:	4606      	mov	r6, r0
 800d504:	460d      	mov	r5, r1
 800d506:	460a      	mov	r2, r1
 800d508:	4607      	mov	r7, r0
 800d50a:	4604      	mov	r4, r0
 800d50c:	d10e      	bne.n	800d52c <__ieee754_sqrt+0x38>
 800d50e:	4602      	mov	r2, r0
 800d510:	f7f2 ffda 	bl	80004c8 <__aeabi_dmul>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	4630      	mov	r0, r6
 800d51a:	4629      	mov	r1, r5
 800d51c:	f7f2 fe1e 	bl	800015c <__adddf3>
 800d520:	4606      	mov	r6, r0
 800d522:	460d      	mov	r5, r1
 800d524:	4630      	mov	r0, r6
 800d526:	4629      	mov	r1, r5
 800d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d52c:	2900      	cmp	r1, #0
 800d52e:	dc0d      	bgt.n	800d54c <__ieee754_sqrt+0x58>
 800d530:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d534:	ea5c 0707 	orrs.w	r7, ip, r7
 800d538:	d0f4      	beq.n	800d524 <__ieee754_sqrt+0x30>
 800d53a:	b139      	cbz	r1, 800d54c <__ieee754_sqrt+0x58>
 800d53c:	4602      	mov	r2, r0
 800d53e:	f7f2 fe0b 	bl	8000158 <__aeabi_dsub>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	f7f3 f8e9 	bl	800071c <__aeabi_ddiv>
 800d54a:	e7e9      	b.n	800d520 <__ieee754_sqrt+0x2c>
 800d54c:	1512      	asrs	r2, r2, #20
 800d54e:	d074      	beq.n	800d63a <__ieee754_sqrt+0x146>
 800d550:	2000      	movs	r0, #0
 800d552:	07d5      	lsls	r5, r2, #31
 800d554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d558:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800d55c:	bf5e      	ittt	pl
 800d55e:	0fe3      	lsrpl	r3, r4, #31
 800d560:	0064      	lslpl	r4, r4, #1
 800d562:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800d566:	0fe3      	lsrs	r3, r4, #31
 800d568:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d56c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d570:	2516      	movs	r5, #22
 800d572:	4601      	mov	r1, r0
 800d574:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d578:	1076      	asrs	r6, r6, #1
 800d57a:	0064      	lsls	r4, r4, #1
 800d57c:	188f      	adds	r7, r1, r2
 800d57e:	429f      	cmp	r7, r3
 800d580:	bfde      	ittt	le
 800d582:	1bdb      	suble	r3, r3, r7
 800d584:	18b9      	addle	r1, r7, r2
 800d586:	1880      	addle	r0, r0, r2
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	3d01      	subs	r5, #1
 800d58c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d590:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d594:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d598:	d1f0      	bne.n	800d57c <__ieee754_sqrt+0x88>
 800d59a:	462a      	mov	r2, r5
 800d59c:	f04f 0e20 	mov.w	lr, #32
 800d5a0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	eb07 0c05 	add.w	ip, r7, r5
 800d5aa:	dc02      	bgt.n	800d5b2 <__ieee754_sqrt+0xbe>
 800d5ac:	d113      	bne.n	800d5d6 <__ieee754_sqrt+0xe2>
 800d5ae:	45a4      	cmp	ip, r4
 800d5b0:	d811      	bhi.n	800d5d6 <__ieee754_sqrt+0xe2>
 800d5b2:	f1bc 0f00 	cmp.w	ip, #0
 800d5b6:	eb0c 0507 	add.w	r5, ip, r7
 800d5ba:	da43      	bge.n	800d644 <__ieee754_sqrt+0x150>
 800d5bc:	2d00      	cmp	r5, #0
 800d5be:	db41      	blt.n	800d644 <__ieee754_sqrt+0x150>
 800d5c0:	f101 0801 	add.w	r8, r1, #1
 800d5c4:	1a5b      	subs	r3, r3, r1
 800d5c6:	4641      	mov	r1, r8
 800d5c8:	45a4      	cmp	ip, r4
 800d5ca:	bf88      	it	hi
 800d5cc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d5d0:	eba4 040c 	sub.w	r4, r4, ip
 800d5d4:	443a      	add	r2, r7
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	f1be 0e01 	subs.w	lr, lr, #1
 800d5dc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d5e0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800d5e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d5e8:	d1dc      	bne.n	800d5a4 <__ieee754_sqrt+0xb0>
 800d5ea:	4323      	orrs	r3, r4
 800d5ec:	d006      	beq.n	800d5fc <__ieee754_sqrt+0x108>
 800d5ee:	1c54      	adds	r4, r2, #1
 800d5f0:	bf0b      	itete	eq
 800d5f2:	4672      	moveq	r2, lr
 800d5f4:	3201      	addne	r2, #1
 800d5f6:	3001      	addeq	r0, #1
 800d5f8:	f022 0201 	bicne.w	r2, r2, #1
 800d5fc:	1043      	asrs	r3, r0, #1
 800d5fe:	07c1      	lsls	r1, r0, #31
 800d600:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d604:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d608:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d60c:	bf48      	it	mi
 800d60e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d612:	4610      	mov	r0, r2
 800d614:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d618:	e782      	b.n	800d520 <__ieee754_sqrt+0x2c>
 800d61a:	0ae3      	lsrs	r3, r4, #11
 800d61c:	3915      	subs	r1, #21
 800d61e:	0564      	lsls	r4, r4, #21
 800d620:	2b00      	cmp	r3, #0
 800d622:	d0fa      	beq.n	800d61a <__ieee754_sqrt+0x126>
 800d624:	02de      	lsls	r6, r3, #11
 800d626:	d50a      	bpl.n	800d63e <__ieee754_sqrt+0x14a>
 800d628:	f1c2 0020 	rsb	r0, r2, #32
 800d62c:	fa24 f000 	lsr.w	r0, r4, r0
 800d630:	1e55      	subs	r5, r2, #1
 800d632:	4094      	lsls	r4, r2
 800d634:	4303      	orrs	r3, r0
 800d636:	1b4a      	subs	r2, r1, r5
 800d638:	e78a      	b.n	800d550 <__ieee754_sqrt+0x5c>
 800d63a:	4611      	mov	r1, r2
 800d63c:	e7f0      	b.n	800d620 <__ieee754_sqrt+0x12c>
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	3201      	adds	r2, #1
 800d642:	e7ef      	b.n	800d624 <__ieee754_sqrt+0x130>
 800d644:	4688      	mov	r8, r1
 800d646:	e7bd      	b.n	800d5c4 <__ieee754_sqrt+0xd0>
 800d648:	7ff00000 	.word	0x7ff00000

0800d64c <__ieee754_asinf>:
 800d64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d650:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800d654:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d658:	4604      	mov	r4, r0
 800d65a:	4605      	mov	r5, r0
 800d65c:	d10c      	bne.n	800d678 <__ieee754_asinf+0x2c>
 800d65e:	498d      	ldr	r1, [pc, #564]	; (800d894 <__ieee754_asinf+0x248>)
 800d660:	f7f3 fb68 	bl	8000d34 <__aeabi_fmul>
 800d664:	498c      	ldr	r1, [pc, #560]	; (800d898 <__ieee754_asinf+0x24c>)
 800d666:	4605      	mov	r5, r0
 800d668:	4620      	mov	r0, r4
 800d66a:	f7f3 fb63 	bl	8000d34 <__aeabi_fmul>
 800d66e:	4601      	mov	r1, r0
 800d670:	4628      	mov	r0, r5
 800d672:	f7f3 fa57 	bl	8000b24 <__addsf3>
 800d676:	e006      	b.n	800d686 <__ieee754_asinf+0x3a>
 800d678:	dd07      	ble.n	800d68a <__ieee754_asinf+0x3e>
 800d67a:	4601      	mov	r1, r0
 800d67c:	f7f3 fa50 	bl	8000b20 <__aeabi_fsub>
 800d680:	4601      	mov	r1, r0
 800d682:	f7f3 fc0b 	bl	8000e9c <__aeabi_fdiv>
 800d686:	4604      	mov	r4, r0
 800d688:	e00e      	b.n	800d6a8 <__ieee754_asinf+0x5c>
 800d68a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800d68e:	da58      	bge.n	800d742 <__ieee754_asinf+0xf6>
 800d690:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800d694:	da0b      	bge.n	800d6ae <__ieee754_asinf+0x62>
 800d696:	4981      	ldr	r1, [pc, #516]	; (800d89c <__ieee754_asinf+0x250>)
 800d698:	f7f3 fa44 	bl	8000b24 <__addsf3>
 800d69c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d6a0:	f7f3 fd04 	bl	80010ac <__aeabi_fcmpgt>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d04c      	beq.n	800d742 <__ieee754_asinf+0xf6>
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	f7f3 fb40 	bl	8000d34 <__aeabi_fmul>
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	497a      	ldr	r1, [pc, #488]	; (800d8a0 <__ieee754_asinf+0x254>)
 800d6b8:	f7f3 fb3c 	bl	8000d34 <__aeabi_fmul>
 800d6bc:	4979      	ldr	r1, [pc, #484]	; (800d8a4 <__ieee754_asinf+0x258>)
 800d6be:	f7f3 fa31 	bl	8000b24 <__addsf3>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	f7f3 fb36 	bl	8000d34 <__aeabi_fmul>
 800d6c8:	4977      	ldr	r1, [pc, #476]	; (800d8a8 <__ieee754_asinf+0x25c>)
 800d6ca:	f7f3 fa29 	bl	8000b20 <__aeabi_fsub>
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	f7f3 fb30 	bl	8000d34 <__aeabi_fmul>
 800d6d4:	4975      	ldr	r1, [pc, #468]	; (800d8ac <__ieee754_asinf+0x260>)
 800d6d6:	f7f3 fa25 	bl	8000b24 <__addsf3>
 800d6da:	4629      	mov	r1, r5
 800d6dc:	f7f3 fb2a 	bl	8000d34 <__aeabi_fmul>
 800d6e0:	4973      	ldr	r1, [pc, #460]	; (800d8b0 <__ieee754_asinf+0x264>)
 800d6e2:	f7f3 fa1d 	bl	8000b20 <__aeabi_fsub>
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f3 fb24 	bl	8000d34 <__aeabi_fmul>
 800d6ec:	4971      	ldr	r1, [pc, #452]	; (800d8b4 <__ieee754_asinf+0x268>)
 800d6ee:	f7f3 fa19 	bl	8000b24 <__addsf3>
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	f7f3 fb1e 	bl	8000d34 <__aeabi_fmul>
 800d6f8:	496f      	ldr	r1, [pc, #444]	; (800d8b8 <__ieee754_asinf+0x26c>)
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f7f3 fb19 	bl	8000d34 <__aeabi_fmul>
 800d702:	496e      	ldr	r1, [pc, #440]	; (800d8bc <__ieee754_asinf+0x270>)
 800d704:	f7f3 fa0c 	bl	8000b20 <__aeabi_fsub>
 800d708:	4629      	mov	r1, r5
 800d70a:	f7f3 fb13 	bl	8000d34 <__aeabi_fmul>
 800d70e:	496c      	ldr	r1, [pc, #432]	; (800d8c0 <__ieee754_asinf+0x274>)
 800d710:	f7f3 fa08 	bl	8000b24 <__addsf3>
 800d714:	4629      	mov	r1, r5
 800d716:	f7f3 fb0d 	bl	8000d34 <__aeabi_fmul>
 800d71a:	496a      	ldr	r1, [pc, #424]	; (800d8c4 <__ieee754_asinf+0x278>)
 800d71c:	f7f3 fa00 	bl	8000b20 <__aeabi_fsub>
 800d720:	4629      	mov	r1, r5
 800d722:	f7f3 fb07 	bl	8000d34 <__aeabi_fmul>
 800d726:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d72a:	f7f3 f9fb 	bl	8000b24 <__addsf3>
 800d72e:	4601      	mov	r1, r0
 800d730:	4630      	mov	r0, r6
 800d732:	f7f3 fbb3 	bl	8000e9c <__aeabi_fdiv>
 800d736:	4621      	mov	r1, r4
 800d738:	f7f3 fafc 	bl	8000d34 <__aeabi_fmul>
 800d73c:	4601      	mov	r1, r0
 800d73e:	4620      	mov	r0, r4
 800d740:	e797      	b.n	800d672 <__ieee754_asinf+0x26>
 800d742:	4620      	mov	r0, r4
 800d744:	f000 ff42 	bl	800e5cc <fabsf>
 800d748:	4601      	mov	r1, r0
 800d74a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d74e:	f7f3 f9e7 	bl	8000b20 <__aeabi_fsub>
 800d752:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d756:	f7f3 faed 	bl	8000d34 <__aeabi_fmul>
 800d75a:	4606      	mov	r6, r0
 800d75c:	4950      	ldr	r1, [pc, #320]	; (800d8a0 <__ieee754_asinf+0x254>)
 800d75e:	f7f3 fae9 	bl	8000d34 <__aeabi_fmul>
 800d762:	4950      	ldr	r1, [pc, #320]	; (800d8a4 <__ieee754_asinf+0x258>)
 800d764:	f7f3 f9de 	bl	8000b24 <__addsf3>
 800d768:	4631      	mov	r1, r6
 800d76a:	f7f3 fae3 	bl	8000d34 <__aeabi_fmul>
 800d76e:	494e      	ldr	r1, [pc, #312]	; (800d8a8 <__ieee754_asinf+0x25c>)
 800d770:	f7f3 f9d6 	bl	8000b20 <__aeabi_fsub>
 800d774:	4631      	mov	r1, r6
 800d776:	f7f3 fadd 	bl	8000d34 <__aeabi_fmul>
 800d77a:	494c      	ldr	r1, [pc, #304]	; (800d8ac <__ieee754_asinf+0x260>)
 800d77c:	f7f3 f9d2 	bl	8000b24 <__addsf3>
 800d780:	4631      	mov	r1, r6
 800d782:	f7f3 fad7 	bl	8000d34 <__aeabi_fmul>
 800d786:	494a      	ldr	r1, [pc, #296]	; (800d8b0 <__ieee754_asinf+0x264>)
 800d788:	f7f3 f9ca 	bl	8000b20 <__aeabi_fsub>
 800d78c:	4631      	mov	r1, r6
 800d78e:	f7f3 fad1 	bl	8000d34 <__aeabi_fmul>
 800d792:	4948      	ldr	r1, [pc, #288]	; (800d8b4 <__ieee754_asinf+0x268>)
 800d794:	f7f3 f9c6 	bl	8000b24 <__addsf3>
 800d798:	4631      	mov	r1, r6
 800d79a:	f7f3 facb 	bl	8000d34 <__aeabi_fmul>
 800d79e:	4946      	ldr	r1, [pc, #280]	; (800d8b8 <__ieee754_asinf+0x26c>)
 800d7a0:	4681      	mov	r9, r0
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7f3 fac6 	bl	8000d34 <__aeabi_fmul>
 800d7a8:	4944      	ldr	r1, [pc, #272]	; (800d8bc <__ieee754_asinf+0x270>)
 800d7aa:	f7f3 f9b9 	bl	8000b20 <__aeabi_fsub>
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	f7f3 fac0 	bl	8000d34 <__aeabi_fmul>
 800d7b4:	4942      	ldr	r1, [pc, #264]	; (800d8c0 <__ieee754_asinf+0x274>)
 800d7b6:	f7f3 f9b5 	bl	8000b24 <__addsf3>
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	f7f3 faba 	bl	8000d34 <__aeabi_fmul>
 800d7c0:	4940      	ldr	r1, [pc, #256]	; (800d8c4 <__ieee754_asinf+0x278>)
 800d7c2:	f7f3 f9ad 	bl	8000b20 <__aeabi_fsub>
 800d7c6:	4631      	mov	r1, r6
 800d7c8:	f7f3 fab4 	bl	8000d34 <__aeabi_fmul>
 800d7cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d7d0:	f7f3 f9a8 	bl	8000b24 <__addsf3>
 800d7d4:	4682      	mov	sl, r0
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f000 f9da 	bl	800db90 <__ieee754_sqrtf>
 800d7dc:	4b3a      	ldr	r3, [pc, #232]	; (800d8c8 <__ieee754_asinf+0x27c>)
 800d7de:	4607      	mov	r7, r0
 800d7e0:	4598      	cmp	r8, r3
 800d7e2:	dd1a      	ble.n	800d81a <__ieee754_asinf+0x1ce>
 800d7e4:	4651      	mov	r1, sl
 800d7e6:	4648      	mov	r0, r9
 800d7e8:	f7f3 fb58 	bl	8000e9c <__aeabi_fdiv>
 800d7ec:	4639      	mov	r1, r7
 800d7ee:	f7f3 faa1 	bl	8000d34 <__aeabi_fmul>
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	f7f3 f996 	bl	8000b24 <__addsf3>
 800d7f8:	4601      	mov	r1, r0
 800d7fa:	f7f3 f993 	bl	8000b24 <__addsf3>
 800d7fe:	4933      	ldr	r1, [pc, #204]	; (800d8cc <__ieee754_asinf+0x280>)
 800d800:	f7f3 f990 	bl	8000b24 <__addsf3>
 800d804:	4601      	mov	r1, r0
 800d806:	4823      	ldr	r0, [pc, #140]	; (800d894 <__ieee754_asinf+0x248>)
 800d808:	f7f3 f98a 	bl	8000b20 <__aeabi_fsub>
 800d80c:	2d00      	cmp	r5, #0
 800d80e:	4604      	mov	r4, r0
 800d810:	f73f af4a 	bgt.w	800d6a8 <__ieee754_asinf+0x5c>
 800d814:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d818:	e735      	b.n	800d686 <__ieee754_asinf+0x3a>
 800d81a:	4601      	mov	r1, r0
 800d81c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800d820:	f7f3 f980 	bl	8000b24 <__addsf3>
 800d824:	4651      	mov	r1, sl
 800d826:	4604      	mov	r4, r0
 800d828:	4648      	mov	r0, r9
 800d82a:	f7f3 fb37 	bl	8000e9c <__aeabi_fdiv>
 800d82e:	4601      	mov	r1, r0
 800d830:	4620      	mov	r0, r4
 800d832:	f7f3 fa7f 	bl	8000d34 <__aeabi_fmul>
 800d836:	f028 080f 	bic.w	r8, r8, #15
 800d83a:	4681      	mov	r9, r0
 800d83c:	4641      	mov	r1, r8
 800d83e:	4640      	mov	r0, r8
 800d840:	f7f3 fa78 	bl	8000d34 <__aeabi_fmul>
 800d844:	4601      	mov	r1, r0
 800d846:	4630      	mov	r0, r6
 800d848:	f7f3 f96a 	bl	8000b20 <__aeabi_fsub>
 800d84c:	4641      	mov	r1, r8
 800d84e:	4604      	mov	r4, r0
 800d850:	4638      	mov	r0, r7
 800d852:	f7f3 f967 	bl	8000b24 <__addsf3>
 800d856:	4601      	mov	r1, r0
 800d858:	4620      	mov	r0, r4
 800d85a:	f7f3 fb1f 	bl	8000e9c <__aeabi_fdiv>
 800d85e:	4601      	mov	r1, r0
 800d860:	f7f3 f960 	bl	8000b24 <__addsf3>
 800d864:	4601      	mov	r1, r0
 800d866:	480c      	ldr	r0, [pc, #48]	; (800d898 <__ieee754_asinf+0x24c>)
 800d868:	f7f3 f95a 	bl	8000b20 <__aeabi_fsub>
 800d86c:	4601      	mov	r1, r0
 800d86e:	4648      	mov	r0, r9
 800d870:	f7f3 f956 	bl	8000b20 <__aeabi_fsub>
 800d874:	4641      	mov	r1, r8
 800d876:	4604      	mov	r4, r0
 800d878:	4640      	mov	r0, r8
 800d87a:	f7f3 f953 	bl	8000b24 <__addsf3>
 800d87e:	4601      	mov	r1, r0
 800d880:	4813      	ldr	r0, [pc, #76]	; (800d8d0 <__ieee754_asinf+0x284>)
 800d882:	f7f3 f94d 	bl	8000b20 <__aeabi_fsub>
 800d886:	4601      	mov	r1, r0
 800d888:	4620      	mov	r0, r4
 800d88a:	f7f3 f949 	bl	8000b20 <__aeabi_fsub>
 800d88e:	4601      	mov	r1, r0
 800d890:	480f      	ldr	r0, [pc, #60]	; (800d8d0 <__ieee754_asinf+0x284>)
 800d892:	e7b9      	b.n	800d808 <__ieee754_asinf+0x1bc>
 800d894:	3fc90fdb 	.word	0x3fc90fdb
 800d898:	b33bbd2e 	.word	0xb33bbd2e
 800d89c:	7149f2ca 	.word	0x7149f2ca
 800d8a0:	3811ef08 	.word	0x3811ef08
 800d8a4:	3a4f7f04 	.word	0x3a4f7f04
 800d8a8:	3d241146 	.word	0x3d241146
 800d8ac:	3e4e0aa8 	.word	0x3e4e0aa8
 800d8b0:	3ea6b090 	.word	0x3ea6b090
 800d8b4:	3e2aaaab 	.word	0x3e2aaaab
 800d8b8:	3d9dc62e 	.word	0x3d9dc62e
 800d8bc:	3f303361 	.word	0x3f303361
 800d8c0:	4001572d 	.word	0x4001572d
 800d8c4:	4019d139 	.word	0x4019d139
 800d8c8:	3f799999 	.word	0x3f799999
 800d8cc:	333bbd2e 	.word	0x333bbd2e
 800d8d0:	3f490fdb 	.word	0x3f490fdb

0800d8d4 <__ieee754_rem_pio2f>:
 800d8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d8:	4aa0      	ldr	r2, [pc, #640]	; (800db5c <__ieee754_rem_pio2f+0x288>)
 800d8da:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800d8de:	4296      	cmp	r6, r2
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	4682      	mov	sl, r0
 800d8e4:	b087      	sub	sp, #28
 800d8e6:	dc04      	bgt.n	800d8f2 <__ieee754_rem_pio2f+0x1e>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	6008      	str	r0, [r1, #0]
 800d8ec:	604b      	str	r3, [r1, #4]
 800d8ee:	2500      	movs	r5, #0
 800d8f0:	e01a      	b.n	800d928 <__ieee754_rem_pio2f+0x54>
 800d8f2:	4a9b      	ldr	r2, [pc, #620]	; (800db60 <__ieee754_rem_pio2f+0x28c>)
 800d8f4:	4296      	cmp	r6, r2
 800d8f6:	dc4b      	bgt.n	800d990 <__ieee754_rem_pio2f+0xbc>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	499a      	ldr	r1, [pc, #616]	; (800db64 <__ieee754_rem_pio2f+0x290>)
 800d8fc:	4f9a      	ldr	r7, [pc, #616]	; (800db68 <__ieee754_rem_pio2f+0x294>)
 800d8fe:	f026 060f 	bic.w	r6, r6, #15
 800d902:	dd23      	ble.n	800d94c <__ieee754_rem_pio2f+0x78>
 800d904:	f7f3 f90c 	bl	8000b20 <__aeabi_fsub>
 800d908:	42be      	cmp	r6, r7
 800d90a:	4605      	mov	r5, r0
 800d90c:	d010      	beq.n	800d930 <__ieee754_rem_pio2f+0x5c>
 800d90e:	4997      	ldr	r1, [pc, #604]	; (800db6c <__ieee754_rem_pio2f+0x298>)
 800d910:	f7f3 f906 	bl	8000b20 <__aeabi_fsub>
 800d914:	4601      	mov	r1, r0
 800d916:	6020      	str	r0, [r4, #0]
 800d918:	4628      	mov	r0, r5
 800d91a:	f7f3 f901 	bl	8000b20 <__aeabi_fsub>
 800d91e:	4993      	ldr	r1, [pc, #588]	; (800db6c <__ieee754_rem_pio2f+0x298>)
 800d920:	f7f3 f8fe 	bl	8000b20 <__aeabi_fsub>
 800d924:	2501      	movs	r5, #1
 800d926:	6060      	str	r0, [r4, #4]
 800d928:	4628      	mov	r0, r5
 800d92a:	b007      	add	sp, #28
 800d92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d930:	498f      	ldr	r1, [pc, #572]	; (800db70 <__ieee754_rem_pio2f+0x29c>)
 800d932:	f7f3 f8f5 	bl	8000b20 <__aeabi_fsub>
 800d936:	498f      	ldr	r1, [pc, #572]	; (800db74 <__ieee754_rem_pio2f+0x2a0>)
 800d938:	4605      	mov	r5, r0
 800d93a:	f7f3 f8f1 	bl	8000b20 <__aeabi_fsub>
 800d93e:	4601      	mov	r1, r0
 800d940:	6020      	str	r0, [r4, #0]
 800d942:	4628      	mov	r0, r5
 800d944:	f7f3 f8ec 	bl	8000b20 <__aeabi_fsub>
 800d948:	498a      	ldr	r1, [pc, #552]	; (800db74 <__ieee754_rem_pio2f+0x2a0>)
 800d94a:	e7e9      	b.n	800d920 <__ieee754_rem_pio2f+0x4c>
 800d94c:	f7f3 f8ea 	bl	8000b24 <__addsf3>
 800d950:	42be      	cmp	r6, r7
 800d952:	4605      	mov	r5, r0
 800d954:	d00e      	beq.n	800d974 <__ieee754_rem_pio2f+0xa0>
 800d956:	4985      	ldr	r1, [pc, #532]	; (800db6c <__ieee754_rem_pio2f+0x298>)
 800d958:	f7f3 f8e4 	bl	8000b24 <__addsf3>
 800d95c:	4601      	mov	r1, r0
 800d95e:	6020      	str	r0, [r4, #0]
 800d960:	4628      	mov	r0, r5
 800d962:	f7f3 f8dd 	bl	8000b20 <__aeabi_fsub>
 800d966:	4981      	ldr	r1, [pc, #516]	; (800db6c <__ieee754_rem_pio2f+0x298>)
 800d968:	f7f3 f8dc 	bl	8000b24 <__addsf3>
 800d96c:	f04f 35ff 	mov.w	r5, #4294967295
 800d970:	6060      	str	r0, [r4, #4]
 800d972:	e7d9      	b.n	800d928 <__ieee754_rem_pio2f+0x54>
 800d974:	497e      	ldr	r1, [pc, #504]	; (800db70 <__ieee754_rem_pio2f+0x29c>)
 800d976:	f7f3 f8d5 	bl	8000b24 <__addsf3>
 800d97a:	497e      	ldr	r1, [pc, #504]	; (800db74 <__ieee754_rem_pio2f+0x2a0>)
 800d97c:	4605      	mov	r5, r0
 800d97e:	f7f3 f8d1 	bl	8000b24 <__addsf3>
 800d982:	4601      	mov	r1, r0
 800d984:	6020      	str	r0, [r4, #0]
 800d986:	4628      	mov	r0, r5
 800d988:	f7f3 f8ca 	bl	8000b20 <__aeabi_fsub>
 800d98c:	4979      	ldr	r1, [pc, #484]	; (800db74 <__ieee754_rem_pio2f+0x2a0>)
 800d98e:	e7eb      	b.n	800d968 <__ieee754_rem_pio2f+0x94>
 800d990:	4a79      	ldr	r2, [pc, #484]	; (800db78 <__ieee754_rem_pio2f+0x2a4>)
 800d992:	4296      	cmp	r6, r2
 800d994:	f300 8091 	bgt.w	800daba <__ieee754_rem_pio2f+0x1e6>
 800d998:	f000 fe18 	bl	800e5cc <fabsf>
 800d99c:	4977      	ldr	r1, [pc, #476]	; (800db7c <__ieee754_rem_pio2f+0x2a8>)
 800d99e:	4607      	mov	r7, r0
 800d9a0:	f7f3 f9c8 	bl	8000d34 <__aeabi_fmul>
 800d9a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d9a8:	f7f3 f8bc 	bl	8000b24 <__addsf3>
 800d9ac:	f7f3 fb9e 	bl	80010ec <__aeabi_f2iz>
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	f7f3 f96b 	bl	8000c8c <__aeabi_i2f>
 800d9b6:	496b      	ldr	r1, [pc, #428]	; (800db64 <__ieee754_rem_pio2f+0x290>)
 800d9b8:	4681      	mov	r9, r0
 800d9ba:	f7f3 f9bb 	bl	8000d34 <__aeabi_fmul>
 800d9be:	4601      	mov	r1, r0
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	f7f3 f8ad 	bl	8000b20 <__aeabi_fsub>
 800d9c6:	4969      	ldr	r1, [pc, #420]	; (800db6c <__ieee754_rem_pio2f+0x298>)
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	4648      	mov	r0, r9
 800d9cc:	f7f3 f9b2 	bl	8000d34 <__aeabi_fmul>
 800d9d0:	2d1f      	cmp	r5, #31
 800d9d2:	4607      	mov	r7, r0
 800d9d4:	dc0c      	bgt.n	800d9f0 <__ieee754_rem_pio2f+0x11c>
 800d9d6:	4a6a      	ldr	r2, [pc, #424]	; (800db80 <__ieee754_rem_pio2f+0x2ac>)
 800d9d8:	1e69      	subs	r1, r5, #1
 800d9da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d9de:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d004      	beq.n	800d9f0 <__ieee754_rem_pio2f+0x11c>
 800d9e6:	4639      	mov	r1, r7
 800d9e8:	4640      	mov	r0, r8
 800d9ea:	f7f3 f899 	bl	8000b20 <__aeabi_fsub>
 800d9ee:	e00b      	b.n	800da08 <__ieee754_rem_pio2f+0x134>
 800d9f0:	4639      	mov	r1, r7
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	f7f3 f894 	bl	8000b20 <__aeabi_fsub>
 800d9f8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d9fc:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800da00:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800da04:	2e08      	cmp	r6, #8
 800da06:	dc01      	bgt.n	800da0c <__ieee754_rem_pio2f+0x138>
 800da08:	6020      	str	r0, [r4, #0]
 800da0a:	e026      	b.n	800da5a <__ieee754_rem_pio2f+0x186>
 800da0c:	4958      	ldr	r1, [pc, #352]	; (800db70 <__ieee754_rem_pio2f+0x29c>)
 800da0e:	4648      	mov	r0, r9
 800da10:	f7f3 f990 	bl	8000d34 <__aeabi_fmul>
 800da14:	4607      	mov	r7, r0
 800da16:	4601      	mov	r1, r0
 800da18:	4640      	mov	r0, r8
 800da1a:	f7f3 f881 	bl	8000b20 <__aeabi_fsub>
 800da1e:	4601      	mov	r1, r0
 800da20:	4606      	mov	r6, r0
 800da22:	4640      	mov	r0, r8
 800da24:	f7f3 f87c 	bl	8000b20 <__aeabi_fsub>
 800da28:	4639      	mov	r1, r7
 800da2a:	f7f3 f879 	bl	8000b20 <__aeabi_fsub>
 800da2e:	4607      	mov	r7, r0
 800da30:	4950      	ldr	r1, [pc, #320]	; (800db74 <__ieee754_rem_pio2f+0x2a0>)
 800da32:	4648      	mov	r0, r9
 800da34:	f7f3 f97e 	bl	8000d34 <__aeabi_fmul>
 800da38:	4639      	mov	r1, r7
 800da3a:	f7f3 f871 	bl	8000b20 <__aeabi_fsub>
 800da3e:	4601      	mov	r1, r0
 800da40:	4607      	mov	r7, r0
 800da42:	4630      	mov	r0, r6
 800da44:	f7f3 f86c 	bl	8000b20 <__aeabi_fsub>
 800da48:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800da4c:	ebab 0b03 	sub.w	fp, fp, r3
 800da50:	f1bb 0f19 	cmp.w	fp, #25
 800da54:	dc16      	bgt.n	800da84 <__ieee754_rem_pio2f+0x1b0>
 800da56:	46b0      	mov	r8, r6
 800da58:	6020      	str	r0, [r4, #0]
 800da5a:	6826      	ldr	r6, [r4, #0]
 800da5c:	4640      	mov	r0, r8
 800da5e:	4631      	mov	r1, r6
 800da60:	f7f3 f85e 	bl	8000b20 <__aeabi_fsub>
 800da64:	4639      	mov	r1, r7
 800da66:	f7f3 f85b 	bl	8000b20 <__aeabi_fsub>
 800da6a:	f1ba 0f00 	cmp.w	sl, #0
 800da6e:	6060      	str	r0, [r4, #4]
 800da70:	f6bf af5a 	bge.w	800d928 <__ieee754_rem_pio2f+0x54>
 800da74:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800da78:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800da7c:	6026      	str	r6, [r4, #0]
 800da7e:	6060      	str	r0, [r4, #4]
 800da80:	426d      	negs	r5, r5
 800da82:	e751      	b.n	800d928 <__ieee754_rem_pio2f+0x54>
 800da84:	493f      	ldr	r1, [pc, #252]	; (800db84 <__ieee754_rem_pio2f+0x2b0>)
 800da86:	4648      	mov	r0, r9
 800da88:	f7f3 f954 	bl	8000d34 <__aeabi_fmul>
 800da8c:	4607      	mov	r7, r0
 800da8e:	4601      	mov	r1, r0
 800da90:	4630      	mov	r0, r6
 800da92:	f7f3 f845 	bl	8000b20 <__aeabi_fsub>
 800da96:	4601      	mov	r1, r0
 800da98:	4680      	mov	r8, r0
 800da9a:	4630      	mov	r0, r6
 800da9c:	f7f3 f840 	bl	8000b20 <__aeabi_fsub>
 800daa0:	4639      	mov	r1, r7
 800daa2:	f7f3 f83d 	bl	8000b20 <__aeabi_fsub>
 800daa6:	4606      	mov	r6, r0
 800daa8:	4937      	ldr	r1, [pc, #220]	; (800db88 <__ieee754_rem_pio2f+0x2b4>)
 800daaa:	4648      	mov	r0, r9
 800daac:	f7f3 f942 	bl	8000d34 <__aeabi_fmul>
 800dab0:	4631      	mov	r1, r6
 800dab2:	f7f3 f835 	bl	8000b20 <__aeabi_fsub>
 800dab6:	4607      	mov	r7, r0
 800dab8:	e795      	b.n	800d9e6 <__ieee754_rem_pio2f+0x112>
 800daba:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dabe:	db05      	blt.n	800dacc <__ieee754_rem_pio2f+0x1f8>
 800dac0:	4601      	mov	r1, r0
 800dac2:	f7f3 f82d 	bl	8000b20 <__aeabi_fsub>
 800dac6:	6060      	str	r0, [r4, #4]
 800dac8:	6020      	str	r0, [r4, #0]
 800daca:	e710      	b.n	800d8ee <__ieee754_rem_pio2f+0x1a>
 800dacc:	15f7      	asrs	r7, r6, #23
 800dace:	3f86      	subs	r7, #134	; 0x86
 800dad0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7f3 fb09 	bl	80010ec <__aeabi_f2iz>
 800dada:	f7f3 f8d7 	bl	8000c8c <__aeabi_i2f>
 800dade:	4601      	mov	r1, r0
 800dae0:	9003      	str	r0, [sp, #12]
 800dae2:	4630      	mov	r0, r6
 800dae4:	f7f3 f81c 	bl	8000b20 <__aeabi_fsub>
 800dae8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800daec:	f7f3 f922 	bl	8000d34 <__aeabi_fmul>
 800daf0:	4606      	mov	r6, r0
 800daf2:	f7f3 fafb 	bl	80010ec <__aeabi_f2iz>
 800daf6:	f7f3 f8c9 	bl	8000c8c <__aeabi_i2f>
 800dafa:	4601      	mov	r1, r0
 800dafc:	9004      	str	r0, [sp, #16]
 800dafe:	4605      	mov	r5, r0
 800db00:	4630      	mov	r0, r6
 800db02:	f7f3 f80d 	bl	8000b20 <__aeabi_fsub>
 800db06:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800db0a:	f7f3 f913 	bl	8000d34 <__aeabi_fmul>
 800db0e:	2100      	movs	r1, #0
 800db10:	9005      	str	r0, [sp, #20]
 800db12:	f7f3 faa3 	bl	800105c <__aeabi_fcmpeq>
 800db16:	b1f0      	cbz	r0, 800db56 <__ieee754_rem_pio2f+0x282>
 800db18:	2100      	movs	r1, #0
 800db1a:	4628      	mov	r0, r5
 800db1c:	f7f3 fa9e 	bl	800105c <__aeabi_fcmpeq>
 800db20:	2800      	cmp	r0, #0
 800db22:	bf14      	ite	ne
 800db24:	2301      	movne	r3, #1
 800db26:	2302      	moveq	r3, #2
 800db28:	4a18      	ldr	r2, [pc, #96]	; (800db8c <__ieee754_rem_pio2f+0x2b8>)
 800db2a:	4621      	mov	r1, r4
 800db2c:	9201      	str	r2, [sp, #4]
 800db2e:	2202      	movs	r2, #2
 800db30:	a803      	add	r0, sp, #12
 800db32:	9200      	str	r2, [sp, #0]
 800db34:	463a      	mov	r2, r7
 800db36:	f000 f8fd 	bl	800dd34 <__kernel_rem_pio2f>
 800db3a:	f1ba 0f00 	cmp.w	sl, #0
 800db3e:	4605      	mov	r5, r0
 800db40:	f6bf aef2 	bge.w	800d928 <__ieee754_rem_pio2f+0x54>
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	6863      	ldr	r3, [r4, #4]
 800db4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db52:	6063      	str	r3, [r4, #4]
 800db54:	e794      	b.n	800da80 <__ieee754_rem_pio2f+0x1ac>
 800db56:	2303      	movs	r3, #3
 800db58:	e7e6      	b.n	800db28 <__ieee754_rem_pio2f+0x254>
 800db5a:	bf00      	nop
 800db5c:	3f490fd8 	.word	0x3f490fd8
 800db60:	4016cbe3 	.word	0x4016cbe3
 800db64:	3fc90f80 	.word	0x3fc90f80
 800db68:	3fc90fd0 	.word	0x3fc90fd0
 800db6c:	37354443 	.word	0x37354443
 800db70:	37354400 	.word	0x37354400
 800db74:	2e85a308 	.word	0x2e85a308
 800db78:	43490f80 	.word	0x43490f80
 800db7c:	3f22f984 	.word	0x3f22f984
 800db80:	0800eaa0 	.word	0x0800eaa0
 800db84:	2e85a300 	.word	0x2e85a300
 800db88:	248d3132 	.word	0x248d3132
 800db8c:	0800eb20 	.word	0x0800eb20

0800db90 <__ieee754_sqrtf>:
 800db90:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800db94:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	4603      	mov	r3, r0
 800db9c:	4604      	mov	r4, r0
 800db9e:	d309      	bcc.n	800dbb4 <__ieee754_sqrtf+0x24>
 800dba0:	4601      	mov	r1, r0
 800dba2:	f7f3 f8c7 	bl	8000d34 <__aeabi_fmul>
 800dba6:	4601      	mov	r1, r0
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f7f2 ffbb 	bl	8000b24 <__addsf3>
 800dbae:	4604      	mov	r4, r0
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}
 800dbb4:	2a00      	cmp	r2, #0
 800dbb6:	d0fb      	beq.n	800dbb0 <__ieee754_sqrtf+0x20>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	da06      	bge.n	800dbca <__ieee754_sqrtf+0x3a>
 800dbbc:	4601      	mov	r1, r0
 800dbbe:	f7f2 ffaf 	bl	8000b20 <__aeabi_fsub>
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	f7f3 f96a 	bl	8000e9c <__aeabi_fdiv>
 800dbc8:	e7f1      	b.n	800dbae <__ieee754_sqrtf+0x1e>
 800dbca:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800dbce:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800dbd2:	d029      	beq.n	800dc28 <__ieee754_sqrtf+0x98>
 800dbd4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800dbd8:	07cb      	lsls	r3, r1, #31
 800dbda:	f04f 0300 	mov.w	r3, #0
 800dbde:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800dbe2:	f04f 0419 	mov.w	r4, #25
 800dbe6:	461e      	mov	r6, r3
 800dbe8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800dbec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800dbf0:	bf58      	it	pl
 800dbf2:	0052      	lslpl	r2, r2, #1
 800dbf4:	1040      	asrs	r0, r0, #1
 800dbf6:	0052      	lsls	r2, r2, #1
 800dbf8:	1875      	adds	r5, r6, r1
 800dbfa:	4295      	cmp	r5, r2
 800dbfc:	bfde      	ittt	le
 800dbfe:	186e      	addle	r6, r5, r1
 800dc00:	1b52      	suble	r2, r2, r5
 800dc02:	185b      	addle	r3, r3, r1
 800dc04:	3c01      	subs	r4, #1
 800dc06:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dc0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dc0e:	d1f3      	bne.n	800dbf8 <__ieee754_sqrtf+0x68>
 800dc10:	b112      	cbz	r2, 800dc18 <__ieee754_sqrtf+0x88>
 800dc12:	3301      	adds	r3, #1
 800dc14:	f023 0301 	bic.w	r3, r3, #1
 800dc18:	105c      	asrs	r4, r3, #1
 800dc1a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800dc1e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800dc22:	e7c5      	b.n	800dbb0 <__ieee754_sqrtf+0x20>
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	3201      	adds	r2, #1
 800dc28:	0218      	lsls	r0, r3, #8
 800dc2a:	d5fb      	bpl.n	800dc24 <__ieee754_sqrtf+0x94>
 800dc2c:	3a01      	subs	r2, #1
 800dc2e:	1a89      	subs	r1, r1, r2
 800dc30:	e7d0      	b.n	800dbd4 <__ieee754_sqrtf+0x44>
	...

0800dc34 <__kernel_cosf>:
 800dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc38:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800dc3c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800dc40:	4606      	mov	r6, r0
 800dc42:	4688      	mov	r8, r1
 800dc44:	da03      	bge.n	800dc4e <__kernel_cosf+0x1a>
 800dc46:	f7f3 fa51 	bl	80010ec <__aeabi_f2iz>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d05c      	beq.n	800dd08 <__kernel_cosf+0xd4>
 800dc4e:	4631      	mov	r1, r6
 800dc50:	4630      	mov	r0, r6
 800dc52:	f7f3 f86f 	bl	8000d34 <__aeabi_fmul>
 800dc56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dc5a:	4605      	mov	r5, r0
 800dc5c:	f7f3 f86a 	bl	8000d34 <__aeabi_fmul>
 800dc60:	492b      	ldr	r1, [pc, #172]	; (800dd10 <__kernel_cosf+0xdc>)
 800dc62:	4607      	mov	r7, r0
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7f3 f865 	bl	8000d34 <__aeabi_fmul>
 800dc6a:	492a      	ldr	r1, [pc, #168]	; (800dd14 <__kernel_cosf+0xe0>)
 800dc6c:	f7f2 ff5a 	bl	8000b24 <__addsf3>
 800dc70:	4629      	mov	r1, r5
 800dc72:	f7f3 f85f 	bl	8000d34 <__aeabi_fmul>
 800dc76:	4928      	ldr	r1, [pc, #160]	; (800dd18 <__kernel_cosf+0xe4>)
 800dc78:	f7f2 ff52 	bl	8000b20 <__aeabi_fsub>
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	f7f3 f859 	bl	8000d34 <__aeabi_fmul>
 800dc82:	4926      	ldr	r1, [pc, #152]	; (800dd1c <__kernel_cosf+0xe8>)
 800dc84:	f7f2 ff4e 	bl	8000b24 <__addsf3>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7f3 f853 	bl	8000d34 <__aeabi_fmul>
 800dc8e:	4924      	ldr	r1, [pc, #144]	; (800dd20 <__kernel_cosf+0xec>)
 800dc90:	f7f2 ff46 	bl	8000b20 <__aeabi_fsub>
 800dc94:	4629      	mov	r1, r5
 800dc96:	f7f3 f84d 	bl	8000d34 <__aeabi_fmul>
 800dc9a:	4922      	ldr	r1, [pc, #136]	; (800dd24 <__kernel_cosf+0xf0>)
 800dc9c:	f7f2 ff42 	bl	8000b24 <__addsf3>
 800dca0:	4629      	mov	r1, r5
 800dca2:	f7f3 f847 	bl	8000d34 <__aeabi_fmul>
 800dca6:	4629      	mov	r1, r5
 800dca8:	f7f3 f844 	bl	8000d34 <__aeabi_fmul>
 800dcac:	4641      	mov	r1, r8
 800dcae:	4605      	mov	r5, r0
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f7f3 f83f 	bl	8000d34 <__aeabi_fmul>
 800dcb6:	4601      	mov	r1, r0
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f7f2 ff31 	bl	8000b20 <__aeabi_fsub>
 800dcbe:	4b1a      	ldr	r3, [pc, #104]	; (800dd28 <__kernel_cosf+0xf4>)
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	429c      	cmp	r4, r3
 800dcc4:	dc0a      	bgt.n	800dcdc <__kernel_cosf+0xa8>
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f7f2 ff29 	bl	8000b20 <__aeabi_fsub>
 800dcce:	4601      	mov	r1, r0
 800dcd0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dcd4:	f7f2 ff24 	bl	8000b20 <__aeabi_fsub>
 800dcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcdc:	4b13      	ldr	r3, [pc, #76]	; (800dd2c <__kernel_cosf+0xf8>)
 800dcde:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dce2:	429c      	cmp	r4, r3
 800dce4:	bfcc      	ite	gt
 800dce6:	4c12      	ldrgt	r4, [pc, #72]	; (800dd30 <__kernel_cosf+0xfc>)
 800dce8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800dcec:	4621      	mov	r1, r4
 800dcee:	f7f2 ff17 	bl	8000b20 <__aeabi_fsub>
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	f7f2 ff12 	bl	8000b20 <__aeabi_fsub>
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	f7f2 ff0f 	bl	8000b20 <__aeabi_fsub>
 800dd02:	4601      	mov	r1, r0
 800dd04:	4630      	mov	r0, r6
 800dd06:	e7e5      	b.n	800dcd4 <__kernel_cosf+0xa0>
 800dd08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dd0c:	e7e4      	b.n	800dcd8 <__kernel_cosf+0xa4>
 800dd0e:	bf00      	nop
 800dd10:	ad47d74e 	.word	0xad47d74e
 800dd14:	310f74f6 	.word	0x310f74f6
 800dd18:	3493f27c 	.word	0x3493f27c
 800dd1c:	37d00d01 	.word	0x37d00d01
 800dd20:	3ab60b61 	.word	0x3ab60b61
 800dd24:	3d2aaaab 	.word	0x3d2aaaab
 800dd28:	3e999999 	.word	0x3e999999
 800dd2c:	3f480000 	.word	0x3f480000
 800dd30:	3e900000 	.word	0x3e900000

0800dd34 <__kernel_rem_pio2f>:
 800dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd38:	b0db      	sub	sp, #364	; 0x16c
 800dd3a:	9202      	str	r2, [sp, #8]
 800dd3c:	9304      	str	r3, [sp, #16]
 800dd3e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800dd40:	4bc5      	ldr	r3, [pc, #788]	; (800e058 <__kernel_rem_pio2f+0x324>)
 800dd42:	9005      	str	r0, [sp, #20]
 800dd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd48:	9100      	str	r1, [sp, #0]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	9b04      	ldr	r3, [sp, #16]
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	9303      	str	r3, [sp, #12]
 800dd52:	9b02      	ldr	r3, [sp, #8]
 800dd54:	1d1a      	adds	r2, r3, #4
 800dd56:	f2c0 809b 	blt.w	800de90 <__kernel_rem_pio2f+0x15c>
 800dd5a:	1edc      	subs	r4, r3, #3
 800dd5c:	bf48      	it	mi
 800dd5e:	1d1c      	addmi	r4, r3, #4
 800dd60:	10e4      	asrs	r4, r4, #3
 800dd62:	2500      	movs	r5, #0
 800dd64:	f04f 0a00 	mov.w	sl, #0
 800dd68:	1c67      	adds	r7, r4, #1
 800dd6a:	00fb      	lsls	r3, r7, #3
 800dd6c:	9306      	str	r3, [sp, #24]
 800dd6e:	9b02      	ldr	r3, [sp, #8]
 800dd70:	9a03      	ldr	r2, [sp, #12]
 800dd72:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800dd76:	9b01      	ldr	r3, [sp, #4]
 800dd78:	1aa6      	subs	r6, r4, r2
 800dd7a:	eb03 0802 	add.w	r8, r3, r2
 800dd7e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800dd80:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800dd84:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800dd88:	4545      	cmp	r5, r8
 800dd8a:	f340 8083 	ble.w	800de94 <__kernel_rem_pio2f+0x160>
 800dd8e:	f04f 0800 	mov.w	r8, #0
 800dd92:	f04f 0b00 	mov.w	fp, #0
 800dd96:	9b04      	ldr	r3, [sp, #16]
 800dd98:	aa1e      	add	r2, sp, #120	; 0x78
 800dd9a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800dd9e:	ab46      	add	r3, sp, #280	; 0x118
 800dda0:	9a01      	ldr	r2, [sp, #4]
 800dda2:	4590      	cmp	r8, r2
 800dda4:	f340 809c 	ble.w	800dee0 <__kernel_rem_pio2f+0x1ac>
 800dda8:	4613      	mov	r3, r2
 800ddaa:	aa0a      	add	r2, sp, #40	; 0x28
 800ddac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddb0:	9308      	str	r3, [sp, #32]
 800ddb2:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ddb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ddb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ddbc:	9307      	str	r3, [sp, #28]
 800ddbe:	ad0a      	add	r5, sp, #40	; 0x28
 800ddc0:	462e      	mov	r6, r5
 800ddc2:	46c3      	mov	fp, r8
 800ddc4:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800ddc8:	ab5a      	add	r3, sp, #360	; 0x168
 800ddca:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ddce:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800ddd2:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800ddd6:	f1bb 0f00 	cmp.w	fp, #0
 800ddda:	f300 8086 	bgt.w	800deea <__kernel_rem_pio2f+0x1b6>
 800ddde:	4639      	mov	r1, r7
 800dde0:	4620      	mov	r0, r4
 800dde2:	f000 fc3d 	bl	800e660 <scalbnf>
 800dde6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800ddea:	4604      	mov	r4, r0
 800ddec:	f7f2 ffa2 	bl	8000d34 <__aeabi_fmul>
 800ddf0:	f000 fbf0 	bl	800e5d4 <floorf>
 800ddf4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800ddf8:	f7f2 ff9c 	bl	8000d34 <__aeabi_fmul>
 800ddfc:	4601      	mov	r1, r0
 800ddfe:	4620      	mov	r0, r4
 800de00:	f7f2 fe8e 	bl	8000b20 <__aeabi_fsub>
 800de04:	4604      	mov	r4, r0
 800de06:	f7f3 f971 	bl	80010ec <__aeabi_f2iz>
 800de0a:	4606      	mov	r6, r0
 800de0c:	f7f2 ff3e 	bl	8000c8c <__aeabi_i2f>
 800de10:	4601      	mov	r1, r0
 800de12:	4620      	mov	r0, r4
 800de14:	f7f2 fe84 	bl	8000b20 <__aeabi_fsub>
 800de18:	2f00      	cmp	r7, #0
 800de1a:	4681      	mov	r9, r0
 800de1c:	f340 8084 	ble.w	800df28 <__kernel_rem_pio2f+0x1f4>
 800de20:	f108 32ff 	add.w	r2, r8, #4294967295
 800de24:	ab0a      	add	r3, sp, #40	; 0x28
 800de26:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800de2a:	f1c7 0108 	rsb	r1, r7, #8
 800de2e:	fa44 f301 	asr.w	r3, r4, r1
 800de32:	441e      	add	r6, r3
 800de34:	408b      	lsls	r3, r1
 800de36:	1ae4      	subs	r4, r4, r3
 800de38:	f1c7 0007 	rsb	r0, r7, #7
 800de3c:	ab0a      	add	r3, sp, #40	; 0x28
 800de3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de42:	4104      	asrs	r4, r0
 800de44:	2c00      	cmp	r4, #0
 800de46:	dd7e      	ble.n	800df46 <__kernel_rem_pio2f+0x212>
 800de48:	2200      	movs	r2, #0
 800de4a:	4692      	mov	sl, r2
 800de4c:	3601      	adds	r6, #1
 800de4e:	4590      	cmp	r8, r2
 800de50:	f300 80b0 	bgt.w	800dfb4 <__kernel_rem_pio2f+0x280>
 800de54:	2f00      	cmp	r7, #0
 800de56:	dd05      	ble.n	800de64 <__kernel_rem_pio2f+0x130>
 800de58:	2f01      	cmp	r7, #1
 800de5a:	f000 80bd 	beq.w	800dfd8 <__kernel_rem_pio2f+0x2a4>
 800de5e:	2f02      	cmp	r7, #2
 800de60:	f000 80c5 	beq.w	800dfee <__kernel_rem_pio2f+0x2ba>
 800de64:	2c02      	cmp	r4, #2
 800de66:	d16e      	bne.n	800df46 <__kernel_rem_pio2f+0x212>
 800de68:	4649      	mov	r1, r9
 800de6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800de6e:	f7f2 fe57 	bl	8000b20 <__aeabi_fsub>
 800de72:	4681      	mov	r9, r0
 800de74:	f1ba 0f00 	cmp.w	sl, #0
 800de78:	d065      	beq.n	800df46 <__kernel_rem_pio2f+0x212>
 800de7a:	4639      	mov	r1, r7
 800de7c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800de80:	f000 fbee 	bl	800e660 <scalbnf>
 800de84:	4601      	mov	r1, r0
 800de86:	4648      	mov	r0, r9
 800de88:	f7f2 fe4a 	bl	8000b20 <__aeabi_fsub>
 800de8c:	4681      	mov	r9, r0
 800de8e:	e05a      	b.n	800df46 <__kernel_rem_pio2f+0x212>
 800de90:	2400      	movs	r4, #0
 800de92:	e766      	b.n	800dd62 <__kernel_rem_pio2f+0x2e>
 800de94:	42ee      	cmn	r6, r5
 800de96:	d407      	bmi.n	800dea8 <__kernel_rem_pio2f+0x174>
 800de98:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800de9c:	f7f2 fef6 	bl	8000c8c <__aeabi_i2f>
 800dea0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800dea4:	3501      	adds	r5, #1
 800dea6:	e76f      	b.n	800dd88 <__kernel_rem_pio2f+0x54>
 800dea8:	4650      	mov	r0, sl
 800deaa:	e7f9      	b.n	800dea0 <__kernel_rem_pio2f+0x16c>
 800deac:	9b05      	ldr	r3, [sp, #20]
 800deae:	f8da 1000 	ldr.w	r1, [sl]
 800deb2:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800deb6:	f7f2 ff3d 	bl	8000d34 <__aeabi_fmul>
 800deba:	4601      	mov	r1, r0
 800debc:	4630      	mov	r0, r6
 800debe:	f7f2 fe31 	bl	8000b24 <__addsf3>
 800dec2:	4606      	mov	r6, r0
 800dec4:	f109 0901 	add.w	r9, r9, #1
 800dec8:	ab46      	add	r3, sp, #280	; 0x118
 800deca:	9a03      	ldr	r2, [sp, #12]
 800decc:	f1aa 0a04 	sub.w	sl, sl, #4
 800ded0:	4591      	cmp	r9, r2
 800ded2:	ddeb      	ble.n	800deac <__kernel_rem_pio2f+0x178>
 800ded4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ded8:	3504      	adds	r5, #4
 800deda:	f108 0801 	add.w	r8, r8, #1
 800dede:	e75f      	b.n	800dda0 <__kernel_rem_pio2f+0x6c>
 800dee0:	46aa      	mov	sl, r5
 800dee2:	465e      	mov	r6, fp
 800dee4:	f04f 0900 	mov.w	r9, #0
 800dee8:	e7ef      	b.n	800deca <__kernel_rem_pio2f+0x196>
 800deea:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800deee:	4620      	mov	r0, r4
 800def0:	f7f2 ff20 	bl	8000d34 <__aeabi_fmul>
 800def4:	f7f3 f8fa 	bl	80010ec <__aeabi_f2iz>
 800def8:	f7f2 fec8 	bl	8000c8c <__aeabi_i2f>
 800defc:	4649      	mov	r1, r9
 800defe:	9009      	str	r0, [sp, #36]	; 0x24
 800df00:	f7f2 ff18 	bl	8000d34 <__aeabi_fmul>
 800df04:	4601      	mov	r1, r0
 800df06:	4620      	mov	r0, r4
 800df08:	f7f2 fe0a 	bl	8000b20 <__aeabi_fsub>
 800df0c:	f7f3 f8ee 	bl	80010ec <__aeabi_f2iz>
 800df10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df16:	f846 0b04 	str.w	r0, [r6], #4
 800df1a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7f2 fe00 	bl	8000b24 <__addsf3>
 800df24:	4604      	mov	r4, r0
 800df26:	e756      	b.n	800ddd6 <__kernel_rem_pio2f+0xa2>
 800df28:	d106      	bne.n	800df38 <__kernel_rem_pio2f+0x204>
 800df2a:	f108 33ff 	add.w	r3, r8, #4294967295
 800df2e:	aa0a      	add	r2, sp, #40	; 0x28
 800df30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df34:	1224      	asrs	r4, r4, #8
 800df36:	e785      	b.n	800de44 <__kernel_rem_pio2f+0x110>
 800df38:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800df3c:	f7f3 f8ac 	bl	8001098 <__aeabi_fcmpge>
 800df40:	4604      	mov	r4, r0
 800df42:	2800      	cmp	r0, #0
 800df44:	d134      	bne.n	800dfb0 <__kernel_rem_pio2f+0x27c>
 800df46:	2100      	movs	r1, #0
 800df48:	4648      	mov	r0, r9
 800df4a:	f7f3 f887 	bl	800105c <__aeabi_fcmpeq>
 800df4e:	2800      	cmp	r0, #0
 800df50:	f000 809a 	beq.w	800e088 <__kernel_rem_pio2f+0x354>
 800df54:	f108 35ff 	add.w	r5, r8, #4294967295
 800df58:	462b      	mov	r3, r5
 800df5a:	2200      	movs	r2, #0
 800df5c:	9901      	ldr	r1, [sp, #4]
 800df5e:	428b      	cmp	r3, r1
 800df60:	da4d      	bge.n	800dffe <__kernel_rem_pio2f+0x2ca>
 800df62:	2a00      	cmp	r2, #0
 800df64:	d07c      	beq.n	800e060 <__kernel_rem_pio2f+0x32c>
 800df66:	ab0a      	add	r3, sp, #40	; 0x28
 800df68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800df6c:	3f08      	subs	r7, #8
 800df6e:	2b00      	cmp	r3, #0
 800df70:	f000 8088 	beq.w	800e084 <__kernel_rem_pio2f+0x350>
 800df74:	4639      	mov	r1, r7
 800df76:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800df7a:	f000 fb71 	bl	800e660 <scalbnf>
 800df7e:	46aa      	mov	sl, r5
 800df80:	4681      	mov	r9, r0
 800df82:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800df86:	af46      	add	r7, sp, #280	; 0x118
 800df88:	f1ba 0f00 	cmp.w	sl, #0
 800df8c:	f280 80b1 	bge.w	800e0f2 <__kernel_rem_pio2f+0x3be>
 800df90:	46a9      	mov	r9, r5
 800df92:	f04f 0a00 	mov.w	sl, #0
 800df96:	2200      	movs	r2, #0
 800df98:	f1b9 0f00 	cmp.w	r9, #0
 800df9c:	f2c0 80db 	blt.w	800e156 <__kernel_rem_pio2f+0x422>
 800dfa0:	a946      	add	r1, sp, #280	; 0x118
 800dfa2:	4617      	mov	r7, r2
 800dfa4:	f04f 0800 	mov.w	r8, #0
 800dfa8:	4b2c      	ldr	r3, [pc, #176]	; (800e05c <__kernel_rem_pio2f+0x328>)
 800dfaa:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800dfae:	e0c3      	b.n	800e138 <__kernel_rem_pio2f+0x404>
 800dfb0:	2402      	movs	r4, #2
 800dfb2:	e749      	b.n	800de48 <__kernel_rem_pio2f+0x114>
 800dfb4:	682b      	ldr	r3, [r5, #0]
 800dfb6:	f1ba 0f00 	cmp.w	sl, #0
 800dfba:	d108      	bne.n	800dfce <__kernel_rem_pio2f+0x29a>
 800dfbc:	b11b      	cbz	r3, 800dfc6 <__kernel_rem_pio2f+0x292>
 800dfbe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800dfc2:	602b      	str	r3, [r5, #0]
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	469a      	mov	sl, r3
 800dfc8:	3201      	adds	r2, #1
 800dfca:	3504      	adds	r5, #4
 800dfcc:	e73f      	b.n	800de4e <__kernel_rem_pio2f+0x11a>
 800dfce:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800dfd2:	602b      	str	r3, [r5, #0]
 800dfd4:	4653      	mov	r3, sl
 800dfd6:	e7f6      	b.n	800dfc6 <__kernel_rem_pio2f+0x292>
 800dfd8:	f108 32ff 	add.w	r2, r8, #4294967295
 800dfdc:	ab0a      	add	r3, sp, #40	; 0x28
 800dfde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe6:	a90a      	add	r1, sp, #40	; 0x28
 800dfe8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dfec:	e73a      	b.n	800de64 <__kernel_rem_pio2f+0x130>
 800dfee:	f108 32ff 	add.w	r2, r8, #4294967295
 800dff2:	ab0a      	add	r3, sp, #40	; 0x28
 800dff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dffc:	e7f3      	b.n	800dfe6 <__kernel_rem_pio2f+0x2b2>
 800dffe:	a90a      	add	r1, sp, #40	; 0x28
 800e000:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e004:	3b01      	subs	r3, #1
 800e006:	430a      	orrs	r2, r1
 800e008:	e7a8      	b.n	800df5c <__kernel_rem_pio2f+0x228>
 800e00a:	3301      	adds	r3, #1
 800e00c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e010:	2900      	cmp	r1, #0
 800e012:	d0fa      	beq.n	800e00a <__kernel_rem_pio2f+0x2d6>
 800e014:	9a04      	ldr	r2, [sp, #16]
 800e016:	f108 0501 	add.w	r5, r8, #1
 800e01a:	eb08 0402 	add.w	r4, r8, r2
 800e01e:	aa1e      	add	r2, sp, #120	; 0x78
 800e020:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e024:	4498      	add	r8, r3
 800e026:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800e02a:	45a8      	cmp	r8, r5
 800e02c:	f6ff aec7 	blt.w	800ddbe <__kernel_rem_pio2f+0x8a>
 800e030:	9b07      	ldr	r3, [sp, #28]
 800e032:	46a3      	mov	fp, r4
 800e034:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e038:	f7f2 fe28 	bl	8000c8c <__aeabi_i2f>
 800e03c:	f04f 0a00 	mov.w	sl, #0
 800e040:	2600      	movs	r6, #0
 800e042:	f84b 0b04 	str.w	r0, [fp], #4
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	459a      	cmp	sl, r3
 800e04a:	dd0c      	ble.n	800e066 <__kernel_rem_pio2f+0x332>
 800e04c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800e050:	465c      	mov	r4, fp
 800e052:	3501      	adds	r5, #1
 800e054:	e7e9      	b.n	800e02a <__kernel_rem_pio2f+0x2f6>
 800e056:	bf00      	nop
 800e058:	0800ee64 	.word	0x0800ee64
 800e05c:	0800ee38 	.word	0x0800ee38
 800e060:	2301      	movs	r3, #1
 800e062:	9a08      	ldr	r2, [sp, #32]
 800e064:	e7d2      	b.n	800e00c <__kernel_rem_pio2f+0x2d8>
 800e066:	9b05      	ldr	r3, [sp, #20]
 800e068:	f854 0904 	ldr.w	r0, [r4], #-4
 800e06c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e070:	f7f2 fe60 	bl	8000d34 <__aeabi_fmul>
 800e074:	4601      	mov	r1, r0
 800e076:	4630      	mov	r0, r6
 800e078:	f7f2 fd54 	bl	8000b24 <__addsf3>
 800e07c:	f10a 0a01 	add.w	sl, sl, #1
 800e080:	4606      	mov	r6, r0
 800e082:	e7e0      	b.n	800e046 <__kernel_rem_pio2f+0x312>
 800e084:	3d01      	subs	r5, #1
 800e086:	e76e      	b.n	800df66 <__kernel_rem_pio2f+0x232>
 800e088:	9b06      	ldr	r3, [sp, #24]
 800e08a:	9a02      	ldr	r2, [sp, #8]
 800e08c:	4648      	mov	r0, r9
 800e08e:	1a99      	subs	r1, r3, r2
 800e090:	f000 fae6 	bl	800e660 <scalbnf>
 800e094:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e098:	4605      	mov	r5, r0
 800e09a:	f7f2 fffd 	bl	8001098 <__aeabi_fcmpge>
 800e09e:	b300      	cbz	r0, 800e0e2 <__kernel_rem_pio2f+0x3ae>
 800e0a0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f7f2 fe45 	bl	8000d34 <__aeabi_fmul>
 800e0aa:	f7f3 f81f 	bl	80010ec <__aeabi_f2iz>
 800e0ae:	f7f2 fded 	bl	8000c8c <__aeabi_i2f>
 800e0b2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e0b6:	4681      	mov	r9, r0
 800e0b8:	f7f2 fe3c 	bl	8000d34 <__aeabi_fmul>
 800e0bc:	4601      	mov	r1, r0
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f7f2 fd2e 	bl	8000b20 <__aeabi_fsub>
 800e0c4:	f7f3 f812 	bl	80010ec <__aeabi_f2iz>
 800e0c8:	ab0a      	add	r3, sp, #40	; 0x28
 800e0ca:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e0ce:	4648      	mov	r0, r9
 800e0d0:	f7f3 f80c 	bl	80010ec <__aeabi_f2iz>
 800e0d4:	f108 0501 	add.w	r5, r8, #1
 800e0d8:	ab0a      	add	r3, sp, #40	; 0x28
 800e0da:	3708      	adds	r7, #8
 800e0dc:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e0e0:	e748      	b.n	800df74 <__kernel_rem_pio2f+0x240>
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f7f3 f802 	bl	80010ec <__aeabi_f2iz>
 800e0e8:	ab0a      	add	r3, sp, #40	; 0x28
 800e0ea:	4645      	mov	r5, r8
 800e0ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e0f0:	e740      	b.n	800df74 <__kernel_rem_pio2f+0x240>
 800e0f2:	ab0a      	add	r3, sp, #40	; 0x28
 800e0f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e0f8:	f7f2 fdc8 	bl	8000c8c <__aeabi_i2f>
 800e0fc:	4649      	mov	r1, r9
 800e0fe:	f7f2 fe19 	bl	8000d34 <__aeabi_fmul>
 800e102:	4641      	mov	r1, r8
 800e104:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800e108:	4648      	mov	r0, r9
 800e10a:	f7f2 fe13 	bl	8000d34 <__aeabi_fmul>
 800e10e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e112:	4681      	mov	r9, r0
 800e114:	e738      	b.n	800df88 <__kernel_rem_pio2f+0x254>
 800e116:	f853 0b04 	ldr.w	r0, [r3], #4
 800e11a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e11e:	9203      	str	r2, [sp, #12]
 800e120:	9302      	str	r3, [sp, #8]
 800e122:	f7f2 fe07 	bl	8000d34 <__aeabi_fmul>
 800e126:	4601      	mov	r1, r0
 800e128:	4638      	mov	r0, r7
 800e12a:	f7f2 fcfb 	bl	8000b24 <__addsf3>
 800e12e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e132:	4607      	mov	r7, r0
 800e134:	f108 0801 	add.w	r8, r8, #1
 800e138:	9901      	ldr	r1, [sp, #4]
 800e13a:	4588      	cmp	r8, r1
 800e13c:	dc01      	bgt.n	800e142 <__kernel_rem_pio2f+0x40e>
 800e13e:	45c2      	cmp	sl, r8
 800e140:	dae9      	bge.n	800e116 <__kernel_rem_pio2f+0x3e2>
 800e142:	ab5a      	add	r3, sp, #360	; 0x168
 800e144:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e148:	f843 7ca0 	str.w	r7, [r3, #-160]
 800e14c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e150:	f10a 0a01 	add.w	sl, sl, #1
 800e154:	e720      	b.n	800df98 <__kernel_rem_pio2f+0x264>
 800e156:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e158:	2b02      	cmp	r3, #2
 800e15a:	dc07      	bgt.n	800e16c <__kernel_rem_pio2f+0x438>
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	dc4d      	bgt.n	800e1fc <__kernel_rem_pio2f+0x4c8>
 800e160:	d02e      	beq.n	800e1c0 <__kernel_rem_pio2f+0x48c>
 800e162:	f006 0007 	and.w	r0, r6, #7
 800e166:	b05b      	add	sp, #364	; 0x16c
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e16e:	2b03      	cmp	r3, #3
 800e170:	d1f7      	bne.n	800e162 <__kernel_rem_pio2f+0x42e>
 800e172:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800e176:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800e17a:	46b8      	mov	r8, r7
 800e17c:	46aa      	mov	sl, r5
 800e17e:	f1ba 0f00 	cmp.w	sl, #0
 800e182:	dc48      	bgt.n	800e216 <__kernel_rem_pio2f+0x4e2>
 800e184:	46a9      	mov	r9, r5
 800e186:	f1b9 0f01 	cmp.w	r9, #1
 800e18a:	dc5f      	bgt.n	800e24c <__kernel_rem_pio2f+0x518>
 800e18c:	2000      	movs	r0, #0
 800e18e:	2d01      	cmp	r5, #1
 800e190:	dc75      	bgt.n	800e27e <__kernel_rem_pio2f+0x54a>
 800e192:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e194:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e196:	2c00      	cmp	r4, #0
 800e198:	d177      	bne.n	800e28a <__kernel_rem_pio2f+0x556>
 800e19a:	9900      	ldr	r1, [sp, #0]
 800e19c:	600a      	str	r2, [r1, #0]
 800e19e:	460a      	mov	r2, r1
 800e1a0:	604b      	str	r3, [r1, #4]
 800e1a2:	6090      	str	r0, [r2, #8]
 800e1a4:	e7dd      	b.n	800e162 <__kernel_rem_pio2f+0x42e>
 800e1a6:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800e1aa:	f7f2 fcbb 	bl	8000b24 <__addsf3>
 800e1ae:	3d01      	subs	r5, #1
 800e1b0:	2d00      	cmp	r5, #0
 800e1b2:	daf8      	bge.n	800e1a6 <__kernel_rem_pio2f+0x472>
 800e1b4:	b10c      	cbz	r4, 800e1ba <__kernel_rem_pio2f+0x486>
 800e1b6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e1ba:	9b00      	ldr	r3, [sp, #0]
 800e1bc:	6018      	str	r0, [r3, #0]
 800e1be:	e7d0      	b.n	800e162 <__kernel_rem_pio2f+0x42e>
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	af32      	add	r7, sp, #200	; 0xc8
 800e1c4:	e7f4      	b.n	800e1b0 <__kernel_rem_pio2f+0x47c>
 800e1c6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e1ca:	f7f2 fcab 	bl	8000b24 <__addsf3>
 800e1ce:	3f01      	subs	r7, #1
 800e1d0:	2f00      	cmp	r7, #0
 800e1d2:	daf8      	bge.n	800e1c6 <__kernel_rem_pio2f+0x492>
 800e1d4:	b1bc      	cbz	r4, 800e206 <__kernel_rem_pio2f+0x4d2>
 800e1d6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e1da:	9a00      	ldr	r2, [sp, #0]
 800e1dc:	4601      	mov	r1, r0
 800e1de:	6013      	str	r3, [r2, #0]
 800e1e0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800e1e2:	f7f2 fc9d 	bl	8000b20 <__aeabi_fsub>
 800e1e6:	2701      	movs	r7, #1
 800e1e8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e1ec:	42bd      	cmp	r5, r7
 800e1ee:	da0c      	bge.n	800e20a <__kernel_rem_pio2f+0x4d6>
 800e1f0:	b10c      	cbz	r4, 800e1f6 <__kernel_rem_pio2f+0x4c2>
 800e1f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e1f6:	9b00      	ldr	r3, [sp, #0]
 800e1f8:	6058      	str	r0, [r3, #4]
 800e1fa:	e7b2      	b.n	800e162 <__kernel_rem_pio2f+0x42e>
 800e1fc:	462f      	mov	r7, r5
 800e1fe:	2000      	movs	r0, #0
 800e200:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e204:	e7e4      	b.n	800e1d0 <__kernel_rem_pio2f+0x49c>
 800e206:	4603      	mov	r3, r0
 800e208:	e7e7      	b.n	800e1da <__kernel_rem_pio2f+0x4a6>
 800e20a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e20e:	f7f2 fc89 	bl	8000b24 <__addsf3>
 800e212:	3701      	adds	r7, #1
 800e214:	e7ea      	b.n	800e1ec <__kernel_rem_pio2f+0x4b8>
 800e216:	f8d8 3000 	ldr.w	r3, [r8]
 800e21a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e21e:	4619      	mov	r1, r3
 800e220:	4610      	mov	r0, r2
 800e222:	9302      	str	r3, [sp, #8]
 800e224:	9201      	str	r2, [sp, #4]
 800e226:	f7f2 fc7d 	bl	8000b24 <__addsf3>
 800e22a:	9a01      	ldr	r2, [sp, #4]
 800e22c:	4601      	mov	r1, r0
 800e22e:	4681      	mov	r9, r0
 800e230:	4610      	mov	r0, r2
 800e232:	f7f2 fc75 	bl	8000b20 <__aeabi_fsub>
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e23c:	4619      	mov	r1, r3
 800e23e:	f7f2 fc71 	bl	8000b24 <__addsf3>
 800e242:	f848 0904 	str.w	r0, [r8], #-4
 800e246:	f8c8 9000 	str.w	r9, [r8]
 800e24a:	e798      	b.n	800e17e <__kernel_rem_pio2f+0x44a>
 800e24c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e250:	f8d7 a000 	ldr.w	sl, [r7]
 800e254:	4618      	mov	r0, r3
 800e256:	4651      	mov	r1, sl
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	f7f2 fc63 	bl	8000b24 <__addsf3>
 800e25e:	9b01      	ldr	r3, [sp, #4]
 800e260:	4601      	mov	r1, r0
 800e262:	4680      	mov	r8, r0
 800e264:	4618      	mov	r0, r3
 800e266:	f7f2 fc5b 	bl	8000b20 <__aeabi_fsub>
 800e26a:	4651      	mov	r1, sl
 800e26c:	f7f2 fc5a 	bl	8000b24 <__addsf3>
 800e270:	f847 0904 	str.w	r0, [r7], #-4
 800e274:	f109 39ff 	add.w	r9, r9, #4294967295
 800e278:	f8c7 8000 	str.w	r8, [r7]
 800e27c:	e783      	b.n	800e186 <__kernel_rem_pio2f+0x452>
 800e27e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800e282:	f7f2 fc4f 	bl	8000b24 <__addsf3>
 800e286:	3d01      	subs	r5, #1
 800e288:	e781      	b.n	800e18e <__kernel_rem_pio2f+0x45a>
 800e28a:	9900      	ldr	r1, [sp, #0]
 800e28c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e290:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e294:	600a      	str	r2, [r1, #0]
 800e296:	604b      	str	r3, [r1, #4]
 800e298:	460a      	mov	r2, r1
 800e29a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e29e:	e780      	b.n	800e1a2 <__kernel_rem_pio2f+0x46e>

0800e2a0 <__kernel_sinf>:
 800e2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e2a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	460f      	mov	r7, r1
 800e2b0:	4691      	mov	r9, r2
 800e2b2:	da03      	bge.n	800e2bc <__kernel_sinf+0x1c>
 800e2b4:	f7f2 ff1a 	bl	80010ec <__aeabi_f2iz>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d035      	beq.n	800e328 <__kernel_sinf+0x88>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f7f2 fd38 	bl	8000d34 <__aeabi_fmul>
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	4601      	mov	r1, r0
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f7f2 fd33 	bl	8000d34 <__aeabi_fmul>
 800e2ce:	4929      	ldr	r1, [pc, #164]	; (800e374 <__kernel_sinf+0xd4>)
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f7f2 fd2e 	bl	8000d34 <__aeabi_fmul>
 800e2d8:	4927      	ldr	r1, [pc, #156]	; (800e378 <__kernel_sinf+0xd8>)
 800e2da:	f7f2 fc21 	bl	8000b20 <__aeabi_fsub>
 800e2de:	4629      	mov	r1, r5
 800e2e0:	f7f2 fd28 	bl	8000d34 <__aeabi_fmul>
 800e2e4:	4925      	ldr	r1, [pc, #148]	; (800e37c <__kernel_sinf+0xdc>)
 800e2e6:	f7f2 fc1d 	bl	8000b24 <__addsf3>
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	f7f2 fd22 	bl	8000d34 <__aeabi_fmul>
 800e2f0:	4923      	ldr	r1, [pc, #140]	; (800e380 <__kernel_sinf+0xe0>)
 800e2f2:	f7f2 fc15 	bl	8000b20 <__aeabi_fsub>
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	f7f2 fd1c 	bl	8000d34 <__aeabi_fmul>
 800e2fc:	4921      	ldr	r1, [pc, #132]	; (800e384 <__kernel_sinf+0xe4>)
 800e2fe:	f7f2 fc11 	bl	8000b24 <__addsf3>
 800e302:	4680      	mov	r8, r0
 800e304:	f1b9 0f00 	cmp.w	r9, #0
 800e308:	d111      	bne.n	800e32e <__kernel_sinf+0x8e>
 800e30a:	4601      	mov	r1, r0
 800e30c:	4628      	mov	r0, r5
 800e30e:	f7f2 fd11 	bl	8000d34 <__aeabi_fmul>
 800e312:	491d      	ldr	r1, [pc, #116]	; (800e388 <__kernel_sinf+0xe8>)
 800e314:	f7f2 fc04 	bl	8000b20 <__aeabi_fsub>
 800e318:	4631      	mov	r1, r6
 800e31a:	f7f2 fd0b 	bl	8000d34 <__aeabi_fmul>
 800e31e:	4601      	mov	r1, r0
 800e320:	4620      	mov	r0, r4
 800e322:	f7f2 fbff 	bl	8000b24 <__addsf3>
 800e326:	4604      	mov	r4, r0
 800e328:	4620      	mov	r0, r4
 800e32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e32e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e332:	4638      	mov	r0, r7
 800e334:	f7f2 fcfe 	bl	8000d34 <__aeabi_fmul>
 800e338:	4641      	mov	r1, r8
 800e33a:	4681      	mov	r9, r0
 800e33c:	4630      	mov	r0, r6
 800e33e:	f7f2 fcf9 	bl	8000d34 <__aeabi_fmul>
 800e342:	4601      	mov	r1, r0
 800e344:	4648      	mov	r0, r9
 800e346:	f7f2 fbeb 	bl	8000b20 <__aeabi_fsub>
 800e34a:	4629      	mov	r1, r5
 800e34c:	f7f2 fcf2 	bl	8000d34 <__aeabi_fmul>
 800e350:	4639      	mov	r1, r7
 800e352:	f7f2 fbe5 	bl	8000b20 <__aeabi_fsub>
 800e356:	490c      	ldr	r1, [pc, #48]	; (800e388 <__kernel_sinf+0xe8>)
 800e358:	4605      	mov	r5, r0
 800e35a:	4630      	mov	r0, r6
 800e35c:	f7f2 fcea 	bl	8000d34 <__aeabi_fmul>
 800e360:	4601      	mov	r1, r0
 800e362:	4628      	mov	r0, r5
 800e364:	f7f2 fbde 	bl	8000b24 <__addsf3>
 800e368:	4601      	mov	r1, r0
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7f2 fbd8 	bl	8000b20 <__aeabi_fsub>
 800e370:	e7d9      	b.n	800e326 <__kernel_sinf+0x86>
 800e372:	bf00      	nop
 800e374:	2f2ec9d3 	.word	0x2f2ec9d3
 800e378:	32d72f34 	.word	0x32d72f34
 800e37c:	3638ef1b 	.word	0x3638ef1b
 800e380:	39500d01 	.word	0x39500d01
 800e384:	3c088889 	.word	0x3c088889
 800e388:	3e2aaaab 	.word	0x3e2aaaab

0800e38c <fabs>:
 800e38c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e390:	4770      	bx	lr

0800e392 <finite>:
 800e392:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e396:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e39a:	0fc0      	lsrs	r0, r0, #31
 800e39c:	4770      	bx	lr
	...

0800e3a0 <nan>:
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	4901      	ldr	r1, [pc, #4]	; (800e3a8 <nan+0x8>)
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	7ff80000 	.word	0x7ff80000

0800e3ac <rint>:
 800e3ac:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800e3b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3b2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800e3b6:	2f13      	cmp	r7, #19
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	460c      	mov	r4, r1
 800e3be:	4605      	mov	r5, r0
 800e3c0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800e3c4:	dc59      	bgt.n	800e47a <rint+0xce>
 800e3c6:	2f00      	cmp	r7, #0
 800e3c8:	da2a      	bge.n	800e420 <rint+0x74>
 800e3ca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e3ce:	4301      	orrs	r1, r0
 800e3d0:	d022      	beq.n	800e418 <rint+0x6c>
 800e3d2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800e3d6:	4301      	orrs	r1, r0
 800e3d8:	424d      	negs	r5, r1
 800e3da:	430d      	orrs	r5, r1
 800e3dc:	4936      	ldr	r1, [pc, #216]	; (800e4b8 <rint+0x10c>)
 800e3de:	0c5c      	lsrs	r4, r3, #17
 800e3e0:	0b2d      	lsrs	r5, r5, #12
 800e3e2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800e3e6:	0464      	lsls	r4, r4, #17
 800e3e8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e3ec:	ea45 0304 	orr.w	r3, r5, r4
 800e3f0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f7f1 feb0 	bl	800015c <__adddf3>
 800e3fc:	e9cd 0100 	strd	r0, r1, [sp]
 800e400:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e404:	462b      	mov	r3, r5
 800e406:	4622      	mov	r2, r4
 800e408:	f7f1 fea6 	bl	8000158 <__aeabi_dsub>
 800e40c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e410:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4610      	mov	r0, r2
 800e41a:	4619      	mov	r1, r3
 800e41c:	b003      	add	sp, #12
 800e41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e420:	4926      	ldr	r1, [pc, #152]	; (800e4bc <rint+0x110>)
 800e422:	4139      	asrs	r1, r7
 800e424:	ea03 0001 	and.w	r0, r3, r1
 800e428:	4310      	orrs	r0, r2
 800e42a:	d0f5      	beq.n	800e418 <rint+0x6c>
 800e42c:	084b      	lsrs	r3, r1, #1
 800e42e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800e432:	ea52 0501 	orrs.w	r5, r2, r1
 800e436:	d00c      	beq.n	800e452 <rint+0xa6>
 800e438:	ea24 0303 	bic.w	r3, r4, r3
 800e43c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800e440:	2f13      	cmp	r7, #19
 800e442:	bf0c      	ite	eq
 800e444:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800e448:	2500      	movne	r5, #0
 800e44a:	fa44 f707 	asr.w	r7, r4, r7
 800e44e:	ea43 0407 	orr.w	r4, r3, r7
 800e452:	4919      	ldr	r1, [pc, #100]	; (800e4b8 <rint+0x10c>)
 800e454:	4623      	mov	r3, r4
 800e456:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800e45a:	462a      	mov	r2, r5
 800e45c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e460:	4620      	mov	r0, r4
 800e462:	4629      	mov	r1, r5
 800e464:	f7f1 fe7a 	bl	800015c <__adddf3>
 800e468:	e9cd 0100 	strd	r0, r1, [sp]
 800e46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e470:	4622      	mov	r2, r4
 800e472:	462b      	mov	r3, r5
 800e474:	f7f1 fe70 	bl	8000158 <__aeabi_dsub>
 800e478:	e7cc      	b.n	800e414 <rint+0x68>
 800e47a:	2f33      	cmp	r7, #51	; 0x33
 800e47c:	dd05      	ble.n	800e48a <rint+0xde>
 800e47e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800e482:	d1c9      	bne.n	800e418 <rint+0x6c>
 800e484:	f7f1 fe6a 	bl	800015c <__adddf3>
 800e488:	e7c4      	b.n	800e414 <rint+0x68>
 800e48a:	f04f 31ff 	mov.w	r1, #4294967295
 800e48e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800e492:	fa21 f10c 	lsr.w	r1, r1, ip
 800e496:	4208      	tst	r0, r1
 800e498:	d0be      	beq.n	800e418 <rint+0x6c>
 800e49a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800e49e:	bf18      	it	ne
 800e4a0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800e4a4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800e4a8:	bf1e      	ittt	ne
 800e4aa:	ea20 0303 	bicne.w	r3, r0, r3
 800e4ae:	fa45 fc0c 	asrne.w	ip, r5, ip
 800e4b2:	ea43 050c 	orrne.w	r5, r3, ip
 800e4b6:	e7cc      	b.n	800e452 <rint+0xa6>
 800e4b8:	0800ee70 	.word	0x0800ee70
 800e4bc:	000fffff 	.word	0x000fffff

0800e4c0 <scalbn>:
 800e4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	460d      	mov	r5, r1
 800e4ca:	4617      	mov	r7, r2
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	b996      	cbnz	r6, 800e4f6 <scalbn+0x36>
 800e4d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4d4:	4303      	orrs	r3, r0
 800e4d6:	d039      	beq.n	800e54c <scalbn+0x8c>
 800e4d8:	4b35      	ldr	r3, [pc, #212]	; (800e5b0 <scalbn+0xf0>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f7f1 fff4 	bl	80004c8 <__aeabi_dmul>
 800e4e0:	4b34      	ldr	r3, [pc, #208]	; (800e5b4 <scalbn+0xf4>)
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	429f      	cmp	r7, r3
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	da0f      	bge.n	800e50a <scalbn+0x4a>
 800e4ea:	a32d      	add	r3, pc, #180	; (adr r3, 800e5a0 <scalbn+0xe0>)
 800e4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f0:	f7f1 ffea 	bl	80004c8 <__aeabi_dmul>
 800e4f4:	e006      	b.n	800e504 <scalbn+0x44>
 800e4f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e4fa:	4296      	cmp	r6, r2
 800e4fc:	d10a      	bne.n	800e514 <scalbn+0x54>
 800e4fe:	4602      	mov	r2, r0
 800e500:	f7f1 fe2c 	bl	800015c <__adddf3>
 800e504:	4604      	mov	r4, r0
 800e506:	460d      	mov	r5, r1
 800e508:	e020      	b.n	800e54c <scalbn+0x8c>
 800e50a:	460b      	mov	r3, r1
 800e50c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e510:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e514:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e518:	19b9      	adds	r1, r7, r6
 800e51a:	4291      	cmp	r1, r2
 800e51c:	dd0e      	ble.n	800e53c <scalbn+0x7c>
 800e51e:	a322      	add	r3, pc, #136	; (adr r3, 800e5a8 <scalbn+0xe8>)
 800e520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e524:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e528:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e52c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e530:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e534:	4820      	ldr	r0, [pc, #128]	; (800e5b8 <scalbn+0xf8>)
 800e536:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e53a:	e7d9      	b.n	800e4f0 <scalbn+0x30>
 800e53c:	2900      	cmp	r1, #0
 800e53e:	dd08      	ble.n	800e552 <scalbn+0x92>
 800e540:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e544:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e548:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e54c:	4620      	mov	r0, r4
 800e54e:	4629      	mov	r1, r5
 800e550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e552:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e556:	da16      	bge.n	800e586 <scalbn+0xc6>
 800e558:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e55c:	429f      	cmp	r7, r3
 800e55e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e562:	dd08      	ble.n	800e576 <scalbn+0xb6>
 800e564:	4c15      	ldr	r4, [pc, #84]	; (800e5bc <scalbn+0xfc>)
 800e566:	4814      	ldr	r0, [pc, #80]	; (800e5b8 <scalbn+0xf8>)
 800e568:	f363 74df 	bfi	r4, r3, #31, #1
 800e56c:	a30e      	add	r3, pc, #56	; (adr r3, 800e5a8 <scalbn+0xe8>)
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	4621      	mov	r1, r4
 800e574:	e7bc      	b.n	800e4f0 <scalbn+0x30>
 800e576:	4c12      	ldr	r4, [pc, #72]	; (800e5c0 <scalbn+0x100>)
 800e578:	4812      	ldr	r0, [pc, #72]	; (800e5c4 <scalbn+0x104>)
 800e57a:	f363 74df 	bfi	r4, r3, #31, #1
 800e57e:	a308      	add	r3, pc, #32	; (adr r3, 800e5a0 <scalbn+0xe0>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	e7f5      	b.n	800e572 <scalbn+0xb2>
 800e586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e58a:	3136      	adds	r1, #54	; 0x36
 800e58c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e590:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e594:	4620      	mov	r0, r4
 800e596:	4629      	mov	r1, r5
 800e598:	2200      	movs	r2, #0
 800e59a:	4b0b      	ldr	r3, [pc, #44]	; (800e5c8 <scalbn+0x108>)
 800e59c:	e7a8      	b.n	800e4f0 <scalbn+0x30>
 800e59e:	bf00      	nop
 800e5a0:	c2f8f359 	.word	0xc2f8f359
 800e5a4:	01a56e1f 	.word	0x01a56e1f
 800e5a8:	8800759c 	.word	0x8800759c
 800e5ac:	7e37e43c 	.word	0x7e37e43c
 800e5b0:	43500000 	.word	0x43500000
 800e5b4:	ffff3cb0 	.word	0xffff3cb0
 800e5b8:	8800759c 	.word	0x8800759c
 800e5bc:	7e37e43c 	.word	0x7e37e43c
 800e5c0:	01a56e1f 	.word	0x01a56e1f
 800e5c4:	c2f8f359 	.word	0xc2f8f359
 800e5c8:	3c900000 	.word	0x3c900000

0800e5cc <fabsf>:
 800e5cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e5d0:	4770      	bx	lr
	...

0800e5d4 <floorf>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800e5da:	3d7f      	subs	r5, #127	; 0x7f
 800e5dc:	2d16      	cmp	r5, #22
 800e5de:	4601      	mov	r1, r0
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e5e6:	dc26      	bgt.n	800e636 <floorf+0x62>
 800e5e8:	2d00      	cmp	r5, #0
 800e5ea:	da0e      	bge.n	800e60a <floorf+0x36>
 800e5ec:	4917      	ldr	r1, [pc, #92]	; (800e64c <floorf+0x78>)
 800e5ee:	f7f2 fa99 	bl	8000b24 <__addsf3>
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	f7f2 fd5a 	bl	80010ac <__aeabi_fcmpgt>
 800e5f8:	b128      	cbz	r0, 800e606 <floorf+0x32>
 800e5fa:	2c00      	cmp	r4, #0
 800e5fc:	da23      	bge.n	800e646 <floorf+0x72>
 800e5fe:	4b14      	ldr	r3, [pc, #80]	; (800e650 <floorf+0x7c>)
 800e600:	2e00      	cmp	r6, #0
 800e602:	bf18      	it	ne
 800e604:	461c      	movne	r4, r3
 800e606:	4621      	mov	r1, r4
 800e608:	e01b      	b.n	800e642 <floorf+0x6e>
 800e60a:	4e12      	ldr	r6, [pc, #72]	; (800e654 <floorf+0x80>)
 800e60c:	412e      	asrs	r6, r5
 800e60e:	4230      	tst	r0, r6
 800e610:	d017      	beq.n	800e642 <floorf+0x6e>
 800e612:	490e      	ldr	r1, [pc, #56]	; (800e64c <floorf+0x78>)
 800e614:	f7f2 fa86 	bl	8000b24 <__addsf3>
 800e618:	2100      	movs	r1, #0
 800e61a:	f7f2 fd47 	bl	80010ac <__aeabi_fcmpgt>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d0f1      	beq.n	800e606 <floorf+0x32>
 800e622:	2c00      	cmp	r4, #0
 800e624:	bfbe      	ittt	lt
 800e626:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800e62a:	fa43 f505 	asrlt.w	r5, r3, r5
 800e62e:	1964      	addlt	r4, r4, r5
 800e630:	ea24 0406 	bic.w	r4, r4, r6
 800e634:	e7e7      	b.n	800e606 <floorf+0x32>
 800e636:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e63a:	d302      	bcc.n	800e642 <floorf+0x6e>
 800e63c:	f7f2 fa72 	bl	8000b24 <__addsf3>
 800e640:	4601      	mov	r1, r0
 800e642:	4608      	mov	r0, r1
 800e644:	bd70      	pop	{r4, r5, r6, pc}
 800e646:	2400      	movs	r4, #0
 800e648:	e7dd      	b.n	800e606 <floorf+0x32>
 800e64a:	bf00      	nop
 800e64c:	7149f2ca 	.word	0x7149f2ca
 800e650:	bf800000 	.word	0xbf800000
 800e654:	007fffff 	.word	0x007fffff

0800e658 <nanf>:
 800e658:	4800      	ldr	r0, [pc, #0]	; (800e65c <nanf+0x4>)
 800e65a:	4770      	bx	lr
 800e65c:	7fc00000 	.word	0x7fc00000

0800e660 <scalbnf>:
 800e660:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	4603      	mov	r3, r0
 800e668:	460d      	mov	r5, r1
 800e66a:	4604      	mov	r4, r0
 800e66c:	d02a      	beq.n	800e6c4 <scalbnf+0x64>
 800e66e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e672:	d304      	bcc.n	800e67e <scalbnf+0x1e>
 800e674:	4601      	mov	r1, r0
 800e676:	f7f2 fa55 	bl	8000b24 <__addsf3>
 800e67a:	4603      	mov	r3, r0
 800e67c:	e022      	b.n	800e6c4 <scalbnf+0x64>
 800e67e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800e682:	d117      	bne.n	800e6b4 <scalbnf+0x54>
 800e684:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800e688:	f7f2 fb54 	bl	8000d34 <__aeabi_fmul>
 800e68c:	4a17      	ldr	r2, [pc, #92]	; (800e6ec <scalbnf+0x8c>)
 800e68e:	4603      	mov	r3, r0
 800e690:	4295      	cmp	r5, r2
 800e692:	db0b      	blt.n	800e6ac <scalbnf+0x4c>
 800e694:	4604      	mov	r4, r0
 800e696:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e69a:	3a19      	subs	r2, #25
 800e69c:	442a      	add	r2, r5
 800e69e:	2afe      	cmp	r2, #254	; 0xfe
 800e6a0:	dd0a      	ble.n	800e6b8 <scalbnf+0x58>
 800e6a2:	4913      	ldr	r1, [pc, #76]	; (800e6f0 <scalbnf+0x90>)
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f361 001e 	bfi	r0, r1, #0, #31
 800e6aa:	e000      	b.n	800e6ae <scalbnf+0x4e>
 800e6ac:	4911      	ldr	r1, [pc, #68]	; (800e6f4 <scalbnf+0x94>)
 800e6ae:	f7f2 fb41 	bl	8000d34 <__aeabi_fmul>
 800e6b2:	e7e2      	b.n	800e67a <scalbnf+0x1a>
 800e6b4:	0dd2      	lsrs	r2, r2, #23
 800e6b6:	e7f1      	b.n	800e69c <scalbnf+0x3c>
 800e6b8:	2a00      	cmp	r2, #0
 800e6ba:	dd05      	ble.n	800e6c8 <scalbnf+0x68>
 800e6bc:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800e6c0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	bd38      	pop	{r3, r4, r5, pc}
 800e6c8:	f112 0f16 	cmn.w	r2, #22
 800e6cc:	da05      	bge.n	800e6da <scalbnf+0x7a>
 800e6ce:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e6d2:	4295      	cmp	r5, r2
 800e6d4:	dce5      	bgt.n	800e6a2 <scalbnf+0x42>
 800e6d6:	4907      	ldr	r1, [pc, #28]	; (800e6f4 <scalbnf+0x94>)
 800e6d8:	e7e4      	b.n	800e6a4 <scalbnf+0x44>
 800e6da:	3219      	adds	r2, #25
 800e6dc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800e6e0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800e6e4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800e6e8:	e7e1      	b.n	800e6ae <scalbnf+0x4e>
 800e6ea:	bf00      	nop
 800e6ec:	ffff3cb0 	.word	0xffff3cb0
 800e6f0:	7149f2ca 	.word	0x7149f2ca
 800e6f4:	0da24260 	.word	0x0da24260

0800e6f8 <abort>:
 800e6f8:	2006      	movs	r0, #6
 800e6fa:	b508      	push	{r3, lr}
 800e6fc:	f000 f94c 	bl	800e998 <raise>
 800e700:	2001      	movs	r0, #1
 800e702:	f7f5 fa4e 	bl	8003ba2 <_exit>
	...

0800e708 <__errno>:
 800e708:	4b01      	ldr	r3, [pc, #4]	; (800e710 <__errno+0x8>)
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	20000010 	.word	0x20000010

0800e714 <__libc_init_array>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	2600      	movs	r6, #0
 800e718:	4d0c      	ldr	r5, [pc, #48]	; (800e74c <__libc_init_array+0x38>)
 800e71a:	4c0d      	ldr	r4, [pc, #52]	; (800e750 <__libc_init_array+0x3c>)
 800e71c:	1b64      	subs	r4, r4, r5
 800e71e:	10a4      	asrs	r4, r4, #2
 800e720:	42a6      	cmp	r6, r4
 800e722:	d109      	bne.n	800e738 <__libc_init_array+0x24>
 800e724:	f000 f962 	bl	800e9ec <_init>
 800e728:	2600      	movs	r6, #0
 800e72a:	4d0a      	ldr	r5, [pc, #40]	; (800e754 <__libc_init_array+0x40>)
 800e72c:	4c0a      	ldr	r4, [pc, #40]	; (800e758 <__libc_init_array+0x44>)
 800e72e:	1b64      	subs	r4, r4, r5
 800e730:	10a4      	asrs	r4, r4, #2
 800e732:	42a6      	cmp	r6, r4
 800e734:	d105      	bne.n	800e742 <__libc_init_array+0x2e>
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	f855 3b04 	ldr.w	r3, [r5], #4
 800e73c:	4798      	blx	r3
 800e73e:	3601      	adds	r6, #1
 800e740:	e7ee      	b.n	800e720 <__libc_init_array+0xc>
 800e742:	f855 3b04 	ldr.w	r3, [r5], #4
 800e746:	4798      	blx	r3
 800e748:	3601      	adds	r6, #1
 800e74a:	e7f2      	b.n	800e732 <__libc_init_array+0x1e>
 800e74c:	0800eee0 	.word	0x0800eee0
 800e750:	0800eee0 	.word	0x0800eee0
 800e754:	0800eee0 	.word	0x0800eee0
 800e758:	0800eee8 	.word	0x0800eee8

0800e75c <malloc>:
 800e75c:	4b02      	ldr	r3, [pc, #8]	; (800e768 <malloc+0xc>)
 800e75e:	4601      	mov	r1, r0
 800e760:	6818      	ldr	r0, [r3, #0]
 800e762:	f000 b887 	b.w	800e874 <_malloc_r>
 800e766:	bf00      	nop
 800e768:	20000010 	.word	0x20000010

0800e76c <free>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <free+0xc>)
 800e76e:	4601      	mov	r1, r0
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	f000 b833 	b.w	800e7dc <_free_r>
 800e776:	bf00      	nop
 800e778:	20000010 	.word	0x20000010

0800e77c <memcpy>:
 800e77c:	440a      	add	r2, r1
 800e77e:	4291      	cmp	r1, r2
 800e780:	f100 33ff 	add.w	r3, r0, #4294967295
 800e784:	d100      	bne.n	800e788 <memcpy+0xc>
 800e786:	4770      	bx	lr
 800e788:	b510      	push	{r4, lr}
 800e78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e78e:	4291      	cmp	r1, r2
 800e790:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e794:	d1f9      	bne.n	800e78a <memcpy+0xe>
 800e796:	bd10      	pop	{r4, pc}

0800e798 <memmove>:
 800e798:	4288      	cmp	r0, r1
 800e79a:	b510      	push	{r4, lr}
 800e79c:	eb01 0402 	add.w	r4, r1, r2
 800e7a0:	d902      	bls.n	800e7a8 <memmove+0x10>
 800e7a2:	4284      	cmp	r4, r0
 800e7a4:	4623      	mov	r3, r4
 800e7a6:	d807      	bhi.n	800e7b8 <memmove+0x20>
 800e7a8:	1e43      	subs	r3, r0, #1
 800e7aa:	42a1      	cmp	r1, r4
 800e7ac:	d008      	beq.n	800e7c0 <memmove+0x28>
 800e7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7b6:	e7f8      	b.n	800e7aa <memmove+0x12>
 800e7b8:	4601      	mov	r1, r0
 800e7ba:	4402      	add	r2, r0
 800e7bc:	428a      	cmp	r2, r1
 800e7be:	d100      	bne.n	800e7c2 <memmove+0x2a>
 800e7c0:	bd10      	pop	{r4, pc}
 800e7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7ca:	e7f7      	b.n	800e7bc <memmove+0x24>

0800e7cc <memset>:
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	4402      	add	r2, r0
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d100      	bne.n	800e7d6 <memset+0xa>
 800e7d4:	4770      	bx	lr
 800e7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800e7da:	e7f9      	b.n	800e7d0 <memset+0x4>

0800e7dc <_free_r>:
 800e7dc:	b538      	push	{r3, r4, r5, lr}
 800e7de:	4605      	mov	r5, r0
 800e7e0:	2900      	cmp	r1, #0
 800e7e2:	d043      	beq.n	800e86c <_free_r+0x90>
 800e7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7e8:	1f0c      	subs	r4, r1, #4
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	bfb8      	it	lt
 800e7ee:	18e4      	addlt	r4, r4, r3
 800e7f0:	f000 f8f0 	bl	800e9d4 <__malloc_lock>
 800e7f4:	4a1e      	ldr	r2, [pc, #120]	; (800e870 <_free_r+0x94>)
 800e7f6:	6813      	ldr	r3, [r2, #0]
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	b933      	cbnz	r3, 800e80a <_free_r+0x2e>
 800e7fc:	6063      	str	r3, [r4, #4]
 800e7fe:	6014      	str	r4, [r2, #0]
 800e800:	4628      	mov	r0, r5
 800e802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e806:	f000 b8eb 	b.w	800e9e0 <__malloc_unlock>
 800e80a:	42a3      	cmp	r3, r4
 800e80c:	d90a      	bls.n	800e824 <_free_r+0x48>
 800e80e:	6821      	ldr	r1, [r4, #0]
 800e810:	1862      	adds	r2, r4, r1
 800e812:	4293      	cmp	r3, r2
 800e814:	bf01      	itttt	eq
 800e816:	681a      	ldreq	r2, [r3, #0]
 800e818:	685b      	ldreq	r3, [r3, #4]
 800e81a:	1852      	addeq	r2, r2, r1
 800e81c:	6022      	streq	r2, [r4, #0]
 800e81e:	6063      	str	r3, [r4, #4]
 800e820:	6004      	str	r4, [r0, #0]
 800e822:	e7ed      	b.n	800e800 <_free_r+0x24>
 800e824:	461a      	mov	r2, r3
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	b10b      	cbz	r3, 800e82e <_free_r+0x52>
 800e82a:	42a3      	cmp	r3, r4
 800e82c:	d9fa      	bls.n	800e824 <_free_r+0x48>
 800e82e:	6811      	ldr	r1, [r2, #0]
 800e830:	1850      	adds	r0, r2, r1
 800e832:	42a0      	cmp	r0, r4
 800e834:	d10b      	bne.n	800e84e <_free_r+0x72>
 800e836:	6820      	ldr	r0, [r4, #0]
 800e838:	4401      	add	r1, r0
 800e83a:	1850      	adds	r0, r2, r1
 800e83c:	4283      	cmp	r3, r0
 800e83e:	6011      	str	r1, [r2, #0]
 800e840:	d1de      	bne.n	800e800 <_free_r+0x24>
 800e842:	6818      	ldr	r0, [r3, #0]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	4401      	add	r1, r0
 800e848:	6011      	str	r1, [r2, #0]
 800e84a:	6053      	str	r3, [r2, #4]
 800e84c:	e7d8      	b.n	800e800 <_free_r+0x24>
 800e84e:	d902      	bls.n	800e856 <_free_r+0x7a>
 800e850:	230c      	movs	r3, #12
 800e852:	602b      	str	r3, [r5, #0]
 800e854:	e7d4      	b.n	800e800 <_free_r+0x24>
 800e856:	6820      	ldr	r0, [r4, #0]
 800e858:	1821      	adds	r1, r4, r0
 800e85a:	428b      	cmp	r3, r1
 800e85c:	bf01      	itttt	eq
 800e85e:	6819      	ldreq	r1, [r3, #0]
 800e860:	685b      	ldreq	r3, [r3, #4]
 800e862:	1809      	addeq	r1, r1, r0
 800e864:	6021      	streq	r1, [r4, #0]
 800e866:	6063      	str	r3, [r4, #4]
 800e868:	6054      	str	r4, [r2, #4]
 800e86a:	e7c9      	b.n	800e800 <_free_r+0x24>
 800e86c:	bd38      	pop	{r3, r4, r5, pc}
 800e86e:	bf00      	nop
 800e870:	20000d68 	.word	0x20000d68

0800e874 <_malloc_r>:
 800e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e876:	1ccd      	adds	r5, r1, #3
 800e878:	f025 0503 	bic.w	r5, r5, #3
 800e87c:	3508      	adds	r5, #8
 800e87e:	2d0c      	cmp	r5, #12
 800e880:	bf38      	it	cc
 800e882:	250c      	movcc	r5, #12
 800e884:	2d00      	cmp	r5, #0
 800e886:	4606      	mov	r6, r0
 800e888:	db01      	blt.n	800e88e <_malloc_r+0x1a>
 800e88a:	42a9      	cmp	r1, r5
 800e88c:	d903      	bls.n	800e896 <_malloc_r+0x22>
 800e88e:	230c      	movs	r3, #12
 800e890:	6033      	str	r3, [r6, #0]
 800e892:	2000      	movs	r0, #0
 800e894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e896:	f000 f89d 	bl	800e9d4 <__malloc_lock>
 800e89a:	4921      	ldr	r1, [pc, #132]	; (800e920 <_malloc_r+0xac>)
 800e89c:	680a      	ldr	r2, [r1, #0]
 800e89e:	4614      	mov	r4, r2
 800e8a0:	b99c      	cbnz	r4, 800e8ca <_malloc_r+0x56>
 800e8a2:	4f20      	ldr	r7, [pc, #128]	; (800e924 <_malloc_r+0xb0>)
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	b923      	cbnz	r3, 800e8b2 <_malloc_r+0x3e>
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f000 f83c 	bl	800e928 <_sbrk_r>
 800e8b0:	6038      	str	r0, [r7, #0]
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	f000 f837 	bl	800e928 <_sbrk_r>
 800e8ba:	1c43      	adds	r3, r0, #1
 800e8bc:	d123      	bne.n	800e906 <_malloc_r+0x92>
 800e8be:	230c      	movs	r3, #12
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	6033      	str	r3, [r6, #0]
 800e8c4:	f000 f88c 	bl	800e9e0 <__malloc_unlock>
 800e8c8:	e7e3      	b.n	800e892 <_malloc_r+0x1e>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	1b5b      	subs	r3, r3, r5
 800e8ce:	d417      	bmi.n	800e900 <_malloc_r+0x8c>
 800e8d0:	2b0b      	cmp	r3, #11
 800e8d2:	d903      	bls.n	800e8dc <_malloc_r+0x68>
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	441c      	add	r4, r3
 800e8d8:	6025      	str	r5, [r4, #0]
 800e8da:	e004      	b.n	800e8e6 <_malloc_r+0x72>
 800e8dc:	6863      	ldr	r3, [r4, #4]
 800e8de:	42a2      	cmp	r2, r4
 800e8e0:	bf0c      	ite	eq
 800e8e2:	600b      	streq	r3, [r1, #0]
 800e8e4:	6053      	strne	r3, [r2, #4]
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f000 f87a 	bl	800e9e0 <__malloc_unlock>
 800e8ec:	f104 000b 	add.w	r0, r4, #11
 800e8f0:	1d23      	adds	r3, r4, #4
 800e8f2:	f020 0007 	bic.w	r0, r0, #7
 800e8f6:	1ac2      	subs	r2, r0, r3
 800e8f8:	d0cc      	beq.n	800e894 <_malloc_r+0x20>
 800e8fa:	1a1b      	subs	r3, r3, r0
 800e8fc:	50a3      	str	r3, [r4, r2]
 800e8fe:	e7c9      	b.n	800e894 <_malloc_r+0x20>
 800e900:	4622      	mov	r2, r4
 800e902:	6864      	ldr	r4, [r4, #4]
 800e904:	e7cc      	b.n	800e8a0 <_malloc_r+0x2c>
 800e906:	1cc4      	adds	r4, r0, #3
 800e908:	f024 0403 	bic.w	r4, r4, #3
 800e90c:	42a0      	cmp	r0, r4
 800e90e:	d0e3      	beq.n	800e8d8 <_malloc_r+0x64>
 800e910:	1a21      	subs	r1, r4, r0
 800e912:	4630      	mov	r0, r6
 800e914:	f000 f808 	bl	800e928 <_sbrk_r>
 800e918:	3001      	adds	r0, #1
 800e91a:	d1dd      	bne.n	800e8d8 <_malloc_r+0x64>
 800e91c:	e7cf      	b.n	800e8be <_malloc_r+0x4a>
 800e91e:	bf00      	nop
 800e920:	20000d68 	.word	0x20000d68
 800e924:	20000d6c 	.word	0x20000d6c

0800e928 <_sbrk_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	2300      	movs	r3, #0
 800e92c:	4d05      	ldr	r5, [pc, #20]	; (800e944 <_sbrk_r+0x1c>)
 800e92e:	4604      	mov	r4, r0
 800e930:	4608      	mov	r0, r1
 800e932:	602b      	str	r3, [r5, #0]
 800e934:	f7f5 f940 	bl	8003bb8 <_sbrk>
 800e938:	1c43      	adds	r3, r0, #1
 800e93a:	d102      	bne.n	800e942 <_sbrk_r+0x1a>
 800e93c:	682b      	ldr	r3, [r5, #0]
 800e93e:	b103      	cbz	r3, 800e942 <_sbrk_r+0x1a>
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	bd38      	pop	{r3, r4, r5, pc}
 800e944:	20000d84 	.word	0x20000d84

0800e948 <_raise_r>:
 800e948:	291f      	cmp	r1, #31
 800e94a:	b538      	push	{r3, r4, r5, lr}
 800e94c:	4604      	mov	r4, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	d904      	bls.n	800e95c <_raise_r+0x14>
 800e952:	2316      	movs	r3, #22
 800e954:	6003      	str	r3, [r0, #0]
 800e956:	f04f 30ff 	mov.w	r0, #4294967295
 800e95a:	bd38      	pop	{r3, r4, r5, pc}
 800e95c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e95e:	b112      	cbz	r2, 800e966 <_raise_r+0x1e>
 800e960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e964:	b94b      	cbnz	r3, 800e97a <_raise_r+0x32>
 800e966:	4620      	mov	r0, r4
 800e968:	f000 f830 	bl	800e9cc <_getpid_r>
 800e96c:	462a      	mov	r2, r5
 800e96e:	4601      	mov	r1, r0
 800e970:	4620      	mov	r0, r4
 800e972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e976:	f000 b817 	b.w	800e9a8 <_kill_r>
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d00a      	beq.n	800e994 <_raise_r+0x4c>
 800e97e:	1c59      	adds	r1, r3, #1
 800e980:	d103      	bne.n	800e98a <_raise_r+0x42>
 800e982:	2316      	movs	r3, #22
 800e984:	6003      	str	r3, [r0, #0]
 800e986:	2001      	movs	r0, #1
 800e988:	e7e7      	b.n	800e95a <_raise_r+0x12>
 800e98a:	2400      	movs	r4, #0
 800e98c:	4628      	mov	r0, r5
 800e98e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e992:	4798      	blx	r3
 800e994:	2000      	movs	r0, #0
 800e996:	e7e0      	b.n	800e95a <_raise_r+0x12>

0800e998 <raise>:
 800e998:	4b02      	ldr	r3, [pc, #8]	; (800e9a4 <raise+0xc>)
 800e99a:	4601      	mov	r1, r0
 800e99c:	6818      	ldr	r0, [r3, #0]
 800e99e:	f7ff bfd3 	b.w	800e948 <_raise_r>
 800e9a2:	bf00      	nop
 800e9a4:	20000010 	.word	0x20000010

0800e9a8 <_kill_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	4d06      	ldr	r5, [pc, #24]	; (800e9c8 <_kill_r+0x20>)
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	602b      	str	r3, [r5, #0]
 800e9b6:	f7f5 f8e4 	bl	8003b82 <_kill>
 800e9ba:	1c43      	adds	r3, r0, #1
 800e9bc:	d102      	bne.n	800e9c4 <_kill_r+0x1c>
 800e9be:	682b      	ldr	r3, [r5, #0]
 800e9c0:	b103      	cbz	r3, 800e9c4 <_kill_r+0x1c>
 800e9c2:	6023      	str	r3, [r4, #0]
 800e9c4:	bd38      	pop	{r3, r4, r5, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20000d84 	.word	0x20000d84

0800e9cc <_getpid_r>:
 800e9cc:	f7f5 b8d2 	b.w	8003b74 <_getpid>

0800e9d0 <__retarget_lock_acquire_recursive>:
 800e9d0:	4770      	bx	lr

0800e9d2 <__retarget_lock_release_recursive>:
 800e9d2:	4770      	bx	lr

0800e9d4 <__malloc_lock>:
 800e9d4:	4801      	ldr	r0, [pc, #4]	; (800e9dc <__malloc_lock+0x8>)
 800e9d6:	f7ff bffb 	b.w	800e9d0 <__retarget_lock_acquire_recursive>
 800e9da:	bf00      	nop
 800e9dc:	20000d7c 	.word	0x20000d7c

0800e9e0 <__malloc_unlock>:
 800e9e0:	4801      	ldr	r0, [pc, #4]	; (800e9e8 <__malloc_unlock+0x8>)
 800e9e2:	f7ff bff6 	b.w	800e9d2 <__retarget_lock_release_recursive>
 800e9e6:	bf00      	nop
 800e9e8:	20000d7c 	.word	0x20000d7c

0800e9ec <_init>:
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	bf00      	nop
 800e9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9f2:	bc08      	pop	{r3}
 800e9f4:	469e      	mov	lr, r3
 800e9f6:	4770      	bx	lr

0800e9f8 <_fini>:
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	bf00      	nop
 800e9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9fe:	bc08      	pop	{r3}
 800ea00:	469e      	mov	lr, r3
 800ea02:	4770      	bx	lr
