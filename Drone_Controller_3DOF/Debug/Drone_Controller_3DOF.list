
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fce8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800fdf8  0800fdf8  0001fdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104d0  080104d0  00030088  2**0
                  CONTENTS
  4 .ARM          00000000  080104d0  080104d0  00030088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080104d0  080104d0  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080104d0  080104d0  000204d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080104d8  080104d8  000204d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080104e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000167c  20000088  08010568  00030088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001704  08010568  00031704  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278ef  00000000  00000000  000300b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b13  00000000  00000000  000579a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0005c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0005d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e358  00000000  00000000  0005ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0b5  00000000  00000000  0007cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000951a9  00000000  00000000  0009702d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c1d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006854  00000000  00000000  0012c22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800fde0 	.word	0x0800fde0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800fde0 	.word	0x0800fde0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HMC5883L_initialize+0x44>)
 8001190:	223c      	movs	r2, #60	; 0x3c
 8001192:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001194:	2378      	movs	r3, #120	; 0x78
 8001196:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HMC5883L_initialize+0x44>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b299      	uxth	r1, r3
 800119e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HMC5883L_initialize+0x48>)
 80011b2:	f005 fd71 	bl	8006c98 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 f80c 	bl	80011d4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f829 	bl	8001214 <HMC5883L_setMode>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000a4 	.word	0x200000a4
 80011d0:	200008e0 	.word	0x200008e0

080011d4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HMC5883L_setGain+0x38>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2201      	movs	r2, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <HMC5883L_setGain+0x3c>)
 8001200:	f005 fd4a 	bl	8006c98 <HAL_I2C_Mem_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000a4 	.word	0x200000a4
 8001210:	200008e0 	.word	0x200008e0

08001214 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HMC5883L_setMode+0x3c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b299      	uxth	r1, r3
 8001228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2202      	movs	r2, #2
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <HMC5883L_setMode+0x40>)
 800123c:	f005 fd2c 	bl	8006c98 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HMC5883L_setMode+0x44>)
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000a4 	.word	0x200000a4
 8001254:	200008e0 	.word	0x200008e0
 8001258:	200000ae 	.word	0x200000ae

0800125c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af04      	add	r7, sp, #16
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HMC5883L_getMagData+0x84>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b299      	uxth	r1, r3
 800126e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2306      	movs	r3, #6
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <HMC5883L_getMagData+0x8c>)
 8001282:	f005 fe03 	bl	8006e8c <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HMC5883L_getMagData+0x90>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HMC5883L_getMagData+0x38>
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ffc0 	bl	8001214 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HMC5883L_getMagData+0x88>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000a4 	.word	0x200000a4
 80012e4:	200000a8 	.word	0x200000a8
 80012e8:	200008e0 	.word	0x200008e0
 80012ec:	200000ae 	.word	0x200000ae

080012f0 <getDataAt>:
   @returns the specified data as a string
*/



char *getDataAt (char * str, const char * delim, int pos) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0a0      	sub	sp, #128	; 0x80
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	char *token;
	char copy[100] = "\0"; // modify size for larger strings
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	2260      	movs	r2, #96	; 0x60
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f00d fca1 	bl	800ec50 <memset>

	strcpy(copy, str);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f00d fca3 	bl	800ec60 <strcpy>
	token = strtok(copy, delim);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f00d fca5 	bl	800ec70 <strtok>
 8001326:	67f8      	str	r0, [r7, #124]	; 0x7c
	for(int i = 0; i < pos; i++) {
 8001328:	2300      	movs	r3, #0
 800132a:	67bb      	str	r3, [r7, #120]	; 0x78
 800132c:	e007      	b.n	800133e <getDataAt+0x4e>
		token = strtok(NULL, delim);
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	2000      	movs	r0, #0
 8001332:	f00d fc9d 	bl	800ec70 <strtok>
 8001336:	67f8      	str	r0, [r7, #124]	; 0x7c
	for(int i = 0; i < pos; i++) {
 8001338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800133a:	3301      	adds	r3, #1
 800133c:	67bb      	str	r3, [r7, #120]	; 0x78
 800133e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	dbf3      	blt.n	800132e <getDataAt+0x3e>
	}
	return token;
 8001346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8001348:	4618      	mov	r0, r3
 800134a:	3780      	adds	r7, #128	; 0x80
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <decodeGGA>:
   @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga) {
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b08e      	sub	sp, #56	; 0x38
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]

	char buffer[12];

	strcpy(buffer, getDataAt(GGAbuffer, ",", 5));
 800135c:	2205      	movs	r2, #5
 800135e:	497d      	ldr	r1, [pc, #500]	; (8001554 <decodeGGA+0x204>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffc5 	bl	80012f0 <getDataAt>
 8001366:	4602      	mov	r2, r0
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f00d fc76 	bl	800ec60 <strcpy>
	if (buffer[0] == '1' || buffer[0] == '2' || buffer[0] == '6')   // 0 indicates no fix yet
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	2b31      	cmp	r3, #49	; 0x31
 8001378:	d005      	beq.n	8001386 <decodeGGA+0x36>
 800137a:	7b3b      	ldrb	r3, [r7, #12]
 800137c:	2b32      	cmp	r3, #50	; 0x32
 800137e:	d002      	beq.n	8001386 <decodeGGA+0x36>
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	2b36      	cmp	r3, #54	; 0x36
 8001384:	d156      	bne.n	8001434 <decodeGGA+0xe4>
	{
		gga->isfixValid = 1;   // fix available
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	61da      	str	r2, [r3, #28]


	/*********************** Get TIME ***************************/
	//(Update the GMT Offset at the top of this file)

	memset(buffer, '\0', 12);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	220c      	movs	r2, #12
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f00d fc5b 	bl	800ec50 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 0));
 800139a:	2200      	movs	r2, #0
 800139c:	496d      	ldr	r1, [pc, #436]	; (8001554 <decodeGGA+0x204>)
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa6 	bl	80012f0 <getDataAt>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00d fc57 	bl	800ec60 <strcpy>

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00d fc0e 	bl	800ebd8 <atoi>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a66      	ldr	r2, [pc, #408]	; (8001558 <decodeGGA+0x208>)
 80013c0:	fb82 1203 	smull	r1, r2, r2, r3
 80013c4:	1312      	asrs	r2, r2, #12
 80013c6:	17db      	asrs	r3, r3, #31
 80013c8:	1ad2      	subs	r2, r2, r3
 80013ca:	4b64      	ldr	r3, [pc, #400]	; (800155c <decodeGGA+0x20c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4964      	ldr	r1, [pc, #400]	; (8001560 <decodeGGA+0x210>)
 80013d0:	fb81 0103 	smull	r0, r1, r1, r3
 80013d4:	1149      	asrs	r1, r1, #5
 80013d6:	17db      	asrs	r3, r3, #31
 80013d8:	1acb      	subs	r3, r1, r3
 80013da:	4413      	add	r3, r2
 80013dc:	4a61      	ldr	r2, [pc, #388]	; (8001564 <decodeGGA+0x214>)
 80013de:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00d fbf7 	bl	800ebd8 <atoi>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a5c      	ldr	r2, [pc, #368]	; (8001560 <decodeGGA+0x210>)
 80013ee:	fb82 1203 	smull	r1, r2, r2, r3
 80013f2:	1152      	asrs	r2, r2, #5
 80013f4:	17db      	asrs	r3, r3, #31
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4a59      	ldr	r2, [pc, #356]	; (8001560 <decodeGGA+0x210>)
 80013fa:	fb82 1203 	smull	r1, r2, r2, r3
 80013fe:	1151      	asrs	r1, r2, #5
 8001400:	17da      	asrs	r2, r3, #31
 8001402:	1a8a      	subs	r2, r1, r2
 8001404:	2164      	movs	r1, #100	; 0x64
 8001406:	fb01 f202 	mul.w	r2, r1, r2
 800140a:	1a9a      	subs	r2, r3, r2
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <decodeGGA+0x20c>)
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <decodeGGA+0x210>)
 8001412:	fb83 0301 	smull	r0, r3, r3, r1
 8001416:	1158      	asrs	r0, r3, #5
 8001418:	17cb      	asrs	r3, r1, #31
 800141a:	1ac3      	subs	r3, r0, r3
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	fb00 f303 	mul.w	r3, r0, r3
 8001422:	1acb      	subs	r3, r1, r3
 8001424:	4413      	add	r3, r2
 8001426:	4a50      	ldr	r2, [pc, #320]	; (8001568 <decodeGGA+0x218>)
 8001428:	6013      	str	r3, [r2, #0]

	// adjust time
	if (min > 59) {
 800142a:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <decodeGGA+0x218>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b3b      	cmp	r3, #59	; 0x3b
 8001430:	dc05      	bgt.n	800143e <decodeGGA+0xee>
 8001432:	e00e      	b.n	8001452 <decodeGGA+0x102>
		gga->isfixValid = 0;   // If the fix is not available
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800143a:	2301      	movs	r3, #1
 800143c:	e2b2      	b.n	80019a4 <decodeGGA+0x654>
		min = min-60;
 800143e:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <decodeGGA+0x218>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3b3c      	subs	r3, #60	; 0x3c
 8001444:	4a48      	ldr	r2, [pc, #288]	; (8001568 <decodeGGA+0x218>)
 8001446:	6013      	str	r3, [r2, #0]
		hr++;
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <decodeGGA+0x214>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a45      	ldr	r2, [pc, #276]	; (8001564 <decodeGGA+0x214>)
 8001450:	6013      	str	r3, [r2, #0]
	}
	if (hr<0) {
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <decodeGGA+0x214>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	da09      	bge.n	800146e <decodeGGA+0x11e>
		hr=24+hr;
 800145a:	4b42      	ldr	r3, [pc, #264]	; (8001564 <decodeGGA+0x214>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3318      	adds	r3, #24
 8001460:	4a40      	ldr	r2, [pc, #256]	; (8001564 <decodeGGA+0x214>)
 8001462:	6013      	str	r3, [r2, #0]
		daychange--;
 8001464:	4b41      	ldr	r3, [pc, #260]	; (800156c <decodeGGA+0x21c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <decodeGGA+0x21c>)
 800146c:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24) {
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <decodeGGA+0x214>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b17      	cmp	r3, #23
 8001474:	dd09      	ble.n	800148a <decodeGGA+0x13a>
		hr=hr-24;
 8001476:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <decodeGGA+0x214>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3b18      	subs	r3, #24
 800147c:	4a39      	ldr	r2, [pc, #228]	; (8001564 <decodeGGA+0x214>)
 800147e:	6013      	str	r3, [r2, #0]
		daychange++;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <decodeGGA+0x21c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	4a39      	ldr	r2, [pc, #228]	; (800156c <decodeGGA+0x21c>)
 8001488:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <decodeGGA+0x214>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <decodeGGA+0x218>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4618      	mov	r0, r3
 80014a0:	f00d fb9a 	bl	800ebd8 <atoi>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <decodeGGA+0x210>)
 80014a8:	fb83 1302 	smull	r1, r3, r3, r2
 80014ac:	1159      	asrs	r1, r3, #5
 80014ae:	17d3      	asrs	r3, r2, #31
 80014b0:	1acb      	subs	r3, r1, r3
 80014b2:	2164      	movs	r1, #100	; 0x64
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	6193      	str	r3, [r2, #24]

	/***************** Get LATITUDE  **********************/

	memset(buffer, '\0', 12);
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	220c      	movs	r2, #12
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00d fbc2 	bl	800ec50 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 1));
 80014cc:	2201      	movs	r2, #1
 80014ce:	4921      	ldr	r1, [pc, #132]	; (8001554 <decodeGGA+0x204>)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff0d 	bl	80012f0 <getDataAt>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f00d fbbe 	bl	800ec60 <strcpy>

	if (strlen(buffer) < 6) return 2;  	// If the buffer length is not appropriate, return error
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe31 	bl	8000150 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d801      	bhi.n	80014f8 <decodeGGA+0x1a8>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e255      	b.n	80019a4 <decodeGGA+0x654>

	int16_t num = (atoi(buffer));   	// change the buffer to a number. It will only convert up to decimal
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00d fb6b 	bl	800ebd8 <atoi>
 8001502:	4603      	mov	r3, r0
 8001504:	867b      	strh	r3, [r7, #50]	; 0x32
	int dd = num/100;					// extract the degrees
 8001506:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <decodeGGA+0x210>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1152      	asrs	r2, r2, #5
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b21b      	sxth	r3, r3
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
	int mmint = num%100;				// extract the integer part of minutes
 800151a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <decodeGGA+0x210>)
 8001520:	fb82 1203 	smull	r1, r2, r2, r3
 8001524:	1151      	asrs	r1, r2, #5
 8001526:	17da      	asrs	r2, r3, #31
 8001528:	1a8a      	subs	r2, r1, r2
 800152a:	2164      	movs	r1, #100	; 0x64
 800152c:	fb01 f202 	mul.w	r2, r1, r2
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
	int j = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800153a:	e01c      	b.n	8001576 <decodeGGA+0x226>
		if(j > strlen(buffer)) return 2;
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fe05 	bl	8000150 <strlen>
 8001546:	4602      	mov	r2, r0
 8001548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154a:	429a      	cmp	r2, r3
 800154c:	d210      	bcs.n	8001570 <decodeGGA+0x220>
 800154e:	2302      	movs	r3, #2
 8001550:	e228      	b.n	80019a4 <decodeGGA+0x654>
 8001552:	bf00      	nop
 8001554:	0800fdf8 	.word	0x0800fdf8
 8001558:	68db8bad 	.word	0x68db8bad
 800155c:	20000000 	.word	0x20000000
 8001560:	51eb851f 	.word	0x51eb851f
 8001564:	200000b0 	.word	0x200000b0
 8001568:	200000b4 	.word	0x200000b4
 800156c:	200000c4 	.word	0x200000c4
		j++;   	// Figure out how many digits before the decimal
 8001570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001572:	3301      	adds	r3, #1
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b2e      	cmp	r3, #46	; 0x2e
 8001582:	d1db      	bne.n	800153c <decodeGGA+0x1ec>
	}
	j++;
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	3301      	adds	r3, #1
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
	int declen = (strlen(buffer))-j;  	// calculate the number of digit after decimal
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fdde 	bl	8000150 <strlen>
 8001594:	4602      	mov	r2, r0
 8001596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
	int mmdec = atoi ((char *) buffer+j);  // extract the decimal part of minutes
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	f107 020c 	add.w	r2, r7, #12
 80015a2:	4413      	add	r3, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00d fb17 	bl	800ebd8 <atoi>
 80015aa:	6238      	str	r0, [r7, #32]
	float lat = dd + (mmint + mmdec/pow(10, (declen)))/60;	// combine minutes and convert to degrees
 80015ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ae:	f7fe ff29 	bl	8000404 <__aeabi_i2d>
 80015b2:	4604      	mov	r4, r0
 80015b4:	460d      	mov	r5, r1
 80015b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015b8:	f7fe ff24 	bl	8000404 <__aeabi_i2d>
 80015bc:	4680      	mov	r8, r0
 80015be:	4689      	mov	r9, r1
 80015c0:	6a38      	ldr	r0, [r7, #32]
 80015c2:	f7fe ff1f 	bl	8000404 <__aeabi_i2d>
 80015c6:	4682      	mov	sl, r0
 80015c8:	468b      	mov	fp, r1
 80015ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015cc:	f7fe ff1a 	bl	8000404 <__aeabi_i2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	f04f 0000 	mov.w	r0, #0
 80015d8:	49c3      	ldr	r1, [pc, #780]	; (80018e8 <decodeGGA+0x598>)
 80015da:	f00b fb3d 	bl	800cc58 <pow>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4650      	mov	r0, sl
 80015e4:	4659      	mov	r1, fp
 80015e6:	f7ff f8a1 	bl	800072c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4640      	mov	r0, r8
 80015f0:	4649      	mov	r1, r9
 80015f2:	f7fe fdbb 	bl	800016c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4bba      	ldr	r3, [pc, #744]	; (80018ec <decodeGGA+0x59c>)
 8001604:	f7ff f892 	bl	800072c <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4620      	mov	r0, r4
 800160e:	4629      	mov	r1, r5
 8001610:	f7fe fdac 	bl	800016c <__adddf3>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff fa34 	bl	8000a88 <__aeabi_d2f>
 8001620:	4603      	mov	r3, r0
 8001622:	61fb      	str	r3, [r7, #28]
	gga->lcation.latitude = lat;  		// save the latitude data into the structure
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	601a      	str	r2, [r3, #0]

	gga->lcation.NS = *getDataAt(GGAbuffer, ",", 2);  // save the N/S into the structure
 800162a:	2202      	movs	r2, #2
 800162c:	49b0      	ldr	r1, [pc, #704]	; (80018f0 <decodeGGA+0x5a0>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fe5e 	bl	80012f0 <getDataAt>
 8001634:	4603      	mov	r3, r0
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	711a      	strb	r2, [r3, #4]


	/***********************  GET LONGITUDE **********************/

	memset(buffer, '\0', 12);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	220c      	movs	r2, #12
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f00d fb03 	bl	800ec50 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 3));
 800164a:	2203      	movs	r2, #3
 800164c:	49a8      	ldr	r1, [pc, #672]	; (80018f0 <decodeGGA+0x5a0>)
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe4e 	bl	80012f0 <getDataAt>
 8001654:	4602      	mov	r2, r0
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f00d faff 	bl	800ec60 <strcpy>

	num = (atoi(buffer));  	// change the buffer to the number. It will only convert up to decimal
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4618      	mov	r0, r3
 8001668:	f00d fab6 	bl	800ebd8 <atoi>
 800166c:	4603      	mov	r3, r0
 800166e:	867b      	strh	r3, [r7, #50]	; 0x32
	dd = num/100;			// extract the degrees
 8001670:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001674:	4a9f      	ldr	r2, [pc, #636]	; (80018f4 <decodeGGA+0x5a4>)
 8001676:	fb82 1203 	smull	r1, r2, r2, r3
 800167a:	1152      	asrs	r2, r2, #5
 800167c:	17db      	asrs	r3, r3, #31
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b21b      	sxth	r3, r3
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
	mmint = num%100;		// extract the integer part of minutes
 8001684:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001688:	4a9a      	ldr	r2, [pc, #616]	; (80018f4 <decodeGGA+0x5a4>)
 800168a:	fb82 1203 	smull	r1, r2, r2, r3
 800168e:	1151      	asrs	r1, r2, #5
 8001690:	17da      	asrs	r2, r3, #31
 8001692:	1a8a      	subs	r2, r1, r2
 8001694:	2164      	movs	r1, #100	; 0x64
 8001696:	fb01 f202 	mul.w	r2, r1, r2
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	b21b      	sxth	r3, r3
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
	j = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80016a4:	e00d      	b.n	80016c2 <decodeGGA+0x372>
		if(j > strlen(buffer)) return 2;
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd50 	bl	8000150 <strlen>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d201      	bcs.n	80016bc <decodeGGA+0x36c>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e173      	b.n	80019a4 <decodeGGA+0x654>
		j++;   	// Figure out how many digits before the decimal
 80016bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016be:	3301      	adds	r3, #1
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b2e      	cmp	r3, #46	; 0x2e
 80016ce:	d1ea      	bne.n	80016a6 <decodeGGA+0x356>
	}
	j++;
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	3301      	adds	r3, #1
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;  		// calculate the number of digit after decimal
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fd38 	bl	8000150 <strlen>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
	mmdec = atoi ((char *) buffer+j);  	// extract the decimal part of minutes
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ea:	f107 020c 	add.w	r2, r7, #12
 80016ee:	4413      	add	r3, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00d fa71 	bl	800ebd8 <atoi>
 80016f6:	6238      	str	r0, [r7, #32]
	lat = dd + (mmint + mmdec/pow(10, (declen)))/60;  // combine minutes and convert to degrees
 80016f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016fa:	f7fe fe83 	bl	8000404 <__aeabi_i2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f7fe fe7e 	bl	8000404 <__aeabi_i2d>
 8001708:	4680      	mov	r8, r0
 800170a:	4689      	mov	r9, r1
 800170c:	6a38      	ldr	r0, [r7, #32]
 800170e:	f7fe fe79 	bl	8000404 <__aeabi_i2d>
 8001712:	4682      	mov	sl, r0
 8001714:	468b      	mov	fp, r1
 8001716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001718:	f7fe fe74 	bl	8000404 <__aeabi_i2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	f04f 0000 	mov.w	r0, #0
 8001724:	4970      	ldr	r1, [pc, #448]	; (80018e8 <decodeGGA+0x598>)
 8001726:	f00b fa97 	bl	800cc58 <pow>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4650      	mov	r0, sl
 8001730:	4659      	mov	r1, fp
 8001732:	f7fe fffb 	bl	800072c <__aeabi_ddiv>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe fd15 	bl	800016c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b67      	ldr	r3, [pc, #412]	; (80018ec <decodeGGA+0x59c>)
 8001750:	f7fe ffec 	bl	800072c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fd06 	bl	800016c <__adddf3>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f98e 	bl	8000a88 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	61fb      	str	r3, [r7, #28]
	gga->lcation.longitude = lat;  // save the longitude data into the structure
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	609a      	str	r2, [r3, #8]

	gga->lcation.EW = *getDataAt(GGAbuffer, ",", 4);  // save the E/W into the structure
 8001776:	2204      	movs	r2, #4
 8001778:	495d      	ldr	r1, [pc, #372]	; (80018f0 <decodeGGA+0x5a0>)
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fdb8 	bl	80012f0 <getDataAt>
 8001780:	4603      	mov	r3, r0
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	731a      	strb	r2, [r3, #12]

	/***************** NUMMBER OF SATELLITES  *********************/

	strcpy(buffer, getDataAt(GGAbuffer, ",", 6));
 8001788:	2206      	movs	r2, #6
 800178a:	4959      	ldr	r1, [pc, #356]	; (80018f0 <decodeGGA+0x5a0>)
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fdaf 	bl	80012f0 <getDataAt>
 8001792:	4602      	mov	r2, r0
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f00d fa60 	bl	800ec60 <strcpy>

	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00d fa17 	bl	800ebd8 <atoi>
 80017aa:	4602      	mov	r2, r0
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28

	/***************** HDOP  *********************/

	memset(buffer, '\0', 12);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	220c      	movs	r2, #12
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00d fa49 	bl	800ec50 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 7));
 80017be:	2207      	movs	r2, #7
 80017c0:	494b      	ldr	r1, [pc, #300]	; (80018f0 <decodeGGA+0x5a0>)
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fd94 	bl	80012f0 <getDataAt>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00d fa45 	bl	800ec60 <strcpy>

	num = (atoi(buffer));
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4618      	mov	r0, r3
 80017dc:	f00d f9fc 	bl	800ebd8 <atoi>
 80017e0:	4603      	mov	r3, r0
 80017e2:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80017e8:	e00d      	b.n	8001806 <decodeGGA+0x4b6>
		if(j > strlen(buffer)) return 2;
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fcae 	bl	8000150 <strlen>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d201      	bcs.n	8001800 <decodeGGA+0x4b0>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0d1      	b.n	80019a4 <decodeGGA+0x654>
		j++;   	// Figure out how many digits before the decimal
 8001800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001802:	3301      	adds	r3, #1
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001806:	f107 020c 	add.w	r2, r7, #12
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b2e      	cmp	r3, #46	; 0x2e
 8001812:	d1ea      	bne.n	80017ea <decodeGGA+0x49a>
	}
	j++;
 8001814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001816:	3301      	adds	r3, #1
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fc96 	bl	8000150 <strlen>
 8001824:	4602      	mov	r2, r0
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
	int dec = atoi ((char *) buffer+j);
 800182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	4413      	add	r3, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f00d f9cf 	bl	800ebd8 <atoi>
 800183a:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow(10, (declen)));
 800183c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fddf 	bl	8000404 <__aeabi_i2d>
 8001846:	4604      	mov	r4, r0
 8001848:	460d      	mov	r5, r1
 800184a:	69b8      	ldr	r0, [r7, #24]
 800184c:	f7fe fdda 	bl	8000404 <__aeabi_i2d>
 8001850:	4680      	mov	r8, r0
 8001852:	4689      	mov	r9, r1
 8001854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001856:	f7fe fdd5 	bl	8000404 <__aeabi_i2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	f04f 0000 	mov.w	r0, #0
 8001862:	4921      	ldr	r1, [pc, #132]	; (80018e8 <decodeGGA+0x598>)
 8001864:	f00b f9f8 	bl	800cc58 <pow>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4640      	mov	r0, r8
 800186e:	4649      	mov	r1, r9
 8001870:	f7fe ff5c 	bl	800072c <__aeabi_ddiv>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fc76 	bl	800016c <__adddf3>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f8fe 	bl	8000a88 <__aeabi_d2f>
 800188c:	4603      	mov	r3, r0
 800188e:	61fb      	str	r3, [r7, #28]
	gga->HDOP = lat;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c

	/*************** ALTITUDE CALCULATION ********************/

	memset(buffer, '\0', 12);
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	220c      	movs	r2, #12
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f00d f9d6 	bl	800ec50 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 8));
 80018a4:	2208      	movs	r2, #8
 80018a6:	4912      	ldr	r1, [pc, #72]	; (80018f0 <decodeGGA+0x5a0>)
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fd21 	bl	80012f0 <getDataAt>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00d f9d2 	bl	800ec60 <strcpy>

	num = (atoi(buffer));
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00d f989 	bl	800ebd8 <atoi>
 80018c6:	4603      	mov	r3, r0
 80018c8:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80018ce:	e016      	b.n	80018fe <decodeGGA+0x5ae>
		if(j > strlen(buffer)) return 2;
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fc3b 	bl	8000150 <strlen>
 80018da:	4602      	mov	r2, r0
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20a      	bcs.n	80018f8 <decodeGGA+0x5a8>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e05e      	b.n	80019a4 <decodeGGA+0x654>
 80018e6:	bf00      	nop
 80018e8:	40240000 	.word	0x40240000
 80018ec:	404e0000 	.word	0x404e0000
 80018f0:	0800fdf8 	.word	0x0800fdf8
 80018f4:	51eb851f 	.word	0x51eb851f
		j++;   	// Figure out how many digits before the decimal
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	3301      	adds	r3, #1
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80018fe:	f107 020c 	add.w	r2, r7, #12
 8001902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001904:	4413      	add	r3, r2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b2e      	cmp	r3, #46	; 0x2e
 800190a:	d1e1      	bne.n	80018d0 <decodeGGA+0x580>
	}
	j++;
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	3301      	adds	r3, #1
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fc1a 	bl	8000150 <strlen>
 800191c:	4602      	mov	r2, r0
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
	dec = atoi ((char *) buffer+j);
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	4413      	add	r3, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f00d f953 	bl	800ebd8 <atoi>
 8001932:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow(10, (declen)));
 8001934:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fd63 	bl	8000404 <__aeabi_i2d>
 800193e:	4604      	mov	r4, r0
 8001940:	460d      	mov	r5, r1
 8001942:	69b8      	ldr	r0, [r7, #24]
 8001944:	f7fe fd5e 	bl	8000404 <__aeabi_i2d>
 8001948:	4680      	mov	r8, r0
 800194a:	4689      	mov	r9, r1
 800194c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800194e:	f7fe fd59 	bl	8000404 <__aeabi_i2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	4915      	ldr	r1, [pc, #84]	; (80019b0 <decodeGGA+0x660>)
 800195c:	f00b f97c 	bl	800cc58 <pow>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4640      	mov	r0, r8
 8001966:	4649      	mov	r1, r9
 8001968:	f7fe fee0 	bl	800072c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fbfa 	bl	800016c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f882 	bl	8000a88 <__aeabi_d2f>
 8001984:	4603      	mov	r3, r0
 8001986:	61fb      	str	r3, [r7, #28]
	gga->alt.altitude = lat;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	621a      	str	r2, [r3, #32]

	gga->alt.unit = *getDataAt(GGAbuffer, ",", 9);
 800198e:	2209      	movs	r2, #9
 8001990:	4908      	ldr	r1, [pc, #32]	; (80019b4 <decodeGGA+0x664>)
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fcac 	bl	80012f0 <getDataAt>
 8001998:	4603      	mov	r3, r0
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80019a2:	2300      	movs	r3, #0

}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3738      	adds	r7, #56	; 0x38
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	40240000 	.word	0x40240000
 80019b4:	0800fdf8 	.word	0x0800fdf8

080019b8 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc) {
 80019b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019bc:	b08e      	sub	sp, #56	; 0x38
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]

	char buffer[12];

	if (*getDataAt(RMCbuffer, ",", 1) == 'A') rmc->isValid = 1; // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80019c4:	2201      	movs	r2, #1
 80019c6:	4998      	ldr	r1, [pc, #608]	; (8001c28 <decodeRMC+0x270>)
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fc91 	bl	80012f0 <getDataAt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b41      	cmp	r3, #65	; 0x41
 80019d4:	d118      	bne.n	8001a08 <decodeRMC+0x50>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	615a      	str	r2, [r3, #20]
	else {
		rmc->isValid = 0;
		return 1;
	}

	memset(buffer, '\0', 12);
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	220c      	movs	r2, #12
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00d f933 	bl	800ec50 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 6));
 80019ea:	2206      	movs	r2, #6
 80019ec:	498e      	ldr	r1, [pc, #568]	; (8001c28 <decodeRMC+0x270>)
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fc7e 	bl	80012f0 <getDataAt>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00d f92f 	bl	800ec60 <strcpy>

	int j = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a06:	e012      	b.n	8001a2e <decodeRMC+0x76>
		rmc->isValid = 0;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
		return 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e16e      	b.n	8001cf0 <decodeRMC+0x338>
		if(j > strlen(buffer)) return 2;
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fb9a 	bl	8000150 <strlen>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d201      	bcs.n	8001a28 <decodeRMC+0x70>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e163      	b.n	8001cf0 <decodeRMC+0x338>
		j++;   // same as above
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a2e:	f107 0208 	add.w	r2, r7, #8
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b2e      	cmp	r3, #46	; 0x2e
 8001a3a:	d1ea      	bne.n	8001a12 <decodeRMC+0x5a>
	}

	if (strlen (buffer) > j) {          // if the speed have some valid data
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fb85 	bl	8000150 <strlen>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d948      	bls.n	8001ae0 <decodeRMC+0x128>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4618      	mov	r0, r3
 8001a54:	f00d f8c0 	bl	800ebd8 <atoi>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	867b      	strh	r3, [r7, #50]	; 0x32
		j++;
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	3301      	adds	r3, #1
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fb72 	bl	8000150 <strlen>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a76:	f107 0208 	add.w	r2, r7, #8
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00d f8ab 	bl	800ebd8 <atoi>
 8001a82:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001a84:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fcbb 	bl	8000404 <__aeabi_i2d>
 8001a8e:	4604      	mov	r4, r0
 8001a90:	460d      	mov	r5, r1
 8001a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a94:	f7fe fcb6 	bl	8000404 <__aeabi_i2d>
 8001a98:	4680      	mov	r8, r0
 8001a9a:	4689      	mov	r9, r1
 8001a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a9e:	f7fe fcb1 	bl	8000404 <__aeabi_i2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	4960      	ldr	r1, [pc, #384]	; (8001c2c <decodeRMC+0x274>)
 8001aac:	f00b f8d4 	bl	800cc58 <pow>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4640      	mov	r0, r8
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	f7fe fe38 	bl	800072c <__aeabi_ddiv>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fb52 	bl	800016c <__adddf3>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7fe ffda 	bl	8000a88 <__aeabi_d2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	e003      	b.n	8001ae8 <decodeRMC+0x130>
	}
	else rmc->speed = 0;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]

	// Get Course

	memset(buffer, '\0', 12);
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	220c      	movs	r2, #12
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00d f8ad 	bl	800ec50 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 7));
 8001af6:	2207      	movs	r2, #7
 8001af8:	494b      	ldr	r1, [pc, #300]	; (8001c28 <decodeRMC+0x270>)
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fbf8 	bl	80012f0 <getDataAt>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00d f8a9 	bl	800ec60 <strcpy>

	j = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001b12:	e00d      	b.n	8001b30 <decodeRMC+0x178>
		if(j > strlen(buffer)) return 2;
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fb19 	bl	8000150 <strlen>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d201      	bcs.n	8001b2a <decodeRMC+0x172>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e0e2      	b.n	8001cf0 <decodeRMC+0x338>
		j++;   	// Figure out how many digits before the decimal
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001b30:	f107 0208 	add.w	r2, r7, #8
 8001b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b36:	4413      	add	r3, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b3c:	d1ea      	bne.n	8001b14 <decodeRMC+0x15c>
	}

	if (strlen (buffer) > j){  // if the course have some data
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fb04 	bl	8000150 <strlen>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d948      	bls.n	8001be2 <decodeRMC+0x22a>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00d f83f 	bl	800ebd8 <atoi>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	847b      	strh	r3, [r7, #34]	; 0x22
		j++;
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	3301      	adds	r3, #1
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe faf1 	bl	8000150 <strlen>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b78:	f107 0208 	add.w	r2, r7, #8
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00d f82a 	bl	800ebd8 <atoi>
 8001b84:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001b86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc3a 	bl	8000404 <__aeabi_i2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	69b8      	ldr	r0, [r7, #24]
 8001b96:	f7fe fc35 	bl	8000404 <__aeabi_i2d>
 8001b9a:	4680      	mov	r8, r0
 8001b9c:	4689      	mov	r9, r1
 8001b9e:	69f8      	ldr	r0, [r7, #28]
 8001ba0:	f7fe fc30 	bl	8000404 <__aeabi_i2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	491f      	ldr	r1, [pc, #124]	; (8001c2c <decodeRMC+0x274>)
 8001bae:	f00b f853 	bl	800cc58 <pow>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	4649      	mov	r1, r9
 8001bba:	f7fe fdb7 	bl	800072c <__aeabi_ddiv>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7fe fad1 	bl	800016c <__adddf3>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7fe ff59 	bl	8000a88 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	e003      	b.n	8001bea <decodeRMC+0x232>
	}
	else rmc->course = 0;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]


	// Get Date

	memset(buffer, '\0', 12);
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	220c      	movs	r2, #12
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00d f82c 	bl	800ec50 <memset>
	if (rmc->course == 0) strcpy(buffer, getDataAt(RMCbuffer, ",", 7));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa33 	bl	800106c <__aeabi_fcmpeq>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d011      	beq.n	8001c30 <decodeRMC+0x278>
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	4906      	ldr	r1, [pc, #24]	; (8001c28 <decodeRMC+0x270>)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fb6d 	bl	80012f0 <getDataAt>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00d f81e 	bl	800ec60 <strcpy>
 8001c24:	e010      	b.n	8001c48 <decodeRMC+0x290>
 8001c26:	bf00      	nop
 8001c28:	0800fdf8 	.word	0x0800fdf8
 8001c2c:	40240000 	.word	0x40240000
	else strcpy(buffer, getDataAt(RMCbuffer, ",", 8));
 8001c30:	2208      	movs	r2, #8
 8001c32:	4932      	ldr	r1, [pc, #200]	; (8001cfc <decodeRMC+0x344>)
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fb5b 	bl	80012f0 <getDataAt>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00d f80c 	bl	800ec60 <strcpy>

	if (strlen(buffer) == 6){
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fa7f 	bl	8000150 <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b06      	cmp	r3, #6
 8001c56:	d14a      	bne.n	8001cee <decodeRMC+0x336>
		// Date in the format 070722
		day = atoi(buffer)/10000;  // extract 28
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f00c ffbb 	bl	800ebd8 <atoi>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <decodeRMC+0x348>)
 8001c66:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6a:	1312      	asrs	r2, r2, #12
 8001c6c:	17db      	asrs	r3, r3, #31
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <decodeRMC+0x34c>)
 8001c72:	6013      	str	r3, [r2, #0]
		mon = (atoi(buffer)/100)%100;  // extract 02
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00c ffad 	bl	800ebd8 <atoi>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <decodeRMC+0x350>)
 8001c82:	fb82 1203 	smull	r1, r2, r2, r3
 8001c86:	1152      	asrs	r2, r2, #5
 8001c88:	17db      	asrs	r3, r3, #31
 8001c8a:	1ad2      	subs	r2, r2, r3
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <decodeRMC+0x350>)
 8001c8e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c92:	1159      	asrs	r1, r3, #5
 8001c94:	17d3      	asrs	r3, r2, #31
 8001c96:	1acb      	subs	r3, r1, r3
 8001c98:	2164      	movs	r1, #100	; 0x64
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <decodeRMC+0x354>)
 8001ca2:	6013      	str	r3, [r2, #0]
		yr = atoi(buffer)%100;  // extract 22
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00c ff95 	bl	800ebd8 <atoi>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <decodeRMC+0x350>)
 8001cb2:	fb83 1302 	smull	r1, r3, r3, r2
 8001cb6:	1159      	asrs	r1, r3, #5
 8001cb8:	17d3      	asrs	r3, r2, #31
 8001cba:	1acb      	subs	r3, r1, r3
 8001cbc:	2164      	movs	r1, #100	; 0x64
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <decodeRMC+0x358>)
 8001cc6:	6013      	str	r3, [r2, #0]

		day = day+daychange;   // correction due to GMT shift
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <decodeRMC+0x34c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <decodeRMC+0x35c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <decodeRMC+0x34c>)
 8001cd4:	6013      	str	r3, [r2, #0]

		// save the data into the structure
		rmc->date.Day = day;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <decodeRMC+0x34c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	601a      	str	r2, [r3, #0]
		rmc->date.Mon = mon;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <decodeRMC+0x354>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
		rmc->date.Yr = yr;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <decodeRMC+0x358>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	609a      	str	r2, [r3, #8]
	}
	return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3738      	adds	r7, #56	; 0x38
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cfa:	bf00      	nop
 8001cfc:	0800fdf8 	.word	0x0800fdf8
 8001d00:	68db8bad 	.word	0x68db8bad
 8001d04:	200000b8 	.word	0x200000b8
 8001d08:	51eb851f 	.word	0x51eb851f
 8001d0c:	200000bc 	.word	0x200000bc
 8001d10:	200000c0 	.word	0x200000c0
 8001d14:	200000c4 	.word	0x200000c4

08001d18 <getGPSData>:

void getGPSData (GPSSTRUCT *gpsData) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0b6      	sub	sp, #216	; 0xd8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	char GGA[100];
	char RMC[100];
	unsigned int tail = GetTail ();
 8001d20:	f000 f95a 	bl	8001fd8 <GetTail>
 8001d24:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (Wait_for("GGA")) {
 8001d28:	4818      	ldr	r0, [pc, #96]	; (8001d8c <getGPSData+0x74>)
 8001d2a:	f000 f971 	bl	8002010 <Wait_for>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <getGPSData+0x38>

		Copy_upto("*", GGA);
 8001d34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4815      	ldr	r0, [pc, #84]	; (8001d90 <getGPSData+0x78>)
 8001d3c:	f000 f8d6 	bl	8001eec <Copy_upto>
		decodeGGA(GGA, &gpsData->ggastruct);
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fb01 	bl	8001350 <decodeGGA>
 8001d4e:	e003      	b.n	8001d58 <getGPSData+0x40>
		//Uart_flush();
	}

	else {
		SetTail(tail);
 8001d50:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001d54:	f000 f94c 	bl	8001ff0 <SetTail>
	}

	if (Wait_for("RMC")) {
 8001d58:	480e      	ldr	r0, [pc, #56]	; (8001d94 <getGPSData+0x7c>)
 8001d5a:	f000 f959 	bl	8002010 <Wait_for>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00e      	beq.n	8001d82 <getGPSData+0x6a>
		Copy_upto("*", RMC);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4809      	ldr	r0, [pc, #36]	; (8001d90 <getGPSData+0x78>)
 8001d6c:	f000 f8be 	bl	8001eec <Copy_upto>
		decodeRMC(RMC, &gpsData->rmcstruct);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe1b 	bl	80019b8 <decodeRMC>


	//Uart_flush();
	//return;

}
 8001d82:	bf00      	nop
 8001d84:	37d8      	adds	r7, #216	; 0xd8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	0800fdfc 	.word	0x0800fdfc
 8001d90:	0800fe00 	.word	0x0800fe00
 8001d94:	0800fe04 	.word	0x0800fe04

08001d98 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <Ringbuf_init+0x38>)
 8001d9e:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <Ringbuf_init+0x3c>)
 8001da0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <Ringbuf_init+0x40>)
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <Ringbuf_init+0x44>)
 8001da6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <Ringbuf_init+0x48>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <Ringbuf_init+0x48>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <Ringbuf_init+0x48>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <Ringbuf_init+0x48>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0220 	orr.w	r2, r2, #32
 8001dc6:	60da      	str	r2, [r3, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	200016e8 	.word	0x200016e8
 8001dd4:	200000c8 	.word	0x200000c8
 8001dd8:	200016e4 	.word	0x200016e4
 8001ddc:	200004d0 	.word	0x200004d0
 8001de0:	20000ad4 	.word	0x20000ad4

08001de4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfc:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d009      	beq.n	8001e1e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	79f9      	ldrb	r1, [r7, #7]
 8001e14:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <Uart_read+0x54>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <Uart_read+0x54>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d102      	bne.n	8001e48 <Uart_read+0x20>
  {
    return -1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e013      	b.n	8001e70 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <Uart_read+0x54>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <Uart_read+0x54>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <Uart_read+0x54>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <Uart_read+0x54>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001e6a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return c;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200016e8 	.word	0x200016e8

08001e80 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <IsDataAvailable+0x30>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <IsDataAvailable+0x30>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200016e8 	.word	0x200016e8

08001eb4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <Uart_peek+0x34>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <Uart_peek+0x34>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d102      	bne.n	8001ed2 <Uart_peek+0x1e>
  {
    return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	e006      	b.n	8001ee0 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <Uart_peek+0x34>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <Uart_peek+0x34>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	200016e8 	.word	0x200016e8

08001eec <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe f928 	bl	8000150 <strlen>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001f08:	e01e      	b.n	8001f48 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <Copy_upto+0xe4>)
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <Copy_upto+0xe4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	4403      	add	r3, r0
 8001f1c:	5c8a      	ldrb	r2, [r1, r2]
 8001f1e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <Copy_upto+0xe4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <Copy_upto+0xe4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001f32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			indx++;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001f3c:	bf00      	nop
 8001f3e:	f7ff ff9f 	bl	8001e80 <IsDataAvailable>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0fa      	beq.n	8001f3e <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001f48:	f7ff ffb4 	bl	8001eb4 <Uart_peek>
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4299      	cmp	r1, r3
 8001f58:	d1d7      	bne.n	8001f0a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001f5a:	e01d      	b.n	8001f98 <Copy_upto+0xac>
	{
		so_far++;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001f62:	f7ff ff61 	bl	8001e28 <Uart_read>
 8001f66:	4601      	mov	r1, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	613a      	str	r2, [r7, #16]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	b2ca      	uxtb	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d101      	bne.n	8001f84 <Copy_upto+0x98>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e020      	b.n	8001fc6 <Copy_upto+0xda>
		timeout = TIMEOUT_DEF;
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <Copy_upto+0xe8>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 8001f8a:	f7ff ff79 	bl	8001e80 <IsDataAvailable>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <Copy_upto+0xac>
 8001f94:	2300      	movs	r3, #0
 8001f96:	e016      	b.n	8001fc6 <Copy_upto+0xda>
	while (Uart_peek() == string [so_far])
 8001f98:	f7ff ff8c 	bl	8001eb4 <Uart_peek>
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4299      	cmp	r1, r3
 8001fa8:	d0d8      	beq.n	8001f5c <Copy_upto+0x70>
	}

	if (so_far != len)
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d002      	beq.n	8001fb8 <Copy_upto+0xcc>
	{
		so_far = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
		goto again;
 8001fb6:	e7a7      	b.n	8001f08 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d101      	bne.n	8001fc4 <Copy_upto+0xd8>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <Copy_upto+0xda>
	else return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200016e8 	.word	0x200016e8
 8001fd4:	200016ec 	.word	0x200016ec

08001fd8 <GetTail>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions

unsigned int GetTail () {
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
	return _rx_buffer->tail;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <GetTail+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404

}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	200016e8 	.word	0x200016e8

08001ff0 <SetTail>:

void SetTail (unsigned int _tail) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	_rx_buffer->tail = _tail;
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <SetTail+0x1c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	200016e8 	.word	0x200016e8

08002010 <Wait_for>:
int Wait_for (char *string)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	int so_far = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe f897 	bl	8000150 <strlen>
 8002022:	4603      	mov	r3, r0
 8002024:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002026:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <Wait_for+0xe4>)
 8002028:	2201      	movs	r2, #1
 800202a:	801a      	strh	r2, [r3, #0]
	if ((IsDataAvailable())) {  // let's wait for the data to show up
 800202c:	f7ff ff28 	bl	8001e80 <IsDataAvailable>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d058      	beq.n	80020e8 <Wait_for+0xd8>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002036:	e017      	b.n	8002068 <Wait_for+0x58>
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <Wait_for+0xe8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <Wait_for+0xe8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002048:	429a      	cmp	r2, r3
 800204a:	d00b      	beq.n	8002064 <Wait_for+0x54>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <Wait_for+0xe8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <Wait_for+0xe8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800205e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002062:	e001      	b.n	8002068 <Wait_for+0x58>
		}

		else
		{
			//Uart_flush();
			return 0;
 8002064:	2300      	movs	r3, #0
 8002066:	e040      	b.n	80020ea <Wait_for+0xda>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002068:	f7ff ff24 	bl	8001eb4 <Uart_peek>
 800206c:	4601      	mov	r1, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4299      	cmp	r1, r3
 8002078:	d1de      	bne.n	8002038 <Wait_for+0x28>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800207a:	e01d      	b.n	80020b8 <Wait_for+0xa8>
	{
		// now we will peek for the other letters too
		so_far++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3301      	adds	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <Wait_for+0xe8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <Wait_for+0xe8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002094:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		if (so_far == len) return 1;
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d101      	bne.n	80020a4 <Wait_for+0x94>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e022      	b.n	80020ea <Wait_for+0xda>
		timeout = TIMEOUT_DEF;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <Wait_for+0xe4>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 80020aa:	f7ff fee9 	bl	8001e80 <IsDataAvailable>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <Wait_for+0xa8>
 80020b4:	2300      	movs	r3, #0
 80020b6:	e018      	b.n	80020ea <Wait_for+0xda>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80020b8:	f7ff fefc 	bl	8001eb4 <Uart_peek>
 80020bc:	4601      	mov	r1, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	4299      	cmp	r1, r3
 80020c8:	d0d8      	beq.n	800207c <Wait_for+0x6c>
	}

	if (so_far != len)
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d002      	beq.n	80020d8 <Wait_for+0xc8>
	{
		so_far = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
		goto again;
 80020d6:	e7a6      	b.n	8002026 <Wait_for+0x16>
	}

	if (so_far == len)
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d101      	bne.n	80020e4 <Wait_for+0xd4>
		{
		//Uart_flush();
		return 1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e002      	b.n	80020ea <Wait_for+0xda>

		}
	else {
		//Uart_flush();
		return 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <Wait_for+0xda>
	}
}

	else {
		return 0;
 80020e8:	2300      	movs	r3, #0
	}

}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200016ec 	.word	0x200016ec
 80020f8:	200016e8 	.word	0x200016e8

080020fc <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d013      	beq.n	8002146 <Uart_isr+0x4a>
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00e      	beq.n	8002146 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <Uart_isr+0xb4>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fe50 	bl	8001de4 <store_char>
        return;
 8002144:	e031      	b.n	80021aa <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b00      	cmp	r3, #0
 800214e:	d02c      	beq.n	80021aa <Uart_isr+0xae>
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d027      	beq.n	80021aa <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <Uart_isr+0xb8>)
 800215c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <Uart_isr+0xb8>)
 8002162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002166:	429a      	cmp	r2, r3
 8002168:	d108      	bne.n	800217c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800217a:	e015      	b.n	80021a8 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <Uart_isr+0xb8>)
 800217e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <Uart_isr+0xb8>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <Uart_isr+0xb8>)
 800218a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800218e:	3301      	adds	r3, #1
 8002190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <Uart_isr+0xb8>)
 8002196:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	7bba      	ldrb	r2, [r7, #14]
 80021a6:	605a      	str	r2, [r3, #4]
    	return;
 80021a8:	bf00      	nop
    }
}
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200016e8 	.word	0x200016e8
 80021b4:	200004d0 	.word	0x200004d0

080021b8 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 80021c2:	2300      	movs	r3, #0
 80021c4:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 80021c6:	2301      	movs	r3, #1
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	1dbb      	adds	r3, r7, #6
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	22d0      	movs	r2, #208	; 0xd0
 80021d6:	21ef      	movs	r1, #239	; 0xef
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <read_chip_id+0x3c>)
 80021da:	f004 fe57 	bl	8006e8c <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 80021de:	79bb      	ldrb	r3, [r7, #6]
 80021e0:	2b55      	cmp	r3, #85	; 0x55
 80021e2:	d001      	beq.n	80021e8 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 80021e8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200008e0 	.word	0x200008e0

080021f8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8002204:	2300      	movs	r3, #0
 8002206:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d81a      	bhi.n	8002244 <set_oss+0x4c>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <set_oss+0x1c>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002225 	.word	0x08002225
 8002218:	0800222d 	.word	0x0800222d
 800221c:	08002235 	.word	0x08002235
 8002220:	0800223d 	.word	0x0800223d
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2205      	movs	r2, #5
 8002228:	705a      	strb	r2, [r3, #1]
			break;
 800222a:	e00f      	b.n	800224c <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2208      	movs	r2, #8
 8002230:	705a      	strb	r2, [r3, #1]
			break;
 8002232:	e00b      	b.n	800224c <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	220e      	movs	r2, #14
 8002238:	705a      	strb	r2, [r3, #1]
			break;
 800223a:	e007      	b.n	800224c <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	221a      	movs	r2, #26
 8002240:	705a      	strb	r2, [r3, #1]
			break;
 8002242:	e003      	b.n	800224c <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2208      	movs	r2, #8
 8002248:	705a      	strb	r2, [r3, #1]
			break;
 800224a:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800225c:	2301      	movs	r3, #1
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	2302      	movs	r3, #2
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	22f4      	movs	r2, #244	; 0xf4
 800226e:	21ee      	movs	r1, #238	; 0xee
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <set_oss+0x88>)
 8002272:	f004 fd11 	bl	8006c98 <HAL_I2C_Mem_Write>
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200008e0 	.word	0x200008e0

08002284 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	; 0x38
 8002288:	af04      	add	r7, sp, #16
 800228a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 80022b2:	2301      	movs	r3, #1
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	2316      	movs	r3, #22
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	22aa      	movs	r2, #170	; 0xaa
 80022c4:	21ef      	movs	r1, #239	; 0xef
 80022c6:	4828      	ldr	r0, [pc, #160]	; (8002368 <read_calib_data+0xe4>)
 80022c8:	f004 fde0 	bl	8006e8c <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022d2:	e03e      	b.n	8002352 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80022d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022de:	4413      	add	r3, r2
 80022e0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	b219      	sxth	r1, r3
 80022e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80022ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022f0:	4413      	add	r3, r2
 80022f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4403      	add	r3, r0
 8002302:	430a      	orrs	r2, r1
 8002304:	b212      	sxth	r2, r2
 8002306:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8002308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2da      	uxtb	r2, r3
 8002320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	440b      	add	r3, r1
 800232a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 8002342:	2302      	movs	r3, #2
 8002344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8002348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800234c:	3301      	adds	r3, #1
 800234e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002352:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002356:	2b0b      	cmp	r3, #11
 8002358:	d9bc      	bls.n	80022d4 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800235a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800235e:	4618      	mov	r0, r3
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200008e0 	.word	0x200008e0

0800236c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2204      	movs	r2, #4
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f00c fc68 	bl	800ec50 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8002380:	687c      	ldr	r4, [r7, #4]
 8002382:	f7ff ff19 	bl	80021b8 <read_chip_id>
 8002386:	4603      	mov	r3, r0
 8002388:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	687c      	ldr	r4, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff77 	bl	8002284 <read_calib_data>
 8002396:	4603      	mov	r3, r0
 8002398:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3338      	adds	r3, #56	; 0x38
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff28 	bl	80021f8 <set_oss>
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 80023b6:	232e      	movs	r3, #46	; 0x2e
 80023b8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80023ba:	2301      	movs	r3, #1
 80023bc:	9302      	str	r3, [sp, #8]
 80023be:	2301      	movs	r3, #1
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	22f4      	movs	r2, #244	; 0xf4
 80023ca:	21ee      	movs	r1, #238	; 0xee
 80023cc:	4803      	ldr	r0, [pc, #12]	; (80023dc <write_ut+0x2c>)
 80023ce:	f004 fc63 	bl	8006c98 <HAL_I2C_Mem_Write>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200008e0 	.word	0x200008e0

080023e0 <read_ut>:

int32_t read_ut (void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 80023e6:	2301      	movs	r3, #1
 80023e8:	9302      	str	r3, [sp, #8]
 80023ea:	2302      	movs	r3, #2
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	22f6      	movs	r2, #246	; 0xf6
 80023f6:	21ef      	movs	r1, #239	; 0xef
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <read_ut+0x30>)
 80023fa:	f004 fd47 	bl	8006e8c <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80023fe:	793b      	ldrb	r3, [r7, #4]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	797a      	ldrb	r2, [r7, #5]
 8002404:	4313      	orrs	r3, r2
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200008e0 	.word	0x200008e0

08002414 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fe64 	bl	80010fc <__aeabi_f2iz>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	895b      	ldrh	r3, [r3, #10]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	8912      	ldrh	r2, [r2, #8]
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	13db      	asrs	r3, r3, #15
 8002446:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800244e:	02da      	lsls	r2, r3, #11
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002456:	4619      	mov	r1, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	440b      	add	r3, r1
 800245c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002460:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	441a      	add	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	3308      	adds	r3, #8
 8002472:	111b      	asrs	r3, r3, #4
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fc11 	bl	8000c9c <__aeabi_i2f>
 800247a:	4603      	mov	r3, r0
 800247c:	490e      	ldr	r1, [pc, #56]	; (80024b8 <get_temp+0xa4>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fc60 	bl	8000d44 <__aeabi_fmul>
 8002484:	4603      	mov	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8002488:	490c      	ldr	r1, [pc, #48]	; (80024bc <get_temp+0xa8>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7fe fe02 	bl	8001094 <__aeabi_fcmple>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <get_temp+0x90>
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <get_temp+0xac>)
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f7fe fe05 	bl	80010a8 <__aeabi_fcmpge>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2203      	movs	r2, #3
 80024a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 80024ac:	68fb      	ldr	r3, [r7, #12]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	3dcccccd 	.word	0x3dcccccd
 80024bc:	c2200000 	.word	0xc2200000
 80024c0:	42aa0000 	.word	0x42aa0000

080024c4 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <write_up+0x38>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	803b      	strh	r3, [r7, #0]
 80024d0:	2300      	movs	r3, #0
 80024d2:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 80024d8:	2334      	movs	r3, #52	; 0x34
 80024da:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80024dc:	2301      	movs	r3, #1
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	2301      	movs	r3, #1
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	463b      	mov	r3, r7
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2301      	movs	r3, #1
 80024ea:	22f4      	movs	r2, #244	; 0xf4
 80024ec:	21ee      	movs	r1, #238	; 0xee
 80024ee:	4804      	ldr	r0, [pc, #16]	; (8002500 <write_up+0x3c>)
 80024f0:	f004 fbd2 	bl	8006c98 <HAL_I2C_Mem_Write>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	0800fe08 	.word	0x0800fe08
 8002500:	200008e0 	.word	0x200008e0

08002504 <read_up>:

int32_t read_up (oss_t oss)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af04      	add	r7, sp, #16
 800250a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <read_up+0x54>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	2300      	movs	r3, #0
 8002514:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 800251a:	2301      	movs	r3, #1
 800251c:	9302      	str	r3, [sp, #8]
 800251e:	2303      	movs	r3, #3
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2301      	movs	r3, #1
 800252a:	22f6      	movs	r2, #246	; 0xf6
 800252c:	21ef      	movs	r1, #239	; 0xef
 800252e:	480b      	ldr	r0, [pc, #44]	; (800255c <read_up+0x58>)
 8002530:	f004 fcac 	bl	8006e8c <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 8002534:	7a3b      	ldrb	r3, [r7, #8]
 8002536:	041a      	lsls	r2, r3, #16
 8002538:	7a7b      	ldrb	r3, [r7, #9]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4413      	add	r3, r2
 800253e:	7aba      	ldrb	r2, [r7, #10]
 8002540:	441a      	add	r2, r3
 8002542:	793b      	ldrb	r3, [r7, #4]
 8002544:	f1c3 0308 	rsb	r3, r3, #8
 8002548:	fa42 f303 	asr.w	r3, r2, r3
 800254c:	60fb      	str	r3, [r7, #12]
	return up;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	0800fe08 	.word	0x0800fe08
 800255c:	200008e0 	.word	0x200008e0

08002560 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8002560:	b084      	sub	sp, #16
 8002562:	b480      	push	{r7}
 8002564:	b089      	sub	sp, #36	; 0x24
 8002566:	af00      	add	r7, sp, #0
 8002568:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800256c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8002578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800257e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8002580:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002584:	461a      	mov	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fb03 f303 	mul.w	r3, r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	da01      	bge.n	8002594 <get_pressure+0x34>
 8002590:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002594:	131b      	asrs	r3, r3, #12
 8002596:	fb03 f302 	mul.w	r3, r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	da01      	bge.n	80025a2 <get_pressure+0x42>
 800259e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80025a2:	12db      	asrs	r3, r3, #11
 80025a4:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 80025a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025aa:	461a      	mov	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fb03 f302 	mul.w	r3, r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da01      	bge.n	80025ba <get_pressure+0x5a>
 80025b6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80025ba:	12db      	asrs	r3, r3, #11
 80025bc:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 80025c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80025ca:	009a      	lsls	r2, r3, #2
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80025d4:	4093      	lsls	r3, r2
 80025d6:	3302      	adds	r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da00      	bge.n	80025de <get_pressure+0x7e>
 80025dc:	3303      	adds	r3, #3
 80025de:	109b      	asrs	r3, r3, #2
 80025e0:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 80025e2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80025e6:	461a      	mov	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fb03 f302 	mul.w	r3, r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da02      	bge.n	80025f8 <get_pressure+0x98>
 80025f2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80025f6:	331f      	adds	r3, #31
 80025f8:	135b      	asrs	r3, r3, #13
 80025fa:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80025fc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002600:	461a      	mov	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fb03 f303 	mul.w	r3, r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	da01      	bge.n	8002610 <get_pressure+0xb0>
 800260c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002610:	131b      	asrs	r3, r3, #12
 8002612:	fb03 f302 	mul.w	r3, r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	da02      	bge.n	8002620 <get_pressure+0xc0>
 800261a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800261e:	33ff      	adds	r3, #255	; 0xff
 8002620:	141b      	asrs	r3, r3, #16
 8002622:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4413      	add	r3, r2
 800262a:	3302      	adds	r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	da00      	bge.n	8002632 <get_pressure+0xd2>
 8002630:	3303      	adds	r3, #3
 8002632:	109b      	asrs	r3, r3, #2
 8002634:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8002636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002640:	fb03 f302 	mul.w	r3, r3, r2
 8002644:	0bdb      	lsrs	r3, r3, #15
 8002646:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8002648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8002654:	4611      	mov	r1, r2
 8002656:	f24c 3250 	movw	r2, #50000	; 0xc350
 800265a:	410a      	asrs	r2, r1
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db06      	blt.n	8002676 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	005a      	lsls	r2, r3, #1
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	e005      	b.n	8002682 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	da00      	bge.n	800268a <get_pressure+0x12a>
 8002688:	33ff      	adds	r3, #255	; 0xff
 800268a:	121b      	asrs	r3, r3, #8
 800268c:	461a      	mov	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da00      	bge.n	8002696 <get_pressure+0x136>
 8002694:	33ff      	adds	r3, #255	; 0xff
 8002696:	121b      	asrs	r3, r3, #8
 8002698:	fb03 f302 	mul.w	r3, r3, r2
 800269c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f640 32de 	movw	r2, #3038	; 0xbde
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da02      	bge.n	80026b2 <get_pressure+0x152>
 80026ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80026b0:	33ff      	adds	r3, #255	; 0xff
 80026b2:	141b      	asrs	r3, r3, #16
 80026b4:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <get_pressure+0x194>)
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	da02      	bge.n	80026c8 <get_pressure+0x168>
 80026c2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80026c6:	33ff      	adds	r3, #255	; 0xff
 80026c8:	141b      	asrs	r3, r3, #16
 80026ca:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da00      	bge.n	80026dc <get_pressure+0x17c>
 80026da:	330f      	adds	r3, #15
 80026dc:	111b      	asrs	r3, r3, #4
 80026de:	461a      	mov	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]

	return p;
 80026e6:	69fb      	ldr	r3, [r7, #28]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	; 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	b004      	add	sp, #16
 80026f2:	4770      	bx	lr
 80026f4:	ffffe343 	.word	0xffffe343

080026f8 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fac6 	bl	8000c9c <__aeabi_i2f>
 8002710:	4603      	mov	r3, r0
 8002712:	4923      	ldr	r1, [pc, #140]	; (80027a0 <get_altitude+0xa8>)
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fbc9 	bl	8000eac <__aeabi_fdiv>
 800271a:	4603      	mov	r3, r0
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fe83 	bl	8000428 <__aeabi_f2d>
 8002722:	a31b      	add	r3, pc, #108	; (adr r3, 8002790 <get_altitude+0x98>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f00a fa96 	bl	800cc58 <pow>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	f04f 0000 	mov.w	r0, #0
 8002734:	491b      	ldr	r1, [pc, #108]	; (80027a4 <get_altitude+0xac>)
 8002736:	f7fd fd17 	bl	8000168 <__aeabi_dsub>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	a315      	add	r3, pc, #84	; (adr r3, 8002798 <get_altitude+0xa0>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd fec6 	bl	80004d8 <__aeabi_dmul>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe f998 	bl	8000a88 <__aeabi_d2f>
 8002758:	4603      	mov	r3, r0
 800275a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800275c:	4912      	ldr	r1, [pc, #72]	; (80027a8 <get_altitude+0xb0>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7fe fc98 	bl	8001094 <__aeabi_fcmple>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <get_altitude+0x80>
 800276a:	4910      	ldr	r1, [pc, #64]	; (80027ac <get_altitude+0xb4>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7fe fc9b 	bl	80010a8 <__aeabi_fcmpge>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2205      	movs	r2, #5
 800277c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	f3af 8000 	nop.w
 8002790:	ccd9456c 	.word	0xccd9456c
 8002794:	3fc85b95 	.word	0x3fc85b95
 8002798:	00000000 	.word	0x00000000
 800279c:	40e5a540 	.word	0x40e5a540
 80027a0:	47c5e680 	.word	0x47c5e680
 80027a4:	3ff00000 	.word	0x3ff00000
 80027a8:	c3fa0000 	.word	0xc3fa0000
 80027ac:	460ca000 	.word	0x460ca000

080027b0 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
	return b_counter;
 80027b4:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <get_b_counter+0x10>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	200008d8 	.word	0x200008d8

080027c4 <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

	b_counter++;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <set_b_counter+0x30>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <set_b_counter+0x30>)
 80027d4:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <set_b_counter+0x30>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4293      	cmp	r3, r2
 80027e0:	d202      	bcs.n	80027e8 <set_b_counter+0x24>
		b_counter = 0;
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <set_b_counter+0x30>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
	}
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200008d8 	.word	0x200008d8

080027f8 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f00a f9bb 	bl	800cb7c <cosf>
 8002806:	4603      	mov	r3, r0
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f00a f9e7 	bl	800cbec <sinf>
 800281e:	4603      	mov	r3, r0
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_Z8lla2ecefPfS_>:
 *  Created on: Jul 21, 2022
 *      Author: Kerim
 */
#include <coordinates.hpp>

void lla2ecef(float lla[3], float ecef[3]) {
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	float deg2rad = M_PI/180.0;
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <_Z8lla2ecefPfS_+0x168>)
 8002834:	617b      	str	r3, [r7, #20]
	float lat = deg2rad*lla[0];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4619      	mov	r1, r3
 800283c:	6978      	ldr	r0, [r7, #20]
 800283e:	f7fe fa81 	bl	8000d44 <__aeabi_fmul>
 8002842:	4603      	mov	r3, r0
 8002844:	613b      	str	r3, [r7, #16]
	float lon = deg2rad*lla[1];
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7fe fa78 	bl	8000d44 <__aeabi_fmul>
 8002854:	4603      	mov	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]
	float h = lla[2];
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	60bb      	str	r3, [r7, #8]

	ecef[0] = (Nlla+h)*cos(lat)*cos(lon);
 800285e:	68b8      	ldr	r0, [r7, #8]
 8002860:	f7fd fde2 	bl	8000428 <__aeabi_f2d>
 8002864:	a346      	add	r3, pc, #280	; (adr r3, 8002980 <_Z8lla2ecefPfS_+0x158>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd fc7f 	bl	800016c <__adddf3>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4614      	mov	r4, r2
 8002874:	461d      	mov	r5, r3
 8002876:	6938      	ldr	r0, [r7, #16]
 8002878:	f7ff ffbe 	bl	80027f8 <_ZSt3cosf>
 800287c:	4603      	mov	r3, r0
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fdd2 	bl	8000428 <__aeabi_f2d>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4620      	mov	r0, r4
 800288a:	4629      	mov	r1, r5
 800288c:	f7fd fe24 	bl	80004d8 <__aeabi_dmul>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4614      	mov	r4, r2
 8002896:	461d      	mov	r5, r3
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ffad 	bl	80027f8 <_ZSt3cosf>
 800289e:	4603      	mov	r3, r0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fdc1 	bl	8000428 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd fe13 	bl	80004d8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f8e5 	bl	8000a88 <__aeabi_d2f>
 80028be:	4602      	mov	r2, r0
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	601a      	str	r2, [r3, #0]
	ecef[1] = (Nlla+h)*cos(lat)*sin(lon);
 80028c4:	68b8      	ldr	r0, [r7, #8]
 80028c6:	f7fd fdaf 	bl	8000428 <__aeabi_f2d>
 80028ca:	a32d      	add	r3, pc, #180	; (adr r3, 8002980 <_Z8lla2ecefPfS_+0x158>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fd fc4c 	bl	800016c <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4614      	mov	r4, r2
 80028da:	461d      	mov	r5, r3
 80028dc:	6938      	ldr	r0, [r7, #16]
 80028de:	f7ff ff8b 	bl	80027f8 <_ZSt3cosf>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fd9f 	bl	8000428 <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4620      	mov	r0, r4
 80028f0:	4629      	mov	r1, r5
 80028f2:	f7fd fdf1 	bl	80004d8 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4614      	mov	r4, r2
 80028fc:	461d      	mov	r5, r3
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff ff86 	bl	8002810 <_ZSt3sinf>
 8002904:	4603      	mov	r3, r0
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fd8e 	bl	8000428 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	f7fd fde0 	bl	80004d8 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	1d1c      	adds	r4, r3, #4
 8002924:	f7fe f8b0 	bl	8000a88 <__aeabi_d2f>
 8002928:	4603      	mov	r3, r0
 800292a:	6023      	str	r3, [r4, #0]
	ecef[2] = ((1-e*e)*Nlla+h)*sin(lat);
 800292c:	68b8      	ldr	r0, [r7, #8]
 800292e:	f7fd fd7b 	bl	8000428 <__aeabi_f2d>
 8002932:	a315      	add	r3, pc, #84	; (adr r3, 8002988 <_Z8lla2ecefPfS_+0x160>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fc18 	bl	800016c <__adddf3>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4614      	mov	r4, r2
 8002942:	461d      	mov	r5, r3
 8002944:	6938      	ldr	r0, [r7, #16]
 8002946:	f7ff ff63 	bl	8002810 <_ZSt3sinf>
 800294a:	4603      	mov	r3, r0
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fd6b 	bl	8000428 <__aeabi_f2d>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4620      	mov	r0, r4
 8002958:	4629      	mov	r1, r5
 800295a:	f7fd fdbd 	bl	80004d8 <__aeabi_dmul>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f103 0408 	add.w	r4, r3, #8
 800296c:	f7fe f88c 	bl	8000a88 <__aeabi_d2f>
 8002970:	4603      	mov	r3, r0
 8002972:	6023      	str	r3, [r4, #0]
/*
	ecef[0] = 1;
	ecef[1] = 2;
	ecef[2] = 4;
	*/
}
 8002974:	bf00      	nop
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bdb0      	pop	{r4, r5, r7, pc}
 800297c:	f3af 8000 	nop.w
 8002980:	00000000 	.word	0x00000000
 8002984:	4158549d 	.word	0x4158549d
 8002988:	8ae0b0af 	.word	0x8ae0b0af
 800298c:	41585457 	.word	0x41585457
 8002990:	3c8efa35 	.word	0x3c8efa35

08002994 <_Z8ecef2nedPfS_S_S_>:

void ecef2ned(float ecef[3], float ecef0[3], float lla0[3], float vned[2]) {
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
	float dxecef = ecef[0]- ecef0[0];
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7fe f8bf 	bl	8000b30 <__aeabi_fsub>
 80029b2:	4603      	mov	r3, r0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
	float dyecef = ecef[1]- ecef0[1];
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3304      	adds	r3, #4
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3304      	adds	r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f7fe f8b3 	bl	8000b30 <__aeabi_fsub>
 80029ca:	4603      	mov	r3, r0
 80029cc:	623b      	str	r3, [r7, #32]
	float dzecef = ecef[2] -ecef0[2];
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3308      	adds	r3, #8
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	3308      	adds	r3, #8
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7fe f8a7 	bl	8000b30 <__aeabi_fsub>
 80029e2:	4603      	mov	r3, r0
 80029e4:	61fb      	str	r3, [r7, #28]

	float lat0 = lla0[0];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	61bb      	str	r3, [r7, #24]
	float lon0 = lla0[1];
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	617b      	str	r3, [r7, #20]

	vned[1]=  -sin(lon0)*dxecef + cos(lon0)*dyecef;
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff0c 	bl	8002810 <_ZSt3sinf>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe f99f 	bl	8000d44 <__aeabi_fmul>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461d      	mov	r5, r3
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff fef4 	bl	80027f8 <_ZSt3cosf>
 8002a10:	4603      	mov	r3, r0
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe f995 	bl	8000d44 <__aeabi_fmul>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	1d1c      	adds	r4, r3, #4
 8002a22:	4611      	mov	r1, r2
 8002a24:	4628      	mov	r0, r5
 8002a26:	f7fe f885 	bl	8000b34 <__addsf3>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6023      	str	r3, [r4, #0]
	vned[0] = -sin(lat0)*cos(lon0)*dxecef - sin(lat0)*sin(lon0)*dyecef + cos(lat0)*dzecef;
 8002a2e:	69b8      	ldr	r0, [r7, #24]
 8002a30:	f7ff feee 	bl	8002810 <_ZSt3sinf>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff fedc 	bl	80027f8 <_ZSt3cosf>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4619      	mov	r1, r3
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7fe f97d 	bl	8000d44 <__aeabi_fmul>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe f978 	bl	8000d44 <__aeabi_fmul>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461d      	mov	r5, r3
 8002a58:	69b8      	ldr	r0, [r7, #24]
 8002a5a:	f7ff fed9 	bl	8002810 <_ZSt3sinf>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	6978      	ldr	r0, [r7, #20]
 8002a62:	f7ff fed5 	bl	8002810 <_ZSt3sinf>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7fe f96a 	bl	8000d44 <__aeabi_fmul>
 8002a70:	4603      	mov	r3, r0
 8002a72:	6a39      	ldr	r1, [r7, #32]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe f965 	bl	8000d44 <__aeabi_fmul>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f7fe f856 	bl	8000b30 <__aeabi_fsub>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461c      	mov	r4, r3
 8002a88:	69b8      	ldr	r0, [r7, #24]
 8002a8a:	f7ff feb5 	bl	80027f8 <_ZSt3cosf>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	69f9      	ldr	r1, [r7, #28]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f956 	bl	8000d44 <__aeabi_fmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe f849 	bl	8000b34 <__addsf3>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	601a      	str	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ab4 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8002aba:	2351      	movs	r3, #81	; 0x51
 8002abc:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8002abe:	1dba      	adds	r2, r7, #6
 8002ac0:	2364      	movs	r3, #100	; 0x64
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	21e0      	movs	r1, #224	; 0xe0
 8002ac8:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <request_range+0x2c>)
 8002aca:	f003 fd87 	bl	80065dc <HAL_I2C_Master_Transmit>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <request_range+0x30>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]

}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200008e0 	.word	0x200008e0
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <getRange+0x34>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			write = 1;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <getRange+0x38>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8002afa:	1d3a      	adds	r2, r7, #4
 8002afc:	2364      	movs	r3, #100	; 0x64
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2302      	movs	r3, #2
 8002b02:	21e1      	movs	r1, #225	; 0xe1
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <getRange+0x3c>)
 8002b06:	f003 fe67 	bl	80067d8 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8002b0a:	793b      	ldrb	r3, [r7, #4]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	797a      	ldrb	r2, [r7, #5]
 8002b10:	4313      	orrs	r3, r2



	//return -1;

}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200016ee 	.word	0x200016ee
 8002b20:	20000004 	.word	0x20000004
 8002b24:	200008e0 	.word	0x200008e0

08002b28 <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

	u_counter++;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <set_ucounter+0x30>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <set_ucounter+0x30>)
 8002b38:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <set_ucounter+0x30>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d202      	bcs.n	8002b4c <set_ucounter+0x24>
		u_counter = 0;
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <set_ucounter+0x30>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
	}
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	200008dc 	.word	0x200008dc

08002b5c <get_ucounter>:

int get_ucounter(void) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	return u_counter;
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <get_ucounter+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	200008dc 	.word	0x200008dc

08002b70 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f00a f939 	bl	800ce08 <asinf>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f009 fedb 	bl	800c964 <atanf>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f00a f945 	bl	800ce54 <atan2f>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f00a f93b 	bl	800ce58 <sqrtf>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	0000      	movs	r0, r0
	...

08002bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bf4:	f002 fe00 	bl	80057f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8002bf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bfc:	f002 fe5e 	bl	80058bc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c00:	f000 f8d8 	bl	8002db4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c04:	f000 fc12 	bl	800342c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002c08:	f000 fbf2 	bl	80033f0 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002c0c:	f000 f922 	bl	8002e54 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002c10:	f000 fa1e 	bl	8003050 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8002c14:	f000 f952 	bl	8002ebc <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8002c18:	f000 fb8c 	bl	8003334 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8002c1c:	f000 fa74 	bl	8003108 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002c20:	f000 fafc 	bl	800321c <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8002c24:	f000 fb58 	bl	80032d8 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8002c28:	f000 fbb4 	bl	8003394 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8002c2c:	2209      	movs	r2, #9
 8002c2e:	4952      	ldr	r1, [pc, #328]	; (8002d78 <main+0x188>)
 8002c30:	4852      	ldr	r0, [pc, #328]	; (8002d7c <main+0x18c>)
 8002c32:	f007 f925 	bl	8009e80 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8002c36:	f000 fc7d 	bl	8003534 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8002c3a:	4851      	ldr	r0, [pc, #324]	; (8002d80 <main+0x190>)
 8002c3c:	f7ff fb96 	bl	800236c <bmp_init>
  HMC5883L_initialize();
 8002c40:	f7fe faa2 	bl	8001188 <HMC5883L_initialize>
  Ringbuf_init();
 8002c44:	f7ff f8a8 	bl	8001d98 <Ringbuf_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8002c48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c4c:	f002 fe36 	bl	80058bc <HAL_Delay>
  //EKF.roll_bias=GyroErr(GYRO_X_ADDR)/14.375; EKF.pitch_bias=-1*GyroErr(GYRO_Y_ADDR)/14.375;
  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8002c50:	201d      	movs	r0, #29
 8002c52:	f001 fb97 	bl	8004384 <_Z7GyroErrh>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a4a      	ldr	r2, [pc, #296]	; (8002d84 <main+0x194>)
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	201f      	movs	r0, #31
 8002c5e:	f001 fb91 	bl	8004384 <_Z7GyroErrh>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4a48      	ldr	r2, [pc, #288]	; (8002d88 <main+0x198>)
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	2021      	movs	r0, #33	; 0x21
 8002c6a:	f001 fb8b 	bl	8004384 <_Z7GyroErrh>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4a46      	ldr	r2, [pc, #280]	; (8002d8c <main+0x19c>)
 8002c72:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8002c74:	2032      	movs	r0, #50	; 0x32
 8002c76:	f001 fbb3 	bl	80043e0 <_Z6AccErrh>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fbd3 	bl	8000428 <__aeabi_f2d>
 8002c82:	a33b      	add	r3, pc, #236	; (adr r3, 8002d70 <main+0x180>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fc26 	bl	80004d8 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f7fd fef8 	bl	8000a88 <__aeabi_d2f>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <main+0x1a0>)
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	2034      	movs	r0, #52	; 0x34
 8002ca0:	f001 fb9e 	bl	80043e0 <_Z6AccErrh>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fbbe 	bl	8000428 <__aeabi_f2d>
 8002cac:	a330      	add	r3, pc, #192	; (adr r3, 8002d70 <main+0x180>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd fc11 	bl	80004d8 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd fee3 	bl	8000a88 <__aeabi_d2f>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <main+0x1a4>)
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	2036      	movs	r0, #54	; 0x36
 8002cca:	f001 fb89 	bl	80043e0 <_Z6AccErrh>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fba9 	bl	8000428 <__aeabi_f2d>
 8002cd6:	a326      	add	r3, pc, #152	; (adr r3, 8002d70 <main+0x180>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fbfc 	bl	80004d8 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fd fece 	bl	8000a88 <__aeabi_d2f>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <main+0x1a8>)
 8002cf0:	6013      	str	r3, [r2, #0]
  //AccYh = 0.96009*AccYh - 0.42592*AccXh + 0.0091315*AccZh + 0.042165;
  //AccZh = 0.0091315*AccYh - 0.072464*AccXh + 0.98549*AccZh + 0.08443;

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8002cf2:	2032      	movs	r0, #50	; 0x32
 8002cf4:	f001 f838 	bl	8003d68 <_Z6AccOkuh>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd ffce 	bl	8000c9c <__aeabi_i2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <main+0x1ac>)
 8002d04:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8002d06:	2034      	movs	r0, #52	; 0x34
 8002d08:	f001 f82e 	bl	8003d68 <_Z6AccOkuh>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd ffc4 	bl	8000c9c <__aeabi_i2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <main+0x1b0>)
 8002d18:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 8002d1a:	2036      	movs	r0, #54	; 0x36
 8002d1c:	f001 f824 	bl	8003d68 <_Z6AccOkuh>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ffba 	bl	8000c9c <__aeabi_i2f>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <main+0x1b4>)
 8002d2c:	6013      	str	r3, [r2, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
  */

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8002d2e:	481e      	ldr	r0, [pc, #120]	; (8002da8 <main+0x1b8>)
 8002d30:	f005 fc72 	bl	8008618 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8002d34:	481d      	ldr	r0, [pc, #116]	; (8002dac <main+0x1bc>)
 8002d36:	f005 fc25 	bl	8008584 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	481c      	ldr	r0, [pc, #112]	; (8002db0 <main+0x1c0>)
 8002d3e:	f005 fd0d 	bl	800875c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002d42:	2104      	movs	r1, #4
 8002d44:	481a      	ldr	r0, [pc, #104]	; (8002db0 <main+0x1c0>)
 8002d46:	f006 fe39 	bl	80099bc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002d4a:	2108      	movs	r1, #8
 8002d4c:	4818      	ldr	r0, [pc, #96]	; (8002db0 <main+0x1c0>)
 8002d4e:	f006 fe35 	bl	80099bc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002d52:	210c      	movs	r1, #12
 8002d54:	4816      	ldr	r0, [pc, #88]	; (8002db0 <main+0x1c0>)
 8002d56:	f005 fd01 	bl	800875c <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002d5a:	2108      	movs	r1, #8
 8002d5c:	4813      	ldr	r0, [pc, #76]	; (8002dac <main+0x1bc>)
 8002d5e:	f005 fdf7 	bl	8008950 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  SendTelem();
 8002d62:	f000 ff51 	bl	8003c08 <_Z9SendTelemv>
	  Check_Arm();
 8002d66:	f000 fd79 	bl	800385c <_Z9Check_Armv>
	  Check_Disarm();
 8002d6a:	f000 fddd 	bl	8003928 <_Z12Check_Disarmv>
	  SendTelem();
 8002d6e:	e7f8      	b.n	8002d62 <main+0x172>
 8002d70:	8e8a71de 	.word	0x8e8a71de
 8002d74:	3f7ff2e4 	.word	0x3f7ff2e4
 8002d78:	2000165c 	.word	0x2000165c
 8002d7c:	20000a54 	.word	0x20000a54
 8002d80:	2000161c 	.word	0x2000161c
 8002d84:	20000b88 	.word	0x20000b88
 8002d88:	20000b8c 	.word	0x20000b8c
 8002d8c:	20000b90 	.word	0x20000b90
 8002d90:	20000b94 	.word	0x20000b94
 8002d94:	20000b98 	.word	0x20000b98
 8002d98:	20000b9c 	.word	0x20000b9c
 8002d9c:	20000b64 	.word	0x20000b64
 8002da0:	20000b68 	.word	0x20000b68
 8002da4:	20000b6c 	.word	0x20000b6c
 8002da8:	2000097c 	.word	0x2000097c
 8002dac:	200009c4 	.word	0x200009c4
 8002db0:	20000934 	.word	0x20000934

08002db4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b090      	sub	sp, #64	; 0x40
 8002db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dba:	f107 0318 	add.w	r3, r7, #24
 8002dbe:	2228      	movs	r2, #40	; 0x28
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f00b ff44 	bl	800ec50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002de4:	2301      	movs	r3, #1
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de8:	2302      	movs	r3, #2
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002df2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df8:	f107 0318 	add.w	r3, r7, #24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 ff57 	bl	8007cb0 <HAL_RCC_OscConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002e12:	f002 f921 	bl	8005058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e16:	230f      	movs	r3, #15
 8002e18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 f9bd 	bl	80081b0 <HAL_RCC_ClockConfig>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002e46:	f002 f907 	bl	8005058 <Error_Handler>
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3740      	adds	r7, #64	; 0x40
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e5a:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <_ZL12MX_I2C1_Initv+0x60>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <_ZL12MX_I2C1_Initv+0x64>)
 8002e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e90:	4807      	ldr	r0, [pc, #28]	; (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e92:	f003 fa5f 	bl	8006354 <HAL_I2C_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002ea6:	f002 f8d7 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200008e0 	.word	0x200008e0
 8002eb4:	40005400 	.word	0x40005400
 8002eb8:	00061a80 	.word	0x00061a80

08002ebc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b092      	sub	sp, #72	; 0x48
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f00b feb2 	bl	800ec50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002eec:	4b56      	ldr	r3, [pc, #344]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002eee:	4a57      	ldr	r2, [pc, #348]	; (800304c <_ZL12MX_TIM1_Initv+0x190>)
 8002ef0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002ef2:	4b55      	ldr	r3, [pc, #340]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ef4:	2247      	movs	r2, #71	; 0x47
 8002ef6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	4b53      	ldr	r3, [pc, #332]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8002efe:	4b52      	ldr	r3, [pc, #328]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f00:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002f04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f06:	4b50      	ldr	r3, [pc, #320]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f0c:	4b4e      	ldr	r3, [pc, #312]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f12:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f18:	484b      	ldr	r0, [pc, #300]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f1a:	f005 fbcf 	bl	80086bc <HAL_TIM_PWM_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002f2e:	f002 f893 	bl	8005058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4841      	ldr	r0, [pc, #260]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f42:	f006 fdd9 	bl	8009af8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002f56:	f002 f87f 	bl	8005058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5a:	2360      	movs	r3, #96	; 0x60
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f62:	2300      	movs	r3, #0
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f66:	2300      	movs	r3, #0
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4832      	ldr	r0, [pc, #200]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f80:	f005 ff88 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002f94:	f002 f860 	bl	8005058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4829      	ldr	r0, [pc, #164]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002fa2:	f005 ff77 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8002fb6:	f002 f84f 	bl	8005058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4821      	ldr	r0, [pc, #132]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002fc4:	f005 ff66 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8002fd8:	f002 f83e 	bl	8005058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe0:	220c      	movs	r2, #12
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4818      	ldr	r0, [pc, #96]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8002fe6:	f005 ff55 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8002ffa:	f002 f82d 	bl	8005058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003016:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 8003022:	f006 fdc7 	bl	8009bb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8003036:	f002 f80f 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800303a:	4803      	ldr	r0, [pc, #12]	; (8003048 <_ZL12MX_TIM1_Initv+0x18c>)
 800303c:	f002 f94e 	bl	80052dc <HAL_TIM_MspPostInit>

}
 8003040:	bf00      	nop
 8003042:	3748      	adds	r7, #72	; 0x48
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000934 	.word	0x20000934
 800304c:	40012c00 	.word	0x40012c00

08003050 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003064:	463b      	mov	r3, r7
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 800306e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003072:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 8003076:	2247      	movs	r2, #71	; 0x47
 8003078:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 8003082:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8003086:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003094:	481b      	ldr	r0, [pc, #108]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 8003096:	f005 fa25 	bl	80084e4 <HAL_TIM_Base_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80030aa:	f001 ffd5 	bl	8005058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	4619      	mov	r1, r3
 80030ba:	4812      	ldr	r0, [pc, #72]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 80030bc:	f005 ffa8 	bl	8009010 <HAL_TIM_ConfigClockSource>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80030d0:	f001 ffc2 	bl	8005058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030dc:	463b      	mov	r3, r7
 80030de:	4619      	mov	r1, r3
 80030e0:	4808      	ldr	r0, [pc, #32]	; (8003104 <_ZL12MX_TIM2_Initv+0xb4>)
 80030e2:	f006 fd09 	bl	8009af8 <HAL_TIMEx_MasterConfigSynchronization>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80030f6:	f001 ffaf 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000097c 	.word	0x2000097c

08003108 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800310e:	f107 0318 	add.w	r3, r7, #24
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003126:	463b      	mov	r3, r7
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 8003134:	4a38      	ldr	r2, [pc, #224]	; (8003218 <_ZL12MX_TIM3_Initv+0x110>)
 8003136:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 800313a:	2247      	movs	r2, #71	; 0x47
 800313c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313e:	4b35      	ldr	r3, [pc, #212]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003144:	4b33      	ldr	r3, [pc, #204]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 8003146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314c:	4b31      	ldr	r3, [pc, #196]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003158:	482e      	ldr	r0, [pc, #184]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 800315a:	f005 f9c3 	bl	80084e4 <HAL_TIM_Base_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 800316e:	f001 ff73 	bl	8005058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003176:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003178:	f107 0318 	add.w	r3, r7, #24
 800317c:	4619      	mov	r1, r3
 800317e:	4825      	ldr	r0, [pc, #148]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 8003180:	f005 ff46 	bl	8009010 <HAL_TIM_ConfigClockSource>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8003194:	f001 ff60 	bl	8005058 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003198:	481e      	ldr	r0, [pc, #120]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 800319a:	f005 fb81 	bl	80088a0 <HAL_TIM_IC_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80031ae:	f001 ff53 	bl	8005058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031ba:	f107 0310 	add.w	r3, r7, #16
 80031be:	4619      	mov	r1, r3
 80031c0:	4814      	ldr	r0, [pc, #80]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 80031c2:	f006 fc99 	bl	8009af8 <HAL_TIMEx_MasterConfigSynchronization>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80031d6:	f001 ff3f 	bl	8005058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031da:	2300      	movs	r3, #0
 80031dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031de:	2301      	movs	r3, #1
 80031e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80031ea:	463b      	mov	r3, r7
 80031ec:	2208      	movs	r2, #8
 80031ee:	4619      	mov	r1, r3
 80031f0:	4808      	ldr	r0, [pc, #32]	; (8003214 <_ZL12MX_TIM3_Initv+0x10c>)
 80031f2:	f005 fdbb 	bl	8008d6c <HAL_TIM_IC_ConfigChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8003206:	f001 ff27 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	; 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200009c4 	.word	0x200009c4
 8003218:	40000400 	.word	0x40000400

0800321c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003230:	463b      	mov	r3, r7
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <_ZL12MX_TIM4_Initv+0xb8>)
 800323c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003240:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003244:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 800324e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003252:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003260:	481b      	ldr	r0, [pc, #108]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003262:	f005 f93f 	bl	80084e4 <HAL_TIM_Base_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8003276:	f001 feef 	bl	8005058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800327a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	4619      	mov	r1, r3
 8003286:	4812      	ldr	r0, [pc, #72]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003288:	f005 fec2 	bl	8009010 <HAL_TIM_ConfigClockSource>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 800329c:	f001 fedc 	bl	8005058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a0:	2300      	movs	r3, #0
 80032a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032a8:	463b      	mov	r3, r7
 80032aa:	4619      	mov	r1, r3
 80032ac:	4808      	ldr	r0, [pc, #32]	; (80032d0 <_ZL12MX_TIM4_Initv+0xb4>)
 80032ae:	f006 fc23 	bl	8009af8 <HAL_TIMEx_MasterConfigSynchronization>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80032c2:	f001 fec9 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000a0c 	.word	0x20000a0c
 80032d4:	40000800 	.word	0x40000800

080032d8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <_ZL19MX_USART1_UART_Initv+0x58>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 80032e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800330e:	4807      	ldr	r0, [pc, #28]	; (800332c <_ZL19MX_USART1_UART_Initv+0x54>)
 8003310:	f006 fcd7 	bl	8009cc2 <HAL_UART_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003324:	f001 fe98 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003328:	bf00      	nop
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000a54 	.word	0x20000a54
 8003330:	40013800 	.word	0x40013800

08003334 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <_ZL19MX_USART2_UART_Initv+0x58>)
 800333c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8003342:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003344:	4b10      	ldr	r3, [pc, #64]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 800334c:	2200      	movs	r2, #0
 800334e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003358:	220c      	movs	r2, #12
 800335a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003364:	2200      	movs	r2, #0
 8003366:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003368:	4807      	ldr	r0, [pc, #28]	; (8003388 <_ZL19MX_USART2_UART_Initv+0x54>)
 800336a:	f006 fcaa 	bl	8009cc2 <HAL_UART_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 800337e:	f001 fe6b 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000a94 	.word	0x20000a94
 800338c:	40004400 	.word	0x40004400
 8003390:	000f4240 	.word	0x000f4240

08003394 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003398:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <_ZL19MX_USART3_UART_Initv+0x58>)
 800339c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033ba:	220c      	movs	r2, #12
 80033bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033ca:	4807      	ldr	r0, [pc, #28]	; (80033e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80033cc:	f006 fc79 	bl	8009cc2 <HAL_UART_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80033e0:	f001 fe3a 	bl	8005058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000ad4 	.word	0x20000ad4
 80033ec:	40004800 	.word	0x40004800

080033f0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <_ZL11MX_DMA_Initv+0x38>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <_ZL11MX_DMA_Initv+0x38>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6153      	str	r3, [r2, #20]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <_ZL11MX_DMA_Initv+0x38>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	200f      	movs	r0, #15
 8003414:	f002 fb4d 	bl	8005ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003418:	200f      	movs	r0, #15
 800341a:	f002 fb66 	bl	8005aea <HAL_NVIC_EnableIRQ>

}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000

0800342c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003440:	4b38      	ldr	r3, [pc, #224]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a37      	ldr	r2, [pc, #220]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003458:	4b32      	ldr	r3, [pc, #200]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a31      	ldr	r2, [pc, #196]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 800345e:	f043 0320 	orr.w	r3, r3, #32
 8003462:	6193      	str	r3, [r2, #24]
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6193      	str	r3, [r2, #24]
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <_ZL12MX_GPIO_Initv+0xf8>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034a6:	4820      	ldr	r0, [pc, #128]	; (8003528 <_ZL12MX_GPIO_Initv+0xfc>)
 80034a8:	f002 ff22 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2102      	movs	r1, #2
 80034b0:	481e      	ldr	r0, [pc, #120]	; (800352c <_ZL12MX_GPIO_Initv+0x100>)
 80034b2:	f002 ff1d 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80034b6:	2200      	movs	r2, #0
 80034b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034bc:	481c      	ldr	r0, [pc, #112]	; (8003530 <_ZL12MX_GPIO_Initv+0x104>)
 80034be:	f002 ff17 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80034c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2302      	movs	r3, #2
 80034d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80034d4:	f107 0310 	add.w	r3, r7, #16
 80034d8:	4619      	mov	r1, r3
 80034da:	4813      	ldr	r0, [pc, #76]	; (8003528 <_ZL12MX_GPIO_Initv+0xfc>)
 80034dc:	f002 fd84 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034e0:	2302      	movs	r3, #2
 80034e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e4:	2301      	movs	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2302      	movs	r3, #2
 80034ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f0:	f107 0310 	add.w	r3, r7, #16
 80034f4:	4619      	mov	r1, r3
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <_ZL12MX_GPIO_Initv+0x100>)
 80034f8:	f002 fd76 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003502:	2301      	movs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2302      	movs	r3, #2
 800350c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f107 0310 	add.w	r3, r7, #16
 8003512:	4619      	mov	r1, r3
 8003514:	4806      	ldr	r0, [pc, #24]	; (8003530 <_ZL12MX_GPIO_Initv+0x104>)
 8003516:	f002 fd67 	bl	8005fe8 <HAL_GPIO_Init>

}
 800351a:	bf00      	nop
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	40011000 	.word	0x40011000
 800352c:	40010c00 	.word	0x40010c00
 8003530:	40010800 	.word	0x40010800

08003534 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800353a:	2300      	movs	r3, #0
 800353c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800353e:	2305      	movs	r3, #5
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	2301      	movs	r3, #1
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	223e      	movs	r2, #62	; 0x3e
 800354e:	21d0      	movs	r1, #208	; 0xd0
 8003550:	4826      	ldr	r0, [pc, #152]	; (80035ec <_Z14MPU6050_Baslatv+0xb8>)
 8003552:	f003 fba1 	bl	8006c98 <HAL_I2C_Mem_Write>
	config = 0x18;
 8003556:	2318      	movs	r3, #24
 8003558:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 800355a:	2305      	movs	r3, #5
 800355c:	9302      	str	r3, [sp, #8]
 800355e:	2301      	movs	r3, #1
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2301      	movs	r3, #1
 8003568:	2216      	movs	r2, #22
 800356a:	21d0      	movs	r1, #208	; 0xd0
 800356c:	481f      	ldr	r0, [pc, #124]	; (80035ec <_Z14MPU6050_Baslatv+0xb8>)
 800356e:	f003 fb93 	bl	8006c98 <HAL_I2C_Mem_Write>
	config = 0x00;
 8003572:	2300      	movs	r3, #0
 8003574:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8003576:	2305      	movs	r3, #5
 8003578:	9302      	str	r3, [sp, #8]
 800357a:	2301      	movs	r3, #1
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	222d      	movs	r2, #45	; 0x2d
 8003586:	21a6      	movs	r1, #166	; 0xa6
 8003588:	4818      	ldr	r0, [pc, #96]	; (80035ec <_Z14MPU6050_Baslatv+0xb8>)
 800358a:	f003 fb85 	bl	8006c98 <HAL_I2C_Mem_Write>
	config = 0x08;
 800358e:	2308      	movs	r3, #8
 8003590:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8003592:	2305      	movs	r3, #5
 8003594:	9302      	str	r3, [sp, #8]
 8003596:	2301      	movs	r3, #1
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2301      	movs	r3, #1
 80035a0:	222d      	movs	r2, #45	; 0x2d
 80035a2:	21a6      	movs	r1, #166	; 0xa6
 80035a4:	4811      	ldr	r0, [pc, #68]	; (80035ec <_Z14MPU6050_Baslatv+0xb8>)
 80035a6:	f003 fb77 	bl	8006c98 <HAL_I2C_Mem_Write>
	config = 0x0D;
 80035aa:	230d      	movs	r3, #13
 80035ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80035ae:	2305      	movs	r3, #5
 80035b0:	9302      	str	r3, [sp, #8]
 80035b2:	2301      	movs	r3, #1
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2301      	movs	r3, #1
 80035bc:	222c      	movs	r2, #44	; 0x2c
 80035be:	21a6      	movs	r1, #166	; 0xa6
 80035c0:	480a      	ldr	r0, [pc, #40]	; (80035ec <_Z14MPU6050_Baslatv+0xb8>)
 80035c2:	f003 fb69 	bl	8006c98 <HAL_I2C_Mem_Write>
	config = 0x01;
 80035c6:	2301      	movs	r3, #1
 80035c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80035ca:	2305      	movs	r3, #5
 80035cc:	9302      	str	r3, [sp, #8]
 80035ce:	2301      	movs	r3, #1
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	1dfb      	adds	r3, r7, #7
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2301      	movs	r3, #1
 80035d8:	2231      	movs	r2, #49	; 0x31
 80035da:	21a6      	movs	r1, #166	; 0xa6
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <_Z14MPU6050_Baslatv+0xb8>)
 80035de:	f003 fb5b 	bl	8006c98 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200008e0 	.word	0x200008e0

080035f0 <_Z8MagCalibsss>:

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
 80035fa:	460b      	mov	r3, r1
 80035fc:	80bb      	strh	r3, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 8003602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc fefc 	bl	8000404 <__aeabi_i2d>
 800360c:	a366      	add	r3, pc, #408	; (adr r3, 80037a8 <_Z8MagCalibsss+0x1b8>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f7fc ff61 	bl	80004d8 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4614      	mov	r4, r2
 800361c:	461d      	mov	r5, r3
 800361e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc feee 	bl	8000404 <__aeabi_i2d>
 8003628:	a361      	add	r3, pc, #388	; (adr r3, 80037b0 <_Z8MagCalibsss+0x1c0>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fc ff53 	bl	80004d8 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4620      	mov	r0, r4
 8003638:	4629      	mov	r1, r5
 800363a:	f7fc fd97 	bl	800016c <__adddf3>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4614      	mov	r4, r2
 8003644:	461d      	mov	r5, r3
 8003646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc feda 	bl	8000404 <__aeabi_i2d>
 8003650:	a359      	add	r3, pc, #356	; (adr r3, 80037b8 <_Z8MagCalibsss+0x1c8>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f7fc ff3f 	bl	80004d8 <__aeabi_dmul>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4620      	mov	r0, r4
 8003660:	4629      	mov	r1, r5
 8003662:	f7fc fd81 	bl	8000168 <__aeabi_dsub>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <_Z8MagCalibsss+0x1f8>)
 8003674:	f7fc fd7a 	bl	800016c <__adddf3>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	f7fd f9da 	bl	8000a38 <__aeabi_d2iz>
 8003684:	4603      	mov	r3, r0
 8003686:	b21a      	sxth	r2, r3
 8003688:	4b58      	ldr	r3, [pc, #352]	; (80037ec <_Z8MagCalibsss+0x1fc>)
 800368a:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 800368c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fc feb7 	bl	8000404 <__aeabi_i2d>
 8003696:	a346      	add	r3, pc, #280	; (adr r3, 80037b0 <_Z8MagCalibsss+0x1c0>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f7fc ff1c 	bl	80004d8 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4614      	mov	r4, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc fea9 	bl	8000404 <__aeabi_i2d>
 80036b2:	a343      	add	r3, pc, #268	; (adr r3, 80037c0 <_Z8MagCalibsss+0x1d0>)
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f7fc ff0e 	bl	80004d8 <__aeabi_dmul>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4620      	mov	r0, r4
 80036c2:	4629      	mov	r1, r5
 80036c4:	f7fc fd52 	bl	800016c <__adddf3>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4614      	mov	r4, r2
 80036ce:	461d      	mov	r5, r3
 80036d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc fe95 	bl	8000404 <__aeabi_i2d>
 80036da:	a33b      	add	r3, pc, #236	; (adr r3, 80037c8 <_Z8MagCalibsss+0x1d8>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f7fc fefa 	bl	80004d8 <__aeabi_dmul>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fc fd3e 	bl	800016c <__adddf3>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	a335      	add	r3, pc, #212	; (adr r3, 80037d0 <_Z8MagCalibsss+0x1e0>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fc fd35 	bl	800016c <__adddf3>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd f995 	bl	8000a38 <__aeabi_d2iz>
 800370e:	4603      	mov	r3, r0
 8003710:	b21a      	sxth	r2, r3
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <_Z8MagCalibsss+0x200>)
 8003714:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 8003716:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fc fe72 	bl	8000404 <__aeabi_i2d>
 8003720:	a329      	add	r3, pc, #164	; (adr r3, 80037c8 <_Z8MagCalibsss+0x1d8>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fc fed7 	bl	80004d8 <__aeabi_dmul>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4614      	mov	r4, r2
 8003730:	461d      	mov	r5, r3
 8003732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fe64 	bl	8000404 <__aeabi_i2d>
 800373c:	a31e      	add	r3, pc, #120	; (adr r3, 80037b8 <_Z8MagCalibsss+0x1c8>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc fec9 	bl	80004d8 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4620      	mov	r0, r4
 800374c:	4629      	mov	r1, r5
 800374e:	f7fc fd0b 	bl	8000168 <__aeabi_dsub>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4614      	mov	r4, r2
 8003758:	461d      	mov	r5, r3
 800375a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc fe50 	bl	8000404 <__aeabi_i2d>
 8003764:	a31c      	add	r3, pc, #112	; (adr r3, 80037d8 <_Z8MagCalibsss+0x1e8>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f7fc feb5 	bl	80004d8 <__aeabi_dmul>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4620      	mov	r0, r4
 8003774:	4629      	mov	r1, r5
 8003776:	f7fc fcf9 	bl	800016c <__adddf3>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	a317      	add	r3, pc, #92	; (adr r3, 80037e0 <_Z8MagCalibsss+0x1f0>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fc fcee 	bl	8000168 <__aeabi_dsub>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	f7fd f950 	bl	8000a38 <__aeabi_d2iz>
 8003798:	4603      	mov	r3, r0
 800379a:	b21a      	sxth	r2, r3
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <_Z8MagCalibsss+0x204>)
 800379e:	801a      	strh	r2, [r3, #0]
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bdb0      	pop	{r4, r5, r7, pc}
 80037a8:	4189374c 	.word	0x4189374c
 80037ac:	3feee560 	.word	0x3feee560
 80037b0:	3dee7818 	.word	0x3dee7818
 80037b4:	3f8c725c 	.word	0x3f8c725c
 80037b8:	f861a60d 	.word	0xf861a60d
 80037bc:	3f929888 	.word	0x3f929888
 80037c0:	3c361134 	.word	0x3c361134
 80037c4:	3fee52bd 	.word	0x3fee52bd
 80037c8:	a6ce3583 	.word	0xa6ce3583
 80037cc:	3f7b8023 	.word	0x3f7b8023
 80037d0:	33333333 	.word	0x33333333
 80037d4:	4059d333 	.word	0x4059d333
 80037d8:	24dd2f1b 	.word	0x24dd2f1b
 80037dc:	3ff18106 	.word	0x3ff18106
 80037e0:	e353f7cf 	.word	0xe353f7cf
 80037e4:	40211ba5 	.word	0x40211ba5
 80037e8:	40300000 	.word	0x40300000
 80037ec:	20001686 	.word	0x20001686
 80037f0:	20001688 	.word	0x20001688
 80037f4:	2000168a 	.word	0x2000168a

080037f8 <_Z9checkModei>:

void checkMode(int mod_ch) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003806:	da0d      	bge.n	8003824 <_Z9checkModei+0x2c>

		  controller.mod = STABILIZE;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <_Z9checkModei+0x58>)
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		  controller.z0 = EKF.alt_gnd;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <_Z9checkModei+0x5c>)
 8003812:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003816:	4a0e      	ldr	r2, [pc, #56]	; (8003850 <_Z9checkModei+0x58>)
 8003818:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
		  controller.p_alt.reset();
 800381c:	480e      	ldr	r0, [pc, #56]	; (8003858 <_Z9checkModei+0x60>)
 800381e:	f008 ff3b 	bl	800c698 <_ZN3PID5resetEv>
	  }

	  else {
		  controller.mod = ALT_HOLD;
	  }
}
 8003822:	e011      	b.n	8003848 <_Z9checkModei+0x50>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800382a:	db09      	blt.n	8003840 <_Z9checkModei+0x48>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003832:	4293      	cmp	r3, r2
 8003834:	dc04      	bgt.n	8003840 <_Z9checkModei+0x48>
		  controller.mod = ALT_HOLD;
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <_Z9checkModei+0x58>)
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
}
 800383e:	e003      	b.n	8003848 <_Z9checkModei+0x50>
		  controller.mod = ALT_HOLD;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <_Z9checkModei+0x58>)
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000fe0 	.word	0x20000fe0
 8003854:	20000d58 	.word	0x20000d58
 8003858:	20001380 	.word	0x20001380

0800385c <_Z9Check_Armv>:

void Check_Arm() {
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	if(!armed) {
 8003860:	4b27      	ldr	r3, [pc, #156]	; (8003900 <_Z9Check_Armv+0xa4>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d045      	beq.n	80038fa <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 800386e:	4b25      	ldr	r3, [pc, #148]	; (8003904 <_Z9Check_Armv+0xa8>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f240 424b 	movw	r2, #1099	; 0x44b
 8003876:	4293      	cmp	r3, r2
 8003878:	dc3b      	bgt.n	80038f2 <_Z9Check_Armv+0x96>
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <_Z9Check_Armv+0xa8>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003882:	4293      	cmp	r3, r2
 8003884:	dd35      	ble.n	80038f2 <_Z9Check_Armv+0x96>
				if(!arm_start){
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <_Z9Check_Armv+0xac>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	f083 0301 	eor.w	r3, r3, #1
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8003894:	f002 f808 	bl	80058a8 <HAL_GetTick>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <_Z9Check_Armv+0xb0>)
 800389e:	601a      	str	r2, [r3, #0]
					arm_start = true;
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <_Z9Check_Armv+0xac>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80038a6:	f001 ffff 	bl	80058a8 <HAL_GetTick>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4a17      	ldr	r2, [pc, #92]	; (800390c <_Z9Check_Armv+0xb0>)
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038b6:	4293      	cmp	r3, r2
 80038b8:	bf8c      	ite	hi
 80038ba:	2301      	movhi	r3, #1
 80038bc:	2300      	movls	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01a      	beq.n	80038fa <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 80038c4:	4812      	ldr	r0, [pc, #72]	; (8003910 <_Z9Check_Armv+0xb4>)
 80038c6:	f008 fee7 	bl	800c698 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80038ca:	4812      	ldr	r0, [pc, #72]	; (8003914 <_Z9Check_Armv+0xb8>)
 80038cc:	f008 fee4 	bl	800c698 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 80038d0:	4811      	ldr	r0, [pc, #68]	; (8003918 <_Z9Check_Armv+0xbc>)
 80038d2:	f008 fee1 	bl	800c698 <_ZN3PID5resetEv>
					armed = true;
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <_Z9Check_Armv+0xa4>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80038dc:	2201      	movs	r2, #1
 80038de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e2:	480e      	ldr	r0, [pc, #56]	; (800391c <_Z9Check_Armv+0xc0>)
 80038e4:	f002 fd04 	bl	80062f0 <HAL_GPIO_WritePin>
					EKF.sb = 1e-3;
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <_Z9Check_Armv+0xc4>)
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <_Z9Check_Armv+0xc8>)
 80038ec:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
				if(HAL_GetTick() - arm_timer > 3000) {
 80038f0:	e003      	b.n	80038fa <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <_Z9Check_Armv+0xac>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80038f8:	e7ff      	b.n	80038fa <_Z9Check_Armv+0x9e>
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200015f9 	.word	0x200015f9
 8003904:	200015a0 	.word	0x200015a0
 8003908:	200015f8 	.word	0x200015f8
 800390c:	200015ec 	.word	0x200015ec
 8003910:	20001188 	.word	0x20001188
 8003914:	20001230 	.word	0x20001230
 8003918:	200012d8 	.word	0x200012d8
 800391c:	40010800 	.word	0x40010800
 8003920:	20000d58 	.word	0x20000d58
 8003924:	3a83126f 	.word	0x3a83126f

08003928 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
	if(armed) {
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <_Z12Check_Disarmv+0x84>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d038      	beq.n	80039a6 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8003934:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <_Z12Check_Disarmv+0x88>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f240 424b 	movw	r2, #1099	; 0x44b
 800393c:	4293      	cmp	r3, r2
 800393e:	dc2e      	bgt.n	800399e <_Z12Check_Disarmv+0x76>
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <_Z12Check_Disarmv+0x88>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f240 424b 	movw	r2, #1099	; 0x44b
 8003948:	4293      	cmp	r3, r2
 800394a:	dc28      	bgt.n	800399e <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <_Z12Check_Disarmv+0x8c>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	f083 0301 	eor.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 800395a:	f001 ffa5 	bl	80058a8 <HAL_GetTick>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <_Z12Check_Disarmv+0x90>)
 8003964:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <_Z12Check_Disarmv+0x8c>)
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 800396c:	f001 ff9c 	bl	80058a8 <HAL_GetTick>
 8003970:	4603      	mov	r3, r0
 8003972:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <_Z12Check_Disarmv+0x90>)
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800397c:	4293      	cmp	r3, r2
 800397e:	bf8c      	ite	hi
 8003980:	2301      	movhi	r3, #1
 8003982:	2300      	movls	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <_Z12Check_Disarmv+0x7e>
					armed = false;
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <_Z12Check_Disarmv+0x84>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003996:	4809      	ldr	r0, [pc, #36]	; (80039bc <_Z12Check_Disarmv+0x94>)
 8003998:	f002 fcaa 	bl	80062f0 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 800399c:	e003      	b.n	80039a6 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <_Z12Check_Disarmv+0x8c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80039a4:	e7ff      	b.n	80039a6 <_Z12Check_Disarmv+0x7e>
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200015f9 	.word	0x200015f9
 80039b0:	200015a0 	.word	0x200015a0
 80039b4:	200015fa 	.word	0x200015fa
 80039b8:	200015f0 	.word	0x200015f0
 80039bc:	40010800 	.word	0x40010800

080039c0 <_Z9TelemPackv>:

void TelemPack() {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 80039c4:	4b80      	ldr	r3, [pc, #512]	; (8003bc8 <_Z9TelemPackv+0x208>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <_Z9TelemPackv+0x20c>)
 80039ca:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 80039cc:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <_Z9TelemPackv+0x208>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <_Z9TelemPackv+0x20c>)
 80039d2:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 80039d4:	4b7c      	ldr	r3, [pc, #496]	; (8003bc8 <_Z9TelemPackv+0x208>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a7c      	ldr	r2, [pc, #496]	; (8003bcc <_Z9TelemPackv+0x20c>)
 80039da:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 80039dc:	4b7c      	ldr	r3, [pc, #496]	; (8003bd0 <_Z9TelemPackv+0x210>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	4b7a      	ldr	r3, [pc, #488]	; (8003bcc <_Z9TelemPackv+0x20c>)
 80039e4:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80039e6:	4b7a      	ldr	r3, [pc, #488]	; (8003bd0 <_Z9TelemPackv+0x210>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <_Z9TelemPackv+0x20c>)
 80039ee:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80039f0:	4b77      	ldr	r3, [pc, #476]	; (8003bd0 <_Z9TelemPackv+0x210>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <_Z9TelemPackv+0x20c>)
 80039f8:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 80039fa:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <_Z9TelemPackv+0x210>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	4b72      	ldr	r3, [pc, #456]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a02:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 8003a04:	4b73      	ldr	r3, [pc, #460]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003a06:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003a0a:	4a70      	ldr	r2, [pc, #448]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a0c:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8003a0e:	4b71      	ldr	r3, [pc, #452]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003a10:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003a14:	4a6d      	ldr	r2, [pc, #436]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a16:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 8003a18:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <_Z9TelemPackv+0x218>)
 8003a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd f93c 	bl	8000c9c <__aeabi_i2f>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4a69      	ldr	r2, [pc, #420]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a28:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 8003a2a:	4b67      	ldr	r3, [pc, #412]	; (8003bc8 <_Z9TelemPackv+0x208>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	4a67      	ldr	r2, [pc, #412]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a30:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8003a32:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <_Z9TelemPackv+0x208>)
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a38:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <_Z9TelemPackv+0x208>)
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4a63      	ldr	r2, [pc, #396]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a40:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8003a42:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <_Z9TelemPackv+0x21c>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4a61      	ldr	r2, [pc, #388]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a48:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8003a4a:	4b64      	ldr	r3, [pc, #400]	; (8003bdc <_Z9TelemPackv+0x21c>)
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	4a5f      	ldr	r2, [pc, #380]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a50:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = euler_angles.roll;
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <_Z9TelemPackv+0x220>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a58:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = euler_angles.pitch;
 8003a5a:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <_Z9TelemPackv+0x220>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4a5b      	ldr	r2, [pc, #364]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a60:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 8003a62:	4b60      	ldr	r3, [pc, #384]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003a64:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003a68:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a6a:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 8003a6c:	4b5d      	ldr	r3, [pc, #372]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003a6e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003a72:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.gyro[2];
 8003a76:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003a78:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003a7c:	4a53      	ldr	r2, [pc, #332]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a7e:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = euler_angles.yaw;
 8003a80:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <_Z9TelemPackv+0x220>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a51      	ldr	r2, [pc, #324]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a86:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8003a88:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003a8a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8003a8e:	4a4f      	ldr	r2, [pc, #316]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a90:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8003a92:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003a94:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003a9a:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003a9e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8003aa2:	4a4a      	ldr	r2, [pc, #296]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003aa4:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8003aa6:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003aa8:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8003aac:	4a47      	ldr	r2, [pc, #284]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003aae:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8003ab0:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003ab2:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8003ab6:	4a45      	ldr	r2, [pc, #276]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003ab8:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8003aba:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003abc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003ac0:	4a42      	ldr	r2, [pc, #264]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003ac2:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8003ac4:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003ac6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8003aca:	4a40      	ldr	r2, [pc, #256]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003acc:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003ad0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8003ad4:	4a3d      	ldr	r2, [pc, #244]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003ad6:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8003ad8:	4b3e      	ldr	r3, [pc, #248]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003ada:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8003ade:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8003ae2:	4b3c      	ldr	r3, [pc, #240]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003ae4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8003ae8:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003aea:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003aee:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8003af2:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003af4:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 8003af6:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003af8:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8003afc:	4a33      	ldr	r2, [pc, #204]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003b04:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8003b0e:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <_Z9TelemPackv+0x228>)
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b14:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 8003b18:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <_Z9TelemPackv+0x228>)
 8003b1a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003b1e:	b21a      	sxth	r2, r3
 8003b20:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b22:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <_Z9TelemPackv+0x228>)
 8003b28:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003b2c:	b21a      	sxth	r2, r3
 8003b2e:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b30:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <_Z9TelemPackv+0x228>)
 8003b36:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003b3a:	b21a      	sxth	r2, r3
 8003b3c:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b3e:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.x;
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003b44:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8003b48:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.v;
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <_Z9TelemPackv+0x224>)
 8003b50:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  //telem_pack.position_body.y = EKF.ypos;

	  telem_pack.alt_thr = controller.alt_thr;
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <_Z9TelemPackv+0x214>)
 8003b5c:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
 8003b60:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b62:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 8003b64:	f001 fea0 	bl	80058a8 <HAL_GetTick>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accXm;
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <_Z9TelemPackv+0x22c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b76:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accYm;
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <_Z9TelemPackv+0x230>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b80:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZm;
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <_Z9TelemPackv+0x234>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b8a:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <_Z9TelemPackv+0x238>)
 8003b90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003b96:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8003b9a:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <_Z9TelemPackv+0x23c>)
 8003b9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003ba2:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <_Z9TelemPackv+0x240>)
 8003ba8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003bae:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8003bb2:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <_Z9TelemPackv+0x244>)
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <_Z9TelemPackv+0x20c>)
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	23b7      	movs	r3, #183	; 0xb7
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f00b f839 	bl	800ec34 <memcpy>
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000bc4 	.word	0x20000bc4
 8003bcc:	20000be8 	.word	0x20000be8
 8003bd0:	20001580 	.word	0x20001580
 8003bd4:	20000fe0 	.word	0x20000fe0
 8003bd8:	2000168c 	.word	0x2000168c
 8003bdc:	20000ba0 	.word	0x20000ba0
 8003be0:	20001674 	.word	0x20001674
 8003be4:	20000d58 	.word	0x20000d58
 8003be8:	20001668 	.word	0x20001668
 8003bec:	20000b7c 	.word	0x20000b7c
 8003bf0:	20000b80 	.word	0x20000b80
 8003bf4:	20000b84 	.word	0x20000b84
 8003bf8:	20001686 	.word	0x20001686
 8003bfc:	20001688 	.word	0x20001688
 8003c00:	2000168a 	.word	0x2000168a
 8003c04:	20000ca0 	.word	0x20000ca0

08003c08 <_Z9SendTelemv>:

void SendTelem() {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	  TelemPack();
 8003c0e:	f7ff fed7 	bl	80039c0 <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 8003c12:	2364      	movs	r3, #100	; 0x64
 8003c14:	22b7      	movs	r2, #183	; 0xb7
 8003c16:	490e      	ldr	r1, [pc, #56]	; (8003c50 <_Z9SendTelemv+0x48>)
 8003c18:	480e      	ldr	r0, [pc, #56]	; (8003c54 <_Z9SendTelemv+0x4c>)
 8003c1a:	f006 f89f 	bl	8009d5c <HAL_UART_Transmit>
	  char end_char = '@';
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8003c22:	1df9      	adds	r1, r7, #7
 8003c24:	2364      	movs	r3, #100	; 0x64
 8003c26:	2201      	movs	r2, #1
 8003c28:	480a      	ldr	r0, [pc, #40]	; (8003c54 <_Z9SendTelemv+0x4c>)
 8003c2a:	f006 f897 	bl	8009d5c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8003c2e:	1df9      	adds	r1, r7, #7
 8003c30:	2364      	movs	r3, #100	; 0x64
 8003c32:	2201      	movs	r2, #1
 8003c34:	4807      	ldr	r0, [pc, #28]	; (8003c54 <_Z9SendTelemv+0x4c>)
 8003c36:	f006 f891 	bl	8009d5c <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 8003c3a:	f001 fe35 	bl	80058a8 <HAL_GetTick>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <_Z9SendTelemv+0x50>)
 8003c44:	601a      	str	r2, [r3, #0]


}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000ca0 	.word	0x20000ca0
 8003c54:	20000a94 	.word	0x20000a94
 8003c58:	200015f4 	.word	0x200015f4

08003c5c <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af04      	add	r7, sp, #16
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	9302      	str	r3, [sp, #8]
 8003c6e:	2302      	movs	r3, #2
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	f107 030c 	add.w	r3, r7, #12
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	21d1      	movs	r1, #209	; 0xd1
 8003c7c:	4807      	ldr	r0, [pc, #28]	; (8003c9c <_Z7GyroOkuh+0x40>)
 8003c7e:	f003 f905 	bl	8006e8c <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8003c82:	7b3b      	ldrb	r3, [r7, #12]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	b21a      	sxth	r2, r3
 8003c88:	7b7b      	ldrb	r3, [r7, #13]
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8003c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200008e0 	.word	0x200008e0

08003ca0 <_Z7pwm2angt>:

float pwm2ang(unsigned short int pwm) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8003caa:	2305      	movs	r3, #5
 8003cac:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8003cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb2:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8003cb4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003cb8:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -15;
 8003cba:	f06f 030e 	mvn.w	r3, #14
 8003cbe:	60fb      	str	r3, [r7, #12]
	int out_max  = 15;
 8003cc0:	230f      	movs	r3, #15
 8003cc2:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8003ccc:	3304      	adds	r3, #4
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	dd09      	ble.n	8003ce6 <_Z7pwm2angt+0x46>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	db03      	blt.n	8003ce6 <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8003cde:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003ce2:	83fb      	strh	r3, [r7, #30]
 8003ce4:	e001      	b.n	8003cea <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003cea:	8bfa      	ldrh	r2, [r7, #30]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	1a8a      	subs	r2, r1, r2
 8003cf6:	fb02 f203 	mul.w	r2, r2, r3
 8003cfa:	6939      	ldr	r1, [r7, #16]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1acb      	subs	r3, r1, r3
 8003d00:	fb92 f2f3 	sdiv	r2, r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc ffc7 	bl	8000c9c <__aeabi_i2f>
 8003d0e:	4603      	mov	r3, r0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8003d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d26:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8003d28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d2c:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8003d2e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003d32:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8003d34:	2364      	movs	r3, #100	; 0x64
 8003d36:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	1a8a      	subs	r2, r1, r2
 8003d44:	fb02 f203 	mul.w	r2, r2, r3
 8003d48:	6939      	ldr	r1, [r7, #16]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	1acb      	subs	r3, r1, r3
 8003d4e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	425b      	negs	r3, r3
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc ff9f 	bl	8000c9c <__aeabi_i2f>
 8003d5e:	4603      	mov	r3, r0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af04      	add	r7, sp, #16
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	2301      	movs	r3, #1
 8003d78:	9302      	str	r3, [sp, #8]
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	f107 030c 	add.w	r3, r7, #12
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2301      	movs	r3, #1
 8003d86:	21a7      	movs	r1, #167	; 0xa7
 8003d88:	4807      	ldr	r0, [pc, #28]	; (8003da8 <_Z6AccOkuh+0x40>)
 8003d8a:	f003 f87f 	bl	8006e8c <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8003d8e:	7b7b      	ldrb	r3, [r7, #13]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	7b3b      	ldrb	r3, [r7, #12]
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8003d9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200008e0 	.word	0x200008e0

08003dac <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fc fb25 	bl	8000404 <__aeabi_i2d>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f008 fff5 	bl	800cdb0 <sqrt>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8003dd4:	b5b0      	push	{r4, r5, r7, lr}
 8003dd6:	b08e      	sub	sp, #56	; 0x38
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8003de0:	4bc6      	ldr	r3, [pc, #792]	; (80040fc <_Z9DCM2EulerPsS_+0x328>)
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df2:	fb03 f202 	mul.w	r2, r3, r2
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3302      	adds	r3, #2
 8003dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3302      	adds	r3, #2
 8003e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e08:	fb03 f301 	mul.w	r3, r3, r1
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3304      	adds	r3, #4
 8003e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e16:	4619      	mov	r1, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e20:	fb03 f301 	mul.w	r3, r3, r1
 8003e24:	4413      	add	r3, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ffc0 	bl	8003dac <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7fc fe28 	bl	8000a88 <__aeabi_d2f>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3302      	adds	r3, #2
 8003e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e4c:	fb03 f302 	mul.w	r3, r3, r2
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	3202      	adds	r2, #2
 8003e54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003e58:	fb02 f203 	mul.w	r2, r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e62:	4619      	mov	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3302      	adds	r3, #2
 8003e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e6c:	fb03 f301 	mul.w	r3, r3, r1
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	3102      	adds	r1, #2
 8003e74:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad2      	subs	r2, r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e84:	4619      	mov	r1, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e8e:	fb03 f301 	mul.w	r3, r3, r1
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	3104      	adds	r1, #4
 8003e96:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb0:	fb03 f301 	mul.w	r3, r3, r1
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	3104      	adds	r1, #4
 8003eb8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc feea 	bl	8000c9c <__aeabi_i2f>
 8003ec8:	4604      	mov	r4, r0
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eda:	fb03 f202 	mul.w	r2, r3, r2
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eee:	fb03 f301 	mul.w	r3, r3, r1
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fed1 	bl	8000c9c <__aeabi_i2f>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f9d3 	bl	80042a8 <_Z6squaref>
 8003f02:	4605      	mov	r5, r0
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f14:	fb03 f202 	mul.w	r2, r3, r2
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f20:	4619      	mov	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f28:	fb03 f301 	mul.w	r3, r3, r1
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc feb4 	bl	8000c9c <__aeabi_i2f>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f9b6 	bl	80042a8 <_Z6squaref>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4628      	mov	r0, r5
 8003f42:	f7fc fdf7 	bl	8000b34 <__addsf3>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461d      	mov	r5, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f5c:	fb03 f202 	mul.w	r2, r3, r2
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3304      	adds	r3, #4
 8003f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f72:	fb03 f301 	mul.w	r3, r3, r1
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc fe8f 	bl	8000c9c <__aeabi_i2f>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f991 	bl	80042a8 <_Z6squaref>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f7fc fdd2 	bl	8000b34 <__addsf3>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fe1e 	bl	8002bd4 <_ZSt4sqrtf>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fed1 	bl	8000d44 <__aeabi_fmul>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7fc ff80 	bl	8000eac <__aeabi_fdiv>
 8003fac:	4603      	mov	r3, r0
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fc2:	fb03 f202 	mul.w	r2, r3, r2
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3302      	adds	r3, #2
 8003fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd8:	fb03 f301 	mul.w	r3, r3, r1
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc fe5c 	bl	8000c9c <__aeabi_i2f>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fec:	461a      	mov	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff6:	fb03 f202 	mul.w	r2, r3, r2
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004002:	4619      	mov	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800400a:	fb03 f301 	mul.w	r3, r3, r1
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc fe43 	bl	8000c9c <__aeabi_i2f>
 8004016:	4603      	mov	r3, r0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f945 	bl	80042a8 <_Z6squaref>
 800401e:	4605      	mov	r5, r0
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004030:	fb03 f202 	mul.w	r2, r3, r2
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3304      	adds	r3, #4
 8004038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800403c:	4619      	mov	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004044:	fb03 f301 	mul.w	r3, r3, r1
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	4618      	mov	r0, r3
 800404c:	f7fc fe26 	bl	8000c9c <__aeabi_i2f>
 8004050:	4603      	mov	r3, r0
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f928 	bl	80042a8 <_Z6squaref>
 8004058:	4603      	mov	r3, r0
 800405a:	4619      	mov	r1, r3
 800405c:	4628      	mov	r0, r5
 800405e:	f7fc fd69 	bl	8000b34 <__addsf3>
 8004062:	4603      	mov	r3, r0
 8004064:	461d      	mov	r5, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3302      	adds	r3, #2
 800406a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004078:	fb03 f202 	mul.w	r2, r3, r2
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3304      	adds	r3, #4
 8004080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004084:	4619      	mov	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3302      	adds	r3, #2
 800408a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800408e:	fb03 f301 	mul.w	r3, r3, r1
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc fe01 	bl	8000c9c <__aeabi_i2f>
 800409a:	4603      	mov	r3, r0
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f903 	bl	80042a8 <_Z6squaref>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4619      	mov	r1, r3
 80040a6:	4628      	mov	r0, r5
 80040a8:	f7fc fd44 	bl	8000b34 <__addsf3>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fd90 	bl	8002bd4 <_ZSt4sqrtf>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4619      	mov	r1, r3
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7fc fef7 	bl	8000eac <__aeabi_fdiv>
 80040be:	4603      	mov	r3, r0
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c8:	425b      	negs	r3, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fde6 	bl	8000c9c <__aeabi_i2f>
 80040d0:	4603      	mov	r3, r0
 80040d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc fee9 	bl	8000eac <__aeabi_fdiv>
 80040da:	4603      	mov	r3, r0
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3302      	adds	r3, #2
 80040e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e6:	425b      	negs	r3, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc fdd7 	bl	8000c9c <__aeabi_i2f>
 80040ee:	4603      	mov	r3, r0
 80040f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc feda 	bl	8000eac <__aeabi_fdiv>
 80040f8:	4603      	mov	r3, r0
 80040fa:	e001      	b.n	8004100 <_Z9DCM2EulerPsS_+0x32c>
 80040fc:	42654ca3 	.word	0x42654ca3
 8004100:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3304      	adds	r3, #4
 8004106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800410a:	425b      	negs	r3, r3
 800410c:	4618      	mov	r0, r3
 800410e:	f7fc fdc5 	bl	8000c9c <__aeabi_i2f>
 8004112:	4603      	mov	r3, r0
 8004114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc fec8 	bl	8000eac <__aeabi_fdiv>
 800411c:	4603      	mov	r3, r0
 800411e:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fd2e 	bl	8002b88 <_ZSt4asinf>
 800412c:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 800412e:	69b8      	ldr	r0, [r7, #24]
 8004130:	f7fe fb62 	bl	80027f8 <_ZSt3cosf>
 8004134:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800413a:	f7fc fe03 	bl	8000d44 <__aeabi_fmul>
 800413e:	4603      	mov	r3, r0
 8004140:	461a      	mov	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 8004146:	69f9      	ldr	r1, [r7, #28]
 8004148:	6a38      	ldr	r0, [r7, #32]
 800414a:	f7fc feaf 	bl	8000eac <__aeabi_fdiv>
 800414e:	4603      	mov	r3, r0
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe fd25 	bl	8002ba0 <_ZSt4atanf>
 8004156:	4603      	mov	r3, r0
 8004158:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc fdf2 	bl	8000d44 <__aeabi_fmul>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416c:	f7fc fe9e 	bl	8000eac <__aeabi_fdiv>
 8004170:	4603      	mov	r3, r0
 8004172:	461c      	mov	r4, r3
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004178:	f7fc fe98 	bl	8000eac <__aeabi_fdiv>
 800417c:	4603      	mov	r3, r0
 800417e:	4619      	mov	r1, r3
 8004180:	4620      	mov	r0, r4
 8004182:	f7fe fd19 	bl	8002bb8 <_ZSt5atan2ff>
 8004186:	4603      	mov	r3, r0
 8004188:	4619      	mov	r1, r3
 800418a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800418c:	f7fc fdda 	bl	8000d44 <__aeabi_fmul>
 8004190:	4603      	mov	r3, r0
 8004192:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 8004194:	6938      	ldr	r0, [r7, #16]
 8004196:	f7fc ffb1 	bl	80010fc <__aeabi_f2iz>
 800419a:	4603      	mov	r3, r0
 800419c:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 80041a0:	da23      	bge.n	80041ea <_Z9DCM2EulerPsS_+0x416>
 80041a2:	6938      	ldr	r0, [r7, #16]
 80041a4:	f7fc ffaa 	bl	80010fc <__aeabi_f2iz>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80041ae:	db1c      	blt.n	80041ea <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <_Z9DCM2EulerPsS_+0x4c4>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d04b      	beq.n	8004250 <_Z9DCM2EulerPsS_+0x47c>
 80041b8:	4b38      	ldr	r3, [pc, #224]	; (800429c <_Z9DCM2EulerPsS_+0x4c8>)
 80041ba:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc ff5c 	bl	8001080 <__aeabi_fcmplt>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d100      	bne.n	80041d0 <_Z9DCM2EulerPsS_+0x3fc>
 80041ce:	e03f      	b.n	8004250 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 80041d0:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <_Z9DCM2EulerPsS_+0x4cc>)
 80041d2:	f993 3000 	ldrsb.w	r3, [r3]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	b25a      	sxtb	r2, r3
 80041de:	4b30      	ldr	r3, [pc, #192]	; (80042a0 <_Z9DCM2EulerPsS_+0x4cc>)
 80041e0:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80041e2:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <_Z9DCM2EulerPsS_+0x4c4>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80041e8:	e032      	b.n	8004250 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 80041ea:	6938      	ldr	r0, [r7, #16]
 80041ec:	f7fc ff86 	bl	80010fc <__aeabi_f2iz>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2baf      	cmp	r3, #175	; 0xaf
 80041f4:	dd22      	ble.n	800423c <_Z9DCM2EulerPsS_+0x468>
 80041f6:	6938      	ldr	r0, [r7, #16]
 80041f8:	f7fc ff80 	bl	80010fc <__aeabi_f2iz>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2bb4      	cmp	r3, #180	; 0xb4
 8004200:	dc1c      	bgt.n	800423c <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <_Z9DCM2EulerPsS_+0x4c4>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d022      	beq.n	8004250 <_Z9DCM2EulerPsS_+0x47c>
 800420a:	4b24      	ldr	r3, [pc, #144]	; (800429c <_Z9DCM2EulerPsS_+0x4c8>)
 800420c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc ff51 	bl	80010bc <__aeabi_fcmpgt>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d100      	bne.n	8004222 <_Z9DCM2EulerPsS_+0x44e>
 8004220:	e016      	b.n	8004250 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 8004222:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <_Z9DCM2EulerPsS_+0x4cc>)
 8004224:	f993 3000 	ldrsb.w	r3, [r3]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	b25a      	sxtb	r2, r3
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <_Z9DCM2EulerPsS_+0x4cc>)
 8004232:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 8004234:	4b18      	ldr	r3, [pc, #96]	; (8004298 <_Z9DCM2EulerPsS_+0x4c4>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 800423a:	e009      	b.n	8004250 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <_Z9DCM2EulerPsS_+0x4d0>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	2b32      	cmp	r3, #50	; 0x32
 8004242:	d905      	bls.n	8004250 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <_Z9DCM2EulerPsS_+0x4c4>)
 8004246:	2202      	movs	r2, #2
 8004248:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <_Z9DCM2EulerPsS_+0x4d0>)
 800424c:	2200      	movs	r2, #0
 800424e:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <_Z9DCM2EulerPsS_+0x4c4>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d005      	beq.n	8004264 <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <_Z9DCM2EulerPsS_+0x4d0>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <_Z9DCM2EulerPsS_+0x4d0>)
 8004262:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <_Z9DCM2EulerPsS_+0x4cc>)
 8004266:	f993 3000 	ldrsb.w	r3, [r3]
 800426a:	461a      	mov	r2, r3
 800426c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004270:	fb03 f302 	mul.w	r3, r3, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc fd11 	bl	8000c9c <__aeabi_i2f>
 800427a:	4603      	mov	r3, r0
 800427c:	4619      	mov	r1, r3
 800427e:	6938      	ldr	r0, [r7, #16]
 8004280:	f7fc fc58 	bl	8000b34 <__addsf3>
 8004284:	4603      	mov	r3, r0
 8004286:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 800428e:	bf00      	nop

}
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	3738      	adds	r7, #56	; 0x38
 8004294:	46bd      	mov	sp, r7
 8004296:	bdb0      	pop	{r4, r5, r7, pc}
 8004298:	20000014 	.word	0x20000014
 800429c:	20000d58 	.word	0x20000d58
 80042a0:	2000168c 	.word	0x2000168c
 80042a4:	2000168e 	.word	0x2000168e

080042a8 <_Z6squaref>:

float square(float x) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	float y = x*x;
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc fd46 	bl	8000d44 <__aeabi_fmul>
 80042b8:	4603      	mov	r3, r0
 80042ba:	60fb      	str	r3, [r7, #12]
	return y;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <_Z6PWMYazv>:

void PWMYaz() {
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  if(!motor_start) {
			  MotorBaslat();
			  motor_start = true;
		  }
*/
	  if(armed) {
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <_Z6PWMYazv+0xac>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d036      	beq.n	8004342 <_Z6PWMYazv+0x7a>



		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 80042d4:	4b28      	ldr	r3, [pc, #160]	; (8004378 <_Z6PWMYazv+0xb0>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f240 52db 	movw	r2, #1499	; 0x5db
 80042dc:	4293      	cmp	r3, r2
 80042de:	dc1b      	bgt.n	8004318 <_Z6PWMYazv+0x50>
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <_Z6PWMYazv+0xb0>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f240 424c 	movw	r2, #1100	; 0x44c
 80042e8:	4293      	cmp	r3, r2
 80042ea:	dd15      	ble.n	8004318 <_Z6PWMYazv+0x50>


			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <_Z6PWMYazv+0xb4>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <_Z6PWMYazv+0xb8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <_Z6PWMYazv+0xb4>)
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <_Z6PWMYazv+0xb8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <_Z6PWMYazv+0xb4>)
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <_Z6PWMYazv+0xb8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 800430a:	4b1c      	ldr	r3, [pc, #112]	; (800437c <_Z6PWMYazv+0xb4>)
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <_Z6PWMYazv+0xb8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
 8004314:	bf00      	nop
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }



}
 8004316:	e028      	b.n	800436a <_Z6PWMYazv+0xa2>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <_Z6PWMYazv+0xb8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004320:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <_Z6PWMYazv+0xb8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <_Z6PWMYazv+0xb8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <_Z6PWMYazv+0xb8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004340:	e013      	b.n	800436a <_Z6PWMYazv+0xa2>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <_Z6PWMYazv+0xb8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800434a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <_Z6PWMYazv+0xb8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <_Z6PWMYazv+0xb8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800435e:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <_Z6PWMYazv+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	200015f9 	.word	0x200015f9
 8004378:	200015a0 	.word	0x200015a0
 800437c:	20001580 	.word	0x20001580
 8004380:	20000934 	.word	0x20000934

08004384 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800439e:	da12      	bge.n	80043c6 <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fc5a 	bl	8003c5c <_Z7GyroOkuh>
 80043a8:	4603      	mov	r3, r0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc fc76 	bl	8000c9c <__aeabi_i2f>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4619      	mov	r1, r3
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7fc fbbd 	bl	8000b34 <__addsf3>
 80043ba:	4603      	mov	r3, r0
 80043bc:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3301      	adds	r3, #1
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	e7e8      	b.n	8004398 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80043c6:	4905      	ldr	r1, [pc, #20]	; (80043dc <_Z7GyroErrh+0x58>)
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f7fc fd6f 	bl	8000eac <__aeabi_fdiv>
 80043ce:	4603      	mov	r3, r0
 80043d0:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80043d2:	68fb      	ldr	r3, [r7, #12]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	44fa0000 	.word	0x44fa0000

080043e0 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80043fa:	da12      	bge.n	8004422 <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fcb2 	bl	8003d68 <_Z6AccOkuh>
 8004404:	4603      	mov	r3, r0
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc fc48 	bl	8000c9c <__aeabi_i2f>
 800440c:	4603      	mov	r3, r0
 800440e:	4619      	mov	r1, r3
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7fc fb8f 	bl	8000b34 <__addsf3>
 8004416:	4603      	mov	r3, r0
 8004418:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	e7e8      	b.n	80043f4 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8004422:	4905      	ldr	r1, [pc, #20]	; (8004438 <_Z6AccErrh+0x58>)
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7fc fd41 	bl	8000eac <__aeabi_fdiv>
 800442a:	4603      	mov	r3, r0
 800442c:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	44fa0000 	.word	0x44fa0000
 800443c:	00000000 	.word	0x00000000

08004440 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	b0ab      	sub	sp, #172	; 0xac
 8004444:	af0c      	add	r7, sp, #48	; 0x30
 8004446:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4a70      	ldr	r2, [pc, #448]	; (800460c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	f040 8533 	bne.w	8004eb8 <HAL_TIM_PeriodElapsedCallback+0xa78>
		//1.25 ms || 800 Hz


		set_ucounter(SONAR_CLOCK_RATE);
 8004452:	2050      	movs	r0, #80	; 0x50
 8004454:	f7fe fb68 	bl	8002b28 <set_ucounter>
		set_b_counter(12);
 8004458:	200c      	movs	r0, #12
 800445a:	f7fe f9b3 	bl	80027c4 <set_b_counter>

		controller_counter++;
 800445e:	4b6c      	ldr	r3, [pc, #432]	; (8004610 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	4b6a      	ldr	r3, [pc, #424]	; (8004610 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004468:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 800446a:	4b6a      	ldr	r3, [pc, #424]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004474:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 8004476:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	4b66      	ldr	r3, [pc, #408]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8004480:	801a      	strh	r2, [r3, #0]
		gps_counter++;
 8004482:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	4b64      	ldr	r3, [pc, #400]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800448c:	801a      	strh	r2, [r3, #0]

		if(gps_counter == GPS_CLOCK_RATE) {
 800448e:	4b63      	ldr	r3, [pc, #396]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	2ba0      	cmp	r3, #160	; 0xa0
 8004494:	d138      	bne.n	8004508 <HAL_TIM_PeriodElapsedCallback+0xc8>
			gps_counter = 0;
 8004496:	4b61      	ldr	r3, [pc, #388]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8004498:	2200      	movs	r2, #0
 800449a:	801a      	strh	r2, [r3, #0]
			getGPSData(&gpsData);
 800449c:	4860      	ldr	r0, [pc, #384]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800449e:	f7fd fc3b 	bl	8001d18 <getGPSData>
			//if(gpsData.ggastruct.isfixValid) {
				EKF.Qgps = 4e2 * gpsData.ggastruct.HDOP;
 80044a2:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	495f      	ldr	r1, [pc, #380]	; (8004624 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fc fc4b 	bl	8000d44 <__aeabi_fmul>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b5d      	ldr	r3, [pc, #372]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80044b4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
			//}
			float lla[3];
			float ecef[3];
			float ecef0[3];

			lla[0] = gpsData.ggastruct.lcation.latitude;
 80044b8:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
			lla[1] = gpsData.ggastruct.lcation.longitude;
 80044be:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
			lla[2] = gpsData.ggastruct.alt.altitude;
 80044c4:	4b56      	ldr	r3, [pc, #344]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	653b      	str	r3, [r7, #80]	; 0x50

			lla2ecef(lla, ecef);
 80044ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80044ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe f9a7 	bl	8002828 <_Z8lla2ecefPfS_>
			lla2ecef(lla0, ecef0);
 80044da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044de:	4619      	mov	r1, r3
 80044e0:	4852      	ldr	r0, [pc, #328]	; (800462c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80044e2:	f7fe f9a1 	bl	8002828 <_Z8lla2ecefPfS_>

			float vned[2];
			ecef2ned(ecef, ecef0, lla0, vned);
 80044e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80044ee:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80044f2:	4a4e      	ldr	r2, [pc, #312]	; (800462c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80044f4:	f7fe fa4e 	bl	8002994 <_Z8ecef2nedPfS_S_S_>

			EKF.xned = vned[0];
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	4a4b      	ldr	r2, [pc, #300]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80044fc:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
			EKF.yned = vned[1];
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	4a49      	ldr	r2, [pc, #292]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8004504:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228

		}

		if(mag_counter == MAG_CLOCK_RATE) {
 8004508:	4b43      	ldr	r3, [pc, #268]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	2b0b      	cmp	r3, #11
 800450e:	d146      	bne.n	800459e <HAL_TIM_PeriodElapsedCallback+0x15e>
			mag_counter = 0;
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8004512:	2200      	movs	r2, #0
 8004514:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 8004516:	4a46      	ldr	r2, [pc, #280]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004518:	4946      	ldr	r1, [pc, #280]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800451a:	4847      	ldr	r0, [pc, #284]	; (8004638 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800451c:	f7fc fe9e 	bl	800125c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 8004520:	4b45      	ldr	r3, [pc, #276]	; (8004638 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004526:	4a43      	ldr	r2, [pc, #268]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004528:	f9b2 1000 	ldrsh.w	r1, [r2]
 800452c:	4a40      	ldr	r2, [pc, #256]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800452e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f85c 	bl	80035f0 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 8004538:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800453a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800453e:	843b      	strh	r3, [r7, #32]
			mag[1] = MAG_Y_CALIB;
 8004540:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	847b      	strh	r3, [r7, #34]	; 0x22
			mag[2] = MAG_Z_CALIB;
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800454a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800454e:	84bb      	strh	r3, [r7, #36]	; 0x24

			int16_t acc[3];
			acc[0] = accX;
 8004550:	4b3d      	ldr	r3, [pc, #244]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fdd1 	bl	80010fc <__aeabi_f2iz>
 800455a:	4603      	mov	r3, r0
 800455c:	b21b      	sxth	r3, r3
 800455e:	833b      	strh	r3, [r7, #24]
			acc[1] = accY;
 8004560:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fc fdc9 	bl	80010fc <__aeabi_f2iz>
 800456a:	4603      	mov	r3, r0
 800456c:	b21b      	sxth	r3, r3
 800456e:	837b      	strh	r3, [r7, #26]
			acc[2] = accZ;
 8004570:	4b37      	ldr	r3, [pc, #220]	; (8004650 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7fc fdc1 	bl	80010fc <__aeabi_f2iz>
 800457a:	4603      	mov	r3, r0
 800457c:	b21b      	sxth	r3, r3
 800457e:	83bb      	strh	r3, [r7, #28]
			euler_angles = DCM2Euler(acc, mag);
 8004580:	4c34      	ldr	r4, [pc, #208]	; (8004654 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8004582:	463b      	mov	r3, r7
 8004584:	f107 0220 	add.w	r2, r7, #32
 8004588:	f107 0118 	add.w	r1, r7, #24
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fc21 	bl	8003dd4 <_Z9DCM2EulerPsS_>
 8004592:	4623      	mov	r3, r4
 8004594:	463a      	mov	r2, r7
 8004596:	6810      	ldr	r0, [r2, #0]
 8004598:	6851      	ldr	r1, [r2, #4]
 800459a:	6892      	ldr	r2, [r2, #8]
 800459c:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	2b28      	cmp	r3, #40	; 0x28
 80045a4:	d125      	bne.n	80045f2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
			  camera_counter = 0;
 80045a6:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 80045ac:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80045ae:	4a2b      	ldr	r2, [pc, #172]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80045b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80045b2:	c303      	stmia	r3!, {r0, r1}
 80045b4:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80045b8:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80045bc:	b21b      	sxth	r3, r3
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fb6c 	bl	8000c9c <__aeabi_i2f>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4926      	ldr	r1, [pc, #152]	; (8004660 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fc6f 	bl	8000eac <__aeabi_fdiv>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80045d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

			  if(!cam_data.detected) {
 80045d8:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PeriodElapsedCallback+0x1aa>
				  EKF.Qc = 9e9;
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80045e2:	4a20      	ldr	r2, [pc, #128]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80045e4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 80045e8:	e003      	b.n	80045f2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80045ee:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			  }
		}

		if(get_ucounter() == 1) {
 80045f2:	f7fe fab3 	bl	8002b5c <get_ucounter>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d032      	beq.n	800466c <HAL_TIM_PeriodElapsedCallback+0x22c>
			request_range();
 8004606:	f7fe fa55 	bl	8002ab4 <request_range>
 800460a:	e0f0      	b.n	80047ee <HAL_TIM_PeriodElapsedCallback+0x3ae>
 800460c:	2000097c 	.word	0x2000097c
 8004610:	20001614 	.word	0x20001614
 8004614:	20001616 	.word	0x20001616
 8004618:	20001618 	.word	0x20001618
 800461c:	2000161a 	.word	0x2000161a
 8004620:	20001690 	.word	0x20001690
 8004624:	43c80000 	.word	0x43c80000
 8004628:	20000d58 	.word	0x20000d58
 800462c:	20000008 	.word	0x20000008
 8004630:	20001684 	.word	0x20001684
 8004634:	20001682 	.word	0x20001682
 8004638:	20001680 	.word	0x20001680
 800463c:	20001686 	.word	0x20001686
 8004640:	20001688 	.word	0x20001688
 8004644:	2000168a 	.word	0x2000168a
 8004648:	20000b64 	.word	0x20000b64
 800464c:	20000b68 	.word	0x20000b68
 8004650:	20000b6c 	.word	0x20000b6c
 8004654:	20001674 	.word	0x20001674
 8004658:	20001668 	.word	0x20001668
 800465c:	2000165c 	.word	0x2000165c
 8004660:	42c80000 	.word	0x42c80000
 8004664:	50061c46 	.word	0x50061c46
 8004668:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 800466c:	f7fe fa76 	bl	8002b5c <get_ucounter>
 8004670:	4603      	mov	r3, r0
 8004672:	2b50      	cmp	r3, #80	; 0x50
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80b6 	beq.w	80047ee <HAL_TIM_PeriodElapsedCallback+0x3ae>

		  sonar_range = getRange();
 8004682:	f7fe fa31 	bl	8002ae8 <getRange>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	4b6f      	ldr	r3, [pc, #444]	; (8004848 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800468c:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 800468e:	4b6f      	ldr	r3, [pc, #444]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a6f      	ldr	r2, [pc, #444]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004694:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 8004696:	4b6f      	ldr	r3, [pc, #444]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6f      	ldr	r2, [pc, #444]	; (8004858 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800469c:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 800469e:	4b6f      	ldr	r3, [pc, #444]	; (800485c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	496f      	ldr	r1, [pc, #444]	; (8004860 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fc fb4d 	bl	8000d44 <__aeabi_fmul>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe fa5f 	bl	8002b70 <_ZSt3absf>
 80046b2:	6778      	str	r0, [r7, #116]	; 0x74
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 80046b4:	4b69      	ldr	r3, [pc, #420]	; (800485c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4969      	ldr	r1, [pc, #420]	; (8004860 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fb42 	bl	8000d44 <__aeabi_fmul>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe fa54 	bl	8002b70 <_ZSt3absf>
 80046c8:	6738      	str	r0, [r7, #112]	; 0x70
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 80046ca:	4b5f      	ldr	r3, [pc, #380]	; (8004848 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fae0 	bl	8000c94 <__aeabi_ui2f>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fb fea6 	bl	8000428 <__aeabi_f2d>
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	4b60      	ldr	r3, [pc, #384]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80046e2:	f7fc f823 	bl	800072c <__aeabi_ddiv>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4614      	mov	r4, r2
 80046ec:	461d      	mov	r5, r3
 80046ee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80046f0:	f7fe f882 	bl	80027f8 <_ZSt3cosf>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fb fe96 	bl	8000428 <__aeabi_f2d>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4620      	mov	r0, r4
 8004702:	4629      	mov	r1, r5
 8004704:	f7fb fee8 	bl	80004d8 <__aeabi_dmul>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4614      	mov	r4, r2
 800470e:	461d      	mov	r5, r3
 8004710:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004712:	f7fe f871 	bl	80027f8 <_ZSt3cosf>
 8004716:	4603      	mov	r3, r0
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb fe85 	bl	8000428 <__aeabi_f2d>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f7fb fed7 	bl	80004d8 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	f7fc f9a9 	bl	8000a88 <__aeabi_d2f>
 8004736:	4603      	mov	r3, r0
 8004738:	4a44      	ldr	r2, [pc, #272]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800473a:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 800473c:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8004740:	66fb      	str	r3, [r7, #108]	; 0x6c
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a42      	ldr	r2, [pc, #264]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f7fc f9ef 	bl	8000b30 <__aeabi_fsub>
 8004752:	4603      	mov	r3, r0
 8004754:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc fba8 	bl	8000eac <__aeabi_fdiv>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004762:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8004764:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fa01 	bl	8002b70 <_ZSt3absf>
 800476e:	4603      	mov	r3, r0
 8004770:	2201      	movs	r2, #1
 8004772:	4614      	mov	r4, r2
 8004774:	493c      	ldr	r1, [pc, #240]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fca0 	bl	80010bc <__aeabi_fcmpgt>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PeriodElapsedCallback+0x346>
 8004782:	2300      	movs	r3, #0
 8004784:	461c      	mov	r4, r3
 8004786:	b2e3      	uxtb	r3, r4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_PeriodElapsedCallback+0x35c>
			  sonar_alt = sonar_alt_;
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0x410>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2e      	ldr	r2, [pc, #184]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8004792:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 8004794:	4b30      	ldr	r3, [pc, #192]	; (8004858 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2e      	ldr	r2, [pc, #184]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800479a:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4932      	ldr	r1, [pc, #200]	; (800486c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fc8a 	bl	80010bc <__aeabi_fcmpgt>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <HAL_TIM_PeriodElapsedCallback+0x388>
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb fe38 	bl	8000428 <__aeabi_f2d>
 80047b8:	a321      	add	r3, pc, #132	; (adr r3, 8004840 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fc f8fd 	bl	80009bc <__aeabi_dcmplt>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_TIM_PeriodElapsedCallback+0x39a>
			  EKF.Qs = 9e9;
 80047c8:	4b29      	ldr	r3, [pc, #164]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80047ca:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80047cc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
			  EKF.salt = 50;
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80047d2:	4a29      	ldr	r2, [pc, #164]	; (8004878 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80047d4:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 80047d8:	e009      	b.n	80047ee <HAL_TIM_PeriodElapsedCallback+0x3ae>
		  }

		  else {
			  EKF.Qs = 0.25;
 80047da:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80047dc:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80047e0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
			  EKF.salt = 1;
 80047e4:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80047e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ea:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		  }


		}

		if(get_b_counter() == 1) {
 80047ee:	f7fd ffdf 	bl	80027b0 <get_b_counter>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_TIM_PeriodElapsedCallback+0x3c8>
			write_ut();
 8004802:	f7fd fdd5 	bl	80023b0 <write_ut>
 8004806:	e069      	b.n	80048dc <HAL_TIM_PeriodElapsedCallback+0x49c>
		}

		else if(get_b_counter() == 5) { //5 ms
 8004808:	f7fd ffd2 	bl	80027b0 <get_b_counter>
 800480c:	4603      	mov	r3, r0
 800480e:	2b05      	cmp	r3, #5
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d031      	beq.n	8004880 <HAL_TIM_PeriodElapsedCallback+0x440>
			bmp.uncomp.temp = read_ut ();
 800481c:	f7fd fde0 	bl	80023e0 <read_ut>
 8004820:	4603      	mov	r3, r0
 8004822:	4618      	mov	r0, r3
 8004824:	f7fc fa3a 	bl	8000c9c <__aeabi_i2f>
 8004828:	4603      	mov	r3, r0
 800482a:	4a14      	ldr	r2, [pc, #80]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800482c:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 800482e:	4813      	ldr	r0, [pc, #76]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8004830:	f7fd fdf0 	bl	8002414 <get_temp>
 8004834:	4603      	mov	r3, r0
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8004838:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 800483a:	f7fd fe43 	bl	80024c4 <write_up>
 800483e:	e04d      	b.n	80048dc <HAL_TIM_PeriodElapsedCallback+0x49c>
 8004840:	33333333 	.word	0x33333333
 8004844:	3fd33333 	.word	0x3fd33333
 8004848:	20001610 	.word	0x20001610
 800484c:	20001600 	.word	0x20001600
 8004850:	20001604 	.word	0x20001604
 8004854:	20001608 	.word	0x20001608
 8004858:	2000160c 	.word	0x2000160c
 800485c:	20000bc4 	.word	0x20000bc4
 8004860:	3c8e8a72 	.word	0x3c8e8a72
 8004864:	40590000 	.word	0x40590000
 8004868:	40e00000 	.word	0x40e00000
 800486c:	40c00000 	.word	0x40c00000
 8004870:	20000d58 	.word	0x20000d58
 8004874:	50061c46 	.word	0x50061c46
 8004878:	42480000 	.word	0x42480000
 800487c:	2000161c 	.word	0x2000161c
		}

		else if(get_b_counter() == 12) { //
 8004880:	f7fd ff96 	bl	80027b0 <get_b_counter>
 8004884:	4603      	mov	r3, r0
 8004886:	2b0c      	cmp	r3, #12
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d023      	beq.n	80048dc <HAL_TIM_PeriodElapsedCallback+0x49c>
			bmp.uncomp.press = read_up (bmp.oss);
 8004894:	4ba8      	ldr	r3, [pc, #672]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8004896:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004898:	f7fd fe34 	bl	8002504 <read_up>
 800489c:	4603      	mov	r3, r0
 800489e:	4aa6      	ldr	r2, [pc, #664]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80048a0:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 80048a2:	4ea5      	ldr	r6, [pc, #660]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80048a4:	466d      	mov	r5, sp
 80048a6:	f106 0410 	add.w	r4, r6, #16
 80048aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80048b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80048ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048be:	f7fd fe4f 	bl	8002560 <get_pressure>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4a9c      	ldr	r2, [pc, #624]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80048c6:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 80048c8:	489b      	ldr	r0, [pc, #620]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80048ca:	f7fd ff15 	bl	80026f8 <get_altitude>
 80048ce:	4603      	mov	r3, r0
 80048d0:	4a99      	ldr	r2, [pc, #612]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80048d2:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 80048d4:	4b98      	ldr	r3, [pc, #608]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80048d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d8:	4a98      	ldr	r2, [pc, #608]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80048da:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 80048dc:	4b98      	ldr	r3, [pc, #608]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x700>)
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	f040 82e9 	bne.w	8004eb8 <HAL_TIM_PeriodElapsedCallback+0xa78>

		  controller_counter = 0;
 80048e6:	4b96      	ldr	r3, [pc, #600]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x700>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	801a      	strh	r2, [r3, #0]



		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 80048ec:	201d      	movs	r0, #29
 80048ee:	f7ff f9b5 	bl	8003c5c <_Z7GyroOkuh>
 80048f2:	4603      	mov	r3, r0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc f9d1 	bl	8000c9c <__aeabi_i2f>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b91      	ldr	r3, [pc, #580]	; (8004b44 <HAL_TIM_PeriodElapsedCallback+0x704>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7fc f914 	bl	8000b30 <__aeabi_fsub>
 8004908:	4603      	mov	r3, r0
 800490a:	498f      	ldr	r1, [pc, #572]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x708>)
 800490c:	4618      	mov	r0, r3
 800490e:	f7fc facd 	bl	8000eac <__aeabi_fdiv>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	4b8d      	ldr	r3, [pc, #564]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8004918:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 800491a:	201f      	movs	r0, #31
 800491c:	f7ff f99e 	bl	8003c5c <_Z7GyroOkuh>
 8004920:	4603      	mov	r3, r0
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc f9ba 	bl	8000c9c <__aeabi_i2f>
 8004928:	4602      	mov	r2, r0
 800492a:	4b89      	ldr	r3, [pc, #548]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x710>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fc f8fd 	bl	8000b30 <__aeabi_fsub>
 8004936:	4603      	mov	r3, r0
 8004938:	4983      	ldr	r1, [pc, #524]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x708>)
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc fab6 	bl	8000eac <__aeabi_fdiv>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	4b83      	ldr	r3, [pc, #524]	; (8004b54 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004946:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8004948:	2021      	movs	r0, #33	; 0x21
 800494a:	f7ff f987 	bl	8003c5c <_Z7GyroOkuh>
 800494e:	4603      	mov	r3, r0
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc f9a3 	bl	8000c9c <__aeabi_i2f>
 8004956:	4602      	mov	r2, r0
 8004958:	4b7f      	ldr	r3, [pc, #508]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x718>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f7fc f8e6 	bl	8000b30 <__aeabi_fsub>
 8004964:	4603      	mov	r3, r0
 8004966:	4978      	ldr	r1, [pc, #480]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8004968:	4618      	mov	r0, r3
 800496a:	f7fc fa9f 	bl	8000eac <__aeabi_fdiv>
 800496e:	4603      	mov	r3, r0
 8004970:	461a      	mov	r2, r3
 8004972:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004974:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8004976:	4b75      	ldr	r3, [pc, #468]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a79      	ldr	r2, [pc, #484]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800497c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		  EKF.gyro[1] = -1*gyroY;
 8004980:	4b74      	ldr	r3, [pc, #464]	; (8004b54 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004988:	4a75      	ldr	r2, [pc, #468]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800498a:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
		  EKF.gyro[2] = gyroZ;
 800498e:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a73      	ldr	r2, [pc, #460]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8004994:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 8004998:	2032      	movs	r0, #50	; 0x32
 800499a:	f7ff f9e5 	bl	8003d68 <_Z6AccOkuh>
 800499e:	4603      	mov	r3, r0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc f97b 	bl	8000c9c <__aeabi_i2f>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4a6e      	ldr	r2, [pc, #440]	; (8004b64 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80049aa:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 80049ac:	2034      	movs	r0, #52	; 0x34
 80049ae:	f7ff f9db 	bl	8003d68 <_Z6AccOkuh>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fc f971 	bl	8000c9c <__aeabi_i2f>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4a6a      	ldr	r2, [pc, #424]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80049be:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 80049c0:	2036      	movs	r0, #54	; 0x36
 80049c2:	f7ff f9d1 	bl	8003d68 <_Z6AccOkuh>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fc f967 	bl	8000c9c <__aeabi_i2f>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4a66      	ldr	r2, [pc, #408]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 80049d2:	6013      	str	r3, [r2, #0]

		  accXc = (float)accX* 0.0078;
 80049d4:	4b63      	ldr	r3, [pc, #396]	; (8004b64 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fb fd25 	bl	8000428 <__aeabi_f2d>
 80049de:	a354      	add	r3, pc, #336	; (adr r3, 8004b30 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fd78 	bl	80004d8 <__aeabi_dmul>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	f7fc f84a 	bl	8000a88 <__aeabi_d2f>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4a5e      	ldr	r2, [pc, #376]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80049f8:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 80049fa:	4b5b      	ldr	r3, [pc, #364]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fb fd12 	bl	8000428 <__aeabi_f2d>
 8004a04:	a34a      	add	r3, pc, #296	; (adr r3, 8004b30 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fd65 	bl	80004d8 <__aeabi_dmul>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	f7fc f837 	bl	8000a88 <__aeabi_d2f>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4a55      	ldr	r2, [pc, #340]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8004a1e:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 8004a20:	4b52      	ldr	r3, [pc, #328]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fcff 	bl	8000428 <__aeabi_f2d>
 8004a2a:	a341      	add	r3, pc, #260	; (adr r3, 8004b30 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fd52 	bl	80004d8 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7fc f824 	bl	8000a88 <__aeabi_d2f>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4a4d      	ldr	r2, [pc, #308]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8004a44:	6013      	str	r3, [r2, #0]
		  accZc = 0.0091315*accYs - 0.072464*accXs + 0.98549*accZs + 0.08443;
		  */


		  //float acc[3];
		  EKF.acc[0] = accXc;// - AccXh;
 8004a46:	4b4a      	ldr	r3, [pc, #296]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a45      	ldr	r2, [pc, #276]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8004a4c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
		  EKF.acc[1] = accYc;// - AccYh;
 8004a50:	4b48      	ldr	r3, [pc, #288]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8004a56:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		  EKF.acc[2] = accZc;// - AccZh;
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a40      	ldr	r2, [pc, #256]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8004a60:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 8004a64:	4b45      	ldr	r3, [pc, #276]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8004a66:	66bb      	str	r3, [r7, #104]	; 0x68
		  float roll_r  = deg2rad*EKF.state.angles[0];
 8004a68:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8004a6a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004a6e:	4944      	ldr	r1, [pc, #272]	; (8004b80 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fc f967 	bl	8000d44 <__aeabi_fmul>
 8004a76:	4603      	mov	r3, r0
 8004a78:	667b      	str	r3, [r7, #100]	; 0x64
		  float pitch_r = deg2rad*EKF.state.angles[1];
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8004a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004a80:	493f      	ldr	r1, [pc, #252]	; (8004b80 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fc f95e 	bl	8000d44 <__aeabi_fmul>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	663b      	str	r3, [r7, #96]	; 0x60

		  //Without * g
		  float gx = cos(roll_r)*sin(pitch_r);
 8004a8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004a8e:	f7fd feb3 	bl	80027f8 <_ZSt3cosf>
 8004a92:	4604      	mov	r4, r0
 8004a94:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004a96:	f7fd febb 	bl	8002810 <_ZSt3sinf>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7fc f950 	bl	8000d44 <__aeabi_fmul>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
		  float gy = -sin(roll_r);
 8004aa8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004aaa:	f7fd feb1 	bl	8002810 <_ZSt3sinf>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004ab4:	65bb      	str	r3, [r7, #88]	; 0x58
		  float gz = cos(roll_r)*cos(pitch_r);
 8004ab6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004ab8:	f7fd fe9e 	bl	80027f8 <_ZSt3cosf>
 8004abc:	4604      	mov	r4, r0
 8004abe:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004ac0:	f7fd fe9a 	bl	80027f8 <_ZSt3cosf>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7fc f93b 	bl	8000d44 <__aeabi_fmul>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	657b      	str	r3, [r7, #84]	; 0x54

		  accXm = accXc*cos(pitch_r) + accZc*cos(roll_r)*sin(pitch_r) + accYc*sin(roll_r)*sin(pitch_r);
 8004ad2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004ad4:	f7fd fe90 	bl	80027f8 <_ZSt3cosf>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7fc f92f 	bl	8000d44 <__aeabi_fmul>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	461c      	mov	r4, r3
 8004aea:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004aec:	f7fd fe84 	bl	80027f8 <_ZSt3cosf>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fc f923 	bl	8000d44 <__aeabi_fmul>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461d      	mov	r5, r3
 8004b02:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004b04:	f7fd fe84 	bl	8002810 <_ZSt3sinf>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f7fc f919 	bl	8000d44 <__aeabi_fmul>
 8004b12:	4603      	mov	r3, r0
 8004b14:	4619      	mov	r1, r3
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7fc f80c 	bl	8000b34 <__addsf3>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461c      	mov	r4, r3
 8004b20:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004b22:	f7fd fe75 	bl	8002810 <_ZSt3sinf>
 8004b26:	4602      	mov	r2, r0
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	e029      	b.n	8004b84 <HAL_TIM_PeriodElapsedCallback+0x744>
 8004b30:	8e8a71de 	.word	0x8e8a71de
 8004b34:	3f7ff2e4 	.word	0x3f7ff2e4
 8004b38:	2000161c 	.word	0x2000161c
 8004b3c:	200015fc 	.word	0x200015fc
 8004b40:	20001614 	.word	0x20001614
 8004b44:	20000b88 	.word	0x20000b88
 8004b48:	41660000 	.word	0x41660000
 8004b4c:	20000b58 	.word	0x20000b58
 8004b50:	20000b8c 	.word	0x20000b8c
 8004b54:	20000b5c 	.word	0x20000b5c
 8004b58:	20000b90 	.word	0x20000b90
 8004b5c:	20000b60 	.word	0x20000b60
 8004b60:	20000d58 	.word	0x20000d58
 8004b64:	20000b64 	.word	0x20000b64
 8004b68:	20000b68 	.word	0x20000b68
 8004b6c:	20000b6c 	.word	0x20000b6c
 8004b70:	20000b70 	.word	0x20000b70
 8004b74:	20000b74 	.word	0x20000b74
 8004b78:	20000b78 	.word	0x20000b78
 8004b7c:	411cf5c3 	.word	0x411cf5c3
 8004b80:	3c8e8a72 	.word	0x3c8e8a72
 8004b84:	4610      	mov	r0, r2
 8004b86:	f7fc f8dd 	bl	8000d44 <__aeabi_fmul>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461d      	mov	r5, r3
 8004b8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004b90:	f7fd fe3e 	bl	8002810 <_ZSt3sinf>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4619      	mov	r1, r3
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f7fc f8d3 	bl	8000d44 <__aeabi_fmul>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7fb ffc6 	bl	8000b34 <__addsf3>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b9e      	ldr	r3, [pc, #632]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8004bae:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 8004bb0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004bb2:	f7fd fe21 	bl	80027f8 <_ZSt3cosf>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	4b9c      	ldr	r3, [pc, #624]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fc f8c0 	bl	8000d44 <__aeabi_fmul>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004bca:	f7fd fe21 	bl	8002810 <_ZSt3sinf>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b97      	ldr	r3, [pc, #604]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7fc f8b4 	bl	8000d44 <__aeabi_fmul>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4619      	mov	r1, r3
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7fb ffa5 	bl	8000b30 <__aeabi_fsub>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b92      	ldr	r3, [pc, #584]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8004bec:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) - accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 8004bee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004bf0:	f7fd fe02 	bl	80027f8 <_ZSt3cosf>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b8e      	ldr	r3, [pc, #568]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7fc f8a1 	bl	8000d44 <__aeabi_fmul>
 8004c02:	4603      	mov	r3, r0
 8004c04:	461c      	mov	r4, r3
 8004c06:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004c08:	f7fd fdf6 	bl	80027f8 <_ZSt3cosf>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7fc f897 	bl	8000d44 <__aeabi_fmul>
 8004c16:	4603      	mov	r3, r0
 8004c18:	461c      	mov	r4, r3
 8004c1a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004c1c:	f7fd fdf8 	bl	8002810 <_ZSt3sinf>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b85      	ldr	r3, [pc, #532]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f7fc f88b 	bl	8000d44 <__aeabi_fmul>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4619      	mov	r1, r3
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7fb ff7c 	bl	8000b30 <__aeabi_fsub>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461c      	mov	r4, r3
 8004c3c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004c3e:	f7fd fddb 	bl	80027f8 <_ZSt3cosf>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b79      	ldr	r3, [pc, #484]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fc f87a 	bl	8000d44 <__aeabi_fmul>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461d      	mov	r5, r3
 8004c54:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c56:	f7fd fddb 	bl	8002810 <_ZSt3sinf>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f7fc f870 	bl	8000d44 <__aeabi_fmul>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4619      	mov	r1, r3
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7fb ff63 	bl	8000b34 <__addsf3>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	4b72      	ldr	r3, [pc, #456]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8004c74:	601a      	str	r2, [r3, #0]

		  accXm -= gx;
 8004c76:	4b6c      	ldr	r3, [pc, #432]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fb ff57 	bl	8000b30 <__aeabi_fsub>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8004c88:	601a      	str	r2, [r3, #0]
		  accYm -= gy;
 8004c8a:	4b6a      	ldr	r3, [pc, #424]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fb ff4d 	bl	8000b30 <__aeabi_fsub>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8004c9c:	601a      	str	r2, [r3, #0]
		  accZm -= gz;
 8004c9e:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fb ff43 	bl	8000b30 <__aeabi_fsub>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8004cb0:	601a      	str	r2, [r3, #0]

		  accXm *= g; accYm *= g; accZm *= g;
 8004cb2:	4b5d      	ldr	r3, [pc, #372]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fc f843 	bl	8000d44 <__aeabi_fmul>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b59      	ldr	r3, [pc, #356]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	4b5b      	ldr	r3, [pc, #364]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fc f839 	bl	8000d44 <__aeabi_fmul>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b57      	ldr	r3, [pc, #348]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	4b58      	ldr	r3, [pc, #352]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc f82f 	bl	8000d44 <__aeabi_fmul>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8004cec:	601a      	str	r2, [r3, #0]

		  EKF.acc_vert = (accZc - 1.0)  * g;
 8004cee:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb fb98 	bl	8000428 <__aeabi_f2d>
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8004cfe:	f7fb fa33 	bl	8000168 <__aeabi_dsub>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4614      	mov	r4, r2
 8004d08:	461d      	mov	r5, r3
 8004d0a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004d0c:	f7fb fb8c 	bl	8000428 <__aeabi_f2d>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4620      	mov	r0, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7fb fbde 	bl	80004d8 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	f7fb feb0 	bl	8000a88 <__aeabi_d2f>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a46      	ldr	r2, [pc, #280]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d2c:	f8c2 31e8 	str.w	r3, [r2, #488]	; 0x1e8
		  float accXm = ax_b  * g;
		  float accYm = (accYc-AccYh)  * g;
		  */


		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 8004d30:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a43      	ldr	r2, [pc, #268]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d36:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.accYm = accYm;
 8004d3a:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a41      	ldr	r2, [pc, #260]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d40:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		  EKF.accx = accXm;
 8004d44:	4b38      	ldr	r3, [pc, #224]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3e      	ldr	r2, [pc, #248]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d4a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

		  EKF.sonar_alt = sonar_alt;
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3c      	ldr	r2, [pc, #240]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d54:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4
		  EKF.baro_alt = baro_alt;
 8004d58:	4b3c      	ldr	r3, [pc, #240]	; (8004e4c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a39      	ldr	r2, [pc, #228]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d5e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 8004d62:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d6a:	4a36      	ldr	r2, [pc, #216]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d6c:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168

		  EKF.Run();
 8004d70:	4834      	ldr	r0, [pc, #208]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d72:	f007 f8cb 	bl	800bf0c <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 8004d76:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d78:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004d7c:	4a35      	ldr	r2, [pc, #212]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8004d7e:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8004d80:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004d86:	4a33      	ldr	r2, [pc, #204]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8004d88:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d8c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004d90:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8004d92:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8004d94:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004d96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8004d9a:	4a2e      	ldr	r2, [pc, #184]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8004d9c:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8004d9e:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004da0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004da4:	4a2b      	ldr	r2, [pc, #172]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8004da6:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8004da8:	4b26      	ldr	r3, [pc, #152]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004daa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004dae:	4a29      	ldr	r2, [pc, #164]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8004db0:	6153      	str	r3, [r2, #20]


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fd1e 	bl	80037f8 <_Z9checkModei>

			controller.z_vel = EKF.vz;
 8004dbc:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004dbe:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8004dc2:	4a26      	ldr	r2, [pc, #152]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8004dc4:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
			controller.vx	 = EKF.vx;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004dca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004dce:	4a23      	ldr	r2, [pc, #140]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8004dd0:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			controller.x     = EKF.xpos;
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004dd6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004dda:	4a20      	ldr	r2, [pc, #128]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8004ddc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			//controller.z0 = z0;
			controller.z = EKF.alt_gnd;
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8004de2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004de6:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8004de8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

		  controller.state = state;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8004dee:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8004df0:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8004df4:	4615      	mov	r5, r2
 8004df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dfe:	682b      	ldr	r3, [r5, #0]
 8004e00:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8004e02:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8004e04:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8004e06:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8004e0a:	4615      	mov	r5, r2
 8004e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb ff3d 	bl	8000c9c <__aeabi_i2f>
 8004e22:	4603      	mov	r3, r0
 8004e24:	e01e      	b.n	8004e64 <HAL_TIM_PeriodElapsedCallback+0xa24>
 8004e26:	bf00      	nop
 8004e28:	20000b7c 	.word	0x20000b7c
 8004e2c:	20000b74 	.word	0x20000b74
 8004e30:	20000b78 	.word	0x20000b78
 8004e34:	20000b80 	.word	0x20000b80
 8004e38:	20000b70 	.word	0x20000b70
 8004e3c:	20000b84 	.word	0x20000b84
 8004e40:	3ff00000 	.word	0x3ff00000
 8004e44:	20000d58 	.word	0x20000d58
 8004e48:	20001600 	.word	0x20001600
 8004e4c:	200015fc 	.word	0x200015fc
 8004e50:	20001674 	.word	0x20001674
 8004e54:	20000bc4 	.word	0x20000bc4
 8004e58:	200015a0 	.word	0x200015a0
 8004e5c:	20000fe0 	.word	0x20000fe0
 8004e60:	20000ba0 	.word	0x20000ba0
 8004e64:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004e66:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

		  controller.Run();
 8004e6a:	4815      	ldr	r0, [pc, #84]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004e6c:	f005 fd22 	bl	800a8b4 <_ZN10Controller3RunEv>

		  controller_output[0] = controller.controller_output_pwm[0];
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004e72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004e78:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8004e7a:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004e7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004e80:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004e82:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004e86:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004e8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004e8c:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004e90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004e94:	4a0b      	ldr	r2, [pc, #44]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004e96:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004e9a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004ea0:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004ea4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004ea8:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004eaa:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;

		  PWMYaz();
 8004eac:	f7ff fa0c 	bl	80042c8 <_Z6PWMYazv>


		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4806      	ldr	r0, [pc, #24]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 8004eb4:	f001 fa34 	bl	8006320 <HAL_GPIO_TogglePin>
		}
		}
	}
 8004eb8:	bf00      	nop
 8004eba:	377c      	adds	r7, #124	; 0x7c
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec0:	20000fe0 	.word	0x20000fe0
 8004ec4:	20001580 	.word	0x20001580
 8004ec8:	20000ba0 	.word	0x20000ba0
 8004ecc:	40010c00 	.word	0x40010c00

08004ed0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a54      	ldr	r2, [pc, #336]	; (800502c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	f040 80a0 	bne.w	8005022 <HAL_TIM_IC_CaptureCallback+0x152>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7f1b      	ldrb	r3, [r3, #28]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	f040 809b 	bne.w	8005022 <HAL_TIM_IC_CaptureCallback+0x152>
	{
				IC_Val1 = IC_Val2;
 8004eec:	4b50      	ldr	r3, [pc, #320]	; (8005030 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a50      	ldr	r2, [pc, #320]	; (8005034 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004ef2:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8004ef4:	2108      	movs	r1, #8
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f004 f94e 	bl	8009198 <HAL_TIM_ReadCapturedValue>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004f02:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8004f04:	4b4a      	ldr	r3, [pc, #296]	; (8005030 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a4a      	ldr	r2, [pc, #296]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f10:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8004f12:	4b49      	ldr	r3, [pc, #292]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	0fdb      	lsrs	r3, r3, #31
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d006      	beq.n	8004f2c <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8004f1e:	4b46      	ldr	r3, [pc, #280]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004f26:	33ff      	adds	r3, #255	; 0xff
 8004f28:	4a43      	ldr	r2, [pc, #268]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f2a:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 1000 && Diff <= 2000) {
 8004f2c:	4b42      	ldr	r3, [pc, #264]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f34:	db06      	blt.n	8004f44 <HAL_TIM_IC_CaptureCallback+0x74>
 8004f36:	4b40      	ldr	r3, [pc, #256]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f3e:	dc01      	bgt.n	8004f44 <HAL_TIM_IC_CaptureCallback+0x74>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_TIM_IC_CaptureCallback+0x76>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01c      	beq.n	8004f84 <HAL_TIM_IC_CaptureCallback+0xb4>

						ch_[i] = ch[i];
 8004f4a:	4b3c      	ldr	r3, [pc, #240]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b21b      	sxth	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	4b3a      	ldr	r3, [pc, #232]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4b39      	ldr	r3, [pc, #228]	; (8005040 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f60:	4a38      	ldr	r2, [pc, #224]	; (8005044 <HAL_TIM_IC_CaptureCallback+0x174>)
 8004f62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 8004f66:	4b35      	ldr	r3, [pc, #212]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4b32      	ldr	r3, [pc, #200]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a33      	ldr	r2, [pc, #204]	; (8005040 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004f74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 8004f78:	4b33      	ldr	r3, [pc, #204]	; (8005048 <HAL_TIM_IC_CaptureCallback+0x178>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	4a32      	ldr	r2, [pc, #200]	; (8005048 <HAL_TIM_IC_CaptureCallback+0x178>)
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e015      	b.n	8004fb0 <HAL_TIM_IC_CaptureCallback+0xe0>


					}

					else if(Diff > CH0) {
 8004f84:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	bfcc      	ite	gt
 8004f90:	2301      	movgt	r3, #1
 8004f92:	2300      	movle	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8004f9a:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fa0:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 8004fa2:	4b25      	ldr	r3, [pc, #148]	; (8005038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004fa8:	6213      	str	r3, [r2, #32]
						sync = 1;
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8004fb0:	4b23      	ldr	r3, [pc, #140]	; (8005040 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fe72 	bl	8003ca0 <_Z7pwm2angt>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4a24      	ldr	r2, [pc, #144]	; (8005050 <HAL_TIM_IC_CaptureCallback+0x180>)
 8004fc0:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fe fe69 	bl	8003ca0 <_Z7pwm2angt>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <HAL_TIM_IC_CaptureCallback+0x180>)
 8004fd2:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <HAL_TIM_IC_CaptureCallback+0x180>)
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8004fdc:	4b18      	ldr	r3, [pc, #96]	; (8005040 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fe98 	bl	8003d18 <_Z8pwm2ratet>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4a19      	ldr	r2, [pc, #100]	; (8005050 <HAL_TIM_IC_CaptureCallback+0x180>)
 8004fec:	6153      	str	r3, [r2, #20]

				i++;
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	b21a      	sxth	r2, r3
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004ffe:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8005000:	4b0e      	ldr	r3, [pc, #56]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b21b      	sxth	r3, r3
 8005006:	4619      	mov	r1, r3
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_TIM_IC_CaptureCallback+0x184>)
 800500a:	fb83 2301 	smull	r2, r3, r3, r1
 800500e:	105a      	asrs	r2, r3, #1
 8005010:	17cb      	asrs	r3, r1, #31
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	1aca      	subs	r2, r1, r3
 800501c:	b212      	sxth	r2, r2
 800501e:	4b07      	ldr	r3, [pc, #28]	; (800503c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005020:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	200009c4 	.word	0x200009c4
 8005030:	20001590 	.word	0x20001590
 8005034:	20001594 	.word	0x20001594
 8005038:	20001598 	.word	0x20001598
 800503c:	2000159c 	.word	0x2000159c
 8005040:	200015a0 	.word	0x200015a0
 8005044:	200015c4 	.word	0x200015c4
 8005048:	20001658 	.word	0x20001658
 800504c:	200015e8 	.word	0x200015e8
 8005050:	20000ba0 	.word	0x20000ba0
 8005054:	38e38e39 	.word	0x38e38e39

08005058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800505c:	b672      	cpsid	i
}
 800505e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005060:	e7fe      	b.n	8005060 <Error_Handler+0x8>
	...

08005064 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d10a      	bne.n	800508a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800507a:	4293      	cmp	r3, r2
 800507c:	d105      	bne.n	800508a <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 800507e:	480c      	ldr	r0, [pc, #48]	; (80050b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005080:	f005 ffd2 	bl	800b028 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 8005084:	480b      	ldr	r0, [pc, #44]	; (80050b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005086:	f005 fb33 	bl	800a6f0 <_ZN10ControllerC1Ev>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005096:	4293      	cmp	r3, r2
 8005098:	d105      	bne.n	80050a6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800509a:	4806      	ldr	r0, [pc, #24]	; (80050b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800509c:	f005 ff88 	bl	800afb0 <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 80050a0:	4803      	ldr	r0, [pc, #12]	; (80050b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80050a2:	f007 f815 	bl	800c0d0 <_ZN15Kalman_FiltresiD1Ev>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000d58 	.word	0x20000d58
 80050b4:	20000fe0 	.word	0x20000fe0

080050b8 <_GLOBAL__sub_I_hi2c1>:
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7ff ffcf 	bl	8005064 <_Z41__static_initialization_and_destruction_0ii>
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <_GLOBAL__sub_D_hi2c1>:
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050d0:	2000      	movs	r0, #0
 80050d2:	f7ff ffc7 	bl	8005064 <_Z41__static_initialization_and_destruction_0ii>
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <HAL_MspInit+0x5c>)
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <HAL_MspInit+0x5c>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6193      	str	r3, [r2, #24]
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <HAL_MspInit+0x5c>)
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050f6:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <HAL_MspInit+0x5c>)
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <HAL_MspInit+0x5c>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005100:	61d3      	str	r3, [r2, #28]
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <HAL_MspInit+0x5c>)
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <HAL_MspInit+0x60>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	4a04      	ldr	r2, [pc, #16]	; (8005138 <HAL_MspInit+0x60>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	40021000 	.word	0x40021000
 8005138:	40010000 	.word	0x40010000

0800513c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <HAL_I2C_MspInit+0x70>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d123      	bne.n	80051a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <HAL_I2C_MspInit+0x74>)
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <HAL_I2C_MspInit+0x74>)
 8005162:	f043 0308 	orr.w	r3, r3, #8
 8005166:	6193      	str	r3, [r2, #24]
 8005168:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <HAL_I2C_MspInit+0x74>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005174:	23c0      	movs	r3, #192	; 0xc0
 8005176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005178:	2312      	movs	r3, #18
 800517a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800517c:	2303      	movs	r3, #3
 800517e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	4619      	mov	r1, r3
 8005186:	480b      	ldr	r0, [pc, #44]	; (80051b4 <HAL_I2C_MspInit+0x78>)
 8005188:	f000 ff2e 	bl	8005fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <HAL_I2C_MspInit+0x74>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4a07      	ldr	r2, [pc, #28]	; (80051b0 <HAL_I2C_MspInit+0x74>)
 8005192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005196:	61d3      	str	r3, [r2, #28]
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_I2C_MspInit+0x74>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051a4:	bf00      	nop
 80051a6:	3720      	adds	r7, #32
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40005400 	.word	0x40005400
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40010c00 	.word	0x40010c00

080051b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a09      	ldr	r2, [pc, #36]	; (80051ec <HAL_TIM_PWM_MspInit+0x34>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10b      	bne.n	80051e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <HAL_TIM_PWM_MspInit+0x38>)
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <HAL_TIM_PWM_MspInit+0x38>)
 80051d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051d4:	6193      	str	r3, [r2, #24]
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_TIM_PWM_MspInit+0x38>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40021000 	.word	0x40021000

080051f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fc:	f107 0318 	add.w	r3, r7, #24
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005212:	d114      	bne.n	800523e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005214:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	61d3      	str	r3, [r2, #28]
 8005220:	4b2a      	ldr	r3, [pc, #168]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800522c:	2200      	movs	r2, #0
 800522e:	2101      	movs	r1, #1
 8005230:	201c      	movs	r0, #28
 8005232:	f000 fc3e 	bl	8005ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005236:	201c      	movs	r0, #28
 8005238:	f000 fc57 	bl	8005aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800523c:	e042      	b.n	80052c4 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <HAL_TIM_Base_MspInit+0xdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d12c      	bne.n	80052a2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005248:	4b20      	ldr	r3, [pc, #128]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 800524e:	f043 0302 	orr.w	r3, r3, #2
 8005252:	61d3      	str	r3, [r2, #28]
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005260:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 8005266:	f043 0308 	orr.w	r3, r3, #8
 800526a:	6193      	str	r3, [r2, #24]
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005278:	2301      	movs	r3, #1
 800527a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005280:	2300      	movs	r3, #0
 8005282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005284:	f107 0318 	add.w	r3, r7, #24
 8005288:	4619      	mov	r1, r3
 800528a:	4812      	ldr	r0, [pc, #72]	; (80052d4 <HAL_TIM_Base_MspInit+0xe0>)
 800528c:	f000 feac 	bl	8005fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005290:	2200      	movs	r2, #0
 8005292:	2100      	movs	r1, #0
 8005294:	201d      	movs	r0, #29
 8005296:	f000 fc0c 	bl	8005ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800529a:	201d      	movs	r0, #29
 800529c:	f000 fc25 	bl	8005aea <HAL_NVIC_EnableIRQ>
}
 80052a0:	e010      	b.n	80052c4 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <HAL_TIM_Base_MspInit+0xe4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10b      	bne.n	80052c4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4a06      	ldr	r2, [pc, #24]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	61d3      	str	r3, [r2, #28]
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <HAL_TIM_Base_MspInit+0xd8>)
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
}
 80052c4:	bf00      	nop
 80052c6:	3728      	adds	r7, #40	; 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40010c00 	.word	0x40010c00
 80052d8:	40000800 	.word	0x40000800

080052dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e4:	f107 0310 	add.w	r3, r7, #16
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <HAL_TIM_MspPostInit+0x8c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d131      	bne.n	8005360 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_TIM_MspPostInit+0x90>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HAL_TIM_MspPostInit+0x90>)
 8005302:	f043 0308 	orr.w	r3, r3, #8
 8005306:	6193      	str	r3, [r2, #24]
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_TIM_MspPostInit+0x90>)
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_TIM_MspPostInit+0x90>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	4a14      	ldr	r2, [pc, #80]	; (800536c <HAL_TIM_MspPostInit+0x90>)
 800531a:	f043 0304 	orr.w	r3, r3, #4
 800531e:	6193      	str	r3, [r2, #24]
 8005320:	4b12      	ldr	r3, [pc, #72]	; (800536c <HAL_TIM_MspPostInit+0x90>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800532c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005332:	2302      	movs	r3, #2
 8005334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005336:	2302      	movs	r3, #2
 8005338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800533a:	f107 0310 	add.w	r3, r7, #16
 800533e:	4619      	mov	r1, r3
 8005340:	480b      	ldr	r0, [pc, #44]	; (8005370 <HAL_TIM_MspPostInit+0x94>)
 8005342:	f000 fe51 	bl	8005fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005346:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800534a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005350:	2302      	movs	r3, #2
 8005352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005354:	f107 0310 	add.w	r3, r7, #16
 8005358:	4619      	mov	r1, r3
 800535a:	4806      	ldr	r0, [pc, #24]	; (8005374 <HAL_TIM_MspPostInit+0x98>)
 800535c:	f000 fe44 	bl	8005fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005360:	bf00      	nop
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40021000 	.word	0x40021000
 8005370:	40010c00 	.word	0x40010c00
 8005374:	40010800 	.word	0x40010800

08005378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08c      	sub	sp, #48	; 0x30
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005380:	f107 0320 	add.w	r3, r7, #32
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6b      	ldr	r2, [pc, #428]	; (8005540 <HAL_UART_MspInit+0x1c8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d159      	bne.n	800544c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4a69      	ldr	r2, [pc, #420]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 800539e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053a2:	6193      	str	r3, [r2, #24]
 80053a4:	4b67      	ldr	r3, [pc, #412]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b0:	4b64      	ldr	r3, [pc, #400]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	4a63      	ldr	r2, [pc, #396]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	6193      	str	r3, [r2, #24]
 80053bc:	4b61      	ldr	r3, [pc, #388]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ce:	2302      	movs	r3, #2
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053d2:	2303      	movs	r3, #3
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d6:	f107 0320 	add.w	r3, r7, #32
 80053da:	4619      	mov	r1, r3
 80053dc:	485a      	ldr	r0, [pc, #360]	; (8005548 <HAL_UART_MspInit+0x1d0>)
 80053de:	f000 fe03 	bl	8005fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053e8:	2300      	movs	r3, #0
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f0:	f107 0320 	add.w	r3, r7, #32
 80053f4:	4619      	mov	r1, r3
 80053f6:	4854      	ldr	r0, [pc, #336]	; (8005548 <HAL_UART_MspInit+0x1d0>)
 80053f8:	f000 fdf6 	bl	8005fe8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80053fc:	4b53      	ldr	r3, [pc, #332]	; (800554c <HAL_UART_MspInit+0x1d4>)
 80053fe:	4a54      	ldr	r2, [pc, #336]	; (8005550 <HAL_UART_MspInit+0x1d8>)
 8005400:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005402:	4b52      	ldr	r3, [pc, #328]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005408:	4b50      	ldr	r3, [pc, #320]	; (800554c <HAL_UART_MspInit+0x1d4>)
 800540a:	2200      	movs	r2, #0
 800540c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800540e:	4b4f      	ldr	r3, [pc, #316]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005414:	4b4d      	ldr	r3, [pc, #308]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005416:	2200      	movs	r2, #0
 8005418:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800541a:	4b4c      	ldr	r3, [pc, #304]	; (800554c <HAL_UART_MspInit+0x1d4>)
 800541c:	2200      	movs	r2, #0
 800541e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005420:	4b4a      	ldr	r3, [pc, #296]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005422:	2220      	movs	r2, #32
 8005424:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005426:	4b49      	ldr	r3, [pc, #292]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800542c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800542e:	4847      	ldr	r0, [pc, #284]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005430:	f000 fb76 	bl	8005b20 <HAL_DMA_Init>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800543a:	f7ff fe0d 	bl	8005058 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a42      	ldr	r2, [pc, #264]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005442:	635a      	str	r2, [r3, #52]	; 0x34
 8005444:	4a41      	ldr	r2, [pc, #260]	; (800554c <HAL_UART_MspInit+0x1d4>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800544a:	e074      	b.n	8005536 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a40      	ldr	r2, [pc, #256]	; (8005554 <HAL_UART_MspInit+0x1dc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d130      	bne.n	80054b8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005456:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4a3a      	ldr	r2, [pc, #232]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 800545c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005460:	61d3      	str	r3, [r2, #28]
 8005462:	4b38      	ldr	r3, [pc, #224]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800546e:	4b35      	ldr	r3, [pc, #212]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	4a34      	ldr	r2, [pc, #208]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 8005474:	f043 0304 	orr.w	r3, r3, #4
 8005478:	6193      	str	r3, [r2, #24]
 800547a:	4b32      	ldr	r3, [pc, #200]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005486:	2304      	movs	r3, #4
 8005488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548a:	2302      	movs	r3, #2
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800548e:	2303      	movs	r3, #3
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005492:	f107 0320 	add.w	r3, r7, #32
 8005496:	4619      	mov	r1, r3
 8005498:	482b      	ldr	r0, [pc, #172]	; (8005548 <HAL_UART_MspInit+0x1d0>)
 800549a:	f000 fda5 	bl	8005fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800549e:	2308      	movs	r3, #8
 80054a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054a2:	2300      	movs	r3, #0
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054aa:	f107 0320 	add.w	r3, r7, #32
 80054ae:	4619      	mov	r1, r3
 80054b0:	4825      	ldr	r0, [pc, #148]	; (8005548 <HAL_UART_MspInit+0x1d0>)
 80054b2:	f000 fd99 	bl	8005fe8 <HAL_GPIO_Init>
}
 80054b6:	e03e      	b.n	8005536 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a26      	ldr	r2, [pc, #152]	; (8005558 <HAL_UART_MspInit+0x1e0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d139      	bne.n	8005536 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054c2:	4b20      	ldr	r3, [pc, #128]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80054c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054cc:	61d3      	str	r3, [r2, #28]
 80054ce:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	4a19      	ldr	r2, [pc, #100]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80054e0:	f043 0308 	orr.w	r3, r3, #8
 80054e4:	6193      	str	r3, [r2, #24]
 80054e6:	4b17      	ldr	r3, [pc, #92]	; (8005544 <HAL_UART_MspInit+0x1cc>)
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f8:	2302      	movs	r3, #2
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054fc:	2303      	movs	r3, #3
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005500:	f107 0320 	add.w	r3, r7, #32
 8005504:	4619      	mov	r1, r3
 8005506:	4815      	ldr	r0, [pc, #84]	; (800555c <HAL_UART_MspInit+0x1e4>)
 8005508:	f000 fd6e 	bl	8005fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800550c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551a:	f107 0320 	add.w	r3, r7, #32
 800551e:	4619      	mov	r1, r3
 8005520:	480e      	ldr	r0, [pc, #56]	; (800555c <HAL_UART_MspInit+0x1e4>)
 8005522:	f000 fd61 	bl	8005fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005526:	2200      	movs	r2, #0
 8005528:	2100      	movs	r1, #0
 800552a:	2027      	movs	r0, #39	; 0x27
 800552c:	f000 fac1 	bl	8005ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005530:	2027      	movs	r0, #39	; 0x27
 8005532:	f000 fada 	bl	8005aea <HAL_NVIC_EnableIRQ>
}
 8005536:	bf00      	nop
 8005538:	3730      	adds	r7, #48	; 0x30
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40013800 	.word	0x40013800
 8005544:	40021000 	.word	0x40021000
 8005548:	40010800 	.word	0x40010800
 800554c:	20000b14 	.word	0x20000b14
 8005550:	40020058 	.word	0x40020058
 8005554:	40004400 	.word	0x40004400
 8005558:	40004800 	.word	0x40004800
 800555c:	40010c00 	.word	0x40010c00

08005560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005564:	e7fe      	b.n	8005564 <NMI_Handler+0x4>

08005566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800556a:	e7fe      	b.n	800556a <HardFault_Handler+0x4>

0800556c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005570:	e7fe      	b.n	8005570 <MemManage_Handler+0x4>

08005572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005572:	b480      	push	{r7}
 8005574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005576:	e7fe      	b.n	8005576 <BusFault_Handler+0x4>

08005578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800557c:	e7fe      	b.n	800557c <UsageFault_Handler+0x4>

0800557e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800559a:	bf00      	nop
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
	...

080055a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 80055a8:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <SysTick_Handler+0x24>)
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d006      	beq.n	80055c0 <SysTick_Handler+0x1c>
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <SysTick_Handler+0x24>)
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <SysTick_Handler+0x24>)
 80055be:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055c0:	f000 f960 	bl	8005884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055c4:	bf00      	nop
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	200016ec 	.word	0x200016ec

080055cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80055d0:	4802      	ldr	r0, [pc, #8]	; (80055dc <DMA1_Channel5_IRQHandler+0x10>)
 80055d2:	f000 fbd5 	bl	8005d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000b14 	.word	0x20000b14

080055e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055e4:	4802      	ldr	r0, [pc, #8]	; (80055f0 <TIM2_IRQHandler+0x10>)
 80055e6:	f003 fab9 	bl	8008b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80055ea:	bf00      	nop
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	2000097c 	.word	0x2000097c

080055f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055f8:	4802      	ldr	r0, [pc, #8]	; (8005604 <TIM3_IRQHandler+0x10>)
 80055fa:	f003 faaf 	bl	8008b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80055fe:	bf00      	nop
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200009c4 	.word	0x200009c4

08005608 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 800560c:	4803      	ldr	r0, [pc, #12]	; (800561c <USART3_IRQHandler+0x14>)
 800560e:	f7fc fd75 	bl	80020fc <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005612:	4802      	ldr	r0, [pc, #8]	; (800561c <USART3_IRQHandler+0x14>)
 8005614:	f004 fcb4 	bl	8009f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005618:	bf00      	nop
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000ad4 	.word	0x20000ad4

08005620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
	return 1;
 8005624:	2301      	movs	r3, #1
}
 8005626:	4618      	mov	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <_kill>:

int _kill(int pid, int sig)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005638:	f009 fad2 	bl	800ebe0 <__errno>
 800563c:	4603      	mov	r3, r0
 800563e:	2216      	movs	r2, #22
 8005640:	601a      	str	r2, [r3, #0]
	return -1;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_exit>:

void _exit (int status)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005656:	f04f 31ff 	mov.w	r1, #4294967295
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ffe7 	bl	800562e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005660:	e7fe      	b.n	8005660 <_exit+0x12>

08005662 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e00a      	b.n	800568a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005674:	f3af 8000 	nop.w
 8005678:	4601      	mov	r1, r0
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	60ba      	str	r2, [r7, #8]
 8005680:	b2ca      	uxtb	r2, r1
 8005682:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3301      	adds	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	dbf0      	blt.n	8005674 <_read+0x12>
	}

return len;
 8005692:	687b      	ldr	r3, [r7, #4]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e009      	b.n	80056c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	60ba      	str	r2, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3301      	adds	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	dbf1      	blt.n	80056ae <_write+0x12>
	}
	return len;
 80056ca:	687b      	ldr	r3, [r7, #4]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_close>:

int _close(int file)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	return -1;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056fa:	605a      	str	r2, [r3, #4]
	return 0;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <_isatty>:

int _isatty(int file)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	return 1;
 8005710:	2301      	movs	r3, #1
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
	return 0;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <_sbrk+0x5c>)
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <_sbrk+0x60>)
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <_sbrk+0x64>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005750:	4b11      	ldr	r3, [pc, #68]	; (8005798 <_sbrk+0x64>)
 8005752:	4a12      	ldr	r2, [pc, #72]	; (800579c <_sbrk+0x68>)
 8005754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <_sbrk+0x64>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d207      	bcs.n	8005774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005764:	f009 fa3c 	bl	800ebe0 <__errno>
 8005768:	4603      	mov	r3, r0
 800576a:	220c      	movs	r2, #12
 800576c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295
 8005772:	e009      	b.n	8005788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005774:	4b08      	ldr	r3, [pc, #32]	; (8005798 <_sbrk+0x64>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <_sbrk+0x64>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <_sbrk+0x64>)
 8005784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20005000 	.word	0x20005000
 8005794:	00000400 	.word	0x00000400
 8005798:	200016d8 	.word	0x200016d8
 800579c:	20001708 	.word	0x20001708

080057a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80057ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80057ae:	e003      	b.n	80057b8 <LoopCopyDataInit>

080057b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80057b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80057b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80057b6:	3104      	adds	r1, #4

080057b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80057b8:	480a      	ldr	r0, [pc, #40]	; (80057e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80057bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80057be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80057c0:	d3f6      	bcc.n	80057b0 <CopyDataInit>
  ldr r2, =_sbss
 80057c2:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80057c4:	e002      	b.n	80057cc <LoopFillZerobss>

080057c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80057c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80057c8:	f842 3b04 	str.w	r3, [r2], #4

080057cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80057cc:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80057ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80057d0:	d3f9      	bcc.n	80057c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80057d2:	f7ff ffe5 	bl	80057a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057d6:	f009 fa09 	bl	800ebec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80057da:	f7fd fa09 	bl	8002bf0 <main>
  bx lr
 80057de:	4770      	bx	lr
  ldr r3, =_sidata
 80057e0:	080104e0 	.word	0x080104e0
  ldr r0, =_sdata
 80057e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80057e8:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 80057ec:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 80057f0:	20001704 	.word	0x20001704

080057f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80057f4:	e7fe      	b.n	80057f4 <ADC1_2_IRQHandler>
	...

080057f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_Init+0x28>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a07      	ldr	r2, [pc, #28]	; (8005820 <HAL_Init+0x28>)
 8005802:	f043 0310 	orr.w	r3, r3, #16
 8005806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005808:	2003      	movs	r0, #3
 800580a:	f000 f947 	bl	8005a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800580e:	2000      	movs	r0, #0
 8005810:	f000 f808 	bl	8005824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005814:	f7ff fc60 	bl	80050d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40022000 	.word	0x40022000

08005824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <HAL_InitTick+0x54>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	4b12      	ldr	r3, [pc, #72]	; (800587c <HAL_InitTick+0x58>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	4619      	mov	r1, r3
 8005836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800583a:	fbb3 f3f1 	udiv	r3, r3, r1
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f95f 	bl	8005b06 <HAL_SYSTICK_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e00e      	b.n	8005870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b0f      	cmp	r3, #15
 8005856:	d80a      	bhi.n	800586e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005858:	2200      	movs	r2, #0
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	f000 f927 	bl	8005ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <HAL_InitTick+0x5c>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20000018 	.word	0x20000018
 800587c:	20000020 	.word	0x20000020
 8005880:	2000001c 	.word	0x2000001c

08005884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_IncTick+0x1c>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_IncTick+0x20>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4413      	add	r3, r2
 8005894:	4a03      	ldr	r2, [pc, #12]	; (80058a4 <HAL_IncTick+0x20>)
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr
 80058a0:	20000020 	.word	0x20000020
 80058a4:	200016f0 	.word	0x200016f0

080058a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return uwTick;
 80058ac:	4b02      	ldr	r3, [pc, #8]	; (80058b8 <HAL_GetTick+0x10>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr
 80058b8:	200016f0 	.word	0x200016f0

080058bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_GetTick>
 80058c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d005      	beq.n	80058e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <HAL_Delay+0x44>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058e2:	bf00      	nop
 80058e4:	f7ff ffe0 	bl	80058a8 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d8f7      	bhi.n	80058e4 <HAL_Delay+0x28>
  {
  }
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000020 	.word	0x20000020

08005904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <__NVIC_SetPriorityGrouping+0x44>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005920:	4013      	ands	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800592c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005936:	4a04      	ldr	r2, [pc, #16]	; (8005948 <__NVIC_SetPriorityGrouping+0x44>)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	60d3      	str	r3, [r2, #12]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005950:	4b04      	ldr	r3, [pc, #16]	; (8005964 <__NVIC_GetPriorityGrouping+0x18>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	f003 0307 	and.w	r3, r3, #7
}
 800595a:	4618      	mov	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	e000ed00 	.word	0xe000ed00

08005968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	2b00      	cmp	r3, #0
 8005978:	db0b      	blt.n	8005992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	f003 021f 	and.w	r2, r3, #31
 8005980:	4906      	ldr	r1, [pc, #24]	; (800599c <__NVIC_EnableIRQ+0x34>)
 8005982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	2001      	movs	r0, #1
 800598a:	fa00 f202 	lsl.w	r2, r0, r2
 800598e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	e000e100 	.word	0xe000e100

080059a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db0a      	blt.n	80059ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <__NVIC_SetPriority+0x4c>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	0112      	lsls	r2, r2, #4
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	440b      	add	r3, r1
 80059c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059c8:	e00a      	b.n	80059e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <__NVIC_SetPriority+0x50>)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	3b04      	subs	r3, #4
 80059d8:	0112      	lsls	r2, r2, #4
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	440b      	add	r3, r1
 80059de:	761a      	strb	r2, [r3, #24]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	e000e100 	.word	0xe000e100
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f1c3 0307 	rsb	r3, r3, #7
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	bf28      	it	cs
 8005a12:	2304      	movcs	r3, #4
 8005a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d902      	bls.n	8005a24 <NVIC_EncodePriority+0x30>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3b03      	subs	r3, #3
 8005a22:	e000      	b.n	8005a26 <NVIC_EncodePriority+0x32>
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	401a      	ands	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	43d9      	mvns	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	4313      	orrs	r3, r2
         );
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a68:	d301      	bcc.n	8005a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e00f      	b.n	8005a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a6e:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <SysTick_Config+0x40>)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a76:	210f      	movs	r1, #15
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	f7ff ff90 	bl	80059a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <SysTick_Config+0x40>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a86:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <SysTick_Config+0x40>)
 8005a88:	2207      	movs	r2, #7
 8005a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	e000e010 	.word	0xe000e010

08005a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff2d 	bl	8005904 <__NVIC_SetPriorityGrouping>
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	4603      	mov	r3, r0
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ac4:	f7ff ff42 	bl	800594c <__NVIC_GetPriorityGrouping>
 8005ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	f7ff ff90 	bl	80059f4 <NVIC_EncodePriority>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff ff5f 	bl	80059a0 <__NVIC_SetPriority>
}
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	4603      	mov	r3, r0
 8005af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff35 	bl	8005968 <__NVIC_EnableIRQ>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff ffa2 	bl	8005a58 <SysTick_Config>
 8005b14:	4603      	mov	r3, r0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e043      	b.n	8005bbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <HAL_DMA_Init+0xa8>)
 8005b3e:	4413      	add	r3, r2
 8005b40:	4a22      	ldr	r2, [pc, #136]	; (8005bcc <HAL_DMA_Init+0xac>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	091b      	lsrs	r3, r3, #4
 8005b48:	009a      	lsls	r2, r3, #2
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1f      	ldr	r2, [pc, #124]	; (8005bd0 <HAL_DMA_Init+0xb0>)
 8005b52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr
 8005bc8:	bffdfff8 	.word	0xbffdfff8
 8005bcc:	cccccccd 	.word	0xcccccccd
 8005bd0:	40020000 	.word	0x40020000

08005bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_DMA_Start_IT+0x20>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e04a      	b.n	8005c8a <HAL_DMA_Start_IT+0xb6>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d13a      	bne.n	8005c7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f9ae 	bl	8005f8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 020e 	orr.w	r2, r2, #14
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e00f      	b.n	8005c6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0204 	bic.w	r2, r2, #4
 8005c58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 020a 	orr.w	r2, r2, #10
 8005c68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e005      	b.n	8005c88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
 8005c86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d005      	beq.n	8005cb6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2204      	movs	r2, #4
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
 8005cb4:	e051      	b.n	8005d5a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 020e 	bic.w	r2, r2, #14
 8005cc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <HAL_DMA_Abort_IT+0xd0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d029      	beq.n	8005d34 <HAL_DMA_Abort_IT+0xa0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <HAL_DMA_Abort_IT+0xd4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d022      	beq.n	8005d30 <HAL_DMA_Abort_IT+0x9c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <HAL_DMA_Abort_IT+0xd8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d01a      	beq.n	8005d2a <HAL_DMA_Abort_IT+0x96>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <HAL_DMA_Abort_IT+0xdc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d012      	beq.n	8005d24 <HAL_DMA_Abort_IT+0x90>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1c      	ldr	r2, [pc, #112]	; (8005d74 <HAL_DMA_Abort_IT+0xe0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00a      	beq.n	8005d1e <HAL_DMA_Abort_IT+0x8a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1a      	ldr	r2, [pc, #104]	; (8005d78 <HAL_DMA_Abort_IT+0xe4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d102      	bne.n	8005d18 <HAL_DMA_Abort_IT+0x84>
 8005d12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d16:	e00e      	b.n	8005d36 <HAL_DMA_Abort_IT+0xa2>
 8005d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d1c:	e00b      	b.n	8005d36 <HAL_DMA_Abort_IT+0xa2>
 8005d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d22:	e008      	b.n	8005d36 <HAL_DMA_Abort_IT+0xa2>
 8005d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d28:	e005      	b.n	8005d36 <HAL_DMA_Abort_IT+0xa2>
 8005d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d2e:	e002      	b.n	8005d36 <HAL_DMA_Abort_IT+0xa2>
 8005d30:	2310      	movs	r3, #16
 8005d32:	e000      	b.n	8005d36 <HAL_DMA_Abort_IT+0xa2>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4a11      	ldr	r2, [pc, #68]	; (8005d7c <HAL_DMA_Abort_IT+0xe8>)
 8005d38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
    } 
  }
  return status;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40020008 	.word	0x40020008
 8005d68:	4002001c 	.word	0x4002001c
 8005d6c:	40020030 	.word	0x40020030
 8005d70:	40020044 	.word	0x40020044
 8005d74:	40020058 	.word	0x40020058
 8005d78:	4002006c 	.word	0x4002006c
 8005d7c:	40020000 	.word	0x40020000

08005d80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d04f      	beq.n	8005e48 <HAL_DMA_IRQHandler+0xc8>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d04a      	beq.n	8005e48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d107      	bne.n	8005dd0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0204 	bic.w	r2, r2, #4
 8005dce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a66      	ldr	r2, [pc, #408]	; (8005f70 <HAL_DMA_IRQHandler+0x1f0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d029      	beq.n	8005e2e <HAL_DMA_IRQHandler+0xae>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a65      	ldr	r2, [pc, #404]	; (8005f74 <HAL_DMA_IRQHandler+0x1f4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xaa>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a63      	ldr	r2, [pc, #396]	; (8005f78 <HAL_DMA_IRQHandler+0x1f8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01a      	beq.n	8005e24 <HAL_DMA_IRQHandler+0xa4>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a62      	ldr	r2, [pc, #392]	; (8005f7c <HAL_DMA_IRQHandler+0x1fc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d012      	beq.n	8005e1e <HAL_DMA_IRQHandler+0x9e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a60      	ldr	r2, [pc, #384]	; (8005f80 <HAL_DMA_IRQHandler+0x200>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00a      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x98>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a5f      	ldr	r2, [pc, #380]	; (8005f84 <HAL_DMA_IRQHandler+0x204>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d102      	bne.n	8005e12 <HAL_DMA_IRQHandler+0x92>
 8005e0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e10:	e00e      	b.n	8005e30 <HAL_DMA_IRQHandler+0xb0>
 8005e12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e16:	e00b      	b.n	8005e30 <HAL_DMA_IRQHandler+0xb0>
 8005e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e1c:	e008      	b.n	8005e30 <HAL_DMA_IRQHandler+0xb0>
 8005e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e22:	e005      	b.n	8005e30 <HAL_DMA_IRQHandler+0xb0>
 8005e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e28:	e002      	b.n	8005e30 <HAL_DMA_IRQHandler+0xb0>
 8005e2a:	2340      	movs	r3, #64	; 0x40
 8005e2c:	e000      	b.n	8005e30 <HAL_DMA_IRQHandler+0xb0>
 8005e2e:	2304      	movs	r3, #4
 8005e30:	4a55      	ldr	r2, [pc, #340]	; (8005f88 <HAL_DMA_IRQHandler+0x208>)
 8005e32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8094 	beq.w	8005f66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005e46:	e08e      	b.n	8005f66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d056      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x186>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d051      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 020a 	bic.w	r2, r2, #10
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a38      	ldr	r2, [pc, #224]	; (8005f70 <HAL_DMA_IRQHandler+0x1f0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d029      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x166>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a37      	ldr	r2, [pc, #220]	; (8005f74 <HAL_DMA_IRQHandler+0x1f4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d022      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x162>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a35      	ldr	r2, [pc, #212]	; (8005f78 <HAL_DMA_IRQHandler+0x1f8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01a      	beq.n	8005edc <HAL_DMA_IRQHandler+0x15c>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a34      	ldr	r2, [pc, #208]	; (8005f7c <HAL_DMA_IRQHandler+0x1fc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d012      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x156>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a32      	ldr	r2, [pc, #200]	; (8005f80 <HAL_DMA_IRQHandler+0x200>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x150>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a31      	ldr	r2, [pc, #196]	; (8005f84 <HAL_DMA_IRQHandler+0x204>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d102      	bne.n	8005eca <HAL_DMA_IRQHandler+0x14a>
 8005ec4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ec8:	e00e      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x168>
 8005eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ece:	e00b      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x168>
 8005ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ed4:	e008      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x168>
 8005ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eda:	e005      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x168>
 8005edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee0:	e002      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x168>
 8005ee2:	2320      	movs	r3, #32
 8005ee4:	e000      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x168>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <HAL_DMA_IRQHandler+0x208>)
 8005eea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d034      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f04:	e02f      	b.n	8005f66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d028      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x1e8>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d023      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 020e 	bic.w	r2, r2, #14
 8005f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	2101      	movs	r1, #1
 8005f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
    }
  }
  return;
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
}
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40020008 	.word	0x40020008
 8005f74:	4002001c 	.word	0x4002001c
 8005f78:	40020030 	.word	0x40020030
 8005f7c:	40020044 	.word	0x40020044
 8005f80:	40020058 	.word	0x40020058
 8005f84:	4002006c 	.word	0x4002006c
 8005f88:	40020000 	.word	0x40020000

08005f8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d108      	bne.n	8005fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fca:	e007      	b.n	8005fdc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
	...

08005fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b08b      	sub	sp, #44	; 0x2c
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ffa:	e169      	b.n	80062d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	4013      	ands	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	429a      	cmp	r2, r3
 8006016:	f040 8158 	bne.w	80062ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4a9a      	ldr	r2, [pc, #616]	; (8006288 <HAL_GPIO_Init+0x2a0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d05e      	beq.n	80060e2 <HAL_GPIO_Init+0xfa>
 8006024:	4a98      	ldr	r2, [pc, #608]	; (8006288 <HAL_GPIO_Init+0x2a0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d875      	bhi.n	8006116 <HAL_GPIO_Init+0x12e>
 800602a:	4a98      	ldr	r2, [pc, #608]	; (800628c <HAL_GPIO_Init+0x2a4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d058      	beq.n	80060e2 <HAL_GPIO_Init+0xfa>
 8006030:	4a96      	ldr	r2, [pc, #600]	; (800628c <HAL_GPIO_Init+0x2a4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d86f      	bhi.n	8006116 <HAL_GPIO_Init+0x12e>
 8006036:	4a96      	ldr	r2, [pc, #600]	; (8006290 <HAL_GPIO_Init+0x2a8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d052      	beq.n	80060e2 <HAL_GPIO_Init+0xfa>
 800603c:	4a94      	ldr	r2, [pc, #592]	; (8006290 <HAL_GPIO_Init+0x2a8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d869      	bhi.n	8006116 <HAL_GPIO_Init+0x12e>
 8006042:	4a94      	ldr	r2, [pc, #592]	; (8006294 <HAL_GPIO_Init+0x2ac>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d04c      	beq.n	80060e2 <HAL_GPIO_Init+0xfa>
 8006048:	4a92      	ldr	r2, [pc, #584]	; (8006294 <HAL_GPIO_Init+0x2ac>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d863      	bhi.n	8006116 <HAL_GPIO_Init+0x12e>
 800604e:	4a92      	ldr	r2, [pc, #584]	; (8006298 <HAL_GPIO_Init+0x2b0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d046      	beq.n	80060e2 <HAL_GPIO_Init+0xfa>
 8006054:	4a90      	ldr	r2, [pc, #576]	; (8006298 <HAL_GPIO_Init+0x2b0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d85d      	bhi.n	8006116 <HAL_GPIO_Init+0x12e>
 800605a:	2b12      	cmp	r3, #18
 800605c:	d82a      	bhi.n	80060b4 <HAL_GPIO_Init+0xcc>
 800605e:	2b12      	cmp	r3, #18
 8006060:	d859      	bhi.n	8006116 <HAL_GPIO_Init+0x12e>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <HAL_GPIO_Init+0x80>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	080060e3 	.word	0x080060e3
 800606c:	080060bd 	.word	0x080060bd
 8006070:	080060cf 	.word	0x080060cf
 8006074:	08006111 	.word	0x08006111
 8006078:	08006117 	.word	0x08006117
 800607c:	08006117 	.word	0x08006117
 8006080:	08006117 	.word	0x08006117
 8006084:	08006117 	.word	0x08006117
 8006088:	08006117 	.word	0x08006117
 800608c:	08006117 	.word	0x08006117
 8006090:	08006117 	.word	0x08006117
 8006094:	08006117 	.word	0x08006117
 8006098:	08006117 	.word	0x08006117
 800609c:	08006117 	.word	0x08006117
 80060a0:	08006117 	.word	0x08006117
 80060a4:	08006117 	.word	0x08006117
 80060a8:	08006117 	.word	0x08006117
 80060ac:	080060c5 	.word	0x080060c5
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	4a79      	ldr	r2, [pc, #484]	; (800629c <HAL_GPIO_Init+0x2b4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80060ba:	e02c      	b.n	8006116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	623b      	str	r3, [r7, #32]
          break;
 80060c2:	e029      	b.n	8006118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	3304      	adds	r3, #4
 80060ca:	623b      	str	r3, [r7, #32]
          break;
 80060cc:	e024      	b.n	8006118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	3308      	adds	r3, #8
 80060d4:	623b      	str	r3, [r7, #32]
          break;
 80060d6:	e01f      	b.n	8006118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	330c      	adds	r3, #12
 80060de:	623b      	str	r3, [r7, #32]
          break;
 80060e0:	e01a      	b.n	8006118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060ea:	2304      	movs	r3, #4
 80060ec:	623b      	str	r3, [r7, #32]
          break;
 80060ee:	e013      	b.n	8006118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d105      	bne.n	8006104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060f8:	2308      	movs	r3, #8
 80060fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	611a      	str	r2, [r3, #16]
          break;
 8006102:	e009      	b.n	8006118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006104:	2308      	movs	r3, #8
 8006106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	615a      	str	r2, [r3, #20]
          break;
 800610e:	e003      	b.n	8006118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006110:	2300      	movs	r3, #0
 8006112:	623b      	str	r3, [r7, #32]
          break;
 8006114:	e000      	b.n	8006118 <HAL_GPIO_Init+0x130>
          break;
 8006116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2bff      	cmp	r3, #255	; 0xff
 800611c:	d801      	bhi.n	8006122 <HAL_GPIO_Init+0x13a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	e001      	b.n	8006126 <HAL_GPIO_Init+0x13e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3304      	adds	r3, #4
 8006126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2bff      	cmp	r3, #255	; 0xff
 800612c:	d802      	bhi.n	8006134 <HAL_GPIO_Init+0x14c>
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	e002      	b.n	800613a <HAL_GPIO_Init+0x152>
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	3b08      	subs	r3, #8
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	210f      	movs	r1, #15
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	401a      	ands	r2, r3
 800614c:	6a39      	ldr	r1, [r7, #32]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	fa01 f303 	lsl.w	r3, r1, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80b1 	beq.w	80062ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006168:	4b4d      	ldr	r3, [pc, #308]	; (80062a0 <HAL_GPIO_Init+0x2b8>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	4a4c      	ldr	r2, [pc, #304]	; (80062a0 <HAL_GPIO_Init+0x2b8>)
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	6193      	str	r3, [r2, #24]
 8006174:	4b4a      	ldr	r3, [pc, #296]	; (80062a0 <HAL_GPIO_Init+0x2b8>)
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006180:	4a48      	ldr	r2, [pc, #288]	; (80062a4 <HAL_GPIO_Init+0x2bc>)
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	089b      	lsrs	r3, r3, #2
 8006186:	3302      	adds	r3, #2
 8006188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	220f      	movs	r2, #15
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a40      	ldr	r2, [pc, #256]	; (80062a8 <HAL_GPIO_Init+0x2c0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <HAL_GPIO_Init+0x1ec>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a3f      	ldr	r2, [pc, #252]	; (80062ac <HAL_GPIO_Init+0x2c4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00d      	beq.n	80061d0 <HAL_GPIO_Init+0x1e8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a3e      	ldr	r2, [pc, #248]	; (80062b0 <HAL_GPIO_Init+0x2c8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d007      	beq.n	80061cc <HAL_GPIO_Init+0x1e4>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a3d      	ldr	r2, [pc, #244]	; (80062b4 <HAL_GPIO_Init+0x2cc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_GPIO_Init+0x1e0>
 80061c4:	2303      	movs	r3, #3
 80061c6:	e006      	b.n	80061d6 <HAL_GPIO_Init+0x1ee>
 80061c8:	2304      	movs	r3, #4
 80061ca:	e004      	b.n	80061d6 <HAL_GPIO_Init+0x1ee>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e002      	b.n	80061d6 <HAL_GPIO_Init+0x1ee>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <HAL_GPIO_Init+0x1ee>
 80061d4:	2300      	movs	r3, #0
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	f002 0203 	and.w	r2, r2, #3
 80061dc:	0092      	lsls	r2, r2, #2
 80061de:	4093      	lsls	r3, r2
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80061e6:	492f      	ldr	r1, [pc, #188]	; (80062a4 <HAL_GPIO_Init+0x2bc>)
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	3302      	adds	r3, #2
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d006      	beq.n	800620e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006200:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	492c      	ldr	r1, [pc, #176]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]
 800620c:	e006      	b.n	800621c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800620e:	4b2a      	ldr	r3, [pc, #168]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	43db      	mvns	r3, r3
 8006216:	4928      	ldr	r1, [pc, #160]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006218:	4013      	ands	r3, r2
 800621a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d006      	beq.n	8006236 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006228:	4b23      	ldr	r3, [pc, #140]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4922      	ldr	r1, [pc, #136]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	4313      	orrs	r3, r2
 8006232:	604b      	str	r3, [r1, #4]
 8006234:	e006      	b.n	8006244 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006236:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	43db      	mvns	r3, r3
 800623e:	491e      	ldr	r1, [pc, #120]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006240:	4013      	ands	r3, r2
 8006242:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d006      	beq.n	800625e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006250:	4b19      	ldr	r3, [pc, #100]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	4918      	ldr	r1, [pc, #96]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	4313      	orrs	r3, r2
 800625a:	608b      	str	r3, [r1, #8]
 800625c:	e006      	b.n	800626c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800625e:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	43db      	mvns	r3, r3
 8006266:	4914      	ldr	r1, [pc, #80]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006268:	4013      	ands	r3, r2
 800626a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d021      	beq.n	80062bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006278:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	490e      	ldr	r1, [pc, #56]	; (80062b8 <HAL_GPIO_Init+0x2d0>)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4313      	orrs	r3, r2
 8006282:	60cb      	str	r3, [r1, #12]
 8006284:	e021      	b.n	80062ca <HAL_GPIO_Init+0x2e2>
 8006286:	bf00      	nop
 8006288:	10320000 	.word	0x10320000
 800628c:	10310000 	.word	0x10310000
 8006290:	10220000 	.word	0x10220000
 8006294:	10210000 	.word	0x10210000
 8006298:	10120000 	.word	0x10120000
 800629c:	10110000 	.word	0x10110000
 80062a0:	40021000 	.word	0x40021000
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010800 	.word	0x40010800
 80062ac:	40010c00 	.word	0x40010c00
 80062b0:	40011000 	.word	0x40011000
 80062b4:	40011400 	.word	0x40011400
 80062b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_GPIO_Init+0x304>)
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	4909      	ldr	r1, [pc, #36]	; (80062ec <HAL_GPIO_Init+0x304>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	3301      	adds	r3, #1
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f47f ae8e 	bne.w	8005ffc <HAL_GPIO_Init+0x14>
  }
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	372c      	adds	r7, #44	; 0x2c
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	40010400 	.word	0x40010400

080062f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
 80062fc:	4613      	mov	r3, r2
 80062fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006300:	787b      	ldrb	r3, [r7, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006306:	887a      	ldrh	r2, [r7, #2]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800630c:	e003      	b.n	8006316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800630e:	887b      	ldrh	r3, [r7, #2]
 8006310:	041a      	lsls	r2, r3, #16
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	611a      	str	r2, [r3, #16]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4013      	ands	r3, r2
 8006338:	041a      	lsls	r2, r3, #16
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	43d9      	mvns	r1, r3
 800633e:	887b      	ldrh	r3, [r7, #2]
 8006340:	400b      	ands	r3, r1
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	611a      	str	r2, [r3, #16]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr
	...

08006354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e12b      	b.n	80065be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fe fede 	bl	800513c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063b8:	f002 f84e 	bl	8008458 <HAL_RCC_GetPCLK1Freq>
 80063bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4a81      	ldr	r2, [pc, #516]	; (80065c8 <HAL_I2C_Init+0x274>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d807      	bhi.n	80063d8 <HAL_I2C_Init+0x84>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4a80      	ldr	r2, [pc, #512]	; (80065cc <HAL_I2C_Init+0x278>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	bf94      	ite	ls
 80063d0:	2301      	movls	r3, #1
 80063d2:	2300      	movhi	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e006      	b.n	80063e6 <HAL_I2C_Init+0x92>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a7d      	ldr	r2, [pc, #500]	; (80065d0 <HAL_I2C_Init+0x27c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	bf94      	ite	ls
 80063e0:	2301      	movls	r3, #1
 80063e2:	2300      	movhi	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e0e7      	b.n	80065be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a78      	ldr	r2, [pc, #480]	; (80065d4 <HAL_I2C_Init+0x280>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0c9b      	lsrs	r3, r3, #18
 80063f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4a6a      	ldr	r2, [pc, #424]	; (80065c8 <HAL_I2C_Init+0x274>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d802      	bhi.n	8006428 <HAL_I2C_Init+0xd4>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	3301      	adds	r3, #1
 8006426:	e009      	b.n	800643c <HAL_I2C_Init+0xe8>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	4a69      	ldr	r2, [pc, #420]	; (80065d8 <HAL_I2C_Init+0x284>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	099b      	lsrs	r3, r3, #6
 800643a:	3301      	adds	r3, #1
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	430b      	orrs	r3, r1
 8006442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800644e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	495c      	ldr	r1, [pc, #368]	; (80065c8 <HAL_I2C_Init+0x274>)
 8006458:	428b      	cmp	r3, r1
 800645a:	d819      	bhi.n	8006490 <HAL_I2C_Init+0x13c>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1e59      	subs	r1, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	fbb1 f3f3 	udiv	r3, r1, r3
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006470:	400b      	ands	r3, r1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_I2C_Init+0x138>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1e59      	subs	r1, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	fbb1 f3f3 	udiv	r3, r1, r3
 8006484:	3301      	adds	r3, #1
 8006486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648a:	e051      	b.n	8006530 <HAL_I2C_Init+0x1dc>
 800648c:	2304      	movs	r3, #4
 800648e:	e04f      	b.n	8006530 <HAL_I2C_Init+0x1dc>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d111      	bne.n	80064bc <HAL_I2C_Init+0x168>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	1e58      	subs	r0, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6859      	ldr	r1, [r3, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	440b      	add	r3, r1
 80064a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064aa:	3301      	adds	r3, #1
 80064ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bf0c      	ite	eq
 80064b4:	2301      	moveq	r3, #1
 80064b6:	2300      	movne	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	e012      	b.n	80064e2 <HAL_I2C_Init+0x18e>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	1e58      	subs	r0, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6859      	ldr	r1, [r3, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	0099      	lsls	r1, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80064d2:	3301      	adds	r3, #1
 80064d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Init+0x196>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e022      	b.n	8006530 <HAL_I2C_Init+0x1dc>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10e      	bne.n	8006510 <HAL_I2C_Init+0x1bc>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1e58      	subs	r0, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6859      	ldr	r1, [r3, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	440b      	add	r3, r1
 8006500:	fbb0 f3f3 	udiv	r3, r0, r3
 8006504:	3301      	adds	r3, #1
 8006506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800650a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650e:	e00f      	b.n	8006530 <HAL_I2C_Init+0x1dc>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	1e58      	subs	r0, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6859      	ldr	r1, [r3, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	0099      	lsls	r1, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	fbb0 f3f3 	udiv	r3, r0, r3
 8006526:	3301      	adds	r3, #1
 8006528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	6809      	ldr	r1, [r1, #0]
 8006534:	4313      	orrs	r3, r2
 8006536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800655e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6911      	ldr	r1, [r2, #16]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68d2      	ldr	r2, [r2, #12]
 800656a:	4311      	orrs	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	430b      	orrs	r3, r1
 8006572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	000186a0 	.word	0x000186a0
 80065cc:	001e847f 	.word	0x001e847f
 80065d0:	003d08ff 	.word	0x003d08ff
 80065d4:	431bde83 	.word	0x431bde83
 80065d8:	10624dd3 	.word	0x10624dd3

080065dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	461a      	mov	r2, r3
 80065e8:	460b      	mov	r3, r1
 80065ea:	817b      	strh	r3, [r7, #10]
 80065ec:	4613      	mov	r3, r2
 80065ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065f0:	f7ff f95a 	bl	80058a8 <HAL_GetTick>
 80065f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b20      	cmp	r3, #32
 8006600:	f040 80e0 	bne.w	80067c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2319      	movs	r3, #25
 800660a:	2201      	movs	r2, #1
 800660c:	4970      	ldr	r1, [pc, #448]	; (80067d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f001 f972 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800661a:	2302      	movs	r3, #2
 800661c:	e0d3      	b.n	80067c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_I2C_Master_Transmit+0x50>
 8006628:	2302      	movs	r3, #2
 800662a:	e0cc      	b.n	80067c6 <HAL_I2C_Master_Transmit+0x1ea>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d007      	beq.n	8006652 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006660:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2221      	movs	r2, #33	; 0x21
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2210      	movs	r2, #16
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	893a      	ldrh	r2, [r7, #8]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a50      	ldr	r2, [pc, #320]	; (80067d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006694:	8979      	ldrh	r1, [r7, #10]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fe5e 	bl	800735c <I2C_MasterRequestWrite>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e08d      	b.n	80067c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066c0:	e066      	b.n	8006790 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	6a39      	ldr	r1, [r7, #32]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f001 f9ec 	bl	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00d      	beq.n	80066ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d107      	bne.n	80066ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e06b      	b.n	80067c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b04      	cmp	r3, #4
 800672a:	d11b      	bne.n	8006764 <HAL_I2C_Master_Transmit+0x188>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006730:	2b00      	cmp	r3, #0
 8006732:	d017      	beq.n	8006764 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	6a39      	ldr	r1, [r7, #32]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f001 f9dc 	bl	8007b26 <I2C_WaitOnBTFFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	2b04      	cmp	r3, #4
 800677a:	d107      	bne.n	800678c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e01a      	b.n	80067c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	2b00      	cmp	r3, #0
 8006796:	d194      	bne.n	80066c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e000      	b.n	80067c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	00100002 	.word	0x00100002
 80067d4:	ffff0000 	.word	0xffff0000

080067d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af02      	add	r7, sp, #8
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	607a      	str	r2, [r7, #4]
 80067e2:	461a      	mov	r2, r3
 80067e4:	460b      	mov	r3, r1
 80067e6:	817b      	strh	r3, [r7, #10]
 80067e8:	4613      	mov	r3, r2
 80067ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067f0:	f7ff f85a 	bl	80058a8 <HAL_GetTick>
 80067f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b20      	cmp	r3, #32
 8006800:	f040 823f 	bne.w	8006c82 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2319      	movs	r3, #25
 800680a:	2201      	movs	r2, #1
 800680c:	497f      	ldr	r1, [pc, #508]	; (8006a0c <HAL_I2C_Master_Receive+0x234>)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f001 f872 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
 800681c:	e232      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_I2C_Master_Receive+0x54>
 8006828:	2302      	movs	r3, #2
 800682a:	e22b      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b01      	cmp	r3, #1
 8006840:	d007      	beq.n	8006852 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0201 	orr.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2222      	movs	r2, #34	; 0x22
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2210      	movs	r2, #16
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	893a      	ldrh	r2, [r7, #8]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a5f      	ldr	r2, [pc, #380]	; (8006a10 <HAL_I2C_Master_Receive+0x238>)
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006894:	8979      	ldrh	r1, [r7, #10]
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fde0 	bl	8007460 <I2C_MasterRequestRead>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e1ec      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d113      	bne.n	80068da <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	e1c0      	b.n	8006c5c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d11e      	bne.n	8006920 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80068f2:	b672      	cpsid	i
}
 80068f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800691a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800691c:	b662      	cpsie	i
}
 800691e:	e035      	b.n	800698c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006924:	2b02      	cmp	r3, #2
 8006926:	d11e      	bne.n	8006966 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006936:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006938:	b672      	cpsid	i
}
 800693a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006960:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006962:	b662      	cpsie	i
}
 8006964:	e012      	b.n	800698c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800698c:	e166      	b.n	8006c5c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006992:	2b03      	cmp	r3, #3
 8006994:	f200 811f 	bhi.w	8006bd6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699c:	2b01      	cmp	r3, #1
 800699e:	d123      	bne.n	80069e8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f001 f8ff 	bl	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e167      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691a      	ldr	r2, [r3, #16]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069e6:	e139      	b.n	8006c5c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d152      	bne.n	8006a96 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2200      	movs	r2, #0
 80069f8:	4906      	ldr	r1, [pc, #24]	; (8006a14 <HAL_I2C_Master_Receive+0x23c>)
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 ff7c 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e13c      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
 8006a0a:	bf00      	nop
 8006a0c:	00100002 	.word	0x00100002
 8006a10:	ffff0000 	.word	0xffff0000
 8006a14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006a18:	b672      	cpsid	i
}
 8006a1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006a5e:	b662      	cpsie	i
}
 8006a60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a94:	e0e2      	b.n	8006c5c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	497b      	ldr	r1, [pc, #492]	; (8006c8c <HAL_I2C_Master_Receive+0x4b4>)
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 ff29 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0e9      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ac0:	b672      	cpsid	i
}
 8006ac2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006af6:	4b66      	ldr	r3, [pc, #408]	; (8006c90 <HAL_I2C_Master_Receive+0x4b8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	08db      	lsrs	r3, r3, #3
 8006afc:	4a65      	ldr	r2, [pc, #404]	; (8006c94 <HAL_I2C_Master_Receive+0x4bc>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	0a1a      	lsrs	r2, r3, #8
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	00da      	lsls	r2, r3, #3
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d118      	bne.n	8006b4e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f043 0220 	orr.w	r2, r3, #32
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006b3e:	b662      	cpsie	i
}
 8006b40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e09a      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d1d9      	bne.n	8006b10 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006b9e:	b662      	cpsie	i
}
 8006ba0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bd4:	e042      	b.n	8006c5c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 ffe4 	bl	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e04c      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d118      	bne.n	8006c5c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f47f ae94 	bne.w	800698e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e000      	b.n	8006c84 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8006c82:	2302      	movs	r3, #2
  }
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3728      	adds	r7, #40	; 0x28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	00010004 	.word	0x00010004
 8006c90:	20000018 	.word	0x20000018
 8006c94:	14f8b589 	.word	0x14f8b589

08006c98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	817b      	strh	r3, [r7, #10]
 8006caa:	460b      	mov	r3, r1
 8006cac:	813b      	strh	r3, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cb2:	f7fe fdf9 	bl	80058a8 <HAL_GetTick>
 8006cb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	f040 80d9 	bne.w	8006e78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	2319      	movs	r3, #25
 8006ccc:	2201      	movs	r2, #1
 8006cce:	496d      	ldr	r1, [pc, #436]	; (8006e84 <HAL_I2C_Mem_Write+0x1ec>)
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fe11 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e0cc      	b.n	8006e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_I2C_Mem_Write+0x56>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e0c5      	b.n	8006e7a <HAL_I2C_Mem_Write+0x1e2>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d007      	beq.n	8006d14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2221      	movs	r2, #33	; 0x21
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2240      	movs	r2, #64	; 0x40
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a4d      	ldr	r2, [pc, #308]	; (8006e88 <HAL_I2C_Mem_Write+0x1f0>)
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d56:	88f8      	ldrh	r0, [r7, #6]
 8006d58:	893a      	ldrh	r2, [r7, #8]
 8006d5a:	8979      	ldrh	r1, [r7, #10]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	4603      	mov	r3, r0
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fc48 	bl	80075fc <I2C_RequestMemoryWrite>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d052      	beq.n	8006e18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e081      	b.n	8006e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fe92 	bl	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d107      	bne.n	8006d9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e06b      	b.n	8006e7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	781a      	ldrb	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d11b      	bne.n	8006e18 <HAL_I2C_Mem_Write+0x180>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d017      	beq.n	8006e18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1aa      	bne.n	8006d76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fe7e 	bl	8007b26 <I2C_WaitOnBTFFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d107      	bne.n	8006e48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e016      	b.n	8006e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	e000      	b.n	8006e7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e78:	2302      	movs	r3, #2
  }
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	00100002 	.word	0x00100002
 8006e88:	ffff0000 	.word	0xffff0000

08006e8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08c      	sub	sp, #48	; 0x30
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	817b      	strh	r3, [r7, #10]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	813b      	strh	r3, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006eaa:	f7fe fcfd 	bl	80058a8 <HAL_GetTick>
 8006eae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	f040 8244 	bne.w	8007346 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	2319      	movs	r3, #25
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	4982      	ldr	r1, [pc, #520]	; (80070d0 <HAL_I2C_Mem_Read+0x244>)
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fd15 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e237      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_I2C_Mem_Read+0x5a>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e230      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d007      	beq.n	8006f0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2222      	movs	r2, #34	; 0x22
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2240      	movs	r2, #64	; 0x40
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a62      	ldr	r2, [pc, #392]	; (80070d4 <HAL_I2C_Mem_Read+0x248>)
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f4e:	88f8      	ldrh	r0, [r7, #6]
 8006f50:	893a      	ldrh	r2, [r7, #8]
 8006f52:	8979      	ldrh	r1, [r7, #10]
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fbe2 	bl	8007728 <I2C_RequestMemoryRead>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e1ec      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d113      	bne.n	8006f9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e1c0      	b.n	8007320 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d11e      	bne.n	8006fe4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fb6:	b672      	cpsid	i
}
 8006fb8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006fe0:	b662      	cpsie	i
}
 8006fe2:	e035      	b.n	8007050 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d11e      	bne.n	800702a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ffc:	b672      	cpsid	i
}
 8006ffe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007024:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007026:	b662      	cpsie	i
}
 8007028:	e012      	b.n	8007050 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007038:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007050:	e166      	b.n	8007320 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007056:	2b03      	cmp	r3, #3
 8007058:	f200 811f 	bhi.w	800729a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007060:	2b01      	cmp	r3, #1
 8007062:	d123      	bne.n	80070ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fd9d 	bl	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e167      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070aa:	e139      	b.n	8007320 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d152      	bne.n	800715a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	2200      	movs	r2, #0
 80070bc:	4906      	ldr	r1, [pc, #24]	; (80070d8 <HAL_I2C_Mem_Read+0x24c>)
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fc1a 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d008      	beq.n	80070dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e13c      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
 80070ce:	bf00      	nop
 80070d0:	00100002 	.word	0x00100002
 80070d4:	ffff0000 	.word	0xffff0000
 80070d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80070dc:	b672      	cpsid	i
}
 80070de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691a      	ldr	r2, [r3, #16]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007122:	b662      	cpsie	i
}
 8007124:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007158:	e0e2      	b.n	8007320 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	2200      	movs	r2, #0
 8007162:	497b      	ldr	r1, [pc, #492]	; (8007350 <HAL_I2C_Mem_Read+0x4c4>)
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fbc7 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e0e9      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007182:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007184:	b672      	cpsid	i
}
 8007186:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80071ba:	4b66      	ldr	r3, [pc, #408]	; (8007354 <HAL_I2C_Mem_Read+0x4c8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	08db      	lsrs	r3, r3, #3
 80071c0:	4a65      	ldr	r2, [pc, #404]	; (8007358 <HAL_I2C_Mem_Read+0x4cc>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	0a1a      	lsrs	r2, r3, #8
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	00da      	lsls	r2, r3, #3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d118      	bne.n	8007212 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	f043 0220 	orr.w	r2, r3, #32
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007202:	b662      	cpsie	i
}
 8007204:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e09a      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d1d9      	bne.n	80071d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800722e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007262:	b662      	cpsie	i
}
 8007264:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007298:	e042      	b.n	8007320 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800729a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800729c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fc82 	bl	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e04c      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d118      	bne.n	8007320 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	f47f ae94 	bne.w	8007052 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007346:	2302      	movs	r3, #2
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3728      	adds	r7, #40	; 0x28
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	00010004 	.word	0x00010004
 8007354:	20000018 	.word	0x20000018
 8007358:	14f8b589 	.word	0x14f8b589

0800735c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af02      	add	r7, sp, #8
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	607a      	str	r2, [r7, #4]
 8007366:	603b      	str	r3, [r7, #0]
 8007368:	460b      	mov	r3, r1
 800736a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d006      	beq.n	8007386 <I2C_MasterRequestWrite+0x2a>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d003      	beq.n	8007386 <I2C_MasterRequestWrite+0x2a>
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007384:	d108      	bne.n	8007398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e00b      	b.n	80073b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	2b12      	cmp	r3, #18
 800739e:	d107      	bne.n	80073b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fa9b 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00d      	beq.n	80073e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d6:	d103      	bne.n	80073e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e035      	b.n	8007450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ec:	d108      	bne.n	8007400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073ee:	897b      	ldrh	r3, [r7, #10]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073fc:	611a      	str	r2, [r3, #16]
 80073fe:	e01b      	b.n	8007438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007400:	897b      	ldrh	r3, [r7, #10]
 8007402:	11db      	asrs	r3, r3, #7
 8007404:	b2db      	uxtb	r3, r3
 8007406:	f003 0306 	and.w	r3, r3, #6
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f063 030f 	orn	r3, r3, #15
 8007410:	b2da      	uxtb	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	490e      	ldr	r1, [pc, #56]	; (8007458 <I2C_MasterRequestWrite+0xfc>)
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fac1 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e010      	b.n	8007450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800742e:	897b      	ldrh	r3, [r7, #10]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	4907      	ldr	r1, [pc, #28]	; (800745c <I2C_MasterRequestWrite+0x100>)
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fab1 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e000      	b.n	8007450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	00010008 	.word	0x00010008
 800745c:	00010002 	.word	0x00010002

08007460 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	460b      	mov	r3, r1
 800746e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007484:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d006      	beq.n	800749a <I2C_MasterRequestRead+0x3a>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d003      	beq.n	800749a <I2C_MasterRequestRead+0x3a>
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007498:	d108      	bne.n	80074ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e00b      	b.n	80074c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	2b11      	cmp	r3, #17
 80074b2:	d107      	bne.n	80074c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fa11 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00d      	beq.n	80074f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ea:	d103      	bne.n	80074f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e079      	b.n	80075ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007500:	d108      	bne.n	8007514 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007502:	897b      	ldrh	r3, [r7, #10]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	611a      	str	r2, [r3, #16]
 8007512:	e05f      	b.n	80075d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007514:	897b      	ldrh	r3, [r7, #10]
 8007516:	11db      	asrs	r3, r3, #7
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f003 0306 	and.w	r3, r3, #6
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f063 030f 	orn	r3, r3, #15
 8007524:	b2da      	uxtb	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4930      	ldr	r1, [pc, #192]	; (80075f4 <I2C_MasterRequestRead+0x194>)
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 fa37 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e054      	b.n	80075ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007542:	897b      	ldrh	r3, [r7, #10]
 8007544:	b2da      	uxtb	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4929      	ldr	r1, [pc, #164]	; (80075f8 <I2C_MasterRequestRead+0x198>)
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 fa27 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e044      	b.n	80075ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	613b      	str	r3, [r7, #16]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007586:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f9af 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00d      	beq.n	80075bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ae:	d103      	bne.n	80075b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e017      	b.n	80075ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80075bc:	897b      	ldrh	r3, [r7, #10]
 80075be:	11db      	asrs	r3, r3, #7
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f003 0306 	and.w	r3, r3, #6
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f063 030e 	orn	r3, r3, #14
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	4907      	ldr	r1, [pc, #28]	; (80075f8 <I2C_MasterRequestRead+0x198>)
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f9e3 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	00010008 	.word	0x00010008
 80075f8:	00010002 	.word	0x00010002

080075fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af02      	add	r7, sp, #8
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4603      	mov	r3, r0
 800760c:	817b      	strh	r3, [r7, #10]
 800760e:	460b      	mov	r3, r1
 8007610:	813b      	strh	r3, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	2200      	movs	r2, #0
 800762e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f960 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00d      	beq.n	800765a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800764c:	d103      	bne.n	8007656 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e05f      	b.n	800771a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800765a:	897b      	ldrh	r3, [r7, #10]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	6a3a      	ldr	r2, [r7, #32]
 800766e:	492d      	ldr	r1, [pc, #180]	; (8007724 <I2C_RequestMemoryWrite+0x128>)
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 f998 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e04c      	b.n	800771a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007698:	6a39      	ldr	r1, [r7, #32]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fa02 	bl	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d107      	bne.n	80076be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e02b      	b.n	800771a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d105      	bne.n	80076d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076c8:	893b      	ldrh	r3, [r7, #8]
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	611a      	str	r2, [r3, #16]
 80076d2:	e021      	b.n	8007718 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076d4:	893b      	ldrh	r3, [r7, #8]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	b29b      	uxth	r3, r3
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e4:	6a39      	ldr	r1, [r7, #32]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f9dc 	bl	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00d      	beq.n	800770e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d107      	bne.n	800770a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e005      	b.n	800771a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800770e:	893b      	ldrh	r3, [r7, #8]
 8007710:	b2da      	uxtb	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	00010002 	.word	0x00010002

08007728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	461a      	mov	r2, r3
 8007736:	4603      	mov	r3, r0
 8007738:	817b      	strh	r3, [r7, #10]
 800773a:	460b      	mov	r3, r1
 800773c:	813b      	strh	r3, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	2200      	movs	r2, #0
 800776a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f8c2 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00d      	beq.n	8007796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007788:	d103      	bne.n	8007792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e0aa      	b.n	80078ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007796:	897b      	ldrh	r3, [r7, #10]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	461a      	mov	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	6a3a      	ldr	r2, [r7, #32]
 80077aa:	4952      	ldr	r1, [pc, #328]	; (80078f4 <I2C_RequestMemoryRead+0x1cc>)
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f8fa 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e097      	b.n	80078ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d4:	6a39      	ldr	r1, [r7, #32]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f964 	bl	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d107      	bne.n	80077fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e076      	b.n	80078ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077fe:	88fb      	ldrh	r3, [r7, #6]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d105      	bne.n	8007810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007804:	893b      	ldrh	r3, [r7, #8]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	611a      	str	r2, [r3, #16]
 800780e:	e021      	b.n	8007854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007810:	893b      	ldrh	r3, [r7, #8]
 8007812:	0a1b      	lsrs	r3, r3, #8
 8007814:	b29b      	uxth	r3, r3
 8007816:	b2da      	uxtb	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800781e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007820:	6a39      	ldr	r1, [r7, #32]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f93e 	bl	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2b04      	cmp	r3, #4
 8007834:	d107      	bne.n	8007846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e050      	b.n	80078ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800784a:	893b      	ldrh	r3, [r7, #8]
 800784c:	b2da      	uxtb	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007856:	6a39      	ldr	r1, [r7, #32]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f923 	bl	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00d      	beq.n	8007880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007868:	2b04      	cmp	r3, #4
 800786a:	d107      	bne.n	800787c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800787a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e035      	b.n	80078ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800788e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	2200      	movs	r2, #0
 8007898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f82b 	bl	80078f8 <I2C_WaitOnFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00d      	beq.n	80078c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b6:	d103      	bne.n	80078c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e013      	b.n	80078ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078c4:	897b      	ldrh	r3, [r7, #10]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f043 0301 	orr.w	r3, r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	4906      	ldr	r1, [pc, #24]	; (80078f4 <I2C_RequestMemoryRead+0x1cc>)
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f863 	bl	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	00010002 	.word	0x00010002

080078f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	4613      	mov	r3, r2
 8007906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007908:	e025      	b.n	8007956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007910:	d021      	beq.n	8007956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007912:	f7fd ffc9 	bl	80058a8 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d302      	bcc.n	8007928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d116      	bne.n	8007956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f043 0220 	orr.w	r2, r3, #32
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e023      	b.n	800799e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	0c1b      	lsrs	r3, r3, #16
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10d      	bne.n	800797c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	43da      	mvns	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	e00c      	b.n	8007996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	43da      	mvns	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4013      	ands	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	bf0c      	ite	eq
 800798e:	2301      	moveq	r3, #1
 8007990:	2300      	movne	r3, #0
 8007992:	b2db      	uxtb	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	429a      	cmp	r2, r3
 800799a:	d0b6      	beq.n	800790a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079b4:	e051      	b.n	8007a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c4:	d123      	bne.n	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f043 0204 	orr.w	r2, r3, #4
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e046      	b.n	8007a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d021      	beq.n	8007a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a16:	f7fd ff47 	bl	80058a8 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d302      	bcc.n	8007a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d116      	bne.n	8007a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	f043 0220 	orr.w	r2, r3, #32
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e020      	b.n	8007a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d10c      	bne.n	8007a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	43da      	mvns	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	2300      	moveq	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	e00b      	b.n	8007a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	43da      	mvns	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d18d      	bne.n	80079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ab0:	e02d      	b.n	8007b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f8ce 	bl	8007c54 <I2C_IsAcknowledgeFailed>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e02d      	b.n	8007b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac8:	d021      	beq.n	8007b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aca:	f7fd feed 	bl	80058a8 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d302      	bcc.n	8007ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d116      	bne.n	8007b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f043 0220 	orr.w	r2, r3, #32
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e007      	b.n	8007b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b18:	2b80      	cmp	r3, #128	; 0x80
 8007b1a:	d1ca      	bne.n	8007ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b32:	e02d      	b.n	8007b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f88d 	bl	8007c54 <I2C_IsAcknowledgeFailed>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e02d      	b.n	8007ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d021      	beq.n	8007b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b4c:	f7fd feac 	bl	80058a8 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d302      	bcc.n	8007b62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d116      	bne.n	8007b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	f043 0220 	orr.w	r2, r3, #32
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e007      	b.n	8007ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d1ca      	bne.n	8007b34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bb4:	e042      	b.n	8007c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d119      	bne.n	8007bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0210 	mvn.w	r2, #16
 8007bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e029      	b.n	8007c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf8:	f7fd fe56 	bl	80058a8 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d302      	bcc.n	8007c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d116      	bne.n	8007c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	f043 0220 	orr.w	r2, r3, #32
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e007      	b.n	8007c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b40      	cmp	r3, #64	; 0x40
 8007c48:	d1b5      	bne.n	8007bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6a:	d11b      	bne.n	8007ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	f043 0204 	orr.w	r2, r3, #4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr

08007cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e26c      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 8087 	beq.w	8007dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cd0:	4b92      	ldr	r3, [pc, #584]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 030c 	and.w	r3, r3, #12
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d00c      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007cdc:	4b8f      	ldr	r3, [pc, #572]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f003 030c 	and.w	r3, r3, #12
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d112      	bne.n	8007d0e <HAL_RCC_OscConfig+0x5e>
 8007ce8:	4b8c      	ldr	r3, [pc, #560]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf4:	d10b      	bne.n	8007d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf6:	4b89      	ldr	r3, [pc, #548]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d06c      	beq.n	8007ddc <HAL_RCC_OscConfig+0x12c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d168      	bne.n	8007ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e246      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d16:	d106      	bne.n	8007d26 <HAL_RCC_OscConfig+0x76>
 8007d18:	4b80      	ldr	r3, [pc, #512]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a7f      	ldr	r2, [pc, #508]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	e02e      	b.n	8007d84 <HAL_RCC_OscConfig+0xd4>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10c      	bne.n	8007d48 <HAL_RCC_OscConfig+0x98>
 8007d2e:	4b7b      	ldr	r3, [pc, #492]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a7a      	ldr	r2, [pc, #488]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4b78      	ldr	r3, [pc, #480]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a77      	ldr	r2, [pc, #476]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	e01d      	b.n	8007d84 <HAL_RCC_OscConfig+0xd4>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d50:	d10c      	bne.n	8007d6c <HAL_RCC_OscConfig+0xbc>
 8007d52:	4b72      	ldr	r3, [pc, #456]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a71      	ldr	r2, [pc, #452]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	4b6f      	ldr	r3, [pc, #444]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a6e      	ldr	r2, [pc, #440]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	e00b      	b.n	8007d84 <HAL_RCC_OscConfig+0xd4>
 8007d6c:	4b6b      	ldr	r3, [pc, #428]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a6a      	ldr	r2, [pc, #424]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	4b68      	ldr	r3, [pc, #416]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a67      	ldr	r2, [pc, #412]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d013      	beq.n	8007db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d8c:	f7fd fd8c 	bl	80058a8 <HAL_GetTick>
 8007d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d94:	f7fd fd88 	bl	80058a8 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b64      	cmp	r3, #100	; 0x64
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e1fa      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007da6:	4b5d      	ldr	r3, [pc, #372]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0f0      	beq.n	8007d94 <HAL_RCC_OscConfig+0xe4>
 8007db2:	e014      	b.n	8007dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db4:	f7fd fd78 	bl	80058a8 <HAL_GetTick>
 8007db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dbc:	f7fd fd74 	bl	80058a8 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b64      	cmp	r3, #100	; 0x64
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e1e6      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dce:	4b53      	ldr	r3, [pc, #332]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f0      	bne.n	8007dbc <HAL_RCC_OscConfig+0x10c>
 8007dda:	e000      	b.n	8007dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d063      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007dea:	4b4c      	ldr	r3, [pc, #304]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f003 030c 	and.w	r3, r3, #12
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007df6:	4b49      	ldr	r3, [pc, #292]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d11c      	bne.n	8007e3c <HAL_RCC_OscConfig+0x18c>
 8007e02:	4b46      	ldr	r3, [pc, #280]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d116      	bne.n	8007e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e0e:	4b43      	ldr	r3, [pc, #268]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <HAL_RCC_OscConfig+0x176>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d001      	beq.n	8007e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e1ba      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e26:	4b3d      	ldr	r3, [pc, #244]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4939      	ldr	r1, [pc, #228]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e3a:	e03a      	b.n	8007eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d020      	beq.n	8007e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e44:	4b36      	ldr	r3, [pc, #216]	; (8007f20 <HAL_RCC_OscConfig+0x270>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e4a:	f7fd fd2d 	bl	80058a8 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e50:	e008      	b.n	8007e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e52:	f7fd fd29 	bl	80058a8 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e19b      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e64:	4b2d      	ldr	r3, [pc, #180]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f0      	beq.n	8007e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e70:	4b2a      	ldr	r3, [pc, #168]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	4927      	ldr	r1, [pc, #156]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	600b      	str	r3, [r1, #0]
 8007e84:	e015      	b.n	8007eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e86:	4b26      	ldr	r3, [pc, #152]	; (8007f20 <HAL_RCC_OscConfig+0x270>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e8c:	f7fd fd0c 	bl	80058a8 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e94:	f7fd fd08 	bl	80058a8 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e17a      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ea6:	4b1d      	ldr	r3, [pc, #116]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f0      	bne.n	8007e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d03a      	beq.n	8007f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d019      	beq.n	8007efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ec6:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <HAL_RCC_OscConfig+0x274>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ecc:	f7fd fcec 	bl	80058a8 <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ed4:	f7fd fce8 	bl	80058a8 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e15a      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <HAL_RCC_OscConfig+0x26c>)
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0f0      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	f000 fad8 	bl	80084a8 <RCC_Delay>
 8007ef8:	e01c      	b.n	8007f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007efa:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <HAL_RCC_OscConfig+0x274>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f00:	f7fd fcd2 	bl	80058a8 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f06:	e00f      	b.n	8007f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f08:	f7fd fcce 	bl	80058a8 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d908      	bls.n	8007f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e140      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
 8007f1a:	bf00      	nop
 8007f1c:	40021000 	.word	0x40021000
 8007f20:	42420000 	.word	0x42420000
 8007f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f28:	4b9e      	ldr	r3, [pc, #632]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e9      	bne.n	8007f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 80a6 	beq.w	800808e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f46:	4b97      	ldr	r3, [pc, #604]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10d      	bne.n	8007f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f52:	4b94      	ldr	r3, [pc, #592]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	4a93      	ldr	r2, [pc, #588]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5c:	61d3      	str	r3, [r2, #28]
 8007f5e:	4b91      	ldr	r3, [pc, #580]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f66:	60bb      	str	r3, [r7, #8]
 8007f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6e:	4b8e      	ldr	r3, [pc, #568]	; (80081a8 <HAL_RCC_OscConfig+0x4f8>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d118      	bne.n	8007fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f7a:	4b8b      	ldr	r3, [pc, #556]	; (80081a8 <HAL_RCC_OscConfig+0x4f8>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a8a      	ldr	r2, [pc, #552]	; (80081a8 <HAL_RCC_OscConfig+0x4f8>)
 8007f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f86:	f7fd fc8f 	bl	80058a8 <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f8e:	f7fd fc8b 	bl	80058a8 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b64      	cmp	r3, #100	; 0x64
 8007f9a:	d901      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e0fd      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa0:	4b81      	ldr	r3, [pc, #516]	; (80081a8 <HAL_RCC_OscConfig+0x4f8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0f0      	beq.n	8007f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d106      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x312>
 8007fb4:	4b7b      	ldr	r3, [pc, #492]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	4a7a      	ldr	r2, [pc, #488]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	6213      	str	r3, [r2, #32]
 8007fc0:	e02d      	b.n	800801e <HAL_RCC_OscConfig+0x36e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10c      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x334>
 8007fca:	4b76      	ldr	r3, [pc, #472]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	4a75      	ldr	r2, [pc, #468]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	6213      	str	r3, [r2, #32]
 8007fd6:	4b73      	ldr	r3, [pc, #460]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	4a72      	ldr	r2, [pc, #456]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007fdc:	f023 0304 	bic.w	r3, r3, #4
 8007fe0:	6213      	str	r3, [r2, #32]
 8007fe2:	e01c      	b.n	800801e <HAL_RCC_OscConfig+0x36e>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	2b05      	cmp	r3, #5
 8007fea:	d10c      	bne.n	8008006 <HAL_RCC_OscConfig+0x356>
 8007fec:	4b6d      	ldr	r3, [pc, #436]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	4a6c      	ldr	r2, [pc, #432]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007ff2:	f043 0304 	orr.w	r3, r3, #4
 8007ff6:	6213      	str	r3, [r2, #32]
 8007ff8:	4b6a      	ldr	r3, [pc, #424]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	4a69      	ldr	r2, [pc, #420]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	6213      	str	r3, [r2, #32]
 8008004:	e00b      	b.n	800801e <HAL_RCC_OscConfig+0x36e>
 8008006:	4b67      	ldr	r3, [pc, #412]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	4a66      	ldr	r2, [pc, #408]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	6213      	str	r3, [r2, #32]
 8008012:	4b64      	ldr	r3, [pc, #400]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	4a63      	ldr	r2, [pc, #396]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008018:	f023 0304 	bic.w	r3, r3, #4
 800801c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d015      	beq.n	8008052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008026:	f7fd fc3f 	bl	80058a8 <HAL_GetTick>
 800802a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800802c:	e00a      	b.n	8008044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800802e:	f7fd fc3b 	bl	80058a8 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	f241 3288 	movw	r2, #5000	; 0x1388
 800803c:	4293      	cmp	r3, r2
 800803e:	d901      	bls.n	8008044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e0ab      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008044:	4b57      	ldr	r3, [pc, #348]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0ee      	beq.n	800802e <HAL_RCC_OscConfig+0x37e>
 8008050:	e014      	b.n	800807c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008052:	f7fd fc29 	bl	80058a8 <HAL_GetTick>
 8008056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008058:	e00a      	b.n	8008070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800805a:	f7fd fc25 	bl	80058a8 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	f241 3288 	movw	r2, #5000	; 0x1388
 8008068:	4293      	cmp	r3, r2
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e095      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008070:	4b4c      	ldr	r3, [pc, #304]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1ee      	bne.n	800805a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d105      	bne.n	800808e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008082:	4b48      	ldr	r3, [pc, #288]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	4a47      	ldr	r2, [pc, #284]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800808c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 8081 	beq.w	800819a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008098:	4b42      	ldr	r3, [pc, #264]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 030c 	and.w	r3, r3, #12
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d061      	beq.n	8008168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d146      	bne.n	800813a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ac:	4b3f      	ldr	r3, [pc, #252]	; (80081ac <HAL_RCC_OscConfig+0x4fc>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b2:	f7fd fbf9 	bl	80058a8 <HAL_GetTick>
 80080b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080b8:	e008      	b.n	80080cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ba:	f7fd fbf5 	bl	80058a8 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e067      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080cc:	4b35      	ldr	r3, [pc, #212]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f0      	bne.n	80080ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e0:	d108      	bne.n	80080f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80080e2:	4b30      	ldr	r3, [pc, #192]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	492d      	ldr	r1, [pc, #180]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080f4:	4b2b      	ldr	r3, [pc, #172]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a19      	ldr	r1, [r3, #32]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	430b      	orrs	r3, r1
 8008106:	4927      	ldr	r1, [pc, #156]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008108:	4313      	orrs	r3, r2
 800810a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800810c:	4b27      	ldr	r3, [pc, #156]	; (80081ac <HAL_RCC_OscConfig+0x4fc>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008112:	f7fd fbc9 	bl	80058a8 <HAL_GetTick>
 8008116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008118:	e008      	b.n	800812c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800811a:	f7fd fbc5 	bl	80058a8 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e037      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800812c:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0f0      	beq.n	800811a <HAL_RCC_OscConfig+0x46a>
 8008138:	e02f      	b.n	800819a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800813a:	4b1c      	ldr	r3, [pc, #112]	; (80081ac <HAL_RCC_OscConfig+0x4fc>)
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008140:	f7fd fbb2 	bl	80058a8 <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008148:	f7fd fbae 	bl	80058a8 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e020      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1f0      	bne.n	8008148 <HAL_RCC_OscConfig+0x498>
 8008166:	e018      	b.n	800819a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e013      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <HAL_RCC_OscConfig+0x4f4>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	429a      	cmp	r2, r3
 8008186:	d106      	bne.n	8008196 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008192:	429a      	cmp	r2, r3
 8008194:	d001      	beq.n	800819a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	40021000 	.word	0x40021000
 80081a8:	40007000 	.word	0x40007000
 80081ac:	42420060 	.word	0x42420060

080081b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0d0      	b.n	8008366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081c4:	4b6a      	ldr	r3, [pc, #424]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d910      	bls.n	80081f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d2:	4b67      	ldr	r3, [pc, #412]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f023 0207 	bic.w	r2, r3, #7
 80081da:	4965      	ldr	r1, [pc, #404]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	4313      	orrs	r3, r2
 80081e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081e2:	4b63      	ldr	r3, [pc, #396]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d001      	beq.n	80081f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e0b8      	b.n	8008366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d020      	beq.n	8008242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800820c:	4b59      	ldr	r3, [pc, #356]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a58      	ldr	r2, [pc, #352]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008224:	4b53      	ldr	r3, [pc, #332]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4a52      	ldr	r2, [pc, #328]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800822a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800822e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008230:	4b50      	ldr	r3, [pc, #320]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	494d      	ldr	r1, [pc, #308]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800823e:	4313      	orrs	r3, r2
 8008240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d040      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d107      	bne.n	8008266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008256:	4b47      	ldr	r3, [pc, #284]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d115      	bne.n	800828e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e07f      	b.n	8008366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d107      	bne.n	800827e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800826e:	4b41      	ldr	r3, [pc, #260]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e073      	b.n	8008366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800827e:	4b3d      	ldr	r3, [pc, #244]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e06b      	b.n	8008366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800828e:	4b39      	ldr	r3, [pc, #228]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f023 0203 	bic.w	r2, r3, #3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4936      	ldr	r1, [pc, #216]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800829c:	4313      	orrs	r3, r2
 800829e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082a0:	f7fd fb02 	bl	80058a8 <HAL_GetTick>
 80082a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	e00a      	b.n	80082be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a8:	f7fd fafe 	bl	80058a8 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e053      	b.n	8008366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082be:	4b2d      	ldr	r3, [pc, #180]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f003 020c 	and.w	r2, r3, #12
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d1eb      	bne.n	80082a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082d0:	4b27      	ldr	r3, [pc, #156]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d210      	bcs.n	8008300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082de:	4b24      	ldr	r3, [pc, #144]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f023 0207 	bic.w	r2, r3, #7
 80082e6:	4922      	ldr	r1, [pc, #136]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ee:	4b20      	ldr	r3, [pc, #128]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d001      	beq.n	8008300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e032      	b.n	8008366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800830c:	4b19      	ldr	r3, [pc, #100]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	4916      	ldr	r1, [pc, #88]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800831a:	4313      	orrs	r3, r2
 800831c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800832a:	4b12      	ldr	r3, [pc, #72]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	490e      	ldr	r1, [pc, #56]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 800833a:	4313      	orrs	r3, r2
 800833c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800833e:	f000 f821 	bl	8008384 <HAL_RCC_GetSysClockFreq>
 8008342:	4602      	mov	r2, r0
 8008344:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	091b      	lsrs	r3, r3, #4
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	490a      	ldr	r1, [pc, #40]	; (8008378 <HAL_RCC_ClockConfig+0x1c8>)
 8008350:	5ccb      	ldrb	r3, [r1, r3]
 8008352:	fa22 f303 	lsr.w	r3, r2, r3
 8008356:	4a09      	ldr	r2, [pc, #36]	; (800837c <HAL_RCC_ClockConfig+0x1cc>)
 8008358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800835a:	4b09      	ldr	r3, [pc, #36]	; (8008380 <HAL_RCC_ClockConfig+0x1d0>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd fa60 	bl	8005824 <HAL_InitTick>

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	40022000 	.word	0x40022000
 8008374:	40021000 	.word	0x40021000
 8008378:	0800fe1c 	.word	0x0800fe1c
 800837c:	20000018 	.word	0x20000018
 8008380:	2000001c 	.word	0x2000001c

08008384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008384:	b490      	push	{r4, r7}
 8008386:	b08a      	sub	sp, #40	; 0x28
 8008388:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800838a:	4b2a      	ldr	r3, [pc, #168]	; (8008434 <HAL_RCC_GetSysClockFreq+0xb0>)
 800838c:	1d3c      	adds	r4, r7, #4
 800838e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008394:	f240 2301 	movw	r3, #513	; 0x201
 8008398:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	2300      	movs	r3, #0
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	2300      	movs	r3, #0
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
 80083a6:	2300      	movs	r3, #0
 80083a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80083ae:	4b22      	ldr	r3, [pc, #136]	; (8008438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f003 030c 	and.w	r3, r3, #12
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d002      	beq.n	80083c4 <HAL_RCC_GetSysClockFreq+0x40>
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d003      	beq.n	80083ca <HAL_RCC_GetSysClockFreq+0x46>
 80083c2:	e02d      	b.n	8008420 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083c4:	4b1d      	ldr	r3, [pc, #116]	; (800843c <HAL_RCC_GetSysClockFreq+0xb8>)
 80083c6:	623b      	str	r3, [r7, #32]
      break;
 80083c8:	e02d      	b.n	8008426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	0c9b      	lsrs	r3, r3, #18
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083d6:	4413      	add	r3, r2
 80083d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80083dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d013      	beq.n	8008410 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083e8:	4b13      	ldr	r3, [pc, #76]	; (8008438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	0c5b      	lsrs	r3, r3, #17
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083f6:	4413      	add	r3, r2
 80083f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80083fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	4a0e      	ldr	r2, [pc, #56]	; (800843c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008402:	fb02 f203 	mul.w	r2, r2, r3
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
 800840e:	e004      	b.n	800841a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	4a0b      	ldr	r2, [pc, #44]	; (8008440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008414:	fb02 f303 	mul.w	r3, r2, r3
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	623b      	str	r3, [r7, #32]
      break;
 800841e:	e002      	b.n	8008426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008422:	623b      	str	r3, [r7, #32]
      break;
 8008424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008426:	6a3b      	ldr	r3, [r7, #32]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3728      	adds	r7, #40	; 0x28
 800842c:	46bd      	mov	sp, r7
 800842e:	bc90      	pop	{r4, r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	0800fe0c 	.word	0x0800fe0c
 8008438:	40021000 	.word	0x40021000
 800843c:	007a1200 	.word	0x007a1200
 8008440:	003d0900 	.word	0x003d0900

08008444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <HAL_RCC_GetHCLKFreq+0x10>)
 800844a:	681b      	ldr	r3, [r3, #0]
}
 800844c:	4618      	mov	r0, r3
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr
 8008454:	20000018 	.word	0x20000018

08008458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800845c:	f7ff fff2 	bl	8008444 <HAL_RCC_GetHCLKFreq>
 8008460:	4602      	mov	r2, r0
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	4903      	ldr	r1, [pc, #12]	; (800847c <HAL_RCC_GetPCLK1Freq+0x24>)
 800846e:	5ccb      	ldrb	r3, [r1, r3]
 8008470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008474:	4618      	mov	r0, r3
 8008476:	bd80      	pop	{r7, pc}
 8008478:	40021000 	.word	0x40021000
 800847c:	0800fe2c 	.word	0x0800fe2c

08008480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008484:	f7ff ffde 	bl	8008444 <HAL_RCC_GetHCLKFreq>
 8008488:	4602      	mov	r2, r0
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	0adb      	lsrs	r3, r3, #11
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	4903      	ldr	r1, [pc, #12]	; (80084a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008496:	5ccb      	ldrb	r3, [r1, r3]
 8008498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40021000 	.word	0x40021000
 80084a4:	0800fe2c 	.word	0x0800fe2c

080084a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <RCC_Delay+0x34>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a0a      	ldr	r2, [pc, #40]	; (80084e0 <RCC_Delay+0x38>)
 80084b6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ba:	0a5b      	lsrs	r3, r3, #9
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	fb02 f303 	mul.w	r3, r2, r3
 80084c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80084c4:	bf00      	nop
  }
  while (Delay --);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	60fa      	str	r2, [r7, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1f9      	bne.n	80084c4 <RCC_Delay+0x1c>
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr
 80084dc:	20000018 	.word	0x20000018
 80084e0:	10624dd3 	.word	0x10624dd3

080084e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e041      	b.n	800857a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d106      	bne.n	8008510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fc fe72 	bl	80051f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3304      	adds	r3, #4
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f000 fe98 	bl	8009258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	d001      	beq.n	800859c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e032      	b.n	8008602 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a18      	ldr	r2, [pc, #96]	; (800860c <HAL_TIM_Base_Start+0x88>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00e      	beq.n	80085cc <HAL_TIM_Base_Start+0x48>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b6:	d009      	beq.n	80085cc <HAL_TIM_Base_Start+0x48>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a14      	ldr	r2, [pc, #80]	; (8008610 <HAL_TIM_Base_Start+0x8c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d004      	beq.n	80085cc <HAL_TIM_Base_Start+0x48>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a13      	ldr	r2, [pc, #76]	; (8008614 <HAL_TIM_Base_Start+0x90>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d111      	bne.n	80085f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b06      	cmp	r3, #6
 80085dc:	d010      	beq.n	8008600 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f042 0201 	orr.w	r2, r2, #1
 80085ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ee:	e007      	b.n	8008600 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0201 	orr.w	r2, r2, #1
 80085fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	bc80      	pop	{r7}
 800860a:	4770      	bx	lr
 800860c:	40012c00 	.word	0x40012c00
 8008610:	40000400 	.word	0x40000400
 8008614:	40000800 	.word	0x40000800

08008618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b01      	cmp	r3, #1
 800862a:	d001      	beq.n	8008630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e03a      	b.n	80086a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0201 	orr.w	r2, r2, #1
 8008646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a18      	ldr	r2, [pc, #96]	; (80086b0 <HAL_TIM_Base_Start_IT+0x98>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00e      	beq.n	8008670 <HAL_TIM_Base_Start_IT+0x58>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865a:	d009      	beq.n	8008670 <HAL_TIM_Base_Start_IT+0x58>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d004      	beq.n	8008670 <HAL_TIM_Base_Start_IT+0x58>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a13      	ldr	r2, [pc, #76]	; (80086b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d111      	bne.n	8008694 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f003 0307 	and.w	r3, r3, #7
 800867a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b06      	cmp	r3, #6
 8008680:	d010      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0201 	orr.w	r2, r2, #1
 8008690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008692:	e007      	b.n	80086a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0201 	orr.w	r2, r2, #1
 80086a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr
 80086b0:	40012c00 	.word	0x40012c00
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800

080086bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e041      	b.n	8008752 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fc fd68 	bl	80051b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3304      	adds	r3, #4
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	f000 fdac 	bl	8009258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d109      	bne.n	8008780 <HAL_TIM_PWM_Start+0x24>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b01      	cmp	r3, #1
 8008776:	bf14      	ite	ne
 8008778:	2301      	movne	r3, #1
 800877a:	2300      	moveq	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	e022      	b.n	80087c6 <HAL_TIM_PWM_Start+0x6a>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b04      	cmp	r3, #4
 8008784:	d109      	bne.n	800879a <HAL_TIM_PWM_Start+0x3e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b01      	cmp	r3, #1
 8008790:	bf14      	ite	ne
 8008792:	2301      	movne	r3, #1
 8008794:	2300      	moveq	r3, #0
 8008796:	b2db      	uxtb	r3, r3
 8008798:	e015      	b.n	80087c6 <HAL_TIM_PWM_Start+0x6a>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d109      	bne.n	80087b4 <HAL_TIM_PWM_Start+0x58>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	bf14      	ite	ne
 80087ac:	2301      	movne	r3, #1
 80087ae:	2300      	moveq	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	e008      	b.n	80087c6 <HAL_TIM_PWM_Start+0x6a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b01      	cmp	r3, #1
 80087be:	bf14      	ite	ne
 80087c0:	2301      	movne	r3, #1
 80087c2:	2300      	moveq	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e05e      	b.n	800888c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d104      	bne.n	80087de <HAL_TIM_PWM_Start+0x82>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087dc:	e013      	b.n	8008806 <HAL_TIM_PWM_Start+0xaa>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d104      	bne.n	80087ee <HAL_TIM_PWM_Start+0x92>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087ec:	e00b      	b.n	8008806 <HAL_TIM_PWM_Start+0xaa>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d104      	bne.n	80087fe <HAL_TIM_PWM_Start+0xa2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087fc:	e003      	b.n	8008806 <HAL_TIM_PWM_Start+0xaa>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2202      	movs	r2, #2
 8008802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2201      	movs	r2, #1
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f001 f8af 	bl	8009972 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <HAL_TIM_PWM_Start+0x138>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d107      	bne.n	800882e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800882c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a18      	ldr	r2, [pc, #96]	; (8008894 <HAL_TIM_PWM_Start+0x138>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00e      	beq.n	8008856 <HAL_TIM_PWM_Start+0xfa>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008840:	d009      	beq.n	8008856 <HAL_TIM_PWM_Start+0xfa>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a14      	ldr	r2, [pc, #80]	; (8008898 <HAL_TIM_PWM_Start+0x13c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d004      	beq.n	8008856 <HAL_TIM_PWM_Start+0xfa>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a12      	ldr	r2, [pc, #72]	; (800889c <HAL_TIM_PWM_Start+0x140>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d111      	bne.n	800887a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b06      	cmp	r3, #6
 8008866:	d010      	beq.n	800888a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0201 	orr.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008878:	e007      	b.n	800888a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0201 	orr.w	r2, r2, #1
 8008888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40012c00 	.word	0x40012c00
 8008898:	40000400 	.word	0x40000400
 800889c:	40000800 	.word	0x40000800

080088a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e041      	b.n	8008936 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f839 	bl	800893e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f000 fcba 	bl	8009258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr

08008950 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <HAL_TIM_IC_Start_IT+0x1a>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008966:	b2db      	uxtb	r3, r3
 8008968:	e013      	b.n	8008992 <HAL_TIM_IC_Start_IT+0x42>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b04      	cmp	r3, #4
 800896e:	d104      	bne.n	800897a <HAL_TIM_IC_Start_IT+0x2a>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008976:	b2db      	uxtb	r3, r3
 8008978:	e00b      	b.n	8008992 <HAL_TIM_IC_Start_IT+0x42>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d104      	bne.n	800898a <HAL_TIM_IC_Start_IT+0x3a>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008986:	b2db      	uxtb	r3, r3
 8008988:	e003      	b.n	8008992 <HAL_TIM_IC_Start_IT+0x42>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008990:	b2db      	uxtb	r3, r3
 8008992:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <HAL_TIM_IC_Start_IT+0x54>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	e013      	b.n	80089cc <HAL_TIM_IC_Start_IT+0x7c>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d104      	bne.n	80089b4 <HAL_TIM_IC_Start_IT+0x64>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	e00b      	b.n	80089cc <HAL_TIM_IC_Start_IT+0x7c>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b08      	cmp	r3, #8
 80089b8:	d104      	bne.n	80089c4 <HAL_TIM_IC_Start_IT+0x74>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	e003      	b.n	80089cc <HAL_TIM_IC_Start_IT+0x7c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d102      	bne.n	80089da <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d001      	beq.n	80089de <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e0b3      	b.n	8008b46 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <HAL_TIM_IC_Start_IT+0x9e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ec:	e013      	b.n	8008a16 <HAL_TIM_IC_Start_IT+0xc6>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d104      	bne.n	80089fe <HAL_TIM_IC_Start_IT+0xae>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089fc:	e00b      	b.n	8008a16 <HAL_TIM_IC_Start_IT+0xc6>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d104      	bne.n	8008a0e <HAL_TIM_IC_Start_IT+0xbe>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a0c:	e003      	b.n	8008a16 <HAL_TIM_IC_Start_IT+0xc6>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2202      	movs	r2, #2
 8008a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_IC_Start_IT+0xd6>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a24:	e013      	b.n	8008a4e <HAL_TIM_IC_Start_IT+0xfe>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_IC_Start_IT+0xe6>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a34:	e00b      	b.n	8008a4e <HAL_TIM_IC_Start_IT+0xfe>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_IC_Start_IT+0xf6>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a44:	e003      	b.n	8008a4e <HAL_TIM_IC_Start_IT+0xfe>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b0c      	cmp	r3, #12
 8008a52:	d841      	bhi.n	8008ad8 <HAL_TIM_IC_Start_IT+0x188>
 8008a54:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <HAL_TIM_IC_Start_IT+0x10c>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a91 	.word	0x08008a91
 8008a60:	08008ad9 	.word	0x08008ad9
 8008a64:	08008ad9 	.word	0x08008ad9
 8008a68:	08008ad9 	.word	0x08008ad9
 8008a6c:	08008aa3 	.word	0x08008aa3
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008ad9 	.word	0x08008ad9
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008ab5 	.word	0x08008ab5
 8008a80:	08008ad9 	.word	0x08008ad9
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008ac7 	.word	0x08008ac7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0202 	orr.w	r2, r2, #2
 8008a9e:	60da      	str	r2, [r3, #12]
      break;
 8008aa0:	e01b      	b.n	8008ada <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0204 	orr.w	r2, r2, #4
 8008ab0:	60da      	str	r2, [r3, #12]
      break;
 8008ab2:	e012      	b.n	8008ada <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0208 	orr.w	r2, r2, #8
 8008ac2:	60da      	str	r2, [r3, #12]
      break;
 8008ac4:	e009      	b.n	8008ada <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0210 	orr.w	r2, r2, #16
 8008ad4:	60da      	str	r2, [r3, #12]
      break;
 8008ad6:	e000      	b.n	8008ada <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8008ad8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 ff45 	bl	8009972 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a18      	ldr	r2, [pc, #96]	; (8008b50 <HAL_TIM_IC_Start_IT+0x200>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00e      	beq.n	8008b10 <HAL_TIM_IC_Start_IT+0x1c0>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afa:	d009      	beq.n	8008b10 <HAL_TIM_IC_Start_IT+0x1c0>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a14      	ldr	r2, [pc, #80]	; (8008b54 <HAL_TIM_IC_Start_IT+0x204>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_TIM_IC_Start_IT+0x1c0>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a13      	ldr	r2, [pc, #76]	; (8008b58 <HAL_TIM_IC_Start_IT+0x208>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d111      	bne.n	8008b34 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b06      	cmp	r3, #6
 8008b20:	d010      	beq.n	8008b44 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0201 	orr.w	r2, r2, #1
 8008b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b32:	e007      	b.n	8008b44 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0201 	orr.w	r2, r2, #1
 8008b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	40012c00 	.word	0x40012c00
 8008b54:	40000400 	.word	0x40000400
 8008b58:	40000800 	.word	0x40000800

08008b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d122      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d11b      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f06f 0202 	mvn.w	r2, #2
 8008b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fc f996 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8008ba4:	e005      	b.n	8008bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fb3a 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fb40 	bl	8009232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0304 	and.w	r3, r3, #4
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d122      	bne.n	8008c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d11b      	bne.n	8008c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0204 	mvn.w	r2, #4
 8008bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2202      	movs	r2, #2
 8008be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fc f96c 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8008bf8:	e005      	b.n	8008c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fb10 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fb16 	bl	8009232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	d122      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f003 0308 	and.w	r3, r3, #8
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d11b      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f06f 0208 	mvn.w	r2, #8
 8008c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2204      	movs	r2, #4
 8008c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fc f942 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8008c4c:	e005      	b.n	8008c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fae6 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 faec 	bl	8009232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b10      	cmp	r3, #16
 8008c6c:	d122      	bne.n	8008cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b10      	cmp	r3, #16
 8008c7a:	d11b      	bne.n	8008cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f06f 0210 	mvn.w	r2, #16
 8008c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2208      	movs	r2, #8
 8008c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fc f918 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8008ca0:	e005      	b.n	8008cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fabc 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fac2 	bl	8009232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d10e      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d107      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f06f 0201 	mvn.w	r2, #1
 8008cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fb fbb0 	bl	8004440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cea:	2b80      	cmp	r3, #128	; 0x80
 8008cec:	d10e      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf8:	2b80      	cmp	r3, #128	; 0x80
 8008cfa:	d107      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 ffae 	bl	8009c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d16:	2b40      	cmp	r3, #64	; 0x40
 8008d18:	d10e      	bne.n	8008d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d24:	2b40      	cmp	r3, #64	; 0x40
 8008d26:	d107      	bne.n	8008d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa86 	bl	8009244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d10e      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	2b20      	cmp	r3, #32
 8008d52:	d107      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f06f 0220 	mvn.w	r2, #32
 8008d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 ff79 	bl	8009c56 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e082      	b.n	8008e8c <HAL_TIM_IC_ConfigChannel+0x120>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d11b      	bne.n	8008dcc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	6819      	ldr	r1, [r3, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f000 fc42 	bl	800962c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f022 020c 	bic.w	r2, r2, #12
 8008db6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6999      	ldr	r1, [r3, #24]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	619a      	str	r2, [r3, #24]
 8008dca:	e05a      	b.n	8008e82 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d11c      	bne.n	8008e0c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6819      	ldr	r1, [r3, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f000 fcab 	bl	800973c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008df4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6999      	ldr	r1, [r3, #24]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	021a      	lsls	r2, r3, #8
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	619a      	str	r2, [r3, #24]
 8008e0a:	e03a      	b.n	8008e82 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d11b      	bne.n	8008e4a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6819      	ldr	r1, [r3, #0]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f000 fcf6 	bl	8009812 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 020c 	bic.w	r2, r2, #12
 8008e34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69d9      	ldr	r1, [r3, #28]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	61da      	str	r2, [r3, #28]
 8008e48:	e01b      	b.n	8008e82 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6819      	ldr	r1, [r3, #0]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f000 fd15 	bl	8009888 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69da      	ldr	r2, [r3, #28]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008e6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69d9      	ldr	r1, [r3, #28]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	021a      	lsls	r2, r3, #8
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e0ac      	b.n	8009008 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b0c      	cmp	r3, #12
 8008eba:	f200 809f 	bhi.w	8008ffc <HAL_TIM_PWM_ConfigChannel+0x168>
 8008ebe:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008ef9 	.word	0x08008ef9
 8008ec8:	08008ffd 	.word	0x08008ffd
 8008ecc:	08008ffd 	.word	0x08008ffd
 8008ed0:	08008ffd 	.word	0x08008ffd
 8008ed4:	08008f39 	.word	0x08008f39
 8008ed8:	08008ffd 	.word	0x08008ffd
 8008edc:	08008ffd 	.word	0x08008ffd
 8008ee0:	08008ffd 	.word	0x08008ffd
 8008ee4:	08008f7b 	.word	0x08008f7b
 8008ee8:	08008ffd 	.word	0x08008ffd
 8008eec:	08008ffd 	.word	0x08008ffd
 8008ef0:	08008ffd 	.word	0x08008ffd
 8008ef4:	08008fbb 	.word	0x08008fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fa0c 	bl	800931c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0208 	orr.w	r2, r2, #8
 8008f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0204 	bic.w	r2, r2, #4
 8008f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6999      	ldr	r1, [r3, #24]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	619a      	str	r2, [r3, #24]
      break;
 8008f36:	e062      	b.n	8008ffe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fa52 	bl	80093e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6999      	ldr	r1, [r3, #24]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	021a      	lsls	r2, r3, #8
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	619a      	str	r2, [r3, #24]
      break;
 8008f78:	e041      	b.n	8008ffe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fa9b 	bl	80094bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	69da      	ldr	r2, [r3, #28]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0208 	orr.w	r2, r2, #8
 8008f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0204 	bic.w	r2, r2, #4
 8008fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69d9      	ldr	r1, [r3, #28]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	61da      	str	r2, [r3, #28]
      break;
 8008fb8:	e021      	b.n	8008ffe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fae5 	bl	8009590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69da      	ldr	r2, [r3, #28]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69d9      	ldr	r1, [r3, #28]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	021a      	lsls	r2, r3, #8
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	61da      	str	r2, [r3, #28]
      break;
 8008ffa:	e000      	b.n	8008ffe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008ffc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <HAL_TIM_ConfigClockSource+0x18>
 8009024:	2302      	movs	r3, #2
 8009026:	e0b3      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x180>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800904e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009060:	d03e      	beq.n	80090e0 <HAL_TIM_ConfigClockSource+0xd0>
 8009062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009066:	f200 8087 	bhi.w	8009178 <HAL_TIM_ConfigClockSource+0x168>
 800906a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906e:	f000 8085 	beq.w	800917c <HAL_TIM_ConfigClockSource+0x16c>
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009076:	d87f      	bhi.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
 8009078:	2b70      	cmp	r3, #112	; 0x70
 800907a:	d01a      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0xa2>
 800907c:	2b70      	cmp	r3, #112	; 0x70
 800907e:	d87b      	bhi.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
 8009080:	2b60      	cmp	r3, #96	; 0x60
 8009082:	d050      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x116>
 8009084:	2b60      	cmp	r3, #96	; 0x60
 8009086:	d877      	bhi.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
 8009088:	2b50      	cmp	r3, #80	; 0x50
 800908a:	d03c      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0xf6>
 800908c:	2b50      	cmp	r3, #80	; 0x50
 800908e:	d873      	bhi.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
 8009090:	2b40      	cmp	r3, #64	; 0x40
 8009092:	d058      	beq.n	8009146 <HAL_TIM_ConfigClockSource+0x136>
 8009094:	2b40      	cmp	r3, #64	; 0x40
 8009096:	d86f      	bhi.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
 8009098:	2b30      	cmp	r3, #48	; 0x30
 800909a:	d064      	beq.n	8009166 <HAL_TIM_ConfigClockSource+0x156>
 800909c:	2b30      	cmp	r3, #48	; 0x30
 800909e:	d86b      	bhi.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
 80090a0:	2b20      	cmp	r3, #32
 80090a2:	d060      	beq.n	8009166 <HAL_TIM_ConfigClockSource+0x156>
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d867      	bhi.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d05c      	beq.n	8009166 <HAL_TIM_ConfigClockSource+0x156>
 80090ac:	2b10      	cmp	r3, #16
 80090ae:	d05a      	beq.n	8009166 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80090b0:	e062      	b.n	8009178 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	6899      	ldr	r1, [r3, #8]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f000 fc37 	bl	8009934 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	609a      	str	r2, [r3, #8]
      break;
 80090de:	e04e      	b.n	800917e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	6899      	ldr	r1, [r3, #8]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f000 fc20 	bl	8009934 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689a      	ldr	r2, [r3, #8]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009102:	609a      	str	r2, [r3, #8]
      break;
 8009104:	e03b      	b.n	800917e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	6859      	ldr	r1, [r3, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	461a      	mov	r2, r3
 8009114:	f000 fae4 	bl	80096e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2150      	movs	r1, #80	; 0x50
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fbee 	bl	8009900 <TIM_ITRx_SetConfig>
      break;
 8009124:	e02b      	b.n	800917e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6859      	ldr	r1, [r3, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	461a      	mov	r2, r3
 8009134:	f000 fb3e 	bl	80097b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2160      	movs	r1, #96	; 0x60
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fbde 	bl	8009900 <TIM_ITRx_SetConfig>
      break;
 8009144:	e01b      	b.n	800917e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	6859      	ldr	r1, [r3, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	461a      	mov	r2, r3
 8009154:	f000 fac4 	bl	80096e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2140      	movs	r1, #64	; 0x40
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fbce 	bl	8009900 <TIM_ITRx_SetConfig>
      break;
 8009164:	e00b      	b.n	800917e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	4610      	mov	r0, r2
 8009172:	f000 fbc5 	bl	8009900 <TIM_ITRx_SetConfig>
        break;
 8009176:	e002      	b.n	800917e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009178:	bf00      	nop
 800917a:	e000      	b.n	800917e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800917c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b0c      	cmp	r3, #12
 80091aa:	d831      	bhi.n	8009210 <HAL_TIM_ReadCapturedValue+0x78>
 80091ac:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80091ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b2:	bf00      	nop
 80091b4:	080091e9 	.word	0x080091e9
 80091b8:	08009211 	.word	0x08009211
 80091bc:	08009211 	.word	0x08009211
 80091c0:	08009211 	.word	0x08009211
 80091c4:	080091f3 	.word	0x080091f3
 80091c8:	08009211 	.word	0x08009211
 80091cc:	08009211 	.word	0x08009211
 80091d0:	08009211 	.word	0x08009211
 80091d4:	080091fd 	.word	0x080091fd
 80091d8:	08009211 	.word	0x08009211
 80091dc:	08009211 	.word	0x08009211
 80091e0:	08009211 	.word	0x08009211
 80091e4:	08009207 	.word	0x08009207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ee:	60fb      	str	r3, [r7, #12]

      break;
 80091f0:	e00f      	b.n	8009212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	60fb      	str	r3, [r7, #12]

      break;
 80091fa:	e00a      	b.n	8009212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009202:	60fb      	str	r3, [r7, #12]

      break;
 8009204:	e005      	b.n	8009212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	60fb      	str	r3, [r7, #12]

      break;
 800920e:	e000      	b.n	8009212 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009210:	bf00      	nop
  }

  return tmpreg;
 8009212:	68fb      	ldr	r3, [r7, #12]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop

08009220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr

08009232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	bc80      	pop	{r7}
 8009242:	4770      	bx	lr

08009244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr
	...

08009258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a29      	ldr	r2, [pc, #164]	; (8009310 <TIM_Base_SetConfig+0xb8>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00b      	beq.n	8009288 <TIM_Base_SetConfig+0x30>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009276:	d007      	beq.n	8009288 <TIM_Base_SetConfig+0x30>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a26      	ldr	r2, [pc, #152]	; (8009314 <TIM_Base_SetConfig+0xbc>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d003      	beq.n	8009288 <TIM_Base_SetConfig+0x30>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a25      	ldr	r2, [pc, #148]	; (8009318 <TIM_Base_SetConfig+0xc0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d108      	bne.n	800929a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a1c      	ldr	r2, [pc, #112]	; (8009310 <TIM_Base_SetConfig+0xb8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00b      	beq.n	80092ba <TIM_Base_SetConfig+0x62>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a8:	d007      	beq.n	80092ba <TIM_Base_SetConfig+0x62>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a19      	ldr	r2, [pc, #100]	; (8009314 <TIM_Base_SetConfig+0xbc>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d003      	beq.n	80092ba <TIM_Base_SetConfig+0x62>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a18      	ldr	r2, [pc, #96]	; (8009318 <TIM_Base_SetConfig+0xc0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d108      	bne.n	80092cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a07      	ldr	r2, [pc, #28]	; (8009310 <TIM_Base_SetConfig+0xb8>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d103      	bne.n	8009300 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	615a      	str	r2, [r3, #20]
}
 8009306:	bf00      	nop
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	bc80      	pop	{r7}
 800930e:	4770      	bx	lr
 8009310:	40012c00 	.word	0x40012c00
 8009314:	40000400 	.word	0x40000400
 8009318:	40000800 	.word	0x40000800

0800931c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	f023 0201 	bic.w	r2, r3, #1
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f023 0302 	bic.w	r3, r3, #2
 8009364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	4313      	orrs	r3, r2
 800936e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a1c      	ldr	r2, [pc, #112]	; (80093e4 <TIM_OC1_SetConfig+0xc8>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d10c      	bne.n	8009392 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f023 0308 	bic.w	r3, r3, #8
 800937e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f023 0304 	bic.w	r3, r3, #4
 8009390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <TIM_OC1_SetConfig+0xc8>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d111      	bne.n	80093be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	621a      	str	r2, [r3, #32]
}
 80093d8:	bf00      	nop
 80093da:	371c      	adds	r7, #28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	40012c00 	.word	0x40012c00

080093e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	f023 0210 	bic.w	r2, r3, #16
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800941e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	4313      	orrs	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f023 0320 	bic.w	r3, r3, #32
 8009432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4313      	orrs	r3, r2
 800943e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <TIM_OC2_SetConfig+0xd0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d10d      	bne.n	8009464 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800944e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a14      	ldr	r2, [pc, #80]	; (80094b8 <TIM_OC2_SetConfig+0xd0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d113      	bne.n	8009494 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800947a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	4313      	orrs	r3, r2
 8009486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	621a      	str	r2, [r3, #32]
}
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr
 80094b8:	40012c00 	.word	0x40012c00

080094bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a1d      	ldr	r2, [pc, #116]	; (800958c <TIM_OC3_SetConfig+0xd0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d10d      	bne.n	8009536 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a14      	ldr	r2, [pc, #80]	; (800958c <TIM_OC3_SetConfig+0xd0>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d113      	bne.n	8009566 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800954c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	621a      	str	r2, [r3, #32]
}
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	bc80      	pop	{r7}
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	40012c00 	.word	0x40012c00

08009590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	031b      	lsls	r3, r3, #12
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a0f      	ldr	r2, [pc, #60]	; (8009628 <TIM_OC4_SetConfig+0x98>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d109      	bne.n	8009604 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	019b      	lsls	r3, r3, #6
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	621a      	str	r2, [r3, #32]
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr
 8009628:	40012c00 	.word	0x40012c00

0800962c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0201 	bic.w	r2, r3, #1
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a1f      	ldr	r2, [pc, #124]	; (80096d4 <TIM_TI1_SetConfig+0xa8>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00b      	beq.n	8009672 <TIM_TI1_SetConfig+0x46>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009660:	d007      	beq.n	8009672 <TIM_TI1_SetConfig+0x46>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4a1c      	ldr	r2, [pc, #112]	; (80096d8 <TIM_TI1_SetConfig+0xac>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d003      	beq.n	8009672 <TIM_TI1_SetConfig+0x46>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4a1b      	ldr	r2, [pc, #108]	; (80096dc <TIM_TI1_SetConfig+0xb0>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d101      	bne.n	8009676 <TIM_TI1_SetConfig+0x4a>
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <TIM_TI1_SetConfig+0x4c>
 8009676:	2300      	movs	r3, #0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d008      	beq.n	800968e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f023 0303 	bic.w	r3, r3, #3
 8009682:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4313      	orrs	r3, r2
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	e003      	b.n	8009696 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f043 0301 	orr.w	r3, r3, #1
 8009694:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800969c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	011b      	lsls	r3, r3, #4
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f023 030a 	bic.w	r3, r3, #10
 80096b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f003 030a 	and.w	r3, r3, #10
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	621a      	str	r2, [r3, #32]
}
 80096ca:	bf00      	nop
 80096cc:	371c      	adds	r7, #28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bc80      	pop	{r7}
 80096d2:	4770      	bx	lr
 80096d4:	40012c00 	.word	0x40012c00
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800

080096e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	f023 0201 	bic.w	r2, r3, #1
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800970a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	011b      	lsls	r3, r3, #4
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f023 030a 	bic.w	r3, r3, #10
 800971c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	621a      	str	r2, [r3, #32]
}
 8009732:	bf00      	nop
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr

0800973c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	f023 0210 	bic.w	r2, r3, #16
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4313      	orrs	r3, r2
 8009772:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800977a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	031b      	lsls	r3, r3, #12
 8009780:	b29b      	uxth	r3, r3
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	4313      	orrs	r3, r2
 8009786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800978e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	4313      	orrs	r3, r2
 800979c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	621a      	str	r2, [r3, #32]
}
 80097aa:	bf00      	nop
 80097ac:	371c      	adds	r7, #28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bc80      	pop	{r7}
 80097b2:	4770      	bx	lr

080097b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	f023 0210 	bic.w	r2, r3, #16
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	031b      	lsls	r3, r3, #12
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	011b      	lsls	r3, r3, #4
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	621a      	str	r2, [r3, #32]
}
 8009808:	bf00      	nop
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	bc80      	pop	{r7}
 8009810:	4770      	bx	lr

08009812 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009812:	b480      	push	{r7}
 8009814:	b087      	sub	sp, #28
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
 800981e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4313      	orrs	r3, r2
 8009846:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800984e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	b2db      	uxtb	r3, r3
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4313      	orrs	r3, r2
 800985a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009862:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	021b      	lsls	r3, r3, #8
 8009868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	4313      	orrs	r3, r2
 8009870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	621a      	str	r2, [r3, #32]
}
 800987e:	bf00      	nop
 8009880:	371c      	adds	r7, #28
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	031b      	lsls	r3, r3, #12
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	031b      	lsls	r3, r3, #12
 80098e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	621a      	str	r2, [r3, #32]
}
 80098f6:	bf00      	nop
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bc80      	pop	{r7}
 80098fe:	4770      	bx	lr

08009900 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009916:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4313      	orrs	r3, r2
 800991e:	f043 0307 	orr.w	r3, r3, #7
 8009922:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	609a      	str	r2, [r3, #8]
}
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800994e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	021a      	lsls	r2, r3, #8
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	431a      	orrs	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4313      	orrs	r3, r2
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	609a      	str	r2, [r3, #8]
}
 8009968:	bf00      	nop
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr

08009972 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009972:	b480      	push	{r7}
 8009974:	b087      	sub	sp, #28
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f003 031f 	and.w	r3, r3, #31
 8009984:	2201      	movs	r2, #1
 8009986:	fa02 f303 	lsl.w	r3, r2, r3
 800998a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a1a      	ldr	r2, [r3, #32]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	43db      	mvns	r3, r3
 8009994:	401a      	ands	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a1a      	ldr	r2, [r3, #32]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f003 031f 	and.w	r3, r3, #31
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	fa01 f303 	lsl.w	r3, r1, r3
 80099aa:	431a      	orrs	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	621a      	str	r2, [r3, #32]
}
 80099b0:	bf00      	nop
 80099b2:	371c      	adds	r7, #28
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bc80      	pop	{r7}
 80099b8:	4770      	bx	lr
	...

080099bc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d109      	bne.n	80099e0 <HAL_TIMEx_PWMN_Start+0x24>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	bf14      	ite	ne
 80099d8:	2301      	movne	r3, #1
 80099da:	2300      	moveq	r3, #0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	e022      	b.n	8009a26 <HAL_TIMEx_PWMN_Start+0x6a>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	d109      	bne.n	80099fa <HAL_TIMEx_PWMN_Start+0x3e>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	bf14      	ite	ne
 80099f2:	2301      	movne	r3, #1
 80099f4:	2300      	moveq	r3, #0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	e015      	b.n	8009a26 <HAL_TIMEx_PWMN_Start+0x6a>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d109      	bne.n	8009a14 <HAL_TIMEx_PWMN_Start+0x58>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	bf14      	ite	ne
 8009a0c:	2301      	movne	r3, #1
 8009a0e:	2300      	moveq	r3, #0
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	e008      	b.n	8009a26 <HAL_TIMEx_PWMN_Start+0x6a>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	bf14      	ite	ne
 8009a20:	2301      	movne	r3, #1
 8009a22:	2300      	moveq	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e059      	b.n	8009ae2 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d104      	bne.n	8009a3e <HAL_TIMEx_PWMN_Start+0x82>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a3c:	e013      	b.n	8009a66 <HAL_TIMEx_PWMN_Start+0xaa>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d104      	bne.n	8009a4e <HAL_TIMEx_PWMN_Start+0x92>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a4c:	e00b      	b.n	8009a66 <HAL_TIMEx_PWMN_Start+0xaa>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d104      	bne.n	8009a5e <HAL_TIMEx_PWMN_Start+0xa2>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a5c:	e003      	b.n	8009a66 <HAL_TIMEx_PWMN_Start+0xaa>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2202      	movs	r2, #2
 8009a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2204      	movs	r2, #4
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f903 	bl	8009c7a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a18      	ldr	r2, [pc, #96]	; (8009aec <HAL_TIMEx_PWMN_Start+0x130>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d00e      	beq.n	8009aac <HAL_TIMEx_PWMN_Start+0xf0>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a96:	d009      	beq.n	8009aac <HAL_TIMEx_PWMN_Start+0xf0>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a14      	ldr	r2, [pc, #80]	; (8009af0 <HAL_TIMEx_PWMN_Start+0x134>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d004      	beq.n	8009aac <HAL_TIMEx_PWMN_Start+0xf0>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a13      	ldr	r2, [pc, #76]	; (8009af4 <HAL_TIMEx_PWMN_Start+0x138>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d111      	bne.n	8009ad0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b06      	cmp	r3, #6
 8009abc:	d010      	beq.n	8009ae0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f042 0201 	orr.w	r2, r2, #1
 8009acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ace:	e007      	b.n	8009ae0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0201 	orr.w	r2, r2, #1
 8009ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40012c00 	.word	0x40012c00
 8009af0:	40000400 	.word	0x40000400
 8009af4:	40000800 	.word	0x40000800

08009af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d101      	bne.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e046      	b.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a16      	ldr	r2, [pc, #88]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00e      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5c:	d009      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a12      	ldr	r2, [pc, #72]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d004      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d10c      	bne.n	8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bc80      	pop	{r7}
 8009ba6:	4770      	bx	lr
 8009ba8:	40012c00 	.word	0x40012c00
 8009bac:	40000400 	.word	0x40000400
 8009bb0:	40000800 	.word	0x40000800

08009bb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d101      	bne.n	8009bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	e03d      	b.n	8009c4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bc80      	pop	{r7}
 8009c54:	4770      	bx	lr

08009c56 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bc80      	pop	{r7}
 8009c66:	4770      	bx	lr

08009c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bc80      	pop	{r7}
 8009c78:	4770      	bx	lr

08009c7a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b087      	sub	sp, #28
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f003 031f 	and.w	r3, r3, #31
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c92:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a1a      	ldr	r2, [r3, #32]
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	43db      	mvns	r3, r3
 8009c9c:	401a      	ands	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a1a      	ldr	r2, [r3, #32]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	f003 031f 	and.w	r3, r3, #31
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	621a      	str	r2, [r3, #32]
}
 8009cb8:	bf00      	nop
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc80      	pop	{r7}
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e03f      	b.n	8009d54 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7fb fb45 	bl	8005378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2224      	movs	r2, #36	; 0x24
 8009cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68da      	ldr	r2, [r3, #12]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fc62 	bl	800a5d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	691a      	ldr	r2, [r3, #16]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	695a      	ldr	r2, [r3, #20]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08a      	sub	sp, #40	; 0x28
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	603b      	str	r3, [r7, #0]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	d17c      	bne.n	8009e76 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <HAL_UART_Transmit+0x2c>
 8009d82:	88fb      	ldrh	r3, [r7, #6]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e075      	b.n	8009e78 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d101      	bne.n	8009d9a <HAL_UART_Transmit+0x3e>
 8009d96:	2302      	movs	r3, #2
 8009d98:	e06e      	b.n	8009e78 <HAL_UART_Transmit+0x11c>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2221      	movs	r2, #33	; 0x21
 8009dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009db0:	f7fb fd7a 	bl	80058a8 <HAL_GetTick>
 8009db4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	88fa      	ldrh	r2, [r7, #6]
 8009dba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	88fa      	ldrh	r2, [r7, #6]
 8009dc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dca:	d108      	bne.n	8009dde <HAL_UART_Transmit+0x82>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d104      	bne.n	8009dde <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	61bb      	str	r3, [r7, #24]
 8009ddc:	e003      	b.n	8009de6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009dee:	e02a      	b.n	8009e46 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2200      	movs	r2, #0
 8009df8:	2180      	movs	r1, #128	; 0x80
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 fa70 	bl	800a2e0 <UART_WaitOnFlagUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e036      	b.n	8009e78 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e1e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	3302      	adds	r3, #2
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	e007      	b.n	8009e38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	781a      	ldrb	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	3301      	adds	r3, #1
 8009e36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1cf      	bne.n	8009df0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2200      	movs	r2, #0
 8009e58:	2140      	movs	r1, #64	; 0x40
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fa40 	bl	800a2e0 <UART_WaitOnFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e006      	b.n	8009e78 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	e000      	b.n	8009e78 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009e76:	2302      	movs	r3, #2
  }
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	d166      	bne.n	8009f68 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <HAL_UART_Receive_DMA+0x26>
 8009ea0:	88fb      	ldrh	r3, [r7, #6]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e05f      	b.n	8009f6a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_UART_Receive_DMA+0x38>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	e058      	b.n	8009f6a <HAL_UART_Receive_DMA+0xea>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	88fa      	ldrh	r2, [r7, #6]
 8009eca:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2222      	movs	r2, #34	; 0x22
 8009ed6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ede:	4a25      	ldr	r2, [pc, #148]	; (8009f74 <HAL_UART_Receive_DMA+0xf4>)
 8009ee0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee6:	4a24      	ldr	r2, [pc, #144]	; (8009f78 <HAL_UART_Receive_DMA+0xf8>)
 8009ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eee:	4a23      	ldr	r2, [pc, #140]	; (8009f7c <HAL_UART_Receive_DMA+0xfc>)
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	88fb      	ldrh	r3, [r7, #6]
 8009f12:	f7fb fe5f 	bl	8005bd4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009f16:	2300      	movs	r3, #0
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	613b      	str	r3, [r7, #16]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]
 8009f2a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f42:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695a      	ldr	r2, [r3, #20]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	695a      	ldr	r2, [r3, #20]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f62:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	e000      	b.n	8009f6a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009f68:	2302      	movs	r3, #2
  }
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	0800a1c9 	.word	0x0800a1c9
 8009f78:	0800a231 	.word	0x0800a231
 8009f7c:	0800a24d 	.word	0x0800a24d

08009f80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10d      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	f003 0320 	and.w	r3, r3, #32
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d008      	beq.n	8009fd2 <HAL_UART_IRQHandler+0x52>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fa7f 	bl	800a4ce <UART_Receive_IT>
      return;
 8009fd0:	e0d0      	b.n	800a174 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80b0 	beq.w	800a13a <HAL_UART_IRQHandler+0x1ba>
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d105      	bne.n	8009ff0 <HAL_UART_IRQHandler+0x70>
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 80a5 	beq.w	800a13a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <HAL_UART_IRQHandler+0x90>
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a000:	2b00      	cmp	r3, #0
 800a002:	d005      	beq.n	800a010 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a008:	f043 0201 	orr.w	r2, r3, #1
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f003 0304 	and.w	r3, r3, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <HAL_UART_IRQHandler+0xb0>
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a028:	f043 0202 	orr.w	r2, r3, #2
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00a      	beq.n	800a050 <HAL_UART_IRQHandler+0xd0>
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a048:	f043 0204 	orr.w	r2, r3, #4
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00f      	beq.n	800a07a <HAL_UART_IRQHandler+0xfa>
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	f003 0320 	and.w	r3, r3, #32
 800a060:	2b00      	cmp	r3, #0
 800a062:	d104      	bne.n	800a06e <HAL_UART_IRQHandler+0xee>
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d005      	beq.n	800a07a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a072:	f043 0208 	orr.w	r2, r3, #8
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d077      	beq.n	800a172 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	f003 0320 	and.w	r3, r3, #32
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d007      	beq.n	800a09c <HAL_UART_IRQHandler+0x11c>
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f003 0320 	and.w	r3, r3, #32
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa19 	bl	800a4ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bf14      	ite	ne
 800a0aa:	2301      	movne	r3, #1
 800a0ac:	2300      	moveq	r3, #0
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b6:	f003 0308 	and.w	r3, r3, #8
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d102      	bne.n	800a0c4 <HAL_UART_IRQHandler+0x144>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d031      	beq.n	800a128 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f96a 	bl	800a39e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d023      	beq.n	800a120 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	695a      	ldr	r2, [r3, #20]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d013      	beq.n	800a118 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f4:	4a21      	ldr	r2, [pc, #132]	; (800a17c <HAL_UART_IRQHandler+0x1fc>)
 800a0f6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fb fdc9 	bl	8005c94 <HAL_DMA_Abort_IT>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d016      	beq.n	800a136 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a112:	4610      	mov	r0, r2
 800a114:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a116:	e00e      	b.n	800a136 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f84c 	bl	800a1b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a11e:	e00a      	b.n	800a136 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f848 	bl	800a1b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a126:	e006      	b.n	800a136 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f844 	bl	800a1b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a134:	e01d      	b.n	800a172 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a136:	bf00      	nop
    return;
 800a138:	e01b      	b.n	800a172 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <HAL_UART_IRQHandler+0x1d6>
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f956 	bl	800a400 <UART_Transmit_IT>
    return;
 800a154:	e00e      	b.n	800a174 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d009      	beq.n	800a174 <HAL_UART_IRQHandler+0x1f4>
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	d004      	beq.n	800a174 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f997 	bl	800a49e <UART_EndTransmit_IT>
    return;
 800a170:	e000      	b.n	800a174 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a172:	bf00      	nop
  }
}
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	0800a3d9 	.word	0x0800a3d9

0800a180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a192:	b480      	push	{r7}
 800a194:	b083      	sub	sp, #12
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a19a:	bf00      	nop
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr

0800a1b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1be:	bf00      	nop
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bc80      	pop	{r7}
 800a1c6:	4770      	bx	lr

0800a1c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d11e      	bne.n	800a222 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	695a      	ldr	r2, [r3, #20]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0201 	bic.w	r2, r2, #1
 800a208:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	695a      	ldr	r2, [r3, #20]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a218:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff ffb5 	bl	800a192 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a228:	bf00      	nop
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff ffb0 	bl	800a1a4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a244:	bf00      	nop
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a254:	2300      	movs	r3, #0
 800a256:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bf14      	ite	ne
 800a26c:	2301      	movne	r3, #1
 800a26e:	2300      	moveq	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2b21      	cmp	r3, #33	; 0x21
 800a27e:	d108      	bne.n	800a292 <UART_DMAError+0x46>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d005      	beq.n	800a292 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2200      	movs	r2, #0
 800a28a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a28c:	68b8      	ldr	r0, [r7, #8]
 800a28e:	f000 f871 	bl	800a374 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	bf14      	ite	ne
 800a2a0:	2301      	movne	r3, #1
 800a2a2:	2300      	moveq	r3, #0
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b22      	cmp	r3, #34	; 0x22
 800a2b2:	d108      	bne.n	800a2c6 <UART_DMAError+0x7a>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a2c0:	68b8      	ldr	r0, [r7, #8]
 800a2c2:	f000 f86c 	bl	800a39e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ca:	f043 0210 	orr.w	r2, r3, #16
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2d2:	68b8      	ldr	r0, [r7, #8]
 800a2d4:	f7ff ff6f 	bl	800a1b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2f0:	e02c      	b.n	800a34c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f8:	d028      	beq.n	800a34c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <UART_WaitOnFlagUntilTimeout+0x30>
 800a300:	f7fb fad2 	bl	80058a8 <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d21d      	bcs.n	800a34c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a31e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	695a      	ldr	r2, [r3, #20]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0201 	bic.w	r2, r2, #1
 800a32e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2220      	movs	r2, #32
 800a334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e00f      	b.n	800a36c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	4013      	ands	r3, r2
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	429a      	cmp	r2, r3
 800a35a:	bf0c      	ite	eq
 800a35c:	2301      	moveq	r3, #1
 800a35e:	2300      	movne	r3, #0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	461a      	mov	r2, r3
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	429a      	cmp	r2, r3
 800a368:	d0c3      	beq.n	800a2f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68da      	ldr	r2, [r3, #12]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a38a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2220      	movs	r2, #32
 800a390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	bc80      	pop	{r7}
 800a39c:	4770      	bx	lr

0800a39e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68da      	ldr	r2, [r3, #12]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	695a      	ldr	r2, [r3, #20]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0201 	bic.w	r2, r2, #1
 800a3c4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bc80      	pop	{r7}
 800a3d6:	4770      	bx	lr

0800a3d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7ff fedf 	bl	800a1b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3f8:	bf00      	nop
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b21      	cmp	r3, #33	; 0x21
 800a412:	d13e      	bne.n	800a492 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a41c:	d114      	bne.n	800a448 <UART_Transmit_IT+0x48>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d110      	bne.n	800a448 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	881b      	ldrh	r3, [r3, #0]
 800a430:	461a      	mov	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a43a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	1c9a      	adds	r2, r3, #2
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	621a      	str	r2, [r3, #32]
 800a446:	e008      	b.n	800a45a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	1c59      	adds	r1, r3, #1
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6211      	str	r1, [r2, #32]
 800a452:	781a      	ldrb	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a45e:	b29b      	uxth	r3, r3
 800a460:	3b01      	subs	r3, #1
 800a462:	b29b      	uxth	r3, r3
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	4619      	mov	r1, r3
 800a468:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10f      	bne.n	800a48e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68da      	ldr	r2, [r3, #12]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a47c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a48c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	e000      	b.n	800a494 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a492:	2302      	movs	r3, #2
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	bc80      	pop	{r7}
 800a49c:	4770      	bx	lr

0800a49e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff fe5e 	bl	800a180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b22      	cmp	r3, #34	; 0x22
 800a4e0:	d170      	bne.n	800a5c4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ea:	d117      	bne.n	800a51c <UART_Receive_IT+0x4e>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d113      	bne.n	800a51c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fc:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	b29b      	uxth	r3, r3
 800a506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a514:	1c9a      	adds	r2, r3, #2
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	629a      	str	r2, [r3, #40]	; 0x28
 800a51a:	e026      	b.n	800a56a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a52e:	d007      	beq.n	800a540 <UART_Receive_IT+0x72>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <UART_Receive_IT+0x80>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d106      	bne.n	800a54e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	b2da      	uxtb	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	701a      	strb	r2, [r3, #0]
 800a54c:	e008      	b.n	800a560 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a56e:	b29b      	uxth	r3, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	b29b      	uxth	r3, r3
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	4619      	mov	r1, r3
 800a578:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d120      	bne.n	800a5c0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f022 0220 	bic.w	r2, r2, #32
 800a58c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a59c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	695a      	ldr	r2, [r3, #20]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0201 	bic.w	r2, r2, #1
 800a5ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff fdeb 	bl	800a192 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e002      	b.n	800a5c6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e000      	b.n	800a5c6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800a5c4:	2302      	movs	r3, #2
  }
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68da      	ldr	r2, [r3, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a60a:	f023 030c 	bic.w	r3, r3, #12
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	68b9      	ldr	r1, [r7, #8]
 800a614:	430b      	orrs	r3, r1
 800a616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a2c      	ldr	r2, [pc, #176]	; (800a6e4 <UART_SetConfig+0x114>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d103      	bne.n	800a640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a638:	f7fd ff22 	bl	8008480 <HAL_RCC_GetPCLK2Freq>
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	e002      	b.n	800a646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a640:	f7fd ff0a 	bl	8008458 <HAL_RCC_GetPCLK1Freq>
 800a644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4613      	mov	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	009a      	lsls	r2, r3, #2
 800a650:	441a      	add	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65c:	4a22      	ldr	r2, [pc, #136]	; (800a6e8 <UART_SetConfig+0x118>)
 800a65e:	fba2 2303 	umull	r2, r3, r2, r3
 800a662:	095b      	lsrs	r3, r3, #5
 800a664:	0119      	lsls	r1, r3, #4
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009a      	lsls	r2, r3, #2
 800a670:	441a      	add	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	fbb2 f2f3 	udiv	r2, r2, r3
 800a67c:	4b1a      	ldr	r3, [pc, #104]	; (800a6e8 <UART_SetConfig+0x118>)
 800a67e:	fba3 0302 	umull	r0, r3, r3, r2
 800a682:	095b      	lsrs	r3, r3, #5
 800a684:	2064      	movs	r0, #100	; 0x64
 800a686:	fb00 f303 	mul.w	r3, r0, r3
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	011b      	lsls	r3, r3, #4
 800a68e:	3332      	adds	r3, #50	; 0x32
 800a690:	4a15      	ldr	r2, [pc, #84]	; (800a6e8 <UART_SetConfig+0x118>)
 800a692:	fba2 2303 	umull	r2, r3, r2, r3
 800a696:	095b      	lsrs	r3, r3, #5
 800a698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a69c:	4419      	add	r1, r3
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	009a      	lsls	r2, r3, #2
 800a6a8:	441a      	add	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6b4:	4b0c      	ldr	r3, [pc, #48]	; (800a6e8 <UART_SetConfig+0x118>)
 800a6b6:	fba3 0302 	umull	r0, r3, r3, r2
 800a6ba:	095b      	lsrs	r3, r3, #5
 800a6bc:	2064      	movs	r0, #100	; 0x64
 800a6be:	fb00 f303 	mul.w	r3, r0, r3
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	011b      	lsls	r3, r3, #4
 800a6c6:	3332      	adds	r3, #50	; 0x32
 800a6c8:	4a07      	ldr	r2, [pc, #28]	; (800a6e8 <UART_SetConfig+0x118>)
 800a6ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ce:	095b      	lsrs	r3, r3, #5
 800a6d0:	f003 020f 	and.w	r2, r3, #15
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	440a      	add	r2, r1
 800a6da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a6dc:	bf00      	nop
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	40013800 	.word	0x40013800
 800a6e8:	51eb851f 	.word	0x51eb851f
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"




Controller::Controller() {}
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af04      	add	r7, sp, #16
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a5f      	ldr	r2, [pc, #380]	; (800a878 <_ZN10ControllerC1Ev+0x188>)
 800a6fc:	635a      	str	r2, [r3, #52]	; 0x34
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a5e      	ldr	r2, [pc, #376]	; (800a87c <_ZN10ControllerC1Ev+0x18c>)
 800a702:	639a      	str	r2, [r3, #56]	; 0x38
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a70a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a710:	4618      	mov	r0, r3
 800a712:	f7f6 fac3 	bl	8000c9c <__aeabi_i2f>
 800a716:	4603      	mov	r3, r0
 800a718:	4619      	mov	r1, r3
 800a71a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a71e:	f7f6 fbc5 	bl	8000eac <__aeabi_fdiv>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	641a      	str	r2, [r3, #64]	; 0x40
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a54      	ldr	r2, [pc, #336]	; (800a880 <_ZN10ControllerC1Ev+0x190>)
 800a72e:	645a      	str	r2, [r3, #68]	; 0x44
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a54      	ldr	r2, [pc, #336]	; (800a884 <_ZN10ControllerC1Ev+0x194>)
 800a734:	649a      	str	r2, [r3, #72]	; 0x48
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a53      	ldr	r2, [pc, #332]	; (800a888 <_ZN10ControllerC1Ev+0x198>)
 800a73a:	64da      	str	r2, [r3, #76]	; 0x4c
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f04f 0200 	mov.w	r2, #0
 800a742:	651a      	str	r2, [r3, #80]	; 0x50
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a51      	ldr	r2, [pc, #324]	; (800a88c <_ZN10ControllerC1Ev+0x19c>)
 800a748:	655a      	str	r2, [r3, #84]	; 0x54
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a50      	ldr	r2, [pc, #320]	; (800a890 <_ZN10ControllerC1Ev+0x1a0>)
 800a74e:	659a      	str	r2, [r3, #88]	; 0x58
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a50      	ldr	r2, [pc, #320]	; (800a894 <_ZN10ControllerC1Ev+0x1a4>)
 800a754:	65da      	str	r2, [r3, #92]	; 0x5c
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	661a      	str	r2, [r3, #96]	; 0x60
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	665a      	str	r2, [r3, #100]	; 0x64
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	669a      	str	r2, [r3, #104]	; 0x68
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a49      	ldr	r2, [pc, #292]	; (800a898 <_ZN10ControllerC1Ev+0x1a8>)
 800a772:	66da      	str	r2, [r3, #108]	; 0x6c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a49      	ldr	r2, [pc, #292]	; (800a89c <_ZN10ControllerC1Ev+0x1ac>)
 800a778:	671a      	str	r2, [r3, #112]	; 0x70
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a48      	ldr	r2, [pc, #288]	; (800a8a0 <_ZN10ControllerC1Ev+0x1b0>)
 800a77e:	675a      	str	r2, [r3, #116]	; 0x74
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a48      	ldr	r2, [pc, #288]	; (800a8a4 <_ZN10ControllerC1Ev+0x1b4>)
 800a784:	679a      	str	r2, [r3, #120]	; 0x78
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a47      	ldr	r2, [pc, #284]	; (800a8a8 <_ZN10ControllerC1Ev+0x1b8>)
 800a78a:	67da      	str	r2, [r3, #124]	; 0x7c
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a47      	ldr	r2, [pc, #284]	; (800a8ac <_ZN10ControllerC1Ev+0x1bc>)
 800a790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a46      	ldr	r2, [pc, #280]	; (800a8b0 <_ZN10ControllerC1Ev+0x1c0>)
 800a798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a44      	ldr	r2, [pc, #272]	; (800a8b0 <_ZN10ControllerC1Ev+0x1c0>)
 800a7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800a7aa:	a32f      	add	r3, pc, #188	; (adr r3, 800a868 <_ZN10ControllerC1Ev+0x178>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7b4:	a32c      	add	r3, pc, #176	; (adr r3, 800a868 <_ZN10ControllerC1Ev+0x178>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	e9cd 2300 	strd	r2, r3, [sp]
 800a7be:	a32c      	add	r3, pc, #176	; (adr r3, 800a870 <_ZN10ControllerC1Ev+0x180>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	f002 f851 	bl	800c86c <_ZN3lpfC1Eddd>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800a7d0:	a325      	add	r3, pc, #148	; (adr r3, 800a868 <_ZN10ControllerC1Ev+0x178>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7da:	a323      	add	r3, pc, #140	; (adr r3, 800a868 <_ZN10ControllerC1Ev+0x178>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	e9cd 2300 	strd	r2, r3, [sp]
 800a7e4:	a322      	add	r3, pc, #136	; (adr r3, 800a870 <_ZN10ControllerC1Ev+0x180>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	f002 f83e 	bl	800c86c <_ZN3lpfC1Eddd>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 800a7f6:	a31c      	add	r3, pc, #112	; (adr r3, 800a868 <_ZN10ControllerC1Ev+0x178>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a800:	a319      	add	r3, pc, #100	; (adr r3, 800a868 <_ZN10ControllerC1Ev+0x178>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	e9cd 2300 	strd	r2, r3, [sp]
 800a80a:	a319      	add	r3, pc, #100	; (adr r3, 800a870 <_ZN10ControllerC1Ev+0x180>)
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	4608      	mov	r0, r1
 800a812:	f002 f82b 	bl	800c86c <_ZN3lpfC1Eddd>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a81c:	4618      	mov	r0, r3
 800a81e:	f001 fc6f 	bl	800c100 <_ZN3PIDC1Ev>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 fc69 	bl	800c100 <_ZN3PIDC1Ev>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800a834:	4618      	mov	r0, r3
 800a836:	f001 fc63 	bl	800c100 <_ZN3PIDC1Ev>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800a840:	4618      	mov	r0, r3
 800a842:	f001 fc5d 	bl	800c100 <_ZN3PIDC1Ev>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800a84c:	4618      	mov	r0, r3
 800a84e:	f001 fc57 	bl	800c100 <_ZN3PIDC1Ev>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 fc51 	bl	800c100 <_ZN3PIDC1Ev>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	fc3b4f61 	.word	0xfc3b4f61
 800a86c:	3fa35935 	.word	0x3fa35935
 800a870:	4f0d844d 	.word	0x4f0d844d
 800a874:	3fed94af 	.word	0x3fed94af
 800a878:	44c1c000 	.word	0x44c1c000
 800a87c:	42654ca3 	.word	0x42654ca3
 800a880:	3fb33333 	.word	0x3fb33333
 800a884:	411cf5c3 	.word	0x411cf5c3
 800a888:	41f9d70a 	.word	0x41f9d70a
 800a88c:	3ecccccd 	.word	0x3ecccccd
 800a890:	3da3d70a 	.word	0x3da3d70a
 800a894:	3cf5c28f 	.word	0x3cf5c28f
 800a898:	40a00000 	.word	0x40a00000
 800a89c:	41100000 	.word	0x41100000
 800a8a0:	40900000 	.word	0x40900000
 800a8a4:	40400000 	.word	0x40400000
 800a8a8:	41200000 	.word	0x41200000
 800a8ac:	41700000 	.word	0x41700000
 800a8b0:	bf800000 	.word	0xbf800000

0800a8b4 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	b092      	sub	sp, #72	; 0x48
 800a8ba:	af04      	add	r7, sp, #16
 800a8bc:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	609a      	str	r2, [r3, #8]
        


    int thr;

    switch(mod) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800a91e:	2b02      	cmp	r3, #2
 800a920:	f000 8146 	beq.w	800abb0 <_ZN10Controller3RunEv+0x2fc>
 800a924:	2b02      	cmp	r3, #2
 800a926:	f300 8168 	bgt.w	800abfa <_ZN10Controller3RunEv+0x346>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <_ZN10Controller3RunEv+0x80>
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d04f      	beq.n	800a9d2 <_ZN10Controller3RunEv+0x11e>
 800a932:	e162      	b.n	800abfa <_ZN10Controller3RunEv+0x346>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 800a940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a944:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800a948:	f001 ff1a 	bl	800c780 <_ZN3PID3SatEfii>
 800a94c:	4603      	mov	r3, r0
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f6 fbd4 	bl	80010fc <__aeabi_f2iz>
 800a954:	4603      	mov	r3, r0
 800a956:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 	 = state_des.angles[1];
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des = state_des.rates[2];
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a988:	4619      	mov	r1, r3
 800a98a:	4610      	mov	r0, r2
 800a98c:	f001 ff89 	bl	800c8a2 <_ZN3lpf3RunEf>
 800a990:	4602      	mov	r2, r0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f001 ff7b 	bl	800c8a2 <_ZN3lpf3RunEf>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f001 ff6d 	bl	800c8a2 <_ZN3lpf3RunEf>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    	    break;
 800a9d0:	e113      	b.n	800abfa <_ZN10Controller3RunEv+0x346>
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f503 7668 	add.w	r6, r3, #928	; 0x3a0
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 817c 	ldr.w	r8, [r3, #380]	; 0x17c
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 9180 	ldr.w	r9, [r3, #384]	; 0x180
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 a178 	ldr.w	sl, [r3, #376]	; 0x178
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7f6 fba4 	bl	8001148 <__aeabi_f2uiz>
 800aa00:	4603      	mov	r3, r0
 800aa02:	9302      	str	r3, [sp, #8]
 800aa04:	9501      	str	r5, [sp, #4]
 800aa06:	9400      	str	r4, [sp, #0]
 800aa08:	4653      	mov	r3, sl
 800aa0a:	464a      	mov	r2, r9
 800aa0c:	4641      	mov	r1, r8
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f001 fc0a 	bl	800c228 <_ZN3PID6PI_VelEfffffj>
 800aa14:	4604      	mov	r4, r0
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4610      	mov	r0, r2
 800aa22:	f7f6 f98f 	bl	8000d44 <__aeabi_fmul>
 800aa26:	4603      	mov	r3, r0
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7f6 f882 	bl	8000b34 <__addsf3>
 800aa30:	4603      	mov	r3, r0
 800aa32:	461a      	mov	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			float deg2rad = 0.0175;
 800aa3a:	4b5c      	ldr	r3, [pc, #368]	; (800abac <_ZN10Controller3RunEv+0x2f8>)
 800aa3c:	633b      	str	r3, [r7, #48]	; 0x30
			float roll_r = roll * deg2rad;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa46:	f7f6 f97d 	bl	8000d44 <__aeabi_fmul>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	62fb      	str	r3, [r7, #44]	; 0x2c
			float pitch_r = pitch * deg2rad;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa56:	f7f6 f975 	bl	8000d44 <__aeabi_fmul>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	62bb      	str	r3, [r7, #40]	; 0x28
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800aa5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa60:	f7f7 feca 	bl	80027f8 <_ZSt3cosf>
 800aa64:	4603      	mov	r3, r0
 800aa66:	4619      	mov	r1, r3
 800aa68:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aa6c:	f7f6 fa1e 	bl	8000eac <__aeabi_fdiv>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461c      	mov	r4, r3
 800aa74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa76:	f7f7 febf 	bl	80027f8 <_ZSt3cosf>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f7f6 fa14 	bl	8000eac <__aeabi_fdiv>
 800aa84:	4603      	mov	r3, r0
 800aa86:	627b      	str	r3, [r7, #36]	; 0x24

			F = F * b2e ; // Body to Earth
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800aa8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7f6 f957 	bl	8000d44 <__aeabi_fmul>
 800aa96:	4603      	mov	r3, r0
 800aa98:	461a      	mov	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			F = p_alt.Sat(F, F_max, F_min);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f6 fb23 	bl	80010fc <__aeabi_f2iz>
 800aab6:	4606      	mov	r6, r0
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7f6 fb1d 	bl	80010fc <__aeabi_f2iz>
 800aac2:	4603      	mov	r3, r0
 800aac4:	4632      	mov	r2, r6
 800aac6:	4629      	mov	r1, r5
 800aac8:	4620      	mov	r0, r4
 800aaca:	f001 fe59 	bl	800c780 <_ZN3PID3SatEfii>
 800aace:	4602      	mov	r2, r0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			thr = p_alt.F2thr(F);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f503 7268 	add.w	r2, r3, #928	; 0x3a0
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800aae2:	4619      	mov	r1, r3
 800aae4:	4610      	mov	r0, r2
 800aae6:	f001 fe7b 	bl	800c7e0 <_ZN3PID5F2thrEf>
 800aaea:	4603      	mov	r3, r0
 800aaec:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 800aaf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aaf6:	f7f6 f8d1 	bl	8000c9c <__aeabi_i2f>
 800aafa:	4601      	mov	r1, r0
 800aafc:	f240 434c 	movw	r3, #1100	; 0x44c
 800ab00:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800ab04:	4620      	mov	r0, r4
 800ab06:	f001 fe3b 	bl	800c780 <_ZN3PID3SatEfii>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7f6 faf5 	bl	80010fc <__aeabi_f2iz>
 800ab12:	4603      	mov	r3, r0
 800ab14:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800ab16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab18:	f7f6 f8c0 	bl	8000c9c <__aeabi_i2f>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
			z0 = p_alt.zi;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 243c 	ldr.w	r2, [r3, #1084]	; 0x43c
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

            roll_des     = state_des.angles[0];
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 	 = state_des.angles[1];
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des = state_des.rates[2];
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f001 fe9d 	bl	800c8a2 <_ZN3lpf3RunEf>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4610      	mov	r0, r2
 800ab80:	f001 fe8f 	bl	800c8a2 <_ZN3lpf3RunEf>
 800ab84:	4602      	mov	r2, r0
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	f001 fe81 	bl	800c8a2 <_ZN3lpf3RunEf>
 800aba0:	4602      	mov	r2, r0
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
			break;
 800aba8:	e027      	b.n	800abfa <_ZN10Controller3RunEv+0x346>
 800abaa:	bf00      	nop
 800abac:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);
    		pitch_des = p_velx.PI_Vel(0, x, vx, Kp_vel, Ki_vel, ch2);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f503 6689 	add.w	r6, r3, #1096	; 0x448
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 8190 	ldr.w	r8, [r3, #400]	; 0x190
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 9188 	ldr.w	r9, [r3, #392]	; 0x188
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7f6 fab7 	bl	8001148 <__aeabi_f2uiz>
 800abda:	4603      	mov	r3, r0
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	9501      	str	r5, [sp, #4]
 800abe0:	9400      	str	r4, [sp, #0]
 800abe2:	464b      	mov	r3, r9
 800abe4:	4642      	mov	r2, r8
 800abe6:	f04f 0100 	mov.w	r1, #0
 800abea:	4630      	mov	r0, r6
 800abec:	f001 fb1c 	bl	800c228 <_ZN3PID6PI_VelEfffffj>
 800abf0:	4602      	mov	r2, r0
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    		break;
 800abf8:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 119c 	ldr.w	r1, [r3, #412]	; 0x19c
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68da      	ldr	r2, [r3, #12]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4623      	mov	r3, r4
 800ac16:	f001 fac9 	bl	800c1ac <_ZN3PID7P_AngleEffff>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800ac22:	4619      	mov	r1, r3
 800ac24:	4610      	mov	r0, r2
 800ac26:	f7f5 ff85 	bl	8000b34 <__addsf3>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f503 7014 	add.w	r0, r3, #592	; 0x250
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	691a      	ldr	r2, [r3, #16]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	4623      	mov	r3, r4
 800ac50:	f001 faac 	bl	800c1ac <_ZN3PID7P_AngleEffff>
 800ac54:	4602      	mov	r2, r0
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	f7f5 ff68 	bl	8000b34 <__addsf3>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	f001 fb2f 	bl	800c2e0 <_ZN3PID6RateFFEf>
 800ac82:	6238      	str	r0, [r7, #32]
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f001 fb24 	bl	800c2e0 <_ZN3PID6RateFFEf>
 800ac98:	61f8      	str	r0, [r7, #28]

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle) + pd_roll_ff;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	699e      	ldr	r6, [r3, #24]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800acc0:	9003      	str	r0, [sp, #12]
 800acc2:	9102      	str	r1, [sp, #8]
 800acc4:	9201      	str	r2, [sp, #4]
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	4663      	mov	r3, ip
 800acca:	4632      	mov	r2, r6
 800accc:	4629      	mov	r1, r5
 800acce:	4620      	mov	r0, r4
 800acd0:	f001 fb56 	bl	800c380 <_ZN3PID9PID_Rate2Efffffff>
 800acd4:	4603      	mov	r3, r0
 800acd6:	6a39      	ldr	r1, [r7, #32]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f5 ff2b 	bl	8000b34 <__addsf3>
 800acde:	4603      	mov	r3, r0
 800ace0:	461a      	mov	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle) + pd_pitch_ff;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f503 7414 	add.w	r4, r3, #592	; 0x250
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 5128 	ldr.w	r5, [r3, #296]	; 0x128
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	69de      	ldr	r6, [r3, #28]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800ad0e:	9003      	str	r0, [sp, #12]
 800ad10:	9102      	str	r1, [sp, #8]
 800ad12:	9201      	str	r2, [sp, #4]
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	4663      	mov	r3, ip
 800ad18:	4632      	mov	r2, r6
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f001 fb2f 	bl	800c380 <_ZN3PID9PID_Rate2Efffffff>
 800ad22:	4603      	mov	r3, r0
 800ad24:	69f9      	ldr	r1, [r7, #28]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7f5 ff04 	bl	8000b34 <__addsf3>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a1a      	ldr	r2, [r3, #32]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4e:	f04f 0500 	mov.w	r5, #0
 800ad52:	9501      	str	r5, [sp, #4]
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	4623      	mov	r3, r4
 800ad58:	f001 fbb6 	bl	800c4c8 <_ZN3PID7PD_RateEfffff>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120



    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800ad64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad66:	f7f5 ff99 	bl	8000c9c <__aeabi_i2f>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ad72:	4619      	mov	r1, r3
 800ad74:	4610      	mov	r0, r2
 800ad76:	f7f5 fedd 	bl	8000b34 <__addsf3>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ad84:	4619      	mov	r1, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	f7f5 fed2 	bl	8000b30 <__aeabi_fsub>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	461a      	mov	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f7f5 fec9 	bl	8000b30 <__aeabi_fsub>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	4981      	ldr	r1, [pc, #516]	; (800afa8 <_ZN10Controller3RunEv+0x6f4>)
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f5 fec6 	bl	8000b34 <__addsf3>
 800ada8:	4603      	mov	r3, r0
 800adaa:	4980      	ldr	r1, [pc, #512]	; (800afac <_ZN10Controller3RunEv+0x6f8>)
 800adac:	4618      	mov	r0, r3
 800adae:	f7f5 fec1 	bl	8000b34 <__addsf3>
 800adb2:	4603      	mov	r3, r0
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7f6 f9a1 	bl	80010fc <__aeabi_f2iz>
 800adba:	4603      	mov	r3, r0
 800adbc:	61bb      	str	r3, [r7, #24]
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 800adbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800adc0:	f7f5 ff6c 	bl	8000c9c <__aeabi_i2f>
 800adc4:	4602      	mov	r2, r0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800adcc:	4619      	mov	r1, r3
 800adce:	4610      	mov	r0, r2
 800add0:	f7f5 feae 	bl	8000b30 <__aeabi_fsub>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f7f5 fea7 	bl	8000b34 <__addsf3>
 800ade6:	4603      	mov	r3, r0
 800ade8:	461a      	mov	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f7f5 fe9c 	bl	8000b30 <__aeabi_fsub>
 800adf8:	4603      	mov	r3, r0
 800adfa:	496b      	ldr	r1, [pc, #428]	; (800afa8 <_ZN10Controller3RunEv+0x6f4>)
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7f5 fe97 	bl	8000b30 <__aeabi_fsub>
 800ae02:	4603      	mov	r3, r0
 800ae04:	4969      	ldr	r1, [pc, #420]	; (800afac <_ZN10Controller3RunEv+0x6f8>)
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7f5 fe92 	bl	8000b30 <__aeabi_fsub>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f6 f974 	bl	80010fc <__aeabi_f2iz>
 800ae14:	4603      	mov	r3, r0
 800ae16:	617b      	str	r3, [r7, #20]
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800ae18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae1a:	f7f5 ff3f 	bl	8000c9c <__aeabi_i2f>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ae26:	4619      	mov	r1, r3
 800ae28:	4610      	mov	r0, r2
 800ae2a:	f7f5 fe83 	bl	8000b34 <__addsf3>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	461a      	mov	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7f5 fe7a 	bl	8000b34 <__addsf3>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	f7f5 fe71 	bl	8000b34 <__addsf3>
 800ae52:	4603      	mov	r3, r0
 800ae54:	4954      	ldr	r1, [pc, #336]	; (800afa8 <_ZN10Controller3RunEv+0x6f4>)
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f5 fe6c 	bl	8000b34 <__addsf3>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	4953      	ldr	r1, [pc, #332]	; (800afac <_ZN10Controller3RunEv+0x6f8>)
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7f5 fe65 	bl	8000b30 <__aeabi_fsub>
 800ae66:	4603      	mov	r3, r0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7f6 f947 	bl	80010fc <__aeabi_f2iz>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	613b      	str	r3, [r7, #16]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800ae72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae74:	f7f5 ff12 	bl	8000c9c <__aeabi_i2f>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	f7f5 fe54 	bl	8000b30 <__aeabi_fsub>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ae92:	4619      	mov	r1, r3
 800ae94:	4610      	mov	r0, r2
 800ae96:	f7f5 fe4b 	bl	8000b30 <__aeabi_fsub>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800aea4:	4619      	mov	r1, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	f7f5 fe44 	bl	8000b34 <__addsf3>
 800aeac:	4603      	mov	r3, r0
 800aeae:	493e      	ldr	r1, [pc, #248]	; (800afa8 <_ZN10Controller3RunEv+0x6f4>)
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f5 fe3d 	bl	8000b30 <__aeabi_fsub>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	493c      	ldr	r1, [pc, #240]	; (800afac <_ZN10Controller3RunEv+0x6f8>)
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f5 fe3a 	bl	8000b34 <__addsf3>
 800aec0:	4603      	mov	r3, r0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f6 f91a 	bl	80010fc <__aeabi_f2iz>
 800aec8:	4603      	mov	r3, r0
 800aeca:	60fb      	str	r3, [r7, #12]


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800aed2:	69b8      	ldr	r0, [r7, #24]
 800aed4:	f7f5 fee2 	bl	8000c9c <__aeabi_i2f>
 800aed8:	4601      	mov	r1, r0
 800aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	f240 434c 	movw	r3, #1100	; 0x44c
 800aee2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aee6:	4620      	mov	r0, r4
 800aee8:	f001 fc10 	bl	800c70c <_ZN3PID3SatEfiii>
 800aeec:	4603      	mov	r3, r0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f6 f904 	bl	80010fc <__aeabi_f2iz>
 800aef4:	4603      	mov	r3, r0
 800aef6:	61bb      	str	r3, [r7, #24]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800aefe:	6978      	ldr	r0, [r7, #20]
 800af00:	f7f5 fecc 	bl	8000c9c <__aeabi_i2f>
 800af04:	4601      	mov	r1, r0
 800af06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	f240 434c 	movw	r3, #1100	; 0x44c
 800af0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af12:	4620      	mov	r0, r4
 800af14:	f001 fbfa 	bl	800c70c <_ZN3PID3SatEfiii>
 800af18:	4603      	mov	r3, r0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7f6 f8ee 	bl	80010fc <__aeabi_f2iz>
 800af20:	4603      	mov	r3, r0
 800af22:	617b      	str	r3, [r7, #20]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800af2a:	6938      	ldr	r0, [r7, #16]
 800af2c:	f7f5 feb6 	bl	8000c9c <__aeabi_i2f>
 800af30:	4601      	mov	r1, r0
 800af32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	f240 434c 	movw	r3, #1100	; 0x44c
 800af3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 fbe4 	bl	800c70c <_ZN3PID3SatEfiii>
 800af44:	4603      	mov	r3, r0
 800af46:	4618      	mov	r0, r3
 800af48:	f7f6 f8d8 	bl	80010fc <__aeabi_f2iz>
 800af4c:	4603      	mov	r3, r0
 800af4e:	613b      	str	r3, [r7, #16]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7f5 fea0 	bl	8000c9c <__aeabi_i2f>
 800af5c:	4601      	mov	r1, r0
 800af5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	f240 434c 	movw	r3, #1100	; 0x44c
 800af66:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af6a:	4620      	mov	r0, r4
 800af6c:	f001 fbce 	bl	800c70c <_ZN3PID3SatEfiii>
 800af70:	4603      	mov	r3, r0
 800af72:	4618      	mov	r0, r3
 800af74:	f7f6 f8c2 	bl	80010fc <__aeabi_f2iz>
 800af78:	4603      	mov	r3, r0
 800af7a:	60fb      	str	r3, [r7, #12]
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    controller_output_pwm[1] = pwm2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    controller_output_pwm[2] = pwm3;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    controller_output_pwm[3] = pwm4;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  //  return controller_output;
}
 800af9c:	bf00      	nop
 800af9e:	3738      	adds	r7, #56	; 0x38
 800afa0:	46bd      	mov	sp, r7
 800afa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa6:	bf00      	nop
 800afa8:	41880000 	.word	0x41880000
 800afac:	40e00000 	.word	0x40e00000

0800afb0 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800afbe:	4618      	mov	r0, r3
 800afc0:	f001 fc46 	bl	800c850 <_ZN3PIDD1Ev>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800afca:	4618      	mov	r0, r3
 800afcc:	f001 fc40 	bl	800c850 <_ZN3PIDD1Ev>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f001 fc3a 	bl	800c850 <_ZN3PIDD1Ev>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 fc34 	bl	800c850 <_ZN3PIDD1Ev>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 fc2e 	bl	800c850 <_ZN3PIDD1Ev>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800affa:	4618      	mov	r0, r3
 800affc:	f001 fc28 	bl	800c850 <_ZN3PIDD1Ev>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	33e0      	adds	r3, #224	; 0xe0
 800b004:	4618      	mov	r0, r3
 800b006:	f001 fca2 	bl	800c94e <_ZN3lpfD1Ev>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	33b8      	adds	r3, #184	; 0xb8
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 fc9d 	bl	800c94e <_ZN3lpfD1Ev>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3390      	adds	r3, #144	; 0x90
 800b018:	4618      	mov	r0, r3
 800b01a:	f001 fc98 	bl	800c94e <_ZN3lpfD1Ev>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4618      	mov	r0, r3
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af04      	add	r7, sp, #16
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f04f 0200 	mov.w	r2, #0
 800b036:	619a      	str	r2, [r3, #24]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f04f 0200 	mov.w	r2, #0
 800b03e:	61da      	str	r2, [r3, #28]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f04f 0200 	mov.w	r2, #0
 800b046:	621a      	str	r2, [r3, #32]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a67      	ldr	r2, [pc, #412]	; (800b1e8 <_ZN15Kalman_FiltresiC1Ev+0x1c0>)
 800b04c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a66      	ldr	r2, [pc, #408]	; (800b1ec <_ZN15Kalman_FiltresiC1Ev+0x1c4>)
 800b052:	641a      	str	r2, [r3, #64]	; 0x40
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f04f 0200 	mov.w	r2, #0
 800b05a:	645a      	str	r2, [r3, #68]	; 0x44
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	649a      	str	r2, [r3, #72]	; 0x48
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f04f 0200 	mov.w	r2, #0
 800b06a:	64da      	str	r2, [r3, #76]	; 0x4c
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a60      	ldr	r2, [pc, #384]	; (800b1f0 <_ZN15Kalman_FiltresiC1Ev+0x1c8>)
 800b070:	669a      	str	r2, [r3, #104]	; 0x68
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	66da      	str	r2, [r3, #108]	; 0x6c
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f04f 0200 	mov.w	r2, #0
 800b080:	671a      	str	r2, [r3, #112]	; 0x70
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a5b      	ldr	r2, [pc, #364]	; (800b1f4 <_ZN15Kalman_FiltresiC1Ev+0x1cc>)
 800b086:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a5a      	ldr	r2, [pc, #360]	; (800b1f8 <_ZN15Kalman_FiltresiC1Ev+0x1d0>)
 800b08e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a59      	ldr	r2, [pc, #356]	; (800b1fc <_ZN15Kalman_FiltresiC1Ev+0x1d4>)
 800b096:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a58      	ldr	r2, [pc, #352]	; (800b200 <_ZN15Kalman_FiltresiC1Ev+0x1d8>)
 800b09e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b0a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a55      	ldr	r2, [pc, #340]	; (800b204 <_ZN15Kalman_FiltresiC1Ev+0x1dc>)
 800b0b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a54      	ldr	r2, [pc, #336]	; (800b208 <_ZN15Kalman_FiltresiC1Ev+0x1e0>)
 800b0b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b0c2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a50      	ldr	r2, [pc, #320]	; (800b20c <_ZN15Kalman_FiltresiC1Ev+0x1e4>)
 800b0ca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b0d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f5 fddc 	bl	8000c9c <__aeabi_i2f>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b0ec:	f7f5 fede 	bl	8000eac <__aeabi_fdiv>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7f5 f998 	bl	8000428 <__aeabi_f2d>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a42      	ldr	r2, [pc, #264]	; (800b210 <_ZN15Kalman_FiltresiC1Ev+0x1e8>)
 800b106:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a41      	ldr	r2, [pc, #260]	; (800b214 <_ZN15Kalman_FiltresiC1Ev+0x1ec>)
 800b10e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b118:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800b122:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a3b      	ldr	r2, [pc, #236]	; (800b218 <_ZN15Kalman_FiltresiC1Ev+0x1f0>)
 800b12a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b134:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a38      	ldr	r2, [pc, #224]	; (800b21c <_ZN15Kalman_FiltresiC1Ev+0x1f4>)
 800b13c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a36      	ldr	r2, [pc, #216]	; (800b21c <_ZN15Kalman_FiltresiC1Ev+0x1f4>)
 800b144:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a34      	ldr	r2, [pc, #208]	; (800b21c <_ZN15Kalman_FiltresiC1Ev+0x1f4>)
 800b14c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a33      	ldr	r2, [pc, #204]	; (800b220 <_ZN15Kalman_FiltresiC1Ev+0x1f8>)
 800b154:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b15e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a2f      	ldr	r2, [pc, #188]	; (800b224 <_ZN15Kalman_FiltresiC1Ev+0x1fc>)
 800b166:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a2e      	ldr	r2, [pc, #184]	; (800b228 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 800b16e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f503 710e 	add.w	r1, r3, #568	; 0x238
 800b178:	a313      	add	r3, pc, #76	; (adr r3, 800b1c8 <_ZN15Kalman_FiltresiC1Ev+0x1a0>)
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b182:	a311      	add	r3, pc, #68	; (adr r3, 800b1c8 <_ZN15Kalman_FiltresiC1Ev+0x1a0>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	e9cd 2300 	strd	r2, r3, [sp]
 800b18c:	a310      	add	r3, pc, #64	; (adr r3, 800b1d0 <_ZN15Kalman_FiltresiC1Ev+0x1a8>)
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	4608      	mov	r0, r1
 800b194:	f001 fb6a 	bl	800c86c <_ZN3lpfC1Eddd>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f503 7118 	add.w	r1, r3, #608	; 0x260
 800b19e:	a30e      	add	r3, pc, #56	; (adr r3, 800b1d8 <_ZN15Kalman_FiltresiC1Ev+0x1b0>)
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1a8:	a30b      	add	r3, pc, #44	; (adr r3, 800b1d8 <_ZN15Kalman_FiltresiC1Ev+0x1b0>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	e9cd 2300 	strd	r2, r3, [sp]
 800b1b2:	a30b      	add	r3, pc, #44	; (adr r3, 800b1e0 <_ZN15Kalman_FiltresiC1Ev+0x1b8>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	f001 fb57 	bl	800c86c <_ZN3lpfC1Eddd>

}
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	de7ea5f8 	.word	0xde7ea5f8
 800b1cc:	3fb2a454 	.word	0x3fb2a454
 800b1d0:	ab367a10 	.word	0xab367a10
 800b1d4:	3feb573e 	.word	0x3feb573e
 800b1d8:	fc3b4f61 	.word	0xfc3b4f61
 800b1dc:	3fa35935 	.word	0x3fa35935
 800b1e0:	4f0d844d 	.word	0x4f0d844d
 800b1e4:	3fed94af 	.word	0x3fed94af
 800b1e8:	358637bd 	.word	0x358637bd
 800b1ec:	3d8f5c29 	.word	0x3d8f5c29
 800b1f0:	47c35000 	.word	0x47c35000
 800b1f4:	461c4000 	.word	0x461c4000
 800b1f8:	4e6e6b28 	.word	0x4e6e6b28
 800b1fc:	41200000 	.word	0x41200000
 800b200:	4b189680 	.word	0x4b189680
 800b204:	40a00000 	.word	0x40a00000
 800b208:	42480000 	.word	0x42480000
 800b20c:	42654ca3 	.word	0x42654ca3
 800b210:	3727c5ac 	.word	0x3727c5ac
 800b214:	47435000 	.word	0x47435000
 800b218:	3cdd2f1b 	.word	0x3cdd2f1b
 800b21c:	3a83126f 	.word	0x3a83126f
 800b220:	40400000 	.word	0x40400000
 800b224:	c03f433f 	.word	0xc03f433f
 800b228:	4034b6a2 	.word	0x4034b6a2

0800b22c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:
	PredictPos();
	UpdatePos();

}

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800b22c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b230:	b09e      	sub	sp, #120	; 0x78
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	460b      	mov	r3, r1
 800b238:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float accY = acc[1];
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800b248:	63bb      	str	r3, [r7, #56]	; 0x38
	  float accZ = acc[2];
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800b250:	637b      	str	r3, [r7, #52]	; 0x34

	  float gyroX = gyro[0];
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b258:	633b      	str	r3, [r7, #48]	; 0x30
	  float gyroY = gyro[1];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b260:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float gyroZ = gyro[2];
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b268:	62bb      	str	r3, [r7, #40]	; 0x28

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800b26a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b26c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b26e:	f7f5 fd69 	bl	8000d44 <__aeabi_fmul>
 800b272:	4603      	mov	r3, r0
 800b274:	461c      	mov	r4, r3
 800b276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b27a:	f7f5 fd63 	bl	8000d44 <__aeabi_fmul>
 800b27e:	4603      	mov	r3, r0
 800b280:	4619      	mov	r1, r3
 800b282:	4620      	mov	r0, r4
 800b284:	f7f5 fc56 	bl	8000b34 <__addsf3>
 800b288:	4603      	mov	r3, r0
 800b28a:	461c      	mov	r4, r3
 800b28c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b28e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b290:	f7f5 fd58 	bl	8000d44 <__aeabi_fmul>
 800b294:	4603      	mov	r3, r0
 800b296:	4619      	mov	r1, r3
 800b298:	4620      	mov	r0, r4
 800b29a:	f7f5 fc4b 	bl	8000b34 <__addsf3>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7f7 fc97 	bl	8002bd4 <_ZSt4sqrtf>
 800b2a6:	6278      	str	r0, [r7, #36]	; 0x24

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800b2a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2ac:	f7f5 fdfe 	bl	8000eac <__aeabi_fdiv>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7f7 fc68 	bl	8002b88 <_ZSt4asinf>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f7f5 fd3e 	bl	8000d44 <__aeabi_fmul>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	f7f5 fc2d 	bl	8000b34 <__addsf3>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	461a      	mov	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800b2e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2e8:	f7f5 fde0 	bl	8000eac <__aeabi_fdiv>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7f7 fc4a 	bl	8002b88 <_ZSt4asinf>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4610      	mov	r0, r2
 800b300:	f7f5 fd20 	bl	8000d44 <__aeabi_fmul>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800b30e:	4619      	mov	r1, r3
 800b310:	4610      	mov	r0, r2
 800b312:	f7f5 fc0f 	bl	8000b34 <__addsf3>
 800b316:	4603      	mov	r3, r0
 800b318:	461a      	mov	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;
    //ANGLE PREDICTION
	switch(euler_angle) {
 800b320:	78fb      	ldrb	r3, [r7, #3]
 800b322:	2b02      	cmp	r3, #2
 800b324:	d07e      	beq.n	800b424 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f8>
 800b326:	2b02      	cmp	r3, #2
 800b328:	f300 80be 	bgt.w	800b4a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x10a>
 800b330:	2b01      	cmp	r3, #1
 800b332:	d038      	beq.n	800b3a6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x17a>
 800b334:	e0b8      	b.n	800b4a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
		case ROLL:
			angle_ekf = roll_ekf;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b33c:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = roll_rate;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = roll_bias;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b34a:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = roll_acc;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b352:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroX;
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-6;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a2f      	ldr	r2, [pc, #188]	; (800b418 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1ec>)
 800b35c:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e4;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a2e      	ldr	r2, [pc, #184]	; (800b41c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f0>)
 800b362:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			Qg = 1e1;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a2d      	ldr	r2, [pc, #180]	; (800b420 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f4>)
 800b36a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			S11_angle = S11_roll;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b372:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_roll;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b378:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_roll;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37e:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_roll;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b384:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_roll;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b38a:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_roll;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b390:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_roll;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b396:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_roll;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b39c:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_roll;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a2:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800b3a4:	e080      	b.n	800b4a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>

		case PITCH:
			angle_ekf = pitch_ekf;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800b3ac:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = pitch_rate;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = pitch_bias;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b3ba:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = pitch_acc;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b3c2:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroY;
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-6;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a13      	ldr	r2, [pc, #76]	; (800b418 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1ec>)
 800b3cc:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e4;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a12      	ldr	r2, [pc, #72]	; (800b41c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f0>)
 800b3d2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			Qg = 1e1;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a11      	ldr	r2, [pc, #68]	; (800b420 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f4>)
 800b3da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			S11_angle = S11_pitch;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_pitch;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_pitch;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ee:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_pitch;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_pitch;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_pitch;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_pitch;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b406:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_pitch;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40c:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_pitch;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b412:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800b414:	e048      	b.n	800b4a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800b416:	bf00      	nop
 800b418:	358637bd 	.word	0x358637bd
 800b41c:	47435000 	.word	0x47435000
 800b420:	41200000 	.word	0x41200000

		case YAW:
			angle_ekf = yaw_ekf;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b42a:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = yaw_rate;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = yaw_bias;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800b438:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = yaw_acc;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b440:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroZ;
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 5e2;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a14      	ldr	r2, [pc, #80]	; (800b49c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x270>)
 800b44a:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e8;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a14      	ldr	r2, [pc, #80]	; (800b4a0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800b450:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			Qg = 1e1;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a13      	ldr	r2, [pc, #76]	; (800b4a4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800b458:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			S11_angle = S11_yaw;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b460:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_yaw;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b466:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_yaw;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b46c:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_yaw;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b472:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_yaw;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b478:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_yaw;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b47e:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_yaw;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b486:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_yaw;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b48e:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_yaw;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b496:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800b498:	bf00      	nop
 800b49a:	e005      	b.n	800b4a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800b49c:	43fa0000 	.word	0x43fa0000
 800b4a0:	4dee6b28 	.word	0x4dee6b28
 800b4a4:	41200000 	.word	0x41200000

	}

    angle_ekf = (angle_ekf) + st*(angle_rate);
 800b4a8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b4aa:	f7f4 ffbd 	bl	8000428 <__aeabi_f2d>
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4689      	mov	r9, r1
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 800b4b8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b4ba:	f7f4 ffb5 	bl	8000428 <__aeabi_f2d>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	f7f5 f807 	bl	80004d8 <__aeabi_dmul>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	f7f4 fe4b 	bl	800016c <__adddf3>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4610      	mov	r0, r2
 800b4dc:	4619      	mov	r1, r3
 800b4de:	f7f5 fad3 	bl	8000a88 <__aeabi_d2f>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	677b      	str	r3, [r7, #116]	; 0x74

    S11_angle = S11_angle + sa + S31_angle*st + (st*st*(S13_angle + S33_angle*st))/st;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7f5 fb21 	bl	8000b34 <__addsf3>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7f4 ff97 	bl	8000428 <__aeabi_f2d>
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b500:	f7f4 ff92 	bl	8000428 <__aeabi_f2d>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b50a:	f7f4 ffe5 	bl	80004d8 <__aeabi_dmul>
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	4620      	mov	r0, r4
 800b514:	4629      	mov	r1, r5
 800b516:	f7f4 fe29 	bl	800016c <__adddf3>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	4690      	mov	r8, r2
 800b520:	4699      	mov	r9, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b52e:	f7f4 ffd3 	bl	80004d8 <__aeabi_dmul>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	4692      	mov	sl, r2
 800b538:	469b      	mov	fp, r3
 800b53a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b53c:	f7f4 ff74 	bl	8000428 <__aeabi_f2d>
 800b540:	4604      	mov	r4, r0
 800b542:	460d      	mov	r5, r1
 800b544:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b546:	f7f4 ff6f 	bl	8000428 <__aeabi_f2d>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b550:	f7f4 ffc2 	bl	80004d8 <__aeabi_dmul>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4620      	mov	r0, r4
 800b55a:	4629      	mov	r1, r5
 800b55c:	f7f4 fe06 	bl	800016c <__adddf3>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4650      	mov	r0, sl
 800b566:	4659      	mov	r1, fp
 800b568:	f7f4 ffb6 	bl	80004d8 <__aeabi_dmul>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4610      	mov	r0, r2
 800b572:	4619      	mov	r1, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b57a:	f7f5 f8d7 	bl	800072c <__aeabi_ddiv>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	f7f4 fdf1 	bl	800016c <__adddf3>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4610      	mov	r0, r2
 800b590:	4619      	mov	r1, r3
 800b592:	f7f5 fa79 	bl	8000a88 <__aeabi_d2f>
 800b596:	4603      	mov	r3, r0
 800b598:	663b      	str	r3, [r7, #96]	; 0x60
    S12_angle = S12_angle + S32_angle*st;
 800b59a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b59c:	f7f4 ff44 	bl	8000428 <__aeabi_f2d>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b5a6:	f7f4 ff3f 	bl	8000428 <__aeabi_f2d>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b5b0:	f7f4 ff92 	bl	80004d8 <__aeabi_dmul>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	f7f4 fdd6 	bl	800016c <__adddf3>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	f7f5 fa5e 	bl	8000a88 <__aeabi_d2f>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    S13_angle = S13_angle + S33_angle*st;
 800b5d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b5d2:	f7f4 ff29 	bl	8000428 <__aeabi_f2d>
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	460d      	mov	r5, r1
 800b5da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b5dc:	f7f4 ff24 	bl	8000428 <__aeabi_f2d>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b5e6:	f7f4 ff77 	bl	80004d8 <__aeabi_dmul>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	f7f4 fdbb 	bl	800016c <__adddf3>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	f7f5 fa43 	bl	8000a88 <__aeabi_d2f>
 800b602:	4603      	mov	r3, r0
 800b604:	65bb      	str	r3, [r7, #88]	; 0x58

    S21_angle = S21_angle + S23_angle*(st);
 800b606:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b608:	f7f4 ff0e 	bl	8000428 <__aeabi_f2d>
 800b60c:	4604      	mov	r4, r0
 800b60e:	460d      	mov	r5, r1
 800b610:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b612:	f7f4 ff09 	bl	8000428 <__aeabi_f2d>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b61c:	f7f4 ff5c 	bl	80004d8 <__aeabi_dmul>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4620      	mov	r0, r4
 800b626:	4629      	mov	r1, r5
 800b628:	f7f4 fda0 	bl	800016c <__adddf3>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4610      	mov	r0, r2
 800b632:	4619      	mov	r1, r3
 800b634:	f7f5 fa28 	bl	8000a88 <__aeabi_d2f>
 800b638:	4603      	mov	r3, r0
 800b63a:	657b      	str	r3, [r7, #84]	; 0x54
    S22_angle = S22_angle + sb;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b642:	4619      	mov	r1, r3
 800b644:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b646:	f7f5 fa75 	bl	8000b34 <__addsf3>
 800b64a:	4603      	mov	r3, r0
 800b64c:	653b      	str	r3, [r7, #80]	; 0x50
    //S23_angle = S23_angle;

    S31_angle = S31_angle + S33_angle*(st);
 800b64e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b650:	f7f4 feea 	bl	8000428 <__aeabi_f2d>
 800b654:	4604      	mov	r4, r0
 800b656:	460d      	mov	r5, r1
 800b658:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b65a:	f7f4 fee5 	bl	8000428 <__aeabi_f2d>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800b664:	f7f4 ff38 	bl	80004d8 <__aeabi_dmul>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4620      	mov	r0, r4
 800b66e:	4629      	mov	r1, r5
 800b670:	f7f4 fd7c 	bl	800016c <__adddf3>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4610      	mov	r0, r2
 800b67a:	4619      	mov	r1, r3
 800b67c:	f7f5 fa04 	bl	8000a88 <__aeabi_d2f>
 800b680:	4603      	mov	r3, r0
 800b682:	64bb      	str	r3, [r7, #72]	; 0x48
    //S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b688:	4619      	mov	r1, r3
 800b68a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b68c:	f7f5 fa52 	bl	8000b34 <__addsf3>
 800b690:	4603      	mov	r3, r0
 800b692:	643b      	str	r3, [r7, #64]	; 0x40

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	f7f5 fb4e 	bl	8000d44 <__aeabi_fmul>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	461c      	mov	r4, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b6b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7f5 fb45 	bl	8000d44 <__aeabi_fmul>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7f5 fa38 	bl	8000b34 <__addsf3>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	461c      	mov	r4, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b6ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7f5 fb37 	bl	8000d44 <__aeabi_fmul>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7f5 fa2a 	bl	8000b34 <__addsf3>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	461c      	mov	r4, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b6ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7f5 fb29 	bl	8000d44 <__aeabi_fmul>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7f5 fa1c 	bl	8000b34 <__addsf3>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	461c      	mov	r4, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f5 fb1b 	bl	8000d44 <__aeabi_fmul>
 800b70e:	4603      	mov	r3, r0
 800b710:	4619      	mov	r1, r3
 800b712:	4620      	mov	r0, r4
 800b714:	f7f5 fa0e 	bl	8000b34 <__addsf3>
 800b718:	4603      	mov	r3, r0
 800b71a:	461c      	mov	r4, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b722:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b724:	4618      	mov	r0, r3
 800b726:	f7f5 fb0d 	bl	8000d44 <__aeabi_fmul>
 800b72a:	4603      	mov	r3, r0
 800b72c:	4619      	mov	r1, r3
 800b72e:	4620      	mov	r0, r4
 800b730:	f7f5 fa00 	bl	8000b34 <__addsf3>
 800b734:	4603      	mov	r3, r0
 800b736:	461c      	mov	r4, r3
 800b738:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b73a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b73c:	f7f5 fb02 	bl	8000d44 <__aeabi_fmul>
 800b740:	4603      	mov	r3, r0
 800b742:	4619      	mov	r1, r3
 800b744:	4620      	mov	r0, r4
 800b746:	f7f5 f9f5 	bl	8000b34 <__addsf3>
 800b74a:	4603      	mov	r3, r0
 800b74c:	461c      	mov	r4, r3
 800b74e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b750:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b752:	f7f5 faf7 	bl	8000d44 <__aeabi_fmul>
 800b756:	4603      	mov	r3, r0
 800b758:	4619      	mov	r1, r3
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7f5 f9e8 	bl	8000b30 <__aeabi_fsub>
 800b760:	4603      	mov	r3, r0
 800b762:	461c      	mov	r4, r3
 800b764:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b766:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b768:	f7f5 faec 	bl	8000d44 <__aeabi_fmul>
 800b76c:	4603      	mov	r3, r0
 800b76e:	4619      	mov	r1, r3
 800b770:	4620      	mov	r0, r4
 800b772:	f7f5 f9df 	bl	8000b34 <__addsf3>
 800b776:	4603      	mov	r3, r0
 800b778:	461c      	mov	r4, r3
 800b77a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b77c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b77e:	f7f5 fae1 	bl	8000d44 <__aeabi_fmul>
 800b782:	4603      	mov	r3, r0
 800b784:	4619      	mov	r1, r3
 800b786:	4620      	mov	r0, r4
 800b788:	f7f5 f9d2 	bl	8000b30 <__aeabi_fsub>
 800b78c:	4603      	mov	r3, r0
 800b78e:	461c      	mov	r4, r3
 800b790:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b792:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b794:	f7f5 fad6 	bl	8000d44 <__aeabi_fmul>
 800b798:	4603      	mov	r3, r0
 800b79a:	4619      	mov	r1, r3
 800b79c:	4620      	mov	r0, r4
 800b79e:	f7f5 f9c9 	bl	8000b34 <__addsf3>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	461c      	mov	r4, r3
 800b7a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b7a8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b7aa:	f7f5 facb 	bl	8000d44 <__aeabi_fmul>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f7f5 f9bc 	bl	8000b30 <__aeabi_fsub>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	461c      	mov	r4, r3
 800b7bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7be:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b7c0:	f7f5 fac0 	bl	8000d44 <__aeabi_fmul>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7f5 f9b3 	bl	8000b34 <__addsf3>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	461c      	mov	r4, r3
 800b7d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b7d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b7d6:	f7f5 fab5 	bl	8000d44 <__aeabi_fmul>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7f5 f9a6 	bl	8000b30 <__aeabi_fsub>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	623b      	str	r3, [r7, #32]
    float Kt11_att = 1 - (Qa*(Qg + S22_angle + S23_angle + S32_angle + S33_angle))/A;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b7f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7f5 f99c 	bl	8000b34 <__addsf3>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b800:	4618      	mov	r0, r3
 800b802:	f7f5 f997 	bl	8000b34 <__addsf3>
 800b806:	4603      	mov	r3, r0
 800b808:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7f5 f992 	bl	8000b34 <__addsf3>
 800b810:	4603      	mov	r3, r0
 800b812:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b814:	4618      	mov	r0, r3
 800b816:	f7f5 f98d 	bl	8000b34 <__addsf3>
 800b81a:	4603      	mov	r3, r0
 800b81c:	4619      	mov	r1, r3
 800b81e:	4620      	mov	r0, r4
 800b820:	f7f5 fa90 	bl	8000d44 <__aeabi_fmul>
 800b824:	4603      	mov	r3, r0
 800b826:	6a39      	ldr	r1, [r7, #32]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7f5 fb3f 	bl	8000eac <__aeabi_fdiv>
 800b82e:	4603      	mov	r3, r0
 800b830:	4619      	mov	r1, r3
 800b832:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b836:	f7f5 f97b 	bl	8000b30 <__aeabi_fsub>
 800b83a:	4603      	mov	r3, r0
 800b83c:	61fb      	str	r3, [r7, #28]
    float Kt12_att = (Qa*(S12_angle + S13_angle))/A;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800b844:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b846:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b848:	f7f5 f974 	bl	8000b34 <__addsf3>
 800b84c:	4603      	mov	r3, r0
 800b84e:	4619      	mov	r1, r3
 800b850:	4620      	mov	r0, r4
 800b852:	f7f5 fa77 	bl	8000d44 <__aeabi_fmul>
 800b856:	4603      	mov	r3, r0
 800b858:	6a39      	ldr	r1, [r7, #32]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7f5 fb26 	bl	8000eac <__aeabi_fdiv>
 800b860:	4603      	mov	r3, r0
 800b862:	61bb      	str	r3, [r7, #24]
    float Kt21_att = (Qg*S21_angle + S21_angle*S32_angle - S22_angle*S31_angle + S21_angle*S33_angle - S23_angle*S31_angle)/A;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b86a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7f5 fa69 	bl	8000d44 <__aeabi_fmul>
 800b872:	4603      	mov	r3, r0
 800b874:	461c      	mov	r4, r3
 800b876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b878:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b87a:	f7f5 fa63 	bl	8000d44 <__aeabi_fmul>
 800b87e:	4603      	mov	r3, r0
 800b880:	4619      	mov	r1, r3
 800b882:	4620      	mov	r0, r4
 800b884:	f7f5 f956 	bl	8000b34 <__addsf3>
 800b888:	4603      	mov	r3, r0
 800b88a:	461c      	mov	r4, r3
 800b88c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b88e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b890:	f7f5 fa58 	bl	8000d44 <__aeabi_fmul>
 800b894:	4603      	mov	r3, r0
 800b896:	4619      	mov	r1, r3
 800b898:	4620      	mov	r0, r4
 800b89a:	f7f5 f949 	bl	8000b30 <__aeabi_fsub>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	461c      	mov	r4, r3
 800b8a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b8a6:	f7f5 fa4d 	bl	8000d44 <__aeabi_fmul>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7f5 f940 	bl	8000b34 <__addsf3>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	461c      	mov	r4, r3
 800b8b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b8ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8bc:	f7f5 fa42 	bl	8000d44 <__aeabi_fmul>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f7f5 f933 	bl	8000b30 <__aeabi_fsub>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	6a39      	ldr	r1, [r7, #32]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7f5 faec 	bl	8000eac <__aeabi_fdiv>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	617b      	str	r3, [r7, #20]
    float Kt22_att = (Qa*S22_angle + Qa*S23_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle)/A;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b8de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f5 fa2f 	bl	8000d44 <__aeabi_fmul>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	461c      	mov	r4, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b8f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f5 fa26 	bl	8000d44 <__aeabi_fmul>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f7f5 f919 	bl	8000b34 <__addsf3>
 800b902:	4603      	mov	r3, r0
 800b904:	461c      	mov	r4, r3
 800b906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b908:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b90a:	f7f5 fa1b 	bl	8000d44 <__aeabi_fmul>
 800b90e:	4603      	mov	r3, r0
 800b910:	4619      	mov	r1, r3
 800b912:	4620      	mov	r0, r4
 800b914:	f7f5 f90e 	bl	8000b34 <__addsf3>
 800b918:	4603      	mov	r3, r0
 800b91a:	461c      	mov	r4, r3
 800b91c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b91e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b920:	f7f5 fa10 	bl	8000d44 <__aeabi_fmul>
 800b924:	4603      	mov	r3, r0
 800b926:	4619      	mov	r1, r3
 800b928:	4620      	mov	r0, r4
 800b92a:	f7f5 f901 	bl	8000b30 <__aeabi_fsub>
 800b92e:	4603      	mov	r3, r0
 800b930:	461c      	mov	r4, r3
 800b932:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b934:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b936:	f7f5 fa05 	bl	8000d44 <__aeabi_fmul>
 800b93a:	4603      	mov	r3, r0
 800b93c:	4619      	mov	r1, r3
 800b93e:	4620      	mov	r0, r4
 800b940:	f7f5 f8f8 	bl	8000b34 <__addsf3>
 800b944:	4603      	mov	r3, r0
 800b946:	461c      	mov	r4, r3
 800b948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b94a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b94c:	f7f5 f9fa 	bl	8000d44 <__aeabi_fmul>
 800b950:	4603      	mov	r3, r0
 800b952:	4619      	mov	r1, r3
 800b954:	4620      	mov	r0, r4
 800b956:	f7f5 f8eb 	bl	8000b30 <__aeabi_fsub>
 800b95a:	4603      	mov	r3, r0
 800b95c:	6a39      	ldr	r1, [r7, #32]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7f5 faa4 	bl	8000eac <__aeabi_fdiv>
 800b964:	4603      	mov	r3, r0
 800b966:	613b      	str	r3, [r7, #16]
    float Kt31_att = (Qg*S31_angle - S21_angle*S32_angle + S22_angle*S31_angle - S21_angle*S33_angle + S23_angle*S31_angle)/A;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b96e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b970:	4618      	mov	r0, r3
 800b972:	f7f5 f9e7 	bl	8000d44 <__aeabi_fmul>
 800b976:	4603      	mov	r3, r0
 800b978:	461c      	mov	r4, r3
 800b97a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b97c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b97e:	f7f5 f9e1 	bl	8000d44 <__aeabi_fmul>
 800b982:	4603      	mov	r3, r0
 800b984:	4619      	mov	r1, r3
 800b986:	4620      	mov	r0, r4
 800b988:	f7f5 f8d2 	bl	8000b30 <__aeabi_fsub>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461c      	mov	r4, r3
 800b990:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b992:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b994:	f7f5 f9d6 	bl	8000d44 <__aeabi_fmul>
 800b998:	4603      	mov	r3, r0
 800b99a:	4619      	mov	r1, r3
 800b99c:	4620      	mov	r0, r4
 800b99e:	f7f5 f8c9 	bl	8000b34 <__addsf3>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	461c      	mov	r4, r3
 800b9a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9aa:	f7f5 f9cb 	bl	8000d44 <__aeabi_fmul>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7f5 f8bc 	bl	8000b30 <__aeabi_fsub>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461c      	mov	r4, r3
 800b9bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b9be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b9c0:	f7f5 f9c0 	bl	8000d44 <__aeabi_fmul>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7f5 f8b3 	bl	8000b34 <__addsf3>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	6a39      	ldr	r1, [r7, #32]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7f5 fa6a 	bl	8000eac <__aeabi_fdiv>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	60fb      	str	r3, [r7, #12]
    float Kt32_att = (Qa*S32_angle + Qa*S33_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle)/A;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b9e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7f5 f9ad 	bl	8000d44 <__aeabi_fmul>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	461c      	mov	r4, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b9f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f5 f9a4 	bl	8000d44 <__aeabi_fmul>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4620      	mov	r0, r4
 800ba02:	f7f5 f897 	bl	8000b34 <__addsf3>
 800ba06:	4603      	mov	r3, r0
 800ba08:	461c      	mov	r4, r3
 800ba0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba0c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ba0e:	f7f5 f999 	bl	8000d44 <__aeabi_fmul>
 800ba12:	4603      	mov	r3, r0
 800ba14:	4619      	mov	r1, r3
 800ba16:	4620      	mov	r0, r4
 800ba18:	f7f5 f88c 	bl	8000b34 <__addsf3>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	461c      	mov	r4, r3
 800ba20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba22:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ba24:	f7f5 f98e 	bl	8000d44 <__aeabi_fmul>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7f5 f87f 	bl	8000b30 <__aeabi_fsub>
 800ba32:	4603      	mov	r3, r0
 800ba34:	461c      	mov	r4, r3
 800ba36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba38:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ba3a:	f7f5 f983 	bl	8000d44 <__aeabi_fmul>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4619      	mov	r1, r3
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7f5 f876 	bl	8000b34 <__addsf3>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461c      	mov	r4, r3
 800ba4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba4e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ba50:	f7f5 f978 	bl	8000d44 <__aeabi_fmul>
 800ba54:	4603      	mov	r3, r0
 800ba56:	4619      	mov	r1, r3
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f7f5 f869 	bl	8000b30 <__aeabi_fsub>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	6a39      	ldr	r1, [r7, #32]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f5 fa22 	bl	8000eac <__aeabi_fdiv>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	60bb      	str	r3, [r7, #8]

    angle_ekf = (angle_ekf) + Kt11_att*((angle_acc) - (angle_ekf)) - Kt12_att*((angle_bias) - (gyro) + (angle_rate));
 800ba6c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ba6e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ba70:	f7f5 f85e 	bl	8000b30 <__aeabi_fsub>
 800ba74:	4603      	mov	r3, r0
 800ba76:	69f9      	ldr	r1, [r7, #28]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f5 f963 	bl	8000d44 <__aeabi_fmul>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f5 f856 	bl	8000b34 <__addsf3>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	461c      	mov	r4, r3
 800ba8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ba8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ba90:	f7f5 f84e 	bl	8000b30 <__aeabi_fsub>
 800ba94:	4603      	mov	r3, r0
 800ba96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7f5 f84b 	bl	8000b34 <__addsf3>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f5 f94e 	bl	8000d44 <__aeabi_fmul>
 800baa8:	4603      	mov	r3, r0
 800baaa:	4619      	mov	r1, r3
 800baac:	4620      	mov	r0, r4
 800baae:	f7f5 f83f 	bl	8000b30 <__aeabi_fsub>
 800bab2:	4603      	mov	r3, r0
 800bab4:	677b      	str	r3, [r7, #116]	; 0x74


    angle_bias = (angle_bias) + Kt21_att*((angle_acc) - (angle_ekf)) - Kt22_att*((angle_bias) - (gyro) + (angle_rate));
 800bab6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bab8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800baba:	f7f5 f839 	bl	8000b30 <__aeabi_fsub>
 800babe:	4603      	mov	r3, r0
 800bac0:	6979      	ldr	r1, [r7, #20]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7f5 f93e 	bl	8000d44 <__aeabi_fmul>
 800bac8:	4603      	mov	r3, r0
 800baca:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f5 f831 	bl	8000b34 <__addsf3>
 800bad2:	4603      	mov	r3, r0
 800bad4:	461c      	mov	r4, r3
 800bad6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bad8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bada:	f7f5 f829 	bl	8000b30 <__aeabi_fsub>
 800bade:	4603      	mov	r3, r0
 800bae0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f5 f826 	bl	8000b34 <__addsf3>
 800bae8:	4603      	mov	r3, r0
 800baea:	6939      	ldr	r1, [r7, #16]
 800baec:	4618      	mov	r0, r3
 800baee:	f7f5 f929 	bl	8000d44 <__aeabi_fmul>
 800baf2:	4603      	mov	r3, r0
 800baf4:	4619      	mov	r1, r3
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7f5 f81a 	bl	8000b30 <__aeabi_fsub>
 800bafc:	4603      	mov	r3, r0
 800bafe:	66fb      	str	r3, [r7, #108]	; 0x6c


    angle_rate = (angle_rate) + Kt31_att*((angle_acc) - (angle_ekf)) - Kt32_att*((angle_bias) - (gyro) + (angle_rate));
 800bb00:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bb02:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800bb04:	f7f5 f814 	bl	8000b30 <__aeabi_fsub>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	68f9      	ldr	r1, [r7, #12]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7f5 f919 	bl	8000d44 <__aeabi_fmul>
 800bb12:	4603      	mov	r3, r0
 800bb14:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7f5 f80c 	bl	8000b34 <__addsf3>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461c      	mov	r4, r3
 800bb20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bb22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bb24:	f7f5 f804 	bl	8000b30 <__aeabi_fsub>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f5 f801 	bl	8000b34 <__addsf3>
 800bb32:	4603      	mov	r3, r0
 800bb34:	68b9      	ldr	r1, [r7, #8]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7f5 f904 	bl	8000d44 <__aeabi_fmul>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4620      	mov	r0, r4
 800bb42:	f7f4 fff5 	bl	8000b30 <__aeabi_fsub>
 800bb46:	4603      	mov	r3, r0
 800bb48:	673b      	str	r3, [r7, #112]	; 0x70


    S11_angle = - S11_angle*(Kt11_att - 1) - Kt12_att*S21_angle - Kt12_att*S31_angle;
 800bb4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb4c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bb50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb54:	69f8      	ldr	r0, [r7, #28]
 800bb56:	f7f4 ffeb 	bl	8000b30 <__aeabi_fsub>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7f5 f8f0 	bl	8000d44 <__aeabi_fmul>
 800bb64:	4603      	mov	r3, r0
 800bb66:	461c      	mov	r4, r3
 800bb68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb6a:	69b8      	ldr	r0, [r7, #24]
 800bb6c:	f7f5 f8ea 	bl	8000d44 <__aeabi_fmul>
 800bb70:	4603      	mov	r3, r0
 800bb72:	4619      	mov	r1, r3
 800bb74:	4620      	mov	r0, r4
 800bb76:	f7f4 ffdb 	bl	8000b30 <__aeabi_fsub>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	461c      	mov	r4, r3
 800bb7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bb80:	69b8      	ldr	r0, [r7, #24]
 800bb82:	f7f5 f8df 	bl	8000d44 <__aeabi_fmul>
 800bb86:	4603      	mov	r3, r0
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7f4 ffd0 	bl	8000b30 <__aeabi_fsub>
 800bb90:	4603      	mov	r3, r0
 800bb92:	663b      	str	r3, [r7, #96]	; 0x60


    S12_angle = - S12_angle*(Kt11_att - 1) - Kt12_att*S22_angle - Kt12_att*S32_angle;
 800bb94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb96:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bb9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb9e:	69f8      	ldr	r0, [r7, #28]
 800bba0:	f7f4 ffc6 	bl	8000b30 <__aeabi_fsub>
 800bba4:	4603      	mov	r3, r0
 800bba6:	4619      	mov	r1, r3
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7f5 f8cb 	bl	8000d44 <__aeabi_fmul>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	461c      	mov	r4, r3
 800bbb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bbb4:	69b8      	ldr	r0, [r7, #24]
 800bbb6:	f7f5 f8c5 	bl	8000d44 <__aeabi_fmul>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f7f4 ffb6 	bl	8000b30 <__aeabi_fsub>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461c      	mov	r4, r3
 800bbc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbca:	69b8      	ldr	r0, [r7, #24]
 800bbcc:	f7f5 f8ba 	bl	8000d44 <__aeabi_fmul>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f7f4 ffab 	bl	8000b30 <__aeabi_fsub>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	65fb      	str	r3, [r7, #92]	; 0x5c


    S13_angle = - S13_angle*(Kt11_att - 1) - Kt12_att*S23_angle - Kt12_att*S33_angle;
 800bbde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbe0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bbe4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbe8:	69f8      	ldr	r0, [r7, #28]
 800bbea:	f7f4 ffa1 	bl	8000b30 <__aeabi_fsub>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7f5 f8a6 	bl	8000d44 <__aeabi_fmul>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461c      	mov	r4, r3
 800bbfc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bbfe:	69b8      	ldr	r0, [r7, #24]
 800bc00:	f7f5 f8a0 	bl	8000d44 <__aeabi_fmul>
 800bc04:	4603      	mov	r3, r0
 800bc06:	4619      	mov	r1, r3
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f7f4 ff91 	bl	8000b30 <__aeabi_fsub>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	461c      	mov	r4, r3
 800bc12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc14:	69b8      	ldr	r0, [r7, #24]
 800bc16:	f7f5 f895 	bl	8000d44 <__aeabi_fmul>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7f4 ff86 	bl	8000b30 <__aeabi_fsub>
 800bc24:	4603      	mov	r3, r0
 800bc26:	65bb      	str	r3, [r7, #88]	; 0x58


    S21_angle = - S21_angle*(Kt22_att - 1) - Kt21_att*S11_angle - Kt22_att*S31_angle;
 800bc28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc2a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bc2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc32:	6938      	ldr	r0, [r7, #16]
 800bc34:	f7f4 ff7c 	bl	8000b30 <__aeabi_fsub>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f7f5 f881 	bl	8000d44 <__aeabi_fmul>
 800bc42:	4603      	mov	r3, r0
 800bc44:	461c      	mov	r4, r3
 800bc46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bc48:	6978      	ldr	r0, [r7, #20]
 800bc4a:	f7f5 f87b 	bl	8000d44 <__aeabi_fmul>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	4619      	mov	r1, r3
 800bc52:	4620      	mov	r0, r4
 800bc54:	f7f4 ff6c 	bl	8000b30 <__aeabi_fsub>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	461c      	mov	r4, r3
 800bc5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bc5e:	6938      	ldr	r0, [r7, #16]
 800bc60:	f7f5 f870 	bl	8000d44 <__aeabi_fmul>
 800bc64:	4603      	mov	r3, r0
 800bc66:	4619      	mov	r1, r3
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7f4 ff61 	bl	8000b30 <__aeabi_fsub>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	657b      	str	r3, [r7, #84]	; 0x54


    S22_angle = - S22_angle*(Kt22_att - 1) - Kt21_att*S12_angle - Kt22_att*S32_angle;
 800bc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc74:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bc78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc7c:	6938      	ldr	r0, [r7, #16]
 800bc7e:	f7f4 ff57 	bl	8000b30 <__aeabi_fsub>
 800bc82:	4603      	mov	r3, r0
 800bc84:	4619      	mov	r1, r3
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7f5 f85c 	bl	8000d44 <__aeabi_fmul>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	461c      	mov	r4, r3
 800bc90:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bc92:	6978      	ldr	r0, [r7, #20]
 800bc94:	f7f5 f856 	bl	8000d44 <__aeabi_fmul>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f7f4 ff47 	bl	8000b30 <__aeabi_fsub>
 800bca2:	4603      	mov	r3, r0
 800bca4:	461c      	mov	r4, r3
 800bca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bca8:	6938      	ldr	r0, [r7, #16]
 800bcaa:	f7f5 f84b 	bl	8000d44 <__aeabi_fmul>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f7f4 ff3c 	bl	8000b30 <__aeabi_fsub>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	653b      	str	r3, [r7, #80]	; 0x50


    S23_angle = - S23_angle*(Kt22_att - 1) - Kt21_att*S13_angle - Kt22_att*S33_angle;
 800bcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcbe:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bcc2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bcc6:	6938      	ldr	r0, [r7, #16]
 800bcc8:	f7f4 ff32 	bl	8000b30 <__aeabi_fsub>
 800bccc:	4603      	mov	r3, r0
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f7f5 f837 	bl	8000d44 <__aeabi_fmul>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	461c      	mov	r4, r3
 800bcda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcdc:	6978      	ldr	r0, [r7, #20]
 800bcde:	f7f5 f831 	bl	8000d44 <__aeabi_fmul>
 800bce2:	4603      	mov	r3, r0
 800bce4:	4619      	mov	r1, r3
 800bce6:	4620      	mov	r0, r4
 800bce8:	f7f4 ff22 	bl	8000b30 <__aeabi_fsub>
 800bcec:	4603      	mov	r3, r0
 800bcee:	461c      	mov	r4, r3
 800bcf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcf2:	6938      	ldr	r0, [r7, #16]
 800bcf4:	f7f5 f826 	bl	8000d44 <__aeabi_fmul>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f7f4 ff17 	bl	8000b30 <__aeabi_fsub>
 800bd02:	4603      	mov	r3, r0
 800bd04:	64fb      	str	r3, [r7, #76]	; 0x4c


    S31_angle = - S31_angle*(Kt32_att - 1) - Kt31_att*S11_angle - Kt32_att*S21_angle;
 800bd06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd08:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bd0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd10:	68b8      	ldr	r0, [r7, #8]
 800bd12:	f7f4 ff0d 	bl	8000b30 <__aeabi_fsub>
 800bd16:	4603      	mov	r3, r0
 800bd18:	4619      	mov	r1, r3
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f7f5 f812 	bl	8000d44 <__aeabi_fmul>
 800bd20:	4603      	mov	r3, r0
 800bd22:	461c      	mov	r4, r3
 800bd24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7f5 f80c 	bl	8000d44 <__aeabi_fmul>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7f4 fefd 	bl	8000b30 <__aeabi_fsub>
 800bd36:	4603      	mov	r3, r0
 800bd38:	461c      	mov	r4, r3
 800bd3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd3c:	68b8      	ldr	r0, [r7, #8]
 800bd3e:	f7f5 f801 	bl	8000d44 <__aeabi_fmul>
 800bd42:	4603      	mov	r3, r0
 800bd44:	4619      	mov	r1, r3
 800bd46:	4620      	mov	r0, r4
 800bd48:	f7f4 fef2 	bl	8000b30 <__aeabi_fsub>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	64bb      	str	r3, [r7, #72]	; 0x48


    S32_angle = - S32_angle*(Kt32_att - 1) - Kt31_att*S12_angle - Kt32_att*S22_angle;
 800bd50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd52:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bd56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd5a:	68b8      	ldr	r0, [r7, #8]
 800bd5c:	f7f4 fee8 	bl	8000b30 <__aeabi_fsub>
 800bd60:	4603      	mov	r3, r0
 800bd62:	4619      	mov	r1, r3
 800bd64:	4620      	mov	r0, r4
 800bd66:	f7f4 ffed 	bl	8000d44 <__aeabi_fmul>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	461c      	mov	r4, r3
 800bd6e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f7f4 ffe7 	bl	8000d44 <__aeabi_fmul>
 800bd76:	4603      	mov	r3, r0
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7f4 fed8 	bl	8000b30 <__aeabi_fsub>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461c      	mov	r4, r3
 800bd84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd86:	68b8      	ldr	r0, [r7, #8]
 800bd88:	f7f4 ffdc 	bl	8000d44 <__aeabi_fmul>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7f4 fecd 	bl	8000b30 <__aeabi_fsub>
 800bd96:	4603      	mov	r3, r0
 800bd98:	647b      	str	r3, [r7, #68]	; 0x44


    S33_angle = - S33_angle*(Kt32_att - 1) - Kt31_att*S13_angle - Kt32_att*S23_angle;
 800bd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd9c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bda0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bda4:	68b8      	ldr	r0, [r7, #8]
 800bda6:	f7f4 fec3 	bl	8000b30 <__aeabi_fsub>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	4619      	mov	r1, r3
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f7f4 ffc8 	bl	8000d44 <__aeabi_fmul>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f7f4 ffc2 	bl	8000d44 <__aeabi_fmul>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f7f4 feb3 	bl	8000b30 <__aeabi_fsub>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	461c      	mov	r4, r3
 800bdce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bdd0:	68b8      	ldr	r0, [r7, #8]
 800bdd2:	f7f4 ffb7 	bl	8000d44 <__aeabi_fmul>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4620      	mov	r0, r4
 800bddc:	f7f4 fea8 	bl	8000b30 <__aeabi_fsub>
 800bde0:	4603      	mov	r3, r0
 800bde2:	643b      	str	r3, [r7, #64]	; 0x40

    switch(euler_angle) {
 800bde4:	78fb      	ldrb	r3, [r7, #3]
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d05d      	beq.n	800bea6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc7a>
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	f300 8089 	bgt.w	800bf02 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xbce>
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d02b      	beq.n	800be50 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc24>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 800bdf8:	e083      	b.n	800bf02 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 roll_ekf = angle_ekf ;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bdfe:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    			 roll_rate = angle_rate;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be06:	60da      	str	r2, [r3, #12]
    			 roll_bias = angle_bias;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be0c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    			 roll_acc = angle_acc ;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be14:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    			 S11_roll = S11_angle;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be1c:	645a      	str	r2, [r3, #68]	; 0x44
    			 S12_roll = S12_angle;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be22:	649a      	str	r2, [r3, #72]	; 0x48
    			 S13_roll = S13_angle;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be28:	655a      	str	r2, [r3, #84]	; 0x54
    			 S21_roll = S21_angle;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be2e:	64da      	str	r2, [r3, #76]	; 0x4c
    			 S22_roll = S22_angle;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be34:	651a      	str	r2, [r3, #80]	; 0x50
    			 S23_roll = S23_angle;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be3a:	659a      	str	r2, [r3, #88]	; 0x58
    			 S31_roll = S31_angle;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be40:	65da      	str	r2, [r3, #92]	; 0x5c
    			 S32_roll = S32_angle;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be46:	661a      	str	r2, [r3, #96]	; 0x60
    			 S33_roll = S33_angle;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be4c:	665a      	str	r2, [r3, #100]	; 0x64
    			break;
 800be4e:	e058      	b.n	800bf02 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 pitch_ekf = angle_ekf ;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800be54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    			 pitch_rate = angle_rate;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be5c:	611a      	str	r2, [r3, #16]
    			 pitch_bias = angle_bias;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be62:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    			 pitch_acc = angle_acc ;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    			 S11_pitch = S11_angle;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be72:	619a      	str	r2, [r3, #24]
    			 S12_pitch = S12_angle;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be78:	61da      	str	r2, [r3, #28]
    			 S13_pitch = S13_angle;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be7e:	629a      	str	r2, [r3, #40]	; 0x28
    			 S21_pitch = S21_angle;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be84:	621a      	str	r2, [r3, #32]
    			 S22_pitch = S22_angle;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be8a:	625a      	str	r2, [r3, #36]	; 0x24
    			 S23_pitch = S23_angle;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be90:	62da      	str	r2, [r3, #44]	; 0x2c
    			 S31_pitch = S31_angle;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be96:	631a      	str	r2, [r3, #48]	; 0x30
    			 S32_pitch = S32_angle;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be9c:	635a      	str	r2, [r3, #52]	; 0x34
    			 S33_pitch = S33_angle;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38
    			break;
 800bea4:	e02d      	b.n	800bf02 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 yaw_ekf = angle_ekf ;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800beaa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    			 yaw_rate = angle_rate;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800beb2:	615a      	str	r2, [r3, #20]
    			 yaw_bias = angle_bias;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800beb8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    			 yaw_acc = angle_acc ;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bec0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    			 S11_yaw = S11_angle;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bec8:	669a      	str	r2, [r3, #104]	; 0x68
    			 S12_yaw = S12_angle;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bece:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S13_yaw = S13_angle;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bed4:	679a      	str	r2, [r3, #120]	; 0x78
    			 S21_yaw = S21_angle;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800beda:	671a      	str	r2, [r3, #112]	; 0x70
    			 S22_yaw = S22_angle;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bee0:	675a      	str	r2, [r3, #116]	; 0x74
    			 S23_yaw = S23_angle;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bee6:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S31_yaw = S31_angle;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			 S32_yaw = S32_angle;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S33_yaw = S33_angle;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800befc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			break;
 800bf00:	bf00      	nop
}
 800bf02:	bf00      	nop
 800bf04:	3778      	adds	r7, #120	; 0x78
 800bf06:	46bd      	mov	sp, r7
 800bf08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bf0c <_ZN15Kalman_Filtresi3RunEv>:
	float DCM21 = -DCM12;

	xbody = DCM11*xned + DCM21*yned;
	ybody = DCM12*xned + DCM22*yned;
}
void Kalman_Filtresi::Run() {
 800bf0c:	b590      	push	{r4, r7, lr}
 800bf0e:	b08b      	sub	sp, #44	; 0x2c
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]



  float accX = acc[0];
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800bf1a:	623b      	str	r3, [r7, #32]
  float accY = acc[1];
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800bf22:	61fb      	str	r3, [r7, #28]
  float accZ = acc[2];
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800bf2a:	61bb      	str	r3, [r7, #24]




    if(gyro_ready) {
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00c      	beq.n	800bf50 <_ZN15Kalman_Filtresi3RunEv+0x44>


    EKF_Attitude(ROLL);
 800bf36:	2100      	movs	r1, #0
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff f977 	bl	800b22c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 800bf3e:	2101      	movs	r1, #1
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff f973 	bl	800b22c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 800bf46:	2102      	movs	r1, #2
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff f96f 	bl	800b22c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
 800bf4e:	e084      	b.n	800c05a <_ZN15Kalman_Filtresi3RunEv+0x14e>
    }


    else {

    	for(int i=0; i<2000; i++) {
 800bf50:	2300      	movs	r3, #0
 800bf52:	627b      	str	r3, [r7, #36]	; 0x24
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bf5a:	da5e      	bge.n	800c01a <_ZN15Kalman_Filtresi3RunEv+0x10e>
    		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800bf5c:	6a39      	ldr	r1, [r7, #32]
 800bf5e:	6a38      	ldr	r0, [r7, #32]
 800bf60:	f7f4 fef0 	bl	8000d44 <__aeabi_fmul>
 800bf64:	4603      	mov	r3, r0
 800bf66:	461c      	mov	r4, r3
 800bf68:	69f9      	ldr	r1, [r7, #28]
 800bf6a:	69f8      	ldr	r0, [r7, #28]
 800bf6c:	f7f4 feea 	bl	8000d44 <__aeabi_fmul>
 800bf70:	4603      	mov	r3, r0
 800bf72:	4619      	mov	r1, r3
 800bf74:	4620      	mov	r0, r4
 800bf76:	f7f4 fddd 	bl	8000b34 <__addsf3>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	461c      	mov	r4, r3
 800bf7e:	69b9      	ldr	r1, [r7, #24]
 800bf80:	69b8      	ldr	r0, [r7, #24]
 800bf82:	f7f4 fedf 	bl	8000d44 <__aeabi_fmul>
 800bf86:	4603      	mov	r3, r0
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f7f4 fdd2 	bl	8000b34 <__addsf3>
 800bf90:	4603      	mov	r3, r0
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7f6 fe1e 	bl	8002bd4 <_ZSt4sqrtf>
 800bf98:	6178      	str	r0, [r7, #20]

    		  float pitch_acc =  asin(accX/acctop)*rad2deg;
 800bf9a:	6979      	ldr	r1, [r7, #20]
 800bf9c:	6a38      	ldr	r0, [r7, #32]
 800bf9e:	f7f4 ff85 	bl	8000eac <__aeabi_fdiv>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7f6 fdef 	bl	8002b88 <_ZSt4asinf>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	f7f4 fec5 	bl	8000d44 <__aeabi_fmul>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	613b      	str	r3, [r7, #16]
    		  float roll_acc  =  asin(accY/acctop)*rad2deg ;
 800bfbe:	6979      	ldr	r1, [r7, #20]
 800bfc0:	69f8      	ldr	r0, [r7, #28]
 800bfc2:	f7f4 ff73 	bl	8000eac <__aeabi_fdiv>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7f6 fddd 	bl	8002b88 <_ZSt4asinf>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4610      	mov	r0, r2
 800bfda:	f7f4 feb3 	bl	8000d44 <__aeabi_fmul>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	60fb      	str	r3, [r7, #12]

        	ROLL_OFFSET += roll_acc;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800bfe8:	68f9      	ldr	r1, [r7, #12]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f4 fda2 	bl	8000b34 <__addsf3>
 800bff0:	4603      	mov	r3, r0
 800bff2:	461a      	mov	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
        	PITCH_OFFSET += pitch_acc;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c000:	6939      	ldr	r1, [r7, #16]
 800c002:	4618      	mov	r0, r3
 800c004:	f7f4 fd96 	bl	8000b34 <__addsf3>
 800c008:	4603      	mov	r3, r0
 800c00a:	461a      	mov	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
    	for(int i=0; i<2000; i++) {
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	3301      	adds	r3, #1
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
 800c018:	e79c      	b.n	800bf54 <_ZN15Kalman_Filtresi3RunEv+0x48>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c020:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c024:	4929      	ldr	r1, [pc, #164]	; (800c0cc <_ZN15Kalman_Filtresi3RunEv+0x1c0>)
 800c026:	4618      	mov	r0, r3
 800c028:	f7f4 ff40 	bl	8000eac <__aeabi_fdiv>
 800c02c:	4603      	mov	r3, r0
 800c02e:	461a      	mov	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c03c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c040:	4922      	ldr	r1, [pc, #136]	; (800c0cc <_ZN15Kalman_Filtresi3RunEv+0x1c0>)
 800c042:	4618      	mov	r0, r3
 800c044:	f7f4 ff32 	bl	8000eac <__aeabi_fdiv>
 800c048:	4603      	mov	r3, r0
 800c04a:	461a      	mov	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
    	gyro_ready = true;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    state.angles[1] = pitch_ekf;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    state.angles[2] = -1*yaw_ekf;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800c078:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    state.rates[0] = roll_rate;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	68da      	ldr	r2, [r3, #12]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    state.rates[1] = pitch_rate;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691a      	ldr	r2, [r3, #16]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    state.rates[2] = yaw_rate;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	695a      	ldr	r2, [r3, #20]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    state.bias[0] = roll_bias;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    state.bias[1] = pitch_bias;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    state.bias[2] = yaw_bias;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

}
 800c0c4:	bf00      	nop
 800c0c6:	372c      	adds	r7, #44	; 0x2c
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd90      	pop	{r4, r7, pc}
 800c0cc:	44fa0000 	.word	0x44fa0000

0800c0d0 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 fc35 	bl	800c94e <_ZN3lpfD1Ev>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 fc2f 	bl	800c94e <_ZN3lpfD1Ev>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	0000      	movs	r0, r0
 800c0fc:	0000      	movs	r0, r0
	...

0800c100 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af04      	add	r7, sp, #16
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a25      	ldr	r2, [pc, #148]	; (800c1a0 <_ZN3PIDC1Ev+0xa0>)
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a24      	ldr	r2, [pc, #144]	; (800c1a4 <_ZN3PIDC1Ev+0xa4>)
 800c112:	605a      	str	r2, [r3, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c11a:	609a      	str	r2, [r3, #8]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	4618      	mov	r0, r3
 800c122:	f7f4 fdbb 	bl	8000c9c <__aeabi_i2f>
 800c126:	4603      	mov	r3, r0
 800c128:	4619      	mov	r1, r3
 800c12a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c12e:	f7f4 febd 	bl	8000eac <__aeabi_fdiv>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	60da      	str	r2, [r3, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a1a      	ldr	r2, [pc, #104]	; (800c1a8 <_ZN3PIDC1Ev+0xa8>)
 800c13e:	611a      	str	r2, [r3, #16]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	691a      	ldr	r2, [r3, #16]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	4619      	mov	r1, r3
 800c14a:	4610      	mov	r0, r2
 800c14c:	f7f4 fdfa 	bl	8000d44 <__aeabi_fmul>
 800c150:	4603      	mov	r3, r0
 800c152:	461a      	mov	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	615a      	str	r2, [r3, #20]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c15e:	a30c      	add	r3, pc, #48	; (adr r3, 800c190 <_ZN3PIDC1Ev+0x90>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c168:	a309      	add	r3, pc, #36	; (adr r3, 800c190 <_ZN3PIDC1Ev+0x90>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	e9cd 2300 	strd	r2, r3, [sp]
 800c172:	a309      	add	r3, pc, #36	; (adr r3, 800c198 <_ZN3PIDC1Ev+0x98>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	4608      	mov	r0, r1
 800c17a:	f000 fb77 	bl	800c86c <_ZN3lpfC1Eddd>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c184:	659a      	str	r2, [r3, #88]	; 0x58
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	de7ea5f8 	.word	0xde7ea5f8
 800c194:	3fb2a454 	.word	0x3fb2a454
 800c198:	ab367a10 	.word	0xab367a10
 800c19c:	3feb573e 	.word	0x3feb573e
 800c1a0:	42f00000 	.word	0x42f00000
 800c1a4:	c2f00000 	.word	0xc2f00000
 800c1a8:	3e99999a 	.word	0x3e99999a

0800c1ac <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 800c1ac:	b590      	push	{r4, r7, lr}
 800c1ae:	b087      	sub	sp, #28
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	68b8      	ldr	r0, [r7, #8]
 800c1be:	f7f4 fcb7 	bl	8000b30 <__aeabi_fsub>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ie_roll += e_angle*st;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	4610      	mov	r0, r2
 800c1de:	f7f4 fdb1 	bl	8000d44 <__aeabi_fmul>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7f4 fca4 	bl	8000b34 <__addsf3>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	66da      	str	r2, [r3, #108]	; 0x6c
	P = Kp_angle*e_angle;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6838      	ldr	r0, [r7, #0]
 800c1fe:	f7f4 fda1 	bl	8000d44 <__aeabi_fmul>
 800c202:	4603      	mov	r3, r0
 800c204:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c20a:	4619      	mov	r1, r3
 800c20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c20e:	f7f4 fd99 	bl	8000d44 <__aeabi_fmul>
 800c212:	4603      	mov	r3, r0
 800c214:	613b      	str	r3, [r7, #16]
    return P+I;
 800c216:	6939      	ldr	r1, [r7, #16]
 800c218:	6978      	ldr	r0, [r7, #20]
 800c21a:	f7f4 fc8b 	bl	8000b34 <__addsf3>
 800c21e:	4603      	mov	r3, r0

}
 800c220:	4618      	mov	r0, r3
 800c222:	371c      	adds	r7, #28
 800c224:	46bd      	mov	sp, r7
 800c226:	bd90      	pop	{r4, r7, pc}

0800c228 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08a      	sub	sp, #40	; 0x28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d90e      	bls.n	800c25e <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	4618      	mov	r0, r3
 800c248:	f7f4 fc74 	bl	8000b34 <__addsf3>
 800c24c:	4603      	mov	r3, r0
 800c24e:	461a      	mov	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = vz_def;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	627b      	str	r3, [r7, #36]	; 0x24
 800c25c:	e01c      	b.n	800c298 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800c25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c260:	f240 5213 	movw	r2, #1299	; 0x513
 800c264:	4293      	cmp	r3, r2
 800c266:	d810      	bhi.n	800c28a <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	4619      	mov	r1, r3
 800c26e:	68b8      	ldr	r0, [r7, #8]
 800c270:	f7f4 fc5e 	bl	8000b30 <__aeabi_fsub>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = -1 * vz_def;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c286:	627b      	str	r3, [r7, #36]	; 0x24
 800c288:	e006      	b.n	800c298 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = 0;
 800c292:	f04f 0300 	mov.w	r3, #0
 800c296:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c29c:	f7f4 fc48 	bl	8000b30 <__aeabi_fsub>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800c2a4:	6a39      	ldr	r1, [r7, #32]
 800c2a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2a8:	f7f4 fd4c 	bl	8000d44 <__aeabi_fmul>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	68b8      	ldr	r0, [r7, #8]
 800c2b4:	f7f4 fc3c 	bl	8000b30 <__aeabi_fsub>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800c2bc:	69b9      	ldr	r1, [r7, #24]
 800c2be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c2c0:	f7f4 fd40 	bl	8000d44 <__aeabi_fmul>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800c2c8:	6979      	ldr	r1, [r7, #20]
 800c2ca:	69f8      	ldr	r0, [r7, #28]
 800c2cc:	f7f4 fc32 	bl	8000b34 <__addsf3>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	613b      	str	r3, [r7, #16]
    return PI;
 800c2d4:	693b      	ldr	r3, [r7, #16]

}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3728      	adds	r7, #40	; 0x28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 800c2e0:	b5b0      	push	{r4, r5, r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7f4 f89a 	bl	8000428 <__aeabi_f2d>
 800c2f4:	a31e      	add	r3, pc, #120	; (adr r3, 800c370 <_ZN3PID6RateFFEf+0x90>)
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	f7f4 f8ed 	bl	80004d8 <__aeabi_dmul>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4614      	mov	r4, r2
 800c304:	461d      	mov	r5, r3
 800c306:	6838      	ldr	r0, [r7, #0]
 800c308:	f7f4 f88e 	bl	8000428 <__aeabi_f2d>
 800c30c:	a31a      	add	r3, pc, #104	; (adr r3, 800c378 <_ZN3PID6RateFFEf+0x98>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f4 f8e1 	bl	80004d8 <__aeabi_dmul>
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	4620      	mov	r0, r4
 800c31c:	4629      	mov	r1, r5
 800c31e:	f7f3 ff25 	bl	800016c <__adddf3>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	4614      	mov	r4, r2
 800c328:	461d      	mov	r5, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32e:	4618      	mov	r0, r3
 800c330:	f7f4 f87a 	bl	8000428 <__aeabi_f2d>
 800c334:	a310      	add	r3, pc, #64	; (adr r3, 800c378 <_ZN3PID6RateFFEf+0x98>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7f4 f8cd 	bl	80004d8 <__aeabi_dmul>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4620      	mov	r0, r4
 800c344:	4629      	mov	r1, r5
 800c346:	f7f3 ff0f 	bl	8000168 <__aeabi_dsub>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4610      	mov	r0, r2
 800c350:	4619      	mov	r1, r3
 800c352:	f7f4 fb99 	bl	8000a88 <__aeabi_d2f>
 800c356:	4603      	mov	r3, r0
 800c358:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35e:	68f9      	ldr	r1, [r7, #12]
 800c360:	4618      	mov	r0, r3
 800c362:	f7f4 fcef 	bl	8000d44 <__aeabi_fmul>
 800c366:	4603      	mov	r3, r0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bdb0      	pop	{r4, r5, r7, pc}
 800c370:	1eb851ec 	.word	0x1eb851ec
 800c374:	3fefeb85 	.word	0x3fefeb85
 800c378:	538ef34d 	.word	0x538ef34d
 800c37c:	3fb72474 	.word	0x3fb72474

0800c380 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	68b8      	ldr	r0, [r7, #8]
 800c392:	f7f4 fbcd 	bl	8000b30 <__aeabi_fsub>
 800c396:	4603      	mov	r3, r0
 800c398:	461a      	mov	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	65da      	str	r2, [r3, #92]	; 0x5c
	ie_roll_rate += e_roll*st;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	f7f4 fcc9 	bl	8000d44 <__aeabi_fmul>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7f4 fbbc 	bl	8000b34 <__addsf3>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	461a      	mov	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	675a      	str	r2, [r3, #116]	; 0x74
	P = Kp * e_roll;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7f4 fcba 	bl	8000d44 <__aeabi_fmul>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f4 fcaf 	bl	8000d44 <__aeabi_fmul>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7f4 fb9a 	bl	8000b30 <__aeabi_fsub>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	461a      	mov	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f7f4 fd50 	bl	8000eac <__aeabi_fdiv>
 800c40c:	4603      	mov	r3, r0
 800c40e:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3328      	adds	r3, #40	; 0x28
 800c414:	6979      	ldr	r1, [r7, #20]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fa43 	bl	800c8a2 <_ZN3lpf3RunEf>
 800c41c:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c426:	4618      	mov	r0, r3
 800c428:	f7f4 fc8c 	bl	8000d44 <__aeabi_fmul>
 800c42c:	4603      	mov	r3, r0
 800c42e:	6979      	ldr	r1, [r7, #20]
 800c430:	4618      	mov	r0, r3
 800c432:	f7f4 fb7d 	bl	8000b30 <__aeabi_fsub>
 800c436:	4603      	mov	r3, r0
 800c438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f4 fc82 	bl	8000d44 <__aeabi_fmul>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c456:	4619      	mov	r1, r3
 800c458:	4610      	mov	r0, r2
 800c45a:	f7f4 fb6b 	bl	8000b34 <__addsf3>
 800c45e:	4603      	mov	r3, r0
 800c460:	461a      	mov	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c468:	4619      	mov	r1, r3
 800c46a:	4610      	mov	r0, r2
 800c46c:	f7f4 fb62 	bl	8000b34 <__addsf3>
 800c470:	4603      	mov	r3, r0
 800c472:	461a      	mov	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  	pd_roll_buf = pd;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c48a:	4b0e      	ldr	r3, [pc, #56]	; (800c4c4 <_ZN3PID9PID_Rate2Efffffff+0x144>)
 800c48c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f000 f975 	bl	800c780 <_ZN3PID3SatEfii>
 800c496:	4602      	mov	r2, r0
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pd_roll_sat_buf = pd;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	67da      	str	r2, [r3, #124]	; 0x7c
	alpha_dot_des_ = alpha_dot_des;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	621a      	str	r2, [r3, #32]
	alpha_dot_ = alpha_dot;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	625a      	str	r2, [r3, #36]	; 0x24
	return pd;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	371c      	adds	r7, #28
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd90      	pop	{r4, r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	fffffed4 	.word	0xfffffed4

0800c4c8 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800c4c8:	b590      	push	{r4, r7, lr}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	68b8      	ldr	r0, [r7, #8]
 800c4da:	f7f4 fb29 	bl	8000b30 <__aeabi_fsub>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	65da      	str	r2, [r3, #92]	; 0x5c
  float e_roll_der = - alpha_dot;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c4ec:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4f2:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7f4 fdff 	bl	80010fc <__aeabi_f2iz>
 800c4fe:	4604      	mov	r4, r0
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c504:	4618      	mov	r0, r3
 800c506:	f7f4 fdf9 	bl	80010fc <__aeabi_f2iz>
 800c50a:	4603      	mov	r3, r0
 800c50c:	429c      	cmp	r4, r3
 800c50e:	d018      	beq.n	800c542 <_ZN3PID7PD_RateEfffff+0x7a>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c514:	4619      	mov	r1, r3
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 f8d9 	bl	800c6ce <_ZN3PID3sgnEf>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461c      	mov	r4, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c524:	4619      	mov	r1, r3
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 f8d1 	bl	800c6ce <_ZN3PID3sgnEf>
 800c52c:	4603      	mov	r3, r0
 800c52e:	429c      	cmp	r4, r3
 800c530:	bf0c      	ite	eq
 800c532:	2301      	moveq	r3, #1
 800c534:	2300      	movne	r3, #0
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <_ZN3PID7PD_RateEfffff+0x7a>
      e_roll_int = 0;
 800c53c:	f04f 0300 	mov.w	r3, #0
 800c540:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c548:	4618      	mov	r0, r3
 800c54a:	f7f4 fbfb 	bl	8000d44 <__aeabi_fmul>
 800c54e:	4603      	mov	r3, r0
 800c550:	461a      	mov	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c558:	4619      	mov	r1, r3
 800c55a:	4610      	mov	r0, r2
 800c55c:	f7f4 fae8 	bl	8000b30 <__aeabi_fsub>
 800c560:	4603      	mov	r3, r0
 800c562:	494b      	ldr	r1, [pc, #300]	; (800c690 <_ZN3PID7PD_RateEfffff+0x1c8>)
 800c564:	4618      	mov	r0, r3
 800c566:	f7f4 fbed 	bl	8000d44 <__aeabi_fmul>
 800c56a:	4603      	mov	r3, r0
 800c56c:	461a      	mov	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	de_int += de_filt*st;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f7f4 fbdc 	bl	8000d44 <__aeabi_fmul>
 800c58c:	4603      	mov	r3, r0
 800c58e:	4619      	mov	r1, r3
 800c590:	4620      	mov	r0, r4
 800c592:	f7f4 facf 	bl	8000b34 <__addsf3>
 800c596:	4603      	mov	r3, r0
 800c598:	461a      	mov	r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	de = e_roll - e_eski_roll;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	f7f4 fac0 	bl	8000b30 <__aeabi_fsub>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	e_eski_roll = e_roll;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	665a      	str	r2, [r3, #100]	; 0x64

  ie_roll += e_roll_int*st;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	6979      	ldr	r1, [r7, #20]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7f4 fbb9 	bl	8000d44 <__aeabi_fmul>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7f4 faac 	bl	8000b34 <__addsf3>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	461a      	mov	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	66da      	str	r2, [r3, #108]	; 0x6c

  ie_roll_sat = ie_roll;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	679a      	str	r2, [r3, #120]	; 0x78
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7f4 fba6 	bl	8000d44 <__aeabi_fmul>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c614:	4618      	mov	r0, r3
 800c616:	f7f4 fb95 	bl	8000d44 <__aeabi_fmul>
 800c61a:	4603      	mov	r3, r0
 800c61c:	461a      	mov	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	//D = lpf.update(D);
	pd = P + I + D;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f7f4 fa7e 	bl	8000b34 <__addsf3>
 800c638:	4603      	mov	r3, r0
 800c63a:	461a      	mov	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c642:	4619      	mov	r1, r3
 800c644:	4610      	mov	r0, r2
 800c646:	f7f4 fa75 	bl	8000b34 <__addsf3>
 800c64a:	4603      	mov	r3, r0
 800c64c:	461a      	mov	r2, r3
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  	pd_roll_buf = pd;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c664:	4b0b      	ldr	r3, [pc, #44]	; (800c694 <_ZN3PID7PD_RateEfffff+0x1cc>)
 800c666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f000 f888 	bl	800c780 <_ZN3PID3SatEfii>
 800c670:	4602      	mov	r2, r0
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pd_roll_sat_buf = pd;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	67da      	str	r2, [r3, #124]	; 0x7c
    return pd;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98

}
 800c688:	4618      	mov	r0, r3
 800c68a:	371c      	adds	r7, #28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd90      	pop	{r4, r7, pc}
 800c690:	42c80000 	.word	0x42c80000
 800c694:	fffffed4 	.word	0xfffffed4

0800c698 <_ZN3PID5resetEv>:

void PID::reset() {
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f04f 0200 	mov.w	r2, #0
 800c6a6:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate = 0;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f04f 0200 	mov.w	r2, #0
 800c6ae:	675a      	str	r2, [r3, #116]	; 0x74
	de_filt = 0;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f04f 0200 	mov.w	r2, #0
 800c6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_int = 0;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f04f 0200 	mov.w	r2, #0
 800c6c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c6c4:	bf00      	nop
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bc80      	pop	{r7}
 800c6cc:	4770      	bx	lr

0800c6ce <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800c6d8:	f04f 0100 	mov.w	r1, #0
 800c6dc:	6838      	ldr	r0, [r7, #0]
 800c6de:	f7f4 fccf 	bl	8001080 <__aeabi_fcmplt>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <_ZN3PID3sgnEf+0x1e>
 800c6e8:	23ff      	movs	r3, #255	; 0xff
 800c6ea:	e00a      	b.n	800c702 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800c6ec:	f04f 0100 	mov.w	r1, #0
 800c6f0:	6838      	ldr	r0, [r7, #0]
 800c6f2:	f7f4 fce3 	bl	80010bc <__aeabi_fcmpgt>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <_ZN3PID3sgnEf+0x32>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e000      	b.n	800c702 <_ZN3PID3sgnEf+0x34>
  return 0;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800c720:	dd24      	ble.n	800c76c <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7f4 faba 	bl	8000c9c <__aeabi_i2f>
 800c728:	4603      	mov	r3, r0
 800c72a:	4619      	mov	r1, r3
 800c72c:	68b8      	ldr	r0, [r7, #8]
 800c72e:	f7f4 fcc5 	bl	80010bc <__aeabi_fcmpgt>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7f4 faaf 	bl	8000c9c <__aeabi_i2f>
 800c73e:	4603      	mov	r3, r0
 800c740:	617b      	str	r3, [r7, #20]
 800c742:	e015      	b.n	800c770 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800c744:	6838      	ldr	r0, [r7, #0]
 800c746:	f7f4 faa9 	bl	8000c9c <__aeabi_i2f>
 800c74a:	4603      	mov	r3, r0
 800c74c:	4619      	mov	r1, r3
 800c74e:	68b8      	ldr	r0, [r7, #8]
 800c750:	f7f4 fc96 	bl	8001080 <__aeabi_fcmplt>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d005      	beq.n	800c766 <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800c75a:	6838      	ldr	r0, [r7, #0]
 800c75c:	f7f4 fa9e 	bl	8000c9c <__aeabi_i2f>
 800c760:	4603      	mov	r3, r0
 800c762:	617b      	str	r3, [r7, #20]
 800c764:	e004      	b.n	800c770 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	e001      	b.n	800c770 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800c76c:	4b03      	ldr	r3, [pc, #12]	; (800c77c <_ZN3PID3SatEfiii+0x70>)
 800c76e:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800c770:	697b      	ldr	r3, [r7, #20]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	447a0000 	.word	0x447a0000

0800c780 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7f4 fa84 	bl	8000c9c <__aeabi_i2f>
 800c794:	4603      	mov	r3, r0
 800c796:	4619      	mov	r1, r3
 800c798:	68b8      	ldr	r0, [r7, #8]
 800c79a:	f7f4 fc8f 	bl	80010bc <__aeabi_fcmpgt>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d005      	beq.n	800c7b0 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7f4 fa79 	bl	8000c9c <__aeabi_i2f>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	e012      	b.n	800c7d6 <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800c7b0:	6838      	ldr	r0, [r7, #0]
 800c7b2:	f7f4 fa73 	bl	8000c9c <__aeabi_i2f>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	68b8      	ldr	r0, [r7, #8]
 800c7bc:	f7f4 fc60 	bl	8001080 <__aeabi_fcmplt>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800c7c6:	6838      	ldr	r0, [r7, #0]
 800c7c8:	f7f4 fa68 	bl	8000c9c <__aeabi_i2f>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	e001      	b.n	800c7d6 <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800c7d6:	697b      	ldr	r3, [r7, #20]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800c7ea:	4b16      	ldr	r3, [pc, #88]	; (800c844 <_ZN3PID5F2thrEf+0x64>)
 800c7ec:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800c7ee:	4b16      	ldr	r3, [pc, #88]	; (800c848 <_ZN3PID5F2thrEf+0x68>)
 800c7f0:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800c7f2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c7f6:	6838      	ldr	r0, [r7, #0]
 800c7f8:	f7f4 fb58 	bl	8000eac <__aeabi_fdiv>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800c800:	69f9      	ldr	r1, [r7, #28]
 800c802:	6978      	ldr	r0, [r7, #20]
 800c804:	f7f4 fb52 	bl	8000eac <__aeabi_fdiv>
 800c808:	4603      	mov	r3, r0
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7f6 f9e2 	bl	8002bd4 <_ZSt4sqrtf>
 800c810:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800c812:	490e      	ldr	r1, [pc, #56]	; (800c84c <_ZN3PID5F2thrEf+0x6c>)
 800c814:	6938      	ldr	r0, [r7, #16]
 800c816:	f7f4 fa95 	bl	8000d44 <__aeabi_fmul>
 800c81a:	4603      	mov	r3, r0
 800c81c:	69b9      	ldr	r1, [r7, #24]
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f4 fb44 	bl	8000eac <__aeabi_fdiv>
 800c824:	4603      	mov	r3, r0
 800c826:	4909      	ldr	r1, [pc, #36]	; (800c84c <_ZN3PID5F2thrEf+0x6c>)
 800c828:	4618      	mov	r0, r3
 800c82a:	f7f4 f983 	bl	8000b34 <__addsf3>
 800c82e:	4603      	mov	r3, r0
 800c830:	4618      	mov	r0, r3
 800c832:	f7f4 fc89 	bl	8001148 <__aeabi_f2uiz>
 800c836:	4603      	mov	r3, r0
 800c838:	60fb      	str	r3, [r7, #12]
	return thr;
 800c83a:	68fb      	ldr	r3, [r7, #12]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3720      	adds	r7, #32
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	3359f513 	.word	0x3359f513
 800c848:	46896e00 	.word	0x46896e00
 800c84c:	447a0000 	.word	0x447a0000

0800c850 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	3328      	adds	r3, #40	; 0x28
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f876 	bl	800c94e <_ZN3lpfD1Ev>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800c878:	68f9      	ldr	r1, [r7, #12]
 800c87a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c87e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800c882:	68f9      	ldr	r1, [r7, #12]
 800c884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c888:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800c88c:	68f9      	ldr	r1, [r7, #12]
 800c88e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c892:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	4618      	mov	r0, r3
 800c89a:	3714      	adds	r7, #20
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bc80      	pop	{r7}
 800c8a0:	4770      	bx	lr

0800c8a2 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800c8a2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7f3 fdb5 	bl	8000428 <__aeabi_f2d>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f3 fe07 	bl	80004d8 <__aeabi_dmul>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4690      	mov	r8, r2
 800c8d0:	4699      	mov	r9, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c8d8:	6838      	ldr	r0, [r7, #0]
 800c8da:	f7f3 fda5 	bl	8000428 <__aeabi_f2d>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	f7f3 fdf7 	bl	80004d8 <__aeabi_dmul>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	4649      	mov	r1, r9
 800c8f2:	f7f3 fc3b 	bl	800016c <__adddf3>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	4690      	mov	r8, r2
 800c8fc:	4699      	mov	r9, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7f3 fd8d 	bl	8000428 <__aeabi_f2d>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4620      	mov	r0, r4
 800c914:	4629      	mov	r1, r5
 800c916:	f7f3 fddf 	bl	80004d8 <__aeabi_dmul>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4640      	mov	r0, r8
 800c920:	4649      	mov	r1, r9
 800c922:	f7f3 fc23 	bl	800016c <__adddf3>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4610      	mov	r0, r2
 800c92c:	4619      	mov	r1, r3
 800c92e:	f7f4 f8ab 	bl	8000a88 <__aeabi_d2f>
 800c932:	4603      	mov	r3, r0
 800c934:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	601a      	str	r2, [r3, #0]
	y_ = y;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	605a      	str	r2, [r3, #4]
	return y;
 800c942:	68fb      	ldr	r3, [r7, #12]

}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800c94e <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800c94e:	b480      	push	{r7}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bc80      	pop	{r7}
 800c960:	4770      	bx	lr
	...

0800c964 <atanf>:
 800c964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c968:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c96c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c970:	4604      	mov	r4, r0
 800c972:	4680      	mov	r8, r0
 800c974:	db0e      	blt.n	800c994 <atanf+0x30>
 800c976:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c97a:	dd04      	ble.n	800c986 <atanf+0x22>
 800c97c:	4601      	mov	r1, r0
 800c97e:	f7f4 f8d9 	bl	8000b34 <__addsf3>
 800c982:	4604      	mov	r4, r0
 800c984:	e003      	b.n	800c98e <atanf+0x2a>
 800c986:	2800      	cmp	r0, #0
 800c988:	f300 80ce 	bgt.w	800cb28 <atanf+0x1c4>
 800c98c:	4c67      	ldr	r4, [pc, #412]	; (800cb2c <atanf+0x1c8>)
 800c98e:	4620      	mov	r0, r4
 800c990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c994:	4b66      	ldr	r3, [pc, #408]	; (800cb30 <atanf+0x1cc>)
 800c996:	429d      	cmp	r5, r3
 800c998:	dc0e      	bgt.n	800c9b8 <atanf+0x54>
 800c99a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c99e:	da08      	bge.n	800c9b2 <atanf+0x4e>
 800c9a0:	4964      	ldr	r1, [pc, #400]	; (800cb34 <atanf+0x1d0>)
 800c9a2:	f7f4 f8c7 	bl	8000b34 <__addsf3>
 800c9a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c9aa:	f7f4 fb87 	bl	80010bc <__aeabi_fcmpgt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d1ed      	bne.n	800c98e <atanf+0x2a>
 800c9b2:	f04f 36ff 	mov.w	r6, #4294967295
 800c9b6:	e01c      	b.n	800c9f2 <atanf+0x8e>
 800c9b8:	f000 f914 	bl	800cbe4 <fabsf>
 800c9bc:	4b5e      	ldr	r3, [pc, #376]	; (800cb38 <atanf+0x1d4>)
 800c9be:	4604      	mov	r4, r0
 800c9c0:	429d      	cmp	r5, r3
 800c9c2:	dc7c      	bgt.n	800cabe <atanf+0x15a>
 800c9c4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c9c8:	429d      	cmp	r5, r3
 800c9ca:	dc67      	bgt.n	800ca9c <atanf+0x138>
 800c9cc:	4601      	mov	r1, r0
 800c9ce:	f7f4 f8b1 	bl	8000b34 <__addsf3>
 800c9d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c9d6:	f7f4 f8ab 	bl	8000b30 <__aeabi_fsub>
 800c9da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c9de:	4605      	mov	r5, r0
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f7f4 f8a7 	bl	8000b34 <__addsf3>
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f7f4 fa5f 	bl	8000eac <__aeabi_fdiv>
 800c9ee:	2600      	movs	r6, #0
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7f4 f9a5 	bl	8000d44 <__aeabi_fmul>
 800c9fa:	4601      	mov	r1, r0
 800c9fc:	4607      	mov	r7, r0
 800c9fe:	f7f4 f9a1 	bl	8000d44 <__aeabi_fmul>
 800ca02:	4605      	mov	r5, r0
 800ca04:	494d      	ldr	r1, [pc, #308]	; (800cb3c <atanf+0x1d8>)
 800ca06:	f7f4 f99d 	bl	8000d44 <__aeabi_fmul>
 800ca0a:	494d      	ldr	r1, [pc, #308]	; (800cb40 <atanf+0x1dc>)
 800ca0c:	f7f4 f892 	bl	8000b34 <__addsf3>
 800ca10:	4629      	mov	r1, r5
 800ca12:	f7f4 f997 	bl	8000d44 <__aeabi_fmul>
 800ca16:	494b      	ldr	r1, [pc, #300]	; (800cb44 <atanf+0x1e0>)
 800ca18:	f7f4 f88c 	bl	8000b34 <__addsf3>
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	f7f4 f991 	bl	8000d44 <__aeabi_fmul>
 800ca22:	4949      	ldr	r1, [pc, #292]	; (800cb48 <atanf+0x1e4>)
 800ca24:	f7f4 f886 	bl	8000b34 <__addsf3>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	f7f4 f98b 	bl	8000d44 <__aeabi_fmul>
 800ca2e:	4947      	ldr	r1, [pc, #284]	; (800cb4c <atanf+0x1e8>)
 800ca30:	f7f4 f880 	bl	8000b34 <__addsf3>
 800ca34:	4629      	mov	r1, r5
 800ca36:	f7f4 f985 	bl	8000d44 <__aeabi_fmul>
 800ca3a:	4945      	ldr	r1, [pc, #276]	; (800cb50 <atanf+0x1ec>)
 800ca3c:	f7f4 f87a 	bl	8000b34 <__addsf3>
 800ca40:	4639      	mov	r1, r7
 800ca42:	f7f4 f97f 	bl	8000d44 <__aeabi_fmul>
 800ca46:	4943      	ldr	r1, [pc, #268]	; (800cb54 <atanf+0x1f0>)
 800ca48:	4607      	mov	r7, r0
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f7f4 f97a 	bl	8000d44 <__aeabi_fmul>
 800ca50:	4941      	ldr	r1, [pc, #260]	; (800cb58 <atanf+0x1f4>)
 800ca52:	f7f4 f86d 	bl	8000b30 <__aeabi_fsub>
 800ca56:	4629      	mov	r1, r5
 800ca58:	f7f4 f974 	bl	8000d44 <__aeabi_fmul>
 800ca5c:	493f      	ldr	r1, [pc, #252]	; (800cb5c <atanf+0x1f8>)
 800ca5e:	f7f4 f867 	bl	8000b30 <__aeabi_fsub>
 800ca62:	4629      	mov	r1, r5
 800ca64:	f7f4 f96e 	bl	8000d44 <__aeabi_fmul>
 800ca68:	493d      	ldr	r1, [pc, #244]	; (800cb60 <atanf+0x1fc>)
 800ca6a:	f7f4 f861 	bl	8000b30 <__aeabi_fsub>
 800ca6e:	4629      	mov	r1, r5
 800ca70:	f7f4 f968 	bl	8000d44 <__aeabi_fmul>
 800ca74:	493b      	ldr	r1, [pc, #236]	; (800cb64 <atanf+0x200>)
 800ca76:	f7f4 f85b 	bl	8000b30 <__aeabi_fsub>
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f7f4 f962 	bl	8000d44 <__aeabi_fmul>
 800ca80:	4601      	mov	r1, r0
 800ca82:	4638      	mov	r0, r7
 800ca84:	f7f4 f856 	bl	8000b34 <__addsf3>
 800ca88:	4621      	mov	r1, r4
 800ca8a:	f7f4 f95b 	bl	8000d44 <__aeabi_fmul>
 800ca8e:	1c73      	adds	r3, r6, #1
 800ca90:	4601      	mov	r1, r0
 800ca92:	d133      	bne.n	800cafc <atanf+0x198>
 800ca94:	4620      	mov	r0, r4
 800ca96:	f7f4 f84b 	bl	8000b30 <__aeabi_fsub>
 800ca9a:	e772      	b.n	800c982 <atanf+0x1e>
 800ca9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800caa0:	f7f4 f846 	bl	8000b30 <__aeabi_fsub>
 800caa4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800caa8:	4605      	mov	r5, r0
 800caaa:	4620      	mov	r0, r4
 800caac:	f7f4 f842 	bl	8000b34 <__addsf3>
 800cab0:	4601      	mov	r1, r0
 800cab2:	4628      	mov	r0, r5
 800cab4:	f7f4 f9fa 	bl	8000eac <__aeabi_fdiv>
 800cab8:	2601      	movs	r6, #1
 800caba:	4604      	mov	r4, r0
 800cabc:	e799      	b.n	800c9f2 <atanf+0x8e>
 800cabe:	4b2a      	ldr	r3, [pc, #168]	; (800cb68 <atanf+0x204>)
 800cac0:	429d      	cmp	r5, r3
 800cac2:	dc14      	bgt.n	800caee <atanf+0x18a>
 800cac4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cac8:	f7f4 f832 	bl	8000b30 <__aeabi_fsub>
 800cacc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cad0:	4605      	mov	r5, r0
 800cad2:	4620      	mov	r0, r4
 800cad4:	f7f4 f936 	bl	8000d44 <__aeabi_fmul>
 800cad8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cadc:	f7f4 f82a 	bl	8000b34 <__addsf3>
 800cae0:	4601      	mov	r1, r0
 800cae2:	4628      	mov	r0, r5
 800cae4:	f7f4 f9e2 	bl	8000eac <__aeabi_fdiv>
 800cae8:	2602      	movs	r6, #2
 800caea:	4604      	mov	r4, r0
 800caec:	e781      	b.n	800c9f2 <atanf+0x8e>
 800caee:	4601      	mov	r1, r0
 800caf0:	481e      	ldr	r0, [pc, #120]	; (800cb6c <atanf+0x208>)
 800caf2:	f7f4 f9db 	bl	8000eac <__aeabi_fdiv>
 800caf6:	2603      	movs	r6, #3
 800caf8:	4604      	mov	r4, r0
 800cafa:	e77a      	b.n	800c9f2 <atanf+0x8e>
 800cafc:	4b1c      	ldr	r3, [pc, #112]	; (800cb70 <atanf+0x20c>)
 800cafe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800cb02:	f7f4 f815 	bl	8000b30 <__aeabi_fsub>
 800cb06:	4621      	mov	r1, r4
 800cb08:	f7f4 f812 	bl	8000b30 <__aeabi_fsub>
 800cb0c:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <atanf+0x210>)
 800cb0e:	4601      	mov	r1, r0
 800cb10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb14:	f7f4 f80c 	bl	8000b30 <__aeabi_fsub>
 800cb18:	f1b8 0f00 	cmp.w	r8, #0
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	f6bf af36 	bge.w	800c98e <atanf+0x2a>
 800cb22:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cb26:	e72c      	b.n	800c982 <atanf+0x1e>
 800cb28:	4c13      	ldr	r4, [pc, #76]	; (800cb78 <atanf+0x214>)
 800cb2a:	e730      	b.n	800c98e <atanf+0x2a>
 800cb2c:	bfc90fdb 	.word	0xbfc90fdb
 800cb30:	3edfffff 	.word	0x3edfffff
 800cb34:	7149f2ca 	.word	0x7149f2ca
 800cb38:	3f97ffff 	.word	0x3f97ffff
 800cb3c:	3c8569d7 	.word	0x3c8569d7
 800cb40:	3d4bda59 	.word	0x3d4bda59
 800cb44:	3d886b35 	.word	0x3d886b35
 800cb48:	3dba2e6e 	.word	0x3dba2e6e
 800cb4c:	3e124925 	.word	0x3e124925
 800cb50:	3eaaaaab 	.word	0x3eaaaaab
 800cb54:	bd15a221 	.word	0xbd15a221
 800cb58:	3d6ef16b 	.word	0x3d6ef16b
 800cb5c:	3d9d8795 	.word	0x3d9d8795
 800cb60:	3de38e38 	.word	0x3de38e38
 800cb64:	3e4ccccd 	.word	0x3e4ccccd
 800cb68:	401bffff 	.word	0x401bffff
 800cb6c:	bf800000 	.word	0xbf800000
 800cb70:	0800fe44 	.word	0x0800fe44
 800cb74:	0800fe34 	.word	0x0800fe34
 800cb78:	3fc90fdb 	.word	0x3fc90fdb

0800cb7c <cosf>:
 800cb7c:	b507      	push	{r0, r1, r2, lr}
 800cb7e:	4a18      	ldr	r2, [pc, #96]	; (800cbe0 <cosf+0x64>)
 800cb80:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cb84:	4293      	cmp	r3, r2
 800cb86:	4601      	mov	r1, r0
 800cb88:	dc03      	bgt.n	800cb92 <cosf+0x16>
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	f001 fac4 	bl	800e118 <__kernel_cosf>
 800cb90:	e004      	b.n	800cb9c <cosf+0x20>
 800cb92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb96:	db04      	blt.n	800cba2 <cosf+0x26>
 800cb98:	f7f3 ffca 	bl	8000b30 <__aeabi_fsub>
 800cb9c:	b003      	add	sp, #12
 800cb9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cba2:	4669      	mov	r1, sp
 800cba4:	f001 f908 	bl	800ddb8 <__ieee754_rem_pio2f>
 800cba8:	f000 0203 	and.w	r2, r0, #3
 800cbac:	2a01      	cmp	r2, #1
 800cbae:	d005      	beq.n	800cbbc <cosf+0x40>
 800cbb0:	2a02      	cmp	r2, #2
 800cbb2:	d00a      	beq.n	800cbca <cosf+0x4e>
 800cbb4:	b972      	cbnz	r2, 800cbd4 <cosf+0x58>
 800cbb6:	9901      	ldr	r1, [sp, #4]
 800cbb8:	9800      	ldr	r0, [sp, #0]
 800cbba:	e7e7      	b.n	800cb8c <cosf+0x10>
 800cbbc:	9901      	ldr	r1, [sp, #4]
 800cbbe:	9800      	ldr	r0, [sp, #0]
 800cbc0:	f001 fde0 	bl	800e784 <__kernel_sinf>
 800cbc4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cbc8:	e7e8      	b.n	800cb9c <cosf+0x20>
 800cbca:	9901      	ldr	r1, [sp, #4]
 800cbcc:	9800      	ldr	r0, [sp, #0]
 800cbce:	f001 faa3 	bl	800e118 <__kernel_cosf>
 800cbd2:	e7f7      	b.n	800cbc4 <cosf+0x48>
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	9901      	ldr	r1, [sp, #4]
 800cbd8:	9800      	ldr	r0, [sp, #0]
 800cbda:	f001 fdd3 	bl	800e784 <__kernel_sinf>
 800cbde:	e7dd      	b.n	800cb9c <cosf+0x20>
 800cbe0:	3f490fd8 	.word	0x3f490fd8

0800cbe4 <fabsf>:
 800cbe4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cbe8:	4770      	bx	lr
	...

0800cbec <sinf>:
 800cbec:	b507      	push	{r0, r1, r2, lr}
 800cbee:	4a19      	ldr	r2, [pc, #100]	; (800cc54 <sinf+0x68>)
 800cbf0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	dc04      	bgt.n	800cc04 <sinf+0x18>
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f001 fdc1 	bl	800e784 <__kernel_sinf>
 800cc02:	e004      	b.n	800cc0e <sinf+0x22>
 800cc04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cc08:	db04      	blt.n	800cc14 <sinf+0x28>
 800cc0a:	f7f3 ff91 	bl	8000b30 <__aeabi_fsub>
 800cc0e:	b003      	add	sp, #12
 800cc10:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc14:	4669      	mov	r1, sp
 800cc16:	f001 f8cf 	bl	800ddb8 <__ieee754_rem_pio2f>
 800cc1a:	f000 0003 	and.w	r0, r0, #3
 800cc1e:	2801      	cmp	r0, #1
 800cc20:	d006      	beq.n	800cc30 <sinf+0x44>
 800cc22:	2802      	cmp	r0, #2
 800cc24:	d009      	beq.n	800cc3a <sinf+0x4e>
 800cc26:	b980      	cbnz	r0, 800cc4a <sinf+0x5e>
 800cc28:	2201      	movs	r2, #1
 800cc2a:	9901      	ldr	r1, [sp, #4]
 800cc2c:	9800      	ldr	r0, [sp, #0]
 800cc2e:	e7e6      	b.n	800cbfe <sinf+0x12>
 800cc30:	9901      	ldr	r1, [sp, #4]
 800cc32:	9800      	ldr	r0, [sp, #0]
 800cc34:	f001 fa70 	bl	800e118 <__kernel_cosf>
 800cc38:	e7e9      	b.n	800cc0e <sinf+0x22>
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	9901      	ldr	r1, [sp, #4]
 800cc3e:	9800      	ldr	r0, [sp, #0]
 800cc40:	f001 fda0 	bl	800e784 <__kernel_sinf>
 800cc44:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cc48:	e7e1      	b.n	800cc0e <sinf+0x22>
 800cc4a:	9901      	ldr	r1, [sp, #4]
 800cc4c:	9800      	ldr	r0, [sp, #0]
 800cc4e:	f001 fa63 	bl	800e118 <__kernel_cosf>
 800cc52:	e7f7      	b.n	800cc44 <sinf+0x58>
 800cc54:	3f490fd8 	.word	0x3f490fd8

0800cc58 <pow>:
 800cc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc5c:	461f      	mov	r7, r3
 800cc5e:	4680      	mov	r8, r0
 800cc60:	4689      	mov	r9, r1
 800cc62:	4616      	mov	r6, r2
 800cc64:	f000 f91c 	bl	800cea0 <__ieee754_pow>
 800cc68:	4b4d      	ldr	r3, [pc, #308]	; (800cda0 <pow+0x148>)
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	f993 3000 	ldrsb.w	r3, [r3]
 800cc70:	460d      	mov	r5, r1
 800cc72:	3301      	adds	r3, #1
 800cc74:	d015      	beq.n	800cca2 <pow+0x4a>
 800cc76:	4632      	mov	r2, r6
 800cc78:	463b      	mov	r3, r7
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	4639      	mov	r1, r7
 800cc7e:	f7f3 fec5 	bl	8000a0c <__aeabi_dcmpun>
 800cc82:	b970      	cbnz	r0, 800cca2 <pow+0x4a>
 800cc84:	4642      	mov	r2, r8
 800cc86:	464b      	mov	r3, r9
 800cc88:	4640      	mov	r0, r8
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	f7f3 febe 	bl	8000a0c <__aeabi_dcmpun>
 800cc90:	2200      	movs	r2, #0
 800cc92:	2300      	movs	r3, #0
 800cc94:	b148      	cbz	r0, 800ccaa <pow+0x52>
 800cc96:	4630      	mov	r0, r6
 800cc98:	4639      	mov	r1, r7
 800cc9a:	f7f3 fe85 	bl	80009a8 <__aeabi_dcmpeq>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d17b      	bne.n	800cd9a <pow+0x142>
 800cca2:	4620      	mov	r0, r4
 800cca4:	4629      	mov	r1, r5
 800cca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	4640      	mov	r0, r8
 800ccac:	4649      	mov	r1, r9
 800ccae:	f7f3 fe7b 	bl	80009a8 <__aeabi_dcmpeq>
 800ccb2:	b1e0      	cbz	r0, 800ccee <pow+0x96>
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f3 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d16a      	bne.n	800cd9a <pow+0x142>
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f001 fdd5 	bl	800e876 <finite>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d0e8      	beq.n	800cca2 <pow+0x4a>
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	f7f3 fe70 	bl	80009bc <__aeabi_dcmplt>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d0e0      	beq.n	800cca2 <pow+0x4a>
 800cce0:	f001 ff7e 	bl	800ebe0 <__errno>
 800cce4:	2321      	movs	r3, #33	; 0x21
 800cce6:	2400      	movs	r4, #0
 800cce8:	6003      	str	r3, [r0, #0]
 800ccea:	4d2e      	ldr	r5, [pc, #184]	; (800cda4 <pow+0x14c>)
 800ccec:	e7d9      	b.n	800cca2 <pow+0x4a>
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f001 fdc0 	bl	800e876 <finite>
 800ccf6:	bba8      	cbnz	r0, 800cd64 <pow+0x10c>
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f001 fdbb 	bl	800e876 <finite>
 800cd00:	b380      	cbz	r0, 800cd64 <pow+0x10c>
 800cd02:	4630      	mov	r0, r6
 800cd04:	4639      	mov	r1, r7
 800cd06:	f001 fdb6 	bl	800e876 <finite>
 800cd0a:	b358      	cbz	r0, 800cd64 <pow+0x10c>
 800cd0c:	4622      	mov	r2, r4
 800cd0e:	462b      	mov	r3, r5
 800cd10:	4620      	mov	r0, r4
 800cd12:	4629      	mov	r1, r5
 800cd14:	f7f3 fe7a 	bl	8000a0c <__aeabi_dcmpun>
 800cd18:	b160      	cbz	r0, 800cd34 <pow+0xdc>
 800cd1a:	f001 ff61 	bl	800ebe0 <__errno>
 800cd1e:	2321      	movs	r3, #33	; 0x21
 800cd20:	2200      	movs	r2, #0
 800cd22:	6003      	str	r3, [r0, #0]
 800cd24:	2300      	movs	r3, #0
 800cd26:	4610      	mov	r0, r2
 800cd28:	4619      	mov	r1, r3
 800cd2a:	f7f3 fcff 	bl	800072c <__aeabi_ddiv>
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	e7b6      	b.n	800cca2 <pow+0x4a>
 800cd34:	f001 ff54 	bl	800ebe0 <__errno>
 800cd38:	2322      	movs	r3, #34	; 0x22
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	6003      	str	r3, [r0, #0]
 800cd3e:	4649      	mov	r1, r9
 800cd40:	2300      	movs	r3, #0
 800cd42:	4640      	mov	r0, r8
 800cd44:	f7f3 fe3a 	bl	80009bc <__aeabi_dcmplt>
 800cd48:	2400      	movs	r4, #0
 800cd4a:	b148      	cbz	r0, 800cd60 <pow+0x108>
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	4639      	mov	r1, r7
 800cd50:	f001 fd9e 	bl	800e890 <rint>
 800cd54:	4632      	mov	r2, r6
 800cd56:	463b      	mov	r3, r7
 800cd58:	f7f3 fe26 	bl	80009a8 <__aeabi_dcmpeq>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d0c4      	beq.n	800ccea <pow+0x92>
 800cd60:	4d11      	ldr	r5, [pc, #68]	; (800cda8 <pow+0x150>)
 800cd62:	e79e      	b.n	800cca2 <pow+0x4a>
 800cd64:	2200      	movs	r2, #0
 800cd66:	2300      	movs	r3, #0
 800cd68:	4620      	mov	r0, r4
 800cd6a:	4629      	mov	r1, r5
 800cd6c:	f7f3 fe1c 	bl	80009a8 <__aeabi_dcmpeq>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d096      	beq.n	800cca2 <pow+0x4a>
 800cd74:	4640      	mov	r0, r8
 800cd76:	4649      	mov	r1, r9
 800cd78:	f001 fd7d 	bl	800e876 <finite>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d090      	beq.n	800cca2 <pow+0x4a>
 800cd80:	4630      	mov	r0, r6
 800cd82:	4639      	mov	r1, r7
 800cd84:	f001 fd77 	bl	800e876 <finite>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d08a      	beq.n	800cca2 <pow+0x4a>
 800cd8c:	f001 ff28 	bl	800ebe0 <__errno>
 800cd90:	2322      	movs	r3, #34	; 0x22
 800cd92:	2400      	movs	r4, #0
 800cd94:	2500      	movs	r5, #0
 800cd96:	6003      	str	r3, [r0, #0]
 800cd98:	e783      	b.n	800cca2 <pow+0x4a>
 800cd9a:	2400      	movs	r4, #0
 800cd9c:	4d03      	ldr	r5, [pc, #12]	; (800cdac <pow+0x154>)
 800cd9e:	e780      	b.n	800cca2 <pow+0x4a>
 800cda0:	20000021 	.word	0x20000021
 800cda4:	fff00000 	.word	0xfff00000
 800cda8:	7ff00000 	.word	0x7ff00000
 800cdac:	3ff00000 	.word	0x3ff00000

0800cdb0 <sqrt>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	460f      	mov	r7, r1
 800cdb6:	f000 fd89 	bl	800d8cc <__ieee754_sqrt>
 800cdba:	4b12      	ldr	r3, [pc, #72]	; (800ce04 <sqrt+0x54>)
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	f993 3000 	ldrsb.w	r3, [r3]
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	d019      	beq.n	800cdfc <sqrt+0x4c>
 800cdc8:	4632      	mov	r2, r6
 800cdca:	463b      	mov	r3, r7
 800cdcc:	4630      	mov	r0, r6
 800cdce:	4639      	mov	r1, r7
 800cdd0:	f7f3 fe1c 	bl	8000a0c <__aeabi_dcmpun>
 800cdd4:	b990      	cbnz	r0, 800cdfc <sqrt+0x4c>
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4630      	mov	r0, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	f7f3 fded 	bl	80009bc <__aeabi_dcmplt>
 800cde2:	b158      	cbz	r0, 800cdfc <sqrt+0x4c>
 800cde4:	f001 fefc 	bl	800ebe0 <__errno>
 800cde8:	2321      	movs	r3, #33	; 0x21
 800cdea:	2200      	movs	r2, #0
 800cdec:	6003      	str	r3, [r0, #0]
 800cdee:	2300      	movs	r3, #0
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f7f3 fc9a 	bl	800072c <__aeabi_ddiv>
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	460d      	mov	r5, r1
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce02:	bf00      	nop
 800ce04:	20000021 	.word	0x20000021

0800ce08 <asinf>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	f000 fe0a 	bl	800da24 <__ieee754_asinf>
 800ce10:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <asinf+0x44>)
 800ce12:	4605      	mov	r5, r0
 800ce14:	f993 3000 	ldrsb.w	r3, [r3]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	d015      	beq.n	800ce48 <asinf+0x40>
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f7f4 f956 	bl	80010d0 <__aeabi_fcmpun>
 800ce24:	b980      	cbnz	r0, 800ce48 <asinf+0x40>
 800ce26:	4620      	mov	r0, r4
 800ce28:	f7ff fedc 	bl	800cbe4 <fabsf>
 800ce2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ce30:	f7f4 f944 	bl	80010bc <__aeabi_fcmpgt>
 800ce34:	b140      	cbz	r0, 800ce48 <asinf+0x40>
 800ce36:	f001 fed3 	bl	800ebe0 <__errno>
 800ce3a:	2321      	movs	r3, #33	; 0x21
 800ce3c:	6003      	str	r3, [r0, #0]
 800ce3e:	4804      	ldr	r0, [pc, #16]	; (800ce50 <asinf+0x48>)
 800ce40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce44:	f001 be78 	b.w	800eb38 <nanf>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}
 800ce4c:	20000021 	.word	0x20000021
 800ce50:	08010337 	.word	0x08010337

0800ce54 <atan2f>:
 800ce54:	f000 bf2a 	b.w	800dcac <__ieee754_atan2f>

0800ce58 <sqrtf>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	f001 f90a 	bl	800e074 <__ieee754_sqrtf>
 800ce60:	4b0d      	ldr	r3, [pc, #52]	; (800ce98 <sqrtf+0x40>)
 800ce62:	4604      	mov	r4, r0
 800ce64:	f993 3000 	ldrsb.w	r3, [r3]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	d012      	beq.n	800ce92 <sqrtf+0x3a>
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f7f4 f92e 	bl	80010d0 <__aeabi_fcmpun>
 800ce74:	b968      	cbnz	r0, 800ce92 <sqrtf+0x3a>
 800ce76:	2100      	movs	r1, #0
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f7f4 f901 	bl	8001080 <__aeabi_fcmplt>
 800ce7e:	b140      	cbz	r0, 800ce92 <sqrtf+0x3a>
 800ce80:	f001 feae 	bl	800ebe0 <__errno>
 800ce84:	2321      	movs	r3, #33	; 0x21
 800ce86:	2100      	movs	r1, #0
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	4608      	mov	r0, r1
 800ce8c:	f7f4 f80e 	bl	8000eac <__aeabi_fdiv>
 800ce90:	4604      	mov	r4, r0
 800ce92:	4620      	mov	r0, r4
 800ce94:	bd38      	pop	{r3, r4, r5, pc}
 800ce96:	bf00      	nop
 800ce98:	20000021 	.word	0x20000021
 800ce9c:	00000000 	.word	0x00000000

0800cea0 <__ieee754_pow>:
 800cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	b093      	sub	sp, #76	; 0x4c
 800cea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ceaa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800ceae:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ceb2:	ea55 0302 	orrs.w	r3, r5, r2
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	4688      	mov	r8, r1
 800ceba:	f000 84bf 	beq.w	800d83c <__ieee754_pow+0x99c>
 800cebe:	4b7e      	ldr	r3, [pc, #504]	; (800d0b8 <__ieee754_pow+0x218>)
 800cec0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cec4:	429c      	cmp	r4, r3
 800cec6:	4689      	mov	r9, r1
 800cec8:	4682      	mov	sl, r0
 800ceca:	dc09      	bgt.n	800cee0 <__ieee754_pow+0x40>
 800cecc:	d103      	bne.n	800ced6 <__ieee754_pow+0x36>
 800cece:	b978      	cbnz	r0, 800cef0 <__ieee754_pow+0x50>
 800ced0:	42a5      	cmp	r5, r4
 800ced2:	dd02      	ble.n	800ceda <__ieee754_pow+0x3a>
 800ced4:	e00c      	b.n	800cef0 <__ieee754_pow+0x50>
 800ced6:	429d      	cmp	r5, r3
 800ced8:	dc02      	bgt.n	800cee0 <__ieee754_pow+0x40>
 800ceda:	429d      	cmp	r5, r3
 800cedc:	d10e      	bne.n	800cefc <__ieee754_pow+0x5c>
 800cede:	b16a      	cbz	r2, 800cefc <__ieee754_pow+0x5c>
 800cee0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cee4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cee8:	ea54 030a 	orrs.w	r3, r4, sl
 800ceec:	f000 84a6 	beq.w	800d83c <__ieee754_pow+0x99c>
 800cef0:	4872      	ldr	r0, [pc, #456]	; (800d0bc <__ieee754_pow+0x21c>)
 800cef2:	b013      	add	sp, #76	; 0x4c
 800cef4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	f001 bcc4 	b.w	800e884 <nan>
 800cefc:	f1b9 0f00 	cmp.w	r9, #0
 800cf00:	da39      	bge.n	800cf76 <__ieee754_pow+0xd6>
 800cf02:	4b6f      	ldr	r3, [pc, #444]	; (800d0c0 <__ieee754_pow+0x220>)
 800cf04:	429d      	cmp	r5, r3
 800cf06:	dc54      	bgt.n	800cfb2 <__ieee754_pow+0x112>
 800cf08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cf0c:	429d      	cmp	r5, r3
 800cf0e:	f340 84a6 	ble.w	800d85e <__ieee754_pow+0x9be>
 800cf12:	152b      	asrs	r3, r5, #20
 800cf14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf18:	2b14      	cmp	r3, #20
 800cf1a:	dd0f      	ble.n	800cf3c <__ieee754_pow+0x9c>
 800cf1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf20:	fa22 f103 	lsr.w	r1, r2, r3
 800cf24:	fa01 f303 	lsl.w	r3, r1, r3
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	f040 8498 	bne.w	800d85e <__ieee754_pow+0x9be>
 800cf2e:	f001 0101 	and.w	r1, r1, #1
 800cf32:	f1c1 0302 	rsb	r3, r1, #2
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	b182      	cbz	r2, 800cf5c <__ieee754_pow+0xbc>
 800cf3a:	e05e      	b.n	800cffa <__ieee754_pow+0x15a>
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	d15a      	bne.n	800cff6 <__ieee754_pow+0x156>
 800cf40:	f1c3 0314 	rsb	r3, r3, #20
 800cf44:	fa45 f103 	asr.w	r1, r5, r3
 800cf48:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4c:	42ab      	cmp	r3, r5
 800cf4e:	f040 8483 	bne.w	800d858 <__ieee754_pow+0x9b8>
 800cf52:	f001 0101 	and.w	r1, r1, #1
 800cf56:	f1c1 0302 	rsb	r3, r1, #2
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	4b59      	ldr	r3, [pc, #356]	; (800d0c4 <__ieee754_pow+0x224>)
 800cf5e:	429d      	cmp	r5, r3
 800cf60:	d130      	bne.n	800cfc4 <__ieee754_pow+0x124>
 800cf62:	2e00      	cmp	r6, #0
 800cf64:	f280 8474 	bge.w	800d850 <__ieee754_pow+0x9b0>
 800cf68:	463a      	mov	r2, r7
 800cf6a:	4643      	mov	r3, r8
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	4955      	ldr	r1, [pc, #340]	; (800d0c4 <__ieee754_pow+0x224>)
 800cf70:	f7f3 fbdc 	bl	800072c <__aeabi_ddiv>
 800cf74:	e02f      	b.n	800cfd6 <__ieee754_pow+0x136>
 800cf76:	2300      	movs	r3, #0
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	d13d      	bne.n	800cffa <__ieee754_pow+0x15a>
 800cf7e:	4b4e      	ldr	r3, [pc, #312]	; (800d0b8 <__ieee754_pow+0x218>)
 800cf80:	429d      	cmp	r5, r3
 800cf82:	d1eb      	bne.n	800cf5c <__ieee754_pow+0xbc>
 800cf84:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cf88:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cf8c:	ea53 030a 	orrs.w	r3, r3, sl
 800cf90:	f000 8454 	beq.w	800d83c <__ieee754_pow+0x99c>
 800cf94:	4b4c      	ldr	r3, [pc, #304]	; (800d0c8 <__ieee754_pow+0x228>)
 800cf96:	429c      	cmp	r4, r3
 800cf98:	dd0d      	ble.n	800cfb6 <__ieee754_pow+0x116>
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	f280 8454 	bge.w	800d848 <__ieee754_pow+0x9a8>
 800cfa0:	f04f 0b00 	mov.w	fp, #0
 800cfa4:	f04f 0c00 	mov.w	ip, #0
 800cfa8:	4658      	mov	r0, fp
 800cfaa:	4661      	mov	r1, ip
 800cfac:	b013      	add	sp, #76	; 0x4c
 800cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	e7e0      	b.n	800cf78 <__ieee754_pow+0xd8>
 800cfb6:	2e00      	cmp	r6, #0
 800cfb8:	daf2      	bge.n	800cfa0 <__ieee754_pow+0x100>
 800cfba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800cfbe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800cfc2:	e7f1      	b.n	800cfa8 <__ieee754_pow+0x108>
 800cfc4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800cfc8:	d108      	bne.n	800cfdc <__ieee754_pow+0x13c>
 800cfca:	463a      	mov	r2, r7
 800cfcc:	4643      	mov	r3, r8
 800cfce:	4638      	mov	r0, r7
 800cfd0:	4641      	mov	r1, r8
 800cfd2:	f7f3 fa81 	bl	80004d8 <__aeabi_dmul>
 800cfd6:	4683      	mov	fp, r0
 800cfd8:	468c      	mov	ip, r1
 800cfda:	e7e5      	b.n	800cfa8 <__ieee754_pow+0x108>
 800cfdc:	4b3b      	ldr	r3, [pc, #236]	; (800d0cc <__ieee754_pow+0x22c>)
 800cfde:	429e      	cmp	r6, r3
 800cfe0:	d10b      	bne.n	800cffa <__ieee754_pow+0x15a>
 800cfe2:	f1b9 0f00 	cmp.w	r9, #0
 800cfe6:	db08      	blt.n	800cffa <__ieee754_pow+0x15a>
 800cfe8:	4638      	mov	r0, r7
 800cfea:	4641      	mov	r1, r8
 800cfec:	b013      	add	sp, #76	; 0x4c
 800cfee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff2:	f000 bc6b 	b.w	800d8cc <__ieee754_sqrt>
 800cff6:	2300      	movs	r3, #0
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	4638      	mov	r0, r7
 800cffc:	4641      	mov	r1, r8
 800cffe:	f001 fc37 	bl	800e870 <fabs>
 800d002:	4683      	mov	fp, r0
 800d004:	468c      	mov	ip, r1
 800d006:	f1ba 0f00 	cmp.w	sl, #0
 800d00a:	d129      	bne.n	800d060 <__ieee754_pow+0x1c0>
 800d00c:	b124      	cbz	r4, 800d018 <__ieee754_pow+0x178>
 800d00e:	4b2d      	ldr	r3, [pc, #180]	; (800d0c4 <__ieee754_pow+0x224>)
 800d010:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800d014:	429a      	cmp	r2, r3
 800d016:	d123      	bne.n	800d060 <__ieee754_pow+0x1c0>
 800d018:	2e00      	cmp	r6, #0
 800d01a:	da07      	bge.n	800d02c <__ieee754_pow+0x18c>
 800d01c:	465a      	mov	r2, fp
 800d01e:	4663      	mov	r3, ip
 800d020:	2000      	movs	r0, #0
 800d022:	4928      	ldr	r1, [pc, #160]	; (800d0c4 <__ieee754_pow+0x224>)
 800d024:	f7f3 fb82 	bl	800072c <__aeabi_ddiv>
 800d028:	4683      	mov	fp, r0
 800d02a:	468c      	mov	ip, r1
 800d02c:	f1b9 0f00 	cmp.w	r9, #0
 800d030:	daba      	bge.n	800cfa8 <__ieee754_pow+0x108>
 800d032:	9b00      	ldr	r3, [sp, #0]
 800d034:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d038:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d03c:	4323      	orrs	r3, r4
 800d03e:	d108      	bne.n	800d052 <__ieee754_pow+0x1b2>
 800d040:	465a      	mov	r2, fp
 800d042:	4663      	mov	r3, ip
 800d044:	4658      	mov	r0, fp
 800d046:	4661      	mov	r1, ip
 800d048:	f7f3 f88e 	bl	8000168 <__aeabi_dsub>
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	e78e      	b.n	800cf70 <__ieee754_pow+0xd0>
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d1a7      	bne.n	800cfa8 <__ieee754_pow+0x108>
 800d058:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800d05c:	469c      	mov	ip, r3
 800d05e:	e7a3      	b.n	800cfa8 <__ieee754_pow+0x108>
 800d060:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800d064:	3b01      	subs	r3, #1
 800d066:	930c      	str	r3, [sp, #48]	; 0x30
 800d068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d06a:	9b00      	ldr	r3, [sp, #0]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	d104      	bne.n	800d07a <__ieee754_pow+0x1da>
 800d070:	463a      	mov	r2, r7
 800d072:	4643      	mov	r3, r8
 800d074:	4638      	mov	r0, r7
 800d076:	4641      	mov	r1, r8
 800d078:	e7e6      	b.n	800d048 <__ieee754_pow+0x1a8>
 800d07a:	4b15      	ldr	r3, [pc, #84]	; (800d0d0 <__ieee754_pow+0x230>)
 800d07c:	429d      	cmp	r5, r3
 800d07e:	f340 80f9 	ble.w	800d274 <__ieee754_pow+0x3d4>
 800d082:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d086:	429d      	cmp	r5, r3
 800d088:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <__ieee754_pow+0x228>)
 800d08a:	dd09      	ble.n	800d0a0 <__ieee754_pow+0x200>
 800d08c:	429c      	cmp	r4, r3
 800d08e:	dc0c      	bgt.n	800d0aa <__ieee754_pow+0x20a>
 800d090:	2e00      	cmp	r6, #0
 800d092:	da85      	bge.n	800cfa0 <__ieee754_pow+0x100>
 800d094:	a306      	add	r3, pc, #24	; (adr r3, 800d0b0 <__ieee754_pow+0x210>)
 800d096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09a:	4610      	mov	r0, r2
 800d09c:	4619      	mov	r1, r3
 800d09e:	e798      	b.n	800cfd2 <__ieee754_pow+0x132>
 800d0a0:	429c      	cmp	r4, r3
 800d0a2:	dbf5      	blt.n	800d090 <__ieee754_pow+0x1f0>
 800d0a4:	4b07      	ldr	r3, [pc, #28]	; (800d0c4 <__ieee754_pow+0x224>)
 800d0a6:	429c      	cmp	r4, r3
 800d0a8:	dd14      	ble.n	800d0d4 <__ieee754_pow+0x234>
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	dcf2      	bgt.n	800d094 <__ieee754_pow+0x1f4>
 800d0ae:	e777      	b.n	800cfa0 <__ieee754_pow+0x100>
 800d0b0:	8800759c 	.word	0x8800759c
 800d0b4:	7e37e43c 	.word	0x7e37e43c
 800d0b8:	7ff00000 	.word	0x7ff00000
 800d0bc:	08010337 	.word	0x08010337
 800d0c0:	433fffff 	.word	0x433fffff
 800d0c4:	3ff00000 	.word	0x3ff00000
 800d0c8:	3fefffff 	.word	0x3fefffff
 800d0cc:	3fe00000 	.word	0x3fe00000
 800d0d0:	41e00000 	.word	0x41e00000
 800d0d4:	4661      	mov	r1, ip
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	4658      	mov	r0, fp
 800d0da:	4b61      	ldr	r3, [pc, #388]	; (800d260 <__ieee754_pow+0x3c0>)
 800d0dc:	f7f3 f844 	bl	8000168 <__aeabi_dsub>
 800d0e0:	a355      	add	r3, pc, #340	; (adr r3, 800d238 <__ieee754_pow+0x398>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	460d      	mov	r5, r1
 800d0ea:	f7f3 f9f5 	bl	80004d8 <__aeabi_dmul>
 800d0ee:	a354      	add	r3, pc, #336	; (adr r3, 800d240 <__ieee754_pow+0x3a0>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	460f      	mov	r7, r1
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	f7f3 f9ec 	bl	80004d8 <__aeabi_dmul>
 800d100:	2200      	movs	r2, #0
 800d102:	4682      	mov	sl, r0
 800d104:	468b      	mov	fp, r1
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	4b56      	ldr	r3, [pc, #344]	; (800d264 <__ieee754_pow+0x3c4>)
 800d10c:	f7f3 f9e4 	bl	80004d8 <__aeabi_dmul>
 800d110:	4602      	mov	r2, r0
 800d112:	460b      	mov	r3, r1
 800d114:	a14c      	add	r1, pc, #304	; (adr r1, 800d248 <__ieee754_pow+0x3a8>)
 800d116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d11a:	f7f3 f825 	bl	8000168 <__aeabi_dsub>
 800d11e:	4622      	mov	r2, r4
 800d120:	462b      	mov	r3, r5
 800d122:	f7f3 f9d9 	bl	80004d8 <__aeabi_dmul>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	2000      	movs	r0, #0
 800d12c:	494e      	ldr	r1, [pc, #312]	; (800d268 <__ieee754_pow+0x3c8>)
 800d12e:	f7f3 f81b 	bl	8000168 <__aeabi_dsub>
 800d132:	4622      	mov	r2, r4
 800d134:	462b      	mov	r3, r5
 800d136:	4680      	mov	r8, r0
 800d138:	4689      	mov	r9, r1
 800d13a:	4620      	mov	r0, r4
 800d13c:	4629      	mov	r1, r5
 800d13e:	f7f3 f9cb 	bl	80004d8 <__aeabi_dmul>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4640      	mov	r0, r8
 800d148:	4649      	mov	r1, r9
 800d14a:	f7f3 f9c5 	bl	80004d8 <__aeabi_dmul>
 800d14e:	a340      	add	r3, pc, #256	; (adr r3, 800d250 <__ieee754_pow+0x3b0>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f7f3 f9c0 	bl	80004d8 <__aeabi_dmul>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	4650      	mov	r0, sl
 800d15e:	4659      	mov	r1, fp
 800d160:	f7f3 f802 	bl	8000168 <__aeabi_dsub>
 800d164:	f04f 0a00 	mov.w	sl, #0
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	4604      	mov	r4, r0
 800d16e:	460d      	mov	r5, r1
 800d170:	4630      	mov	r0, r6
 800d172:	4639      	mov	r1, r7
 800d174:	f7f2 fffa 	bl	800016c <__adddf3>
 800d178:	4632      	mov	r2, r6
 800d17a:	463b      	mov	r3, r7
 800d17c:	4650      	mov	r0, sl
 800d17e:	468b      	mov	fp, r1
 800d180:	f7f2 fff2 	bl	8000168 <__aeabi_dsub>
 800d184:	4602      	mov	r2, r0
 800d186:	460b      	mov	r3, r1
 800d188:	4620      	mov	r0, r4
 800d18a:	4629      	mov	r1, r5
 800d18c:	f7f2 ffec 	bl	8000168 <__aeabi_dsub>
 800d190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d194:	9b00      	ldr	r3, [sp, #0]
 800d196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d198:	3b01      	subs	r3, #1
 800d19a:	4313      	orrs	r3, r2
 800d19c:	f04f 0600 	mov.w	r6, #0
 800d1a0:	f04f 0200 	mov.w	r2, #0
 800d1a4:	bf0c      	ite	eq
 800d1a6:	4b31      	ldreq	r3, [pc, #196]	; (800d26c <__ieee754_pow+0x3cc>)
 800d1a8:	4b2d      	ldrne	r3, [pc, #180]	; (800d260 <__ieee754_pow+0x3c0>)
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	460d      	mov	r5, r1
 800d1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1b2:	e9cd 2300 	strd	r2, r3, [sp]
 800d1b6:	4632      	mov	r2, r6
 800d1b8:	463b      	mov	r3, r7
 800d1ba:	f7f2 ffd5 	bl	8000168 <__aeabi_dsub>
 800d1be:	4652      	mov	r2, sl
 800d1c0:	465b      	mov	r3, fp
 800d1c2:	f7f3 f989 	bl	80004d8 <__aeabi_dmul>
 800d1c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1ca:	4680      	mov	r8, r0
 800d1cc:	4689      	mov	r9, r1
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7f3 f981 	bl	80004d8 <__aeabi_dmul>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4640      	mov	r0, r8
 800d1dc:	4649      	mov	r1, r9
 800d1de:	f7f2 ffc5 	bl	800016c <__adddf3>
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	463b      	mov	r3, r7
 800d1e6:	4680      	mov	r8, r0
 800d1e8:	4689      	mov	r9, r1
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	4659      	mov	r1, fp
 800d1ee:	f7f3 f973 	bl	80004d8 <__aeabi_dmul>
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	460d      	mov	r5, r1
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d202:	f7f2 ffb3 	bl	800016c <__adddf3>
 800d206:	4b1a      	ldr	r3, [pc, #104]	; (800d270 <__ieee754_pow+0x3d0>)
 800d208:	4682      	mov	sl, r0
 800d20a:	4299      	cmp	r1, r3
 800d20c:	460f      	mov	r7, r1
 800d20e:	460e      	mov	r6, r1
 800d210:	f340 82ed 	ble.w	800d7ee <__ieee754_pow+0x94e>
 800d214:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d218:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d21c:	4303      	orrs	r3, r0
 800d21e:	f000 81e7 	beq.w	800d5f0 <__ieee754_pow+0x750>
 800d222:	a30d      	add	r3, pc, #52	; (adr r3, 800d258 <__ieee754_pow+0x3b8>)
 800d224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d22c:	f7f3 f954 	bl	80004d8 <__aeabi_dmul>
 800d230:	a309      	add	r3, pc, #36	; (adr r3, 800d258 <__ieee754_pow+0x3b8>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	e6cc      	b.n	800cfd2 <__ieee754_pow+0x132>
 800d238:	60000000 	.word	0x60000000
 800d23c:	3ff71547 	.word	0x3ff71547
 800d240:	f85ddf44 	.word	0xf85ddf44
 800d244:	3e54ae0b 	.word	0x3e54ae0b
 800d248:	55555555 	.word	0x55555555
 800d24c:	3fd55555 	.word	0x3fd55555
 800d250:	652b82fe 	.word	0x652b82fe
 800d254:	3ff71547 	.word	0x3ff71547
 800d258:	8800759c 	.word	0x8800759c
 800d25c:	7e37e43c 	.word	0x7e37e43c
 800d260:	3ff00000 	.word	0x3ff00000
 800d264:	3fd00000 	.word	0x3fd00000
 800d268:	3fe00000 	.word	0x3fe00000
 800d26c:	bff00000 	.word	0xbff00000
 800d270:	408fffff 	.word	0x408fffff
 800d274:	4bd4      	ldr	r3, [pc, #848]	; (800d5c8 <__ieee754_pow+0x728>)
 800d276:	2200      	movs	r2, #0
 800d278:	ea09 0303 	and.w	r3, r9, r3
 800d27c:	b943      	cbnz	r3, 800d290 <__ieee754_pow+0x3f0>
 800d27e:	4658      	mov	r0, fp
 800d280:	4661      	mov	r1, ip
 800d282:	4bd2      	ldr	r3, [pc, #840]	; (800d5cc <__ieee754_pow+0x72c>)
 800d284:	f7f3 f928 	bl	80004d8 <__aeabi_dmul>
 800d288:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d28c:	4683      	mov	fp, r0
 800d28e:	460c      	mov	r4, r1
 800d290:	1523      	asrs	r3, r4, #20
 800d292:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d296:	4413      	add	r3, r2
 800d298:	930b      	str	r3, [sp, #44]	; 0x2c
 800d29a:	4bcd      	ldr	r3, [pc, #820]	; (800d5d0 <__ieee754_pow+0x730>)
 800d29c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d2a0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d2a4:	429c      	cmp	r4, r3
 800d2a6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d2aa:	dd08      	ble.n	800d2be <__ieee754_pow+0x41e>
 800d2ac:	4bc9      	ldr	r3, [pc, #804]	; (800d5d4 <__ieee754_pow+0x734>)
 800d2ae:	429c      	cmp	r4, r3
 800d2b0:	f340 819c 	ble.w	800d5ec <__ieee754_pow+0x74c>
 800d2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2be:	2600      	movs	r6, #0
 800d2c0:	00f3      	lsls	r3, r6, #3
 800d2c2:	930d      	str	r3, [sp, #52]	; 0x34
 800d2c4:	4bc4      	ldr	r3, [pc, #784]	; (800d5d8 <__ieee754_pow+0x738>)
 800d2c6:	4658      	mov	r0, fp
 800d2c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d2cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d2d8:	4623      	mov	r3, r4
 800d2da:	f7f2 ff45 	bl	8000168 <__aeabi_dsub>
 800d2de:	46da      	mov	sl, fp
 800d2e0:	462b      	mov	r3, r5
 800d2e2:	4652      	mov	r2, sl
 800d2e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d2e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d2ec:	f7f2 ff3e 	bl	800016c <__adddf3>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	49b9      	ldr	r1, [pc, #740]	; (800d5dc <__ieee754_pow+0x73c>)
 800d2f8:	f7f3 fa18 	bl	800072c <__aeabi_ddiv>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
 800d300:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d308:	f7f3 f8e6 	bl	80004d8 <__aeabi_dmul>
 800d30c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d310:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d314:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d318:	2300      	movs	r3, #0
 800d31a:	2200      	movs	r2, #0
 800d31c:	46ab      	mov	fp, r5
 800d31e:	106d      	asrs	r5, r5, #1
 800d320:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d324:	9304      	str	r3, [sp, #16]
 800d326:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d32a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d32e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d332:	4640      	mov	r0, r8
 800d334:	4649      	mov	r1, r9
 800d336:	4614      	mov	r4, r2
 800d338:	461d      	mov	r5, r3
 800d33a:	f7f3 f8cd 	bl	80004d8 <__aeabi_dmul>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d346:	f7f2 ff0f 	bl	8000168 <__aeabi_dsub>
 800d34a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d34e:	4606      	mov	r6, r0
 800d350:	460f      	mov	r7, r1
 800d352:	4620      	mov	r0, r4
 800d354:	4629      	mov	r1, r5
 800d356:	f7f2 ff07 	bl	8000168 <__aeabi_dsub>
 800d35a:	4602      	mov	r2, r0
 800d35c:	460b      	mov	r3, r1
 800d35e:	4650      	mov	r0, sl
 800d360:	4659      	mov	r1, fp
 800d362:	f7f2 ff01 	bl	8000168 <__aeabi_dsub>
 800d366:	4642      	mov	r2, r8
 800d368:	464b      	mov	r3, r9
 800d36a:	f7f3 f8b5 	bl	80004d8 <__aeabi_dmul>
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	4630      	mov	r0, r6
 800d374:	4639      	mov	r1, r7
 800d376:	f7f2 fef7 	bl	8000168 <__aeabi_dsub>
 800d37a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d37e:	f7f3 f8ab 	bl	80004d8 <__aeabi_dmul>
 800d382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d38a:	4610      	mov	r0, r2
 800d38c:	4619      	mov	r1, r3
 800d38e:	f7f3 f8a3 	bl	80004d8 <__aeabi_dmul>
 800d392:	a37b      	add	r3, pc, #492	; (adr r3, 800d580 <__ieee754_pow+0x6e0>)
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	4604      	mov	r4, r0
 800d39a:	460d      	mov	r5, r1
 800d39c:	f7f3 f89c 	bl	80004d8 <__aeabi_dmul>
 800d3a0:	a379      	add	r3, pc, #484	; (adr r3, 800d588 <__ieee754_pow+0x6e8>)
 800d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a6:	f7f2 fee1 	bl	800016c <__adddf3>
 800d3aa:	4622      	mov	r2, r4
 800d3ac:	462b      	mov	r3, r5
 800d3ae:	f7f3 f893 	bl	80004d8 <__aeabi_dmul>
 800d3b2:	a377      	add	r3, pc, #476	; (adr r3, 800d590 <__ieee754_pow+0x6f0>)
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	f7f2 fed8 	bl	800016c <__adddf3>
 800d3bc:	4622      	mov	r2, r4
 800d3be:	462b      	mov	r3, r5
 800d3c0:	f7f3 f88a 	bl	80004d8 <__aeabi_dmul>
 800d3c4:	a374      	add	r3, pc, #464	; (adr r3, 800d598 <__ieee754_pow+0x6f8>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 fecf 	bl	800016c <__adddf3>
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	462b      	mov	r3, r5
 800d3d2:	f7f3 f881 	bl	80004d8 <__aeabi_dmul>
 800d3d6:	a372      	add	r3, pc, #456	; (adr r3, 800d5a0 <__ieee754_pow+0x700>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7f2 fec6 	bl	800016c <__adddf3>
 800d3e0:	4622      	mov	r2, r4
 800d3e2:	462b      	mov	r3, r5
 800d3e4:	f7f3 f878 	bl	80004d8 <__aeabi_dmul>
 800d3e8:	a36f      	add	r3, pc, #444	; (adr r3, 800d5a8 <__ieee754_pow+0x708>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f2 febd 	bl	800016c <__adddf3>
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	4606      	mov	r6, r0
 800d3f6:	460f      	mov	r7, r1
 800d3f8:	462b      	mov	r3, r5
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	f7f3 f86b 	bl	80004d8 <__aeabi_dmul>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 f865 	bl	80004d8 <__aeabi_dmul>
 800d40e:	4604      	mov	r4, r0
 800d410:	460d      	mov	r5, r1
 800d412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d416:	4642      	mov	r2, r8
 800d418:	464b      	mov	r3, r9
 800d41a:	f7f2 fea7 	bl	800016c <__adddf3>
 800d41e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d422:	f7f3 f859 	bl	80004d8 <__aeabi_dmul>
 800d426:	4622      	mov	r2, r4
 800d428:	462b      	mov	r3, r5
 800d42a:	f7f2 fe9f 	bl	800016c <__adddf3>
 800d42e:	4642      	mov	r2, r8
 800d430:	4606      	mov	r6, r0
 800d432:	460f      	mov	r7, r1
 800d434:	464b      	mov	r3, r9
 800d436:	4640      	mov	r0, r8
 800d438:	4649      	mov	r1, r9
 800d43a:	f7f3 f84d 	bl	80004d8 <__aeabi_dmul>
 800d43e:	2200      	movs	r2, #0
 800d440:	4b67      	ldr	r3, [pc, #412]	; (800d5e0 <__ieee754_pow+0x740>)
 800d442:	4682      	mov	sl, r0
 800d444:	468b      	mov	fp, r1
 800d446:	f7f2 fe91 	bl	800016c <__adddf3>
 800d44a:	4632      	mov	r2, r6
 800d44c:	463b      	mov	r3, r7
 800d44e:	f7f2 fe8d 	bl	800016c <__adddf3>
 800d452:	9c04      	ldr	r4, [sp, #16]
 800d454:	460d      	mov	r5, r1
 800d456:	4622      	mov	r2, r4
 800d458:	460b      	mov	r3, r1
 800d45a:	4640      	mov	r0, r8
 800d45c:	4649      	mov	r1, r9
 800d45e:	f7f3 f83b 	bl	80004d8 <__aeabi_dmul>
 800d462:	2200      	movs	r2, #0
 800d464:	4680      	mov	r8, r0
 800d466:	4689      	mov	r9, r1
 800d468:	4620      	mov	r0, r4
 800d46a:	4629      	mov	r1, r5
 800d46c:	4b5c      	ldr	r3, [pc, #368]	; (800d5e0 <__ieee754_pow+0x740>)
 800d46e:	f7f2 fe7b 	bl	8000168 <__aeabi_dsub>
 800d472:	4652      	mov	r2, sl
 800d474:	465b      	mov	r3, fp
 800d476:	f7f2 fe77 	bl	8000168 <__aeabi_dsub>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4630      	mov	r0, r6
 800d480:	4639      	mov	r1, r7
 800d482:	f7f2 fe71 	bl	8000168 <__aeabi_dsub>
 800d486:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d48a:	f7f3 f825 	bl	80004d8 <__aeabi_dmul>
 800d48e:	4622      	mov	r2, r4
 800d490:	4606      	mov	r6, r0
 800d492:	460f      	mov	r7, r1
 800d494:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d498:	462b      	mov	r3, r5
 800d49a:	f7f3 f81d 	bl	80004d8 <__aeabi_dmul>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	4639      	mov	r1, r7
 800d4a6:	f7f2 fe61 	bl	800016c <__adddf3>
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	460f      	mov	r7, r1
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	f7f2 fe59 	bl	800016c <__adddf3>
 800d4ba:	a33d      	add	r3, pc, #244	; (adr r3, 800d5b0 <__ieee754_pow+0x710>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	9c04      	ldr	r4, [sp, #16]
 800d4c2:	460d      	mov	r5, r1
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7f3 f807 	bl	80004d8 <__aeabi_dmul>
 800d4ca:	4642      	mov	r2, r8
 800d4cc:	464b      	mov	r3, r9
 800d4ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	f7f2 fe47 	bl	8000168 <__aeabi_dsub>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	4630      	mov	r0, r6
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	f7f2 fe41 	bl	8000168 <__aeabi_dsub>
 800d4e6:	a334      	add	r3, pc, #208	; (adr r3, 800d5b8 <__ieee754_pow+0x718>)
 800d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ec:	f7f2 fff4 	bl	80004d8 <__aeabi_dmul>
 800d4f0:	a333      	add	r3, pc, #204	; (adr r3, 800d5c0 <__ieee754_pow+0x720>)
 800d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	f7f2 ffeb 	bl	80004d8 <__aeabi_dmul>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4630      	mov	r0, r6
 800d508:	4639      	mov	r1, r7
 800d50a:	f7f2 fe2f 	bl	800016c <__adddf3>
 800d50e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d510:	4b34      	ldr	r3, [pc, #208]	; (800d5e4 <__ieee754_pow+0x744>)
 800d512:	4413      	add	r3, r2
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	f7f2 fe28 	bl	800016c <__adddf3>
 800d51c:	4680      	mov	r8, r0
 800d51e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d520:	4689      	mov	r9, r1
 800d522:	f7f2 ff6f 	bl	8000404 <__aeabi_i2d>
 800d526:	4604      	mov	r4, r0
 800d528:	460d      	mov	r5, r1
 800d52a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d52c:	4b2e      	ldr	r3, [pc, #184]	; (800d5e8 <__ieee754_pow+0x748>)
 800d52e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d532:	4413      	add	r3, r2
 800d534:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d538:	4642      	mov	r2, r8
 800d53a:	464b      	mov	r3, r9
 800d53c:	f7f2 fe16 	bl	800016c <__adddf3>
 800d540:	4632      	mov	r2, r6
 800d542:	463b      	mov	r3, r7
 800d544:	f7f2 fe12 	bl	800016c <__adddf3>
 800d548:	4622      	mov	r2, r4
 800d54a:	462b      	mov	r3, r5
 800d54c:	f7f2 fe0e 	bl	800016c <__adddf3>
 800d550:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d554:	4622      	mov	r2, r4
 800d556:	462b      	mov	r3, r5
 800d558:	4650      	mov	r0, sl
 800d55a:	468b      	mov	fp, r1
 800d55c:	f7f2 fe04 	bl	8000168 <__aeabi_dsub>
 800d560:	4632      	mov	r2, r6
 800d562:	463b      	mov	r3, r7
 800d564:	f7f2 fe00 	bl	8000168 <__aeabi_dsub>
 800d568:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d56c:	f7f2 fdfc 	bl	8000168 <__aeabi_dsub>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	4640      	mov	r0, r8
 800d576:	4649      	mov	r1, r9
 800d578:	e608      	b.n	800d18c <__ieee754_pow+0x2ec>
 800d57a:	bf00      	nop
 800d57c:	f3af 8000 	nop.w
 800d580:	4a454eef 	.word	0x4a454eef
 800d584:	3fca7e28 	.word	0x3fca7e28
 800d588:	93c9db65 	.word	0x93c9db65
 800d58c:	3fcd864a 	.word	0x3fcd864a
 800d590:	a91d4101 	.word	0xa91d4101
 800d594:	3fd17460 	.word	0x3fd17460
 800d598:	518f264d 	.word	0x518f264d
 800d59c:	3fd55555 	.word	0x3fd55555
 800d5a0:	db6fabff 	.word	0xdb6fabff
 800d5a4:	3fdb6db6 	.word	0x3fdb6db6
 800d5a8:	33333303 	.word	0x33333303
 800d5ac:	3fe33333 	.word	0x3fe33333
 800d5b0:	e0000000 	.word	0xe0000000
 800d5b4:	3feec709 	.word	0x3feec709
 800d5b8:	dc3a03fd 	.word	0xdc3a03fd
 800d5bc:	3feec709 	.word	0x3feec709
 800d5c0:	145b01f5 	.word	0x145b01f5
 800d5c4:	be3e2fe0 	.word	0xbe3e2fe0
 800d5c8:	7ff00000 	.word	0x7ff00000
 800d5cc:	43400000 	.word	0x43400000
 800d5d0:	0003988e 	.word	0x0003988e
 800d5d4:	000bb679 	.word	0x000bb679
 800d5d8:	0800fe58 	.word	0x0800fe58
 800d5dc:	3ff00000 	.word	0x3ff00000
 800d5e0:	40080000 	.word	0x40080000
 800d5e4:	0800fe78 	.word	0x0800fe78
 800d5e8:	0800fe68 	.word	0x0800fe68
 800d5ec:	2601      	movs	r6, #1
 800d5ee:	e667      	b.n	800d2c0 <__ieee754_pow+0x420>
 800d5f0:	a39d      	add	r3, pc, #628	; (adr r3, 800d868 <__ieee754_pow+0x9c8>)
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	f7f2 fdb7 	bl	800016c <__adddf3>
 800d5fe:	4622      	mov	r2, r4
 800d600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d604:	462b      	mov	r3, r5
 800d606:	4650      	mov	r0, sl
 800d608:	4639      	mov	r1, r7
 800d60a:	f7f2 fdad 	bl	8000168 <__aeabi_dsub>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d616:	f7f3 f9ef 	bl	80009f8 <__aeabi_dcmpgt>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	f47f ae01 	bne.w	800d222 <__ieee754_pow+0x382>
 800d620:	4aa5      	ldr	r2, [pc, #660]	; (800d8b8 <__ieee754_pow+0xa18>)
 800d622:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d626:	4293      	cmp	r3, r2
 800d628:	f340 8103 	ble.w	800d832 <__ieee754_pow+0x992>
 800d62c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d630:	2000      	movs	r0, #0
 800d632:	151b      	asrs	r3, r3, #20
 800d634:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d638:	fa4a f303 	asr.w	r3, sl, r3
 800d63c:	4433      	add	r3, r6
 800d63e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d642:	4f9e      	ldr	r7, [pc, #632]	; (800d8bc <__ieee754_pow+0xa1c>)
 800d644:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d648:	4117      	asrs	r7, r2
 800d64a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d64e:	ea23 0107 	bic.w	r1, r3, r7
 800d652:	f1c2 0214 	rsb	r2, r2, #20
 800d656:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d65a:	460b      	mov	r3, r1
 800d65c:	fa4a fa02 	asr.w	sl, sl, r2
 800d660:	2e00      	cmp	r6, #0
 800d662:	4602      	mov	r2, r0
 800d664:	4629      	mov	r1, r5
 800d666:	4620      	mov	r0, r4
 800d668:	bfb8      	it	lt
 800d66a:	f1ca 0a00 	rsblt	sl, sl, #0
 800d66e:	f7f2 fd7b 	bl	8000168 <__aeabi_dsub>
 800d672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d67a:	2400      	movs	r4, #0
 800d67c:	4642      	mov	r2, r8
 800d67e:	464b      	mov	r3, r9
 800d680:	f7f2 fd74 	bl	800016c <__adddf3>
 800d684:	a37a      	add	r3, pc, #488	; (adr r3, 800d870 <__ieee754_pow+0x9d0>)
 800d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68a:	4620      	mov	r0, r4
 800d68c:	460d      	mov	r5, r1
 800d68e:	f7f2 ff23 	bl	80004d8 <__aeabi_dmul>
 800d692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d696:	4606      	mov	r6, r0
 800d698:	460f      	mov	r7, r1
 800d69a:	4620      	mov	r0, r4
 800d69c:	4629      	mov	r1, r5
 800d69e:	f7f2 fd63 	bl	8000168 <__aeabi_dsub>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	f7f2 fd5d 	bl	8000168 <__aeabi_dsub>
 800d6ae:	a372      	add	r3, pc, #456	; (adr r3, 800d878 <__ieee754_pow+0x9d8>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f2 ff10 	bl	80004d8 <__aeabi_dmul>
 800d6b8:	a371      	add	r3, pc, #452	; (adr r3, 800d880 <__ieee754_pow+0x9e0>)
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	4680      	mov	r8, r0
 800d6c0:	4689      	mov	r9, r1
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	f7f2 ff07 	bl	80004d8 <__aeabi_dmul>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	4649      	mov	r1, r9
 800d6d2:	f7f2 fd4b 	bl	800016c <__adddf3>
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	460d      	mov	r5, r1
 800d6da:	4602      	mov	r2, r0
 800d6dc:	460b      	mov	r3, r1
 800d6de:	4630      	mov	r0, r6
 800d6e0:	4639      	mov	r1, r7
 800d6e2:	f7f2 fd43 	bl	800016c <__adddf3>
 800d6e6:	4632      	mov	r2, r6
 800d6e8:	463b      	mov	r3, r7
 800d6ea:	4680      	mov	r8, r0
 800d6ec:	4689      	mov	r9, r1
 800d6ee:	f7f2 fd3b 	bl	8000168 <__aeabi_dsub>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	f7f2 fd35 	bl	8000168 <__aeabi_dsub>
 800d6fe:	4642      	mov	r2, r8
 800d700:	4606      	mov	r6, r0
 800d702:	460f      	mov	r7, r1
 800d704:	464b      	mov	r3, r9
 800d706:	4640      	mov	r0, r8
 800d708:	4649      	mov	r1, r9
 800d70a:	f7f2 fee5 	bl	80004d8 <__aeabi_dmul>
 800d70e:	a35e      	add	r3, pc, #376	; (adr r3, 800d888 <__ieee754_pow+0x9e8>)
 800d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d714:	4604      	mov	r4, r0
 800d716:	460d      	mov	r5, r1
 800d718:	f7f2 fede 	bl	80004d8 <__aeabi_dmul>
 800d71c:	a35c      	add	r3, pc, #368	; (adr r3, 800d890 <__ieee754_pow+0x9f0>)
 800d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d722:	f7f2 fd21 	bl	8000168 <__aeabi_dsub>
 800d726:	4622      	mov	r2, r4
 800d728:	462b      	mov	r3, r5
 800d72a:	f7f2 fed5 	bl	80004d8 <__aeabi_dmul>
 800d72e:	a35a      	add	r3, pc, #360	; (adr r3, 800d898 <__ieee754_pow+0x9f8>)
 800d730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d734:	f7f2 fd1a 	bl	800016c <__adddf3>
 800d738:	4622      	mov	r2, r4
 800d73a:	462b      	mov	r3, r5
 800d73c:	f7f2 fecc 	bl	80004d8 <__aeabi_dmul>
 800d740:	a357      	add	r3, pc, #348	; (adr r3, 800d8a0 <__ieee754_pow+0xa00>)
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	f7f2 fd0f 	bl	8000168 <__aeabi_dsub>
 800d74a:	4622      	mov	r2, r4
 800d74c:	462b      	mov	r3, r5
 800d74e:	f7f2 fec3 	bl	80004d8 <__aeabi_dmul>
 800d752:	a355      	add	r3, pc, #340	; (adr r3, 800d8a8 <__ieee754_pow+0xa08>)
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	f7f2 fd08 	bl	800016c <__adddf3>
 800d75c:	4622      	mov	r2, r4
 800d75e:	462b      	mov	r3, r5
 800d760:	f7f2 feba 	bl	80004d8 <__aeabi_dmul>
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	4640      	mov	r0, r8
 800d76a:	4649      	mov	r1, r9
 800d76c:	f7f2 fcfc 	bl	8000168 <__aeabi_dsub>
 800d770:	4604      	mov	r4, r0
 800d772:	460d      	mov	r5, r1
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4640      	mov	r0, r8
 800d77a:	4649      	mov	r1, r9
 800d77c:	f7f2 feac 	bl	80004d8 <__aeabi_dmul>
 800d780:	2200      	movs	r2, #0
 800d782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f7f2 fceb 	bl	8000168 <__aeabi_dsub>
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d79a:	f7f2 ffc7 	bl	800072c <__aeabi_ddiv>
 800d79e:	4632      	mov	r2, r6
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	460d      	mov	r5, r1
 800d7a4:	463b      	mov	r3, r7
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	f7f2 fe95 	bl	80004d8 <__aeabi_dmul>
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	463b      	mov	r3, r7
 800d7b2:	f7f2 fcdb 	bl	800016c <__adddf3>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7f2 fcd3 	bl	8000168 <__aeabi_dsub>
 800d7c2:	4642      	mov	r2, r8
 800d7c4:	464b      	mov	r3, r9
 800d7c6:	f7f2 fccf 	bl	8000168 <__aeabi_dsub>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	493b      	ldr	r1, [pc, #236]	; (800d8c0 <__ieee754_pow+0xa20>)
 800d7d2:	f7f2 fcc9 	bl	8000168 <__aeabi_dsub>
 800d7d6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d7da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d7de:	da2b      	bge.n	800d838 <__ieee754_pow+0x998>
 800d7e0:	4652      	mov	r2, sl
 800d7e2:	f001 f8e1 	bl	800e9a8 <scalbn>
 800d7e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ea:	f7ff bbf2 	b.w	800cfd2 <__ieee754_pow+0x132>
 800d7ee:	4b35      	ldr	r3, [pc, #212]	; (800d8c4 <__ieee754_pow+0xa24>)
 800d7f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d7f4:	429f      	cmp	r7, r3
 800d7f6:	f77f af13 	ble.w	800d620 <__ieee754_pow+0x780>
 800d7fa:	4b33      	ldr	r3, [pc, #204]	; (800d8c8 <__ieee754_pow+0xa28>)
 800d7fc:	440b      	add	r3, r1
 800d7fe:	4303      	orrs	r3, r0
 800d800:	d00b      	beq.n	800d81a <__ieee754_pow+0x97a>
 800d802:	a32b      	add	r3, pc, #172	; (adr r3, 800d8b0 <__ieee754_pow+0xa10>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d80c:	f7f2 fe64 	bl	80004d8 <__aeabi_dmul>
 800d810:	a327      	add	r3, pc, #156	; (adr r3, 800d8b0 <__ieee754_pow+0xa10>)
 800d812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d816:	f7ff bbdc 	b.w	800cfd2 <__ieee754_pow+0x132>
 800d81a:	4622      	mov	r2, r4
 800d81c:	462b      	mov	r3, r5
 800d81e:	f7f2 fca3 	bl	8000168 <__aeabi_dsub>
 800d822:	4642      	mov	r2, r8
 800d824:	464b      	mov	r3, r9
 800d826:	f7f3 f8dd 	bl	80009e4 <__aeabi_dcmpge>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	f43f aef8 	beq.w	800d620 <__ieee754_pow+0x780>
 800d830:	e7e7      	b.n	800d802 <__ieee754_pow+0x962>
 800d832:	f04f 0a00 	mov.w	sl, #0
 800d836:	e71e      	b.n	800d676 <__ieee754_pow+0x7d6>
 800d838:	4621      	mov	r1, r4
 800d83a:	e7d4      	b.n	800d7e6 <__ieee754_pow+0x946>
 800d83c:	f04f 0b00 	mov.w	fp, #0
 800d840:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d8c0 <__ieee754_pow+0xa20>
 800d844:	f7ff bbb0 	b.w	800cfa8 <__ieee754_pow+0x108>
 800d848:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d84c:	f7ff bbac 	b.w	800cfa8 <__ieee754_pow+0x108>
 800d850:	4638      	mov	r0, r7
 800d852:	4641      	mov	r1, r8
 800d854:	f7ff bbbf 	b.w	800cfd6 <__ieee754_pow+0x136>
 800d858:	9200      	str	r2, [sp, #0]
 800d85a:	f7ff bb7f 	b.w	800cf5c <__ieee754_pow+0xbc>
 800d85e:	2300      	movs	r3, #0
 800d860:	f7ff bb69 	b.w	800cf36 <__ieee754_pow+0x96>
 800d864:	f3af 8000 	nop.w
 800d868:	652b82fe 	.word	0x652b82fe
 800d86c:	3c971547 	.word	0x3c971547
 800d870:	00000000 	.word	0x00000000
 800d874:	3fe62e43 	.word	0x3fe62e43
 800d878:	fefa39ef 	.word	0xfefa39ef
 800d87c:	3fe62e42 	.word	0x3fe62e42
 800d880:	0ca86c39 	.word	0x0ca86c39
 800d884:	be205c61 	.word	0xbe205c61
 800d888:	72bea4d0 	.word	0x72bea4d0
 800d88c:	3e663769 	.word	0x3e663769
 800d890:	c5d26bf1 	.word	0xc5d26bf1
 800d894:	3ebbbd41 	.word	0x3ebbbd41
 800d898:	af25de2c 	.word	0xaf25de2c
 800d89c:	3f11566a 	.word	0x3f11566a
 800d8a0:	16bebd93 	.word	0x16bebd93
 800d8a4:	3f66c16c 	.word	0x3f66c16c
 800d8a8:	5555553e 	.word	0x5555553e
 800d8ac:	3fc55555 	.word	0x3fc55555
 800d8b0:	c2f8f359 	.word	0xc2f8f359
 800d8b4:	01a56e1f 	.word	0x01a56e1f
 800d8b8:	3fe00000 	.word	0x3fe00000
 800d8bc:	000fffff 	.word	0x000fffff
 800d8c0:	3ff00000 	.word	0x3ff00000
 800d8c4:	4090cbff 	.word	0x4090cbff
 800d8c8:	3f6f3400 	.word	0x3f6f3400

0800d8cc <__ieee754_sqrt>:
 800d8cc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800da20 <__ieee754_sqrt+0x154>
 800d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d4:	ea3c 0c01 	bics.w	ip, ip, r1
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4606      	mov	r6, r0
 800d8dc:	460d      	mov	r5, r1
 800d8de:	460a      	mov	r2, r1
 800d8e0:	4607      	mov	r7, r0
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	d10e      	bne.n	800d904 <__ieee754_sqrt+0x38>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	f7f2 fdf6 	bl	80004d8 <__aeabi_dmul>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	f7f2 fc3a 	bl	800016c <__adddf3>
 800d8f8:	4606      	mov	r6, r0
 800d8fa:	460d      	mov	r5, r1
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4629      	mov	r1, r5
 800d900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d904:	2900      	cmp	r1, #0
 800d906:	dc0d      	bgt.n	800d924 <__ieee754_sqrt+0x58>
 800d908:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d90c:	ea5c 0707 	orrs.w	r7, ip, r7
 800d910:	d0f4      	beq.n	800d8fc <__ieee754_sqrt+0x30>
 800d912:	b139      	cbz	r1, 800d924 <__ieee754_sqrt+0x58>
 800d914:	4602      	mov	r2, r0
 800d916:	f7f2 fc27 	bl	8000168 <__aeabi_dsub>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	f7f2 ff05 	bl	800072c <__aeabi_ddiv>
 800d922:	e7e9      	b.n	800d8f8 <__ieee754_sqrt+0x2c>
 800d924:	1512      	asrs	r2, r2, #20
 800d926:	d074      	beq.n	800da12 <__ieee754_sqrt+0x146>
 800d928:	2000      	movs	r0, #0
 800d92a:	07d5      	lsls	r5, r2, #31
 800d92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d930:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800d934:	bf5e      	ittt	pl
 800d936:	0fe3      	lsrpl	r3, r4, #31
 800d938:	0064      	lslpl	r4, r4, #1
 800d93a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800d93e:	0fe3      	lsrs	r3, r4, #31
 800d940:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d944:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d948:	2516      	movs	r5, #22
 800d94a:	4601      	mov	r1, r0
 800d94c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d950:	1076      	asrs	r6, r6, #1
 800d952:	0064      	lsls	r4, r4, #1
 800d954:	188f      	adds	r7, r1, r2
 800d956:	429f      	cmp	r7, r3
 800d958:	bfde      	ittt	le
 800d95a:	1bdb      	suble	r3, r3, r7
 800d95c:	18b9      	addle	r1, r7, r2
 800d95e:	1880      	addle	r0, r0, r2
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	3d01      	subs	r5, #1
 800d964:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d968:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d96c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d970:	d1f0      	bne.n	800d954 <__ieee754_sqrt+0x88>
 800d972:	462a      	mov	r2, r5
 800d974:	f04f 0e20 	mov.w	lr, #32
 800d978:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d97c:	428b      	cmp	r3, r1
 800d97e:	eb07 0c05 	add.w	ip, r7, r5
 800d982:	dc02      	bgt.n	800d98a <__ieee754_sqrt+0xbe>
 800d984:	d113      	bne.n	800d9ae <__ieee754_sqrt+0xe2>
 800d986:	45a4      	cmp	ip, r4
 800d988:	d811      	bhi.n	800d9ae <__ieee754_sqrt+0xe2>
 800d98a:	f1bc 0f00 	cmp.w	ip, #0
 800d98e:	eb0c 0507 	add.w	r5, ip, r7
 800d992:	da43      	bge.n	800da1c <__ieee754_sqrt+0x150>
 800d994:	2d00      	cmp	r5, #0
 800d996:	db41      	blt.n	800da1c <__ieee754_sqrt+0x150>
 800d998:	f101 0801 	add.w	r8, r1, #1
 800d99c:	1a5b      	subs	r3, r3, r1
 800d99e:	4641      	mov	r1, r8
 800d9a0:	45a4      	cmp	ip, r4
 800d9a2:	bf88      	it	hi
 800d9a4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d9a8:	eba4 040c 	sub.w	r4, r4, ip
 800d9ac:	443a      	add	r2, r7
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	f1be 0e01 	subs.w	lr, lr, #1
 800d9b4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d9b8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800d9bc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d9c0:	d1dc      	bne.n	800d97c <__ieee754_sqrt+0xb0>
 800d9c2:	4323      	orrs	r3, r4
 800d9c4:	d006      	beq.n	800d9d4 <__ieee754_sqrt+0x108>
 800d9c6:	1c54      	adds	r4, r2, #1
 800d9c8:	bf0b      	itete	eq
 800d9ca:	4672      	moveq	r2, lr
 800d9cc:	3201      	addne	r2, #1
 800d9ce:	3001      	addeq	r0, #1
 800d9d0:	f022 0201 	bicne.w	r2, r2, #1
 800d9d4:	1043      	asrs	r3, r0, #1
 800d9d6:	07c1      	lsls	r1, r0, #31
 800d9d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d9dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d9e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d9e4:	bf48      	it	mi
 800d9e6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d9f0:	e782      	b.n	800d8f8 <__ieee754_sqrt+0x2c>
 800d9f2:	0ae3      	lsrs	r3, r4, #11
 800d9f4:	3915      	subs	r1, #21
 800d9f6:	0564      	lsls	r4, r4, #21
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d0fa      	beq.n	800d9f2 <__ieee754_sqrt+0x126>
 800d9fc:	02de      	lsls	r6, r3, #11
 800d9fe:	d50a      	bpl.n	800da16 <__ieee754_sqrt+0x14a>
 800da00:	f1c2 0020 	rsb	r0, r2, #32
 800da04:	fa24 f000 	lsr.w	r0, r4, r0
 800da08:	1e55      	subs	r5, r2, #1
 800da0a:	4094      	lsls	r4, r2
 800da0c:	4303      	orrs	r3, r0
 800da0e:	1b4a      	subs	r2, r1, r5
 800da10:	e78a      	b.n	800d928 <__ieee754_sqrt+0x5c>
 800da12:	4611      	mov	r1, r2
 800da14:	e7f0      	b.n	800d9f8 <__ieee754_sqrt+0x12c>
 800da16:	005b      	lsls	r3, r3, #1
 800da18:	3201      	adds	r2, #1
 800da1a:	e7ef      	b.n	800d9fc <__ieee754_sqrt+0x130>
 800da1c:	4688      	mov	r8, r1
 800da1e:	e7bd      	b.n	800d99c <__ieee754_sqrt+0xd0>
 800da20:	7ff00000 	.word	0x7ff00000

0800da24 <__ieee754_asinf>:
 800da24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da28:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800da2c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800da30:	4604      	mov	r4, r0
 800da32:	4605      	mov	r5, r0
 800da34:	d10c      	bne.n	800da50 <__ieee754_asinf+0x2c>
 800da36:	498d      	ldr	r1, [pc, #564]	; (800dc6c <__ieee754_asinf+0x248>)
 800da38:	f7f3 f984 	bl	8000d44 <__aeabi_fmul>
 800da3c:	498c      	ldr	r1, [pc, #560]	; (800dc70 <__ieee754_asinf+0x24c>)
 800da3e:	4605      	mov	r5, r0
 800da40:	4620      	mov	r0, r4
 800da42:	f7f3 f97f 	bl	8000d44 <__aeabi_fmul>
 800da46:	4601      	mov	r1, r0
 800da48:	4628      	mov	r0, r5
 800da4a:	f7f3 f873 	bl	8000b34 <__addsf3>
 800da4e:	e006      	b.n	800da5e <__ieee754_asinf+0x3a>
 800da50:	dd07      	ble.n	800da62 <__ieee754_asinf+0x3e>
 800da52:	4601      	mov	r1, r0
 800da54:	f7f3 f86c 	bl	8000b30 <__aeabi_fsub>
 800da58:	4601      	mov	r1, r0
 800da5a:	f7f3 fa27 	bl	8000eac <__aeabi_fdiv>
 800da5e:	4604      	mov	r4, r0
 800da60:	e00e      	b.n	800da80 <__ieee754_asinf+0x5c>
 800da62:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800da66:	da58      	bge.n	800db1a <__ieee754_asinf+0xf6>
 800da68:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800da6c:	da0b      	bge.n	800da86 <__ieee754_asinf+0x62>
 800da6e:	4981      	ldr	r1, [pc, #516]	; (800dc74 <__ieee754_asinf+0x250>)
 800da70:	f7f3 f860 	bl	8000b34 <__addsf3>
 800da74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800da78:	f7f3 fb20 	bl	80010bc <__aeabi_fcmpgt>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d04c      	beq.n	800db1a <__ieee754_asinf+0xf6>
 800da80:	4620      	mov	r0, r4
 800da82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da86:	4601      	mov	r1, r0
 800da88:	f7f3 f95c 	bl	8000d44 <__aeabi_fmul>
 800da8c:	4605      	mov	r5, r0
 800da8e:	497a      	ldr	r1, [pc, #488]	; (800dc78 <__ieee754_asinf+0x254>)
 800da90:	f7f3 f958 	bl	8000d44 <__aeabi_fmul>
 800da94:	4979      	ldr	r1, [pc, #484]	; (800dc7c <__ieee754_asinf+0x258>)
 800da96:	f7f3 f84d 	bl	8000b34 <__addsf3>
 800da9a:	4629      	mov	r1, r5
 800da9c:	f7f3 f952 	bl	8000d44 <__aeabi_fmul>
 800daa0:	4977      	ldr	r1, [pc, #476]	; (800dc80 <__ieee754_asinf+0x25c>)
 800daa2:	f7f3 f845 	bl	8000b30 <__aeabi_fsub>
 800daa6:	4629      	mov	r1, r5
 800daa8:	f7f3 f94c 	bl	8000d44 <__aeabi_fmul>
 800daac:	4975      	ldr	r1, [pc, #468]	; (800dc84 <__ieee754_asinf+0x260>)
 800daae:	f7f3 f841 	bl	8000b34 <__addsf3>
 800dab2:	4629      	mov	r1, r5
 800dab4:	f7f3 f946 	bl	8000d44 <__aeabi_fmul>
 800dab8:	4973      	ldr	r1, [pc, #460]	; (800dc88 <__ieee754_asinf+0x264>)
 800daba:	f7f3 f839 	bl	8000b30 <__aeabi_fsub>
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f3 f940 	bl	8000d44 <__aeabi_fmul>
 800dac4:	4971      	ldr	r1, [pc, #452]	; (800dc8c <__ieee754_asinf+0x268>)
 800dac6:	f7f3 f835 	bl	8000b34 <__addsf3>
 800daca:	4629      	mov	r1, r5
 800dacc:	f7f3 f93a 	bl	8000d44 <__aeabi_fmul>
 800dad0:	496f      	ldr	r1, [pc, #444]	; (800dc90 <__ieee754_asinf+0x26c>)
 800dad2:	4606      	mov	r6, r0
 800dad4:	4628      	mov	r0, r5
 800dad6:	f7f3 f935 	bl	8000d44 <__aeabi_fmul>
 800dada:	496e      	ldr	r1, [pc, #440]	; (800dc94 <__ieee754_asinf+0x270>)
 800dadc:	f7f3 f828 	bl	8000b30 <__aeabi_fsub>
 800dae0:	4629      	mov	r1, r5
 800dae2:	f7f3 f92f 	bl	8000d44 <__aeabi_fmul>
 800dae6:	496c      	ldr	r1, [pc, #432]	; (800dc98 <__ieee754_asinf+0x274>)
 800dae8:	f7f3 f824 	bl	8000b34 <__addsf3>
 800daec:	4629      	mov	r1, r5
 800daee:	f7f3 f929 	bl	8000d44 <__aeabi_fmul>
 800daf2:	496a      	ldr	r1, [pc, #424]	; (800dc9c <__ieee754_asinf+0x278>)
 800daf4:	f7f3 f81c 	bl	8000b30 <__aeabi_fsub>
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f3 f923 	bl	8000d44 <__aeabi_fmul>
 800dafe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db02:	f7f3 f817 	bl	8000b34 <__addsf3>
 800db06:	4601      	mov	r1, r0
 800db08:	4630      	mov	r0, r6
 800db0a:	f7f3 f9cf 	bl	8000eac <__aeabi_fdiv>
 800db0e:	4621      	mov	r1, r4
 800db10:	f7f3 f918 	bl	8000d44 <__aeabi_fmul>
 800db14:	4601      	mov	r1, r0
 800db16:	4620      	mov	r0, r4
 800db18:	e797      	b.n	800da4a <__ieee754_asinf+0x26>
 800db1a:	4620      	mov	r0, r4
 800db1c:	f7ff f862 	bl	800cbe4 <fabsf>
 800db20:	4601      	mov	r1, r0
 800db22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800db26:	f7f3 f803 	bl	8000b30 <__aeabi_fsub>
 800db2a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800db2e:	f7f3 f909 	bl	8000d44 <__aeabi_fmul>
 800db32:	4606      	mov	r6, r0
 800db34:	4950      	ldr	r1, [pc, #320]	; (800dc78 <__ieee754_asinf+0x254>)
 800db36:	f7f3 f905 	bl	8000d44 <__aeabi_fmul>
 800db3a:	4950      	ldr	r1, [pc, #320]	; (800dc7c <__ieee754_asinf+0x258>)
 800db3c:	f7f2 fffa 	bl	8000b34 <__addsf3>
 800db40:	4631      	mov	r1, r6
 800db42:	f7f3 f8ff 	bl	8000d44 <__aeabi_fmul>
 800db46:	494e      	ldr	r1, [pc, #312]	; (800dc80 <__ieee754_asinf+0x25c>)
 800db48:	f7f2 fff2 	bl	8000b30 <__aeabi_fsub>
 800db4c:	4631      	mov	r1, r6
 800db4e:	f7f3 f8f9 	bl	8000d44 <__aeabi_fmul>
 800db52:	494c      	ldr	r1, [pc, #304]	; (800dc84 <__ieee754_asinf+0x260>)
 800db54:	f7f2 ffee 	bl	8000b34 <__addsf3>
 800db58:	4631      	mov	r1, r6
 800db5a:	f7f3 f8f3 	bl	8000d44 <__aeabi_fmul>
 800db5e:	494a      	ldr	r1, [pc, #296]	; (800dc88 <__ieee754_asinf+0x264>)
 800db60:	f7f2 ffe6 	bl	8000b30 <__aeabi_fsub>
 800db64:	4631      	mov	r1, r6
 800db66:	f7f3 f8ed 	bl	8000d44 <__aeabi_fmul>
 800db6a:	4948      	ldr	r1, [pc, #288]	; (800dc8c <__ieee754_asinf+0x268>)
 800db6c:	f7f2 ffe2 	bl	8000b34 <__addsf3>
 800db70:	4631      	mov	r1, r6
 800db72:	f7f3 f8e7 	bl	8000d44 <__aeabi_fmul>
 800db76:	4946      	ldr	r1, [pc, #280]	; (800dc90 <__ieee754_asinf+0x26c>)
 800db78:	4681      	mov	r9, r0
 800db7a:	4630      	mov	r0, r6
 800db7c:	f7f3 f8e2 	bl	8000d44 <__aeabi_fmul>
 800db80:	4944      	ldr	r1, [pc, #272]	; (800dc94 <__ieee754_asinf+0x270>)
 800db82:	f7f2 ffd5 	bl	8000b30 <__aeabi_fsub>
 800db86:	4631      	mov	r1, r6
 800db88:	f7f3 f8dc 	bl	8000d44 <__aeabi_fmul>
 800db8c:	4942      	ldr	r1, [pc, #264]	; (800dc98 <__ieee754_asinf+0x274>)
 800db8e:	f7f2 ffd1 	bl	8000b34 <__addsf3>
 800db92:	4631      	mov	r1, r6
 800db94:	f7f3 f8d6 	bl	8000d44 <__aeabi_fmul>
 800db98:	4940      	ldr	r1, [pc, #256]	; (800dc9c <__ieee754_asinf+0x278>)
 800db9a:	f7f2 ffc9 	bl	8000b30 <__aeabi_fsub>
 800db9e:	4631      	mov	r1, r6
 800dba0:	f7f3 f8d0 	bl	8000d44 <__aeabi_fmul>
 800dba4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dba8:	f7f2 ffc4 	bl	8000b34 <__addsf3>
 800dbac:	4682      	mov	sl, r0
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f000 fa60 	bl	800e074 <__ieee754_sqrtf>
 800dbb4:	4b3a      	ldr	r3, [pc, #232]	; (800dca0 <__ieee754_asinf+0x27c>)
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	4598      	cmp	r8, r3
 800dbba:	dd1a      	ble.n	800dbf2 <__ieee754_asinf+0x1ce>
 800dbbc:	4651      	mov	r1, sl
 800dbbe:	4648      	mov	r0, r9
 800dbc0:	f7f3 f974 	bl	8000eac <__aeabi_fdiv>
 800dbc4:	4639      	mov	r1, r7
 800dbc6:	f7f3 f8bd 	bl	8000d44 <__aeabi_fmul>
 800dbca:	4639      	mov	r1, r7
 800dbcc:	f7f2 ffb2 	bl	8000b34 <__addsf3>
 800dbd0:	4601      	mov	r1, r0
 800dbd2:	f7f2 ffaf 	bl	8000b34 <__addsf3>
 800dbd6:	4933      	ldr	r1, [pc, #204]	; (800dca4 <__ieee754_asinf+0x280>)
 800dbd8:	f7f2 ffac 	bl	8000b34 <__addsf3>
 800dbdc:	4601      	mov	r1, r0
 800dbde:	4823      	ldr	r0, [pc, #140]	; (800dc6c <__ieee754_asinf+0x248>)
 800dbe0:	f7f2 ffa6 	bl	8000b30 <__aeabi_fsub>
 800dbe4:	2d00      	cmp	r5, #0
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	f73f af4a 	bgt.w	800da80 <__ieee754_asinf+0x5c>
 800dbec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dbf0:	e735      	b.n	800da5e <__ieee754_asinf+0x3a>
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800dbf8:	f7f2 ff9c 	bl	8000b34 <__addsf3>
 800dbfc:	4651      	mov	r1, sl
 800dbfe:	4604      	mov	r4, r0
 800dc00:	4648      	mov	r0, r9
 800dc02:	f7f3 f953 	bl	8000eac <__aeabi_fdiv>
 800dc06:	4601      	mov	r1, r0
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f7f3 f89b 	bl	8000d44 <__aeabi_fmul>
 800dc0e:	f028 080f 	bic.w	r8, r8, #15
 800dc12:	4681      	mov	r9, r0
 800dc14:	4641      	mov	r1, r8
 800dc16:	4640      	mov	r0, r8
 800dc18:	f7f3 f894 	bl	8000d44 <__aeabi_fmul>
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f7f2 ff86 	bl	8000b30 <__aeabi_fsub>
 800dc24:	4641      	mov	r1, r8
 800dc26:	4604      	mov	r4, r0
 800dc28:	4638      	mov	r0, r7
 800dc2a:	f7f2 ff83 	bl	8000b34 <__addsf3>
 800dc2e:	4601      	mov	r1, r0
 800dc30:	4620      	mov	r0, r4
 800dc32:	f7f3 f93b 	bl	8000eac <__aeabi_fdiv>
 800dc36:	4601      	mov	r1, r0
 800dc38:	f7f2 ff7c 	bl	8000b34 <__addsf3>
 800dc3c:	4601      	mov	r1, r0
 800dc3e:	480c      	ldr	r0, [pc, #48]	; (800dc70 <__ieee754_asinf+0x24c>)
 800dc40:	f7f2 ff76 	bl	8000b30 <__aeabi_fsub>
 800dc44:	4601      	mov	r1, r0
 800dc46:	4648      	mov	r0, r9
 800dc48:	f7f2 ff72 	bl	8000b30 <__aeabi_fsub>
 800dc4c:	4641      	mov	r1, r8
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4640      	mov	r0, r8
 800dc52:	f7f2 ff6f 	bl	8000b34 <__addsf3>
 800dc56:	4601      	mov	r1, r0
 800dc58:	4813      	ldr	r0, [pc, #76]	; (800dca8 <__ieee754_asinf+0x284>)
 800dc5a:	f7f2 ff69 	bl	8000b30 <__aeabi_fsub>
 800dc5e:	4601      	mov	r1, r0
 800dc60:	4620      	mov	r0, r4
 800dc62:	f7f2 ff65 	bl	8000b30 <__aeabi_fsub>
 800dc66:	4601      	mov	r1, r0
 800dc68:	480f      	ldr	r0, [pc, #60]	; (800dca8 <__ieee754_asinf+0x284>)
 800dc6a:	e7b9      	b.n	800dbe0 <__ieee754_asinf+0x1bc>
 800dc6c:	3fc90fdb 	.word	0x3fc90fdb
 800dc70:	b33bbd2e 	.word	0xb33bbd2e
 800dc74:	7149f2ca 	.word	0x7149f2ca
 800dc78:	3811ef08 	.word	0x3811ef08
 800dc7c:	3a4f7f04 	.word	0x3a4f7f04
 800dc80:	3d241146 	.word	0x3d241146
 800dc84:	3e4e0aa8 	.word	0x3e4e0aa8
 800dc88:	3ea6b090 	.word	0x3ea6b090
 800dc8c:	3e2aaaab 	.word	0x3e2aaaab
 800dc90:	3d9dc62e 	.word	0x3d9dc62e
 800dc94:	3f303361 	.word	0x3f303361
 800dc98:	4001572d 	.word	0x4001572d
 800dc9c:	4019d139 	.word	0x4019d139
 800dca0:	3f799999 	.word	0x3f799999
 800dca4:	333bbd2e 	.word	0x333bbd2e
 800dca8:	3f490fdb 	.word	0x3f490fdb

0800dcac <__ieee754_atan2f>:
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dcb2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	dc05      	bgt.n	800dcc6 <__ieee754_atan2f+0x1a>
 800dcba:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dcbe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dcc2:	4607      	mov	r7, r0
 800dcc4:	dd04      	ble.n	800dcd0 <__ieee754_atan2f+0x24>
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7f2 ff34 	bl	8000b34 <__addsf3>
 800dccc:	4603      	mov	r3, r0
 800dcce:	e011      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dcd0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800dcd4:	d103      	bne.n	800dcde <__ieee754_atan2f+0x32>
 800dcd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcda:	f7fe be43 	b.w	800c964 <atanf>
 800dcde:	178c      	asrs	r4, r1, #30
 800dce0:	f004 0402 	and.w	r4, r4, #2
 800dce4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800dce8:	b932      	cbnz	r2, 800dcf8 <__ieee754_atan2f+0x4c>
 800dcea:	2c02      	cmp	r4, #2
 800dcec:	d04c      	beq.n	800dd88 <__ieee754_atan2f+0xdc>
 800dcee:	2c03      	cmp	r4, #3
 800dcf0:	d100      	bne.n	800dcf4 <__ieee754_atan2f+0x48>
 800dcf2:	4b29      	ldr	r3, [pc, #164]	; (800dd98 <__ieee754_atan2f+0xec>)
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcf8:	b91e      	cbnz	r6, 800dd02 <__ieee754_atan2f+0x56>
 800dcfa:	2f00      	cmp	r7, #0
 800dcfc:	da4a      	bge.n	800dd94 <__ieee754_atan2f+0xe8>
 800dcfe:	4b27      	ldr	r3, [pc, #156]	; (800dd9c <__ieee754_atan2f+0xf0>)
 800dd00:	e7f8      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd02:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dd06:	d10e      	bne.n	800dd26 <__ieee754_atan2f+0x7a>
 800dd08:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dd0c:	f104 34ff 	add.w	r4, r4, #4294967295
 800dd10:	d105      	bne.n	800dd1e <__ieee754_atan2f+0x72>
 800dd12:	2c02      	cmp	r4, #2
 800dd14:	d83a      	bhi.n	800dd8c <__ieee754_atan2f+0xe0>
 800dd16:	4b22      	ldr	r3, [pc, #136]	; (800dda0 <__ieee754_atan2f+0xf4>)
 800dd18:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dd1c:	e7ea      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd1e:	2c02      	cmp	r4, #2
 800dd20:	d836      	bhi.n	800dd90 <__ieee754_atan2f+0xe4>
 800dd22:	4b20      	ldr	r3, [pc, #128]	; (800dda4 <__ieee754_atan2f+0xf8>)
 800dd24:	e7f8      	b.n	800dd18 <__ieee754_atan2f+0x6c>
 800dd26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dd2a:	d0e6      	beq.n	800dcfa <__ieee754_atan2f+0x4e>
 800dd2c:	1b92      	subs	r2, r2, r6
 800dd2e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800dd32:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800dd36:	da17      	bge.n	800dd68 <__ieee754_atan2f+0xbc>
 800dd38:	2900      	cmp	r1, #0
 800dd3a:	da01      	bge.n	800dd40 <__ieee754_atan2f+0x94>
 800dd3c:	303c      	adds	r0, #60	; 0x3c
 800dd3e:	db15      	blt.n	800dd6c <__ieee754_atan2f+0xc0>
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7f3 f8b3 	bl	8000eac <__aeabi_fdiv>
 800dd46:	f7fe ff4d 	bl	800cbe4 <fabsf>
 800dd4a:	f7fe fe0b 	bl	800c964 <atanf>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2c01      	cmp	r4, #1
 800dd52:	d00d      	beq.n	800dd70 <__ieee754_atan2f+0xc4>
 800dd54:	2c02      	cmp	r4, #2
 800dd56:	d00e      	beq.n	800dd76 <__ieee754_atan2f+0xca>
 800dd58:	2c00      	cmp	r4, #0
 800dd5a:	d0cb      	beq.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd5c:	4912      	ldr	r1, [pc, #72]	; (800dda8 <__ieee754_atan2f+0xfc>)
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7f2 fee8 	bl	8000b34 <__addsf3>
 800dd64:	4911      	ldr	r1, [pc, #68]	; (800ddac <__ieee754_atan2f+0x100>)
 800dd66:	e00c      	b.n	800dd82 <__ieee754_atan2f+0xd6>
 800dd68:	4b11      	ldr	r3, [pc, #68]	; (800ddb0 <__ieee754_atan2f+0x104>)
 800dd6a:	e7f1      	b.n	800dd50 <__ieee754_atan2f+0xa4>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	e7ef      	b.n	800dd50 <__ieee754_atan2f+0xa4>
 800dd70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd74:	e7be      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd76:	490c      	ldr	r1, [pc, #48]	; (800dda8 <__ieee754_atan2f+0xfc>)
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7f2 fedb 	bl	8000b34 <__addsf3>
 800dd7e:	4601      	mov	r1, r0
 800dd80:	480a      	ldr	r0, [pc, #40]	; (800ddac <__ieee754_atan2f+0x100>)
 800dd82:	f7f2 fed5 	bl	8000b30 <__aeabi_fsub>
 800dd86:	e7a1      	b.n	800dccc <__ieee754_atan2f+0x20>
 800dd88:	4b08      	ldr	r3, [pc, #32]	; (800ddac <__ieee754_atan2f+0x100>)
 800dd8a:	e7b3      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd8c:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <__ieee754_atan2f+0x108>)
 800dd8e:	e7b1      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd90:	2300      	movs	r3, #0
 800dd92:	e7af      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd94:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <__ieee754_atan2f+0x104>)
 800dd96:	e7ad      	b.n	800dcf4 <__ieee754_atan2f+0x48>
 800dd98:	c0490fdb 	.word	0xc0490fdb
 800dd9c:	bfc90fdb 	.word	0xbfc90fdb
 800dda0:	0800fe88 	.word	0x0800fe88
 800dda4:	0800fe94 	.word	0x0800fe94
 800dda8:	33bbbd2e 	.word	0x33bbbd2e
 800ddac:	40490fdb 	.word	0x40490fdb
 800ddb0:	3fc90fdb 	.word	0x3fc90fdb
 800ddb4:	3f490fdb 	.word	0x3f490fdb

0800ddb8 <__ieee754_rem_pio2f>:
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	4aa0      	ldr	r2, [pc, #640]	; (800e040 <__ieee754_rem_pio2f+0x288>)
 800ddbe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ddc2:	4296      	cmp	r6, r2
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	4682      	mov	sl, r0
 800ddc8:	b087      	sub	sp, #28
 800ddca:	dc04      	bgt.n	800ddd6 <__ieee754_rem_pio2f+0x1e>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	6008      	str	r0, [r1, #0]
 800ddd0:	604b      	str	r3, [r1, #4]
 800ddd2:	2500      	movs	r5, #0
 800ddd4:	e01a      	b.n	800de0c <__ieee754_rem_pio2f+0x54>
 800ddd6:	4a9b      	ldr	r2, [pc, #620]	; (800e044 <__ieee754_rem_pio2f+0x28c>)
 800ddd8:	4296      	cmp	r6, r2
 800ddda:	dc4b      	bgt.n	800de74 <__ieee754_rem_pio2f+0xbc>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	499a      	ldr	r1, [pc, #616]	; (800e048 <__ieee754_rem_pio2f+0x290>)
 800dde0:	4f9a      	ldr	r7, [pc, #616]	; (800e04c <__ieee754_rem_pio2f+0x294>)
 800dde2:	f026 060f 	bic.w	r6, r6, #15
 800dde6:	dd23      	ble.n	800de30 <__ieee754_rem_pio2f+0x78>
 800dde8:	f7f2 fea2 	bl	8000b30 <__aeabi_fsub>
 800ddec:	42be      	cmp	r6, r7
 800ddee:	4605      	mov	r5, r0
 800ddf0:	d010      	beq.n	800de14 <__ieee754_rem_pio2f+0x5c>
 800ddf2:	4997      	ldr	r1, [pc, #604]	; (800e050 <__ieee754_rem_pio2f+0x298>)
 800ddf4:	f7f2 fe9c 	bl	8000b30 <__aeabi_fsub>
 800ddf8:	4601      	mov	r1, r0
 800ddfa:	6020      	str	r0, [r4, #0]
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f7f2 fe97 	bl	8000b30 <__aeabi_fsub>
 800de02:	4993      	ldr	r1, [pc, #588]	; (800e050 <__ieee754_rem_pio2f+0x298>)
 800de04:	f7f2 fe94 	bl	8000b30 <__aeabi_fsub>
 800de08:	2501      	movs	r5, #1
 800de0a:	6060      	str	r0, [r4, #4]
 800de0c:	4628      	mov	r0, r5
 800de0e:	b007      	add	sp, #28
 800de10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de14:	498f      	ldr	r1, [pc, #572]	; (800e054 <__ieee754_rem_pio2f+0x29c>)
 800de16:	f7f2 fe8b 	bl	8000b30 <__aeabi_fsub>
 800de1a:	498f      	ldr	r1, [pc, #572]	; (800e058 <__ieee754_rem_pio2f+0x2a0>)
 800de1c:	4605      	mov	r5, r0
 800de1e:	f7f2 fe87 	bl	8000b30 <__aeabi_fsub>
 800de22:	4601      	mov	r1, r0
 800de24:	6020      	str	r0, [r4, #0]
 800de26:	4628      	mov	r0, r5
 800de28:	f7f2 fe82 	bl	8000b30 <__aeabi_fsub>
 800de2c:	498a      	ldr	r1, [pc, #552]	; (800e058 <__ieee754_rem_pio2f+0x2a0>)
 800de2e:	e7e9      	b.n	800de04 <__ieee754_rem_pio2f+0x4c>
 800de30:	f7f2 fe80 	bl	8000b34 <__addsf3>
 800de34:	42be      	cmp	r6, r7
 800de36:	4605      	mov	r5, r0
 800de38:	d00e      	beq.n	800de58 <__ieee754_rem_pio2f+0xa0>
 800de3a:	4985      	ldr	r1, [pc, #532]	; (800e050 <__ieee754_rem_pio2f+0x298>)
 800de3c:	f7f2 fe7a 	bl	8000b34 <__addsf3>
 800de40:	4601      	mov	r1, r0
 800de42:	6020      	str	r0, [r4, #0]
 800de44:	4628      	mov	r0, r5
 800de46:	f7f2 fe73 	bl	8000b30 <__aeabi_fsub>
 800de4a:	4981      	ldr	r1, [pc, #516]	; (800e050 <__ieee754_rem_pio2f+0x298>)
 800de4c:	f7f2 fe72 	bl	8000b34 <__addsf3>
 800de50:	f04f 35ff 	mov.w	r5, #4294967295
 800de54:	6060      	str	r0, [r4, #4]
 800de56:	e7d9      	b.n	800de0c <__ieee754_rem_pio2f+0x54>
 800de58:	497e      	ldr	r1, [pc, #504]	; (800e054 <__ieee754_rem_pio2f+0x29c>)
 800de5a:	f7f2 fe6b 	bl	8000b34 <__addsf3>
 800de5e:	497e      	ldr	r1, [pc, #504]	; (800e058 <__ieee754_rem_pio2f+0x2a0>)
 800de60:	4605      	mov	r5, r0
 800de62:	f7f2 fe67 	bl	8000b34 <__addsf3>
 800de66:	4601      	mov	r1, r0
 800de68:	6020      	str	r0, [r4, #0]
 800de6a:	4628      	mov	r0, r5
 800de6c:	f7f2 fe60 	bl	8000b30 <__aeabi_fsub>
 800de70:	4979      	ldr	r1, [pc, #484]	; (800e058 <__ieee754_rem_pio2f+0x2a0>)
 800de72:	e7eb      	b.n	800de4c <__ieee754_rem_pio2f+0x94>
 800de74:	4a79      	ldr	r2, [pc, #484]	; (800e05c <__ieee754_rem_pio2f+0x2a4>)
 800de76:	4296      	cmp	r6, r2
 800de78:	f300 8091 	bgt.w	800df9e <__ieee754_rem_pio2f+0x1e6>
 800de7c:	f7fe feb2 	bl	800cbe4 <fabsf>
 800de80:	4977      	ldr	r1, [pc, #476]	; (800e060 <__ieee754_rem_pio2f+0x2a8>)
 800de82:	4607      	mov	r7, r0
 800de84:	f7f2 ff5e 	bl	8000d44 <__aeabi_fmul>
 800de88:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800de8c:	f7f2 fe52 	bl	8000b34 <__addsf3>
 800de90:	f7f3 f934 	bl	80010fc <__aeabi_f2iz>
 800de94:	4605      	mov	r5, r0
 800de96:	f7f2 ff01 	bl	8000c9c <__aeabi_i2f>
 800de9a:	496b      	ldr	r1, [pc, #428]	; (800e048 <__ieee754_rem_pio2f+0x290>)
 800de9c:	4681      	mov	r9, r0
 800de9e:	f7f2 ff51 	bl	8000d44 <__aeabi_fmul>
 800dea2:	4601      	mov	r1, r0
 800dea4:	4638      	mov	r0, r7
 800dea6:	f7f2 fe43 	bl	8000b30 <__aeabi_fsub>
 800deaa:	4969      	ldr	r1, [pc, #420]	; (800e050 <__ieee754_rem_pio2f+0x298>)
 800deac:	4680      	mov	r8, r0
 800deae:	4648      	mov	r0, r9
 800deb0:	f7f2 ff48 	bl	8000d44 <__aeabi_fmul>
 800deb4:	2d1f      	cmp	r5, #31
 800deb6:	4607      	mov	r7, r0
 800deb8:	dc0c      	bgt.n	800ded4 <__ieee754_rem_pio2f+0x11c>
 800deba:	4a6a      	ldr	r2, [pc, #424]	; (800e064 <__ieee754_rem_pio2f+0x2ac>)
 800debc:	1e69      	subs	r1, r5, #1
 800debe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dec2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d004      	beq.n	800ded4 <__ieee754_rem_pio2f+0x11c>
 800deca:	4639      	mov	r1, r7
 800decc:	4640      	mov	r0, r8
 800dece:	f7f2 fe2f 	bl	8000b30 <__aeabi_fsub>
 800ded2:	e00b      	b.n	800deec <__ieee754_rem_pio2f+0x134>
 800ded4:	4639      	mov	r1, r7
 800ded6:	4640      	mov	r0, r8
 800ded8:	f7f2 fe2a 	bl	8000b30 <__aeabi_fsub>
 800dedc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dee0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800dee4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800dee8:	2e08      	cmp	r6, #8
 800deea:	dc01      	bgt.n	800def0 <__ieee754_rem_pio2f+0x138>
 800deec:	6020      	str	r0, [r4, #0]
 800deee:	e026      	b.n	800df3e <__ieee754_rem_pio2f+0x186>
 800def0:	4958      	ldr	r1, [pc, #352]	; (800e054 <__ieee754_rem_pio2f+0x29c>)
 800def2:	4648      	mov	r0, r9
 800def4:	f7f2 ff26 	bl	8000d44 <__aeabi_fmul>
 800def8:	4607      	mov	r7, r0
 800defa:	4601      	mov	r1, r0
 800defc:	4640      	mov	r0, r8
 800defe:	f7f2 fe17 	bl	8000b30 <__aeabi_fsub>
 800df02:	4601      	mov	r1, r0
 800df04:	4606      	mov	r6, r0
 800df06:	4640      	mov	r0, r8
 800df08:	f7f2 fe12 	bl	8000b30 <__aeabi_fsub>
 800df0c:	4639      	mov	r1, r7
 800df0e:	f7f2 fe0f 	bl	8000b30 <__aeabi_fsub>
 800df12:	4607      	mov	r7, r0
 800df14:	4950      	ldr	r1, [pc, #320]	; (800e058 <__ieee754_rem_pio2f+0x2a0>)
 800df16:	4648      	mov	r0, r9
 800df18:	f7f2 ff14 	bl	8000d44 <__aeabi_fmul>
 800df1c:	4639      	mov	r1, r7
 800df1e:	f7f2 fe07 	bl	8000b30 <__aeabi_fsub>
 800df22:	4601      	mov	r1, r0
 800df24:	4607      	mov	r7, r0
 800df26:	4630      	mov	r0, r6
 800df28:	f7f2 fe02 	bl	8000b30 <__aeabi_fsub>
 800df2c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800df30:	ebab 0b03 	sub.w	fp, fp, r3
 800df34:	f1bb 0f19 	cmp.w	fp, #25
 800df38:	dc16      	bgt.n	800df68 <__ieee754_rem_pio2f+0x1b0>
 800df3a:	46b0      	mov	r8, r6
 800df3c:	6020      	str	r0, [r4, #0]
 800df3e:	6826      	ldr	r6, [r4, #0]
 800df40:	4640      	mov	r0, r8
 800df42:	4631      	mov	r1, r6
 800df44:	f7f2 fdf4 	bl	8000b30 <__aeabi_fsub>
 800df48:	4639      	mov	r1, r7
 800df4a:	f7f2 fdf1 	bl	8000b30 <__aeabi_fsub>
 800df4e:	f1ba 0f00 	cmp.w	sl, #0
 800df52:	6060      	str	r0, [r4, #4]
 800df54:	f6bf af5a 	bge.w	800de0c <__ieee754_rem_pio2f+0x54>
 800df58:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800df5c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800df60:	6026      	str	r6, [r4, #0]
 800df62:	6060      	str	r0, [r4, #4]
 800df64:	426d      	negs	r5, r5
 800df66:	e751      	b.n	800de0c <__ieee754_rem_pio2f+0x54>
 800df68:	493f      	ldr	r1, [pc, #252]	; (800e068 <__ieee754_rem_pio2f+0x2b0>)
 800df6a:	4648      	mov	r0, r9
 800df6c:	f7f2 feea 	bl	8000d44 <__aeabi_fmul>
 800df70:	4607      	mov	r7, r0
 800df72:	4601      	mov	r1, r0
 800df74:	4630      	mov	r0, r6
 800df76:	f7f2 fddb 	bl	8000b30 <__aeabi_fsub>
 800df7a:	4601      	mov	r1, r0
 800df7c:	4680      	mov	r8, r0
 800df7e:	4630      	mov	r0, r6
 800df80:	f7f2 fdd6 	bl	8000b30 <__aeabi_fsub>
 800df84:	4639      	mov	r1, r7
 800df86:	f7f2 fdd3 	bl	8000b30 <__aeabi_fsub>
 800df8a:	4606      	mov	r6, r0
 800df8c:	4937      	ldr	r1, [pc, #220]	; (800e06c <__ieee754_rem_pio2f+0x2b4>)
 800df8e:	4648      	mov	r0, r9
 800df90:	f7f2 fed8 	bl	8000d44 <__aeabi_fmul>
 800df94:	4631      	mov	r1, r6
 800df96:	f7f2 fdcb 	bl	8000b30 <__aeabi_fsub>
 800df9a:	4607      	mov	r7, r0
 800df9c:	e795      	b.n	800deca <__ieee754_rem_pio2f+0x112>
 800df9e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dfa2:	db05      	blt.n	800dfb0 <__ieee754_rem_pio2f+0x1f8>
 800dfa4:	4601      	mov	r1, r0
 800dfa6:	f7f2 fdc3 	bl	8000b30 <__aeabi_fsub>
 800dfaa:	6060      	str	r0, [r4, #4]
 800dfac:	6020      	str	r0, [r4, #0]
 800dfae:	e710      	b.n	800ddd2 <__ieee754_rem_pio2f+0x1a>
 800dfb0:	15f7      	asrs	r7, r6, #23
 800dfb2:	3f86      	subs	r7, #134	; 0x86
 800dfb4:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f7f3 f89f 	bl	80010fc <__aeabi_f2iz>
 800dfbe:	f7f2 fe6d 	bl	8000c9c <__aeabi_i2f>
 800dfc2:	4601      	mov	r1, r0
 800dfc4:	9003      	str	r0, [sp, #12]
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f7f2 fdb2 	bl	8000b30 <__aeabi_fsub>
 800dfcc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800dfd0:	f7f2 feb8 	bl	8000d44 <__aeabi_fmul>
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	f7f3 f891 	bl	80010fc <__aeabi_f2iz>
 800dfda:	f7f2 fe5f 	bl	8000c9c <__aeabi_i2f>
 800dfde:	4601      	mov	r1, r0
 800dfe0:	9004      	str	r0, [sp, #16]
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	f7f2 fda3 	bl	8000b30 <__aeabi_fsub>
 800dfea:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800dfee:	f7f2 fea9 	bl	8000d44 <__aeabi_fmul>
 800dff2:	2100      	movs	r1, #0
 800dff4:	9005      	str	r0, [sp, #20]
 800dff6:	f7f3 f839 	bl	800106c <__aeabi_fcmpeq>
 800dffa:	b1f0      	cbz	r0, 800e03a <__ieee754_rem_pio2f+0x282>
 800dffc:	2100      	movs	r1, #0
 800dffe:	4628      	mov	r0, r5
 800e000:	f7f3 f834 	bl	800106c <__aeabi_fcmpeq>
 800e004:	2800      	cmp	r0, #0
 800e006:	bf14      	ite	ne
 800e008:	2301      	movne	r3, #1
 800e00a:	2302      	moveq	r3, #2
 800e00c:	4a18      	ldr	r2, [pc, #96]	; (800e070 <__ieee754_rem_pio2f+0x2b8>)
 800e00e:	4621      	mov	r1, r4
 800e010:	9201      	str	r2, [sp, #4]
 800e012:	2202      	movs	r2, #2
 800e014:	a803      	add	r0, sp, #12
 800e016:	9200      	str	r2, [sp, #0]
 800e018:	463a      	mov	r2, r7
 800e01a:	f000 f8fd 	bl	800e218 <__kernel_rem_pio2f>
 800e01e:	f1ba 0f00 	cmp.w	sl, #0
 800e022:	4605      	mov	r5, r0
 800e024:	f6bf aef2 	bge.w	800de0c <__ieee754_rem_pio2f+0x54>
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e02e:	6023      	str	r3, [r4, #0]
 800e030:	6863      	ldr	r3, [r4, #4]
 800e032:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e036:	6063      	str	r3, [r4, #4]
 800e038:	e794      	b.n	800df64 <__ieee754_rem_pio2f+0x1ac>
 800e03a:	2303      	movs	r3, #3
 800e03c:	e7e6      	b.n	800e00c <__ieee754_rem_pio2f+0x254>
 800e03e:	bf00      	nop
 800e040:	3f490fd8 	.word	0x3f490fd8
 800e044:	4016cbe3 	.word	0x4016cbe3
 800e048:	3fc90f80 	.word	0x3fc90f80
 800e04c:	3fc90fd0 	.word	0x3fc90fd0
 800e050:	37354443 	.word	0x37354443
 800e054:	37354400 	.word	0x37354400
 800e058:	2e85a308 	.word	0x2e85a308
 800e05c:	43490f80 	.word	0x43490f80
 800e060:	3f22f984 	.word	0x3f22f984
 800e064:	0800fea0 	.word	0x0800fea0
 800e068:	2e85a300 	.word	0x2e85a300
 800e06c:	248d3132 	.word	0x248d3132
 800e070:	0800ff20 	.word	0x0800ff20

0800e074 <__ieee754_sqrtf>:
 800e074:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e078:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	4603      	mov	r3, r0
 800e080:	4604      	mov	r4, r0
 800e082:	d309      	bcc.n	800e098 <__ieee754_sqrtf+0x24>
 800e084:	4601      	mov	r1, r0
 800e086:	f7f2 fe5d 	bl	8000d44 <__aeabi_fmul>
 800e08a:	4601      	mov	r1, r0
 800e08c:	4620      	mov	r0, r4
 800e08e:	f7f2 fd51 	bl	8000b34 <__addsf3>
 800e092:	4604      	mov	r4, r0
 800e094:	4620      	mov	r0, r4
 800e096:	bd70      	pop	{r4, r5, r6, pc}
 800e098:	2a00      	cmp	r2, #0
 800e09a:	d0fb      	beq.n	800e094 <__ieee754_sqrtf+0x20>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	da06      	bge.n	800e0ae <__ieee754_sqrtf+0x3a>
 800e0a0:	4601      	mov	r1, r0
 800e0a2:	f7f2 fd45 	bl	8000b30 <__aeabi_fsub>
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	f7f2 ff00 	bl	8000eac <__aeabi_fdiv>
 800e0ac:	e7f1      	b.n	800e092 <__ieee754_sqrtf+0x1e>
 800e0ae:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e0b2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e0b6:	d029      	beq.n	800e10c <__ieee754_sqrtf+0x98>
 800e0b8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e0bc:	07cb      	lsls	r3, r1, #31
 800e0be:	f04f 0300 	mov.w	r3, #0
 800e0c2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e0c6:	f04f 0419 	mov.w	r4, #25
 800e0ca:	461e      	mov	r6, r3
 800e0cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e0d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e0d4:	bf58      	it	pl
 800e0d6:	0052      	lslpl	r2, r2, #1
 800e0d8:	1040      	asrs	r0, r0, #1
 800e0da:	0052      	lsls	r2, r2, #1
 800e0dc:	1875      	adds	r5, r6, r1
 800e0de:	4295      	cmp	r5, r2
 800e0e0:	bfde      	ittt	le
 800e0e2:	186e      	addle	r6, r5, r1
 800e0e4:	1b52      	suble	r2, r2, r5
 800e0e6:	185b      	addle	r3, r3, r1
 800e0e8:	3c01      	subs	r4, #1
 800e0ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e0ee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e0f2:	d1f3      	bne.n	800e0dc <__ieee754_sqrtf+0x68>
 800e0f4:	b112      	cbz	r2, 800e0fc <__ieee754_sqrtf+0x88>
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	f023 0301 	bic.w	r3, r3, #1
 800e0fc:	105c      	asrs	r4, r3, #1
 800e0fe:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e102:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e106:	e7c5      	b.n	800e094 <__ieee754_sqrtf+0x20>
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	3201      	adds	r2, #1
 800e10c:	0218      	lsls	r0, r3, #8
 800e10e:	d5fb      	bpl.n	800e108 <__ieee754_sqrtf+0x94>
 800e110:	3a01      	subs	r2, #1
 800e112:	1a89      	subs	r1, r1, r2
 800e114:	e7d0      	b.n	800e0b8 <__ieee754_sqrtf+0x44>
	...

0800e118 <__kernel_cosf>:
 800e118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e11c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800e120:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e124:	4606      	mov	r6, r0
 800e126:	4688      	mov	r8, r1
 800e128:	da03      	bge.n	800e132 <__kernel_cosf+0x1a>
 800e12a:	f7f2 ffe7 	bl	80010fc <__aeabi_f2iz>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d05c      	beq.n	800e1ec <__kernel_cosf+0xd4>
 800e132:	4631      	mov	r1, r6
 800e134:	4630      	mov	r0, r6
 800e136:	f7f2 fe05 	bl	8000d44 <__aeabi_fmul>
 800e13a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e13e:	4605      	mov	r5, r0
 800e140:	f7f2 fe00 	bl	8000d44 <__aeabi_fmul>
 800e144:	492b      	ldr	r1, [pc, #172]	; (800e1f4 <__kernel_cosf+0xdc>)
 800e146:	4607      	mov	r7, r0
 800e148:	4628      	mov	r0, r5
 800e14a:	f7f2 fdfb 	bl	8000d44 <__aeabi_fmul>
 800e14e:	492a      	ldr	r1, [pc, #168]	; (800e1f8 <__kernel_cosf+0xe0>)
 800e150:	f7f2 fcf0 	bl	8000b34 <__addsf3>
 800e154:	4629      	mov	r1, r5
 800e156:	f7f2 fdf5 	bl	8000d44 <__aeabi_fmul>
 800e15a:	4928      	ldr	r1, [pc, #160]	; (800e1fc <__kernel_cosf+0xe4>)
 800e15c:	f7f2 fce8 	bl	8000b30 <__aeabi_fsub>
 800e160:	4629      	mov	r1, r5
 800e162:	f7f2 fdef 	bl	8000d44 <__aeabi_fmul>
 800e166:	4926      	ldr	r1, [pc, #152]	; (800e200 <__kernel_cosf+0xe8>)
 800e168:	f7f2 fce4 	bl	8000b34 <__addsf3>
 800e16c:	4629      	mov	r1, r5
 800e16e:	f7f2 fde9 	bl	8000d44 <__aeabi_fmul>
 800e172:	4924      	ldr	r1, [pc, #144]	; (800e204 <__kernel_cosf+0xec>)
 800e174:	f7f2 fcdc 	bl	8000b30 <__aeabi_fsub>
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 fde3 	bl	8000d44 <__aeabi_fmul>
 800e17e:	4922      	ldr	r1, [pc, #136]	; (800e208 <__kernel_cosf+0xf0>)
 800e180:	f7f2 fcd8 	bl	8000b34 <__addsf3>
 800e184:	4629      	mov	r1, r5
 800e186:	f7f2 fddd 	bl	8000d44 <__aeabi_fmul>
 800e18a:	4629      	mov	r1, r5
 800e18c:	f7f2 fdda 	bl	8000d44 <__aeabi_fmul>
 800e190:	4641      	mov	r1, r8
 800e192:	4605      	mov	r5, r0
 800e194:	4630      	mov	r0, r6
 800e196:	f7f2 fdd5 	bl	8000d44 <__aeabi_fmul>
 800e19a:	4601      	mov	r1, r0
 800e19c:	4628      	mov	r0, r5
 800e19e:	f7f2 fcc7 	bl	8000b30 <__aeabi_fsub>
 800e1a2:	4b1a      	ldr	r3, [pc, #104]	; (800e20c <__kernel_cosf+0xf4>)
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	429c      	cmp	r4, r3
 800e1a8:	dc0a      	bgt.n	800e1c0 <__kernel_cosf+0xa8>
 800e1aa:	4601      	mov	r1, r0
 800e1ac:	4638      	mov	r0, r7
 800e1ae:	f7f2 fcbf 	bl	8000b30 <__aeabi_fsub>
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1b8:	f7f2 fcba 	bl	8000b30 <__aeabi_fsub>
 800e1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c0:	4b13      	ldr	r3, [pc, #76]	; (800e210 <__kernel_cosf+0xf8>)
 800e1c2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1c6:	429c      	cmp	r4, r3
 800e1c8:	bfcc      	ite	gt
 800e1ca:	4c12      	ldrgt	r4, [pc, #72]	; (800e214 <__kernel_cosf+0xfc>)
 800e1cc:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	f7f2 fcad 	bl	8000b30 <__aeabi_fsub>
 800e1d6:	4621      	mov	r1, r4
 800e1d8:	4606      	mov	r6, r0
 800e1da:	4638      	mov	r0, r7
 800e1dc:	f7f2 fca8 	bl	8000b30 <__aeabi_fsub>
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	f7f2 fca5 	bl	8000b30 <__aeabi_fsub>
 800e1e6:	4601      	mov	r1, r0
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	e7e5      	b.n	800e1b8 <__kernel_cosf+0xa0>
 800e1ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1f0:	e7e4      	b.n	800e1bc <__kernel_cosf+0xa4>
 800e1f2:	bf00      	nop
 800e1f4:	ad47d74e 	.word	0xad47d74e
 800e1f8:	310f74f6 	.word	0x310f74f6
 800e1fc:	3493f27c 	.word	0x3493f27c
 800e200:	37d00d01 	.word	0x37d00d01
 800e204:	3ab60b61 	.word	0x3ab60b61
 800e208:	3d2aaaab 	.word	0x3d2aaaab
 800e20c:	3e999999 	.word	0x3e999999
 800e210:	3f480000 	.word	0x3f480000
 800e214:	3e900000 	.word	0x3e900000

0800e218 <__kernel_rem_pio2f>:
 800e218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21c:	b0db      	sub	sp, #364	; 0x16c
 800e21e:	9202      	str	r2, [sp, #8]
 800e220:	9304      	str	r3, [sp, #16]
 800e222:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e224:	4bc5      	ldr	r3, [pc, #788]	; (800e53c <__kernel_rem_pio2f+0x324>)
 800e226:	9005      	str	r0, [sp, #20]
 800e228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e22c:	9100      	str	r1, [sp, #0]
 800e22e:	9301      	str	r3, [sp, #4]
 800e230:	9b04      	ldr	r3, [sp, #16]
 800e232:	3b01      	subs	r3, #1
 800e234:	9303      	str	r3, [sp, #12]
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	1d1a      	adds	r2, r3, #4
 800e23a:	f2c0 809b 	blt.w	800e374 <__kernel_rem_pio2f+0x15c>
 800e23e:	1edc      	subs	r4, r3, #3
 800e240:	bf48      	it	mi
 800e242:	1d1c      	addmi	r4, r3, #4
 800e244:	10e4      	asrs	r4, r4, #3
 800e246:	2500      	movs	r5, #0
 800e248:	f04f 0a00 	mov.w	sl, #0
 800e24c:	1c67      	adds	r7, r4, #1
 800e24e:	00fb      	lsls	r3, r7, #3
 800e250:	9306      	str	r3, [sp, #24]
 800e252:	9b02      	ldr	r3, [sp, #8]
 800e254:	9a03      	ldr	r2, [sp, #12]
 800e256:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800e25a:	9b01      	ldr	r3, [sp, #4]
 800e25c:	1aa6      	subs	r6, r4, r2
 800e25e:	eb03 0802 	add.w	r8, r3, r2
 800e262:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e264:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800e268:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800e26c:	4545      	cmp	r5, r8
 800e26e:	f340 8083 	ble.w	800e378 <__kernel_rem_pio2f+0x160>
 800e272:	f04f 0800 	mov.w	r8, #0
 800e276:	f04f 0b00 	mov.w	fp, #0
 800e27a:	9b04      	ldr	r3, [sp, #16]
 800e27c:	aa1e      	add	r2, sp, #120	; 0x78
 800e27e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e282:	ab46      	add	r3, sp, #280	; 0x118
 800e284:	9a01      	ldr	r2, [sp, #4]
 800e286:	4590      	cmp	r8, r2
 800e288:	f340 809c 	ble.w	800e3c4 <__kernel_rem_pio2f+0x1ac>
 800e28c:	4613      	mov	r3, r2
 800e28e:	aa0a      	add	r2, sp, #40	; 0x28
 800e290:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e294:	9308      	str	r3, [sp, #32]
 800e296:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e298:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e29c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e2a0:	9307      	str	r3, [sp, #28]
 800e2a2:	ad0a      	add	r5, sp, #40	; 0x28
 800e2a4:	462e      	mov	r6, r5
 800e2a6:	46c3      	mov	fp, r8
 800e2a8:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800e2ac:	ab5a      	add	r3, sp, #360	; 0x168
 800e2ae:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e2b2:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800e2b6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800e2ba:	f1bb 0f00 	cmp.w	fp, #0
 800e2be:	f300 8086 	bgt.w	800e3ce <__kernel_rem_pio2f+0x1b6>
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 fc3b 	bl	800eb40 <scalbnf>
 800e2ca:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	f7f2 fd38 	bl	8000d44 <__aeabi_fmul>
 800e2d4:	f000 fbee 	bl	800eab4 <floorf>
 800e2d8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800e2dc:	f7f2 fd32 	bl	8000d44 <__aeabi_fmul>
 800e2e0:	4601      	mov	r1, r0
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f7f2 fc24 	bl	8000b30 <__aeabi_fsub>
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	f7f2 ff07 	bl	80010fc <__aeabi_f2iz>
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	f7f2 fcd4 	bl	8000c9c <__aeabi_i2f>
 800e2f4:	4601      	mov	r1, r0
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f7f2 fc1a 	bl	8000b30 <__aeabi_fsub>
 800e2fc:	2f00      	cmp	r7, #0
 800e2fe:	4681      	mov	r9, r0
 800e300:	f340 8084 	ble.w	800e40c <__kernel_rem_pio2f+0x1f4>
 800e304:	f108 32ff 	add.w	r2, r8, #4294967295
 800e308:	ab0a      	add	r3, sp, #40	; 0x28
 800e30a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800e30e:	f1c7 0108 	rsb	r1, r7, #8
 800e312:	fa44 f301 	asr.w	r3, r4, r1
 800e316:	441e      	add	r6, r3
 800e318:	408b      	lsls	r3, r1
 800e31a:	1ae4      	subs	r4, r4, r3
 800e31c:	f1c7 0007 	rsb	r0, r7, #7
 800e320:	ab0a      	add	r3, sp, #40	; 0x28
 800e322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e326:	4104      	asrs	r4, r0
 800e328:	2c00      	cmp	r4, #0
 800e32a:	dd7e      	ble.n	800e42a <__kernel_rem_pio2f+0x212>
 800e32c:	2200      	movs	r2, #0
 800e32e:	4692      	mov	sl, r2
 800e330:	3601      	adds	r6, #1
 800e332:	4590      	cmp	r8, r2
 800e334:	f300 80b0 	bgt.w	800e498 <__kernel_rem_pio2f+0x280>
 800e338:	2f00      	cmp	r7, #0
 800e33a:	dd05      	ble.n	800e348 <__kernel_rem_pio2f+0x130>
 800e33c:	2f01      	cmp	r7, #1
 800e33e:	f000 80bd 	beq.w	800e4bc <__kernel_rem_pio2f+0x2a4>
 800e342:	2f02      	cmp	r7, #2
 800e344:	f000 80c5 	beq.w	800e4d2 <__kernel_rem_pio2f+0x2ba>
 800e348:	2c02      	cmp	r4, #2
 800e34a:	d16e      	bne.n	800e42a <__kernel_rem_pio2f+0x212>
 800e34c:	4649      	mov	r1, r9
 800e34e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e352:	f7f2 fbed 	bl	8000b30 <__aeabi_fsub>
 800e356:	4681      	mov	r9, r0
 800e358:	f1ba 0f00 	cmp.w	sl, #0
 800e35c:	d065      	beq.n	800e42a <__kernel_rem_pio2f+0x212>
 800e35e:	4639      	mov	r1, r7
 800e360:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e364:	f000 fbec 	bl	800eb40 <scalbnf>
 800e368:	4601      	mov	r1, r0
 800e36a:	4648      	mov	r0, r9
 800e36c:	f7f2 fbe0 	bl	8000b30 <__aeabi_fsub>
 800e370:	4681      	mov	r9, r0
 800e372:	e05a      	b.n	800e42a <__kernel_rem_pio2f+0x212>
 800e374:	2400      	movs	r4, #0
 800e376:	e766      	b.n	800e246 <__kernel_rem_pio2f+0x2e>
 800e378:	42ee      	cmn	r6, r5
 800e37a:	d407      	bmi.n	800e38c <__kernel_rem_pio2f+0x174>
 800e37c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e380:	f7f2 fc8c 	bl	8000c9c <__aeabi_i2f>
 800e384:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800e388:	3501      	adds	r5, #1
 800e38a:	e76f      	b.n	800e26c <__kernel_rem_pio2f+0x54>
 800e38c:	4650      	mov	r0, sl
 800e38e:	e7f9      	b.n	800e384 <__kernel_rem_pio2f+0x16c>
 800e390:	9b05      	ldr	r3, [sp, #20]
 800e392:	f8da 1000 	ldr.w	r1, [sl]
 800e396:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800e39a:	f7f2 fcd3 	bl	8000d44 <__aeabi_fmul>
 800e39e:	4601      	mov	r1, r0
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f7f2 fbc7 	bl	8000b34 <__addsf3>
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	f109 0901 	add.w	r9, r9, #1
 800e3ac:	ab46      	add	r3, sp, #280	; 0x118
 800e3ae:	9a03      	ldr	r2, [sp, #12]
 800e3b0:	f1aa 0a04 	sub.w	sl, sl, #4
 800e3b4:	4591      	cmp	r9, r2
 800e3b6:	ddeb      	ble.n	800e390 <__kernel_rem_pio2f+0x178>
 800e3b8:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e3bc:	3504      	adds	r5, #4
 800e3be:	f108 0801 	add.w	r8, r8, #1
 800e3c2:	e75f      	b.n	800e284 <__kernel_rem_pio2f+0x6c>
 800e3c4:	46aa      	mov	sl, r5
 800e3c6:	465e      	mov	r6, fp
 800e3c8:	f04f 0900 	mov.w	r9, #0
 800e3cc:	e7ef      	b.n	800e3ae <__kernel_rem_pio2f+0x196>
 800e3ce:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f7f2 fcb6 	bl	8000d44 <__aeabi_fmul>
 800e3d8:	f7f2 fe90 	bl	80010fc <__aeabi_f2iz>
 800e3dc:	f7f2 fc5e 	bl	8000c9c <__aeabi_i2f>
 800e3e0:	4649      	mov	r1, r9
 800e3e2:	9009      	str	r0, [sp, #36]	; 0x24
 800e3e4:	f7f2 fcae 	bl	8000d44 <__aeabi_fmul>
 800e3e8:	4601      	mov	r1, r0
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f7f2 fba0 	bl	8000b30 <__aeabi_fsub>
 800e3f0:	f7f2 fe84 	bl	80010fc <__aeabi_f2iz>
 800e3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e3fa:	f846 0b04 	str.w	r0, [r6], #4
 800e3fe:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800e402:	4618      	mov	r0, r3
 800e404:	f7f2 fb96 	bl	8000b34 <__addsf3>
 800e408:	4604      	mov	r4, r0
 800e40a:	e756      	b.n	800e2ba <__kernel_rem_pio2f+0xa2>
 800e40c:	d106      	bne.n	800e41c <__kernel_rem_pio2f+0x204>
 800e40e:	f108 33ff 	add.w	r3, r8, #4294967295
 800e412:	aa0a      	add	r2, sp, #40	; 0x28
 800e414:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e418:	1224      	asrs	r4, r4, #8
 800e41a:	e785      	b.n	800e328 <__kernel_rem_pio2f+0x110>
 800e41c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e420:	f7f2 fe42 	bl	80010a8 <__aeabi_fcmpge>
 800e424:	4604      	mov	r4, r0
 800e426:	2800      	cmp	r0, #0
 800e428:	d134      	bne.n	800e494 <__kernel_rem_pio2f+0x27c>
 800e42a:	2100      	movs	r1, #0
 800e42c:	4648      	mov	r0, r9
 800e42e:	f7f2 fe1d 	bl	800106c <__aeabi_fcmpeq>
 800e432:	2800      	cmp	r0, #0
 800e434:	f000 809a 	beq.w	800e56c <__kernel_rem_pio2f+0x354>
 800e438:	f108 35ff 	add.w	r5, r8, #4294967295
 800e43c:	462b      	mov	r3, r5
 800e43e:	2200      	movs	r2, #0
 800e440:	9901      	ldr	r1, [sp, #4]
 800e442:	428b      	cmp	r3, r1
 800e444:	da4d      	bge.n	800e4e2 <__kernel_rem_pio2f+0x2ca>
 800e446:	2a00      	cmp	r2, #0
 800e448:	d07c      	beq.n	800e544 <__kernel_rem_pio2f+0x32c>
 800e44a:	ab0a      	add	r3, sp, #40	; 0x28
 800e44c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e450:	3f08      	subs	r7, #8
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 8088 	beq.w	800e568 <__kernel_rem_pio2f+0x350>
 800e458:	4639      	mov	r1, r7
 800e45a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e45e:	f000 fb6f 	bl	800eb40 <scalbnf>
 800e462:	46aa      	mov	sl, r5
 800e464:	4681      	mov	r9, r0
 800e466:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800e46a:	af46      	add	r7, sp, #280	; 0x118
 800e46c:	f1ba 0f00 	cmp.w	sl, #0
 800e470:	f280 80b1 	bge.w	800e5d6 <__kernel_rem_pio2f+0x3be>
 800e474:	46a9      	mov	r9, r5
 800e476:	f04f 0a00 	mov.w	sl, #0
 800e47a:	2200      	movs	r2, #0
 800e47c:	f1b9 0f00 	cmp.w	r9, #0
 800e480:	f2c0 80db 	blt.w	800e63a <__kernel_rem_pio2f+0x422>
 800e484:	a946      	add	r1, sp, #280	; 0x118
 800e486:	4617      	mov	r7, r2
 800e488:	f04f 0800 	mov.w	r8, #0
 800e48c:	4b2c      	ldr	r3, [pc, #176]	; (800e540 <__kernel_rem_pio2f+0x328>)
 800e48e:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800e492:	e0c3      	b.n	800e61c <__kernel_rem_pio2f+0x404>
 800e494:	2402      	movs	r4, #2
 800e496:	e749      	b.n	800e32c <__kernel_rem_pio2f+0x114>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	f1ba 0f00 	cmp.w	sl, #0
 800e49e:	d108      	bne.n	800e4b2 <__kernel_rem_pio2f+0x29a>
 800e4a0:	b11b      	cbz	r3, 800e4aa <__kernel_rem_pio2f+0x292>
 800e4a2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e4a6:	602b      	str	r3, [r5, #0]
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	469a      	mov	sl, r3
 800e4ac:	3201      	adds	r2, #1
 800e4ae:	3504      	adds	r5, #4
 800e4b0:	e73f      	b.n	800e332 <__kernel_rem_pio2f+0x11a>
 800e4b2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e4b6:	602b      	str	r3, [r5, #0]
 800e4b8:	4653      	mov	r3, sl
 800e4ba:	e7f6      	b.n	800e4aa <__kernel_rem_pio2f+0x292>
 800e4bc:	f108 32ff 	add.w	r2, r8, #4294967295
 800e4c0:	ab0a      	add	r3, sp, #40	; 0x28
 800e4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4ca:	a90a      	add	r1, sp, #40	; 0x28
 800e4cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e4d0:	e73a      	b.n	800e348 <__kernel_rem_pio2f+0x130>
 800e4d2:	f108 32ff 	add.w	r2, r8, #4294967295
 800e4d6:	ab0a      	add	r3, sp, #40	; 0x28
 800e4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4e0:	e7f3      	b.n	800e4ca <__kernel_rem_pio2f+0x2b2>
 800e4e2:	a90a      	add	r1, sp, #40	; 0x28
 800e4e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	e7a8      	b.n	800e440 <__kernel_rem_pio2f+0x228>
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	d0fa      	beq.n	800e4ee <__kernel_rem_pio2f+0x2d6>
 800e4f8:	9a04      	ldr	r2, [sp, #16]
 800e4fa:	f108 0501 	add.w	r5, r8, #1
 800e4fe:	eb08 0402 	add.w	r4, r8, r2
 800e502:	aa1e      	add	r2, sp, #120	; 0x78
 800e504:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e508:	4498      	add	r8, r3
 800e50a:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800e50e:	45a8      	cmp	r8, r5
 800e510:	f6ff aec7 	blt.w	800e2a2 <__kernel_rem_pio2f+0x8a>
 800e514:	9b07      	ldr	r3, [sp, #28]
 800e516:	46a3      	mov	fp, r4
 800e518:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e51c:	f7f2 fbbe 	bl	8000c9c <__aeabi_i2f>
 800e520:	f04f 0a00 	mov.w	sl, #0
 800e524:	2600      	movs	r6, #0
 800e526:	f84b 0b04 	str.w	r0, [fp], #4
 800e52a:	9b03      	ldr	r3, [sp, #12]
 800e52c:	459a      	cmp	sl, r3
 800e52e:	dd0c      	ble.n	800e54a <__kernel_rem_pio2f+0x332>
 800e530:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800e534:	465c      	mov	r4, fp
 800e536:	3501      	adds	r5, #1
 800e538:	e7e9      	b.n	800e50e <__kernel_rem_pio2f+0x2f6>
 800e53a:	bf00      	nop
 800e53c:	08010264 	.word	0x08010264
 800e540:	08010238 	.word	0x08010238
 800e544:	2301      	movs	r3, #1
 800e546:	9a08      	ldr	r2, [sp, #32]
 800e548:	e7d2      	b.n	800e4f0 <__kernel_rem_pio2f+0x2d8>
 800e54a:	9b05      	ldr	r3, [sp, #20]
 800e54c:	f854 0904 	ldr.w	r0, [r4], #-4
 800e550:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e554:	f7f2 fbf6 	bl	8000d44 <__aeabi_fmul>
 800e558:	4601      	mov	r1, r0
 800e55a:	4630      	mov	r0, r6
 800e55c:	f7f2 faea 	bl	8000b34 <__addsf3>
 800e560:	f10a 0a01 	add.w	sl, sl, #1
 800e564:	4606      	mov	r6, r0
 800e566:	e7e0      	b.n	800e52a <__kernel_rem_pio2f+0x312>
 800e568:	3d01      	subs	r5, #1
 800e56a:	e76e      	b.n	800e44a <__kernel_rem_pio2f+0x232>
 800e56c:	9b06      	ldr	r3, [sp, #24]
 800e56e:	9a02      	ldr	r2, [sp, #8]
 800e570:	4648      	mov	r0, r9
 800e572:	1a99      	subs	r1, r3, r2
 800e574:	f000 fae4 	bl	800eb40 <scalbnf>
 800e578:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e57c:	4605      	mov	r5, r0
 800e57e:	f7f2 fd93 	bl	80010a8 <__aeabi_fcmpge>
 800e582:	b300      	cbz	r0, 800e5c6 <__kernel_rem_pio2f+0x3ae>
 800e584:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e588:	4628      	mov	r0, r5
 800e58a:	f7f2 fbdb 	bl	8000d44 <__aeabi_fmul>
 800e58e:	f7f2 fdb5 	bl	80010fc <__aeabi_f2iz>
 800e592:	f7f2 fb83 	bl	8000c9c <__aeabi_i2f>
 800e596:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e59a:	4681      	mov	r9, r0
 800e59c:	f7f2 fbd2 	bl	8000d44 <__aeabi_fmul>
 800e5a0:	4601      	mov	r1, r0
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f7f2 fac4 	bl	8000b30 <__aeabi_fsub>
 800e5a8:	f7f2 fda8 	bl	80010fc <__aeabi_f2iz>
 800e5ac:	ab0a      	add	r3, sp, #40	; 0x28
 800e5ae:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e5b2:	4648      	mov	r0, r9
 800e5b4:	f7f2 fda2 	bl	80010fc <__aeabi_f2iz>
 800e5b8:	f108 0501 	add.w	r5, r8, #1
 800e5bc:	ab0a      	add	r3, sp, #40	; 0x28
 800e5be:	3708      	adds	r7, #8
 800e5c0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e5c4:	e748      	b.n	800e458 <__kernel_rem_pio2f+0x240>
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f7f2 fd98 	bl	80010fc <__aeabi_f2iz>
 800e5cc:	ab0a      	add	r3, sp, #40	; 0x28
 800e5ce:	4645      	mov	r5, r8
 800e5d0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e5d4:	e740      	b.n	800e458 <__kernel_rem_pio2f+0x240>
 800e5d6:	ab0a      	add	r3, sp, #40	; 0x28
 800e5d8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e5dc:	f7f2 fb5e 	bl	8000c9c <__aeabi_i2f>
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	f7f2 fbaf 	bl	8000d44 <__aeabi_fmul>
 800e5e6:	4641      	mov	r1, r8
 800e5e8:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800e5ec:	4648      	mov	r0, r9
 800e5ee:	f7f2 fba9 	bl	8000d44 <__aeabi_fmul>
 800e5f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5f6:	4681      	mov	r9, r0
 800e5f8:	e738      	b.n	800e46c <__kernel_rem_pio2f+0x254>
 800e5fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800e5fe:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e602:	9203      	str	r2, [sp, #12]
 800e604:	9302      	str	r3, [sp, #8]
 800e606:	f7f2 fb9d 	bl	8000d44 <__aeabi_fmul>
 800e60a:	4601      	mov	r1, r0
 800e60c:	4638      	mov	r0, r7
 800e60e:	f7f2 fa91 	bl	8000b34 <__addsf3>
 800e612:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e616:	4607      	mov	r7, r0
 800e618:	f108 0801 	add.w	r8, r8, #1
 800e61c:	9901      	ldr	r1, [sp, #4]
 800e61e:	4588      	cmp	r8, r1
 800e620:	dc01      	bgt.n	800e626 <__kernel_rem_pio2f+0x40e>
 800e622:	45c2      	cmp	sl, r8
 800e624:	dae9      	bge.n	800e5fa <__kernel_rem_pio2f+0x3e2>
 800e626:	ab5a      	add	r3, sp, #360	; 0x168
 800e628:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e62c:	f843 7ca0 	str.w	r7, [r3, #-160]
 800e630:	f109 39ff 	add.w	r9, r9, #4294967295
 800e634:	f10a 0a01 	add.w	sl, sl, #1
 800e638:	e720      	b.n	800e47c <__kernel_rem_pio2f+0x264>
 800e63a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	dc07      	bgt.n	800e650 <__kernel_rem_pio2f+0x438>
 800e640:	2b00      	cmp	r3, #0
 800e642:	dc4d      	bgt.n	800e6e0 <__kernel_rem_pio2f+0x4c8>
 800e644:	d02e      	beq.n	800e6a4 <__kernel_rem_pio2f+0x48c>
 800e646:	f006 0007 	and.w	r0, r6, #7
 800e64a:	b05b      	add	sp, #364	; 0x16c
 800e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e650:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e652:	2b03      	cmp	r3, #3
 800e654:	d1f7      	bne.n	800e646 <__kernel_rem_pio2f+0x42e>
 800e656:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800e65a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800e65e:	46b8      	mov	r8, r7
 800e660:	46aa      	mov	sl, r5
 800e662:	f1ba 0f00 	cmp.w	sl, #0
 800e666:	dc48      	bgt.n	800e6fa <__kernel_rem_pio2f+0x4e2>
 800e668:	46a9      	mov	r9, r5
 800e66a:	f1b9 0f01 	cmp.w	r9, #1
 800e66e:	dc5f      	bgt.n	800e730 <__kernel_rem_pio2f+0x518>
 800e670:	2000      	movs	r0, #0
 800e672:	2d01      	cmp	r5, #1
 800e674:	dc75      	bgt.n	800e762 <__kernel_rem_pio2f+0x54a>
 800e676:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e678:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e67a:	2c00      	cmp	r4, #0
 800e67c:	d177      	bne.n	800e76e <__kernel_rem_pio2f+0x556>
 800e67e:	9900      	ldr	r1, [sp, #0]
 800e680:	600a      	str	r2, [r1, #0]
 800e682:	460a      	mov	r2, r1
 800e684:	604b      	str	r3, [r1, #4]
 800e686:	6090      	str	r0, [r2, #8]
 800e688:	e7dd      	b.n	800e646 <__kernel_rem_pio2f+0x42e>
 800e68a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800e68e:	f7f2 fa51 	bl	8000b34 <__addsf3>
 800e692:	3d01      	subs	r5, #1
 800e694:	2d00      	cmp	r5, #0
 800e696:	daf8      	bge.n	800e68a <__kernel_rem_pio2f+0x472>
 800e698:	b10c      	cbz	r4, 800e69e <__kernel_rem_pio2f+0x486>
 800e69a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e69e:	9b00      	ldr	r3, [sp, #0]
 800e6a0:	6018      	str	r0, [r3, #0]
 800e6a2:	e7d0      	b.n	800e646 <__kernel_rem_pio2f+0x42e>
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	af32      	add	r7, sp, #200	; 0xc8
 800e6a8:	e7f4      	b.n	800e694 <__kernel_rem_pio2f+0x47c>
 800e6aa:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e6ae:	f7f2 fa41 	bl	8000b34 <__addsf3>
 800e6b2:	3f01      	subs	r7, #1
 800e6b4:	2f00      	cmp	r7, #0
 800e6b6:	daf8      	bge.n	800e6aa <__kernel_rem_pio2f+0x492>
 800e6b8:	b1bc      	cbz	r4, 800e6ea <__kernel_rem_pio2f+0x4d2>
 800e6ba:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e6be:	9a00      	ldr	r2, [sp, #0]
 800e6c0:	4601      	mov	r1, r0
 800e6c2:	6013      	str	r3, [r2, #0]
 800e6c4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800e6c6:	f7f2 fa33 	bl	8000b30 <__aeabi_fsub>
 800e6ca:	2701      	movs	r7, #1
 800e6cc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e6d0:	42bd      	cmp	r5, r7
 800e6d2:	da0c      	bge.n	800e6ee <__kernel_rem_pio2f+0x4d6>
 800e6d4:	b10c      	cbz	r4, 800e6da <__kernel_rem_pio2f+0x4c2>
 800e6d6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e6da:	9b00      	ldr	r3, [sp, #0]
 800e6dc:	6058      	str	r0, [r3, #4]
 800e6de:	e7b2      	b.n	800e646 <__kernel_rem_pio2f+0x42e>
 800e6e0:	462f      	mov	r7, r5
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e6e8:	e7e4      	b.n	800e6b4 <__kernel_rem_pio2f+0x49c>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	e7e7      	b.n	800e6be <__kernel_rem_pio2f+0x4a6>
 800e6ee:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e6f2:	f7f2 fa1f 	bl	8000b34 <__addsf3>
 800e6f6:	3701      	adds	r7, #1
 800e6f8:	e7ea      	b.n	800e6d0 <__kernel_rem_pio2f+0x4b8>
 800e6fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e6fe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e702:	4619      	mov	r1, r3
 800e704:	4610      	mov	r0, r2
 800e706:	9302      	str	r3, [sp, #8]
 800e708:	9201      	str	r2, [sp, #4]
 800e70a:	f7f2 fa13 	bl	8000b34 <__addsf3>
 800e70e:	9a01      	ldr	r2, [sp, #4]
 800e710:	4601      	mov	r1, r0
 800e712:	4681      	mov	r9, r0
 800e714:	4610      	mov	r0, r2
 800e716:	f7f2 fa0b 	bl	8000b30 <__aeabi_fsub>
 800e71a:	9b02      	ldr	r3, [sp, #8]
 800e71c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e720:	4619      	mov	r1, r3
 800e722:	f7f2 fa07 	bl	8000b34 <__addsf3>
 800e726:	f848 0904 	str.w	r0, [r8], #-4
 800e72a:	f8c8 9000 	str.w	r9, [r8]
 800e72e:	e798      	b.n	800e662 <__kernel_rem_pio2f+0x44a>
 800e730:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e734:	f8d7 a000 	ldr.w	sl, [r7]
 800e738:	4618      	mov	r0, r3
 800e73a:	4651      	mov	r1, sl
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	f7f2 f9f9 	bl	8000b34 <__addsf3>
 800e742:	9b01      	ldr	r3, [sp, #4]
 800e744:	4601      	mov	r1, r0
 800e746:	4680      	mov	r8, r0
 800e748:	4618      	mov	r0, r3
 800e74a:	f7f2 f9f1 	bl	8000b30 <__aeabi_fsub>
 800e74e:	4651      	mov	r1, sl
 800e750:	f7f2 f9f0 	bl	8000b34 <__addsf3>
 800e754:	f847 0904 	str.w	r0, [r7], #-4
 800e758:	f109 39ff 	add.w	r9, r9, #4294967295
 800e75c:	f8c7 8000 	str.w	r8, [r7]
 800e760:	e783      	b.n	800e66a <__kernel_rem_pio2f+0x452>
 800e762:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800e766:	f7f2 f9e5 	bl	8000b34 <__addsf3>
 800e76a:	3d01      	subs	r5, #1
 800e76c:	e781      	b.n	800e672 <__kernel_rem_pio2f+0x45a>
 800e76e:	9900      	ldr	r1, [sp, #0]
 800e770:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e774:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e778:	600a      	str	r2, [r1, #0]
 800e77a:	604b      	str	r3, [r1, #4]
 800e77c:	460a      	mov	r2, r1
 800e77e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e782:	e780      	b.n	800e686 <__kernel_rem_pio2f+0x46e>

0800e784 <__kernel_sinf>:
 800e784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e788:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e78c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e790:	4604      	mov	r4, r0
 800e792:	460f      	mov	r7, r1
 800e794:	4691      	mov	r9, r2
 800e796:	da03      	bge.n	800e7a0 <__kernel_sinf+0x1c>
 800e798:	f7f2 fcb0 	bl	80010fc <__aeabi_f2iz>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d035      	beq.n	800e80c <__kernel_sinf+0x88>
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f7f2 face 	bl	8000d44 <__aeabi_fmul>
 800e7a8:	4605      	mov	r5, r0
 800e7aa:	4601      	mov	r1, r0
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f7f2 fac9 	bl	8000d44 <__aeabi_fmul>
 800e7b2:	4929      	ldr	r1, [pc, #164]	; (800e858 <__kernel_sinf+0xd4>)
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7f2 fac4 	bl	8000d44 <__aeabi_fmul>
 800e7bc:	4927      	ldr	r1, [pc, #156]	; (800e85c <__kernel_sinf+0xd8>)
 800e7be:	f7f2 f9b7 	bl	8000b30 <__aeabi_fsub>
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	f7f2 fabe 	bl	8000d44 <__aeabi_fmul>
 800e7c8:	4925      	ldr	r1, [pc, #148]	; (800e860 <__kernel_sinf+0xdc>)
 800e7ca:	f7f2 f9b3 	bl	8000b34 <__addsf3>
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	f7f2 fab8 	bl	8000d44 <__aeabi_fmul>
 800e7d4:	4923      	ldr	r1, [pc, #140]	; (800e864 <__kernel_sinf+0xe0>)
 800e7d6:	f7f2 f9ab 	bl	8000b30 <__aeabi_fsub>
 800e7da:	4629      	mov	r1, r5
 800e7dc:	f7f2 fab2 	bl	8000d44 <__aeabi_fmul>
 800e7e0:	4921      	ldr	r1, [pc, #132]	; (800e868 <__kernel_sinf+0xe4>)
 800e7e2:	f7f2 f9a7 	bl	8000b34 <__addsf3>
 800e7e6:	4680      	mov	r8, r0
 800e7e8:	f1b9 0f00 	cmp.w	r9, #0
 800e7ec:	d111      	bne.n	800e812 <__kernel_sinf+0x8e>
 800e7ee:	4601      	mov	r1, r0
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	f7f2 faa7 	bl	8000d44 <__aeabi_fmul>
 800e7f6:	491d      	ldr	r1, [pc, #116]	; (800e86c <__kernel_sinf+0xe8>)
 800e7f8:	f7f2 f99a 	bl	8000b30 <__aeabi_fsub>
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	f7f2 faa1 	bl	8000d44 <__aeabi_fmul>
 800e802:	4601      	mov	r1, r0
 800e804:	4620      	mov	r0, r4
 800e806:	f7f2 f995 	bl	8000b34 <__addsf3>
 800e80a:	4604      	mov	r4, r0
 800e80c:	4620      	mov	r0, r4
 800e80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e812:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e816:	4638      	mov	r0, r7
 800e818:	f7f2 fa94 	bl	8000d44 <__aeabi_fmul>
 800e81c:	4641      	mov	r1, r8
 800e81e:	4681      	mov	r9, r0
 800e820:	4630      	mov	r0, r6
 800e822:	f7f2 fa8f 	bl	8000d44 <__aeabi_fmul>
 800e826:	4601      	mov	r1, r0
 800e828:	4648      	mov	r0, r9
 800e82a:	f7f2 f981 	bl	8000b30 <__aeabi_fsub>
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f2 fa88 	bl	8000d44 <__aeabi_fmul>
 800e834:	4639      	mov	r1, r7
 800e836:	f7f2 f97b 	bl	8000b30 <__aeabi_fsub>
 800e83a:	490c      	ldr	r1, [pc, #48]	; (800e86c <__kernel_sinf+0xe8>)
 800e83c:	4605      	mov	r5, r0
 800e83e:	4630      	mov	r0, r6
 800e840:	f7f2 fa80 	bl	8000d44 <__aeabi_fmul>
 800e844:	4601      	mov	r1, r0
 800e846:	4628      	mov	r0, r5
 800e848:	f7f2 f974 	bl	8000b34 <__addsf3>
 800e84c:	4601      	mov	r1, r0
 800e84e:	4620      	mov	r0, r4
 800e850:	f7f2 f96e 	bl	8000b30 <__aeabi_fsub>
 800e854:	e7d9      	b.n	800e80a <__kernel_sinf+0x86>
 800e856:	bf00      	nop
 800e858:	2f2ec9d3 	.word	0x2f2ec9d3
 800e85c:	32d72f34 	.word	0x32d72f34
 800e860:	3638ef1b 	.word	0x3638ef1b
 800e864:	39500d01 	.word	0x39500d01
 800e868:	3c088889 	.word	0x3c088889
 800e86c:	3e2aaaab 	.word	0x3e2aaaab

0800e870 <fabs>:
 800e870:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e874:	4770      	bx	lr

0800e876 <finite>:
 800e876:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e87a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e87e:	0fc0      	lsrs	r0, r0, #31
 800e880:	4770      	bx	lr
	...

0800e884 <nan>:
 800e884:	2000      	movs	r0, #0
 800e886:	4901      	ldr	r1, [pc, #4]	; (800e88c <nan+0x8>)
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	7ff80000 	.word	0x7ff80000

0800e890 <rint>:
 800e890:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800e894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e896:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800e89a:	2f13      	cmp	r7, #19
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800e8a8:	dc59      	bgt.n	800e95e <rint+0xce>
 800e8aa:	2f00      	cmp	r7, #0
 800e8ac:	da2a      	bge.n	800e904 <rint+0x74>
 800e8ae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8b2:	4301      	orrs	r1, r0
 800e8b4:	d022      	beq.n	800e8fc <rint+0x6c>
 800e8b6:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800e8ba:	4301      	orrs	r1, r0
 800e8bc:	424d      	negs	r5, r1
 800e8be:	430d      	orrs	r5, r1
 800e8c0:	4936      	ldr	r1, [pc, #216]	; (800e99c <rint+0x10c>)
 800e8c2:	0c5c      	lsrs	r4, r3, #17
 800e8c4:	0b2d      	lsrs	r5, r5, #12
 800e8c6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800e8ca:	0464      	lsls	r4, r4, #17
 800e8cc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e8d0:	ea45 0304 	orr.w	r3, r5, r4
 800e8d4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e8d8:	4620      	mov	r0, r4
 800e8da:	4629      	mov	r1, r5
 800e8dc:	f7f1 fc46 	bl	800016c <__adddf3>
 800e8e0:	e9cd 0100 	strd	r0, r1, [sp]
 800e8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8e8:	462b      	mov	r3, r5
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	f7f1 fc3c 	bl	8000168 <__aeabi_dsub>
 800e8f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e8f4:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4619      	mov	r1, r3
 800e900:	b003      	add	sp, #12
 800e902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e904:	4926      	ldr	r1, [pc, #152]	; (800e9a0 <rint+0x110>)
 800e906:	4139      	asrs	r1, r7
 800e908:	ea03 0001 	and.w	r0, r3, r1
 800e90c:	4310      	orrs	r0, r2
 800e90e:	d0f5      	beq.n	800e8fc <rint+0x6c>
 800e910:	084b      	lsrs	r3, r1, #1
 800e912:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800e916:	ea52 0501 	orrs.w	r5, r2, r1
 800e91a:	d00c      	beq.n	800e936 <rint+0xa6>
 800e91c:	ea24 0303 	bic.w	r3, r4, r3
 800e920:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800e924:	2f13      	cmp	r7, #19
 800e926:	bf0c      	ite	eq
 800e928:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800e92c:	2500      	movne	r5, #0
 800e92e:	fa44 f707 	asr.w	r7, r4, r7
 800e932:	ea43 0407 	orr.w	r4, r3, r7
 800e936:	4919      	ldr	r1, [pc, #100]	; (800e99c <rint+0x10c>)
 800e938:	4623      	mov	r3, r4
 800e93a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800e93e:	462a      	mov	r2, r5
 800e940:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e944:	4620      	mov	r0, r4
 800e946:	4629      	mov	r1, r5
 800e948:	f7f1 fc10 	bl	800016c <__adddf3>
 800e94c:	e9cd 0100 	strd	r0, r1, [sp]
 800e950:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e954:	4622      	mov	r2, r4
 800e956:	462b      	mov	r3, r5
 800e958:	f7f1 fc06 	bl	8000168 <__aeabi_dsub>
 800e95c:	e7cc      	b.n	800e8f8 <rint+0x68>
 800e95e:	2f33      	cmp	r7, #51	; 0x33
 800e960:	dd05      	ble.n	800e96e <rint+0xde>
 800e962:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800e966:	d1c9      	bne.n	800e8fc <rint+0x6c>
 800e968:	f7f1 fc00 	bl	800016c <__adddf3>
 800e96c:	e7c4      	b.n	800e8f8 <rint+0x68>
 800e96e:	f04f 31ff 	mov.w	r1, #4294967295
 800e972:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800e976:	fa21 f10c 	lsr.w	r1, r1, ip
 800e97a:	4208      	tst	r0, r1
 800e97c:	d0be      	beq.n	800e8fc <rint+0x6c>
 800e97e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800e982:	bf18      	it	ne
 800e984:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800e988:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800e98c:	bf1e      	ittt	ne
 800e98e:	ea20 0303 	bicne.w	r3, r0, r3
 800e992:	fa45 fc0c 	asrne.w	ip, r5, ip
 800e996:	ea43 050c 	orrne.w	r5, r3, ip
 800e99a:	e7cc      	b.n	800e936 <rint+0xa6>
 800e99c:	08010270 	.word	0x08010270
 800e9a0:	000fffff 	.word	0x000fffff
 800e9a4:	00000000 	.word	0x00000000

0800e9a8 <scalbn>:
 800e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	460d      	mov	r5, r1
 800e9b2:	4617      	mov	r7, r2
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	b996      	cbnz	r6, 800e9de <scalbn+0x36>
 800e9b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e9bc:	4303      	orrs	r3, r0
 800e9be:	d039      	beq.n	800ea34 <scalbn+0x8c>
 800e9c0:	4b35      	ldr	r3, [pc, #212]	; (800ea98 <scalbn+0xf0>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f7f1 fd88 	bl	80004d8 <__aeabi_dmul>
 800e9c8:	4b34      	ldr	r3, [pc, #208]	; (800ea9c <scalbn+0xf4>)
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	429f      	cmp	r7, r3
 800e9ce:	460d      	mov	r5, r1
 800e9d0:	da0f      	bge.n	800e9f2 <scalbn+0x4a>
 800e9d2:	a32d      	add	r3, pc, #180	; (adr r3, 800ea88 <scalbn+0xe0>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f7f1 fd7e 	bl	80004d8 <__aeabi_dmul>
 800e9dc:	e006      	b.n	800e9ec <scalbn+0x44>
 800e9de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e9e2:	4296      	cmp	r6, r2
 800e9e4:	d10a      	bne.n	800e9fc <scalbn+0x54>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	f7f1 fbc0 	bl	800016c <__adddf3>
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	460d      	mov	r5, r1
 800e9f0:	e020      	b.n	800ea34 <scalbn+0x8c>
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e9f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e9fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ea00:	19b9      	adds	r1, r7, r6
 800ea02:	4291      	cmp	r1, r2
 800ea04:	dd0e      	ble.n	800ea24 <scalbn+0x7c>
 800ea06:	a322      	add	r3, pc, #136	; (adr r3, 800ea90 <scalbn+0xe8>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ea10:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ea14:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ea18:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ea1c:	4820      	ldr	r0, [pc, #128]	; (800eaa0 <scalbn+0xf8>)
 800ea1e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ea22:	e7d9      	b.n	800e9d8 <scalbn+0x30>
 800ea24:	2900      	cmp	r1, #0
 800ea26:	dd08      	ble.n	800ea3a <scalbn+0x92>
 800ea28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea30:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ea34:	4620      	mov	r0, r4
 800ea36:	4629      	mov	r1, r5
 800ea38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea3a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ea3e:	da16      	bge.n	800ea6e <scalbn+0xc6>
 800ea40:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ea44:	429f      	cmp	r7, r3
 800ea46:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ea4a:	dd08      	ble.n	800ea5e <scalbn+0xb6>
 800ea4c:	4c15      	ldr	r4, [pc, #84]	; (800eaa4 <scalbn+0xfc>)
 800ea4e:	4814      	ldr	r0, [pc, #80]	; (800eaa0 <scalbn+0xf8>)
 800ea50:	f363 74df 	bfi	r4, r3, #31, #1
 800ea54:	a30e      	add	r3, pc, #56	; (adr r3, 800ea90 <scalbn+0xe8>)
 800ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	e7bc      	b.n	800e9d8 <scalbn+0x30>
 800ea5e:	4c12      	ldr	r4, [pc, #72]	; (800eaa8 <scalbn+0x100>)
 800ea60:	4812      	ldr	r0, [pc, #72]	; (800eaac <scalbn+0x104>)
 800ea62:	f363 74df 	bfi	r4, r3, #31, #1
 800ea66:	a308      	add	r3, pc, #32	; (adr r3, 800ea88 <scalbn+0xe0>)
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	e7f5      	b.n	800ea5a <scalbn+0xb2>
 800ea6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea72:	3136      	adds	r1, #54	; 0x36
 800ea74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	4629      	mov	r1, r5
 800ea80:	2200      	movs	r2, #0
 800ea82:	4b0b      	ldr	r3, [pc, #44]	; (800eab0 <scalbn+0x108>)
 800ea84:	e7a8      	b.n	800e9d8 <scalbn+0x30>
 800ea86:	bf00      	nop
 800ea88:	c2f8f359 	.word	0xc2f8f359
 800ea8c:	01a56e1f 	.word	0x01a56e1f
 800ea90:	8800759c 	.word	0x8800759c
 800ea94:	7e37e43c 	.word	0x7e37e43c
 800ea98:	43500000 	.word	0x43500000
 800ea9c:	ffff3cb0 	.word	0xffff3cb0
 800eaa0:	8800759c 	.word	0x8800759c
 800eaa4:	7e37e43c 	.word	0x7e37e43c
 800eaa8:	01a56e1f 	.word	0x01a56e1f
 800eaac:	c2f8f359 	.word	0xc2f8f359
 800eab0:	3c900000 	.word	0x3c900000

0800eab4 <floorf>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800eaba:	3d7f      	subs	r5, #127	; 0x7f
 800eabc:	2d16      	cmp	r5, #22
 800eabe:	4601      	mov	r1, r0
 800eac0:	4604      	mov	r4, r0
 800eac2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800eac6:	dc26      	bgt.n	800eb16 <floorf+0x62>
 800eac8:	2d00      	cmp	r5, #0
 800eaca:	da0e      	bge.n	800eaea <floorf+0x36>
 800eacc:	4917      	ldr	r1, [pc, #92]	; (800eb2c <floorf+0x78>)
 800eace:	f7f2 f831 	bl	8000b34 <__addsf3>
 800ead2:	2100      	movs	r1, #0
 800ead4:	f7f2 faf2 	bl	80010bc <__aeabi_fcmpgt>
 800ead8:	b128      	cbz	r0, 800eae6 <floorf+0x32>
 800eada:	2c00      	cmp	r4, #0
 800eadc:	da23      	bge.n	800eb26 <floorf+0x72>
 800eade:	4b14      	ldr	r3, [pc, #80]	; (800eb30 <floorf+0x7c>)
 800eae0:	2e00      	cmp	r6, #0
 800eae2:	bf18      	it	ne
 800eae4:	461c      	movne	r4, r3
 800eae6:	4621      	mov	r1, r4
 800eae8:	e01b      	b.n	800eb22 <floorf+0x6e>
 800eaea:	4e12      	ldr	r6, [pc, #72]	; (800eb34 <floorf+0x80>)
 800eaec:	412e      	asrs	r6, r5
 800eaee:	4230      	tst	r0, r6
 800eaf0:	d017      	beq.n	800eb22 <floorf+0x6e>
 800eaf2:	490e      	ldr	r1, [pc, #56]	; (800eb2c <floorf+0x78>)
 800eaf4:	f7f2 f81e 	bl	8000b34 <__addsf3>
 800eaf8:	2100      	movs	r1, #0
 800eafa:	f7f2 fadf 	bl	80010bc <__aeabi_fcmpgt>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d0f1      	beq.n	800eae6 <floorf+0x32>
 800eb02:	2c00      	cmp	r4, #0
 800eb04:	bfbe      	ittt	lt
 800eb06:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800eb0a:	fa43 f505 	asrlt.w	r5, r3, r5
 800eb0e:	1964      	addlt	r4, r4, r5
 800eb10:	ea24 0406 	bic.w	r4, r4, r6
 800eb14:	e7e7      	b.n	800eae6 <floorf+0x32>
 800eb16:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800eb1a:	d302      	bcc.n	800eb22 <floorf+0x6e>
 800eb1c:	f7f2 f80a 	bl	8000b34 <__addsf3>
 800eb20:	4601      	mov	r1, r0
 800eb22:	4608      	mov	r0, r1
 800eb24:	bd70      	pop	{r4, r5, r6, pc}
 800eb26:	2400      	movs	r4, #0
 800eb28:	e7dd      	b.n	800eae6 <floorf+0x32>
 800eb2a:	bf00      	nop
 800eb2c:	7149f2ca 	.word	0x7149f2ca
 800eb30:	bf800000 	.word	0xbf800000
 800eb34:	007fffff 	.word	0x007fffff

0800eb38 <nanf>:
 800eb38:	4800      	ldr	r0, [pc, #0]	; (800eb3c <nanf+0x4>)
 800eb3a:	4770      	bx	lr
 800eb3c:	7fc00000 	.word	0x7fc00000

0800eb40 <scalbnf>:
 800eb40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4603      	mov	r3, r0
 800eb48:	460d      	mov	r5, r1
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	d02a      	beq.n	800eba4 <scalbnf+0x64>
 800eb4e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800eb52:	d304      	bcc.n	800eb5e <scalbnf+0x1e>
 800eb54:	4601      	mov	r1, r0
 800eb56:	f7f1 ffed 	bl	8000b34 <__addsf3>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	e022      	b.n	800eba4 <scalbnf+0x64>
 800eb5e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800eb62:	d117      	bne.n	800eb94 <scalbnf+0x54>
 800eb64:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800eb68:	f7f2 f8ec 	bl	8000d44 <__aeabi_fmul>
 800eb6c:	4a17      	ldr	r2, [pc, #92]	; (800ebcc <scalbnf+0x8c>)
 800eb6e:	4603      	mov	r3, r0
 800eb70:	4295      	cmp	r5, r2
 800eb72:	db0b      	blt.n	800eb8c <scalbnf+0x4c>
 800eb74:	4604      	mov	r4, r0
 800eb76:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800eb7a:	3a19      	subs	r2, #25
 800eb7c:	442a      	add	r2, r5
 800eb7e:	2afe      	cmp	r2, #254	; 0xfe
 800eb80:	dd0a      	ble.n	800eb98 <scalbnf+0x58>
 800eb82:	4913      	ldr	r1, [pc, #76]	; (800ebd0 <scalbnf+0x90>)
 800eb84:	4618      	mov	r0, r3
 800eb86:	f361 001e 	bfi	r0, r1, #0, #31
 800eb8a:	e000      	b.n	800eb8e <scalbnf+0x4e>
 800eb8c:	4911      	ldr	r1, [pc, #68]	; (800ebd4 <scalbnf+0x94>)
 800eb8e:	f7f2 f8d9 	bl	8000d44 <__aeabi_fmul>
 800eb92:	e7e2      	b.n	800eb5a <scalbnf+0x1a>
 800eb94:	0dd2      	lsrs	r2, r2, #23
 800eb96:	e7f1      	b.n	800eb7c <scalbnf+0x3c>
 800eb98:	2a00      	cmp	r2, #0
 800eb9a:	dd05      	ble.n	800eba8 <scalbnf+0x68>
 800eb9c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800eba0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800eba4:	4618      	mov	r0, r3
 800eba6:	bd38      	pop	{r3, r4, r5, pc}
 800eba8:	f112 0f16 	cmn.w	r2, #22
 800ebac:	da05      	bge.n	800ebba <scalbnf+0x7a>
 800ebae:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ebb2:	4295      	cmp	r5, r2
 800ebb4:	dce5      	bgt.n	800eb82 <scalbnf+0x42>
 800ebb6:	4907      	ldr	r1, [pc, #28]	; (800ebd4 <scalbnf+0x94>)
 800ebb8:	e7e4      	b.n	800eb84 <scalbnf+0x44>
 800ebba:	3219      	adds	r2, #25
 800ebbc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800ebc0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800ebc4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800ebc8:	e7e1      	b.n	800eb8e <scalbnf+0x4e>
 800ebca:	bf00      	nop
 800ebcc:	ffff3cb0 	.word	0xffff3cb0
 800ebd0:	7149f2ca 	.word	0x7149f2ca
 800ebd4:	0da24260 	.word	0x0da24260

0800ebd8 <atoi>:
 800ebd8:	220a      	movs	r2, #10
 800ebda:	2100      	movs	r1, #0
 800ebdc:	f000 b92a 	b.w	800ee34 <strtol>

0800ebe0 <__errno>:
 800ebe0:	4b01      	ldr	r3, [pc, #4]	; (800ebe8 <__errno+0x8>)
 800ebe2:	6818      	ldr	r0, [r3, #0]
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	20000024 	.word	0x20000024

0800ebec <__libc_init_array>:
 800ebec:	b570      	push	{r4, r5, r6, lr}
 800ebee:	2600      	movs	r6, #0
 800ebf0:	4d0c      	ldr	r5, [pc, #48]	; (800ec24 <__libc_init_array+0x38>)
 800ebf2:	4c0d      	ldr	r4, [pc, #52]	; (800ec28 <__libc_init_array+0x3c>)
 800ebf4:	1b64      	subs	r4, r4, r5
 800ebf6:	10a4      	asrs	r4, r4, #2
 800ebf8:	42a6      	cmp	r6, r4
 800ebfa:	d109      	bne.n	800ec10 <__libc_init_array+0x24>
 800ebfc:	f001 f8f0 	bl	800fde0 <_init>
 800ec00:	2600      	movs	r6, #0
 800ec02:	4d0a      	ldr	r5, [pc, #40]	; (800ec2c <__libc_init_array+0x40>)
 800ec04:	4c0a      	ldr	r4, [pc, #40]	; (800ec30 <__libc_init_array+0x44>)
 800ec06:	1b64      	subs	r4, r4, r5
 800ec08:	10a4      	asrs	r4, r4, #2
 800ec0a:	42a6      	cmp	r6, r4
 800ec0c:	d105      	bne.n	800ec1a <__libc_init_array+0x2e>
 800ec0e:	bd70      	pop	{r4, r5, r6, pc}
 800ec10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec14:	4798      	blx	r3
 800ec16:	3601      	adds	r6, #1
 800ec18:	e7ee      	b.n	800ebf8 <__libc_init_array+0xc>
 800ec1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec1e:	4798      	blx	r3
 800ec20:	3601      	adds	r6, #1
 800ec22:	e7f2      	b.n	800ec0a <__libc_init_array+0x1e>
 800ec24:	080104d0 	.word	0x080104d0
 800ec28:	080104d0 	.word	0x080104d0
 800ec2c:	080104d0 	.word	0x080104d0
 800ec30:	080104d8 	.word	0x080104d8

0800ec34 <memcpy>:
 800ec34:	440a      	add	r2, r1
 800ec36:	4291      	cmp	r1, r2
 800ec38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec3c:	d100      	bne.n	800ec40 <memcpy+0xc>
 800ec3e:	4770      	bx	lr
 800ec40:	b510      	push	{r4, lr}
 800ec42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec46:	4291      	cmp	r1, r2
 800ec48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec4c:	d1f9      	bne.n	800ec42 <memcpy+0xe>
 800ec4e:	bd10      	pop	{r4, pc}

0800ec50 <memset>:
 800ec50:	4603      	mov	r3, r0
 800ec52:	4402      	add	r2, r0
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d100      	bne.n	800ec5a <memset+0xa>
 800ec58:	4770      	bx	lr
 800ec5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec5e:	e7f9      	b.n	800ec54 <memset+0x4>

0800ec60 <strcpy>:
 800ec60:	4603      	mov	r3, r0
 800ec62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec66:	f803 2b01 	strb.w	r2, [r3], #1
 800ec6a:	2a00      	cmp	r2, #0
 800ec6c:	d1f9      	bne.n	800ec62 <strcpy+0x2>
 800ec6e:	4770      	bx	lr

0800ec70 <strtok>:
 800ec70:	4b16      	ldr	r3, [pc, #88]	; (800eccc <strtok+0x5c>)
 800ec72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec76:	681f      	ldr	r7, [r3, #0]
 800ec78:	4605      	mov	r5, r0
 800ec7a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	b9ec      	cbnz	r4, 800ecbc <strtok+0x4c>
 800ec80:	2050      	movs	r0, #80	; 0x50
 800ec82:	f000 fa09 	bl	800f098 <malloc>
 800ec86:	4602      	mov	r2, r0
 800ec88:	65b8      	str	r0, [r7, #88]	; 0x58
 800ec8a:	b920      	cbnz	r0, 800ec96 <strtok+0x26>
 800ec8c:	2157      	movs	r1, #87	; 0x57
 800ec8e:	4b10      	ldr	r3, [pc, #64]	; (800ecd0 <strtok+0x60>)
 800ec90:	4810      	ldr	r0, [pc, #64]	; (800ecd4 <strtok+0x64>)
 800ec92:	f000 f8d9 	bl	800ee48 <__assert_func>
 800ec96:	e9c0 4400 	strd	r4, r4, [r0]
 800ec9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ec9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800eca2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800eca6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ecaa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ecae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ecb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ecb6:	6184      	str	r4, [r0, #24]
 800ecb8:	7704      	strb	r4, [r0, #28]
 800ecba:	6244      	str	r4, [r0, #36]	; 0x24
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc8:	f000 b806 	b.w	800ecd8 <__strtok_r>
 800eccc:	20000024 	.word	0x20000024
 800ecd0:	08010284 	.word	0x08010284
 800ecd4:	0801029b 	.word	0x0801029b

0800ecd8 <__strtok_r>:
 800ecd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecda:	b908      	cbnz	r0, 800ece0 <__strtok_r+0x8>
 800ecdc:	6810      	ldr	r0, [r2, #0]
 800ecde:	b188      	cbz	r0, 800ed04 <__strtok_r+0x2c>
 800ece0:	4604      	mov	r4, r0
 800ece2:	460f      	mov	r7, r1
 800ece4:	4620      	mov	r0, r4
 800ece6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ecea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ecee:	b91e      	cbnz	r6, 800ecf8 <__strtok_r+0x20>
 800ecf0:	b965      	cbnz	r5, 800ed0c <__strtok_r+0x34>
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	6015      	str	r5, [r2, #0]
 800ecf6:	e005      	b.n	800ed04 <__strtok_r+0x2c>
 800ecf8:	42b5      	cmp	r5, r6
 800ecfa:	d1f6      	bne.n	800ecea <__strtok_r+0x12>
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d1f0      	bne.n	800ece2 <__strtok_r+0xa>
 800ed00:	6014      	str	r4, [r2, #0]
 800ed02:	7003      	strb	r3, [r0, #0]
 800ed04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed06:	461c      	mov	r4, r3
 800ed08:	e00c      	b.n	800ed24 <__strtok_r+0x4c>
 800ed0a:	b915      	cbnz	r5, 800ed12 <__strtok_r+0x3a>
 800ed0c:	460e      	mov	r6, r1
 800ed0e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ed12:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ed16:	42ab      	cmp	r3, r5
 800ed18:	d1f7      	bne.n	800ed0a <__strtok_r+0x32>
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d0f3      	beq.n	800ed06 <__strtok_r+0x2e>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ed24:	6014      	str	r4, [r2, #0]
 800ed26:	e7ed      	b.n	800ed04 <__strtok_r+0x2c>

0800ed28 <_strtol_l.isra.0>:
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed2e:	4686      	mov	lr, r0
 800ed30:	d001      	beq.n	800ed36 <_strtol_l.isra.0+0xe>
 800ed32:	2b24      	cmp	r3, #36	; 0x24
 800ed34:	d906      	bls.n	800ed44 <_strtol_l.isra.0+0x1c>
 800ed36:	f7ff ff53 	bl	800ebe0 <__errno>
 800ed3a:	2316      	movs	r3, #22
 800ed3c:	6003      	str	r3, [r0, #0]
 800ed3e:	2000      	movs	r0, #0
 800ed40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed44:	468c      	mov	ip, r1
 800ed46:	4e3a      	ldr	r6, [pc, #232]	; (800ee30 <_strtol_l.isra.0+0x108>)
 800ed48:	4660      	mov	r0, ip
 800ed4a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ed4e:	5da5      	ldrb	r5, [r4, r6]
 800ed50:	f015 0508 	ands.w	r5, r5, #8
 800ed54:	d1f8      	bne.n	800ed48 <_strtol_l.isra.0+0x20>
 800ed56:	2c2d      	cmp	r4, #45	; 0x2d
 800ed58:	d133      	bne.n	800edc2 <_strtol_l.isra.0+0x9a>
 800ed5a:	f04f 0801 	mov.w	r8, #1
 800ed5e:	f89c 4000 	ldrb.w	r4, [ip]
 800ed62:	f100 0c02 	add.w	ip, r0, #2
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d05d      	beq.n	800ee26 <_strtol_l.isra.0+0xfe>
 800ed6a:	2b10      	cmp	r3, #16
 800ed6c:	d10c      	bne.n	800ed88 <_strtol_l.isra.0+0x60>
 800ed6e:	2c30      	cmp	r4, #48	; 0x30
 800ed70:	d10a      	bne.n	800ed88 <_strtol_l.isra.0+0x60>
 800ed72:	f89c 0000 	ldrb.w	r0, [ip]
 800ed76:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ed7a:	2858      	cmp	r0, #88	; 0x58
 800ed7c:	d14e      	bne.n	800ee1c <_strtol_l.isra.0+0xf4>
 800ed7e:	2310      	movs	r3, #16
 800ed80:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ed84:	f10c 0c02 	add.w	ip, ip, #2
 800ed88:	2500      	movs	r5, #0
 800ed8a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ed8e:	3f01      	subs	r7, #1
 800ed90:	fbb7 f9f3 	udiv	r9, r7, r3
 800ed94:	4628      	mov	r0, r5
 800ed96:	fb03 7a19 	mls	sl, r3, r9, r7
 800ed9a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ed9e:	2e09      	cmp	r6, #9
 800eda0:	d818      	bhi.n	800edd4 <_strtol_l.isra.0+0xac>
 800eda2:	4634      	mov	r4, r6
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	dd24      	ble.n	800edf2 <_strtol_l.isra.0+0xca>
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	db1f      	blt.n	800edec <_strtol_l.isra.0+0xc4>
 800edac:	4581      	cmp	r9, r0
 800edae:	d31d      	bcc.n	800edec <_strtol_l.isra.0+0xc4>
 800edb0:	d101      	bne.n	800edb6 <_strtol_l.isra.0+0x8e>
 800edb2:	45a2      	cmp	sl, r4
 800edb4:	db1a      	blt.n	800edec <_strtol_l.isra.0+0xc4>
 800edb6:	2501      	movs	r5, #1
 800edb8:	fb00 4003 	mla	r0, r0, r3, r4
 800edbc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800edc0:	e7eb      	b.n	800ed9a <_strtol_l.isra.0+0x72>
 800edc2:	2c2b      	cmp	r4, #43	; 0x2b
 800edc4:	bf08      	it	eq
 800edc6:	f89c 4000 	ldrbeq.w	r4, [ip]
 800edca:	46a8      	mov	r8, r5
 800edcc:	bf08      	it	eq
 800edce:	f100 0c02 	addeq.w	ip, r0, #2
 800edd2:	e7c8      	b.n	800ed66 <_strtol_l.isra.0+0x3e>
 800edd4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800edd8:	2e19      	cmp	r6, #25
 800edda:	d801      	bhi.n	800ede0 <_strtol_l.isra.0+0xb8>
 800eddc:	3c37      	subs	r4, #55	; 0x37
 800edde:	e7e1      	b.n	800eda4 <_strtol_l.isra.0+0x7c>
 800ede0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ede4:	2e19      	cmp	r6, #25
 800ede6:	d804      	bhi.n	800edf2 <_strtol_l.isra.0+0xca>
 800ede8:	3c57      	subs	r4, #87	; 0x57
 800edea:	e7db      	b.n	800eda4 <_strtol_l.isra.0+0x7c>
 800edec:	f04f 35ff 	mov.w	r5, #4294967295
 800edf0:	e7e4      	b.n	800edbc <_strtol_l.isra.0+0x94>
 800edf2:	2d00      	cmp	r5, #0
 800edf4:	da08      	bge.n	800ee08 <_strtol_l.isra.0+0xe0>
 800edf6:	2322      	movs	r3, #34	; 0x22
 800edf8:	4638      	mov	r0, r7
 800edfa:	f8ce 3000 	str.w	r3, [lr]
 800edfe:	2a00      	cmp	r2, #0
 800ee00:	d09e      	beq.n	800ed40 <_strtol_l.isra.0+0x18>
 800ee02:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ee06:	e007      	b.n	800ee18 <_strtol_l.isra.0+0xf0>
 800ee08:	f1b8 0f00 	cmp.w	r8, #0
 800ee0c:	d000      	beq.n	800ee10 <_strtol_l.isra.0+0xe8>
 800ee0e:	4240      	negs	r0, r0
 800ee10:	2a00      	cmp	r2, #0
 800ee12:	d095      	beq.n	800ed40 <_strtol_l.isra.0+0x18>
 800ee14:	2d00      	cmp	r5, #0
 800ee16:	d1f4      	bne.n	800ee02 <_strtol_l.isra.0+0xda>
 800ee18:	6011      	str	r1, [r2, #0]
 800ee1a:	e791      	b.n	800ed40 <_strtol_l.isra.0+0x18>
 800ee1c:	2430      	movs	r4, #48	; 0x30
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1b2      	bne.n	800ed88 <_strtol_l.isra.0+0x60>
 800ee22:	2308      	movs	r3, #8
 800ee24:	e7b0      	b.n	800ed88 <_strtol_l.isra.0+0x60>
 800ee26:	2c30      	cmp	r4, #48	; 0x30
 800ee28:	d0a3      	beq.n	800ed72 <_strtol_l.isra.0+0x4a>
 800ee2a:	230a      	movs	r3, #10
 800ee2c:	e7ac      	b.n	800ed88 <_strtol_l.isra.0+0x60>
 800ee2e:	bf00      	nop
 800ee30:	08010339 	.word	0x08010339

0800ee34 <strtol>:
 800ee34:	4613      	mov	r3, r2
 800ee36:	460a      	mov	r2, r1
 800ee38:	4601      	mov	r1, r0
 800ee3a:	4802      	ldr	r0, [pc, #8]	; (800ee44 <strtol+0x10>)
 800ee3c:	6800      	ldr	r0, [r0, #0]
 800ee3e:	f7ff bf73 	b.w	800ed28 <_strtol_l.isra.0>
 800ee42:	bf00      	nop
 800ee44:	20000024 	.word	0x20000024

0800ee48 <__assert_func>:
 800ee48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee4a:	4614      	mov	r4, r2
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	4b09      	ldr	r3, [pc, #36]	; (800ee74 <__assert_func+0x2c>)
 800ee50:	4605      	mov	r5, r0
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	68d8      	ldr	r0, [r3, #12]
 800ee56:	b14c      	cbz	r4, 800ee6c <__assert_func+0x24>
 800ee58:	4b07      	ldr	r3, [pc, #28]	; (800ee78 <__assert_func+0x30>)
 800ee5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee5e:	9100      	str	r1, [sp, #0]
 800ee60:	462b      	mov	r3, r5
 800ee62:	4906      	ldr	r1, [pc, #24]	; (800ee7c <__assert_func+0x34>)
 800ee64:	f000 f8e4 	bl	800f030 <fiprintf>
 800ee68:	f000 fdd8 	bl	800fa1c <abort>
 800ee6c:	4b04      	ldr	r3, [pc, #16]	; (800ee80 <__assert_func+0x38>)
 800ee6e:	461c      	mov	r4, r3
 800ee70:	e7f3      	b.n	800ee5a <__assert_func+0x12>
 800ee72:	bf00      	nop
 800ee74:	20000024 	.word	0x20000024
 800ee78:	080102fc 	.word	0x080102fc
 800ee7c:	08010309 	.word	0x08010309
 800ee80:	08010337 	.word	0x08010337

0800ee84 <std>:
 800ee84:	2300      	movs	r3, #0
 800ee86:	b510      	push	{r4, lr}
 800ee88:	4604      	mov	r4, r0
 800ee8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ee8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee92:	6083      	str	r3, [r0, #8]
 800ee94:	8181      	strh	r1, [r0, #12]
 800ee96:	6643      	str	r3, [r0, #100]	; 0x64
 800ee98:	81c2      	strh	r2, [r0, #14]
 800ee9a:	6183      	str	r3, [r0, #24]
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	2208      	movs	r2, #8
 800eea0:	305c      	adds	r0, #92	; 0x5c
 800eea2:	f7ff fed5 	bl	800ec50 <memset>
 800eea6:	4b05      	ldr	r3, [pc, #20]	; (800eebc <std+0x38>)
 800eea8:	6224      	str	r4, [r4, #32]
 800eeaa:	6263      	str	r3, [r4, #36]	; 0x24
 800eeac:	4b04      	ldr	r3, [pc, #16]	; (800eec0 <std+0x3c>)
 800eeae:	62a3      	str	r3, [r4, #40]	; 0x28
 800eeb0:	4b04      	ldr	r3, [pc, #16]	; (800eec4 <std+0x40>)
 800eeb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eeb4:	4b04      	ldr	r3, [pc, #16]	; (800eec8 <std+0x44>)
 800eeb6:	6323      	str	r3, [r4, #48]	; 0x30
 800eeb8:	bd10      	pop	{r4, pc}
 800eeba:	bf00      	nop
 800eebc:	0800f7f1 	.word	0x0800f7f1
 800eec0:	0800f813 	.word	0x0800f813
 800eec4:	0800f84b 	.word	0x0800f84b
 800eec8:	0800f86f 	.word	0x0800f86f

0800eecc <_cleanup_r>:
 800eecc:	4901      	ldr	r1, [pc, #4]	; (800eed4 <_cleanup_r+0x8>)
 800eece:	f000 b8c1 	b.w	800f054 <_fwalk_reent>
 800eed2:	bf00      	nop
 800eed4:	0800fb59 	.word	0x0800fb59

0800eed8 <__sfmoreglue>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	2568      	movs	r5, #104	; 0x68
 800eedc:	1e4a      	subs	r2, r1, #1
 800eede:	4355      	muls	r5, r2
 800eee0:	460e      	mov	r6, r1
 800eee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eee6:	f000 f92b 	bl	800f140 <_malloc_r>
 800eeea:	4604      	mov	r4, r0
 800eeec:	b140      	cbz	r0, 800ef00 <__sfmoreglue+0x28>
 800eeee:	2100      	movs	r1, #0
 800eef0:	e9c0 1600 	strd	r1, r6, [r0]
 800eef4:	300c      	adds	r0, #12
 800eef6:	60a0      	str	r0, [r4, #8]
 800eef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eefc:	f7ff fea8 	bl	800ec50 <memset>
 800ef00:	4620      	mov	r0, r4
 800ef02:	bd70      	pop	{r4, r5, r6, pc}

0800ef04 <__sfp_lock_acquire>:
 800ef04:	4801      	ldr	r0, [pc, #4]	; (800ef0c <__sfp_lock_acquire+0x8>)
 800ef06:	f000 b8c5 	b.w	800f094 <__retarget_lock_acquire_recursive>
 800ef0a:	bf00      	nop
 800ef0c:	200016fc 	.word	0x200016fc

0800ef10 <__sfp_lock_release>:
 800ef10:	4801      	ldr	r0, [pc, #4]	; (800ef18 <__sfp_lock_release+0x8>)
 800ef12:	f000 b8c0 	b.w	800f096 <__retarget_lock_release_recursive>
 800ef16:	bf00      	nop
 800ef18:	200016fc 	.word	0x200016fc

0800ef1c <__sinit_lock_acquire>:
 800ef1c:	4801      	ldr	r0, [pc, #4]	; (800ef24 <__sinit_lock_acquire+0x8>)
 800ef1e:	f000 b8b9 	b.w	800f094 <__retarget_lock_acquire_recursive>
 800ef22:	bf00      	nop
 800ef24:	200016f7 	.word	0x200016f7

0800ef28 <__sinit_lock_release>:
 800ef28:	4801      	ldr	r0, [pc, #4]	; (800ef30 <__sinit_lock_release+0x8>)
 800ef2a:	f000 b8b4 	b.w	800f096 <__retarget_lock_release_recursive>
 800ef2e:	bf00      	nop
 800ef30:	200016f7 	.word	0x200016f7

0800ef34 <__sinit>:
 800ef34:	b510      	push	{r4, lr}
 800ef36:	4604      	mov	r4, r0
 800ef38:	f7ff fff0 	bl	800ef1c <__sinit_lock_acquire>
 800ef3c:	69a3      	ldr	r3, [r4, #24]
 800ef3e:	b11b      	cbz	r3, 800ef48 <__sinit+0x14>
 800ef40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef44:	f7ff bff0 	b.w	800ef28 <__sinit_lock_release>
 800ef48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ef4c:	6523      	str	r3, [r4, #80]	; 0x50
 800ef4e:	4b13      	ldr	r3, [pc, #76]	; (800ef9c <__sinit+0x68>)
 800ef50:	4a13      	ldr	r2, [pc, #76]	; (800efa0 <__sinit+0x6c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef56:	42a3      	cmp	r3, r4
 800ef58:	bf08      	it	eq
 800ef5a:	2301      	moveq	r3, #1
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	bf08      	it	eq
 800ef60:	61a3      	streq	r3, [r4, #24]
 800ef62:	f000 f81f 	bl	800efa4 <__sfp>
 800ef66:	6060      	str	r0, [r4, #4]
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f000 f81b 	bl	800efa4 <__sfp>
 800ef6e:	60a0      	str	r0, [r4, #8]
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 f817 	bl	800efa4 <__sfp>
 800ef76:	2200      	movs	r2, #0
 800ef78:	2104      	movs	r1, #4
 800ef7a:	60e0      	str	r0, [r4, #12]
 800ef7c:	6860      	ldr	r0, [r4, #4]
 800ef7e:	f7ff ff81 	bl	800ee84 <std>
 800ef82:	2201      	movs	r2, #1
 800ef84:	2109      	movs	r1, #9
 800ef86:	68a0      	ldr	r0, [r4, #8]
 800ef88:	f7ff ff7c 	bl	800ee84 <std>
 800ef8c:	2202      	movs	r2, #2
 800ef8e:	2112      	movs	r1, #18
 800ef90:	68e0      	ldr	r0, [r4, #12]
 800ef92:	f7ff ff77 	bl	800ee84 <std>
 800ef96:	2301      	movs	r3, #1
 800ef98:	61a3      	str	r3, [r4, #24]
 800ef9a:	e7d1      	b.n	800ef40 <__sinit+0xc>
 800ef9c:	08010280 	.word	0x08010280
 800efa0:	0800eecd 	.word	0x0800eecd

0800efa4 <__sfp>:
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	4607      	mov	r7, r0
 800efa8:	f7ff ffac 	bl	800ef04 <__sfp_lock_acquire>
 800efac:	4b1e      	ldr	r3, [pc, #120]	; (800f028 <__sfp+0x84>)
 800efae:	681e      	ldr	r6, [r3, #0]
 800efb0:	69b3      	ldr	r3, [r6, #24]
 800efb2:	b913      	cbnz	r3, 800efba <__sfp+0x16>
 800efb4:	4630      	mov	r0, r6
 800efb6:	f7ff ffbd 	bl	800ef34 <__sinit>
 800efba:	3648      	adds	r6, #72	; 0x48
 800efbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	d503      	bpl.n	800efcc <__sfp+0x28>
 800efc4:	6833      	ldr	r3, [r6, #0]
 800efc6:	b30b      	cbz	r3, 800f00c <__sfp+0x68>
 800efc8:	6836      	ldr	r6, [r6, #0]
 800efca:	e7f7      	b.n	800efbc <__sfp+0x18>
 800efcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800efd0:	b9d5      	cbnz	r5, 800f008 <__sfp+0x64>
 800efd2:	4b16      	ldr	r3, [pc, #88]	; (800f02c <__sfp+0x88>)
 800efd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800efd8:	60e3      	str	r3, [r4, #12]
 800efda:	6665      	str	r5, [r4, #100]	; 0x64
 800efdc:	f000 f859 	bl	800f092 <__retarget_lock_init_recursive>
 800efe0:	f7ff ff96 	bl	800ef10 <__sfp_lock_release>
 800efe4:	2208      	movs	r2, #8
 800efe6:	4629      	mov	r1, r5
 800efe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800efec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eff0:	6025      	str	r5, [r4, #0]
 800eff2:	61a5      	str	r5, [r4, #24]
 800eff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eff8:	f7ff fe2a 	bl	800ec50 <memset>
 800effc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f004:	4620      	mov	r0, r4
 800f006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f008:	3468      	adds	r4, #104	; 0x68
 800f00a:	e7d9      	b.n	800efc0 <__sfp+0x1c>
 800f00c:	2104      	movs	r1, #4
 800f00e:	4638      	mov	r0, r7
 800f010:	f7ff ff62 	bl	800eed8 <__sfmoreglue>
 800f014:	4604      	mov	r4, r0
 800f016:	6030      	str	r0, [r6, #0]
 800f018:	2800      	cmp	r0, #0
 800f01a:	d1d5      	bne.n	800efc8 <__sfp+0x24>
 800f01c:	f7ff ff78 	bl	800ef10 <__sfp_lock_release>
 800f020:	230c      	movs	r3, #12
 800f022:	603b      	str	r3, [r7, #0]
 800f024:	e7ee      	b.n	800f004 <__sfp+0x60>
 800f026:	bf00      	nop
 800f028:	08010280 	.word	0x08010280
 800f02c:	ffff0001 	.word	0xffff0001

0800f030 <fiprintf>:
 800f030:	b40e      	push	{r1, r2, r3}
 800f032:	b503      	push	{r0, r1, lr}
 800f034:	4601      	mov	r1, r0
 800f036:	ab03      	add	r3, sp, #12
 800f038:	4805      	ldr	r0, [pc, #20]	; (800f050 <fiprintf+0x20>)
 800f03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f03e:	6800      	ldr	r0, [r0, #0]
 800f040:	9301      	str	r3, [sp, #4]
 800f042:	f000 f8ff 	bl	800f244 <_vfiprintf_r>
 800f046:	b002      	add	sp, #8
 800f048:	f85d eb04 	ldr.w	lr, [sp], #4
 800f04c:	b003      	add	sp, #12
 800f04e:	4770      	bx	lr
 800f050:	20000024 	.word	0x20000024

0800f054 <_fwalk_reent>:
 800f054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f058:	4606      	mov	r6, r0
 800f05a:	4688      	mov	r8, r1
 800f05c:	2700      	movs	r7, #0
 800f05e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f066:	f1b9 0901 	subs.w	r9, r9, #1
 800f06a:	d505      	bpl.n	800f078 <_fwalk_reent+0x24>
 800f06c:	6824      	ldr	r4, [r4, #0]
 800f06e:	2c00      	cmp	r4, #0
 800f070:	d1f7      	bne.n	800f062 <_fwalk_reent+0xe>
 800f072:	4638      	mov	r0, r7
 800f074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f078:	89ab      	ldrh	r3, [r5, #12]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d907      	bls.n	800f08e <_fwalk_reent+0x3a>
 800f07e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f082:	3301      	adds	r3, #1
 800f084:	d003      	beq.n	800f08e <_fwalk_reent+0x3a>
 800f086:	4629      	mov	r1, r5
 800f088:	4630      	mov	r0, r6
 800f08a:	47c0      	blx	r8
 800f08c:	4307      	orrs	r7, r0
 800f08e:	3568      	adds	r5, #104	; 0x68
 800f090:	e7e9      	b.n	800f066 <_fwalk_reent+0x12>

0800f092 <__retarget_lock_init_recursive>:
 800f092:	4770      	bx	lr

0800f094 <__retarget_lock_acquire_recursive>:
 800f094:	4770      	bx	lr

0800f096 <__retarget_lock_release_recursive>:
 800f096:	4770      	bx	lr

0800f098 <malloc>:
 800f098:	4b02      	ldr	r3, [pc, #8]	; (800f0a4 <malloc+0xc>)
 800f09a:	4601      	mov	r1, r0
 800f09c:	6818      	ldr	r0, [r3, #0]
 800f09e:	f000 b84f 	b.w	800f140 <_malloc_r>
 800f0a2:	bf00      	nop
 800f0a4:	20000024 	.word	0x20000024

0800f0a8 <_free_r>:
 800f0a8:	b538      	push	{r3, r4, r5, lr}
 800f0aa:	4605      	mov	r5, r0
 800f0ac:	2900      	cmp	r1, #0
 800f0ae:	d043      	beq.n	800f138 <_free_r+0x90>
 800f0b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0b4:	1f0c      	subs	r4, r1, #4
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	bfb8      	it	lt
 800f0ba:	18e4      	addlt	r4, r4, r3
 800f0bc:	f000 fe0c 	bl	800fcd8 <__malloc_lock>
 800f0c0:	4a1e      	ldr	r2, [pc, #120]	; (800f13c <_free_r+0x94>)
 800f0c2:	6813      	ldr	r3, [r2, #0]
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	b933      	cbnz	r3, 800f0d6 <_free_r+0x2e>
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	6014      	str	r4, [r2, #0]
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0d2:	f000 be07 	b.w	800fce4 <__malloc_unlock>
 800f0d6:	42a3      	cmp	r3, r4
 800f0d8:	d90a      	bls.n	800f0f0 <_free_r+0x48>
 800f0da:	6821      	ldr	r1, [r4, #0]
 800f0dc:	1862      	adds	r2, r4, r1
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	bf01      	itttt	eq
 800f0e2:	681a      	ldreq	r2, [r3, #0]
 800f0e4:	685b      	ldreq	r3, [r3, #4]
 800f0e6:	1852      	addeq	r2, r2, r1
 800f0e8:	6022      	streq	r2, [r4, #0]
 800f0ea:	6063      	str	r3, [r4, #4]
 800f0ec:	6004      	str	r4, [r0, #0]
 800f0ee:	e7ed      	b.n	800f0cc <_free_r+0x24>
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	b10b      	cbz	r3, 800f0fa <_free_r+0x52>
 800f0f6:	42a3      	cmp	r3, r4
 800f0f8:	d9fa      	bls.n	800f0f0 <_free_r+0x48>
 800f0fa:	6811      	ldr	r1, [r2, #0]
 800f0fc:	1850      	adds	r0, r2, r1
 800f0fe:	42a0      	cmp	r0, r4
 800f100:	d10b      	bne.n	800f11a <_free_r+0x72>
 800f102:	6820      	ldr	r0, [r4, #0]
 800f104:	4401      	add	r1, r0
 800f106:	1850      	adds	r0, r2, r1
 800f108:	4283      	cmp	r3, r0
 800f10a:	6011      	str	r1, [r2, #0]
 800f10c:	d1de      	bne.n	800f0cc <_free_r+0x24>
 800f10e:	6818      	ldr	r0, [r3, #0]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	4401      	add	r1, r0
 800f114:	6011      	str	r1, [r2, #0]
 800f116:	6053      	str	r3, [r2, #4]
 800f118:	e7d8      	b.n	800f0cc <_free_r+0x24>
 800f11a:	d902      	bls.n	800f122 <_free_r+0x7a>
 800f11c:	230c      	movs	r3, #12
 800f11e:	602b      	str	r3, [r5, #0]
 800f120:	e7d4      	b.n	800f0cc <_free_r+0x24>
 800f122:	6820      	ldr	r0, [r4, #0]
 800f124:	1821      	adds	r1, r4, r0
 800f126:	428b      	cmp	r3, r1
 800f128:	bf01      	itttt	eq
 800f12a:	6819      	ldreq	r1, [r3, #0]
 800f12c:	685b      	ldreq	r3, [r3, #4]
 800f12e:	1809      	addeq	r1, r1, r0
 800f130:	6021      	streq	r1, [r4, #0]
 800f132:	6063      	str	r3, [r4, #4]
 800f134:	6054      	str	r4, [r2, #4]
 800f136:	e7c9      	b.n	800f0cc <_free_r+0x24>
 800f138:	bd38      	pop	{r3, r4, r5, pc}
 800f13a:	bf00      	nop
 800f13c:	200016dc 	.word	0x200016dc

0800f140 <_malloc_r>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	1ccd      	adds	r5, r1, #3
 800f144:	f025 0503 	bic.w	r5, r5, #3
 800f148:	3508      	adds	r5, #8
 800f14a:	2d0c      	cmp	r5, #12
 800f14c:	bf38      	it	cc
 800f14e:	250c      	movcc	r5, #12
 800f150:	2d00      	cmp	r5, #0
 800f152:	4606      	mov	r6, r0
 800f154:	db01      	blt.n	800f15a <_malloc_r+0x1a>
 800f156:	42a9      	cmp	r1, r5
 800f158:	d903      	bls.n	800f162 <_malloc_r+0x22>
 800f15a:	230c      	movs	r3, #12
 800f15c:	6033      	str	r3, [r6, #0]
 800f15e:	2000      	movs	r0, #0
 800f160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f162:	f000 fdb9 	bl	800fcd8 <__malloc_lock>
 800f166:	4921      	ldr	r1, [pc, #132]	; (800f1ec <_malloc_r+0xac>)
 800f168:	680a      	ldr	r2, [r1, #0]
 800f16a:	4614      	mov	r4, r2
 800f16c:	b99c      	cbnz	r4, 800f196 <_malloc_r+0x56>
 800f16e:	4f20      	ldr	r7, [pc, #128]	; (800f1f0 <_malloc_r+0xb0>)
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	b923      	cbnz	r3, 800f17e <_malloc_r+0x3e>
 800f174:	4621      	mov	r1, r4
 800f176:	4630      	mov	r0, r6
 800f178:	f000 fb2a 	bl	800f7d0 <_sbrk_r>
 800f17c:	6038      	str	r0, [r7, #0]
 800f17e:	4629      	mov	r1, r5
 800f180:	4630      	mov	r0, r6
 800f182:	f000 fb25 	bl	800f7d0 <_sbrk_r>
 800f186:	1c43      	adds	r3, r0, #1
 800f188:	d123      	bne.n	800f1d2 <_malloc_r+0x92>
 800f18a:	230c      	movs	r3, #12
 800f18c:	4630      	mov	r0, r6
 800f18e:	6033      	str	r3, [r6, #0]
 800f190:	f000 fda8 	bl	800fce4 <__malloc_unlock>
 800f194:	e7e3      	b.n	800f15e <_malloc_r+0x1e>
 800f196:	6823      	ldr	r3, [r4, #0]
 800f198:	1b5b      	subs	r3, r3, r5
 800f19a:	d417      	bmi.n	800f1cc <_malloc_r+0x8c>
 800f19c:	2b0b      	cmp	r3, #11
 800f19e:	d903      	bls.n	800f1a8 <_malloc_r+0x68>
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	441c      	add	r4, r3
 800f1a4:	6025      	str	r5, [r4, #0]
 800f1a6:	e004      	b.n	800f1b2 <_malloc_r+0x72>
 800f1a8:	6863      	ldr	r3, [r4, #4]
 800f1aa:	42a2      	cmp	r2, r4
 800f1ac:	bf0c      	ite	eq
 800f1ae:	600b      	streq	r3, [r1, #0]
 800f1b0:	6053      	strne	r3, [r2, #4]
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f000 fd96 	bl	800fce4 <__malloc_unlock>
 800f1b8:	f104 000b 	add.w	r0, r4, #11
 800f1bc:	1d23      	adds	r3, r4, #4
 800f1be:	f020 0007 	bic.w	r0, r0, #7
 800f1c2:	1ac2      	subs	r2, r0, r3
 800f1c4:	d0cc      	beq.n	800f160 <_malloc_r+0x20>
 800f1c6:	1a1b      	subs	r3, r3, r0
 800f1c8:	50a3      	str	r3, [r4, r2]
 800f1ca:	e7c9      	b.n	800f160 <_malloc_r+0x20>
 800f1cc:	4622      	mov	r2, r4
 800f1ce:	6864      	ldr	r4, [r4, #4]
 800f1d0:	e7cc      	b.n	800f16c <_malloc_r+0x2c>
 800f1d2:	1cc4      	adds	r4, r0, #3
 800f1d4:	f024 0403 	bic.w	r4, r4, #3
 800f1d8:	42a0      	cmp	r0, r4
 800f1da:	d0e3      	beq.n	800f1a4 <_malloc_r+0x64>
 800f1dc:	1a21      	subs	r1, r4, r0
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f000 faf6 	bl	800f7d0 <_sbrk_r>
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d1dd      	bne.n	800f1a4 <_malloc_r+0x64>
 800f1e8:	e7cf      	b.n	800f18a <_malloc_r+0x4a>
 800f1ea:	bf00      	nop
 800f1ec:	200016dc 	.word	0x200016dc
 800f1f0:	200016e0 	.word	0x200016e0

0800f1f4 <__sfputc_r>:
 800f1f4:	6893      	ldr	r3, [r2, #8]
 800f1f6:	b410      	push	{r4}
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	6093      	str	r3, [r2, #8]
 800f1fe:	da07      	bge.n	800f210 <__sfputc_r+0x1c>
 800f200:	6994      	ldr	r4, [r2, #24]
 800f202:	42a3      	cmp	r3, r4
 800f204:	db01      	blt.n	800f20a <__sfputc_r+0x16>
 800f206:	290a      	cmp	r1, #10
 800f208:	d102      	bne.n	800f210 <__sfputc_r+0x1c>
 800f20a:	bc10      	pop	{r4}
 800f20c:	f000 bb34 	b.w	800f878 <__swbuf_r>
 800f210:	6813      	ldr	r3, [r2, #0]
 800f212:	1c58      	adds	r0, r3, #1
 800f214:	6010      	str	r0, [r2, #0]
 800f216:	7019      	strb	r1, [r3, #0]
 800f218:	4608      	mov	r0, r1
 800f21a:	bc10      	pop	{r4}
 800f21c:	4770      	bx	lr

0800f21e <__sfputs_r>:
 800f21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f220:	4606      	mov	r6, r0
 800f222:	460f      	mov	r7, r1
 800f224:	4614      	mov	r4, r2
 800f226:	18d5      	adds	r5, r2, r3
 800f228:	42ac      	cmp	r4, r5
 800f22a:	d101      	bne.n	800f230 <__sfputs_r+0x12>
 800f22c:	2000      	movs	r0, #0
 800f22e:	e007      	b.n	800f240 <__sfputs_r+0x22>
 800f230:	463a      	mov	r2, r7
 800f232:	4630      	mov	r0, r6
 800f234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f238:	f7ff ffdc 	bl	800f1f4 <__sfputc_r>
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	d1f3      	bne.n	800f228 <__sfputs_r+0xa>
 800f240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f244 <_vfiprintf_r>:
 800f244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f248:	460d      	mov	r5, r1
 800f24a:	4614      	mov	r4, r2
 800f24c:	4698      	mov	r8, r3
 800f24e:	4606      	mov	r6, r0
 800f250:	b09d      	sub	sp, #116	; 0x74
 800f252:	b118      	cbz	r0, 800f25c <_vfiprintf_r+0x18>
 800f254:	6983      	ldr	r3, [r0, #24]
 800f256:	b90b      	cbnz	r3, 800f25c <_vfiprintf_r+0x18>
 800f258:	f7ff fe6c 	bl	800ef34 <__sinit>
 800f25c:	4b89      	ldr	r3, [pc, #548]	; (800f484 <_vfiprintf_r+0x240>)
 800f25e:	429d      	cmp	r5, r3
 800f260:	d11b      	bne.n	800f29a <_vfiprintf_r+0x56>
 800f262:	6875      	ldr	r5, [r6, #4]
 800f264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f266:	07d9      	lsls	r1, r3, #31
 800f268:	d405      	bmi.n	800f276 <_vfiprintf_r+0x32>
 800f26a:	89ab      	ldrh	r3, [r5, #12]
 800f26c:	059a      	lsls	r2, r3, #22
 800f26e:	d402      	bmi.n	800f276 <_vfiprintf_r+0x32>
 800f270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f272:	f7ff ff0f 	bl	800f094 <__retarget_lock_acquire_recursive>
 800f276:	89ab      	ldrh	r3, [r5, #12]
 800f278:	071b      	lsls	r3, r3, #28
 800f27a:	d501      	bpl.n	800f280 <_vfiprintf_r+0x3c>
 800f27c:	692b      	ldr	r3, [r5, #16]
 800f27e:	b9eb      	cbnz	r3, 800f2bc <_vfiprintf_r+0x78>
 800f280:	4629      	mov	r1, r5
 800f282:	4630      	mov	r0, r6
 800f284:	f000 fb5c 	bl	800f940 <__swsetup_r>
 800f288:	b1c0      	cbz	r0, 800f2bc <_vfiprintf_r+0x78>
 800f28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f28c:	07dc      	lsls	r4, r3, #31
 800f28e:	d50e      	bpl.n	800f2ae <_vfiprintf_r+0x6a>
 800f290:	f04f 30ff 	mov.w	r0, #4294967295
 800f294:	b01d      	add	sp, #116	; 0x74
 800f296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29a:	4b7b      	ldr	r3, [pc, #492]	; (800f488 <_vfiprintf_r+0x244>)
 800f29c:	429d      	cmp	r5, r3
 800f29e:	d101      	bne.n	800f2a4 <_vfiprintf_r+0x60>
 800f2a0:	68b5      	ldr	r5, [r6, #8]
 800f2a2:	e7df      	b.n	800f264 <_vfiprintf_r+0x20>
 800f2a4:	4b79      	ldr	r3, [pc, #484]	; (800f48c <_vfiprintf_r+0x248>)
 800f2a6:	429d      	cmp	r5, r3
 800f2a8:	bf08      	it	eq
 800f2aa:	68f5      	ldreq	r5, [r6, #12]
 800f2ac:	e7da      	b.n	800f264 <_vfiprintf_r+0x20>
 800f2ae:	89ab      	ldrh	r3, [r5, #12]
 800f2b0:	0598      	lsls	r0, r3, #22
 800f2b2:	d4ed      	bmi.n	800f290 <_vfiprintf_r+0x4c>
 800f2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2b6:	f7ff feee 	bl	800f096 <__retarget_lock_release_recursive>
 800f2ba:	e7e9      	b.n	800f290 <_vfiprintf_r+0x4c>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	9309      	str	r3, [sp, #36]	; 0x24
 800f2c0:	2320      	movs	r3, #32
 800f2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2c6:	2330      	movs	r3, #48	; 0x30
 800f2c8:	f04f 0901 	mov.w	r9, #1
 800f2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f490 <_vfiprintf_r+0x24c>
 800f2d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2d8:	4623      	mov	r3, r4
 800f2da:	469a      	mov	sl, r3
 800f2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2e0:	b10a      	cbz	r2, 800f2e6 <_vfiprintf_r+0xa2>
 800f2e2:	2a25      	cmp	r2, #37	; 0x25
 800f2e4:	d1f9      	bne.n	800f2da <_vfiprintf_r+0x96>
 800f2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800f2ea:	d00b      	beq.n	800f304 <_vfiprintf_r+0xc0>
 800f2ec:	465b      	mov	r3, fp
 800f2ee:	4622      	mov	r2, r4
 800f2f0:	4629      	mov	r1, r5
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	f7ff ff93 	bl	800f21e <__sfputs_r>
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	f000 80aa 	beq.w	800f452 <_vfiprintf_r+0x20e>
 800f2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f300:	445a      	add	r2, fp
 800f302:	9209      	str	r2, [sp, #36]	; 0x24
 800f304:	f89a 3000 	ldrb.w	r3, [sl]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 80a2 	beq.w	800f452 <_vfiprintf_r+0x20e>
 800f30e:	2300      	movs	r3, #0
 800f310:	f04f 32ff 	mov.w	r2, #4294967295
 800f314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f318:	f10a 0a01 	add.w	sl, sl, #1
 800f31c:	9304      	str	r3, [sp, #16]
 800f31e:	9307      	str	r3, [sp, #28]
 800f320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f324:	931a      	str	r3, [sp, #104]	; 0x68
 800f326:	4654      	mov	r4, sl
 800f328:	2205      	movs	r2, #5
 800f32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32e:	4858      	ldr	r0, [pc, #352]	; (800f490 <_vfiprintf_r+0x24c>)
 800f330:	f000 fcc4 	bl	800fcbc <memchr>
 800f334:	9a04      	ldr	r2, [sp, #16]
 800f336:	b9d8      	cbnz	r0, 800f370 <_vfiprintf_r+0x12c>
 800f338:	06d1      	lsls	r1, r2, #27
 800f33a:	bf44      	itt	mi
 800f33c:	2320      	movmi	r3, #32
 800f33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f342:	0713      	lsls	r3, r2, #28
 800f344:	bf44      	itt	mi
 800f346:	232b      	movmi	r3, #43	; 0x2b
 800f348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f34c:	f89a 3000 	ldrb.w	r3, [sl]
 800f350:	2b2a      	cmp	r3, #42	; 0x2a
 800f352:	d015      	beq.n	800f380 <_vfiprintf_r+0x13c>
 800f354:	4654      	mov	r4, sl
 800f356:	2000      	movs	r0, #0
 800f358:	f04f 0c0a 	mov.w	ip, #10
 800f35c:	9a07      	ldr	r2, [sp, #28]
 800f35e:	4621      	mov	r1, r4
 800f360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f364:	3b30      	subs	r3, #48	; 0x30
 800f366:	2b09      	cmp	r3, #9
 800f368:	d94e      	bls.n	800f408 <_vfiprintf_r+0x1c4>
 800f36a:	b1b0      	cbz	r0, 800f39a <_vfiprintf_r+0x156>
 800f36c:	9207      	str	r2, [sp, #28]
 800f36e:	e014      	b.n	800f39a <_vfiprintf_r+0x156>
 800f370:	eba0 0308 	sub.w	r3, r0, r8
 800f374:	fa09 f303 	lsl.w	r3, r9, r3
 800f378:	4313      	orrs	r3, r2
 800f37a:	46a2      	mov	sl, r4
 800f37c:	9304      	str	r3, [sp, #16]
 800f37e:	e7d2      	b.n	800f326 <_vfiprintf_r+0xe2>
 800f380:	9b03      	ldr	r3, [sp, #12]
 800f382:	1d19      	adds	r1, r3, #4
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	9103      	str	r1, [sp, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	bfbb      	ittet	lt
 800f38c:	425b      	neglt	r3, r3
 800f38e:	f042 0202 	orrlt.w	r2, r2, #2
 800f392:	9307      	strge	r3, [sp, #28]
 800f394:	9307      	strlt	r3, [sp, #28]
 800f396:	bfb8      	it	lt
 800f398:	9204      	strlt	r2, [sp, #16]
 800f39a:	7823      	ldrb	r3, [r4, #0]
 800f39c:	2b2e      	cmp	r3, #46	; 0x2e
 800f39e:	d10c      	bne.n	800f3ba <_vfiprintf_r+0x176>
 800f3a0:	7863      	ldrb	r3, [r4, #1]
 800f3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f3a4:	d135      	bne.n	800f412 <_vfiprintf_r+0x1ce>
 800f3a6:	9b03      	ldr	r3, [sp, #12]
 800f3a8:	3402      	adds	r4, #2
 800f3aa:	1d1a      	adds	r2, r3, #4
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	9203      	str	r2, [sp, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	bfb8      	it	lt
 800f3b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3b8:	9305      	str	r3, [sp, #20]
 800f3ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4a0 <_vfiprintf_r+0x25c>
 800f3be:	2203      	movs	r2, #3
 800f3c0:	4650      	mov	r0, sl
 800f3c2:	7821      	ldrb	r1, [r4, #0]
 800f3c4:	f000 fc7a 	bl	800fcbc <memchr>
 800f3c8:	b140      	cbz	r0, 800f3dc <_vfiprintf_r+0x198>
 800f3ca:	2340      	movs	r3, #64	; 0x40
 800f3cc:	eba0 000a 	sub.w	r0, r0, sl
 800f3d0:	fa03 f000 	lsl.w	r0, r3, r0
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	3401      	adds	r4, #1
 800f3d8:	4303      	orrs	r3, r0
 800f3da:	9304      	str	r3, [sp, #16]
 800f3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e0:	2206      	movs	r2, #6
 800f3e2:	482c      	ldr	r0, [pc, #176]	; (800f494 <_vfiprintf_r+0x250>)
 800f3e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3e8:	f000 fc68 	bl	800fcbc <memchr>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d03f      	beq.n	800f470 <_vfiprintf_r+0x22c>
 800f3f0:	4b29      	ldr	r3, [pc, #164]	; (800f498 <_vfiprintf_r+0x254>)
 800f3f2:	bb1b      	cbnz	r3, 800f43c <_vfiprintf_r+0x1f8>
 800f3f4:	9b03      	ldr	r3, [sp, #12]
 800f3f6:	3307      	adds	r3, #7
 800f3f8:	f023 0307 	bic.w	r3, r3, #7
 800f3fc:	3308      	adds	r3, #8
 800f3fe:	9303      	str	r3, [sp, #12]
 800f400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f402:	443b      	add	r3, r7
 800f404:	9309      	str	r3, [sp, #36]	; 0x24
 800f406:	e767      	b.n	800f2d8 <_vfiprintf_r+0x94>
 800f408:	460c      	mov	r4, r1
 800f40a:	2001      	movs	r0, #1
 800f40c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f410:	e7a5      	b.n	800f35e <_vfiprintf_r+0x11a>
 800f412:	2300      	movs	r3, #0
 800f414:	f04f 0c0a 	mov.w	ip, #10
 800f418:	4619      	mov	r1, r3
 800f41a:	3401      	adds	r4, #1
 800f41c:	9305      	str	r3, [sp, #20]
 800f41e:	4620      	mov	r0, r4
 800f420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f424:	3a30      	subs	r2, #48	; 0x30
 800f426:	2a09      	cmp	r2, #9
 800f428:	d903      	bls.n	800f432 <_vfiprintf_r+0x1ee>
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d0c5      	beq.n	800f3ba <_vfiprintf_r+0x176>
 800f42e:	9105      	str	r1, [sp, #20]
 800f430:	e7c3      	b.n	800f3ba <_vfiprintf_r+0x176>
 800f432:	4604      	mov	r4, r0
 800f434:	2301      	movs	r3, #1
 800f436:	fb0c 2101 	mla	r1, ip, r1, r2
 800f43a:	e7f0      	b.n	800f41e <_vfiprintf_r+0x1da>
 800f43c:	ab03      	add	r3, sp, #12
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	462a      	mov	r2, r5
 800f442:	4630      	mov	r0, r6
 800f444:	4b15      	ldr	r3, [pc, #84]	; (800f49c <_vfiprintf_r+0x258>)
 800f446:	a904      	add	r1, sp, #16
 800f448:	f3af 8000 	nop.w
 800f44c:	4607      	mov	r7, r0
 800f44e:	1c78      	adds	r0, r7, #1
 800f450:	d1d6      	bne.n	800f400 <_vfiprintf_r+0x1bc>
 800f452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f454:	07d9      	lsls	r1, r3, #31
 800f456:	d405      	bmi.n	800f464 <_vfiprintf_r+0x220>
 800f458:	89ab      	ldrh	r3, [r5, #12]
 800f45a:	059a      	lsls	r2, r3, #22
 800f45c:	d402      	bmi.n	800f464 <_vfiprintf_r+0x220>
 800f45e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f460:	f7ff fe19 	bl	800f096 <__retarget_lock_release_recursive>
 800f464:	89ab      	ldrh	r3, [r5, #12]
 800f466:	065b      	lsls	r3, r3, #25
 800f468:	f53f af12 	bmi.w	800f290 <_vfiprintf_r+0x4c>
 800f46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f46e:	e711      	b.n	800f294 <_vfiprintf_r+0x50>
 800f470:	ab03      	add	r3, sp, #12
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	462a      	mov	r2, r5
 800f476:	4630      	mov	r0, r6
 800f478:	4b08      	ldr	r3, [pc, #32]	; (800f49c <_vfiprintf_r+0x258>)
 800f47a:	a904      	add	r1, sp, #16
 800f47c:	f000 f882 	bl	800f584 <_printf_i>
 800f480:	e7e4      	b.n	800f44c <_vfiprintf_r+0x208>
 800f482:	bf00      	nop
 800f484:	0801045c 	.word	0x0801045c
 800f488:	0801047c 	.word	0x0801047c
 800f48c:	0801043c 	.word	0x0801043c
 800f490:	0801049c 	.word	0x0801049c
 800f494:	080104a6 	.word	0x080104a6
 800f498:	00000000 	.word	0x00000000
 800f49c:	0800f21f 	.word	0x0800f21f
 800f4a0:	080104a2 	.word	0x080104a2

0800f4a4 <_printf_common>:
 800f4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a8:	4616      	mov	r6, r2
 800f4aa:	4699      	mov	r9, r3
 800f4ac:	688a      	ldr	r2, [r1, #8]
 800f4ae:	690b      	ldr	r3, [r1, #16]
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	bfb8      	it	lt
 800f4b6:	4613      	movlt	r3, r2
 800f4b8:	6033      	str	r3, [r6, #0]
 800f4ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4be:	460c      	mov	r4, r1
 800f4c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4c4:	b10a      	cbz	r2, 800f4ca <_printf_common+0x26>
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	6033      	str	r3, [r6, #0]
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	0699      	lsls	r1, r3, #26
 800f4ce:	bf42      	ittt	mi
 800f4d0:	6833      	ldrmi	r3, [r6, #0]
 800f4d2:	3302      	addmi	r3, #2
 800f4d4:	6033      	strmi	r3, [r6, #0]
 800f4d6:	6825      	ldr	r5, [r4, #0]
 800f4d8:	f015 0506 	ands.w	r5, r5, #6
 800f4dc:	d106      	bne.n	800f4ec <_printf_common+0x48>
 800f4de:	f104 0a19 	add.w	sl, r4, #25
 800f4e2:	68e3      	ldr	r3, [r4, #12]
 800f4e4:	6832      	ldr	r2, [r6, #0]
 800f4e6:	1a9b      	subs	r3, r3, r2
 800f4e8:	42ab      	cmp	r3, r5
 800f4ea:	dc28      	bgt.n	800f53e <_printf_common+0x9a>
 800f4ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f4f0:	1e13      	subs	r3, r2, #0
 800f4f2:	6822      	ldr	r2, [r4, #0]
 800f4f4:	bf18      	it	ne
 800f4f6:	2301      	movne	r3, #1
 800f4f8:	0692      	lsls	r2, r2, #26
 800f4fa:	d42d      	bmi.n	800f558 <_printf_common+0xb4>
 800f4fc:	4649      	mov	r1, r9
 800f4fe:	4638      	mov	r0, r7
 800f500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f504:	47c0      	blx	r8
 800f506:	3001      	adds	r0, #1
 800f508:	d020      	beq.n	800f54c <_printf_common+0xa8>
 800f50a:	6823      	ldr	r3, [r4, #0]
 800f50c:	68e5      	ldr	r5, [r4, #12]
 800f50e:	f003 0306 	and.w	r3, r3, #6
 800f512:	2b04      	cmp	r3, #4
 800f514:	bf18      	it	ne
 800f516:	2500      	movne	r5, #0
 800f518:	6832      	ldr	r2, [r6, #0]
 800f51a:	f04f 0600 	mov.w	r6, #0
 800f51e:	68a3      	ldr	r3, [r4, #8]
 800f520:	bf08      	it	eq
 800f522:	1aad      	subeq	r5, r5, r2
 800f524:	6922      	ldr	r2, [r4, #16]
 800f526:	bf08      	it	eq
 800f528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f52c:	4293      	cmp	r3, r2
 800f52e:	bfc4      	itt	gt
 800f530:	1a9b      	subgt	r3, r3, r2
 800f532:	18ed      	addgt	r5, r5, r3
 800f534:	341a      	adds	r4, #26
 800f536:	42b5      	cmp	r5, r6
 800f538:	d11a      	bne.n	800f570 <_printf_common+0xcc>
 800f53a:	2000      	movs	r0, #0
 800f53c:	e008      	b.n	800f550 <_printf_common+0xac>
 800f53e:	2301      	movs	r3, #1
 800f540:	4652      	mov	r2, sl
 800f542:	4649      	mov	r1, r9
 800f544:	4638      	mov	r0, r7
 800f546:	47c0      	blx	r8
 800f548:	3001      	adds	r0, #1
 800f54a:	d103      	bne.n	800f554 <_printf_common+0xb0>
 800f54c:	f04f 30ff 	mov.w	r0, #4294967295
 800f550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f554:	3501      	adds	r5, #1
 800f556:	e7c4      	b.n	800f4e2 <_printf_common+0x3e>
 800f558:	2030      	movs	r0, #48	; 0x30
 800f55a:	18e1      	adds	r1, r4, r3
 800f55c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f560:	1c5a      	adds	r2, r3, #1
 800f562:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f566:	4422      	add	r2, r4
 800f568:	3302      	adds	r3, #2
 800f56a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f56e:	e7c5      	b.n	800f4fc <_printf_common+0x58>
 800f570:	2301      	movs	r3, #1
 800f572:	4622      	mov	r2, r4
 800f574:	4649      	mov	r1, r9
 800f576:	4638      	mov	r0, r7
 800f578:	47c0      	blx	r8
 800f57a:	3001      	adds	r0, #1
 800f57c:	d0e6      	beq.n	800f54c <_printf_common+0xa8>
 800f57e:	3601      	adds	r6, #1
 800f580:	e7d9      	b.n	800f536 <_printf_common+0x92>
	...

0800f584 <_printf_i>:
 800f584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f588:	460c      	mov	r4, r1
 800f58a:	7e27      	ldrb	r7, [r4, #24]
 800f58c:	4691      	mov	r9, r2
 800f58e:	2f78      	cmp	r7, #120	; 0x78
 800f590:	4680      	mov	r8, r0
 800f592:	469a      	mov	sl, r3
 800f594:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f59a:	d807      	bhi.n	800f5ac <_printf_i+0x28>
 800f59c:	2f62      	cmp	r7, #98	; 0x62
 800f59e:	d80a      	bhi.n	800f5b6 <_printf_i+0x32>
 800f5a0:	2f00      	cmp	r7, #0
 800f5a2:	f000 80d9 	beq.w	800f758 <_printf_i+0x1d4>
 800f5a6:	2f58      	cmp	r7, #88	; 0x58
 800f5a8:	f000 80a4 	beq.w	800f6f4 <_printf_i+0x170>
 800f5ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f5b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f5b4:	e03a      	b.n	800f62c <_printf_i+0xa8>
 800f5b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5ba:	2b15      	cmp	r3, #21
 800f5bc:	d8f6      	bhi.n	800f5ac <_printf_i+0x28>
 800f5be:	a001      	add	r0, pc, #4	; (adr r0, 800f5c4 <_printf_i+0x40>)
 800f5c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f5c4:	0800f61d 	.word	0x0800f61d
 800f5c8:	0800f631 	.word	0x0800f631
 800f5cc:	0800f5ad 	.word	0x0800f5ad
 800f5d0:	0800f5ad 	.word	0x0800f5ad
 800f5d4:	0800f5ad 	.word	0x0800f5ad
 800f5d8:	0800f5ad 	.word	0x0800f5ad
 800f5dc:	0800f631 	.word	0x0800f631
 800f5e0:	0800f5ad 	.word	0x0800f5ad
 800f5e4:	0800f5ad 	.word	0x0800f5ad
 800f5e8:	0800f5ad 	.word	0x0800f5ad
 800f5ec:	0800f5ad 	.word	0x0800f5ad
 800f5f0:	0800f73f 	.word	0x0800f73f
 800f5f4:	0800f661 	.word	0x0800f661
 800f5f8:	0800f721 	.word	0x0800f721
 800f5fc:	0800f5ad 	.word	0x0800f5ad
 800f600:	0800f5ad 	.word	0x0800f5ad
 800f604:	0800f761 	.word	0x0800f761
 800f608:	0800f5ad 	.word	0x0800f5ad
 800f60c:	0800f661 	.word	0x0800f661
 800f610:	0800f5ad 	.word	0x0800f5ad
 800f614:	0800f5ad 	.word	0x0800f5ad
 800f618:	0800f729 	.word	0x0800f729
 800f61c:	680b      	ldr	r3, [r1, #0]
 800f61e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f622:	1d1a      	adds	r2, r3, #4
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	600a      	str	r2, [r1, #0]
 800f628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f62c:	2301      	movs	r3, #1
 800f62e:	e0a4      	b.n	800f77a <_printf_i+0x1f6>
 800f630:	6825      	ldr	r5, [r4, #0]
 800f632:	6808      	ldr	r0, [r1, #0]
 800f634:	062e      	lsls	r6, r5, #24
 800f636:	f100 0304 	add.w	r3, r0, #4
 800f63a:	d50a      	bpl.n	800f652 <_printf_i+0xce>
 800f63c:	6805      	ldr	r5, [r0, #0]
 800f63e:	600b      	str	r3, [r1, #0]
 800f640:	2d00      	cmp	r5, #0
 800f642:	da03      	bge.n	800f64c <_printf_i+0xc8>
 800f644:	232d      	movs	r3, #45	; 0x2d
 800f646:	426d      	negs	r5, r5
 800f648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f64c:	230a      	movs	r3, #10
 800f64e:	485e      	ldr	r0, [pc, #376]	; (800f7c8 <_printf_i+0x244>)
 800f650:	e019      	b.n	800f686 <_printf_i+0x102>
 800f652:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f656:	6805      	ldr	r5, [r0, #0]
 800f658:	600b      	str	r3, [r1, #0]
 800f65a:	bf18      	it	ne
 800f65c:	b22d      	sxthne	r5, r5
 800f65e:	e7ef      	b.n	800f640 <_printf_i+0xbc>
 800f660:	680b      	ldr	r3, [r1, #0]
 800f662:	6825      	ldr	r5, [r4, #0]
 800f664:	1d18      	adds	r0, r3, #4
 800f666:	6008      	str	r0, [r1, #0]
 800f668:	0628      	lsls	r0, r5, #24
 800f66a:	d501      	bpl.n	800f670 <_printf_i+0xec>
 800f66c:	681d      	ldr	r5, [r3, #0]
 800f66e:	e002      	b.n	800f676 <_printf_i+0xf2>
 800f670:	0669      	lsls	r1, r5, #25
 800f672:	d5fb      	bpl.n	800f66c <_printf_i+0xe8>
 800f674:	881d      	ldrh	r5, [r3, #0]
 800f676:	2f6f      	cmp	r7, #111	; 0x6f
 800f678:	bf0c      	ite	eq
 800f67a:	2308      	moveq	r3, #8
 800f67c:	230a      	movne	r3, #10
 800f67e:	4852      	ldr	r0, [pc, #328]	; (800f7c8 <_printf_i+0x244>)
 800f680:	2100      	movs	r1, #0
 800f682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f686:	6866      	ldr	r6, [r4, #4]
 800f688:	2e00      	cmp	r6, #0
 800f68a:	bfa8      	it	ge
 800f68c:	6821      	ldrge	r1, [r4, #0]
 800f68e:	60a6      	str	r6, [r4, #8]
 800f690:	bfa4      	itt	ge
 800f692:	f021 0104 	bicge.w	r1, r1, #4
 800f696:	6021      	strge	r1, [r4, #0]
 800f698:	b90d      	cbnz	r5, 800f69e <_printf_i+0x11a>
 800f69a:	2e00      	cmp	r6, #0
 800f69c:	d04d      	beq.n	800f73a <_printf_i+0x1b6>
 800f69e:	4616      	mov	r6, r2
 800f6a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6a4:	fb03 5711 	mls	r7, r3, r1, r5
 800f6a8:	5dc7      	ldrb	r7, [r0, r7]
 800f6aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f6ae:	462f      	mov	r7, r5
 800f6b0:	42bb      	cmp	r3, r7
 800f6b2:	460d      	mov	r5, r1
 800f6b4:	d9f4      	bls.n	800f6a0 <_printf_i+0x11c>
 800f6b6:	2b08      	cmp	r3, #8
 800f6b8:	d10b      	bne.n	800f6d2 <_printf_i+0x14e>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	07df      	lsls	r7, r3, #31
 800f6be:	d508      	bpl.n	800f6d2 <_printf_i+0x14e>
 800f6c0:	6923      	ldr	r3, [r4, #16]
 800f6c2:	6861      	ldr	r1, [r4, #4]
 800f6c4:	4299      	cmp	r1, r3
 800f6c6:	bfde      	ittt	le
 800f6c8:	2330      	movle	r3, #48	; 0x30
 800f6ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f6d2:	1b92      	subs	r2, r2, r6
 800f6d4:	6122      	str	r2, [r4, #16]
 800f6d6:	464b      	mov	r3, r9
 800f6d8:	4621      	mov	r1, r4
 800f6da:	4640      	mov	r0, r8
 800f6dc:	f8cd a000 	str.w	sl, [sp]
 800f6e0:	aa03      	add	r2, sp, #12
 800f6e2:	f7ff fedf 	bl	800f4a4 <_printf_common>
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	d14c      	bne.n	800f784 <_printf_i+0x200>
 800f6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ee:	b004      	add	sp, #16
 800f6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6f4:	4834      	ldr	r0, [pc, #208]	; (800f7c8 <_printf_i+0x244>)
 800f6f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f6fa:	680e      	ldr	r6, [r1, #0]
 800f6fc:	6823      	ldr	r3, [r4, #0]
 800f6fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800f702:	061f      	lsls	r7, r3, #24
 800f704:	600e      	str	r6, [r1, #0]
 800f706:	d514      	bpl.n	800f732 <_printf_i+0x1ae>
 800f708:	07d9      	lsls	r1, r3, #31
 800f70a:	bf44      	itt	mi
 800f70c:	f043 0320 	orrmi.w	r3, r3, #32
 800f710:	6023      	strmi	r3, [r4, #0]
 800f712:	b91d      	cbnz	r5, 800f71c <_printf_i+0x198>
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	f023 0320 	bic.w	r3, r3, #32
 800f71a:	6023      	str	r3, [r4, #0]
 800f71c:	2310      	movs	r3, #16
 800f71e:	e7af      	b.n	800f680 <_printf_i+0xfc>
 800f720:	6823      	ldr	r3, [r4, #0]
 800f722:	f043 0320 	orr.w	r3, r3, #32
 800f726:	6023      	str	r3, [r4, #0]
 800f728:	2378      	movs	r3, #120	; 0x78
 800f72a:	4828      	ldr	r0, [pc, #160]	; (800f7cc <_printf_i+0x248>)
 800f72c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f730:	e7e3      	b.n	800f6fa <_printf_i+0x176>
 800f732:	065e      	lsls	r6, r3, #25
 800f734:	bf48      	it	mi
 800f736:	b2ad      	uxthmi	r5, r5
 800f738:	e7e6      	b.n	800f708 <_printf_i+0x184>
 800f73a:	4616      	mov	r6, r2
 800f73c:	e7bb      	b.n	800f6b6 <_printf_i+0x132>
 800f73e:	680b      	ldr	r3, [r1, #0]
 800f740:	6826      	ldr	r6, [r4, #0]
 800f742:	1d1d      	adds	r5, r3, #4
 800f744:	6960      	ldr	r0, [r4, #20]
 800f746:	600d      	str	r5, [r1, #0]
 800f748:	0635      	lsls	r5, r6, #24
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	d501      	bpl.n	800f752 <_printf_i+0x1ce>
 800f74e:	6018      	str	r0, [r3, #0]
 800f750:	e002      	b.n	800f758 <_printf_i+0x1d4>
 800f752:	0671      	lsls	r1, r6, #25
 800f754:	d5fb      	bpl.n	800f74e <_printf_i+0x1ca>
 800f756:	8018      	strh	r0, [r3, #0]
 800f758:	2300      	movs	r3, #0
 800f75a:	4616      	mov	r6, r2
 800f75c:	6123      	str	r3, [r4, #16]
 800f75e:	e7ba      	b.n	800f6d6 <_printf_i+0x152>
 800f760:	680b      	ldr	r3, [r1, #0]
 800f762:	1d1a      	adds	r2, r3, #4
 800f764:	600a      	str	r2, [r1, #0]
 800f766:	681e      	ldr	r6, [r3, #0]
 800f768:	2100      	movs	r1, #0
 800f76a:	4630      	mov	r0, r6
 800f76c:	6862      	ldr	r2, [r4, #4]
 800f76e:	f000 faa5 	bl	800fcbc <memchr>
 800f772:	b108      	cbz	r0, 800f778 <_printf_i+0x1f4>
 800f774:	1b80      	subs	r0, r0, r6
 800f776:	6060      	str	r0, [r4, #4]
 800f778:	6863      	ldr	r3, [r4, #4]
 800f77a:	6123      	str	r3, [r4, #16]
 800f77c:	2300      	movs	r3, #0
 800f77e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f782:	e7a8      	b.n	800f6d6 <_printf_i+0x152>
 800f784:	4632      	mov	r2, r6
 800f786:	4649      	mov	r1, r9
 800f788:	4640      	mov	r0, r8
 800f78a:	6923      	ldr	r3, [r4, #16]
 800f78c:	47d0      	blx	sl
 800f78e:	3001      	adds	r0, #1
 800f790:	d0ab      	beq.n	800f6ea <_printf_i+0x166>
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	079b      	lsls	r3, r3, #30
 800f796:	d413      	bmi.n	800f7c0 <_printf_i+0x23c>
 800f798:	68e0      	ldr	r0, [r4, #12]
 800f79a:	9b03      	ldr	r3, [sp, #12]
 800f79c:	4298      	cmp	r0, r3
 800f79e:	bfb8      	it	lt
 800f7a0:	4618      	movlt	r0, r3
 800f7a2:	e7a4      	b.n	800f6ee <_printf_i+0x16a>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	4632      	mov	r2, r6
 800f7a8:	4649      	mov	r1, r9
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	47d0      	blx	sl
 800f7ae:	3001      	adds	r0, #1
 800f7b0:	d09b      	beq.n	800f6ea <_printf_i+0x166>
 800f7b2:	3501      	adds	r5, #1
 800f7b4:	68e3      	ldr	r3, [r4, #12]
 800f7b6:	9903      	ldr	r1, [sp, #12]
 800f7b8:	1a5b      	subs	r3, r3, r1
 800f7ba:	42ab      	cmp	r3, r5
 800f7bc:	dcf2      	bgt.n	800f7a4 <_printf_i+0x220>
 800f7be:	e7eb      	b.n	800f798 <_printf_i+0x214>
 800f7c0:	2500      	movs	r5, #0
 800f7c2:	f104 0619 	add.w	r6, r4, #25
 800f7c6:	e7f5      	b.n	800f7b4 <_printf_i+0x230>
 800f7c8:	080104ad 	.word	0x080104ad
 800f7cc:	080104be 	.word	0x080104be

0800f7d0 <_sbrk_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	4d05      	ldr	r5, [pc, #20]	; (800f7ec <_sbrk_r+0x1c>)
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	4608      	mov	r0, r1
 800f7da:	602b      	str	r3, [r5, #0]
 800f7dc:	f7f5 ffaa 	bl	8005734 <_sbrk>
 800f7e0:	1c43      	adds	r3, r0, #1
 800f7e2:	d102      	bne.n	800f7ea <_sbrk_r+0x1a>
 800f7e4:	682b      	ldr	r3, [r5, #0]
 800f7e6:	b103      	cbz	r3, 800f7ea <_sbrk_r+0x1a>
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	bd38      	pop	{r3, r4, r5, pc}
 800f7ec:	20001700 	.word	0x20001700

0800f7f0 <__sread>:
 800f7f0:	b510      	push	{r4, lr}
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f8:	f000 fa7a 	bl	800fcf0 <_read_r>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	bfab      	itete	ge
 800f800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f802:	89a3      	ldrhlt	r3, [r4, #12]
 800f804:	181b      	addge	r3, r3, r0
 800f806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f80a:	bfac      	ite	ge
 800f80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f80e:	81a3      	strhlt	r3, [r4, #12]
 800f810:	bd10      	pop	{r4, pc}

0800f812 <__swrite>:
 800f812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f816:	461f      	mov	r7, r3
 800f818:	898b      	ldrh	r3, [r1, #12]
 800f81a:	4605      	mov	r5, r0
 800f81c:	05db      	lsls	r3, r3, #23
 800f81e:	460c      	mov	r4, r1
 800f820:	4616      	mov	r6, r2
 800f822:	d505      	bpl.n	800f830 <__swrite+0x1e>
 800f824:	2302      	movs	r3, #2
 800f826:	2200      	movs	r2, #0
 800f828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f82c:	f000 f9d0 	bl	800fbd0 <_lseek_r>
 800f830:	89a3      	ldrh	r3, [r4, #12]
 800f832:	4632      	mov	r2, r6
 800f834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f838:	81a3      	strh	r3, [r4, #12]
 800f83a:	4628      	mov	r0, r5
 800f83c:	463b      	mov	r3, r7
 800f83e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f846:	f000 b869 	b.w	800f91c <_write_r>

0800f84a <__sseek>:
 800f84a:	b510      	push	{r4, lr}
 800f84c:	460c      	mov	r4, r1
 800f84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f852:	f000 f9bd 	bl	800fbd0 <_lseek_r>
 800f856:	1c43      	adds	r3, r0, #1
 800f858:	89a3      	ldrh	r3, [r4, #12]
 800f85a:	bf15      	itete	ne
 800f85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f866:	81a3      	strheq	r3, [r4, #12]
 800f868:	bf18      	it	ne
 800f86a:	81a3      	strhne	r3, [r4, #12]
 800f86c:	bd10      	pop	{r4, pc}

0800f86e <__sclose>:
 800f86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f872:	f000 b8db 	b.w	800fa2c <_close_r>
	...

0800f878 <__swbuf_r>:
 800f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87a:	460e      	mov	r6, r1
 800f87c:	4614      	mov	r4, r2
 800f87e:	4605      	mov	r5, r0
 800f880:	b118      	cbz	r0, 800f88a <__swbuf_r+0x12>
 800f882:	6983      	ldr	r3, [r0, #24]
 800f884:	b90b      	cbnz	r3, 800f88a <__swbuf_r+0x12>
 800f886:	f7ff fb55 	bl	800ef34 <__sinit>
 800f88a:	4b21      	ldr	r3, [pc, #132]	; (800f910 <__swbuf_r+0x98>)
 800f88c:	429c      	cmp	r4, r3
 800f88e:	d12b      	bne.n	800f8e8 <__swbuf_r+0x70>
 800f890:	686c      	ldr	r4, [r5, #4]
 800f892:	69a3      	ldr	r3, [r4, #24]
 800f894:	60a3      	str	r3, [r4, #8]
 800f896:	89a3      	ldrh	r3, [r4, #12]
 800f898:	071a      	lsls	r2, r3, #28
 800f89a:	d52f      	bpl.n	800f8fc <__swbuf_r+0x84>
 800f89c:	6923      	ldr	r3, [r4, #16]
 800f89e:	b36b      	cbz	r3, 800f8fc <__swbuf_r+0x84>
 800f8a0:	6923      	ldr	r3, [r4, #16]
 800f8a2:	6820      	ldr	r0, [r4, #0]
 800f8a4:	b2f6      	uxtb	r6, r6
 800f8a6:	1ac0      	subs	r0, r0, r3
 800f8a8:	6963      	ldr	r3, [r4, #20]
 800f8aa:	4637      	mov	r7, r6
 800f8ac:	4283      	cmp	r3, r0
 800f8ae:	dc04      	bgt.n	800f8ba <__swbuf_r+0x42>
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f000 f950 	bl	800fb58 <_fflush_r>
 800f8b8:	bb30      	cbnz	r0, 800f908 <__swbuf_r+0x90>
 800f8ba:	68a3      	ldr	r3, [r4, #8]
 800f8bc:	3001      	adds	r0, #1
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	60a3      	str	r3, [r4, #8]
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	1c5a      	adds	r2, r3, #1
 800f8c6:	6022      	str	r2, [r4, #0]
 800f8c8:	701e      	strb	r6, [r3, #0]
 800f8ca:	6963      	ldr	r3, [r4, #20]
 800f8cc:	4283      	cmp	r3, r0
 800f8ce:	d004      	beq.n	800f8da <__swbuf_r+0x62>
 800f8d0:	89a3      	ldrh	r3, [r4, #12]
 800f8d2:	07db      	lsls	r3, r3, #31
 800f8d4:	d506      	bpl.n	800f8e4 <__swbuf_r+0x6c>
 800f8d6:	2e0a      	cmp	r6, #10
 800f8d8:	d104      	bne.n	800f8e4 <__swbuf_r+0x6c>
 800f8da:	4621      	mov	r1, r4
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f000 f93b 	bl	800fb58 <_fflush_r>
 800f8e2:	b988      	cbnz	r0, 800f908 <__swbuf_r+0x90>
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8e8:	4b0a      	ldr	r3, [pc, #40]	; (800f914 <__swbuf_r+0x9c>)
 800f8ea:	429c      	cmp	r4, r3
 800f8ec:	d101      	bne.n	800f8f2 <__swbuf_r+0x7a>
 800f8ee:	68ac      	ldr	r4, [r5, #8]
 800f8f0:	e7cf      	b.n	800f892 <__swbuf_r+0x1a>
 800f8f2:	4b09      	ldr	r3, [pc, #36]	; (800f918 <__swbuf_r+0xa0>)
 800f8f4:	429c      	cmp	r4, r3
 800f8f6:	bf08      	it	eq
 800f8f8:	68ec      	ldreq	r4, [r5, #12]
 800f8fa:	e7ca      	b.n	800f892 <__swbuf_r+0x1a>
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	4628      	mov	r0, r5
 800f900:	f000 f81e 	bl	800f940 <__swsetup_r>
 800f904:	2800      	cmp	r0, #0
 800f906:	d0cb      	beq.n	800f8a0 <__swbuf_r+0x28>
 800f908:	f04f 37ff 	mov.w	r7, #4294967295
 800f90c:	e7ea      	b.n	800f8e4 <__swbuf_r+0x6c>
 800f90e:	bf00      	nop
 800f910:	0801045c 	.word	0x0801045c
 800f914:	0801047c 	.word	0x0801047c
 800f918:	0801043c 	.word	0x0801043c

0800f91c <_write_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	4604      	mov	r4, r0
 800f920:	4608      	mov	r0, r1
 800f922:	4611      	mov	r1, r2
 800f924:	2200      	movs	r2, #0
 800f926:	4d05      	ldr	r5, [pc, #20]	; (800f93c <_write_r+0x20>)
 800f928:	602a      	str	r2, [r5, #0]
 800f92a:	461a      	mov	r2, r3
 800f92c:	f7f5 feb6 	bl	800569c <_write>
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	d102      	bne.n	800f93a <_write_r+0x1e>
 800f934:	682b      	ldr	r3, [r5, #0]
 800f936:	b103      	cbz	r3, 800f93a <_write_r+0x1e>
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	bd38      	pop	{r3, r4, r5, pc}
 800f93c:	20001700 	.word	0x20001700

0800f940 <__swsetup_r>:
 800f940:	4b32      	ldr	r3, [pc, #200]	; (800fa0c <__swsetup_r+0xcc>)
 800f942:	b570      	push	{r4, r5, r6, lr}
 800f944:	681d      	ldr	r5, [r3, #0]
 800f946:	4606      	mov	r6, r0
 800f948:	460c      	mov	r4, r1
 800f94a:	b125      	cbz	r5, 800f956 <__swsetup_r+0x16>
 800f94c:	69ab      	ldr	r3, [r5, #24]
 800f94e:	b913      	cbnz	r3, 800f956 <__swsetup_r+0x16>
 800f950:	4628      	mov	r0, r5
 800f952:	f7ff faef 	bl	800ef34 <__sinit>
 800f956:	4b2e      	ldr	r3, [pc, #184]	; (800fa10 <__swsetup_r+0xd0>)
 800f958:	429c      	cmp	r4, r3
 800f95a:	d10f      	bne.n	800f97c <__swsetup_r+0x3c>
 800f95c:	686c      	ldr	r4, [r5, #4]
 800f95e:	89a3      	ldrh	r3, [r4, #12]
 800f960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f964:	0719      	lsls	r1, r3, #28
 800f966:	d42c      	bmi.n	800f9c2 <__swsetup_r+0x82>
 800f968:	06dd      	lsls	r5, r3, #27
 800f96a:	d411      	bmi.n	800f990 <__swsetup_r+0x50>
 800f96c:	2309      	movs	r3, #9
 800f96e:	6033      	str	r3, [r6, #0]
 800f970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f974:	f04f 30ff 	mov.w	r0, #4294967295
 800f978:	81a3      	strh	r3, [r4, #12]
 800f97a:	e03e      	b.n	800f9fa <__swsetup_r+0xba>
 800f97c:	4b25      	ldr	r3, [pc, #148]	; (800fa14 <__swsetup_r+0xd4>)
 800f97e:	429c      	cmp	r4, r3
 800f980:	d101      	bne.n	800f986 <__swsetup_r+0x46>
 800f982:	68ac      	ldr	r4, [r5, #8]
 800f984:	e7eb      	b.n	800f95e <__swsetup_r+0x1e>
 800f986:	4b24      	ldr	r3, [pc, #144]	; (800fa18 <__swsetup_r+0xd8>)
 800f988:	429c      	cmp	r4, r3
 800f98a:	bf08      	it	eq
 800f98c:	68ec      	ldreq	r4, [r5, #12]
 800f98e:	e7e6      	b.n	800f95e <__swsetup_r+0x1e>
 800f990:	0758      	lsls	r0, r3, #29
 800f992:	d512      	bpl.n	800f9ba <__swsetup_r+0x7a>
 800f994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f996:	b141      	cbz	r1, 800f9aa <__swsetup_r+0x6a>
 800f998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f99c:	4299      	cmp	r1, r3
 800f99e:	d002      	beq.n	800f9a6 <__swsetup_r+0x66>
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	f7ff fb81 	bl	800f0a8 <_free_r>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	6363      	str	r3, [r4, #52]	; 0x34
 800f9aa:	89a3      	ldrh	r3, [r4, #12]
 800f9ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9b0:	81a3      	strh	r3, [r4, #12]
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	6063      	str	r3, [r4, #4]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	6023      	str	r3, [r4, #0]
 800f9ba:	89a3      	ldrh	r3, [r4, #12]
 800f9bc:	f043 0308 	orr.w	r3, r3, #8
 800f9c0:	81a3      	strh	r3, [r4, #12]
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	b94b      	cbnz	r3, 800f9da <__swsetup_r+0x9a>
 800f9c6:	89a3      	ldrh	r3, [r4, #12]
 800f9c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9d0:	d003      	beq.n	800f9da <__swsetup_r+0x9a>
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f000 f931 	bl	800fc3c <__smakebuf_r>
 800f9da:	89a0      	ldrh	r0, [r4, #12]
 800f9dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9e0:	f010 0301 	ands.w	r3, r0, #1
 800f9e4:	d00a      	beq.n	800f9fc <__swsetup_r+0xbc>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	60a3      	str	r3, [r4, #8]
 800f9ea:	6963      	ldr	r3, [r4, #20]
 800f9ec:	425b      	negs	r3, r3
 800f9ee:	61a3      	str	r3, [r4, #24]
 800f9f0:	6923      	ldr	r3, [r4, #16]
 800f9f2:	b943      	cbnz	r3, 800fa06 <__swsetup_r+0xc6>
 800f9f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9f8:	d1ba      	bne.n	800f970 <__swsetup_r+0x30>
 800f9fa:	bd70      	pop	{r4, r5, r6, pc}
 800f9fc:	0781      	lsls	r1, r0, #30
 800f9fe:	bf58      	it	pl
 800fa00:	6963      	ldrpl	r3, [r4, #20]
 800fa02:	60a3      	str	r3, [r4, #8]
 800fa04:	e7f4      	b.n	800f9f0 <__swsetup_r+0xb0>
 800fa06:	2000      	movs	r0, #0
 800fa08:	e7f7      	b.n	800f9fa <__swsetup_r+0xba>
 800fa0a:	bf00      	nop
 800fa0c:	20000024 	.word	0x20000024
 800fa10:	0801045c 	.word	0x0801045c
 800fa14:	0801047c 	.word	0x0801047c
 800fa18:	0801043c 	.word	0x0801043c

0800fa1c <abort>:
 800fa1c:	2006      	movs	r0, #6
 800fa1e:	b508      	push	{r3, lr}
 800fa20:	f000 f9a0 	bl	800fd64 <raise>
 800fa24:	2001      	movs	r0, #1
 800fa26:	f7f5 fe12 	bl	800564e <_exit>
	...

0800fa2c <_close_r>:
 800fa2c:	b538      	push	{r3, r4, r5, lr}
 800fa2e:	2300      	movs	r3, #0
 800fa30:	4d05      	ldr	r5, [pc, #20]	; (800fa48 <_close_r+0x1c>)
 800fa32:	4604      	mov	r4, r0
 800fa34:	4608      	mov	r0, r1
 800fa36:	602b      	str	r3, [r5, #0]
 800fa38:	f7f5 fe4c 	bl	80056d4 <_close>
 800fa3c:	1c43      	adds	r3, r0, #1
 800fa3e:	d102      	bne.n	800fa46 <_close_r+0x1a>
 800fa40:	682b      	ldr	r3, [r5, #0]
 800fa42:	b103      	cbz	r3, 800fa46 <_close_r+0x1a>
 800fa44:	6023      	str	r3, [r4, #0]
 800fa46:	bd38      	pop	{r3, r4, r5, pc}
 800fa48:	20001700 	.word	0x20001700

0800fa4c <__sflush_r>:
 800fa4c:	898a      	ldrh	r2, [r1, #12]
 800fa4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa52:	4605      	mov	r5, r0
 800fa54:	0710      	lsls	r0, r2, #28
 800fa56:	460c      	mov	r4, r1
 800fa58:	d458      	bmi.n	800fb0c <__sflush_r+0xc0>
 800fa5a:	684b      	ldr	r3, [r1, #4]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	dc05      	bgt.n	800fa6c <__sflush_r+0x20>
 800fa60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	dc02      	bgt.n	800fa6c <__sflush_r+0x20>
 800fa66:	2000      	movs	r0, #0
 800fa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa6e:	2e00      	cmp	r6, #0
 800fa70:	d0f9      	beq.n	800fa66 <__sflush_r+0x1a>
 800fa72:	2300      	movs	r3, #0
 800fa74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa78:	682f      	ldr	r7, [r5, #0]
 800fa7a:	602b      	str	r3, [r5, #0]
 800fa7c:	d032      	beq.n	800fae4 <__sflush_r+0x98>
 800fa7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	075a      	lsls	r2, r3, #29
 800fa84:	d505      	bpl.n	800fa92 <__sflush_r+0x46>
 800fa86:	6863      	ldr	r3, [r4, #4]
 800fa88:	1ac0      	subs	r0, r0, r3
 800fa8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa8c:	b10b      	cbz	r3, 800fa92 <__sflush_r+0x46>
 800fa8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa90:	1ac0      	subs	r0, r0, r3
 800fa92:	2300      	movs	r3, #0
 800fa94:	4602      	mov	r2, r0
 800fa96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa98:	4628      	mov	r0, r5
 800fa9a:	6a21      	ldr	r1, [r4, #32]
 800fa9c:	47b0      	blx	r6
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	d106      	bne.n	800fab2 <__sflush_r+0x66>
 800faa4:	6829      	ldr	r1, [r5, #0]
 800faa6:	291d      	cmp	r1, #29
 800faa8:	d82c      	bhi.n	800fb04 <__sflush_r+0xb8>
 800faaa:	4a2a      	ldr	r2, [pc, #168]	; (800fb54 <__sflush_r+0x108>)
 800faac:	40ca      	lsrs	r2, r1
 800faae:	07d6      	lsls	r6, r2, #31
 800fab0:	d528      	bpl.n	800fb04 <__sflush_r+0xb8>
 800fab2:	2200      	movs	r2, #0
 800fab4:	6062      	str	r2, [r4, #4]
 800fab6:	6922      	ldr	r2, [r4, #16]
 800fab8:	04d9      	lsls	r1, r3, #19
 800faba:	6022      	str	r2, [r4, #0]
 800fabc:	d504      	bpl.n	800fac8 <__sflush_r+0x7c>
 800fabe:	1c42      	adds	r2, r0, #1
 800fac0:	d101      	bne.n	800fac6 <__sflush_r+0x7a>
 800fac2:	682b      	ldr	r3, [r5, #0]
 800fac4:	b903      	cbnz	r3, 800fac8 <__sflush_r+0x7c>
 800fac6:	6560      	str	r0, [r4, #84]	; 0x54
 800fac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faca:	602f      	str	r7, [r5, #0]
 800facc:	2900      	cmp	r1, #0
 800face:	d0ca      	beq.n	800fa66 <__sflush_r+0x1a>
 800fad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fad4:	4299      	cmp	r1, r3
 800fad6:	d002      	beq.n	800fade <__sflush_r+0x92>
 800fad8:	4628      	mov	r0, r5
 800fada:	f7ff fae5 	bl	800f0a8 <_free_r>
 800fade:	2000      	movs	r0, #0
 800fae0:	6360      	str	r0, [r4, #52]	; 0x34
 800fae2:	e7c1      	b.n	800fa68 <__sflush_r+0x1c>
 800fae4:	6a21      	ldr	r1, [r4, #32]
 800fae6:	2301      	movs	r3, #1
 800fae8:	4628      	mov	r0, r5
 800faea:	47b0      	blx	r6
 800faec:	1c41      	adds	r1, r0, #1
 800faee:	d1c7      	bne.n	800fa80 <__sflush_r+0x34>
 800faf0:	682b      	ldr	r3, [r5, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d0c4      	beq.n	800fa80 <__sflush_r+0x34>
 800faf6:	2b1d      	cmp	r3, #29
 800faf8:	d001      	beq.n	800fafe <__sflush_r+0xb2>
 800fafa:	2b16      	cmp	r3, #22
 800fafc:	d101      	bne.n	800fb02 <__sflush_r+0xb6>
 800fafe:	602f      	str	r7, [r5, #0]
 800fb00:	e7b1      	b.n	800fa66 <__sflush_r+0x1a>
 800fb02:	89a3      	ldrh	r3, [r4, #12]
 800fb04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb08:	81a3      	strh	r3, [r4, #12]
 800fb0a:	e7ad      	b.n	800fa68 <__sflush_r+0x1c>
 800fb0c:	690f      	ldr	r7, [r1, #16]
 800fb0e:	2f00      	cmp	r7, #0
 800fb10:	d0a9      	beq.n	800fa66 <__sflush_r+0x1a>
 800fb12:	0793      	lsls	r3, r2, #30
 800fb14:	bf18      	it	ne
 800fb16:	2300      	movne	r3, #0
 800fb18:	680e      	ldr	r6, [r1, #0]
 800fb1a:	bf08      	it	eq
 800fb1c:	694b      	ldreq	r3, [r1, #20]
 800fb1e:	eba6 0807 	sub.w	r8, r6, r7
 800fb22:	600f      	str	r7, [r1, #0]
 800fb24:	608b      	str	r3, [r1, #8]
 800fb26:	f1b8 0f00 	cmp.w	r8, #0
 800fb2a:	dd9c      	ble.n	800fa66 <__sflush_r+0x1a>
 800fb2c:	4643      	mov	r3, r8
 800fb2e:	463a      	mov	r2, r7
 800fb30:	4628      	mov	r0, r5
 800fb32:	6a21      	ldr	r1, [r4, #32]
 800fb34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb36:	47b0      	blx	r6
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	dc06      	bgt.n	800fb4a <__sflush_r+0xfe>
 800fb3c:	89a3      	ldrh	r3, [r4, #12]
 800fb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb46:	81a3      	strh	r3, [r4, #12]
 800fb48:	e78e      	b.n	800fa68 <__sflush_r+0x1c>
 800fb4a:	4407      	add	r7, r0
 800fb4c:	eba8 0800 	sub.w	r8, r8, r0
 800fb50:	e7e9      	b.n	800fb26 <__sflush_r+0xda>
 800fb52:	bf00      	nop
 800fb54:	20400001 	.word	0x20400001

0800fb58 <_fflush_r>:
 800fb58:	b538      	push	{r3, r4, r5, lr}
 800fb5a:	690b      	ldr	r3, [r1, #16]
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	460c      	mov	r4, r1
 800fb60:	b913      	cbnz	r3, 800fb68 <_fflush_r+0x10>
 800fb62:	2500      	movs	r5, #0
 800fb64:	4628      	mov	r0, r5
 800fb66:	bd38      	pop	{r3, r4, r5, pc}
 800fb68:	b118      	cbz	r0, 800fb72 <_fflush_r+0x1a>
 800fb6a:	6983      	ldr	r3, [r0, #24]
 800fb6c:	b90b      	cbnz	r3, 800fb72 <_fflush_r+0x1a>
 800fb6e:	f7ff f9e1 	bl	800ef34 <__sinit>
 800fb72:	4b14      	ldr	r3, [pc, #80]	; (800fbc4 <_fflush_r+0x6c>)
 800fb74:	429c      	cmp	r4, r3
 800fb76:	d11b      	bne.n	800fbb0 <_fflush_r+0x58>
 800fb78:	686c      	ldr	r4, [r5, #4]
 800fb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d0ef      	beq.n	800fb62 <_fflush_r+0xa>
 800fb82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb84:	07d0      	lsls	r0, r2, #31
 800fb86:	d404      	bmi.n	800fb92 <_fflush_r+0x3a>
 800fb88:	0599      	lsls	r1, r3, #22
 800fb8a:	d402      	bmi.n	800fb92 <_fflush_r+0x3a>
 800fb8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb8e:	f7ff fa81 	bl	800f094 <__retarget_lock_acquire_recursive>
 800fb92:	4628      	mov	r0, r5
 800fb94:	4621      	mov	r1, r4
 800fb96:	f7ff ff59 	bl	800fa4c <__sflush_r>
 800fb9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb9c:	4605      	mov	r5, r0
 800fb9e:	07da      	lsls	r2, r3, #31
 800fba0:	d4e0      	bmi.n	800fb64 <_fflush_r+0xc>
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	059b      	lsls	r3, r3, #22
 800fba6:	d4dd      	bmi.n	800fb64 <_fflush_r+0xc>
 800fba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbaa:	f7ff fa74 	bl	800f096 <__retarget_lock_release_recursive>
 800fbae:	e7d9      	b.n	800fb64 <_fflush_r+0xc>
 800fbb0:	4b05      	ldr	r3, [pc, #20]	; (800fbc8 <_fflush_r+0x70>)
 800fbb2:	429c      	cmp	r4, r3
 800fbb4:	d101      	bne.n	800fbba <_fflush_r+0x62>
 800fbb6:	68ac      	ldr	r4, [r5, #8]
 800fbb8:	e7df      	b.n	800fb7a <_fflush_r+0x22>
 800fbba:	4b04      	ldr	r3, [pc, #16]	; (800fbcc <_fflush_r+0x74>)
 800fbbc:	429c      	cmp	r4, r3
 800fbbe:	bf08      	it	eq
 800fbc0:	68ec      	ldreq	r4, [r5, #12]
 800fbc2:	e7da      	b.n	800fb7a <_fflush_r+0x22>
 800fbc4:	0801045c 	.word	0x0801045c
 800fbc8:	0801047c 	.word	0x0801047c
 800fbcc:	0801043c 	.word	0x0801043c

0800fbd0 <_lseek_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	2200      	movs	r2, #0
 800fbda:	4d05      	ldr	r5, [pc, #20]	; (800fbf0 <_lseek_r+0x20>)
 800fbdc:	602a      	str	r2, [r5, #0]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	f7f5 fd9c 	bl	800571c <_lseek>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d102      	bne.n	800fbee <_lseek_r+0x1e>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	b103      	cbz	r3, 800fbee <_lseek_r+0x1e>
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	20001700 	.word	0x20001700

0800fbf4 <__swhatbuf_r>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	460e      	mov	r6, r1
 800fbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbfc:	4614      	mov	r4, r2
 800fbfe:	2900      	cmp	r1, #0
 800fc00:	461d      	mov	r5, r3
 800fc02:	b096      	sub	sp, #88	; 0x58
 800fc04:	da07      	bge.n	800fc16 <__swhatbuf_r+0x22>
 800fc06:	2300      	movs	r3, #0
 800fc08:	602b      	str	r3, [r5, #0]
 800fc0a:	89b3      	ldrh	r3, [r6, #12]
 800fc0c:	061a      	lsls	r2, r3, #24
 800fc0e:	d410      	bmi.n	800fc32 <__swhatbuf_r+0x3e>
 800fc10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc14:	e00e      	b.n	800fc34 <__swhatbuf_r+0x40>
 800fc16:	466a      	mov	r2, sp
 800fc18:	f000 f8c0 	bl	800fd9c <_fstat_r>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	dbf2      	blt.n	800fc06 <__swhatbuf_r+0x12>
 800fc20:	9a01      	ldr	r2, [sp, #4]
 800fc22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc2a:	425a      	negs	r2, r3
 800fc2c:	415a      	adcs	r2, r3
 800fc2e:	602a      	str	r2, [r5, #0]
 800fc30:	e7ee      	b.n	800fc10 <__swhatbuf_r+0x1c>
 800fc32:	2340      	movs	r3, #64	; 0x40
 800fc34:	2000      	movs	r0, #0
 800fc36:	6023      	str	r3, [r4, #0]
 800fc38:	b016      	add	sp, #88	; 0x58
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}

0800fc3c <__smakebuf_r>:
 800fc3c:	898b      	ldrh	r3, [r1, #12]
 800fc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc40:	079d      	lsls	r5, r3, #30
 800fc42:	4606      	mov	r6, r0
 800fc44:	460c      	mov	r4, r1
 800fc46:	d507      	bpl.n	800fc58 <__smakebuf_r+0x1c>
 800fc48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	6123      	str	r3, [r4, #16]
 800fc50:	2301      	movs	r3, #1
 800fc52:	6163      	str	r3, [r4, #20]
 800fc54:	b002      	add	sp, #8
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	466a      	mov	r2, sp
 800fc5a:	ab01      	add	r3, sp, #4
 800fc5c:	f7ff ffca 	bl	800fbf4 <__swhatbuf_r>
 800fc60:	9900      	ldr	r1, [sp, #0]
 800fc62:	4605      	mov	r5, r0
 800fc64:	4630      	mov	r0, r6
 800fc66:	f7ff fa6b 	bl	800f140 <_malloc_r>
 800fc6a:	b948      	cbnz	r0, 800fc80 <__smakebuf_r+0x44>
 800fc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc70:	059a      	lsls	r2, r3, #22
 800fc72:	d4ef      	bmi.n	800fc54 <__smakebuf_r+0x18>
 800fc74:	f023 0303 	bic.w	r3, r3, #3
 800fc78:	f043 0302 	orr.w	r3, r3, #2
 800fc7c:	81a3      	strh	r3, [r4, #12]
 800fc7e:	e7e3      	b.n	800fc48 <__smakebuf_r+0xc>
 800fc80:	4b0d      	ldr	r3, [pc, #52]	; (800fcb8 <__smakebuf_r+0x7c>)
 800fc82:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc84:	89a3      	ldrh	r3, [r4, #12]
 800fc86:	6020      	str	r0, [r4, #0]
 800fc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc8c:	81a3      	strh	r3, [r4, #12]
 800fc8e:	9b00      	ldr	r3, [sp, #0]
 800fc90:	6120      	str	r0, [r4, #16]
 800fc92:	6163      	str	r3, [r4, #20]
 800fc94:	9b01      	ldr	r3, [sp, #4]
 800fc96:	b15b      	cbz	r3, 800fcb0 <__smakebuf_r+0x74>
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc9e:	f000 f88f 	bl	800fdc0 <_isatty_r>
 800fca2:	b128      	cbz	r0, 800fcb0 <__smakebuf_r+0x74>
 800fca4:	89a3      	ldrh	r3, [r4, #12]
 800fca6:	f023 0303 	bic.w	r3, r3, #3
 800fcaa:	f043 0301 	orr.w	r3, r3, #1
 800fcae:	81a3      	strh	r3, [r4, #12]
 800fcb0:	89a0      	ldrh	r0, [r4, #12]
 800fcb2:	4305      	orrs	r5, r0
 800fcb4:	81a5      	strh	r5, [r4, #12]
 800fcb6:	e7cd      	b.n	800fc54 <__smakebuf_r+0x18>
 800fcb8:	0800eecd 	.word	0x0800eecd

0800fcbc <memchr>:
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	b510      	push	{r4, lr}
 800fcc0:	b2c9      	uxtb	r1, r1
 800fcc2:	4402      	add	r2, r0
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	d101      	bne.n	800fcce <memchr+0x12>
 800fcca:	2000      	movs	r0, #0
 800fccc:	e003      	b.n	800fcd6 <memchr+0x1a>
 800fcce:	7804      	ldrb	r4, [r0, #0]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	428c      	cmp	r4, r1
 800fcd4:	d1f6      	bne.n	800fcc4 <memchr+0x8>
 800fcd6:	bd10      	pop	{r4, pc}

0800fcd8 <__malloc_lock>:
 800fcd8:	4801      	ldr	r0, [pc, #4]	; (800fce0 <__malloc_lock+0x8>)
 800fcda:	f7ff b9db 	b.w	800f094 <__retarget_lock_acquire_recursive>
 800fcde:	bf00      	nop
 800fce0:	200016f8 	.word	0x200016f8

0800fce4 <__malloc_unlock>:
 800fce4:	4801      	ldr	r0, [pc, #4]	; (800fcec <__malloc_unlock+0x8>)
 800fce6:	f7ff b9d6 	b.w	800f096 <__retarget_lock_release_recursive>
 800fcea:	bf00      	nop
 800fcec:	200016f8 	.word	0x200016f8

0800fcf0 <_read_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	4608      	mov	r0, r1
 800fcf6:	4611      	mov	r1, r2
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	4d05      	ldr	r5, [pc, #20]	; (800fd10 <_read_r+0x20>)
 800fcfc:	602a      	str	r2, [r5, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	f7f5 fcaf 	bl	8005662 <_read>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_read_r+0x1e>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_read_r+0x1e>
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	20001700 	.word	0x20001700

0800fd14 <_raise_r>:
 800fd14:	291f      	cmp	r1, #31
 800fd16:	b538      	push	{r3, r4, r5, lr}
 800fd18:	4604      	mov	r4, r0
 800fd1a:	460d      	mov	r5, r1
 800fd1c:	d904      	bls.n	800fd28 <_raise_r+0x14>
 800fd1e:	2316      	movs	r3, #22
 800fd20:	6003      	str	r3, [r0, #0]
 800fd22:	f04f 30ff 	mov.w	r0, #4294967295
 800fd26:	bd38      	pop	{r3, r4, r5, pc}
 800fd28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd2a:	b112      	cbz	r2, 800fd32 <_raise_r+0x1e>
 800fd2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd30:	b94b      	cbnz	r3, 800fd46 <_raise_r+0x32>
 800fd32:	4620      	mov	r0, r4
 800fd34:	f000 f830 	bl	800fd98 <_getpid_r>
 800fd38:	462a      	mov	r2, r5
 800fd3a:	4601      	mov	r1, r0
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd42:	f000 b817 	b.w	800fd74 <_kill_r>
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d00a      	beq.n	800fd60 <_raise_r+0x4c>
 800fd4a:	1c59      	adds	r1, r3, #1
 800fd4c:	d103      	bne.n	800fd56 <_raise_r+0x42>
 800fd4e:	2316      	movs	r3, #22
 800fd50:	6003      	str	r3, [r0, #0]
 800fd52:	2001      	movs	r0, #1
 800fd54:	e7e7      	b.n	800fd26 <_raise_r+0x12>
 800fd56:	2400      	movs	r4, #0
 800fd58:	4628      	mov	r0, r5
 800fd5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd5e:	4798      	blx	r3
 800fd60:	2000      	movs	r0, #0
 800fd62:	e7e0      	b.n	800fd26 <_raise_r+0x12>

0800fd64 <raise>:
 800fd64:	4b02      	ldr	r3, [pc, #8]	; (800fd70 <raise+0xc>)
 800fd66:	4601      	mov	r1, r0
 800fd68:	6818      	ldr	r0, [r3, #0]
 800fd6a:	f7ff bfd3 	b.w	800fd14 <_raise_r>
 800fd6e:	bf00      	nop
 800fd70:	20000024 	.word	0x20000024

0800fd74 <_kill_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	2300      	movs	r3, #0
 800fd78:	4d06      	ldr	r5, [pc, #24]	; (800fd94 <_kill_r+0x20>)
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	4608      	mov	r0, r1
 800fd7e:	4611      	mov	r1, r2
 800fd80:	602b      	str	r3, [r5, #0]
 800fd82:	f7f5 fc54 	bl	800562e <_kill>
 800fd86:	1c43      	adds	r3, r0, #1
 800fd88:	d102      	bne.n	800fd90 <_kill_r+0x1c>
 800fd8a:	682b      	ldr	r3, [r5, #0]
 800fd8c:	b103      	cbz	r3, 800fd90 <_kill_r+0x1c>
 800fd8e:	6023      	str	r3, [r4, #0]
 800fd90:	bd38      	pop	{r3, r4, r5, pc}
 800fd92:	bf00      	nop
 800fd94:	20001700 	.word	0x20001700

0800fd98 <_getpid_r>:
 800fd98:	f7f5 bc42 	b.w	8005620 <_getpid>

0800fd9c <_fstat_r>:
 800fd9c:	b538      	push	{r3, r4, r5, lr}
 800fd9e:	2300      	movs	r3, #0
 800fda0:	4d06      	ldr	r5, [pc, #24]	; (800fdbc <_fstat_r+0x20>)
 800fda2:	4604      	mov	r4, r0
 800fda4:	4608      	mov	r0, r1
 800fda6:	4611      	mov	r1, r2
 800fda8:	602b      	str	r3, [r5, #0]
 800fdaa:	f7f5 fc9e 	bl	80056ea <_fstat>
 800fdae:	1c43      	adds	r3, r0, #1
 800fdb0:	d102      	bne.n	800fdb8 <_fstat_r+0x1c>
 800fdb2:	682b      	ldr	r3, [r5, #0]
 800fdb4:	b103      	cbz	r3, 800fdb8 <_fstat_r+0x1c>
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	bd38      	pop	{r3, r4, r5, pc}
 800fdba:	bf00      	nop
 800fdbc:	20001700 	.word	0x20001700

0800fdc0 <_isatty_r>:
 800fdc0:	b538      	push	{r3, r4, r5, lr}
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	4d05      	ldr	r5, [pc, #20]	; (800fddc <_isatty_r+0x1c>)
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	4608      	mov	r0, r1
 800fdca:	602b      	str	r3, [r5, #0]
 800fdcc:	f7f5 fc9c 	bl	8005708 <_isatty>
 800fdd0:	1c43      	adds	r3, r0, #1
 800fdd2:	d102      	bne.n	800fdda <_isatty_r+0x1a>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	b103      	cbz	r3, 800fdda <_isatty_r+0x1a>
 800fdd8:	6023      	str	r3, [r4, #0]
 800fdda:	bd38      	pop	{r3, r4, r5, pc}
 800fddc:	20001700 	.word	0x20001700

0800fde0 <_init>:
 800fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde2:	bf00      	nop
 800fde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde6:	bc08      	pop	{r3}
 800fde8:	469e      	mov	lr, r3
 800fdea:	4770      	bx	lr

0800fdec <_fini>:
 800fdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdee:	bf00      	nop
 800fdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdf2:	bc08      	pop	{r3}
 800fdf4:	469e      	mov	lr, r3
 800fdf6:	4770      	bx	lr
