
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  080143d8  080143d8  000243d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014af8  08014af8  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08014af8  08014af8  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014af8  08014af8  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014af8  08014af8  00024af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014b00  08014b00  00024b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08014b08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c0  20000078  08014b7c  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a38  08014b7c  00031a38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295ce  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d4a  00000000  00000000  0005966b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0005e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0005f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e612  00000000  00000000  00060c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b680  00000000  00000000  0007f26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009571a  00000000  00000000  0009a8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a68  00000000  00000000  00130058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080143c0 	.word	0x080143c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080143c0 	.word	0x080143c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HMC5883L_initialize+0x44>)
 8001190:	223c      	movs	r2, #60	; 0x3c
 8001192:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001194:	2378      	movs	r3, #120	; 0x78
 8001196:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HMC5883L_initialize+0x44>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b299      	uxth	r1, r3
 800119e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HMC5883L_initialize+0x48>)
 80011b2:	f006 fb75 	bl	80078a0 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 f80c 	bl	80011d4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f829 	bl	8001214 <HMC5883L_setMode>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000094 	.word	0x20000094
 80011d0:	200008b8 	.word	0x200008b8

080011d4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HMC5883L_setGain+0x38>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2201      	movs	r2, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <HMC5883L_setGain+0x3c>)
 8001200:	f006 fb4e 	bl	80078a0 <HAL_I2C_Mem_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000094 	.word	0x20000094
 8001210:	200008b8 	.word	0x200008b8

08001214 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HMC5883L_setMode+0x3c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b299      	uxth	r1, r3
 8001228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2202      	movs	r2, #2
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <HMC5883L_setMode+0x40>)
 800123c:	f006 fb30 	bl	80078a0 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HMC5883L_setMode+0x44>)
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000094 	.word	0x20000094
 8001254:	200008b8 	.word	0x200008b8
 8001258:	2000009e 	.word	0x2000009e

0800125c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af04      	add	r7, sp, #16
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HMC5883L_getMagData+0x84>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b299      	uxth	r1, r3
 800126e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2306      	movs	r3, #6
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <HMC5883L_getMagData+0x8c>)
 8001282:	f006 fc07 	bl	8007a94 <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HMC5883L_getMagData+0x90>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HMC5883L_getMagData+0x38>
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ffc0 	bl	8001214 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HMC5883L_getMagData+0x88>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000094 	.word	0x20000094
 80012e4:	20000098 	.word	0x20000098
 80012e8:	200008b8 	.word	0x200008b8
 80012ec:	2000009e 	.word	0x2000009e

080012f0 <getDataAt>:
   @returns the specified data as a string
*/



char *getDataAt (char * str, const char * delim, int pos) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b8      	sub	sp, #224	; 0xe0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	char *token;
	char copy[200] = "\0"; // modify size for larger strings
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	22c4      	movs	r2, #196	; 0xc4
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f011 ff99 	bl	8013240 <memset>

	strcpy(copy, str);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f012 f851 	bl	80133bc <strcpy>
	token = strtok(copy, delim);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f012 f853 	bl	80133cc <strtok>
 8001326:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	for(int i = 0; i < pos; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001330:	e00a      	b.n	8001348 <getDataAt+0x58>
		token = strtok(NULL, delim);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	2000      	movs	r0, #0
 8001336:	f012 f849 	bl	80133cc <strtok>
 800133a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	for(int i = 0; i < pos; i++) {
 800133e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001348:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	dbef      	blt.n	8001332 <getDataAt+0x42>
	}
	return token;
 8001352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 8001356:	4618      	mov	r0, r3
 8001358:	37e0      	adds	r7, #224	; 0xe0
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <pow2>:


double pow2(long number, int pow2er) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b08a      	sub	sp, #40	; 0x28
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]

	if(pow2er > 0) {
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dd20      	ble.n	80013b0 <pow2+0x52>
		double result=number;
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff f848 	bl	8000404 <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(int i=1;i<pow2er;i++) {
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	e00f      	b.n	80013a2 <pow2+0x44>
			result *= number;
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f83e 	bl	8000404 <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001390:	f7ff f8a2 	bl	80004d8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(int i=1;i<pow2er;i++) {
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbeb      	blt.n	8001382 <pow2+0x24>
		}
		return result;
 80013aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ae:	e023      	b.n	80013f8 <pow2+0x9a>
	}

	else {
		double result=1/number;
 80013b0:	2201      	movs	r2, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f823 	bl	8000404 <__aeabi_i2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for(int i=1;i>pow2er;i--) {
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e00f      	b.n	80013ec <pow2+0x8e>
				result /= number;
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff f819 	bl	8000404 <__aeabi_i2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	f7ff f9a7 	bl	800072c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for(int i=1;i>pow2er;i--) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dceb      	bgt.n	80013cc <pow2+0x6e>
			}
		return result;
 80013f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	}



}
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <decodeGGA>:
   @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga) {
 8001404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001408:	b08e      	sub	sp, #56	; 0x38
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]

	char buffer[12];

	strcpy(buffer, getDataAt(GGAbuffer, ",", 5));
 8001410:	2205      	movs	r2, #5
 8001412:	4983      	ldr	r1, [pc, #524]	; (8001620 <decodeGGA+0x21c>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff6b 	bl	80012f0 <getDataAt>
 800141a:	4602      	mov	r2, r0
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f011 ffca 	bl	80133bc <strcpy>
	if (buffer[0] == '1' || buffer[0] == '2' || buffer[0] == '6')   // 0 indicates no fix yet
 8001428:	7b3b      	ldrb	r3, [r7, #12]
 800142a:	2b31      	cmp	r3, #49	; 0x31
 800142c:	d005      	beq.n	800143a <decodeGGA+0x36>
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	2b32      	cmp	r3, #50	; 0x32
 8001432:	d002      	beq.n	800143a <decodeGGA+0x36>
 8001434:	7b3b      	ldrb	r3, [r7, #12]
 8001436:	2b36      	cmp	r3, #54	; 0x36
 8001438:	d11e      	bne.n	8001478 <decodeGGA+0x74>
	{
		gga->isfixValid = 1;   // fix available
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	61da      	str	r2, [r3, #28]
	gga->tim.min = min;
	gga->tim.sec = atoi(buffer)%100;
*/
	/***************** Get LATITUDE  **********************/

	memset(buffer, '\0', 12);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	220c      	movs	r2, #12
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f011 fef9 	bl	8013240 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 1));
 800144e:	2201      	movs	r2, #1
 8001450:	4973      	ldr	r1, [pc, #460]	; (8001620 <decodeGGA+0x21c>)
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff4c 	bl	80012f0 <getDataAt>
 8001458:	4602      	mov	r2, r0
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f011 ffab 	bl	80133bc <strcpy>

	if (strlen(buffer) < 6) return 2;  	// If the buffer length is not appropriate, return error
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fe70 	bl	8000150 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	2b05      	cmp	r3, #5
 8001474:	d905      	bls.n	8001482 <decodeGGA+0x7e>
 8001476:	e006      	b.n	8001486 <decodeGGA+0x82>
		gga->isfixValid = 0;   // If the fix is not available
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800147e:	2301      	movs	r3, #1
 8001480:	e22d      	b.n	80018de <decodeGGA+0x4da>
	if (strlen(buffer) < 6) return 2;  	// If the buffer length is not appropriate, return error
 8001482:	2302      	movs	r3, #2
 8001484:	e22b      	b.n	80018de <decodeGGA+0x4da>

	int16_t num = (atoi(buffer));   	// change the buffer to a number. It will only convert up to decimal
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4618      	mov	r0, r3
 800148c:	f011 fe8c 	bl	80131a8 <atoi>
 8001490:	4603      	mov	r3, r0
 8001492:	867b      	strh	r3, [r7, #50]	; 0x32
	int dd = num/100;					// extract the degrees
 8001494:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001498:	4a62      	ldr	r2, [pc, #392]	; (8001624 <decodeGGA+0x220>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1152      	asrs	r2, r2, #5
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int mmint = num%100;				// extract the integer part of minutes
 80014a8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <decodeGGA+0x220>)
 80014ae:	fb82 1203 	smull	r1, r2, r2, r3
 80014b2:	1151      	asrs	r1, r2, #5
 80014b4:	17da      	asrs	r2, r3, #31
 80014b6:	1a8a      	subs	r2, r1, r2
 80014b8:	2164      	movs	r1, #100	; 0x64
 80014ba:	fb01 f202 	mul.w	r2, r1, r2
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
	int j = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80014c8:	e00d      	b.n	80014e6 <decodeGGA+0xe2>
		if(j > strlen(buffer)) return 2;
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe3e 	bl	8000150 <strlen>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	429a      	cmp	r2, r3
 80014da:	d201      	bcs.n	80014e0 <decodeGGA+0xdc>
 80014dc:	2302      	movs	r3, #2
 80014de:	e1fe      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 80014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e2:	3301      	adds	r3, #1
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b2e      	cmp	r3, #46	; 0x2e
 80014f2:	d1ea      	bne.n	80014ca <decodeGGA+0xc6>
	}
	j++;
 80014f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f6:	3301      	adds	r3, #1
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
	int declen = (strlen(buffer))-j;  	// calculate the number of digit after decimal
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe26 	bl	8000150 <strlen>
 8001504:	4602      	mov	r2, r0
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
	int mmdec = atoi ((char *) buffer+j);  // extract the decimal part of minutes
 800150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	4413      	add	r3, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f011 fe47 	bl	80131a8 <atoi>
 800151a:	6238      	str	r0, [r7, #32]
	float lat = dd + (mmint + mmdec/pow2(10, (declen)))/60;	// combine minutes and convert to degrees
 800151c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800151e:	f7fe ff71 	bl	8000404 <__aeabi_i2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001528:	f7fe ff6c 	bl	8000404 <__aeabi_i2d>
 800152c:	4680      	mov	r8, r0
 800152e:	4689      	mov	r9, r1
 8001530:	6a38      	ldr	r0, [r7, #32]
 8001532:	f7fe ff67 	bl	8000404 <__aeabi_i2d>
 8001536:	4682      	mov	sl, r0
 8001538:	468b      	mov	fp, r1
 800153a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153c:	200a      	movs	r0, #10
 800153e:	f7ff ff0e 	bl	800135e <pow2>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4650      	mov	r0, sl
 8001548:	4659      	mov	r1, fp
 800154a:	f7ff f8ef 	bl	800072c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4640      	mov	r0, r8
 8001554:	4649      	mov	r1, r9
 8001556:	f7fe fe09 	bl	800016c <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <decodeGGA+0x224>)
 8001568:	f7ff f8e0 	bl	800072c <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe fdfa 	bl	800016c <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa82 	bl	8000a88 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	61fb      	str	r3, [r7, #28]
	gga->lcation.latitude = lat;  		// save the latitude data into the structure
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	601a      	str	r2, [r3, #0]

	gga->lcation.NS = *getDataAt(GGAbuffer, ",", 2);  // save the N/S into the structure
 800158e:	2202      	movs	r2, #2
 8001590:	4923      	ldr	r1, [pc, #140]	; (8001620 <decodeGGA+0x21c>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff feac 	bl	80012f0 <getDataAt>
 8001598:	4603      	mov	r3, r0
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	711a      	strb	r2, [r3, #4]


	/***********************  GET LONGITUDE **********************/

	memset(buffer, '\0', 12);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	220c      	movs	r2, #12
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f011 fe49 	bl	8013240 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 3));
 80015ae:	2203      	movs	r2, #3
 80015b0:	491b      	ldr	r1, [pc, #108]	; (8001620 <decodeGGA+0x21c>)
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe9c 	bl	80012f0 <getDataAt>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f011 fefb 	bl	80133bc <strcpy>

	num = (atoi(buffer));  	// change the buffer to the number. It will only convert up to decimal
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4618      	mov	r0, r3
 80015cc:	f011 fdec 	bl	80131a8 <atoi>
 80015d0:	4603      	mov	r3, r0
 80015d2:	867b      	strh	r3, [r7, #50]	; 0x32
	dd = num/100;			// extract the degrees
 80015d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <decodeGGA+0x220>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1152      	asrs	r2, r2, #5
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	mmint = num%100;		// extract the integer part of minutes
 80015e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <decodeGGA+0x220>)
 80015ee:	fb82 1203 	smull	r1, r2, r2, r3
 80015f2:	1151      	asrs	r1, r2, #5
 80015f4:	17da      	asrs	r2, r3, #31
 80015f6:	1a8a      	subs	r2, r1, r2
 80015f8:	2164      	movs	r1, #100	; 0x64
 80015fa:	fb01 f202 	mul.w	r2, r1, r2
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
	j = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001608:	e013      	b.n	8001632 <decodeGGA+0x22e>
		if(j > strlen(buffer)) return 2;
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fd9e 	bl	8000150 <strlen>
 8001614:	4602      	mov	r2, r0
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <decodeGGA+0x228>
 800161c:	2302      	movs	r3, #2
 800161e:	e15e      	b.n	80018de <decodeGGA+0x4da>
 8001620:	080143d8 	.word	0x080143d8
 8001624:	51eb851f 	.word	0x51eb851f
 8001628:	404e0000 	.word	0x404e0000
		j++;   	// Figure out how many digits before the decimal
 800162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162e:	3301      	adds	r3, #1
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b2e      	cmp	r3, #46	; 0x2e
 800163e:	d1e4      	bne.n	800160a <decodeGGA+0x206>
	}
	j++;
 8001640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001642:	3301      	adds	r3, #1
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;  		// calculate the number of digit after decimal
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fd80 	bl	8000150 <strlen>
 8001650:	4602      	mov	r2, r0
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
	mmdec = atoi ((char *) buffer+j);  	// extract the decimal part of minutes
 8001658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	4413      	add	r3, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f011 fda1 	bl	80131a8 <atoi>
 8001666:	6238      	str	r0, [r7, #32]
	lat = dd + (mmint + mmdec/pow2(10, (declen)))/60;  // combine minutes and convert to degrees
 8001668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800166a:	f7fe fecb 	bl	8000404 <__aeabi_i2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001674:	f7fe fec6 	bl	8000404 <__aeabi_i2d>
 8001678:	4680      	mov	r8, r0
 800167a:	4689      	mov	r9, r1
 800167c:	6a38      	ldr	r0, [r7, #32]
 800167e:	f7fe fec1 	bl	8000404 <__aeabi_i2d>
 8001682:	4682      	mov	sl, r0
 8001684:	468b      	mov	fp, r1
 8001686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001688:	200a      	movs	r0, #10
 800168a:	f7ff fe68 	bl	800135e <pow2>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4650      	mov	r0, sl
 8001694:	4659      	mov	r1, fp
 8001696:	f7ff f849 	bl	800072c <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7fe fd63 	bl	800016c <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <decodeGGA+0x4e4>)
 80016b4:	f7ff f83a 	bl	800072c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7fe fd54 	bl	800016c <__adddf3>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f9dc 	bl	8000a88 <__aeabi_d2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	61fb      	str	r3, [r7, #28]
	gga->lcation.longitude = lat;  // save the longitude data into the structure
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	609a      	str	r2, [r3, #8]

	gga->lcation.EW = *getDataAt(GGAbuffer, ",", 4);  // save the E/W into the structure
 80016da:	2204      	movs	r2, #4
 80016dc:	4983      	ldr	r1, [pc, #524]	; (80018ec <decodeGGA+0x4e8>)
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fe06 	bl	80012f0 <getDataAt>
 80016e4:	4603      	mov	r3, r0
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	731a      	strb	r2, [r3, #12]

	/***************** NUMMBER OF SATELLITES  *********************/

	strcpy(buffer, getDataAt(GGAbuffer, ",", 6));
 80016ec:	2206      	movs	r2, #6
 80016ee:	497f      	ldr	r1, [pc, #508]	; (80018ec <decodeGGA+0x4e8>)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fdfd 	bl	80012f0 <getDataAt>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f011 fe5c 	bl	80133bc <strcpy>

	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f011 fd4d 	bl	80131a8 <atoi>
 800170e:	4602      	mov	r2, r0
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28

	/***************** HDOP  *********************/

	memset(buffer, '\0', 12);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	220c      	movs	r2, #12
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f011 fd8f 	bl	8013240 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 7));
 8001722:	2207      	movs	r2, #7
 8001724:	4971      	ldr	r1, [pc, #452]	; (80018ec <decodeGGA+0x4e8>)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fde2 	bl	80012f0 <getDataAt>
 800172c:	4602      	mov	r2, r0
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f011 fe41 	bl	80133bc <strcpy>

	num = (atoi(buffer));
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4618      	mov	r0, r3
 8001740:	f011 fd32 	bl	80131a8 <atoi>
 8001744:	4603      	mov	r3, r0
 8001746:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800174c:	e00d      	b.n	800176a <decodeGGA+0x366>
		if(j > strlen(buffer)) return 2;
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fcfc 	bl	8000150 <strlen>
 8001758:	4602      	mov	r2, r0
 800175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175c:	429a      	cmp	r2, r3
 800175e:	d201      	bcs.n	8001764 <decodeGGA+0x360>
 8001760:	2302      	movs	r3, #2
 8001762:	e0bc      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	3301      	adds	r3, #1
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800176a:	f107 020c 	add.w	r2, r7, #12
 800176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b2e      	cmp	r3, #46	; 0x2e
 8001776:	d1ea      	bne.n	800174e <decodeGGA+0x34a>
	}
	j++;
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	3301      	adds	r3, #1
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fce4 	bl	8000150 <strlen>
 8001788:	4602      	mov	r2, r0
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
	int dec = atoi ((char *) buffer+j);
 8001790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001792:	f107 020c 	add.w	r2, r7, #12
 8001796:	4413      	add	r3, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f011 fd05 	bl	80131a8 <atoi>
 800179e:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow2(10, (declen)));
 80017a0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe2d 	bl	8000404 <__aeabi_i2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	69b8      	ldr	r0, [r7, #24]
 80017b0:	f7fe fe28 	bl	8000404 <__aeabi_i2d>
 80017b4:	4680      	mov	r8, r0
 80017b6:	4689      	mov	r9, r1
 80017b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ba:	200a      	movs	r0, #10
 80017bc:	f7ff fdcf 	bl	800135e <pow2>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4640      	mov	r0, r8
 80017c6:	4649      	mov	r1, r9
 80017c8:	f7fe ffb0 	bl	800072c <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7fe fcca 	bl	800016c <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f952 	bl	8000a88 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	61fb      	str	r3, [r7, #28]
	gga->HDOP = lat;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c

	/*************** ALTITUDE CALCULATION ********************/

	memset(buffer, '\0', 12);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	220c      	movs	r2, #12
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f011 fd22 	bl	8013240 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 8));
 80017fc:	2208      	movs	r2, #8
 80017fe:	493b      	ldr	r1, [pc, #236]	; (80018ec <decodeGGA+0x4e8>)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fd75 	bl	80012f0 <getDataAt>
 8001806:	4602      	mov	r2, r0
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f011 fdd4 	bl	80133bc <strcpy>

	num = (atoi(buffer));
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4618      	mov	r0, r3
 800181a:	f011 fcc5 	bl	80131a8 <atoi>
 800181e:	4603      	mov	r3, r0
 8001820:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001826:	e00d      	b.n	8001844 <decodeGGA+0x440>
		if(j > strlen(buffer)) return 2;
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fc8f 	bl	8000150 <strlen>
 8001832:	4602      	mov	r2, r0
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	429a      	cmp	r2, r3
 8001838:	d201      	bcs.n	800183e <decodeGGA+0x43a>
 800183a:	2302      	movs	r3, #2
 800183c:	e04f      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	3301      	adds	r3, #1
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001844:	f107 020c 	add.w	r2, r7, #12
 8001848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b2e      	cmp	r3, #46	; 0x2e
 8001850:	d1ea      	bne.n	8001828 <decodeGGA+0x424>
	}
	j++;
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	3301      	adds	r3, #1
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fc77 	bl	8000150 <strlen>
 8001862:	4602      	mov	r2, r0
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
	dec = atoi ((char *) buffer+j);
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	4413      	add	r3, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f011 fc98 	bl	80131a8 <atoi>
 8001878:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow2(10, (declen)));
 800187a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc0 	bl	8000404 <__aeabi_i2d>
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	69b8      	ldr	r0, [r7, #24]
 800188a:	f7fe fdbb 	bl	8000404 <__aeabi_i2d>
 800188e:	4680      	mov	r8, r0
 8001890:	4689      	mov	r9, r1
 8001892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001894:	200a      	movs	r0, #10
 8001896:	f7ff fd62 	bl	800135e <pow2>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4640      	mov	r0, r8
 80018a0:	4649      	mov	r1, r9
 80018a2:	f7fe ff43 	bl	800072c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fc5d 	bl	800016c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f8e5 	bl	8000a88 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	61fb      	str	r3, [r7, #28]
	gga->alt.altitude = lat;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	621a      	str	r2, [r3, #32]

	gga->alt.unit = *getDataAt(GGAbuffer, ",", 9);
 80018c8:	2209      	movs	r2, #9
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <decodeGGA+0x4e8>)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fd0f 	bl	80012f0 <getDataAt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80018dc:	2300      	movs	r3, #0

}
 80018de:	4618      	mov	r0, r3
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e8:	404e0000 	.word	0x404e0000
 80018ec:	080143d8 	.word	0x080143d8

080018f0 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc) {
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	b08e      	sub	sp, #56	; 0x38
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]

	char buffer[12];

	if (*getDataAt(RMCbuffer, ",", 1) == 'A') rmc->isValid = 1; // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80018fc:	2201      	movs	r2, #1
 80018fe:	4985      	ldr	r1, [pc, #532]	; (8001b14 <decodeRMC+0x224>)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fcf5 	bl	80012f0 <getDataAt>
 8001906:	4603      	mov	r3, r0
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b41      	cmp	r3, #65	; 0x41
 800190c:	d118      	bne.n	8001940 <decodeRMC+0x50>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	615a      	str	r2, [r3, #20]
	else {
		rmc->isValid = 0;
		return 1;
	}

	memset(buffer, '\0', 12);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	220c      	movs	r2, #12
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f011 fc8f 	bl	8013240 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 6));
 8001922:	2206      	movs	r2, #6
 8001924:	497b      	ldr	r1, [pc, #492]	; (8001b14 <decodeRMC+0x224>)
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fce2 	bl	80012f0 <getDataAt>
 800192c:	4602      	mov	r2, r0
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f011 fd41 	bl	80133bc <strcpy>

	int j = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800193e:	e012      	b.n	8001966 <decodeRMC+0x76>
		rmc->isValid = 0;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
		return 1;
 8001946:	2301      	movs	r3, #1
 8001948:	e0df      	b.n	8001b0a <decodeRMC+0x21a>
		if(j > strlen(buffer)) return 2;
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fbfe 	bl	8000150 <strlen>
 8001954:	4602      	mov	r2, r0
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	429a      	cmp	r2, r3
 800195a:	d201      	bcs.n	8001960 <decodeRMC+0x70>
 800195c:	2302      	movs	r3, #2
 800195e:	e0d4      	b.n	8001b0a <decodeRMC+0x21a>
		j++;   // same as above
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	3301      	adds	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001966:	f107 0208 	add.w	r2, r7, #8
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b2e      	cmp	r3, #46	; 0x2e
 8001972:	d1ea      	bne.n	800194a <decodeRMC+0x5a>
	}

	if (strlen (buffer) > j) {          // if the speed have some valid data
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fbe9 	bl	8000150 <strlen>
 800197e:	4602      	mov	r2, r0
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	429a      	cmp	r2, r3
 8001984:	d942      	bls.n	8001a0c <decodeRMC+0x11c>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f011 fc0c 	bl	80131a8 <atoi>
 8001990:	4603      	mov	r3, r0
 8001992:	867b      	strh	r3, [r7, #50]	; 0x32
		j++;
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	3301      	adds	r3, #1
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fbd6 	bl	8000150 <strlen>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	f107 0208 	add.w	r2, r7, #8
 80019b2:	4413      	add	r3, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f011 fbf7 	bl	80131a8 <atoi>
 80019ba:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow2(10, (declen)));
 80019bc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd1f 	bl	8000404 <__aeabi_i2d>
 80019c6:	4604      	mov	r4, r0
 80019c8:	460d      	mov	r5, r1
 80019ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019cc:	f7fe fd1a 	bl	8000404 <__aeabi_i2d>
 80019d0:	4680      	mov	r8, r0
 80019d2:	4689      	mov	r9, r1
 80019d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019d6:	200a      	movs	r0, #10
 80019d8:	f7ff fcc1 	bl	800135e <pow2>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4640      	mov	r0, r8
 80019e2:	4649      	mov	r1, r9
 80019e4:	f7fe fea2 	bl	800072c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4620      	mov	r0, r4
 80019ee:	4629      	mov	r1, r5
 80019f0:	f7fe fbbc 	bl	800016c <__adddf3>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f844 	bl	8000a88 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	e003      	b.n	8001a14 <decodeRMC+0x124>
	}
	else rmc->speed = 0;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]

	// Get Course

	memset(buffer, '\0', 12);
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	220c      	movs	r2, #12
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f011 fc0f 	bl	8013240 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 7));
 8001a22:	2207      	movs	r2, #7
 8001a24:	493b      	ldr	r1, [pc, #236]	; (8001b14 <decodeRMC+0x224>)
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fc62 	bl	80012f0 <getDataAt>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f011 fcc1 	bl	80133bc <strcpy>

	j = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a3e:	e00d      	b.n	8001a5c <decodeRMC+0x16c>
		if(j > strlen(buffer)) return 2;
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fb83 	bl	8000150 <strlen>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d201      	bcs.n	8001a56 <decodeRMC+0x166>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e059      	b.n	8001b0a <decodeRMC+0x21a>
		j++;   	// Figure out how many digits before the decimal
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3301      	adds	r3, #1
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b2e      	cmp	r3, #46	; 0x2e
 8001a68:	d1ea      	bne.n	8001a40 <decodeRMC+0x150>
	}

	if (strlen (buffer) > j){  // if the course have some data
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fb6e 	bl	8000150 <strlen>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d942      	bls.n	8001b02 <decodeRMC+0x212>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4618      	mov	r0, r3
 8001a82:	f011 fb91 	bl	80131a8 <atoi>
 8001a86:	4603      	mov	r3, r0
 8001a88:	847b      	strh	r3, [r7, #34]	; 0x22
		j++;
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fb5b 	bl	8000150 <strlen>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	f107 0208 	add.w	r2, r7, #8
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f011 fb7c 	bl	80131a8 <atoi>
 8001ab0:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow2(10, (declen)));
 8001ab2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fca4 	bl	8000404 <__aeabi_i2d>
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f7fe fc9f 	bl	8000404 <__aeabi_i2d>
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	4689      	mov	r9, r1
 8001aca:	69f9      	ldr	r1, [r7, #28]
 8001acc:	200a      	movs	r0, #10
 8001ace:	f7ff fc46 	bl	800135e <pow2>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	4649      	mov	r1, r9
 8001ada:	f7fe fe27 	bl	800072c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f7fe fb41 	bl	800016c <__adddf3>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7fe ffc9 	bl	8000a88 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	e003      	b.n	8001b0a <decodeRMC+0x21a>
	}
	else rmc->course = 0;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
		rmc->date.Mon = mon;
		rmc->date.Yr = yr;
	}
	return 0;
	*/
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3738      	adds	r7, #56	; 0x38
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b14:	080143d8 	.word	0x080143d8

08001b18 <getGPSData>:


void getGPSData (GPSSTRUCT *gpsData) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b8      	sub	sp, #224	; 0xe0
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	char GGA[100];
	char RMC[100];
	unsigned int tail = GetTail ();
 8001b20:	f000 f97a 	bl	8001e18 <GetTail>
 8001b24:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	unsigned int head = GetHead ();
 8001b28:	f000 f99a 	bl	8001e60 <GetHead>
 8001b2c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	ring_buffer* buf_prev = GetRxBuf ();
 8001b30:	f000 f97e 	bl	8001e30 <GetRxBuf>
 8001b34:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	unsigned long _gga_time = gga_time;
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <getGPSData+0xac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


	if (Wait_for("GGA")) {
 8001b40:	4821      	ldr	r0, [pc, #132]	; (8001bc8 <getGPSData+0xb0>)
 8001b42:	f000 f999 	bl	8001e78 <Wait_for>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d019      	beq.n	8001b80 <getGPSData+0x68>
		gga_time = HAL_GetTick();
 8001b4c:	f004 fb80 	bl	8006250 <HAL_GetTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <getGPSData+0xac>)
 8001b54:	6013      	str	r3, [r2, #0]
		gga_time_dif = gga_time - _gga_time;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <getGPSData+0xac>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <getGPSData+0xb4>)
 8001b62:	6013      	str	r3, [r2, #0]
		Copy_upto("*", GGA);
 8001b64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <getGPSData+0xb8>)
 8001b6c:	f000 f8de 	bl	8001d2c <Copy_upto>
		decodeGGA(GGA, &gpsData->ggastruct);
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fc43 	bl	8001404 <decodeGGA>
 8001b7e:	e003      	b.n	8001b88 <getGPSData+0x70>
	}

	else {
		//SetTail(tail);
		//SetHead(head);
		SetRxBuf(buf_prev);
 8001b80:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001b84:	f000 f95e 	bl	8001e44 <SetRxBuf>
	}



	if (Wait_for("RMC")) {
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <getGPSData+0xbc>)
 8001b8a:	f000 f975 	bl	8001e78 <Wait_for>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <getGPSData+0x9c>
		Copy_upto("*", RMC);
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <getGPSData+0xb8>)
 8001b9c:	f000 f8c6 	bl	8001d2c <Copy_upto>
		decodeRMC(RMC, &gpsData->rmcstruct);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe9f 	bl	80018f0 <decodeRMC>


	//Uart_flush();
	//return;

}
 8001bb2:	e003      	b.n	8001bbc <getGPSData+0xa4>
		SetRxBuf(buf_prev);
 8001bb4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001bb8:	f000 f944 	bl	8001e44 <SetRxBuf>
}
 8001bbc:	bf00      	nop
 8001bbe:	37e0      	adds	r7, #224	; 0xe0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20001944 	.word	0x20001944
 8001bc8:	080143dc 	.word	0x080143dc
 8001bcc:	20001948 	.word	0x20001948
 8001bd0:	080143e0 	.word	0x080143e0
 8001bd4:	080143e4 	.word	0x080143e4

08001bd8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <Ringbuf_init+0x38>)
 8001bde:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <Ringbuf_init+0x3c>)
 8001be0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <Ringbuf_init+0x40>)
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <Ringbuf_init+0x44>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <Ringbuf_init+0x48>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <Ringbuf_init+0x48>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Ringbuf_init+0x48>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <Ringbuf_init+0x48>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	60da      	str	r2, [r3, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20001a1c 	.word	0x20001a1c
 8001c14:	200000a0 	.word	0x200000a0
 8001c18:	20001a18 	.word	0x20001a18
 8001c1c:	200004a8 	.word	0x200004a8
 8001c20:	20000aac 	.word	0x20000aac

08001c24 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c36:	3301      	adds	r3, #1
 8001c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d009      	beq.n	8001c5e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	79f9      	ldrb	r1, [r7, #7]
 8001c54:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <Uart_read+0x54>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <Uart_read+0x54>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d102      	bne.n	8001c88 <Uart_read+0x20>
  {
    return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	e013      	b.n	8001cb0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <Uart_read+0x54>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <Uart_read+0x54>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <Uart_read+0x54>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <Uart_read+0x54>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001caa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return c;
 8001cae:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20001a1c 	.word	0x20001a1c

08001cc0 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <IsDataAvailable+0x30>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <IsDataAvailable+0x30>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20001a1c 	.word	0x20001a1c

08001cf4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <Uart_peek+0x34>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <Uart_peek+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d102      	bne.n	8001d12 <Uart_peek+0x1e>
  {
    return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	e006      	b.n	8001d20 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <Uart_peek+0x34>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <Uart_peek+0x34>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20001a1c 	.word	0x20001a1c

08001d2c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fa08 	bl	8000150 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001d48:	e01e      	b.n	8001d88 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <Copy_upto+0xe4>)
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <Copy_upto+0xe4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	4403      	add	r3, r0
 8001d5c:	5c8a      	ldrb	r2, [r1, r2]
 8001d5e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <Copy_upto+0xe4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <Copy_upto+0xe4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001d72:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			indx++;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001d7c:	bf00      	nop
 8001d7e:	f7ff ff9f 	bl	8001cc0 <IsDataAvailable>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0fa      	beq.n	8001d7e <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001d88:	f7ff ffb4 	bl	8001cf4 <Uart_peek>
 8001d8c:	4601      	mov	r1, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4299      	cmp	r1, r3
 8001d98:	d1d7      	bne.n	8001d4a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001d9a:	e01d      	b.n	8001dd8 <Copy_upto+0xac>
	{
		so_far++;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001da2:	f7ff ff61 	bl	8001c68 <Uart_read>
 8001da6:	4601      	mov	r1, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	613a      	str	r2, [r7, #16]
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d101      	bne.n	8001dc4 <Copy_upto+0x98>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e020      	b.n	8001e06 <Copy_upto+0xda>
		timeout = TIMEOUT_DEF;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <Copy_upto+0xe8>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 8001dca:	f7ff ff79 	bl	8001cc0 <IsDataAvailable>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <Copy_upto+0xac>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e016      	b.n	8001e06 <Copy_upto+0xda>
	while (Uart_peek() == string [so_far])
 8001dd8:	f7ff ff8c 	bl	8001cf4 <Uart_peek>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4299      	cmp	r1, r3
 8001de8:	d0d8      	beq.n	8001d9c <Copy_upto+0x70>
	}

	if (so_far != len)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d002      	beq.n	8001df8 <Copy_upto+0xcc>
	{
		so_far = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
		goto again;
 8001df6:	e7a7      	b.n	8001d48 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d101      	bne.n	8001e04 <Copy_upto+0xd8>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <Copy_upto+0xda>
	else return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20001a1c 	.word	0x20001a1c
 8001e14:	20001a20 	.word	0x20001a20

08001e18 <GetTail>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions

unsigned int GetTail () {
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return _rx_buffer->tail;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <GetTail+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404

}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20001a1c 	.word	0x20001a1c

08001e30 <GetRxBuf>:

ring_buffer* GetRxBuf () {
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	return _rx_buffer;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <GetRxBuf+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]

}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20001a1c 	.word	0x20001a1c

08001e44 <SetRxBuf>:

void SetRxBuf(ring_buffer* buf) {
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	_rx_buffer = buf;
 8001e4c:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <SetRxBuf+0x18>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20001a1c 	.word	0x20001a1c

08001e60 <GetHead>:


unsigned int GetHead () {
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return _rx_buffer->head;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <GetHead+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20001a1c 	.word	0x20001a1c

08001e78 <Wait_for>:
	_rx_buffer->head = _head;

}

int Wait_for (char *string)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	int so_far = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe f963 	bl	8000150 <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001e8e:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <Wait_for+0xe4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	801a      	strh	r2, [r3, #0]
	if ((IsDataAvailable())) {  // let's wait for the data to show up
 8001e94:	f7ff ff14 	bl	8001cc0 <IsDataAvailable>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d058      	beq.n	8001f50 <Wait_for+0xd8>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001e9e:	e017      	b.n	8001ed0 <Wait_for+0x58>
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <Wait_for+0xe8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <Wait_for+0xe8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d00b      	beq.n	8001ecc <Wait_for+0x54>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <Wait_for+0xe8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <Wait_for+0xe8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ec6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001eca:	e001      	b.n	8001ed0 <Wait_for+0x58>
		}

		else
		{
			//Uart_flush();
			return 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e040      	b.n	8001f52 <Wait_for+0xda>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001ed0:	f7ff ff10 	bl	8001cf4 <Uart_peek>
 8001ed4:	4601      	mov	r1, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	d1de      	bne.n	8001ea0 <Wait_for+0x28>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001ee2:	e01d      	b.n	8001f20 <Wait_for+0xa8>
	{
		// now we will peek for the other letters too
		so_far++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <Wait_for+0xe8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <Wait_for+0xe8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001efc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		if (so_far == len) return 1;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d101      	bne.n	8001f0c <Wait_for+0x94>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e022      	b.n	8001f52 <Wait_for+0xda>
		timeout = TIMEOUT_DEF;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <Wait_for+0xe4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 8001f12:	f7ff fed5 	bl	8001cc0 <IsDataAvailable>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <Wait_for+0xa8>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e018      	b.n	8001f52 <Wait_for+0xda>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001f20:	f7ff fee8 	bl	8001cf4 <Uart_peek>
 8001f24:	4601      	mov	r1, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4299      	cmp	r1, r3
 8001f30:	d0d8      	beq.n	8001ee4 <Wait_for+0x6c>
	}

	if (so_far != len)
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d002      	beq.n	8001f40 <Wait_for+0xc8>
	{
		so_far = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
		goto again;
 8001f3e:	e7a6      	b.n	8001e8e <Wait_for+0x16>
	}

	if (so_far == len)
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d101      	bne.n	8001f4c <Wait_for+0xd4>
		{
		//Uart_flush();
		return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e002      	b.n	8001f52 <Wait_for+0xda>

		}
	else {
		//Uart_flush();
		return 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <Wait_for+0xda>
	}
}

	else {
		return 0;
 8001f50:	2300      	movs	r3, #0
	}

}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001a20 	.word	0x20001a20
 8001f60:	20001a1c 	.word	0x20001a1c

08001f64 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d013      	beq.n	8001fae <Uart_isr+0x4a>
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <Uart_isr+0xb4>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe3c 	bl	8001c24 <store_char>
        return;
 8001fac:	e031      	b.n	8002012 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02c      	beq.n	8002012 <Uart_isr+0xae>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d027      	beq.n	8002012 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <Uart_isr+0xb8>)
 8001fc4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <Uart_isr+0xb8>)
 8001fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d108      	bne.n	8001fe4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001fe2:	e015      	b.n	8002010 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <Uart_isr+0xb8>)
 8001fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <Uart_isr+0xb8>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <Uart_isr+0xb8>)
 8001ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <Uart_isr+0xb8>)
 8001ffe:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	7bba      	ldrb	r2, [r7, #14]
 800200e:	605a      	str	r2, [r3, #4]
    	return;
 8002010:	bf00      	nop
    }
}
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20001a1c 	.word	0x20001a1c
 800201c:	200004a8 	.word	0x200004a8

08002020 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800202e:	2301      	movs	r3, #1
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	2301      	movs	r3, #1
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	1dbb      	adds	r3, r7, #6
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2301      	movs	r3, #1
 800203c:	22d0      	movs	r2, #208	; 0xd0
 800203e:	21ef      	movs	r1, #239	; 0xef
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <read_chip_id+0x3c>)
 8002042:	f005 fd27 	bl	8007a94 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	2b55      	cmp	r3, #85	; 0x55
 800204a:	d001      	beq.n	8002050 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800204c:	2301      	movs	r3, #1
 800204e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8002050:	79fb      	ldrb	r3, [r7, #7]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200008b8 	.word	0x200008b8

08002060 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af04      	add	r7, sp, #16
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 800206c:	2300      	movs	r3, #0
 800206e:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d81a      	bhi.n	80020ac <set_oss+0x4c>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <set_oss+0x1c>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002095 	.word	0x08002095
 8002084:	0800209d 	.word	0x0800209d
 8002088:	080020a5 	.word	0x080020a5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2205      	movs	r2, #5
 8002090:	705a      	strb	r2, [r3, #1]
			break;
 8002092:	e00f      	b.n	80020b4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2208      	movs	r2, #8
 8002098:	705a      	strb	r2, [r3, #1]
			break;
 800209a:	e00b      	b.n	80020b4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	220e      	movs	r2, #14
 80020a0:	705a      	strb	r2, [r3, #1]
			break;
 80020a2:	e007      	b.n	80020b4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	221a      	movs	r2, #26
 80020a8:	705a      	strb	r2, [r3, #1]
			break;
 80020aa:	e003      	b.n	80020b4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2208      	movs	r2, #8
 80020b0:	705a      	strb	r2, [r3, #1]
			break;
 80020b2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80020c4:	2301      	movs	r3, #1
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	22f4      	movs	r2, #244	; 0xf4
 80020d6:	21ee      	movs	r1, #238	; 0xee
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <set_oss+0x88>)
 80020da:	f005 fbe1 	bl	80078a0 <HAL_I2C_Mem_Write>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200008b8 	.word	0x200008b8

080020ec <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800211a:	2301      	movs	r3, #1
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	2316      	movs	r3, #22
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	22aa      	movs	r2, #170	; 0xaa
 800212c:	21ef      	movs	r1, #239	; 0xef
 800212e:	4828      	ldr	r0, [pc, #160]	; (80021d0 <read_calib_data+0xe4>)
 8002130:	f005 fcb0 	bl	8007a94 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800213a:	e03e      	b.n	80021ba <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800213c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002146:	4413      	add	r3, r2
 8002148:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b219      	sxth	r1, r3
 8002150:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002154:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002158:	4413      	add	r3, r2
 800215a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800215e:	b21a      	sxth	r2, r3
 8002160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4403      	add	r3, r0
 800216a:	430a      	orrs	r2, r1
 800216c:	b212      	sxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8002170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2da      	uxtb	r2, r3
 8002188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	440b      	add	r3, r1
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80021b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021be:	2b0b      	cmp	r3, #11
 80021c0:	d9bc      	bls.n	800213c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80021c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200008b8 	.word	0x200008b8

080021d4 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f011 f82c 	bl	8013240 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80021e8:	687c      	ldr	r4, [r7, #4]
 80021ea:	f7ff ff19 	bl	8002020 <read_chip_id>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	687c      	ldr	r4, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff77 	bl	80020ec <read_calib_data>
 80021fe:	4603      	mov	r3, r0
 8002200:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3338      	adds	r3, #56	; 0x38
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff28 	bl	8002060 <set_oss>
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 800221e:	232e      	movs	r3, #46	; 0x2e
 8002220:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8002222:	2301      	movs	r3, #1
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	22f4      	movs	r2, #244	; 0xf4
 8002232:	21ee      	movs	r1, #238	; 0xee
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <write_ut+0x2c>)
 8002236:	f005 fb33 	bl	80078a0 <HAL_I2C_Mem_Write>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200008b8 	.word	0x200008b8

08002248 <read_ut>:

int32_t read_ut (void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800224e:	2301      	movs	r3, #1
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2302      	movs	r3, #2
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2301      	movs	r3, #1
 800225c:	22f6      	movs	r2, #246	; 0xf6
 800225e:	21ef      	movs	r1, #239	; 0xef
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <read_ut+0x30>)
 8002262:	f005 fc17 	bl	8007a94 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8002266:	793b      	ldrb	r3, [r7, #4]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	797a      	ldrb	r2, [r7, #5]
 800226c:	4313      	orrs	r3, r2
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200008b8 	.word	0x200008b8

0800227c <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
	float temp = 0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ff30 	bl	80010fc <__aeabi_f2iz>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	895b      	ldrh	r3, [r3, #10]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	8912      	ldrh	r2, [r2, #8]
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	13db      	asrs	r3, r3, #15
 80022ae:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80022b6:	02da      	lsls	r2, r3, #11
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80022be:	4619      	mov	r1, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	440b      	add	r3, r1
 80022c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80022c8:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	441a      	add	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	3308      	adds	r3, #8
 80022da:	111b      	asrs	r3, r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fcdd 	bl	8000c9c <__aeabi_i2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <get_temp+0xa4>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd2c 	bl	8000d44 <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <get_temp+0xa8>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7fe fece 	bl	8001094 <__aeabi_fcmple>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <get_temp+0x90>
 80022fe:	490a      	ldr	r1, [pc, #40]	; (8002328 <get_temp+0xac>)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7fe fed1 	bl	80010a8 <__aeabi_fcmpge>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	3dcccccd 	.word	0x3dcccccd
 8002324:	c2200000 	.word	0xc2200000
 8002328:	42aa0000 	.word	0x42aa0000

0800232c <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <write_up+0x38>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	803b      	strh	r3, [r7, #0]
 8002338:	2300      	movs	r3, #0
 800233a:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8002340:	2334      	movs	r3, #52	; 0x34
 8002342:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8002344:	2301      	movs	r3, #1
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	2301      	movs	r3, #1
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	463b      	mov	r3, r7
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	22f4      	movs	r2, #244	; 0xf4
 8002354:	21ee      	movs	r1, #238	; 0xee
 8002356:	4804      	ldr	r0, [pc, #16]	; (8002368 <write_up+0x3c>)
 8002358:	f005 faa2 	bl	80078a0 <HAL_I2C_Mem_Write>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	080143e8 	.word	0x080143e8
 8002368:	200008b8 	.word	0x200008b8

0800236c <read_up>:

int32_t read_up (oss_t oss)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af04      	add	r7, sp, #16
 8002372:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <read_up+0x54>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	813b      	strh	r3, [r7, #8]
 800237a:	2300      	movs	r3, #0
 800237c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8002382:	2301      	movs	r3, #1
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	2303      	movs	r3, #3
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2301      	movs	r3, #1
 8002392:	22f6      	movs	r2, #246	; 0xf6
 8002394:	21ef      	movs	r1, #239	; 0xef
 8002396:	480b      	ldr	r0, [pc, #44]	; (80023c4 <read_up+0x58>)
 8002398:	f005 fb7c 	bl	8007a94 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800239c:	7a3b      	ldrb	r3, [r7, #8]
 800239e:	041a      	lsls	r2, r3, #16
 80023a0:	7a7b      	ldrb	r3, [r7, #9]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	4413      	add	r3, r2
 80023a6:	7aba      	ldrb	r2, [r7, #10]
 80023a8:	441a      	add	r2, r3
 80023aa:	793b      	ldrb	r3, [r7, #4]
 80023ac:	f1c3 0308 	rsb	r3, r3, #8
 80023b0:	fa42 f303 	asr.w	r3, r2, r3
 80023b4:	60fb      	str	r3, [r7, #12]
	return up;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	080143e8 	.word	0x080143e8
 80023c4:	200008b8 	.word	0x200008b8

080023c8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80023c8:	b084      	sub	sp, #16
 80023ca:	b480      	push	{r7}
 80023cc:	b089      	sub	sp, #36	; 0x24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80023d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80023e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80023e6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80023e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80023ec:	461a      	mov	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fb03 f303 	mul.w	r3, r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da01      	bge.n	80023fc <get_pressure+0x34>
 80023f8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80023fc:	131b      	asrs	r3, r3, #12
 80023fe:	fb03 f302 	mul.w	r3, r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	da01      	bge.n	800240a <get_pressure+0x42>
 8002406:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800240a:	12db      	asrs	r3, r3, #11
 800240c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800240e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002412:	461a      	mov	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fb03 f302 	mul.w	r3, r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	da01      	bge.n	8002422 <get_pressure+0x5a>
 800241e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002422:	12db      	asrs	r3, r3, #11
 8002424:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800242e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002432:	009a      	lsls	r2, r3, #2
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4413      	add	r3, r2
 8002438:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800243c:	4093      	lsls	r3, r2
 800243e:	3302      	adds	r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	da00      	bge.n	8002446 <get_pressure+0x7e>
 8002444:	3303      	adds	r3, #3
 8002446:	109b      	asrs	r3, r3, #2
 8002448:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800244a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800244e:	461a      	mov	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fb03 f302 	mul.w	r3, r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	da02      	bge.n	8002460 <get_pressure+0x98>
 800245a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800245e:	331f      	adds	r3, #31
 8002460:	135b      	asrs	r3, r3, #13
 8002462:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8002464:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fb03 f303 	mul.w	r3, r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	da01      	bge.n	8002478 <get_pressure+0xb0>
 8002474:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002478:	131b      	asrs	r3, r3, #12
 800247a:	fb03 f302 	mul.w	r3, r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	da02      	bge.n	8002488 <get_pressure+0xc0>
 8002482:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002486:	33ff      	adds	r3, #255	; 0xff
 8002488:	141b      	asrs	r3, r3, #16
 800248a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	3302      	adds	r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	da00      	bge.n	800249a <get_pressure+0xd2>
 8002498:	3303      	adds	r3, #3
 800249a:	109b      	asrs	r3, r3, #2
 800249c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800249e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024a8:	fb03 f302 	mul.w	r3, r3, r2
 80024ac:	0bdb      	lsrs	r3, r3, #15
 80024ae:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80024bc:	4611      	mov	r1, r2
 80024be:	f24c 3250 	movw	r2, #50000	; 0xc350
 80024c2:	410a      	asrs	r2, r1
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db06      	blt.n	80024de <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	005a      	lsls	r2, r3, #1
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	e005      	b.n	80024ea <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <get_pressure+0x12a>
 80024f0:	33ff      	adds	r3, #255	; 0xff
 80024f2:	121b      	asrs	r3, r3, #8
 80024f4:	461a      	mov	r2, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da00      	bge.n	80024fe <get_pressure+0x136>
 80024fc:	33ff      	adds	r3, #255	; 0xff
 80024fe:	121b      	asrs	r3, r3, #8
 8002500:	fb03 f302 	mul.w	r3, r3, r2
 8002504:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f640 32de 	movw	r2, #3038	; 0xbde
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	da02      	bge.n	800251a <get_pressure+0x152>
 8002514:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002518:	33ff      	adds	r3, #255	; 0xff
 800251a:	141b      	asrs	r3, r3, #16
 800251c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <get_pressure+0x194>)
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	da02      	bge.n	8002530 <get_pressure+0x168>
 800252a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800252e:	33ff      	adds	r3, #255	; 0xff
 8002530:	141b      	asrs	r3, r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800253e:	2b00      	cmp	r3, #0
 8002540:	da00      	bge.n	8002544 <get_pressure+0x17c>
 8002542:	330f      	adds	r3, #15
 8002544:	111b      	asrs	r3, r3, #4
 8002546:	461a      	mov	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	61fb      	str	r3, [r7, #28]

	return p;
 800254e:	69fb      	ldr	r3, [r7, #28]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	b004      	add	sp, #16
 800255a:	4770      	bx	lr
 800255c:	ffffe343 	.word	0xffffe343

08002560 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fb92 	bl	8000c9c <__aeabi_i2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4923      	ldr	r1, [pc, #140]	; (8002608 <get_altitude+0xa8>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fc95 	bl	8000eac <__aeabi_fdiv>
 8002582:	4603      	mov	r3, r0
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff4f 	bl	8000428 <__aeabi_f2d>
 800258a:	a31b      	add	r3, pc, #108	; (adr r3, 80025f8 <get_altitude+0x98>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f00e fe4a 	bl	8011228 <pow>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	491b      	ldr	r1, [pc, #108]	; (800260c <get_altitude+0xac>)
 800259e:	f7fd fde3 	bl	8000168 <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	a315      	add	r3, pc, #84	; (adr r3, 8002600 <get_altitude+0xa0>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fd ff92 	bl	80004d8 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fa64 	bl	8000a88 <__aeabi_d2f>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80025c4:	4912      	ldr	r1, [pc, #72]	; (8002610 <get_altitude+0xb0>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7fe fd64 	bl	8001094 <__aeabi_fcmple>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <get_altitude+0x80>
 80025d2:	4910      	ldr	r1, [pc, #64]	; (8002614 <get_altitude+0xb4>)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7fe fd67 	bl	80010a8 <__aeabi_fcmpge>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2205      	movs	r2, #5
 80025e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80025e8:	68fb      	ldr	r3, [r7, #12]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	ccd9456c 	.word	0xccd9456c
 80025fc:	3fc85b95 	.word	0x3fc85b95
 8002600:	00000000 	.word	0x00000000
 8002604:	40e5a540 	.word	0x40e5a540
 8002608:	47c5e680 	.word	0x47c5e680
 800260c:	3ff00000 	.word	0x3ff00000
 8002610:	c3fa0000 	.word	0xc3fa0000
 8002614:	460ca000 	.word	0x460ca000

08002618 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
	return b_counter;
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <get_b_counter+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	200008b0 	.word	0x200008b0

0800262c <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

	b_counter++;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <set_b_counter+0x30>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a08      	ldr	r2, [pc, #32]	; (800265c <set_b_counter+0x30>)
 800263c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <set_b_counter+0x30>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4293      	cmp	r3, r2
 8002648:	d202      	bcs.n	8002650 <set_b_counter+0x24>
		b_counter = 0;
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <set_b_counter+0x30>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
	}
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	200008b0 	.word	0x200008b0

08002660 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f00e fd6f 	bl	801114c <cosf>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f00e fd9b 	bl	80111bc <sinf>
 8002686:	4603      	mov	r3, r0
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_Z8lla2ecefPfS_>:
 *  Created on: Jul 21, 2022
 *      Author: Kerim
 */
#include <coordinates.hpp>

void lla2ecef(float lla[3], float ecef[3]) {
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	float deg2rad = M_PI/180.0;
 800269a:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <_Z8lla2ecefPfS_+0x168>)
 800269c:	617b      	str	r3, [r7, #20]

	float lat = deg2rad*lla[0];
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	6978      	ldr	r0, [r7, #20]
 80026a6:	f7fe fb4d 	bl	8000d44 <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	613b      	str	r3, [r7, #16]
	float lon = deg2rad*lla[1];
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7fe fb44 	bl	8000d44 <__aeabi_fmul>
 80026bc:	4603      	mov	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]
	float h = lla[2];
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60bb      	str	r3, [r7, #8]

	ecef[0] = (Nlla+h)*cos(lat)*cos(lon);
 80026c6:	68b8      	ldr	r0, [r7, #8]
 80026c8:	f7fd feae 	bl	8000428 <__aeabi_f2d>
 80026cc:	a346      	add	r3, pc, #280	; (adr r3, 80027e8 <_Z8lla2ecefPfS_+0x158>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd fd4b 	bl	800016c <__adddf3>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	461d      	mov	r5, r3
 80026de:	6938      	ldr	r0, [r7, #16]
 80026e0:	f7ff ffbe 	bl	8002660 <_ZSt3cosf>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fe9e 	bl	8000428 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fd fef0 	bl	80004d8 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff ffad 	bl	8002660 <_ZSt3cosf>
 8002706:	4603      	mov	r3, r0
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fe8d 	bl	8000428 <__aeabi_f2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd fedf 	bl	80004d8 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe f9b1 	bl	8000a88 <__aeabi_d2f>
 8002726:	4602      	mov	r2, r0
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
	ecef[1] = (Nlla+h)*cos(lat)*sin(lon);
 800272c:	68b8      	ldr	r0, [r7, #8]
 800272e:	f7fd fe7b 	bl	8000428 <__aeabi_f2d>
 8002732:	a32d      	add	r3, pc, #180	; (adr r3, 80027e8 <_Z8lla2ecefPfS_+0x158>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd fd18 	bl	800016c <__adddf3>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f7ff ff8b 	bl	8002660 <_ZSt3cosf>
 800274a:	4603      	mov	r3, r0
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fe6b 	bl	8000428 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f7fd febd 	bl	80004d8 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4614      	mov	r4, r2
 8002764:	461d      	mov	r5, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff ff86 	bl	8002678 <_ZSt3sinf>
 800276c:	4603      	mov	r3, r0
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe5a 	bl	8000428 <__aeabi_f2d>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd feac 	bl	80004d8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	1d1c      	adds	r4, r3, #4
 800278c:	f7fe f97c 	bl	8000a88 <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	6023      	str	r3, [r4, #0]
	ecef[2] = ((1-e*e)*Nlla+h)*sin(lat);
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f7fd fe47 	bl	8000428 <__aeabi_f2d>
 800279a:	a315      	add	r3, pc, #84	; (adr r3, 80027f0 <_Z8lla2ecefPfS_+0x160>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd fce4 	bl	800016c <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f7ff ff63 	bl	8002678 <_ZSt3sinf>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe37 	bl	8000428 <__aeabi_f2d>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd fe89 	bl	80004d8 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f103 0408 	add.w	r4, r3, #8
 80027d4:	f7fe f958 	bl	8000a88 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	6023      	str	r3, [r4, #0]
/*
	ecef[0] = 1;
	ecef[1] = 2;
	ecef[2] = 4;
	*/
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	f3af 8000 	nop.w
 80027e8:	00000000 	.word	0x00000000
 80027ec:	4158549d 	.word	0x4158549d
 80027f0:	8ae0b0af 	.word	0x8ae0b0af
 80027f4:	41585457 	.word	0x41585457
 80027f8:	3c8efa35 	.word	0x3c8efa35

080027fc <_Z8ecef2nedPfS_S_S_>:

void ecef2ned(float ecef[3], float ecef0[3], float lla0[3], float vned[2]) {
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
	float deg2rad = M_PI/180.0;
 800280a:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <_Z8ecef2nedPfS_S_S_+0x138>)
 800280c:	627b      	str	r3, [r7, #36]	; 0x24


	float dxecef = ecef[0]- ecef0[0];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7fe f989 	bl	8000b30 <__aeabi_fsub>
 800281e:	4603      	mov	r3, r0
 8002820:	623b      	str	r3, [r7, #32]
	float dyecef = ecef[1]- ecef0[1];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3304      	adds	r3, #4
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7fe f97d 	bl	8000b30 <__aeabi_fsub>
 8002836:	4603      	mov	r3, r0
 8002838:	61fb      	str	r3, [r7, #28]
	float dzecef = ecef[2] -ecef0[2];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3308      	adds	r3, #8
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3308      	adds	r3, #8
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f7fe f971 	bl	8000b30 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
	//dzecef = 0;

	float lat0 = deg2rad*lla0[0];
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285a:	f7fe fa73 	bl	8000d44 <__aeabi_fmul>
 800285e:	4603      	mov	r3, r0
 8002860:	617b      	str	r3, [r7, #20]
	float lon0 = deg2rad*lla0[1];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800286c:	f7fe fa6a 	bl	8000d44 <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	613b      	str	r3, [r7, #16]

	vned[1]=  -sin(lon0)*dxecef + cos(lon0)*dyecef;
 8002874:	6938      	ldr	r0, [r7, #16]
 8002876:	f7ff feff 	bl	8002678 <_ZSt3sinf>
 800287a:	4603      	mov	r3, r0
 800287c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fa5e 	bl	8000d44 <__aeabi_fmul>
 8002888:	4603      	mov	r3, r0
 800288a:	461d      	mov	r5, r3
 800288c:	6938      	ldr	r0, [r7, #16]
 800288e:	f7ff fee7 	bl	8002660 <_ZSt3cosf>
 8002892:	4603      	mov	r3, r0
 8002894:	69f9      	ldr	r1, [r7, #28]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fa54 	bl	8000d44 <__aeabi_fmul>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	1d1c      	adds	r4, r3, #4
 80028a4:	4611      	mov	r1, r2
 80028a6:	4628      	mov	r0, r5
 80028a8:	f7fe f944 	bl	8000b34 <__addsf3>
 80028ac:	4603      	mov	r3, r0
 80028ae:	6023      	str	r3, [r4, #0]
	vned[0] = -sin(lat0)*cos(lon0)*dxecef - sin(lat0)*sin(lon0)*dyecef + cos(lat0)*dzecef;
 80028b0:	6978      	ldr	r0, [r7, #20]
 80028b2:	f7ff fee1 	bl	8002678 <_ZSt3sinf>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80028bc:	6938      	ldr	r0, [r7, #16]
 80028be:	f7ff fecf 	bl	8002660 <_ZSt3cosf>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe fa3c 	bl	8000d44 <__aeabi_fmul>
 80028cc:	4603      	mov	r3, r0
 80028ce:	6a39      	ldr	r1, [r7, #32]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fa37 	bl	8000d44 <__aeabi_fmul>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461d      	mov	r5, r3
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff fecc 	bl	8002678 <_ZSt3sinf>
 80028e0:	4604      	mov	r4, r0
 80028e2:	6938      	ldr	r0, [r7, #16]
 80028e4:	f7ff fec8 	bl	8002678 <_ZSt3sinf>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4619      	mov	r1, r3
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe fa29 	bl	8000d44 <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	69f9      	ldr	r1, [r7, #28]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fa24 	bl	8000d44 <__aeabi_fmul>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4619      	mov	r1, r3
 8002900:	4628      	mov	r0, r5
 8002902:	f7fe f915 	bl	8000b30 <__aeabi_fsub>
 8002906:	4603      	mov	r3, r0
 8002908:	461c      	mov	r4, r3
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff fea8 	bl	8002660 <_ZSt3cosf>
 8002910:	4603      	mov	r3, r0
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fa15 	bl	8000d44 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	4620      	mov	r0, r4
 8002920:	f7fe f908 	bl	8000b34 <__addsf3>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bdb0      	pop	{r4, r5, r7, pc}
 8002934:	3c8efa35 	.word	0x3c8efa35

08002938 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 800293e:	2351      	movs	r3, #81	; 0x51
 8002940:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8002942:	1dba      	adds	r2, r7, #6
 8002944:	2364      	movs	r3, #100	; 0x64
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	21e0      	movs	r1, #224	; 0xe0
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <request_range+0x2c>)
 800294e:	f004 fc49 	bl	80071e4 <HAL_I2C_Master_Transmit>
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <request_range+0x30>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]

}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200008b8 	.word	0x200008b8
 8002968:	20000000 	.word	0x20000000

0800296c <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <getRange+0x34>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
			write = 1;
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <getRange+0x38>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 800297e:	1d3a      	adds	r2, r7, #4
 8002980:	2364      	movs	r3, #100	; 0x64
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2302      	movs	r3, #2
 8002986:	21e1      	movs	r1, #225	; 0xe1
 8002988:	4807      	ldr	r0, [pc, #28]	; (80029a8 <getRange+0x3c>)
 800298a:	f004 fd29 	bl	80073e0 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 800298e:	793b      	ldrb	r3, [r7, #4]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	797a      	ldrb	r2, [r7, #5]
 8002994:	4313      	orrs	r3, r2



	//return -1;

}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20001a22 	.word	0x20001a22
 80029a4:	20000000 	.word	0x20000000
 80029a8:	200008b8 	.word	0x200008b8

080029ac <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

	u_counter++;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <set_ucounter+0x30>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <set_ucounter+0x30>)
 80029bc:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <set_ucounter+0x30>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d202      	bcs.n	80029d0 <set_ucounter+0x24>
		u_counter = 0;
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <set_ucounter+0x30>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
	}
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	200008b4 	.word	0x200008b4

080029e0 <get_ucounter>:

int get_ucounter(void) {
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	return u_counter;
 80029e4:	4b02      	ldr	r3, [pc, #8]	; (80029f0 <get_ucounter+0x10>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	200008b4 	.word	0x200008b4

080029f4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f00e fcdf 	bl	80113d8 <asinf>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f00e fa81 	bl	8010f34 <atanf>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f00e fceb 	bl	8011424 <atan2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f00e fce1 	bl	8011428 <sqrtf>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_UART_TxCpltCallback+0x88>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d134      	bne.n	8002aee <HAL_UART_TxCpltCallback+0x7e>
		char end_char;
		switch(tx_type) {
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_UART_TxCpltCallback+0x8c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_UART_TxCpltCallback+0x44>
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	dc2e      	bgt.n	8002aee <HAL_UART_TxCpltCallback+0x7e>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_UART_TxCpltCallback+0x2a>
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d017      	beq.n	8002ac8 <HAL_UART_TxCpltCallback+0x58>
		    sent_time = HAL_GetTick();
		    break;
		}

	}
}
 8002a98:	e029      	b.n	8002aee <HAL_UART_TxCpltCallback+0x7e>
			end_char = 0x01;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002a9e:	f107 030f 	add.w	r3, r7, #15
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4814      	ldr	r0, [pc, #80]	; (8002af8 <HAL_UART_TxCpltCallback+0x88>)
 8002aa8:	f008 f81a 	bl	800aae0 <HAL_UART_Transmit_DMA>
			tx_type = package;
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_UART_TxCpltCallback+0x8c>)
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
			break;
 8002ab2:	e01c      	b.n	8002aee <HAL_UART_TxCpltCallback+0x7e>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 8002ab4:	f240 1205 	movw	r2, #261	; 0x105
 8002ab8:	4911      	ldr	r1, [pc, #68]	; (8002b00 <HAL_UART_TxCpltCallback+0x90>)
 8002aba:	480f      	ldr	r0, [pc, #60]	; (8002af8 <HAL_UART_TxCpltCallback+0x88>)
 8002abc:	f008 f810 	bl	800aae0 <HAL_UART_Transmit_DMA>
			tx_type = stop;
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_UART_TxCpltCallback+0x8c>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
			break;
 8002ac6:	e012      	b.n	8002aee <HAL_UART_TxCpltCallback+0x7e>
			end_char = 0x04;
 8002ac8:	2304      	movs	r3, #4
 8002aca:	73fb      	strb	r3, [r7, #15]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002acc:	f107 030f 	add.w	r3, r7, #15
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4808      	ldr	r0, [pc, #32]	; (8002af8 <HAL_UART_TxCpltCallback+0x88>)
 8002ad6:	f008 f803 	bl	800aae0 <HAL_UART_Transmit_DMA>
		    tx_type = start;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_UART_TxCpltCallback+0x8c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
		    sent_time = HAL_GetTick();
 8002ae0:	f003 fbb6 	bl	8006250 <HAL_GetTick>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_UART_TxCpltCallback+0x94>)
 8002aea:	601a      	str	r2, [r3, #0]
		    break;
 8002aec:	bf00      	nop
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000a6c 	.word	0x20000a6c
 8002afc:	2000196c 	.word	0x2000196c
 8002b00:	20000d68 	.word	0x20000d68
 8002b04:	200018a0 	.word	0x200018a0

08002b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b0e:	f003 fb47 	bl	80061a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8002b12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b16:	f003 fba5 	bl	8006264 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b1a:	f000 f933 	bl	8002d84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b1e:	f000 fc7d 	bl	800341c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002b22:	f000 fc4d 	bl	80033c0 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002b26:	f000 f97d 	bl	8002e24 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002b2a:	f000 fa79 	bl	8003020 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8002b2e:	f000 f9ad 	bl	8002e8c <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8002b32:	f000 fbe7 	bl	8003304 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8002b36:	f000 facf 	bl	80030d8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002b3a:	f000 fb57 	bl	80031ec <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8002b3e:	f000 fbb3 	bl	80032a8 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8002b42:	f000 fc0f 	bl	8003364 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8002b46:	2209      	movs	r2, #9
 8002b48:	4975      	ldr	r1, [pc, #468]	; (8002d20 <main+0x218>)
 8002b4a:	4876      	ldr	r0, [pc, #472]	; (8002d24 <main+0x21c>)
 8002b4c:	f008 f834 	bl	800abb8 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, sizeof(ch_rcv_buf));
 8002b50:	2208      	movs	r2, #8
 8002b52:	4975      	ldr	r1, [pc, #468]	; (8002d28 <main+0x220>)
 8002b54:	4875      	ldr	r0, [pc, #468]	; (8002d2c <main+0x224>)
 8002b56:	f008 f82f 	bl	800abb8 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8002b5a:	f000 fce3 	bl	8003524 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8002b5e:	4874      	ldr	r0, [pc, #464]	; (8002d30 <main+0x228>)
 8002b60:	f7ff fb38 	bl	80021d4 <bmp_init>
  HMC5883L_initialize();
 8002b64:	f7fe fb10 	bl	8001188 <HMC5883L_initialize>
  MotorBaslat();
 8002b68:	f001 fe6a 	bl	8004840 <_Z11MotorBaslatv>
  GPSInit();
 8002b6c:	f001 fa2e 	bl	8003fcc <_Z7GPSInitv>
  HAL_Delay(1000);
 8002b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b74:	f003 fb76 	bl	8006264 <HAL_Delay>

  Ringbuf_init();
 8002b78:	f7ff f82e 	bl	8001bd8 <Ringbuf_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8002b7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b80:	f003 fb70 	bl	8006264 <HAL_Delay>
  //EKF.roll_bias=GyroErr(GYRO_X_ADDR)/14.375; EKF.pitch_bias=-1*GyroErr(GYRO_Y_ADDR)/14.375;
  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8002b84:	201d      	movs	r0, #29
 8002b86:	f001 fdff 	bl	8004788 <_Z7GyroErrh>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <main+0x22c>)
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	201f      	movs	r0, #31
 8002b92:	f001 fdf9 	bl	8004788 <_Z7GyroErrh>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <main+0x230>)
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	2021      	movs	r0, #33	; 0x21
 8002b9e:	f001 fdf3 	bl	8004788 <_Z7GyroErrh>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <main+0x234>)
 8002ba6:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8002ba8:	2032      	movs	r0, #50	; 0x32
 8002baa:	f001 fe1b 	bl	80047e4 <_Z6AccErrh>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fc39 	bl	8000428 <__aeabi_f2d>
 8002bb6:	a358      	add	r3, pc, #352	; (adr r3, 8002d18 <main+0x210>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fc8c 	bl	80004d8 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7fd ff5e 	bl	8000a88 <__aeabi_d2f>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <main+0x238>)
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	2034      	movs	r0, #52	; 0x34
 8002bd4:	f001 fe06 	bl	80047e4 <_Z6AccErrh>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc24 	bl	8000428 <__aeabi_f2d>
 8002be0:	a34d      	add	r3, pc, #308	; (adr r3, 8002d18 <main+0x210>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fc77 	bl	80004d8 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd ff49 	bl	8000a88 <__aeabi_d2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <main+0x23c>)
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	2036      	movs	r0, #54	; 0x36
 8002bfe:	f001 fdf1 	bl	80047e4 <_Z6AccErrh>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc0f 	bl	8000428 <__aeabi_f2d>
 8002c0a:	a343      	add	r3, pc, #268	; (adr r3, 8002d18 <main+0x210>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd fc62 	bl	80004d8 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ff34 	bl	8000a88 <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <main+0x240>)
 8002c24:	6013      	str	r3, [r2, #0]
  //AccYh = 0.96009*AccYh - 0.42592*AccXh + 0.0091315*AccZh + 0.042165;
  //AccZh = 0.0091315*AccYh - 0.072464*AccXh + 0.98549*AccZh + 0.08443;

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8002c26:	2032      	movs	r0, #50	; 0x32
 8002c28:	f001 fa86 	bl	8004138 <_Z6AccOkuh>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f834 	bl	8000c9c <__aeabi_i2f>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4a45      	ldr	r2, [pc, #276]	; (8002d4c <main+0x244>)
 8002c38:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8002c3a:	2034      	movs	r0, #52	; 0x34
 8002c3c:	f001 fa7c 	bl	8004138 <_Z6AccOkuh>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe f82a 	bl	8000c9c <__aeabi_i2f>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a41      	ldr	r2, [pc, #260]	; (8002d50 <main+0x248>)
 8002c4c:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 8002c4e:	2036      	movs	r0, #54	; 0x36
 8002c50:	f001 fa72 	bl	8004138 <_Z6AccOkuh>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe f820 	bl	8000c9c <__aeabi_i2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	; (8002d54 <main+0x24c>)
 8002c60:	6013      	str	r3, [r2, #0]

  ch[0] = 1500;
 8002c62:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <main+0x250>)
 8002c64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002c68:	601a      	str	r2, [r3, #0]
  _ch[0] = 1500;
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	; (8002d5c <main+0x254>)
 8002c6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002c70:	601a      	str	r2, [r3, #0]


	for(int i=1; i< CH_NUM; i++) {
 8002c72:	2301      	movs	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	dc0f      	bgt.n	8002c9c <main+0x194>
		ch[i] = 1000;
 8002c7c:	4a36      	ldr	r2, [pc, #216]	; (8002d58 <main+0x250>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		_ch[i] = 1000;
 8002c88:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <main+0x254>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=1; i< CH_NUM; i++) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3301      	adds	r3, #1
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	e7ec      	b.n	8002c76 <main+0x16e>
	}


	ch_init = true;
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <main+0x258>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]

	moving_median_create(&med_filter1, 3, 3);
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	2103      	movs	r1, #3
 8002ca6:	482f      	ldr	r0, [pc, #188]	; (8002d64 <main+0x25c>)
 8002ca8:	f002 fdc4 	bl	8005834 <moving_median_create>
	moving_median_create(&med_filter2, 3, 3);
 8002cac:	2203      	movs	r2, #3
 8002cae:	2103      	movs	r1, #3
 8002cb0:	482d      	ldr	r0, [pc, #180]	; (8002d68 <main+0x260>)
 8002cb2:	f002 fdbf 	bl	8005834 <moving_median_create>
	moving_median_create(&med_filter3, 3, 3);
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	2103      	movs	r1, #3
 8002cba:	482c      	ldr	r0, [pc, #176]	; (8002d6c <main+0x264>)
 8002cbc:	f002 fdba 	bl	8005834 <moving_median_create>
	moving_median_create(&med_filter4, 3, 3);
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	482a      	ldr	r0, [pc, #168]	; (8002d70 <main+0x268>)
 8002cc6:	f002 fdb5 	bl	8005834 <moving_median_create>
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
  */

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8002cca:	482a      	ldr	r0, [pc, #168]	; (8002d74 <main+0x26c>)
 8002ccc:	f006 faa8 	bl	8009220 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8002cd0:	4829      	ldr	r0, [pc, #164]	; (8002d78 <main+0x270>)
 8002cd2:	f006 fa5b 	bl	800918c <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4828      	ldr	r0, [pc, #160]	; (8002d7c <main+0x274>)
 8002cda:	f006 fb43 	bl	8009364 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002cde:	2104      	movs	r1, #4
 8002ce0:	4826      	ldr	r0, [pc, #152]	; (8002d7c <main+0x274>)
 8002ce2:	f007 fc6f 	bl	800a5c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002ce6:	2108      	movs	r1, #8
 8002ce8:	4824      	ldr	r0, [pc, #144]	; (8002d7c <main+0x274>)
 8002cea:	f007 fc6b 	bl	800a5c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002cee:	210c      	movs	r1, #12
 8002cf0:	4822      	ldr	r0, [pc, #136]	; (8002d7c <main+0x274>)
 8002cf2:	f006 fb37 	bl	8009364 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002cf6:	2108      	movs	r1, #8
 8002cf8:	481f      	ldr	r0, [pc, #124]	; (8002d78 <main+0x270>)
 8002cfa:	f006 fc2d 	bl	8009558 <HAL_TIM_IC_Start_IT>

	char end_char = 0x01;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002d02:	1cfb      	adds	r3, r7, #3
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	4808      	ldr	r0, [pc, #32]	; (8002d2c <main+0x224>)
 8002d0a:	f007 fee9 	bl	800aae0 <HAL_UART_Transmit_DMA>
	tx_type = package;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <main+0x278>)
 8002d10:	2202      	movs	r2, #2
 8002d12:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002d14:	e7fe      	b.n	8002d14 <main+0x20c>
 8002d16:	bf00      	nop
 8002d18:	8e8a71de 	.word	0x8e8a71de
 8002d1c:	3f7ff2e4 	.word	0x3f7ff2e4
 8002d20:	20001920 	.word	0x20001920
 8002d24:	20000a2c 	.word	0x20000a2c
 8002d28:	2000195c 	.word	0x2000195c
 8002d2c:	20000a6c 	.word	0x20000a6c
 8002d30:	200018c8 	.word	0x200018c8
 8002d34:	20000be8 	.word	0x20000be8
 8002d38:	20000bec 	.word	0x20000bec
 8002d3c:	20000bf0 	.word	0x20000bf0
 8002d40:	20000bf4 	.word	0x20000bf4
 8002d44:	20000bf8 	.word	0x20000bf8
 8002d48:	20000bfc 	.word	0x20000bfc
 8002d4c:	20000bc4 	.word	0x20000bc4
 8002d50:	20000bc8 	.word	0x20000bc8
 8002d54:	20000bcc 	.word	0x20000bcc
 8002d58:	20001810 	.word	0x20001810
 8002d5c:	20001868 	.word	0x20001868
 8002d60:	20001958 	.word	0x20001958
 8002d64:	200019bc 	.word	0x200019bc
 8002d68:	200019d0 	.word	0x200019d0
 8002d6c:	200019e4 	.word	0x200019e4
 8002d70:	200019f8 	.word	0x200019f8
 8002d74:	20000954 	.word	0x20000954
 8002d78:	2000099c 	.word	0x2000099c
 8002d7c:	2000090c 	.word	0x2000090c
 8002d80:	2000196c 	.word	0x2000196c

08002d84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b090      	sub	sp, #64	; 0x40
 8002d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d8a:	f107 0318 	add.w	r3, r7, #24
 8002d8e:	2228      	movs	r2, #40	; 0x28
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f010 fa54 	bl	8013240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002db4:	2301      	movs	r3, #1
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db8:	2302      	movs	r3, #2
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002dc2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc8:	f107 0318 	add.w	r3, r7, #24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 fd73 	bl	80088b8 <HAL_RCC_OscConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002de2:	f002 fce7 	bl	80057b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de6:	230f      	movs	r3, #15
 8002de8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dea:	2302      	movs	r3, #2
 8002dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	2102      	movs	r1, #2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f005 ffd9 	bl	8008db8 <HAL_RCC_ClockConfig>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002e16:	f002 fccd 	bl	80057b4 <Error_Handler>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3740      	adds	r7, #64	; 0x40
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e2a:	4a16      	ldr	r2, [pc, #88]	; (8002e84 <_ZL12MX_I2C1_Initv+0x60>)
 8002e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <_ZL12MX_I2C1_Initv+0x64>)
 8002e32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e48:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e60:	4807      	ldr	r0, [pc, #28]	; (8002e80 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e62:	f004 f87b 	bl	8006f5c <HAL_I2C_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002e76:	f002 fc9d 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200008b8 	.word	0x200008b8
 8002e84:	40005400 	.word	0x40005400
 8002e88:	00061a80 	.word	0x00061a80

08002e8c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b092      	sub	sp, #72	; 0x48
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
 8002eac:	615a      	str	r2, [r3, #20]
 8002eae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f010 f9c2 	bl	8013240 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ebc:	4b56      	ldr	r3, [pc, #344]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ebe:	4a57      	ldr	r2, [pc, #348]	; (800301c <_ZL12MX_TIM1_Initv+0x190>)
 8002ec0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002ec2:	4b55      	ldr	r3, [pc, #340]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ec4:	2247      	movs	r2, #71	; 0x47
 8002ec6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8002ece:	4b52      	ldr	r3, [pc, #328]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ed0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002ed4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed6:	4b50      	ldr	r3, [pc, #320]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002edc:	4b4e      	ldr	r3, [pc, #312]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ee8:	484b      	ldr	r0, [pc, #300]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002eea:	f006 f9eb 	bl	80092c4 <HAL_TIM_PWM_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002efe:	f002 fc59 	bl	80057b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4841      	ldr	r0, [pc, #260]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f12:	f007 fbf5 	bl	800a700 <HAL_TIMEx_MasterConfigSynchronization>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002f26:	f002 fc45 	bl	80057b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f2a:	2360      	movs	r3, #96	; 0x60
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f36:	2300      	movs	r3, #0
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4832      	ldr	r0, [pc, #200]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f50:	f006 fda4 	bl	8009a9c <HAL_TIM_PWM_ConfigChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002f64:	f002 fc26 	bl	80057b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4829      	ldr	r0, [pc, #164]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f72:	f006 fd93 	bl	8009a9c <HAL_TIM_PWM_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8002f86:	f002 fc15 	bl	80057b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8e:	2208      	movs	r2, #8
 8002f90:	4619      	mov	r1, r3
 8002f92:	4821      	ldr	r0, [pc, #132]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002f94:	f006 fd82 	bl	8009a9c <HAL_TIM_PWM_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8002fa8:	f002 fc04 	bl	80057b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4818      	ldr	r0, [pc, #96]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002fb6:	f006 fd71 	bl	8009a9c <HAL_TIM_PWM_ConfigChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8002fca:	f002 fbf3 	bl	80057b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4809      	ldr	r0, [pc, #36]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ff2:	f007 fbe3 	bl	800a7bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8003006:	f002 fbd5 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800300a:	4803      	ldr	r0, [pc, #12]	; (8003018 <_ZL12MX_TIM1_Initv+0x18c>)
 800300c:	f002 fd4c 	bl	8005aa8 <HAL_TIM_MspPostInit>

}
 8003010:	bf00      	nop
 8003012:	3748      	adds	r7, #72	; 0x48
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000090c 	.word	0x2000090c
 800301c:	40012c00 	.word	0x40012c00

08003020 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003034:	463b      	mov	r3, r7
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800303e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8003046:	2247      	movs	r2, #71	; 0x47
 8003048:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003064:	481b      	ldr	r0, [pc, #108]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8003066:	f006 f841 	bl	80090ec <HAL_TIM_Base_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800307a:	f002 fb9b 	bl	80057b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003082:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003084:	f107 0308 	add.w	r3, r7, #8
 8003088:	4619      	mov	r1, r3
 800308a:	4812      	ldr	r0, [pc, #72]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800308c:	f006 fdc4 	bl	8009c18 <HAL_TIM_ConfigClockSource>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80030a0:	f002 fb88 	bl	80057b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a4:	2300      	movs	r3, #0
 80030a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030ac:	463b      	mov	r3, r7
 80030ae:	4619      	mov	r1, r3
 80030b0:	4808      	ldr	r0, [pc, #32]	; (80030d4 <_ZL12MX_TIM2_Initv+0xb4>)
 80030b2:	f007 fb25 	bl	800a700 <HAL_TIMEx_MasterConfigSynchronization>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80030c6:	f002 fb75 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000954 	.word	0x20000954

080030d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030f6:	463b      	mov	r3, r7
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8003104:	4a38      	ldr	r2, [pc, #224]	; (80031e8 <_ZL12MX_TIM3_Initv+0x110>)
 8003106:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800310a:	2247      	movs	r2, #71	; 0x47
 800310c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310e:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003114:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8003116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800311a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003128:	482e      	ldr	r0, [pc, #184]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800312a:	f005 ffdf 	bl	80090ec <HAL_TIM_Base_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 800313e:	f002 fb39 	bl	80057b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003146:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003148:	f107 0318 	add.w	r3, r7, #24
 800314c:	4619      	mov	r1, r3
 800314e:	4825      	ldr	r0, [pc, #148]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8003150:	f006 fd62 	bl	8009c18 <HAL_TIM_ConfigClockSource>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf14      	ite	ne
 800315a:	2301      	movne	r3, #1
 800315c:	2300      	moveq	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8003164:	f002 fb26 	bl	80057b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003168:	481e      	ldr	r0, [pc, #120]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800316a:	f006 f99d 	bl	80094a8 <HAL_TIM_IC_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800317e:	f002 fb19 	bl	80057b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	4619      	mov	r1, r3
 8003190:	4814      	ldr	r0, [pc, #80]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8003192:	f007 fab5 	bl	800a700 <HAL_TIMEx_MasterConfigSynchronization>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80031a6:	f002 fb05 	bl	80057b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031ae:	2301      	movs	r3, #1
 80031b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80031ba:	463b      	mov	r3, r7
 80031bc:	2208      	movs	r2, #8
 80031be:	4619      	mov	r1, r3
 80031c0:	4808      	ldr	r0, [pc, #32]	; (80031e4 <_ZL12MX_TIM3_Initv+0x10c>)
 80031c2:	f006 fbd7 	bl	8009974 <HAL_TIM_IC_ConfigChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80031d6:	f002 faed 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031da:	bf00      	nop
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000099c 	.word	0x2000099c
 80031e8:	40000400 	.word	0x40000400

080031ec <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003200:	463b      	mov	r3, r7
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800320a:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <_ZL12MX_TIM4_Initv+0xb8>)
 800320c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003210:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003214:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800321e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003222:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003230:	481b      	ldr	r0, [pc, #108]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003232:	f005 ff5b 	bl	80090ec <HAL_TIM_Base_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8003246:	f002 fab5 	bl	80057b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800324a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800324e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003250:	f107 0308 	add.w	r3, r7, #8
 8003254:	4619      	mov	r1, r3
 8003256:	4812      	ldr	r0, [pc, #72]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8003258:	f006 fcde 	bl	8009c18 <HAL_TIM_ConfigClockSource>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 800326c:	f002 faa2 	bl	80057b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003278:	463b      	mov	r3, r7
 800327a:	4619      	mov	r1, r3
 800327c:	4808      	ldr	r0, [pc, #32]	; (80032a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800327e:	f007 fa3f 	bl	800a700 <HAL_TIMEx_MasterConfigSynchronization>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8003292:	f002 fa8f 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200009e4 	.word	0x200009e4
 80032a4:	40000800 	.word	0x40000800

080032a8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032ae:	4a14      	ldr	r2, [pc, #80]	; (8003300 <_ZL19MX_USART1_UART_Initv+0x58>)
 80032b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032ce:	220c      	movs	r2, #12
 80032d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032da:	2200      	movs	r2, #0
 80032dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032de:	4807      	ldr	r0, [pc, #28]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80032e0:	f007 faf3 	bl	800a8ca <HAL_UART_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80032f4:	f002 fa5e 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000a2c 	.word	0x20000a2c
 8003300:	40013800 	.word	0x40013800

08003304 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 800330a:	4a14      	ldr	r2, [pc, #80]	; (800335c <_ZL19MX_USART2_UART_Initv+0x58>)
 800330c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8003312:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800331a:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003328:	220c      	movs	r2, #12
 800332a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003334:	2200      	movs	r2, #0
 8003336:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003338:	4807      	ldr	r0, [pc, #28]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x54>)
 800333a:	f007 fac6 	bl	800a8ca <HAL_UART_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 800334e:	f002 fa31 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000a6c 	.word	0x20000a6c
 800335c:	40004400 	.word	0x40004400
 8003360:	000f4240 	.word	0x000f4240

08003364 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800336a:	4a14      	ldr	r2, [pc, #80]	; (80033bc <_ZL19MX_USART3_UART_Initv+0x58>)
 800336c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003374:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800338a:	220c      	movs	r2, #12
 800338c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003396:	2200      	movs	r2, #0
 8003398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800339a:	4807      	ldr	r0, [pc, #28]	; (80033b8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800339c:	f007 fa95 	bl	800a8ca <HAL_UART_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80033b0:	f002 fa00 	bl	80057b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000aac 	.word	0x20000aac
 80033bc:	40004800 	.word	0x40004800

080033c0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <_ZL11MX_DMA_Initv+0x58>)
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4a13      	ldr	r2, [pc, #76]	; (8003418 <_ZL11MX_DMA_Initv+0x58>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6153      	str	r3, [r2, #20]
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <_ZL11MX_DMA_Initv+0x58>)
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	200f      	movs	r0, #15
 80033e4:	f003 f85d 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80033e8:	200f      	movs	r0, #15
 80033ea:	f003 f876 	bl	80064da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	2010      	movs	r0, #16
 80033f4:	f003 f855 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80033f8:	2010      	movs	r0, #16
 80033fa:	f003 f86e 	bl	80064da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	2011      	movs	r0, #17
 8003404:	f003 f84d 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003408:	2011      	movs	r0, #17
 800340a:	f003 f866 	bl	80064da <HAL_NVIC_EnableIRQ>

}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000

0800341c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003430:	4b38      	ldr	r3, [pc, #224]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	4a37      	ldr	r2, [pc, #220]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 8003436:	f043 0310 	orr.w	r3, r3, #16
 800343a:	6193      	str	r3, [r2, #24]
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4a31      	ldr	r2, [pc, #196]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 800344e:	f043 0320 	orr.w	r3, r3, #32
 8003452:	6193      	str	r3, [r2, #24]
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 8003466:	f043 0304 	orr.w	r3, r3, #4
 800346a:	6193      	str	r3, [r2, #24]
 800346c:	4b29      	ldr	r3, [pc, #164]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 800347e:	f043 0308 	orr.w	r3, r3, #8
 8003482:	6193      	str	r3, [r2, #24]
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <_ZL12MX_GPIO_Initv+0xf8>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003490:	2200      	movs	r2, #0
 8003492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003496:	4820      	ldr	r0, [pc, #128]	; (8003518 <_ZL12MX_GPIO_Initv+0xfc>)
 8003498:	f003 fd48 	bl	8006f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800349c:	2200      	movs	r2, #0
 800349e:	f248 0130 	movw	r1, #32816	; 0x8030
 80034a2:	481e      	ldr	r0, [pc, #120]	; (800351c <_ZL12MX_GPIO_Initv+0x100>)
 80034a4:	f003 fd42 	bl	8006f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80034a8:	2200      	movs	r2, #0
 80034aa:	2102      	movs	r1, #2
 80034ac:	481c      	ldr	r0, [pc, #112]	; (8003520 <_ZL12MX_GPIO_Initv+0x104>)
 80034ae:	f003 fd3d 	bl	8006f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80034b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2302      	movs	r3, #2
 80034c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	4619      	mov	r1, r3
 80034ca:	4813      	ldr	r0, [pc, #76]	; (8003518 <_ZL12MX_GPIO_Initv+0xfc>)
 80034cc:	f003 faee 	bl	8006aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 80034d0:	f248 0330 	movw	r3, #32816	; 0x8030
 80034d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2302      	movs	r3, #2
 80034e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e2:	f107 0310 	add.w	r3, r7, #16
 80034e6:	4619      	mov	r1, r3
 80034e8:	480c      	ldr	r0, [pc, #48]	; (800351c <_ZL12MX_GPIO_Initv+0x100>)
 80034ea:	f003 fadf 	bl	8006aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034ee:	2302      	movs	r3, #2
 80034f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 0310 	add.w	r3, r7, #16
 8003502:	4619      	mov	r1, r3
 8003504:	4806      	ldr	r0, [pc, #24]	; (8003520 <_ZL12MX_GPIO_Initv+0x104>)
 8003506:	f003 fad1 	bl	8006aac <HAL_GPIO_Init>

}
 800350a:	bf00      	nop
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	40011000 	.word	0x40011000
 800351c:	40010800 	.word	0x40010800
 8003520:	40010c00 	.word	0x40010c00

08003524 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800352a:	2300      	movs	r3, #0
 800352c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800352e:	2305      	movs	r3, #5
 8003530:	9302      	str	r3, [sp, #8]
 8003532:	2301      	movs	r3, #1
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2301      	movs	r3, #1
 800353c:	223e      	movs	r2, #62	; 0x3e
 800353e:	21d0      	movs	r1, #208	; 0xd0
 8003540:	4826      	ldr	r0, [pc, #152]	; (80035dc <_Z14MPU6050_Baslatv+0xb8>)
 8003542:	f004 f9ad 	bl	80078a0 <HAL_I2C_Mem_Write>
	config = 0x18;
 8003546:	2318      	movs	r3, #24
 8003548:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 800354a:	2305      	movs	r3, #5
 800354c:	9302      	str	r3, [sp, #8]
 800354e:	2301      	movs	r3, #1
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2301      	movs	r3, #1
 8003558:	2216      	movs	r2, #22
 800355a:	21d0      	movs	r1, #208	; 0xd0
 800355c:	481f      	ldr	r0, [pc, #124]	; (80035dc <_Z14MPU6050_Baslatv+0xb8>)
 800355e:	f004 f99f 	bl	80078a0 <HAL_I2C_Mem_Write>
	config = 0x00;
 8003562:	2300      	movs	r3, #0
 8003564:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8003566:	2305      	movs	r3, #5
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	2301      	movs	r3, #1
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2301      	movs	r3, #1
 8003574:	222d      	movs	r2, #45	; 0x2d
 8003576:	21a6      	movs	r1, #166	; 0xa6
 8003578:	4818      	ldr	r0, [pc, #96]	; (80035dc <_Z14MPU6050_Baslatv+0xb8>)
 800357a:	f004 f991 	bl	80078a0 <HAL_I2C_Mem_Write>
	config = 0x08;
 800357e:	2308      	movs	r3, #8
 8003580:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8003582:	2305      	movs	r3, #5
 8003584:	9302      	str	r3, [sp, #8]
 8003586:	2301      	movs	r3, #1
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	1dfb      	adds	r3, r7, #7
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2301      	movs	r3, #1
 8003590:	222d      	movs	r2, #45	; 0x2d
 8003592:	21a6      	movs	r1, #166	; 0xa6
 8003594:	4811      	ldr	r0, [pc, #68]	; (80035dc <_Z14MPU6050_Baslatv+0xb8>)
 8003596:	f004 f983 	bl	80078a0 <HAL_I2C_Mem_Write>
	config = 0x0D;
 800359a:	230d      	movs	r3, #13
 800359c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800359e:	2305      	movs	r3, #5
 80035a0:	9302      	str	r3, [sp, #8]
 80035a2:	2301      	movs	r3, #1
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	222c      	movs	r2, #44	; 0x2c
 80035ae:	21a6      	movs	r1, #166	; 0xa6
 80035b0:	480a      	ldr	r0, [pc, #40]	; (80035dc <_Z14MPU6050_Baslatv+0xb8>)
 80035b2:	f004 f975 	bl	80078a0 <HAL_I2C_Mem_Write>
	config = 0x01;
 80035b6:	2301      	movs	r3, #1
 80035b8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80035ba:	2305      	movs	r3, #5
 80035bc:	9302      	str	r3, [sp, #8]
 80035be:	2301      	movs	r3, #1
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2301      	movs	r3, #1
 80035c8:	2231      	movs	r2, #49	; 0x31
 80035ca:	21a6      	movs	r1, #166	; 0xa6
 80035cc:	4803      	ldr	r0, [pc, #12]	; (80035dc <_Z14MPU6050_Baslatv+0xb8>)
 80035ce:	f004 f967 	bl	80078a0 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200008b8 	.word	0x200008b8

080035e0 <_Z8MagCalibsss>:
	}
}

#endif

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
 80035ea:	460b      	mov	r3, r1
 80035ec:	80bb      	strh	r3, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 80035f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ff04 	bl	8000404 <__aeabi_i2d>
 80035fc:	a366      	add	r3, pc, #408	; (adr r3, 8003798 <_Z8MagCalibsss+0x1b8>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f7fc ff69 	bl	80004d8 <__aeabi_dmul>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4614      	mov	r4, r2
 800360c:	461d      	mov	r5, r3
 800360e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc fef6 	bl	8000404 <__aeabi_i2d>
 8003618:	a361      	add	r3, pc, #388	; (adr r3, 80037a0 <_Z8MagCalibsss+0x1c0>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f7fc ff5b 	bl	80004d8 <__aeabi_dmul>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4620      	mov	r0, r4
 8003628:	4629      	mov	r1, r5
 800362a:	f7fc fd9f 	bl	800016c <__adddf3>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4614      	mov	r4, r2
 8003634:	461d      	mov	r5, r3
 8003636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc fee2 	bl	8000404 <__aeabi_i2d>
 8003640:	a359      	add	r3, pc, #356	; (adr r3, 80037a8 <_Z8MagCalibsss+0x1c8>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f7fc ff47 	bl	80004d8 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4620      	mov	r0, r4
 8003650:	4629      	mov	r1, r5
 8003652:	f7fc fd89 	bl	8000168 <__aeabi_dsub>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <_Z8MagCalibsss+0x1f8>)
 8003664:	f7fc fd82 	bl	800016c <__adddf3>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7fd f9e2 	bl	8000a38 <__aeabi_d2iz>
 8003674:	4603      	mov	r3, r0
 8003676:	b21a      	sxth	r2, r3
 8003678:	4b58      	ldr	r3, [pc, #352]	; (80037dc <_Z8MagCalibsss+0x1fc>)
 800367a:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 800367c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc febf 	bl	8000404 <__aeabi_i2d>
 8003686:	a346      	add	r3, pc, #280	; (adr r3, 80037a0 <_Z8MagCalibsss+0x1c0>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc ff24 	bl	80004d8 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4614      	mov	r4, r2
 8003696:	461d      	mov	r5, r3
 8003698:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc feb1 	bl	8000404 <__aeabi_i2d>
 80036a2:	a343      	add	r3, pc, #268	; (adr r3, 80037b0 <_Z8MagCalibsss+0x1d0>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fc ff16 	bl	80004d8 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fc fd5a 	bl	800016c <__adddf3>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4614      	mov	r4, r2
 80036be:	461d      	mov	r5, r3
 80036c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc fe9d 	bl	8000404 <__aeabi_i2d>
 80036ca:	a33b      	add	r3, pc, #236	; (adr r3, 80037b8 <_Z8MagCalibsss+0x1d8>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc ff02 	bl	80004d8 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4620      	mov	r0, r4
 80036da:	4629      	mov	r1, r5
 80036dc:	f7fc fd46 	bl	800016c <__adddf3>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	a335      	add	r3, pc, #212	; (adr r3, 80037c0 <_Z8MagCalibsss+0x1e0>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc fd3d 	bl	800016c <__adddf3>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f7fd f99d 	bl	8000a38 <__aeabi_d2iz>
 80036fe:	4603      	mov	r3, r0
 8003700:	b21a      	sxth	r2, r3
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <_Z8MagCalibsss+0x200>)
 8003704:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 8003706:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc fe7a 	bl	8000404 <__aeabi_i2d>
 8003710:	a329      	add	r3, pc, #164	; (adr r3, 80037b8 <_Z8MagCalibsss+0x1d8>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f7fc fedf 	bl	80004d8 <__aeabi_dmul>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4614      	mov	r4, r2
 8003720:	461d      	mov	r5, r3
 8003722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fc fe6c 	bl	8000404 <__aeabi_i2d>
 800372c:	a31e      	add	r3, pc, #120	; (adr r3, 80037a8 <_Z8MagCalibsss+0x1c8>)
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f7fc fed1 	bl	80004d8 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4620      	mov	r0, r4
 800373c:	4629      	mov	r1, r5
 800373e:	f7fc fd13 	bl	8000168 <__aeabi_dsub>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4614      	mov	r4, r2
 8003748:	461d      	mov	r5, r3
 800374a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fc fe58 	bl	8000404 <__aeabi_i2d>
 8003754:	a31c      	add	r3, pc, #112	; (adr r3, 80037c8 <_Z8MagCalibsss+0x1e8>)
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f7fc febd 	bl	80004d8 <__aeabi_dmul>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4620      	mov	r0, r4
 8003764:	4629      	mov	r1, r5
 8003766:	f7fc fd01 	bl	800016c <__adddf3>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	a317      	add	r3, pc, #92	; (adr r3, 80037d0 <_Z8MagCalibsss+0x1f0>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fc fcf6 	bl	8000168 <__aeabi_dsub>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f7fd f958 	bl	8000a38 <__aeabi_d2iz>
 8003788:	4603      	mov	r3, r0
 800378a:	b21a      	sxth	r2, r3
 800378c:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <_Z8MagCalibsss+0x204>)
 800378e:	801a      	strh	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bdb0      	pop	{r4, r5, r7, pc}
 8003798:	4189374c 	.word	0x4189374c
 800379c:	3feee560 	.word	0x3feee560
 80037a0:	3dee7818 	.word	0x3dee7818
 80037a4:	3f8c725c 	.word	0x3f8c725c
 80037a8:	f861a60d 	.word	0xf861a60d
 80037ac:	3f929888 	.word	0x3f929888
 80037b0:	3c361134 	.word	0x3c361134
 80037b4:	3fee52bd 	.word	0x3fee52bd
 80037b8:	a6ce3583 	.word	0xa6ce3583
 80037bc:	3f7b8023 	.word	0x3f7b8023
 80037c0:	33333333 	.word	0x33333333
 80037c4:	4059d333 	.word	0x4059d333
 80037c8:	24dd2f1b 	.word	0x24dd2f1b
 80037cc:	3ff18106 	.word	0x3ff18106
 80037d0:	e353f7cf 	.word	0xe353f7cf
 80037d4:	40211ba5 	.word	0x40211ba5
 80037d8:	40300000 	.word	0x40300000
 80037dc:	20001952 	.word	0x20001952
 80037e0:	20001954 	.word	0x20001954
 80037e4:	20001956 	.word	0x20001956

080037e8 <_Z9checkModei>:

void checkMode(int mod_ch) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80037f6:	da1f      	bge.n	8003838 <_Z9checkModei+0x50>

		  controller.mod = STABILIZE;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <_Z9checkModei+0x88>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  controller.z0 = EKF.alt_gnd;
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <_Z9checkModei+0x8c>)
 8003802:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003806:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <_Z9checkModei+0x88>)
 8003808:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
		  controller.x0 = EKF.x;
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <_Z9checkModei+0x8c>)
 800380e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003812:	4a17      	ldr	r2, [pc, #92]	; (8003870 <_Z9checkModei+0x88>)
 8003814:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
		  controller.y0 = EKF.y;
 8003818:	4b16      	ldr	r3, [pc, #88]	; (8003874 <_Z9checkModei+0x8c>)
 800381a:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800381e:	4a14      	ldr	r2, [pc, #80]	; (8003870 <_Z9checkModei+0x88>)
 8003820:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
		  controller.p_alt.reset();
 8003824:	4814      	ldr	r0, [pc, #80]	; (8003878 <_Z9checkModei+0x90>)
 8003826:	f00d fa1f 	bl	8010c68 <_ZN3PID5resetEv>
		  controller.p_velx.reset();
 800382a:	4814      	ldr	r0, [pc, #80]	; (800387c <_Z9checkModei+0x94>)
 800382c:	f00d fa1c 	bl	8010c68 <_ZN3PID5resetEv>
		  controller.p_vely.reset();
 8003830:	4813      	ldr	r0, [pc, #76]	; (8003880 <_Z9checkModei+0x98>)
 8003832:	f00d fa19 	bl	8010c68 <_ZN3PID5resetEv>

	  else {
		  //controller.mod = LOITER;
		  controller.mod = STABILIZE;
	  }
}
 8003836:	e016      	b.n	8003866 <_Z9checkModei+0x7e>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800383e:	db0e      	blt.n	800385e <_Z9checkModei+0x76>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003846:	4293      	cmp	r3, r2
 8003848:	dc09      	bgt.n	800385e <_Z9checkModei+0x76>
		  controller.mod = STABILIZE;
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <_Z9checkModei+0x88>)
 800384c:	2200      	movs	r2, #0
 800384e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  z0 = controller.p_alt.zi;
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <_Z9checkModei+0x88>)
 8003854:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8003858:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <_Z9checkModei+0x9c>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	e003      	b.n	8003866 <_Z9checkModei+0x7e>
		  controller.mod = STABILIZE;
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <_Z9checkModei+0x88>)
 8003860:	2200      	movs	r2, #0
 8003862:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200011b0 	.word	0x200011b0
 8003874:	20000e70 	.word	0x20000e70
 8003878:	200015b0 	.word	0x200015b0
 800387c:	20001668 	.word	0x20001668
 8003880:	20001720 	.word	0x20001720
 8003884:	20001904 	.word	0x20001904

08003888 <_Z9SwitchMagv>:

void SwitchMag() {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0

	char state;

	// determine which state is the switch on
	if		(ch[MAGNET_CH-1] > 750  && ch[MAGNET_CH-1] < 1250) state = 0;
 800388e:	4b2f      	ldr	r3, [pc, #188]	; (800394c <_Z9SwitchMagv+0xc4>)
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f240 22ee 	movw	r2, #750	; 0x2ee
 8003896:	4293      	cmp	r3, r2
 8003898:	dd08      	ble.n	80038ac <_Z9SwitchMagv+0x24>
 800389a:	4b2c      	ldr	r3, [pc, #176]	; (800394c <_Z9SwitchMagv+0xc4>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80038a2:	4293      	cmp	r3, r2
 80038a4:	dc02      	bgt.n	80038ac <_Z9SwitchMagv+0x24>
 80038a6:	2300      	movs	r3, #0
 80038a8:	71fb      	strb	r3, [r7, #7]
 80038aa:	e01f      	b.n	80038ec <_Z9SwitchMagv+0x64>
	else if (ch[MAGNET_CH-1] > 1250 && ch[MAGNET_CH-1] < 1750) state = 1;
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <_Z9SwitchMagv+0xc4>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80038b4:	4293      	cmp	r3, r2
 80038b6:	dd08      	ble.n	80038ca <_Z9SwitchMagv+0x42>
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <_Z9SwitchMagv+0xc4>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80038c0:	4293      	cmp	r3, r2
 80038c2:	dc02      	bgt.n	80038ca <_Z9SwitchMagv+0x42>
 80038c4:	2301      	movs	r3, #1
 80038c6:	71fb      	strb	r3, [r7, #7]
 80038c8:	e010      	b.n	80038ec <_Z9SwitchMagv+0x64>
	else if (ch[MAGNET_CH-1] > 1750 && ch[MAGNET_CH-1] < 2250) state = 2;
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <_Z9SwitchMagv+0xc4>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80038d2:	4293      	cmp	r3, r2
 80038d4:	dd08      	ble.n	80038e8 <_Z9SwitchMagv+0x60>
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <_Z9SwitchMagv+0xc4>)
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80038de:	4293      	cmp	r3, r2
 80038e0:	dc02      	bgt.n	80038e8 <_Z9SwitchMagv+0x60>
 80038e2:	2302      	movs	r3, #2
 80038e4:	71fb      	strb	r3, [r7, #7]
 80038e6:	e001      	b.n	80038ec <_Z9SwitchMagv+0x64>
	else state = -1;
 80038e8:	23ff      	movs	r3, #255	; 0xff
 80038ea:	71fb      	strb	r3, [r7, #7]
	// change magnet state based on state of switch
	// state = 0 -> off
	// state = 1 -> attach
	// state = 2 -> separate

	switch(state) {
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d017      	beq.n	8003922 <_Z9SwitchMagv+0x9a>
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	dc20      	bgt.n	8003938 <_Z9SwitchMagv+0xb0>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <_Z9SwitchMagv+0x78>
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d006      	beq.n	800390c <_Z9SwitchMagv+0x84>
 80038fe:	e01b      	b.n	8003938 <_Z9SwitchMagv+0xb0>
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003900:	2200      	movs	r2, #0
 8003902:	2130      	movs	r1, #48	; 0x30
 8003904:	4812      	ldr	r0, [pc, #72]	; (8003950 <_Z9SwitchMagv+0xc8>)
 8003906:	f003 fb11 	bl	8006f2c <HAL_GPIO_WritePin>
		break;
 800390a:	e01b      	b.n	8003944 <_Z9SwitchMagv+0xbc>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800390c:	2201      	movs	r2, #1
 800390e:	2110      	movs	r1, #16
 8003910:	480f      	ldr	r0, [pc, #60]	; (8003950 <_Z9SwitchMagv+0xc8>)
 8003912:	f003 fb0b 	bl	8006f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003916:	2200      	movs	r2, #0
 8003918:	2120      	movs	r1, #32
 800391a:	480d      	ldr	r0, [pc, #52]	; (8003950 <_Z9SwitchMagv+0xc8>)
 800391c:	f003 fb06 	bl	8006f2c <HAL_GPIO_WritePin>
		break;
 8003920:	e010      	b.n	8003944 <_Z9SwitchMagv+0xbc>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003922:	2200      	movs	r2, #0
 8003924:	2110      	movs	r1, #16
 8003926:	480a      	ldr	r0, [pc, #40]	; (8003950 <_Z9SwitchMagv+0xc8>)
 8003928:	f003 fb00 	bl	8006f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800392c:	2201      	movs	r2, #1
 800392e:	2120      	movs	r1, #32
 8003930:	4807      	ldr	r0, [pc, #28]	; (8003950 <_Z9SwitchMagv+0xc8>)
 8003932:	f003 fafb 	bl	8006f2c <HAL_GPIO_WritePin>
		break;
 8003936:	e005      	b.n	8003944 <_Z9SwitchMagv+0xbc>
	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003938:	2200      	movs	r2, #0
 800393a:	2130      	movs	r1, #48	; 0x30
 800393c:	4804      	ldr	r0, [pc, #16]	; (8003950 <_Z9SwitchMagv+0xc8>)
 800393e:	f003 faf5 	bl	8006f2c <HAL_GPIO_WritePin>
		break;
 8003942:	bf00      	nop
	}
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20001810 	.word	0x20001810
 8003950:	40010800 	.word	0x40010800

08003954 <_Z10CheckSwarmv>:

void CheckSwarm() {
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <_Z10CheckSwarmv+0x68>)
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003960:	4293      	cmp	r3, r2
 8003962:	dd14      	ble.n	800398e <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <_Z10CheckSwarmv+0x6c>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d024      	beq.n	80039b6 <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <_Z10CheckSwarmv+0x6c>)
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <_Z10CheckSwarmv+0x70>)
 8003974:	2201      	movs	r2, #1
 8003976:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			controller.pid_roll.reset();
 800397a:	4813      	ldr	r0, [pc, #76]	; (80039c8 <_Z10CheckSwarmv+0x74>)
 800397c:	f00d f974 	bl	8010c68 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 8003980:	4812      	ldr	r0, [pc, #72]	; (80039cc <_Z10CheckSwarmv+0x78>)
 8003982:	f00d f971 	bl	8010c68 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 8003986:	4812      	ldr	r0, [pc, #72]	; (80039d0 <_Z10CheckSwarmv+0x7c>)
 8003988:	f00d f96e 	bl	8010c68 <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 800398c:	e013      	b.n	80039b6 <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <_Z10CheckSwarmv+0x6c>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <_Z10CheckSwarmv+0x70>)
 8003998:	2200      	movs	r2, #0
 800399a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			swarm_mode = NORMAL;
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_Z10CheckSwarmv+0x6c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 80039a4:	4808      	ldr	r0, [pc, #32]	; (80039c8 <_Z10CheckSwarmv+0x74>)
 80039a6:	f00d f95f 	bl	8010c68 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80039aa:	4808      	ldr	r0, [pc, #32]	; (80039cc <_Z10CheckSwarmv+0x78>)
 80039ac:	f00d f95c 	bl	8010c68 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80039b0:	4807      	ldr	r0, [pc, #28]	; (80039d0 <_Z10CheckSwarmv+0x7c>)
 80039b2:	f00d f959 	bl	8010c68 <_ZN3PID5resetEv>
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20001810 	.word	0x20001810
 80039c0:	2000196d 	.word	0x2000196d
 80039c4:	200011b0 	.word	0x200011b0
 80039c8:	20001388 	.word	0x20001388
 80039cc:	20001440 	.word	0x20001440
 80039d0:	200014f8 	.word	0x200014f8

080039d4 <_Z13CheckFailsafev>:

void CheckFailsafe() {
 80039d4:	b598      	push	{r3, r4, r7, lr}
 80039d6:	af00      	add	r7, sp, #0

	if(armed) {
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <_Z13CheckFailsafev+0xa4>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d048      	beq.n	8003a72 <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <_Z13CheckFailsafev+0xa8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80039e8:	4293      	cmp	r3, r2
 80039ea:	dc0d      	bgt.n	8003a08 <_Z13CheckFailsafev+0x34>
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <_Z13CheckFailsafev+0xac>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 80039fa:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <_Z13CheckFailsafev+0xac>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 8003a00:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <_Z13CheckFailsafev+0xb0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <_Z13CheckFailsafev+0xb4>)
 8003a06:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 8003a08:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <_Z13CheckFailsafev+0xb8>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a10:	d226      	bcs.n	8003a60 <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <_Z13CheckFailsafev+0xac>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02b      	beq.n	8003a72 <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <_Z13CheckFailsafev+0xb0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <_Z13CheckFailsafev+0xb4>)
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd f883 	bl	8000b30 <__aeabi_fsub>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe ffe1 	bl	80029f4 <_ZSt3absf>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2201      	movs	r2, #1
 8003a36:	4614      	mov	r4, r2
 8003a38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd fb1f 	bl	8001080 <__aeabi_fcmplt>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <_Z13CheckFailsafev+0x78>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	461c      	mov	r4, r3
 8003a4c:	b2e3      	uxtb	r3, r4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00f      	beq.n	8003a72 <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <_Z13CheckFailsafev+0xb8>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <_Z13CheckFailsafev+0xb8>)
 8003a5c:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 8003a5e:	e008      	b.n	8003a72 <_Z13CheckFailsafev+0x9e>
			armed = false;
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_Z13CheckFailsafev+0xa4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <_Z13CheckFailsafev+0xac>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <_Z13CheckFailsafev+0xb8>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	801a      	strh	r2, [r3, #0]
}
 8003a72:	bf00      	nop
 8003a74:	bd98      	pop	{r3, r4, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200018a5 	.word	0x200018a5
 8003a7c:	20001810 	.word	0x20001810
 8003a80:	20001966 	.word	0x20001966
 8003a84:	20000bd0 	.word	0x20000bd0
 8003a88:	20001968 	.word	0x20001968
 8003a8c:	20001964 	.word	0x20001964

08003a90 <_Z9Check_Armv>:


void Check_Arm() {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	if(!armed) {
 8003a94:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <_Z9Check_Armv+0xa8>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	f083 0301 	eor.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d047      	beq.n	8003b32 <_Z9Check_Armv+0xa2>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <_Z9Check_Armv+0xac>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f240 424b 	movw	r2, #1099	; 0x44b
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	dc3d      	bgt.n	8003b2a <_Z9Check_Armv+0x9a>
 8003aae:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <_Z9Check_Armv+0xac>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	dd37      	ble.n	8003b2a <_Z9Check_Armv+0x9a>
				if(!arm_start){
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <_Z9Check_Armv+0xb0>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8003ac8:	f002 fbc2 	bl	8006250 <HAL_GetTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <_Z9Check_Armv+0xb4>)
 8003ad2:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <_Z9Check_Armv+0xb0>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8003ada:	f002 fbb9 	bl	8006250 <HAL_GetTick>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <_Z9Check_Armv+0xb4>)
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003aea:	4293      	cmp	r3, r2
 8003aec:	bf8c      	ite	hi
 8003aee:	2301      	movhi	r3, #1
 8003af0:	2300      	movls	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01c      	beq.n	8003b32 <_Z9Check_Armv+0xa2>
					controller.pid_roll.reset();
 8003af8:	4813      	ldr	r0, [pc, #76]	; (8003b48 <_Z9Check_Armv+0xb8>)
 8003afa:	f00d f8b5 	bl	8010c68 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8003afe:	4813      	ldr	r0, [pc, #76]	; (8003b4c <_Z9Check_Armv+0xbc>)
 8003b00:	f00d f8b2 	bl	8010c68 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8003b04:	4812      	ldr	r0, [pc, #72]	; (8003b50 <_Z9Check_Armv+0xc0>)
 8003b06:	f00d f8af 	bl	8010c68 <_ZN3PID5resetEv>
					armed = true;
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <_Z9Check_Armv+0xa8>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <_Z9Check_Armv+0xc4>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
					SetHome2();
 8003b18:	f000 ff1e 	bl	8004958 <_Z8SetHome2v>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b22:	480d      	ldr	r0, [pc, #52]	; (8003b58 <_Z9Check_Armv+0xc8>)
 8003b24:	f003 fa02 	bl	8006f2c <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8003b28:	e003      	b.n	8003b32 <_Z9Check_Armv+0xa2>
				}

		}

		else {
			arm_start = false;
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <_Z9Check_Armv+0xb0>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8003b30:	e7ff      	b.n	8003b32 <_Z9Check_Armv+0xa2>
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200018a5 	.word	0x200018a5
 8003b3c:	20001810 	.word	0x20001810
 8003b40:	200018a4 	.word	0x200018a4
 8003b44:	20001898 	.word	0x20001898
 8003b48:	20001388 	.word	0x20001388
 8003b4c:	20001440 	.word	0x20001440
 8003b50:	200014f8 	.word	0x200014f8
 8003b54:	20000e70 	.word	0x20000e70
 8003b58:	40010800 	.word	0x40010800

08003b5c <_Z12Check_Disarmv>:

void Check_Disarm() {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	if(armed) {
 8003b60:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <_Z12Check_Disarmv+0x8c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d03c      	beq.n	8003be2 <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8003b68:	4b20      	ldr	r3, [pc, #128]	; (8003bec <_Z12Check_Disarmv+0x90>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f240 424b 	movw	r2, #1099	; 0x44b
 8003b70:	4293      	cmp	r3, r2
 8003b72:	dc32      	bgt.n	8003bda <_Z12Check_Disarmv+0x7e>
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <_Z12Check_Disarmv+0x90>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f240 424b 	movw	r2, #1099	; 0x44b
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	dc2c      	bgt.n	8003bda <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <_Z12Check_Disarmv+0x94>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	f083 0301 	eor.w	r3, r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8003b8e:	f002 fb5f 	bl	8006250 <HAL_GetTick>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <_Z12Check_Disarmv+0x98>)
 8003b98:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <_Z12Check_Disarmv+0x94>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8003ba0:	f002 fb56 	bl	8006250 <HAL_GetTick>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <_Z12Check_Disarmv+0x98>)
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	bf8c      	ite	hi
 8003bb4:	2301      	movhi	r3, #1
 8003bb6:	2300      	movls	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <_Z12Check_Disarmv+0x86>
					armed = false;
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <_Z12Check_Disarmv+0x8c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <_Z12Check_Disarmv+0x9c>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd2:	480a      	ldr	r0, [pc, #40]	; (8003bfc <_Z12Check_Disarmv+0xa0>)
 8003bd4:	f003 f9aa 	bl	8006f2c <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8003bd8:	e003      	b.n	8003be2 <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_Z12Check_Disarmv+0x94>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003be0:	e7ff      	b.n	8003be2 <_Z12Check_Disarmv+0x86>
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200018a5 	.word	0x200018a5
 8003bec:	20001810 	.word	0x20001810
 8003bf0:	200018a6 	.word	0x200018a6
 8003bf4:	2000189c 	.word	0x2000189c
 8003bf8:	20000e70 	.word	0x20000e70
 8003bfc:	40010800 	.word	0x40010800

08003c00 <_Z9TelemPackv>:

void TelemPack() {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8003c04:	4ba1      	ldr	r3, [pc, #644]	; (8003e8c <_Z9TelemPackv+0x28c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4aa1      	ldr	r2, [pc, #644]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c0a:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8003c0c:	4b9f      	ldr	r3, [pc, #636]	; (8003e8c <_Z9TelemPackv+0x28c>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a9f      	ldr	r2, [pc, #636]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c12:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8003c14:	4b9d      	ldr	r3, [pc, #628]	; (8003e8c <_Z9TelemPackv+0x28c>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a9d      	ldr	r2, [pc, #628]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c1a:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8003c1c:	4b9d      	ldr	r3, [pc, #628]	; (8003e94 <_Z9TelemPackv+0x294>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	4b9b      	ldr	r3, [pc, #620]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c24:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8003c26:	4b9b      	ldr	r3, [pc, #620]	; (8003e94 <_Z9TelemPackv+0x294>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	4b98      	ldr	r3, [pc, #608]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c2e:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8003c30:	4b98      	ldr	r3, [pc, #608]	; (8003e94 <_Z9TelemPackv+0x294>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	4b96      	ldr	r3, [pc, #600]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c38:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8003c3a:	4b96      	ldr	r3, [pc, #600]	; (8003e94 <_Z9TelemPackv+0x294>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	4b93      	ldr	r3, [pc, #588]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c42:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 8003c44:	4b94      	ldr	r3, [pc, #592]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003c46:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8003c4a:	4a91      	ldr	r2, [pc, #580]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c4c:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8003c4e:	4b92      	ldr	r3, [pc, #584]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003c50:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003c54:	4a8e      	ldr	r2, [pc, #568]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c56:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 8003c58:	4b90      	ldr	r3, [pc, #576]	; (8003e9c <_Z9TelemPackv+0x29c>)
 8003c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd f81c 	bl	8000c9c <__aeabi_i2f>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a8a      	ldr	r2, [pc, #552]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c68:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 8003c6a:	4b88      	ldr	r3, [pc, #544]	; (8003e8c <_Z9TelemPackv+0x28c>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4a88      	ldr	r2, [pc, #544]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c70:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8003c72:	4b86      	ldr	r3, [pc, #536]	; (8003e8c <_Z9TelemPackv+0x28c>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4a86      	ldr	r2, [pc, #536]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c78:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 8003c7a:	4b84      	ldr	r3, [pc, #528]	; (8003e8c <_Z9TelemPackv+0x28c>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4a84      	ldr	r2, [pc, #528]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c80:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8003c82:	4b87      	ldr	r3, [pc, #540]	; (8003ea0 <_Z9TelemPackv+0x2a0>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	4a82      	ldr	r2, [pc, #520]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c88:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8003c8a:	4b85      	ldr	r3, [pc, #532]	; (8003ea0 <_Z9TelemPackv+0x2a0>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4a80      	ldr	r2, [pc, #512]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c90:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8003c92:	4b84      	ldr	r3, [pc, #528]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003c94:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003c98:	4a7d      	ldr	r2, [pc, #500]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003c9a:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8003c9c:	4b81      	ldr	r3, [pc, #516]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003c9e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8003ca2:	4a7b      	ldr	r2, [pc, #492]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003ca4:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 8003ca6:	4b7f      	ldr	r3, [pc, #508]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003ca8:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8003cac:	4a78      	ldr	r2, [pc, #480]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003cae:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 8003cb0:	4b7c      	ldr	r3, [pc, #496]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003cb2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8003cb6:	4a76      	ldr	r2, [pc, #472]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003cb8:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_bias;
 8003cba:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003cbc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003cc0:	4a73      	ldr	r2, [pc, #460]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003cc2:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_bias;
 8003cc4:	4b77      	ldr	r3, [pc, #476]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003cc6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003cca:	4a71      	ldr	r2, [pc, #452]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003ccc:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8003cce:	4b75      	ldr	r3, [pc, #468]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003cd0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003cd4:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003cd6:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8003cd8:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003cda:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003cde:	4a6c      	ldr	r2, [pc, #432]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003ce0:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8003ce2:	4b6d      	ldr	r3, [pc, #436]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003ce4:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003ce8:	4a69      	ldr	r2, [pc, #420]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003cea:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003cee:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8003cf2:	4a67      	ldr	r2, [pc, #412]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003cf4:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8003cf6:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003cf8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8003cfc:	4a64      	ldr	r2, [pc, #400]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003cfe:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8003d00:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003d02:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8003d06:	4a62      	ldr	r2, [pc, #392]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d08:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8003d0a:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003d0c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8003d10:	4a5f      	ldr	r2, [pc, #380]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d12:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8003d14:	4b60      	ldr	r3, [pc, #384]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003d16:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d1c:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8003d1e:	4b5e      	ldr	r3, [pc, #376]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003d20:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8003d24:	4a5a      	ldr	r2, [pc, #360]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8003d28:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003d2a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8003d2e:	4a58      	ldr	r2, [pc, #352]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d30:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 8003d32:	4b5c      	ldr	r3, [pc, #368]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003d34:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003d38:	4a55      	ldr	r2, [pc, #340]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d3a:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 8003d3c:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003d3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8003d42:	4a53      	ldr	r2, [pc, #332]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 8003d48:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003d4a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003d4e:	4a50      	ldr	r2, [pc, #320]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8003d54:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <_Z9TelemPackv+0x2a8>)
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	4b4d      	ldr	r3, [pc, #308]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d5a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 8003d5e:	4b52      	ldr	r3, [pc, #328]	; (8003ea8 <_Z9TelemPackv+0x2a8>)
 8003d60:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003d64:	b21a      	sxth	r2, r3
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d68:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 8003d6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ea8 <_Z9TelemPackv+0x2a8>)
 8003d6e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003d72:	b21a      	sxth	r2, r3
 8003d74:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d76:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8003d7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <_Z9TelemPackv+0x2a8>)
 8003d7c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003d80:	b21a      	sxth	r2, r3
 8003d82:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d84:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.x;
 8003d88:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003d8a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003d8e:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 8003d94:	4b43      	ldr	r3, [pc, #268]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003d96:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003d9a:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003d9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  telem_pack.position_body.y = EKF.y;
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003da2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8003da6:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003da8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	  telem_pack.velocity_body.y = EKF.vy;
 8003dac:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003dae:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8003db2:	4a37      	ldr	r2, [pc, #220]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.alt_thr = controller.alt_thr;
 8003db8:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <_Z9TelemPackv+0x298>)
 8003dba:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8003dbe:	4a34      	ldr	r2, [pc, #208]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003dc0:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 8003dc2:	f002 fa45 	bl	8006250 <HAL_GetTick>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003dca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accXc;
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <_Z9TelemPackv+0x2ac>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003dd4:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accYc;
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <_Z9TelemPackv+0x2b0>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003dde:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZm;
 8003de2:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <_Z9TelemPackv+0x2b4>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003de8:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <_Z9TelemPackv+0x2b8>)
 8003dee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003df4:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8003df8:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <_Z9TelemPackv+0x2bc>)
 8003dfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e00:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8003e04:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <_Z9TelemPackv+0x2c0>)
 8003e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e0c:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5

	  telem_pack.gps.lla.x = gpsData.ggastruct.lcation.latitude;
 8003e10:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <_Z9TelemPackv+0x2c4>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e16:	f8c3 20b7 	str.w	r2, [r3, #183]	; 0xb7
	  telem_pack.gps.lla.y = gpsData.ggastruct.lcation.longitude;
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <_Z9TelemPackv+0x2c4>)
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e20:	f8c3 20bb 	str.w	r2, [r3, #187]	; 0xbb

	  telem_pack.gps.pos_body.x = EKF.xbody;
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003e26:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e2c:	f8c3 20cf 	str.w	r2, [r3, #207]	; 0xcf
	  telem_pack.gps.pos_body.y = EKF.ybody;
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003e32:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e38:	f8c3 20d3 	str.w	r2, [r3, #211]	; 0xd3

	  telem_pack.gps.pos_ned.x = EKF.xned;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003e3e:	f8d3 22b4 	ldr.w	r2, [r3, #692]	; 0x2b4
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e44:	f8c3 20c3 	str.w	r2, [r3, #195]	; 0xc3
	  telem_pack.gps.pos_ned.y = EKF.yned;
 8003e48:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003e4a:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e50:	f8c3 20c7 	str.w	r2, [r3, #199]	; 0xc7

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003e56:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e5c:	f8c3 20db 	str.w	r2, [r3, #219]	; 0xdb
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <_Z9TelemPackv+0x2a4>)
 8003e62:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e68:	f8c3 20df 	str.w	r2, [r3, #223]	; 0xdf

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <_Z9TelemPackv+0x2c8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e74:	f8a3 20e7 	strh.w	r2, [r3, #231]	; 0xe7
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <_Z9TelemPackv+0x2c8>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <_Z9TelemPackv+0x290>)
 8003e80:	f8a3 20e9 	strh.w	r2, [r3, #233]	; 0xe9
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 8003e84:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <_Z9TelemPackv+0x2c8>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	e01f      	b.n	8003ecc <_Z9TelemPackv+0x2cc>
 8003e8c:	20000c3c 	.word	0x20000c3c
 8003e90:	20000c60 	.word	0x20000c60
 8003e94:	200017e0 	.word	0x200017e0
 8003e98:	200011b0 	.word	0x200011b0
 8003e9c:	2000196e 	.word	0x2000196e
 8003ea0:	20000c18 	.word	0x20000c18
 8003ea4:	20000e70 	.word	0x20000e70
 8003ea8:	2000192c 	.word	0x2000192c
 8003eac:	20000bd0 	.word	0x20000bd0
 8003eb0:	20000bd4 	.word	0x20000bd4
 8003eb4:	20000be4 	.word	0x20000be4
 8003eb8:	20001952 	.word	0x20001952
 8003ebc:	20001954 	.word	0x20001954
 8003ec0:	20001956 	.word	0x20001956
 8003ec4:	20001974 	.word	0x20001974
 8003ec8:	20001810 	.word	0x20001810
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003ece:	f8a3 20eb 	strh.w	r2, [r3, #235]	; 0xeb
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003eda:	f8a3 20ed 	strh.w	r2, [r3, #237]	; 0xed
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003ee6:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003ef2:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8003ef6:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003efe:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f0a:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f16:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f22:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <_Z9TelemPackv+0x37c>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f2e:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <_Z9TelemPackv+0x380>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f3a:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.pwm2.w2 = controller_output_2[1];
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <_Z9TelemPackv+0x380>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f46:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <_Z9TelemPackv+0x380>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f52:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <_Z9TelemPackv+0x380>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f5e:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <_Z9TelemPackv+0x384>)
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <_Z9TelemPackv+0x378>)
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f240 1305 	movw	r3, #261	; 0x105
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f00f f958 	bl	8013224 <memcpy>
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000c60 	.word	0x20000c60
 8003f7c:	20001810 	.word	0x20001810
 8003f80:	200017f0 	.word	0x200017f0
 8003f84:	20000d68 	.word	0x20000d68

08003f88 <_Z7GyroOkuh>:
	  sent_time = HAL_GetTick();


}

int16_t GyroOku (uint8_t addr) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af04      	add	r7, sp, #16
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	2301      	movs	r3, #1
 8003f98:	9302      	str	r3, [sp, #8]
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	21d1      	movs	r1, #209	; 0xd1
 8003fa8:	4807      	ldr	r0, [pc, #28]	; (8003fc8 <_Z7GyroOkuh+0x40>)
 8003faa:	f003 fd73 	bl	8007a94 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8003fae:	7b3b      	ldrb	r3, [r7, #12]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	b21a      	sxth	r2, r3
 8003fb4:	7b7b      	ldrb	r3, [r7, #13]
 8003fb6:	b21b      	sxth	r3, r3
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8003fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200008b8 	.word	0x200008b8

08003fcc <_Z7GPSInitv>:

void GPSInit() {
 8003fcc:	b5b0      	push	{r4, r5, r7, lr}
 8003fce:	b08e      	sub	sp, #56	; 0x38
 8003fd0:	af00      	add	r7, sp, #0
	uint8_t Disable_GPGSV[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15};
 8003fd2:	4a23      	ldr	r2, [pc, #140]	; (8004060 <_Z7GPSInitv+0x94>)
 8003fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fda:	c303      	stmia	r3!, {r0, r1}
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	3302      	adds	r3, #2
 8003fe0:	0c12      	lsrs	r2, r2, #16
 8003fe2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Disable_GPGSV, 11, 100);
 8003fe4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003fe8:	2364      	movs	r3, #100	; 0x64
 8003fea:	220b      	movs	r2, #11
 8003fec:	481d      	ldr	r0, [pc, #116]	; (8004064 <_Z7GPSInitv+0x98>)
 8003fee:	f006 fce5 	bl	800a9bc <HAL_UART_Transmit>
	uint8_t Set_to_5Hz[14] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <_Z7GPSInitv+0x9c>)
 8003ff4:	f107 041c 	add.w	r4, r7, #28
 8003ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ffa:	c407      	stmia	r4!, {r0, r1, r2}
 8003ffc:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_5Hz, 14, 100);
 8003ffe:	f107 011c 	add.w	r1, r7, #28
 8004002:	2364      	movs	r3, #100	; 0x64
 8004004:	220e      	movs	r2, #14
 8004006:	4817      	ldr	r0, [pc, #92]	; (8004064 <_Z7GPSInitv+0x98>)
 8004008:	f006 fcd8 	bl	800a9bc <HAL_UART_Transmit>
	uint8_t Set_to_115[28] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E};
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <_Z7GPSInitv+0xa0>)
 800400e:	463c      	mov	r4, r7
 8004010:	461d      	mov	r5, r3
 8004012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800401a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_115, 28, 100);
 800401e:	4639      	mov	r1, r7
 8004020:	2364      	movs	r3, #100	; 0x64
 8004022:	221c      	movs	r2, #28
 8004024:	480f      	ldr	r0, [pc, #60]	; (8004064 <_Z7GPSInitv+0x98>)
 8004026:	f006 fcc9 	bl	800a9bc <HAL_UART_Transmit>


    HAL_UART_Abort_IT(&huart3);
 800402a:	480e      	ldr	r0, [pc, #56]	; (8004064 <_Z7GPSInitv+0x98>)
 800402c:	f006 fe44 	bl	800acb8 <HAL_UART_Abort_IT>

    HAL_UART_DeInit(&huart3);
 8004030:	480c      	ldr	r0, [pc, #48]	; (8004064 <_Z7GPSInitv+0x98>)
 8004032:	f006 fc97 	bl	800a964 <HAL_UART_DeInit>

    huart3.Init.BaudRate = 115200;
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <_Z7GPSInitv+0x98>)
 8004038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800403c:	605a      	str	r2, [r3, #4]

    if (HAL_UART_Init(&huart3) != HAL_OK) {
 800403e:	4809      	ldr	r0, [pc, #36]	; (8004064 <_Z7GPSInitv+0x98>)
 8004040:	f006 fc43 	bl	800a8ca <HAL_UART_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <_Z7GPSInitv+0x8c>
        Error_Handler();
 8004054:	f001 fbae 	bl	80057b4 <Error_Handler>
    }


}
 8004058:	bf00      	nop
 800405a:	3738      	adds	r7, #56	; 0x38
 800405c:	46bd      	mov	sp, r7
 800405e:	bdb0      	pop	{r4, r5, r7, pc}
 8004060:	080143fc 	.word	0x080143fc
 8004064:	20000aac 	.word	0x20000aac
 8004068:	08014408 	.word	0x08014408
 800406c:	08014418 	.word	0x08014418

08004070 <_Z7pwm2angt>:

float pwm2ang(unsigned short int pwm) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 800407a:	2305      	movs	r3, #5
 800407c:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 800407e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004082:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8004084:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004088:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 800408a:	f06f 0313 	mvn.w	r3, #19
 800408e:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 8004090:	2314      	movs	r3, #20
 8004092:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8004094:	88fa      	ldrh	r2, [r7, #6]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800409c:	3304      	adds	r3, #4
 800409e:	429a      	cmp	r2, r3
 80040a0:	dd09      	ble.n	80040b6 <_Z7pwm2angt+0x46>
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	db03      	blt.n	80040b6 <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 80040ae:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80040b2:	83fb      	strh	r3, [r7, #30]
 80040b4:	e001      	b.n	80040ba <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80040ba:	8bfa      	ldrh	r2, [r7, #30]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	1a8a      	subs	r2, r1, r2
 80040c6:	fb02 f203 	mul.w	r2, r2, r3
 80040ca:	6939      	ldr	r1, [r7, #16]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	1acb      	subs	r3, r1, r3
 80040d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc fddf 	bl	8000c9c <__aeabi_i2f>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 80040f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f6:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 80040f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80040fc:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 80040fe:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004102:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8004104:	2364      	movs	r3, #100	; 0x64
 8004106:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	1a8a      	subs	r2, r1, r2
 8004114:	fb02 f203 	mul.w	r2, r2, r3
 8004118:	6939      	ldr	r1, [r7, #16]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1acb      	subs	r3, r1, r3
 800411e:	fb92 f2f3 	sdiv	r2, r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	425b      	negs	r3, r3
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc fdb7 	bl	8000c9c <__aeabi_i2f>
 800412e:	4603      	mov	r3, r0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af04      	add	r7, sp, #16
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	b29a      	uxth	r2, r3
 8004146:	2301      	movs	r3, #1
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	2302      	movs	r3, #2
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	f107 030c 	add.w	r3, r7, #12
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2301      	movs	r3, #1
 8004156:	21a7      	movs	r1, #167	; 0xa7
 8004158:	4807      	ldr	r0, [pc, #28]	; (8004178 <_Z6AccOkuh+0x40>)
 800415a:	f003 fc9b 	bl	8007a94 <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 800415e:	7b7b      	ldrb	r3, [r7, #13]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	b21a      	sxth	r2, r3
 8004164:	7b3b      	ldrb	r3, [r7, #12]
 8004166:	b21b      	sxth	r3, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	81fb      	strh	r3, [r7, #14]
	return gyro;
 800416c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200008b8 	.word	0x200008b8

0800417c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fc f93d 	bl	8000404 <__aeabi_i2d>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	f00d f8f5 	bl	8011380 <sqrt>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 80041a4:	b5b0      	push	{r4, r5, r7, lr}
 80041a6:	b08e      	sub	sp, #56	; 0x38
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 80041b0:	4bc6      	ldr	r3, [pc, #792]	; (80044cc <_Z9DCM2EulerPsS_+0x328>)
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ba:	461a      	mov	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c2:	fb03 f202 	mul.w	r2, r3, r2
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3302      	adds	r3, #2
 80041ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ce:	4619      	mov	r1, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	3302      	adds	r3, #2
 80041d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d8:	fb03 f301 	mul.w	r3, r3, r1
 80041dc:	441a      	add	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	3304      	adds	r3, #4
 80041e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041e6:	4619      	mov	r1, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	3304      	adds	r3, #4
 80041ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f0:	fb03 f301 	mul.w	r3, r3, r1
 80041f4:	4413      	add	r3, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ffc0 	bl	800417c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc fc40 	bl	8000a88 <__aeabi_d2f>
 8004208:	4603      	mov	r3, r0
 800420a:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3302      	adds	r3, #2
 8004218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800421c:	fb03 f302 	mul.w	r3, r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	3202      	adds	r2, #2
 8004224:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004228:	fb02 f203 	mul.w	r2, r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004232:	4619      	mov	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3302      	adds	r3, #2
 8004238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800423c:	fb03 f301 	mul.w	r3, r3, r1
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	3102      	adds	r1, #2
 8004244:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	1ad2      	subs	r2, r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004254:	4619      	mov	r1, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3304      	adds	r3, #4
 800425a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800425e:	fb03 f301 	mul.w	r3, r3, r1
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	3104      	adds	r1, #4
 8004266:	f9b1 1000 	ldrsh.w	r1, [r1]
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	441a      	add	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004276:	4619      	mov	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004280:	fb03 f301 	mul.w	r3, r3, r1
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	3104      	adds	r1, #4
 8004288:	f9b1 1000 	ldrsh.w	r1, [r1]
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc fd02 	bl	8000c9c <__aeabi_i2f>
 8004298:	4604      	mov	r4, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3302      	adds	r3, #2
 80042a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042aa:	fb03 f202 	mul.w	r2, r3, r2
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3302      	adds	r3, #2
 80042b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b6:	4619      	mov	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042be:	fb03 f301 	mul.w	r3, r3, r1
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc fce9 	bl	8000c9c <__aeabi_i2f>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f9d3 	bl	8004678 <_Z6squaref>
 80042d2:	4605      	mov	r5, r0
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e4:	fb03 f202 	mul.w	r2, r3, r2
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	3304      	adds	r3, #4
 80042ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f0:	4619      	mov	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f8:	fb03 f301 	mul.w	r3, r3, r1
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fc fccc 	bl	8000c9c <__aeabi_i2f>
 8004304:	4603      	mov	r3, r0
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f9b6 	bl	8004678 <_Z6squaref>
 800430c:	4603      	mov	r3, r0
 800430e:	4619      	mov	r1, r3
 8004310:	4628      	mov	r0, r5
 8004312:	f7fc fc0f 	bl	8000b34 <__addsf3>
 8004316:	4603      	mov	r3, r0
 8004318:	461d      	mov	r5, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3302      	adds	r3, #2
 800431e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800432c:	fb03 f202 	mul.w	r2, r3, r2
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	3304      	adds	r3, #4
 8004334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004338:	4619      	mov	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3302      	adds	r3, #2
 800433e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004342:	fb03 f301 	mul.w	r3, r3, r1
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fca7 	bl	8000c9c <__aeabi_i2f>
 800434e:	4603      	mov	r3, r0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f991 	bl	8004678 <_Z6squaref>
 8004356:	4603      	mov	r3, r0
 8004358:	4619      	mov	r1, r3
 800435a:	4628      	mov	r0, r5
 800435c:	f7fc fbea 	bl	8000b34 <__addsf3>
 8004360:	4603      	mov	r3, r0
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fb78 	bl	8002a58 <_ZSt4sqrtf>
 8004368:	4603      	mov	r3, r0
 800436a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc fce9 	bl	8000d44 <__aeabi_fmul>
 8004372:	4603      	mov	r3, r0
 8004374:	4619      	mov	r1, r3
 8004376:	4620      	mov	r0, r4
 8004378:	f7fc fd98 	bl	8000eac <__aeabi_fdiv>
 800437c:	4603      	mov	r3, r0
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	3304      	adds	r3, #4
 8004384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004388:	461a      	mov	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3302      	adds	r3, #2
 800438e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004392:	fb03 f202 	mul.w	r2, r3, r2
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3302      	adds	r3, #2
 800439a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800439e:	4619      	mov	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a8:	fb03 f301 	mul.w	r3, r3, r1
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc fc74 	bl	8000c9c <__aeabi_i2f>
 80043b4:	4604      	mov	r4, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3302      	adds	r3, #2
 80043c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043c6:	fb03 f202 	mul.w	r2, r3, r2
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	3302      	adds	r3, #2
 80043ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d2:	4619      	mov	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043da:	fb03 f301 	mul.w	r3, r3, r1
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fc fc5b 	bl	8000c9c <__aeabi_i2f>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f945 	bl	8004678 <_Z6squaref>
 80043ee:	4605      	mov	r5, r0
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004400:	fb03 f202 	mul.w	r2, r3, r2
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	3304      	adds	r3, #4
 8004408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800440c:	4619      	mov	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004414:	fb03 f301 	mul.w	r3, r3, r1
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	4618      	mov	r0, r3
 800441c:	f7fc fc3e 	bl	8000c9c <__aeabi_i2f>
 8004420:	4603      	mov	r3, r0
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f928 	bl	8004678 <_Z6squaref>
 8004428:	4603      	mov	r3, r0
 800442a:	4619      	mov	r1, r3
 800442c:	4628      	mov	r0, r5
 800442e:	f7fc fb81 	bl	8000b34 <__addsf3>
 8004432:	4603      	mov	r3, r0
 8004434:	461d      	mov	r5, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3302      	adds	r3, #2
 800443a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004448:	fb03 f202 	mul.w	r2, r3, r2
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3304      	adds	r3, #4
 8004450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004454:	4619      	mov	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3302      	adds	r3, #2
 800445a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800445e:	fb03 f301 	mul.w	r3, r3, r1
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc fc19 	bl	8000c9c <__aeabi_i2f>
 800446a:	4603      	mov	r3, r0
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f903 	bl	8004678 <_Z6squaref>
 8004472:	4603      	mov	r3, r0
 8004474:	4619      	mov	r1, r3
 8004476:	4628      	mov	r0, r5
 8004478:	f7fc fb5c 	bl	8000b34 <__addsf3>
 800447c:	4603      	mov	r3, r0
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe faea 	bl	8002a58 <_ZSt4sqrtf>
 8004484:	4603      	mov	r3, r0
 8004486:	4619      	mov	r1, r3
 8004488:	4620      	mov	r0, r4
 800448a:	f7fc fd0f 	bl	8000eac <__aeabi_fdiv>
 800448e:	4603      	mov	r3, r0
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004498:	425b      	negs	r3, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fbfe 	bl	8000c9c <__aeabi_i2f>
 80044a0:	4603      	mov	r3, r0
 80044a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc fd01 	bl	8000eac <__aeabi_fdiv>
 80044aa:	4603      	mov	r3, r0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	3302      	adds	r3, #2
 80044b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044b6:	425b      	negs	r3, r3
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fbef 	bl	8000c9c <__aeabi_i2f>
 80044be:	4603      	mov	r3, r0
 80044c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fc fcf2 	bl	8000eac <__aeabi_fdiv>
 80044c8:	4603      	mov	r3, r0
 80044ca:	e001      	b.n	80044d0 <_Z9DCM2EulerPsS_+0x32c>
 80044cc:	42654ca3 	.word	0x42654ca3
 80044d0:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3304      	adds	r3, #4
 80044d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044da:	425b      	negs	r3, r3
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc fbdd 	bl	8000c9c <__aeabi_i2f>
 80044e2:	4603      	mov	r3, r0
 80044e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc fce0 	bl	8000eac <__aeabi_fdiv>
 80044ec:	4603      	mov	r3, r0
 80044ee:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fa88 	bl	8002a0c <_ZSt4asinf>
 80044fc:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 80044fe:	69b8      	ldr	r0, [r7, #24]
 8004500:	f7fe f8ae 	bl	8002660 <_ZSt3cosf>
 8004504:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800450a:	f7fc fc1b 	bl	8000d44 <__aeabi_fmul>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 8004516:	69f9      	ldr	r1, [r7, #28]
 8004518:	6a38      	ldr	r0, [r7, #32]
 800451a:	f7fc fcc7 	bl	8000eac <__aeabi_fdiv>
 800451e:	4603      	mov	r3, r0
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe fa7f 	bl	8002a24 <_ZSt4atanf>
 8004526:	4603      	mov	r3, r0
 8004528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc fc0a 	bl	8000d44 <__aeabi_fmul>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800453c:	f7fc fcb6 	bl	8000eac <__aeabi_fdiv>
 8004540:	4603      	mov	r3, r0
 8004542:	461c      	mov	r4, r3
 8004544:	6979      	ldr	r1, [r7, #20]
 8004546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004548:	f7fc fcb0 	bl	8000eac <__aeabi_fdiv>
 800454c:	4603      	mov	r3, r0
 800454e:	4619      	mov	r1, r3
 8004550:	4620      	mov	r0, r4
 8004552:	f7fe fa73 	bl	8002a3c <_ZSt5atan2ff>
 8004556:	4603      	mov	r3, r0
 8004558:	4619      	mov	r1, r3
 800455a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800455c:	f7fc fbf2 	bl	8000d44 <__aeabi_fmul>
 8004560:	4603      	mov	r3, r0
 8004562:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 8004564:	6938      	ldr	r0, [r7, #16]
 8004566:	f7fc fdc9 	bl	80010fc <__aeabi_f2iz>
 800456a:	4603      	mov	r3, r0
 800456c:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 8004570:	da23      	bge.n	80045ba <_Z9DCM2EulerPsS_+0x416>
 8004572:	6938      	ldr	r0, [r7, #16]
 8004574:	f7fc fdc2 	bl	80010fc <__aeabi_f2iz>
 8004578:	4603      	mov	r3, r0
 800457a:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800457e:	db1c      	blt.n	80045ba <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 8004580:	4b39      	ldr	r3, [pc, #228]	; (8004668 <_Z9DCM2EulerPsS_+0x4c4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d04b      	beq.n	8004620 <_Z9DCM2EulerPsS_+0x47c>
 8004588:	4b38      	ldr	r3, [pc, #224]	; (800466c <_Z9DCM2EulerPsS_+0x4c8>)
 800458a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc fd74 	bl	8001080 <__aeabi_fcmplt>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d100      	bne.n	80045a0 <_Z9DCM2EulerPsS_+0x3fc>
 800459e:	e03f      	b.n	8004620 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 80045a0:	4b33      	ldr	r3, [pc, #204]	; (8004670 <_Z9DCM2EulerPsS_+0x4cc>)
 80045a2:	f993 3000 	ldrsb.w	r3, [r3]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	b25a      	sxtb	r2, r3
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <_Z9DCM2EulerPsS_+0x4cc>)
 80045b0:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80045b2:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <_Z9DCM2EulerPsS_+0x4c4>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80045b8:	e032      	b.n	8004620 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 80045ba:	6938      	ldr	r0, [r7, #16]
 80045bc:	f7fc fd9e 	bl	80010fc <__aeabi_f2iz>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2baf      	cmp	r3, #175	; 0xaf
 80045c4:	dd22      	ble.n	800460c <_Z9DCM2EulerPsS_+0x468>
 80045c6:	6938      	ldr	r0, [r7, #16]
 80045c8:	f7fc fd98 	bl	80010fc <__aeabi_f2iz>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2bb4      	cmp	r3, #180	; 0xb4
 80045d0:	dc1c      	bgt.n	800460c <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80045d2:	4b25      	ldr	r3, [pc, #148]	; (8004668 <_Z9DCM2EulerPsS_+0x4c4>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d022      	beq.n	8004620 <_Z9DCM2EulerPsS_+0x47c>
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <_Z9DCM2EulerPsS_+0x4c8>)
 80045dc:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fc fd69 	bl	80010bc <__aeabi_fcmpgt>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d100      	bne.n	80045f2 <_Z9DCM2EulerPsS_+0x44e>
 80045f0:	e016      	b.n	8004620 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 80045f2:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <_Z9DCM2EulerPsS_+0x4cc>)
 80045f4:	f993 3000 	ldrsb.w	r3, [r3]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	b25a      	sxtb	r2, r3
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <_Z9DCM2EulerPsS_+0x4cc>)
 8004602:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <_Z9DCM2EulerPsS_+0x4c4>)
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 800460a:	e009      	b.n	8004620 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <_Z9DCM2EulerPsS_+0x4d0>)
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	2b32      	cmp	r3, #50	; 0x32
 8004612:	d905      	bls.n	8004620 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <_Z9DCM2EulerPsS_+0x4c4>)
 8004616:	2202      	movs	r2, #2
 8004618:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <_Z9DCM2EulerPsS_+0x4d0>)
 800461c:	2200      	movs	r2, #0
 800461e:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 8004620:	4b11      	ldr	r3, [pc, #68]	; (8004668 <_Z9DCM2EulerPsS_+0x4c4>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d005      	beq.n	8004634 <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <_Z9DCM2EulerPsS_+0x4d0>)
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <_Z9DCM2EulerPsS_+0x4d0>)
 8004632:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <_Z9DCM2EulerPsS_+0x4cc>)
 8004636:	f993 3000 	ldrsb.w	r3, [r3]
 800463a:	461a      	mov	r2, r3
 800463c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004640:	fb03 f302 	mul.w	r3, r3, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f7fc fb29 	bl	8000c9c <__aeabi_i2f>
 800464a:	4603      	mov	r3, r0
 800464c:	4619      	mov	r1, r3
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f7fc fa70 	bl	8000b34 <__addsf3>
 8004654:	4603      	mov	r3, r0
 8004656:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 800465e:	bf00      	nop

}
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	3738      	adds	r7, #56	; 0x38
 8004664:	46bd      	mov	sp, r7
 8004666:	bdb0      	pop	{r4, r5, r7, pc}
 8004668:	20000001 	.word	0x20000001
 800466c:	20000e70 	.word	0x20000e70
 8004670:	2000196e 	.word	0x2000196e
 8004674:	20001970 	.word	0x20001970

08004678 <_Z6squaref>:

float square(float x) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	float y = x*x;
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fb5e 	bl	8000d44 <__aeabi_fmul>
 8004688:	4603      	mov	r3, r0
 800468a:	60fb      	str	r3, [r7, #12]
	return y;
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <_Z6PWMYazv>:

void PWMYaz() {
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
*/

#ifdef UAV1


		  if(armed) {
 800469c:	4b35      	ldr	r3, [pc, #212]	; (8004774 <_Z6PWMYazv+0xdc>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d04f      	beq.n	8004744 <_Z6PWMYazv+0xac>

			  if(in_failsafe) {
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <_Z6PWMYazv+0xe0>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d014      	beq.n	80046d6 <_Z6PWMYazv+0x3e>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1300);
 80046ac:	4b33      	ldr	r3, [pc, #204]	; (800477c <_Z6PWMYazv+0xe4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f240 5214 	movw	r2, #1300	; 0x514
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1300);
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <_Z6PWMYazv+0xe4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f240 5214 	movw	r2, #1300	; 0x514
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1300);
 80046c0:	4b2e      	ldr	r3, [pc, #184]	; (800477c <_Z6PWMYazv+0xe4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f240 5214 	movw	r2, #1300	; 0x514
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1300);
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <_Z6PWMYazv+0xe4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f240 5214 	movw	r2, #1300	; 0x514
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 80046d4:	e04a      	b.n	800476c <_Z6PWMYazv+0xd4>
				  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 80046d6:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <_Z6PWMYazv+0xe8>)
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f240 52db 	movw	r2, #1499	; 0x5db
 80046de:	4293      	cmp	r3, r2
 80046e0:	dc1b      	bgt.n	800471a <_Z6PWMYazv+0x82>
 80046e2:	4b27      	ldr	r3, [pc, #156]	; (8004780 <_Z6PWMYazv+0xe8>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f240 424c 	movw	r2, #1100	; 0x44c
 80046ea:	4293      	cmp	r3, r2
 80046ec:	dd15      	ble.n	800471a <_Z6PWMYazv+0x82>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 80046ee:	4b25      	ldr	r3, [pc, #148]	; (8004784 <_Z6PWMYazv+0xec>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <_Z6PWMYazv+0xe4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <_Z6PWMYazv+0xec>)
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	4b1f      	ldr	r3, [pc, #124]	; (800477c <_Z6PWMYazv+0xe4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <_Z6PWMYazv+0xec>)
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <_Z6PWMYazv+0xe4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <_Z6PWMYazv+0xec>)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <_Z6PWMYazv+0xe4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
 8004716:	bf00      	nop
}
 8004718:	e028      	b.n	800476c <_Z6PWMYazv+0xd4>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800471a:	4b18      	ldr	r3, [pc, #96]	; (800477c <_Z6PWMYazv+0xe4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004722:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8004724:	4b15      	ldr	r3, [pc, #84]	; (800477c <_Z6PWMYazv+0xe4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <_Z6PWMYazv+0xe4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004736:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <_Z6PWMYazv+0xe4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004742:	e013      	b.n	800476c <_Z6PWMYazv+0xd4>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <_Z6PWMYazv+0xe4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800474c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <_Z6PWMYazv+0xe4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004756:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8004758:	4b08      	ldr	r3, [pc, #32]	; (800477c <_Z6PWMYazv+0xe4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004760:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <_Z6PWMYazv+0xe4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	200018a5 	.word	0x200018a5
 8004778:	20001966 	.word	0x20001966
 800477c:	2000090c 	.word	0x2000090c
 8004780:	20001810 	.word	0x20001810
 8004784:	200017e0 	.word	0x200017e0

08004788 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047a2:	da12      	bge.n	80047ca <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fbee 	bl	8003f88 <_Z7GyroOkuh>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fc fa74 	bl	8000c9c <__aeabi_i2f>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4619      	mov	r1, r3
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7fc f9bb 	bl	8000b34 <__addsf3>
 80047be:	4603      	mov	r3, r0
 80047c0:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	e7e8      	b.n	800479c <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80047ca:	4905      	ldr	r1, [pc, #20]	; (80047e0 <_Z7GyroErrh+0x58>)
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7fc fb6d 	bl	8000eac <__aeabi_fdiv>
 80047d2:	4603      	mov	r3, r0
 80047d4:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	44fa0000 	.word	0x44fa0000

080047e4 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047fe:	da12      	bge.n	8004826 <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fc98 	bl	8004138 <_Z6AccOkuh>
 8004808:	4603      	mov	r3, r0
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fa46 	bl	8000c9c <__aeabi_i2f>
 8004810:	4603      	mov	r3, r0
 8004812:	4619      	mov	r1, r3
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7fc f98d 	bl	8000b34 <__addsf3>
 800481a:	4603      	mov	r3, r0
 800481c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	e7e8      	b.n	80047f8 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8004826:	4905      	ldr	r1, [pc, #20]	; (800483c <_Z6AccErrh+0x58>)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7fc fb3f 	bl	8000eac <__aeabi_fdiv>
 800482e:	4603      	mov	r3, r0
 8004830:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	44fa0000 	.word	0x44fa0000

08004840 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <_Z11MotorBaslatv+0x38>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800484c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <_Z11MotorBaslatv+0x38>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <_Z11MotorBaslatv+0x38>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004860:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <_Z11MotorBaslatv+0x38>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 800486c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004870:	f001 fcf8 	bl	8006264 <HAL_Delay>
}
 8004874:	bf00      	nop
 8004876:	bd80      	pop	{r7, pc}
 8004878:	2000090c 	.word	0x2000090c

0800487c <_Z7SetHomev>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void SetHome() {
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	home_counter++;
 8004880:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <_Z7SetHomev+0xc4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <_Z7SetHomev+0xc4>)
 8004888:	6013      	str	r3, [r2, #0]
	if(home_counter != 11) {
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <_Z7SetHomev+0xc4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b0b      	cmp	r3, #11
 8004890:	d024      	beq.n	80048dc <_Z7SetHomev+0x60>
		lla0_mean[0]  += gpsData.ggastruct.lcation.latitude;
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <_Z7SetHomev+0xc8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <_Z7SetHomev+0xcc>)
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	4611      	mov	r1, r2
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc f949 	bl	8000b34 <__addsf3>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b27      	ldr	r3, [pc, #156]	; (8004944 <_Z7SetHomev+0xc8>)
 80048a8:	601a      	str	r2, [r3, #0]
		lla0_mean[1] += gpsData.ggastruct.lcation.longitude;
 80048aa:	4b26      	ldr	r3, [pc, #152]	; (8004944 <_Z7SetHomev+0xc8>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4a26      	ldr	r2, [pc, #152]	; (8004948 <_Z7SetHomev+0xcc>)
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fc f93d 	bl	8000b34 <__addsf3>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461a      	mov	r2, r3
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <_Z7SetHomev+0xc8>)
 80048c0:	605a      	str	r2, [r3, #4]
		lla0_mean[2] += gpsData.ggastruct.alt.altitude;
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <_Z7SetHomev+0xc8>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a20      	ldr	r2, [pc, #128]	; (8004948 <_Z7SetHomev+0xcc>)
 80048c8:	6a12      	ldr	r2, [r2, #32]
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fc f931 	bl	8000b34 <__addsf3>
 80048d2:	4603      	mov	r3, r0
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <_Z7SetHomev+0xc8>)
 80048d8:	609a      	str	r2, [r3, #8]
		lla0_mean[2] = 0;

		home = true;
	}

}
 80048da:	e02f      	b.n	800493c <_Z7SetHomev+0xc0>
		home_counter = 0;
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <_Z7SetHomev+0xc4>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
		lla0[0] = lla0_mean[0]/10;
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <_Z7SetHomev+0xc8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4919      	ldr	r1, [pc, #100]	; (800494c <_Z7SetHomev+0xd0>)
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fc fadf 	bl	8000eac <__aeabi_fdiv>
 80048ee:	4603      	mov	r3, r0
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b17      	ldr	r3, [pc, #92]	; (8004950 <_Z7SetHomev+0xd4>)
 80048f4:	601a      	str	r2, [r3, #0]
		lla0[1] = lla0_mean[1]/10;
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <_Z7SetHomev+0xc8>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4914      	ldr	r1, [pc, #80]	; (800494c <_Z7SetHomev+0xd0>)
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc fad5 	bl	8000eac <__aeabi_fdiv>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <_Z7SetHomev+0xd4>)
 8004908:	605a      	str	r2, [r3, #4]
		lla0[2] = lla0_mean[2]/10;
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <_Z7SetHomev+0xc8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	490f      	ldr	r1, [pc, #60]	; (800494c <_Z7SetHomev+0xd0>)
 8004910:	4618      	mov	r0, r3
 8004912:	f7fc facb 	bl	8000eac <__aeabi_fdiv>
 8004916:	4603      	mov	r3, r0
 8004918:	461a      	mov	r2, r3
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <_Z7SetHomev+0xd4>)
 800491c:	609a      	str	r2, [r3, #8]
		lla0_mean[0] = 0;
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <_Z7SetHomev+0xc8>)
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
		lla0_mean[1] = 0;
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <_Z7SetHomev+0xc8>)
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	605a      	str	r2, [r3, #4]
		lla0_mean[2] = 0;
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <_Z7SetHomev+0xc8>)
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	609a      	str	r2, [r3, #8]
		home = true;
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <_Z7SetHomev+0xd8>)
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
}
 800493c:	bf00      	nop
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000191c 	.word	0x2000191c
 8004944:	20000c0c 	.word	0x20000c0c
 8004948:	20001974 	.word	0x20001974
 800494c:	41200000 	.word	0x41200000
 8004950:	20000c00 	.word	0x20000c00
 8004954:	2000190c 	.word	0x2000190c

08004958 <_Z8SetHome2v>:

void SetHome2() {
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
		lla0[0] = gpsData.ggastruct.lcation.latitude;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <_Z8SetHome2v+0x2c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a09      	ldr	r2, [pc, #36]	; (8004988 <_Z8SetHome2v+0x30>)
 8004962:	6013      	str	r3, [r2, #0]
		lla0[1] = gpsData.ggastruct.lcation.longitude;
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <_Z8SetHome2v+0x2c>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a07      	ldr	r2, [pc, #28]	; (8004988 <_Z8SetHome2v+0x30>)
 800496a:	6053      	str	r3, [r2, #4]
		lla0[2] = gpsData.ggastruct.alt.altitude;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <_Z8SetHome2v+0x2c>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	4a05      	ldr	r2, [pc, #20]	; (8004988 <_Z8SetHome2v+0x30>)
 8004972:	6093      	str	r3, [r2, #8]

		home = true;
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <_Z8SetHome2v+0x34>)
 8004976:	2201      	movs	r2, #1
 8004978:	701a      	strb	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20001974 	.word	0x20001974
 8004988:	20000c00 	.word	0x20000c00
 800498c:	2000190c 	.word	0x2000190c

08004990 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8004990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004992:	b0ad      	sub	sp, #180	; 0xb4
 8004994:	af0c      	add	r7, sp, #48	; 0x30
 8004996:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4a9f      	ldr	r2, [pc, #636]	; (8004c18 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800499c:	4293      	cmp	r3, r2
 800499e:	f040 862e 	bne.w	80055fe <HAL_TIM_PeriodElapsedCallback+0xc6e>
		//1.25 ms || 800 Hz
		  Check_Arm();
 80049a2:	f7ff f875 	bl	8003a90 <_Z9Check_Armv>
		  Check_Disarm();
 80049a6:	f7ff f8d9 	bl	8003b5c <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 80049aa:	2014      	movs	r0, #20
 80049ac:	f7fd fffe 	bl	80029ac <set_ucounter>
		set_b_counter(12);
 80049b0:	200c      	movs	r0, #12
 80049b2:	f7fd fe3b 	bl	800262c <set_b_counter>

		controller_counter++;
 80049b6:	4b99      	ldr	r3, [pc, #612]	; (8004c1c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	4b97      	ldr	r3, [pc, #604]	; (8004c1c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80049c0:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 80049c2:	4b97      	ldr	r3, [pc, #604]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	4b95      	ldr	r3, [pc, #596]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80049cc:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 80049ce:	4b95      	ldr	r3, [pc, #596]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	4b93      	ldr	r3, [pc, #588]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80049d8:	801a      	strh	r2, [r3, #0]
		gps_counter++;
 80049da:	4b93      	ldr	r3, [pc, #588]	; (8004c28 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	4b91      	ldr	r3, [pc, #580]	; (8004c28 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80049e4:	801a      	strh	r2, [r3, #0]
#ifdef UAV1
		if(gps_counter == GPS_CLOCK_RATE) {
 80049e6:	4b90      	ldr	r3, [pc, #576]	; (8004c28 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	2b28      	cmp	r3, #40	; 0x28
 80049ec:	f040 808d 	bne.w	8004b0a <HAL_TIM_PeriodElapsedCallback+0x17a>
			gps_counter = 0;
 80049f0:	4b8d      	ldr	r3, [pc, #564]	; (8004c28 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	801a      	strh	r2, [r3, #0]
			getGPSData(&gpsData);
 80049f6:	488d      	ldr	r0, [pc, #564]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80049f8:	f7fd f88e 	bl	8001b18 <getGPSData>
			EKF.gps_fixed = gpsData.ggastruct.isfixValid;
 80049fc:	4b8b      	ldr	r3, [pc, #556]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b89      	ldr	r3, [pc, #548]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004a0c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			if(!home && gpsData.ggastruct.isfixValid) {
 8004a10:	4b88      	ldr	r3, [pc, #544]	; (8004c34 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8004a1e:	4b83      	ldr	r3, [pc, #524]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_TIM_PeriodElapsedCallback+0x9a>
				SetHome();
 8004a26:	f7ff ff29 	bl	800487c <_Z7SetHomev>
			}

			if(home) {
 8004a2a:	4b82      	ldr	r3, [pc, #520]	; (8004c34 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d06b      	beq.n	8004b0a <HAL_TIM_PeriodElapsedCallback+0x17a>

				float lla[3];
				float ecef[3];
				float ecef0[3];

				lla[0] = gpsData.ggastruct.lcation.latitude;
 8004a32:	4b7e      	ldr	r3, [pc, #504]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
				lla[1] = gpsData.ggastruct.lcation.longitude;
 8004a38:	4b7c      	ldr	r3, [pc, #496]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	653b      	str	r3, [r7, #80]	; 0x50
				lla[2] = gpsData.ggastruct.alt.altitude;
 8004a3e:	4b7b      	ldr	r3, [pc, #492]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	657b      	str	r3, [r7, #84]	; 0x54

				lla2ecef(lla, ecef);
 8004a44:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004a48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fd fe1e 	bl	8002690 <_Z8lla2ecefPfS_>
				lla2ecef(lla0, ecef0);
 8004a54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4877      	ldr	r0, [pc, #476]	; (8004c38 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004a5c:	f7fd fe18 	bl	8002690 <_Z8lla2ecefPfS_>

				float vned[2];
				ecef2ned(ecef, ecef0, lla0, vned);
 8004a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a64:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004a68:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004a6c:	4a72      	ldr	r2, [pc, #456]	; (8004c38 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004a6e:	f7fd fec5 	bl	80027fc <_Z8ecef2nedPfS_S_S_>

				EKF.xned = vned[0];
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	4a6e      	ldr	r2, [pc, #440]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004a76:	f8c2 32b4 	str.w	r3, [r2, #692]	; 0x2b4
				EKF.yned = vned[1];
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	4a6c      	ldr	r2, [pc, #432]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004a7e:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8
				EKF.v_ground = gpsData.rmcstruct.speed * 0.514444444; //Knot to m/s
 8004a82:	4b6a      	ldr	r3, [pc, #424]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fb fcce 	bl	8000428 <__aeabi_f2d>
 8004a8c:	a360      	add	r3, pc, #384	; (adr r3, 8004c10 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f7fb fd21 	bl	80004d8 <__aeabi_dmul>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7fb fff3 	bl	8000a88 <__aeabi_d2f>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4a62      	ldr	r2, [pc, #392]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004aa6:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc

				float deg2rad = M_PI/180.0;
 8004aaa:	4b64      	ldr	r3, [pc, #400]	; (8004c3c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004aac:	67fb      	str	r3, [r7, #124]	; 0x7c
				EKF.vgpsxned = EKF.v_ground * cos(gpsData.rmcstruct.course * deg2rad);
 8004aae:	4b60      	ldr	r3, [pc, #384]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004ab0:	f8d3 42bc 	ldr.w	r4, [r3, #700]	; 0x2bc
 8004ab4:	4b5d      	ldr	r3, [pc, #372]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc f942 	bl	8000d44 <__aeabi_fmul>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd fdcc 	bl	8002660 <_ZSt3cosf>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4619      	mov	r1, r3
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7fc f939 	bl	8000d44 <__aeabi_fmul>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b56      	ldr	r3, [pc, #344]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004ad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
				EKF.vgpsyned = EKF.v_ground * sin(gpsData.rmcstruct.course * deg2rad);
 8004adc:	4b54      	ldr	r3, [pc, #336]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004ade:	f8d3 42bc 	ldr.w	r4, [r3, #700]	; 0x2bc
 8004ae2:	4b52      	ldr	r3, [pc, #328]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fc f92b 	bl	8000d44 <__aeabi_fmul>
 8004aee:	4603      	mov	r3, r0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd fdc1 	bl	8002678 <_ZSt3sinf>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4619      	mov	r1, r3
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7fc f922 	bl	8000d44 <__aeabi_fmul>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004b06:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

		//else {
		//	EKF.Qgps = 400 * gpsData.ggastruct.HDOP;
		//}

		if(mag_counter == MAG_CLOCK_RATE) {
 8004b0a:	4b46      	ldr	r3, [pc, #280]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d146      	bne.n	8004ba0 <HAL_TIM_PeriodElapsedCallback+0x210>
			mag_counter = 0;
 8004b12:	4b44      	ldr	r3, [pc, #272]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 8004b18:	4a49      	ldr	r2, [pc, #292]	; (8004c40 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004b1a:	494a      	ldr	r1, [pc, #296]	; (8004c44 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004b1c:	484a      	ldr	r0, [pc, #296]	; (8004c48 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004b1e:	f7fc fb9d 	bl	800125c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 8004b22:	4b49      	ldr	r3, [pc, #292]	; (8004c48 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b28:	4a46      	ldr	r2, [pc, #280]	; (8004c44 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004b2a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8004b2e:	4a44      	ldr	r2, [pc, #272]	; (8004c40 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004b30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fd53 	bl	80035e0 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 8004b3a:	4b44      	ldr	r3, [pc, #272]	; (8004c4c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b40:	84bb      	strh	r3, [r7, #36]	; 0x24
			mag[1] = MAG_Y_CALIB;
 8004b42:	4b43      	ldr	r3, [pc, #268]	; (8004c50 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b48:	84fb      	strh	r3, [r7, #38]	; 0x26
			mag[2] = MAG_Z_CALIB;
 8004b4a:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b50:	853b      	strh	r3, [r7, #40]	; 0x28

			int16_t acc[3];
			acc[0] = accX;
 8004b52:	4b41      	ldr	r3, [pc, #260]	; (8004c58 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc fad0 	bl	80010fc <__aeabi_f2iz>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	b21b      	sxth	r3, r3
 8004b60:	83bb      	strh	r3, [r7, #28]
			acc[1] = accY;
 8004b62:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fc fac8 	bl	80010fc <__aeabi_f2iz>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	83fb      	strh	r3, [r7, #30]
			acc[2] = accZ;
 8004b72:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc fac0 	bl	80010fc <__aeabi_f2iz>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	843b      	strh	r3, [r7, #32]
			euler_angles = DCM2Euler(acc, mag);
 8004b82:	4c38      	ldr	r4, [pc, #224]	; (8004c64 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004b84:	463b      	mov	r3, r7
 8004b86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004b8a:	f107 011c 	add.w	r1, r7, #28
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fb08 	bl	80041a4 <_Z9DCM2EulerPsS_>
 8004b94:	4623      	mov	r3, r4
 8004b96:	463a      	mov	r2, r7
 8004b98:	6810      	ldr	r0, [r2, #0]
 8004b9a:	6851      	ldr	r1, [r2, #4]
 8004b9c:	6892      	ldr	r2, [r2, #8]
 8004b9e:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 8004ba0:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	2b28      	cmp	r3, #40	; 0x28
 8004ba6:	d125      	bne.n	8004bf4 <HAL_TIM_PeriodElapsedCallback+0x264>
			  camera_counter = 0;
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004bb0:	4a2e      	ldr	r2, [pc, #184]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004bb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bb4:	c303      	stmia	r3!, {r0, r1}
 8004bb6:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004bba:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8004bbe:	b21b      	sxth	r3, r3
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fc f86b 	bl	8000c9c <__aeabi_i2f>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4929      	ldr	r1, [pc, #164]	; (8004c70 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc f96e 	bl	8000eac <__aeabi_fdiv>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004bd6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

			  if(!cam_data.detected) {
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_TIM_PeriodElapsedCallback+0x25c>
				  EKF.Qc = 9e9;
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004be6:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8004bea:	e003      	b.n	8004bf4 <HAL_TIM_PeriodElapsedCallback+0x264>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004bee:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004bf0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  }
		}

		if(get_ucounter() == 1) {
 8004bf4:	f7fd fef4 	bl	80029e0 <get_ucounter>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d039      	beq.n	8004c7c <HAL_TIM_PeriodElapsedCallback+0x2ec>
			request_range();
 8004c08:	f7fd fe96 	bl	8002938 <request_range>
 8004c0c:	e0f7      	b.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x46e>
 8004c0e:	bf00      	nop
 8004c10:	31d2d84c 	.word	0x31d2d84c
 8004c14:	3fe07654 	.word	0x3fe07654
 8004c18:	20000954 	.word	0x20000954
 8004c1c:	200018c0 	.word	0x200018c0
 8004c20:	200018c2 	.word	0x200018c2
 8004c24:	200018c4 	.word	0x200018c4
 8004c28:	200018c6 	.word	0x200018c6
 8004c2c:	20001974 	.word	0x20001974
 8004c30:	20000e70 	.word	0x20000e70
 8004c34:	2000190c 	.word	0x2000190c
 8004c38:	20000c00 	.word	0x20000c00
 8004c3c:	3c8efa35 	.word	0x3c8efa35
 8004c40:	20001950 	.word	0x20001950
 8004c44:	2000194e 	.word	0x2000194e
 8004c48:	2000194c 	.word	0x2000194c
 8004c4c:	20001952 	.word	0x20001952
 8004c50:	20001954 	.word	0x20001954
 8004c54:	20001956 	.word	0x20001956
 8004c58:	20000bc4 	.word	0x20000bc4
 8004c5c:	20000bc8 	.word	0x20000bc8
 8004c60:	20000bcc 	.word	0x20000bcc
 8004c64:	20001938 	.word	0x20001938
 8004c68:	2000192c 	.word	0x2000192c
 8004c6c:	20001920 	.word	0x20001920
 8004c70:	42c80000 	.word	0x42c80000
 8004c74:	50061c46 	.word	0x50061c46
 8004c78:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8004c7c:	f7fd feb0 	bl	80029e0 <get_ucounter>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b14      	cmp	r3, #20
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80b6 	beq.w	8004dfe <HAL_TIM_PeriodElapsedCallback+0x46e>

		  sonar_range = getRange();
 8004c92:	f7fd fe6b 	bl	800296c <getRange>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b6f      	ldr	r3, [pc, #444]	; (8004e58 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8004c9c:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8004c9e:	4b6f      	ldr	r3, [pc, #444]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6f      	ldr	r2, [pc, #444]	; (8004e60 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004ca4:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 8004ca6:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6f      	ldr	r2, [pc, #444]	; (8004e68 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8004cac:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 8004cae:	4b6f      	ldr	r3, [pc, #444]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	496f      	ldr	r1, [pc, #444]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fc f845 	bl	8000d44 <__aeabi_fmul>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd fe99 	bl	80029f4 <_ZSt3absf>
 8004cc2:	67b8      	str	r0, [r7, #120]	; 0x78
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 8004cc4:	4b69      	ldr	r3, [pc, #420]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4969      	ldr	r1, [pc, #420]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fc f83a 	bl	8000d44 <__aeabi_fmul>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fe8e 	bl	80029f4 <_ZSt3absf>
 8004cd8:	6778      	str	r0, [r7, #116]	; 0x74
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 8004cda:	4b5f      	ldr	r3, [pc, #380]	; (8004e58 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fb ffd8 	bl	8000c94 <__aeabi_ui2f>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fb fb9e 	bl	8000428 <__aeabi_f2d>
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	4b60      	ldr	r3, [pc, #384]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004cf2:	f7fb fd1b 	bl	800072c <__aeabi_ddiv>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4614      	mov	r4, r2
 8004cfc:	461d      	mov	r5, r3
 8004cfe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004d00:	f7fd fcae 	bl	8002660 <_ZSt3cosf>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fb fb8e 	bl	8000428 <__aeabi_f2d>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4620      	mov	r0, r4
 8004d12:	4629      	mov	r1, r5
 8004d14:	f7fb fbe0 	bl	80004d8 <__aeabi_dmul>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	461d      	mov	r5, r3
 8004d20:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004d22:	f7fd fc9d 	bl	8002660 <_ZSt3cosf>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fb7d 	bl	8000428 <__aeabi_f2d>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4620      	mov	r0, r4
 8004d34:	4629      	mov	r1, r5
 8004d36:	f7fb fbcf 	bl	80004d8 <__aeabi_dmul>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	f7fb fea1 	bl	8000a88 <__aeabi_d2f>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4a44      	ldr	r2, [pc, #272]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004d4a:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8004d4c:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8004d50:	673b      	str	r3, [r7, #112]	; 0x70
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8004d52:	4b42      	ldr	r3, [pc, #264]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a42      	ldr	r2, [pc, #264]	; (8004e60 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fb fee7 	bl	8000b30 <__aeabi_fsub>
 8004d62:	4603      	mov	r3, r0
 8004d64:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fc f8a0 	bl	8000eac <__aeabi_fdiv>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b3c      	ldr	r3, [pc, #240]	; (8004e64 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004d72:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd fe3b 	bl	80029f4 <_ZSt3absf>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2201      	movs	r2, #1
 8004d82:	4614      	mov	r4, r2
 8004d84:	493c      	ldr	r1, [pc, #240]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc f998 	bl	80010bc <__aeabi_fcmpgt>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PeriodElapsedCallback+0x406>
 8004d92:	2300      	movs	r3, #0
 8004d94:	461c      	mov	r4, r3
 8004d96:	b2e3      	uxtb	r3, r4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x41c>
			  sonar_alt = sonar_alt_;
 8004d9c:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2e      	ldr	r2, [pc, #184]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004da2:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 8004da4:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2e      	ldr	r2, [pc, #184]	; (8004e64 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004daa:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4932      	ldr	r1, [pc, #200]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc f982 	bl	80010bc <__aeabi_fcmpgt>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_TIM_PeriodElapsedCallback+0x448>
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb fb30 	bl	8000428 <__aeabi_f2d>
 8004dc8:	a321      	add	r3, pc, #132	; (adr r3, 8004e50 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb fdf5 	bl	80009bc <__aeabi_dcmplt>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_TIM_PeriodElapsedCallback+0x45a>
			  EKF.Qs = 9e9;
 8004dd8:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8004ddc:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
			  EKF.salt = 50;
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8004de4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8004de8:	e009      	b.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x46e>
		  }

		  else {
			  EKF.Qs = 0.25;
 8004dea:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004dec:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004df0:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
			  EKF.salt = 1;
 8004df4:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004df6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004dfa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		  }


		}

		if(get_b_counter() == 1) {
 8004dfe:	f7fd fc0b 	bl	8002618 <get_b_counter>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_TIM_PeriodElapsedCallback+0x488>
			write_ut();
 8004e12:	f7fd fa01 	bl	8002218 <write_ut>
 8004e16:	e069      	b.n	8004eec <HAL_TIM_PeriodElapsedCallback+0x55c>
		}

		else if(get_b_counter() == 5) { //5 ms
 8004e18:	f7fd fbfe 	bl	8002618 <get_b_counter>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d031      	beq.n	8004e90 <HAL_TIM_PeriodElapsedCallback+0x500>
			bmp.uncomp.temp = read_ut ();
 8004e2c:	f7fd fa0c 	bl	8002248 <read_ut>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb ff32 	bl	8000c9c <__aeabi_i2f>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004e3c:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8004e3e:	4813      	ldr	r0, [pc, #76]	; (8004e8c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004e40:	f7fd fa1c 	bl	800227c <get_temp>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004e48:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 8004e4a:	f7fd fa6f 	bl	800232c <write_up>
 8004e4e:	e04d      	b.n	8004eec <HAL_TIM_PeriodElapsedCallback+0x55c>
 8004e50:	33333333 	.word	0x33333333
 8004e54:	3fd33333 	.word	0x3fd33333
 8004e58:	200018bc 	.word	0x200018bc
 8004e5c:	200018ac 	.word	0x200018ac
 8004e60:	200018b0 	.word	0x200018b0
 8004e64:	200018b4 	.word	0x200018b4
 8004e68:	200018b8 	.word	0x200018b8
 8004e6c:	20000c3c 	.word	0x20000c3c
 8004e70:	3c8e8a72 	.word	0x3c8e8a72
 8004e74:	40590000 	.word	0x40590000
 8004e78:	40e00000 	.word	0x40e00000
 8004e7c:	40c00000 	.word	0x40c00000
 8004e80:	20000e70 	.word	0x20000e70
 8004e84:	50061c46 	.word	0x50061c46
 8004e88:	42480000 	.word	0x42480000
 8004e8c:	200018c8 	.word	0x200018c8
		}

		else if(get_b_counter() == 12) { //
 8004e90:	f7fd fbc2 	bl	8002618 <get_b_counter>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d023      	beq.n	8004eec <HAL_TIM_PeriodElapsedCallback+0x55c>
			bmp.uncomp.press = read_up (bmp.oss);
 8004ea4:	4ba8      	ldr	r3, [pc, #672]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004ea6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ea8:	f7fd fa60 	bl	800236c <read_up>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4aa6      	ldr	r2, [pc, #664]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004eb0:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 8004eb2:	4ea5      	ldr	r6, [pc, #660]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004eb4:	466d      	mov	r5, sp
 8004eb6:	f106 0410 	add.w	r4, r6, #16
 8004eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ec2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004ec6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004eca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ece:	f7fd fa7b 	bl	80023c8 <get_pressure>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4a9c      	ldr	r2, [pc, #624]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8004ed8:	489b      	ldr	r0, [pc, #620]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004eda:	f7fd fb41 	bl	8002560 <get_altitude>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4a99      	ldr	r2, [pc, #612]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004ee2:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 8004ee4:	4b98      	ldr	r3, [pc, #608]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	4a98      	ldr	r2, [pc, #608]	; (800514c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8004eea:	6013      	str	r3, [r2, #0]

		}
#endif
		//}

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 8004eec:	4b98      	ldr	r3, [pc, #608]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	f040 8384 	bne.w	80055fe <HAL_TIM_PeriodElapsedCallback+0xc6e>
			_controller_timer = controller_timer;
 8004ef6:	4b97      	ldr	r3, [pc, #604]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a97      	ldr	r2, [pc, #604]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8004efc:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 8004efe:	f001 f9a7 	bl	8006250 <HAL_GetTick>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	4b93      	ldr	r3, [pc, #588]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004f08:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 8004f0a:	4b92      	ldr	r3, [pc, #584]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b92      	ldr	r3, [pc, #584]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	4a91      	ldr	r2, [pc, #580]	; (800515c <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8004f16:	6013      	str	r3, [r2, #0]
		  controller_counter = 0;
 8004f18:	4b8d      	ldr	r3, [pc, #564]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	801a      	strh	r2, [r3, #0]


#ifdef UAV1

		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 8004f1e:	201d      	movs	r0, #29
 8004f20:	f7ff f832 	bl	8003f88 <_Z7GyroOkuh>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fb feb8 	bl	8000c9c <__aeabi_i2f>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b8c      	ldr	r3, [pc, #560]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f7fb fdfb 	bl	8000b30 <__aeabi_fsub>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4989      	ldr	r1, [pc, #548]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb ffb4 	bl	8000eac <__aeabi_fdiv>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b87      	ldr	r3, [pc, #540]	; (8005168 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8004f4a:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 8004f4c:	201f      	movs	r0, #31
 8004f4e:	f7ff f81b 	bl	8003f88 <_Z7GyroOkuh>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb fea1 	bl	8000c9c <__aeabi_i2f>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4b83      	ldr	r3, [pc, #524]	; (800516c <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fb fde4 	bl	8000b30 <__aeabi_fsub>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	497e      	ldr	r1, [pc, #504]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fb ff9d 	bl	8000eac <__aeabi_fdiv>
 8004f72:	4603      	mov	r3, r0
 8004f74:	461a      	mov	r2, r3
 8004f76:	4b7e      	ldr	r3, [pc, #504]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004f78:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8004f7a:	2021      	movs	r0, #33	; 0x21
 8004f7c:	f7ff f804 	bl	8003f88 <_Z7GyroOkuh>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb fe8a 	bl	8000c9c <__aeabi_i2f>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b7a      	ldr	r3, [pc, #488]	; (8005174 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fb fdcd 	bl	8000b30 <__aeabi_fsub>
 8004f96:	4603      	mov	r3, r0
 8004f98:	4972      	ldr	r1, [pc, #456]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb ff86 	bl	8000eac <__aeabi_fdiv>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b74      	ldr	r3, [pc, #464]	; (8005178 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004fa6:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8004fa8:	4b6f      	ldr	r3, [pc, #444]	; (8005168 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a73      	ldr	r2, [pc, #460]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004fae:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4
		  EKF.gyro[1] = -1*gyroY;
 8004fb2:	4b6f      	ldr	r3, [pc, #444]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	4a70      	ldr	r2, [pc, #448]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004fbc:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
		  EKF.gyro[2] = gyroZ;
 8004fc0:	4b6d      	ldr	r3, [pc, #436]	; (8005178 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a6d      	ldr	r2, [pc, #436]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004fc6:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 8004fca:	2032      	movs	r0, #50	; 0x32
 8004fcc:	f7ff f8b4 	bl	8004138 <_Z6AccOkuh>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fb fe62 	bl	8000c9c <__aeabi_i2f>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4a69      	ldr	r2, [pc, #420]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004fdc:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 8004fde:	2034      	movs	r0, #52	; 0x34
 8004fe0:	f7ff f8aa 	bl	8004138 <_Z6AccOkuh>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb fe58 	bl	8000c9c <__aeabi_i2f>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004ff0:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 8004ff2:	2036      	movs	r0, #54	; 0x36
 8004ff4:	f7ff f8a0 	bl	8004138 <_Z6AccOkuh>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fb fe4e 	bl	8000c9c <__aeabi_i2f>
 8005000:	4603      	mov	r3, r0
 8005002:	4a61      	ldr	r2, [pc, #388]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8005004:	6013      	str	r3, [r2, #0]

		  accX = (1+Sx) * accX + bx;
 8005006:	4b5e      	ldr	r3, [pc, #376]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4960      	ldr	r1, [pc, #384]	; (800518c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb fe99 	bl	8000d44 <__aeabi_fmul>
 8005012:	4603      	mov	r3, r0
 8005014:	495e      	ldr	r1, [pc, #376]	; (8005190 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7fb fd8a 	bl	8000b30 <__aeabi_fsub>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	4b57      	ldr	r3, [pc, #348]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8005022:	601a      	str	r2, [r3, #0]
		  accY = (1+Sy) * accY + by;
 8005024:	4b57      	ldr	r3, [pc, #348]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	495a      	ldr	r1, [pc, #360]	; (8005194 <HAL_TIM_PeriodElapsedCallback+0x804>)
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fe8a 	bl	8000d44 <__aeabi_fmul>
 8005030:	4603      	mov	r3, r0
 8005032:	4959      	ldr	r1, [pc, #356]	; (8005198 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb fd7d 	bl	8000b34 <__addsf3>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	4b51      	ldr	r3, [pc, #324]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8005040:	601a      	str	r2, [r3, #0]
		  accZ = (1+Sz) * accZ + bz;
 8005042:	4b51      	ldr	r3, [pc, #324]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4955      	ldr	r1, [pc, #340]	; (800519c <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb fe7b 	bl	8000d44 <__aeabi_fmul>
 800504e:	4603      	mov	r3, r0
 8005050:	4953      	ldr	r1, [pc, #332]	; (80051a0 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb fd6e 	bl	8000b34 <__addsf3>
 8005058:	4603      	mov	r3, r0
 800505a:	461a      	mov	r2, r3
 800505c:	4b4a      	ldr	r3, [pc, #296]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 800505e:	601a      	str	r2, [r3, #0]

		  accXc = (float)accX* 0.0078;
 8005060:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f7fb f9df 	bl	8000428 <__aeabi_f2d>
 800506a:	a335      	add	r3, pc, #212	; (adr r3, 8005140 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fa32 	bl	80004d8 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	f7fb fd04 	bl	8000a88 <__aeabi_d2f>
 8005080:	4603      	mov	r3, r0
 8005082:	4a48      	ldr	r2, [pc, #288]	; (80051a4 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8005084:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8005086:	4b3f      	ldr	r3, [pc, #252]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb f9cc 	bl	8000428 <__aeabi_f2d>
 8005090:	a32b      	add	r3, pc, #172	; (adr r3, 8005140 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f7fb fa1f 	bl	80004d8 <__aeabi_dmul>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	f7fb fcf1 	bl	8000a88 <__aeabi_d2f>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4a3f      	ldr	r2, [pc, #252]	; (80051a8 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80050aa:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 80050ac:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fb f9b9 	bl	8000428 <__aeabi_f2d>
 80050b6:	a322      	add	r3, pc, #136	; (adr r3, 8005140 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb fa0c 	bl	80004d8 <__aeabi_dmul>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4610      	mov	r0, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	f7fb fcde 	bl	8000a88 <__aeabi_d2f>
 80050cc:	4603      	mov	r3, r0
 80050ce:	4a37      	ldr	r2, [pc, #220]	; (80051ac <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80050d0:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 80050d2:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a29      	ldr	r2, [pc, #164]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80050d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.acc[1] = accY;// - AccYh;
 80050dc:	4b29      	ldr	r3, [pc, #164]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a26      	ldr	r2, [pc, #152]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80050e2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		  EKF.acc[2] = accZ;// - AccZh;
 80050e6:	4b28      	ldr	r3, [pc, #160]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a24      	ldr	r2, [pc, #144]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80050ec:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 80050f0:	4b2f      	ldr	r3, [pc, #188]	; (80051b0 <HAL_TIM_PeriodElapsedCallback+0x820>)
 80050f2:	66fb      	str	r3, [r7, #108]	; 0x6c
		  float roll_r  = deg2rad*EKF.state.angles[0];
 80050f4:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80050f6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80050fa:	492e      	ldr	r1, [pc, #184]	; (80051b4 <HAL_TIM_PeriodElapsedCallback+0x824>)
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fb fe21 	bl	8000d44 <__aeabi_fmul>
 8005102:	4603      	mov	r3, r0
 8005104:	66bb      	str	r3, [r7, #104]	; 0x68
		  float pitch_r = deg2rad*EKF.state.angles[1];
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8005108:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800510c:	4929      	ldr	r1, [pc, #164]	; (80051b4 <HAL_TIM_PeriodElapsedCallback+0x824>)
 800510e:	4618      	mov	r0, r3
 8005110:	f7fb fe18 	bl	8000d44 <__aeabi_fmul>
 8005114:	4603      	mov	r3, r0
 8005116:	667b      	str	r3, [r7, #100]	; 0x64

		  //g body components, Without * g
		  float gx = sin(pitch_r);
 8005118:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800511a:	f7fd faad 	bl	8002678 <_ZSt3sinf>
 800511e:	6638      	str	r0, [r7, #96]	; 0x60
		  float gy = cos(pitch_r)*sin(roll_r);
 8005120:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005122:	f7fd fa9d 	bl	8002660 <_ZSt3cosf>
 8005126:	4604      	mov	r4, r0
 8005128:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800512a:	f7fd faa5 	bl	8002678 <_ZSt3sinf>
 800512e:	4603      	mov	r3, r0
 8005130:	4619      	mov	r1, r3
 8005132:	4620      	mov	r0, r4
 8005134:	f7fb fe06 	bl	8000d44 <__aeabi_fmul>
 8005138:	e03e      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x828>
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w
 8005140:	8e8a71de 	.word	0x8e8a71de
 8005144:	3f7ff2e4 	.word	0x3f7ff2e4
 8005148:	200018c8 	.word	0x200018c8
 800514c:	200018a8 	.word	0x200018a8
 8005150:	200018c0 	.word	0x200018c0
 8005154:	20001910 	.word	0x20001910
 8005158:	20001914 	.word	0x20001914
 800515c:	20001918 	.word	0x20001918
 8005160:	20000be8 	.word	0x20000be8
 8005164:	41660000 	.word	0x41660000
 8005168:	20000bb8 	.word	0x20000bb8
 800516c:	20000bec 	.word	0x20000bec
 8005170:	20000bbc 	.word	0x20000bbc
 8005174:	20000bf0 	.word	0x20000bf0
 8005178:	20000bc0 	.word	0x20000bc0
 800517c:	20000e70 	.word	0x20000e70
 8005180:	20000bc4 	.word	0x20000bc4
 8005184:	20000bc8 	.word	0x20000bc8
 8005188:	20000bcc 	.word	0x20000bcc
 800518c:	3f7f3b64 	.word	0x3f7f3b64
 8005190:	3efae148 	.word	0x3efae148
 8005194:	3f7e978d 	.word	0x3f7e978d
 8005198:	414d0a3d 	.word	0x414d0a3d
 800519c:	3f797f63 	.word	0x3f797f63
 80051a0:	404d1eb8 	.word	0x404d1eb8
 80051a4:	20000bd0 	.word	0x20000bd0
 80051a8:	20000bd4 	.word	0x20000bd4
 80051ac:	20000bd8 	.word	0x20000bd8
 80051b0:	411cf5c3 	.word	0x411cf5c3
 80051b4:	3c8e8a72 	.word	0x3c8e8a72
 80051b8:	4603      	mov	r3, r0
 80051ba:	65fb      	str	r3, [r7, #92]	; 0x5c
		  float gz = cos(roll_r)*cos(pitch_r);
 80051bc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80051be:	f7fd fa4f 	bl	8002660 <_ZSt3cosf>
 80051c2:	4604      	mov	r4, r0
 80051c4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80051c6:	f7fd fa4b 	bl	8002660 <_ZSt3cosf>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4619      	mov	r1, r3
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7fb fdb8 	bl	8000d44 <__aeabi_fmul>
 80051d4:	4603      	mov	r3, r0
 80051d6:	65bb      	str	r3, [r7, #88]	; 0x58



		  accXc -= gx;
 80051d8:	4b98      	ldr	r3, [pc, #608]	; (800543c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb fca6 	bl	8000b30 <__aeabi_fsub>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b94      	ldr	r3, [pc, #592]	; (800543c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 80051ea:	601a      	str	r2, [r3, #0]
		  accYc -= gy;
 80051ec:	4b94      	ldr	r3, [pc, #592]	; (8005440 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fb fc9c 	bl	8000b30 <__aeabi_fsub>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b90      	ldr	r3, [pc, #576]	; (8005440 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 80051fe:	601a      	str	r2, [r3, #0]
		  accZc -= gz;
 8005200:	4b90      	ldr	r3, [pc, #576]	; (8005444 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb fc92 	bl	8000b30 <__aeabi_fsub>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	4b8c      	ldr	r3, [pc, #560]	; (8005444 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8005212:	601a      	str	r2, [r3, #0]

		  //Body to Local
		  accXm = accXc*cos(pitch_r) - accZc*cos(roll_r)*sin(pitch_r) - accYc*sin(roll_r)*sin(pitch_r);
 8005214:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005216:	f7fd fa23 	bl	8002660 <_ZSt3cosf>
 800521a:	4602      	mov	r2, r0
 800521c:	4b87      	ldr	r3, [pc, #540]	; (800543c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7fb fd8e 	bl	8000d44 <__aeabi_fmul>
 8005228:	4603      	mov	r3, r0
 800522a:	461c      	mov	r4, r3
 800522c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800522e:	f7fd fa17 	bl	8002660 <_ZSt3cosf>
 8005232:	4602      	mov	r2, r0
 8005234:	4b83      	ldr	r3, [pc, #524]	; (8005444 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fb fd82 	bl	8000d44 <__aeabi_fmul>
 8005240:	4603      	mov	r3, r0
 8005242:	461d      	mov	r5, r3
 8005244:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005246:	f7fd fa17 	bl	8002678 <_ZSt3sinf>
 800524a:	4603      	mov	r3, r0
 800524c:	4619      	mov	r1, r3
 800524e:	4628      	mov	r0, r5
 8005250:	f7fb fd78 	bl	8000d44 <__aeabi_fmul>
 8005254:	4603      	mov	r3, r0
 8005256:	4619      	mov	r1, r3
 8005258:	4620      	mov	r0, r4
 800525a:	f7fb fc69 	bl	8000b30 <__aeabi_fsub>
 800525e:	4603      	mov	r3, r0
 8005260:	461c      	mov	r4, r3
 8005262:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005264:	f7fd fa08 	bl	8002678 <_ZSt3sinf>
 8005268:	4602      	mov	r2, r0
 800526a:	4b75      	ldr	r3, [pc, #468]	; (8005440 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fb fd67 	bl	8000d44 <__aeabi_fmul>
 8005276:	4603      	mov	r3, r0
 8005278:	461d      	mov	r5, r3
 800527a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800527c:	f7fd f9fc 	bl	8002678 <_ZSt3sinf>
 8005280:	4603      	mov	r3, r0
 8005282:	4619      	mov	r1, r3
 8005284:	4628      	mov	r0, r5
 8005286:	f7fb fd5d 	bl	8000d44 <__aeabi_fmul>
 800528a:	4603      	mov	r3, r0
 800528c:	4619      	mov	r1, r3
 800528e:	4620      	mov	r0, r4
 8005290:	f7fb fc4e 	bl	8000b30 <__aeabi_fsub>
 8005294:	4603      	mov	r3, r0
 8005296:	461a      	mov	r2, r3
 8005298:	4b6b      	ldr	r3, [pc, #428]	; (8005448 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 800529a:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 800529c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800529e:	f7fd f9df 	bl	8002660 <_ZSt3cosf>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b66      	ldr	r3, [pc, #408]	; (8005440 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fb fd4a 	bl	8000d44 <__aeabi_fmul>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461c      	mov	r4, r3
 80052b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80052b6:	f7fd f9df 	bl	8002678 <_ZSt3sinf>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b61      	ldr	r3, [pc, #388]	; (8005444 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f7fb fd3e 	bl	8000d44 <__aeabi_fmul>
 80052c8:	4603      	mov	r3, r0
 80052ca:	4619      	mov	r1, r3
 80052cc:	4620      	mov	r0, r4
 80052ce:	f7fb fc2f 	bl	8000b30 <__aeabi_fsub>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b5d      	ldr	r3, [pc, #372]	; (800544c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 80052d8:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) + accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 80052da:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80052dc:	f7fd f9c0 	bl	8002660 <_ZSt3cosf>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b58      	ldr	r3, [pc, #352]	; (8005444 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fb fd2b 	bl	8000d44 <__aeabi_fmul>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461c      	mov	r4, r3
 80052f2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80052f4:	f7fd f9b4 	bl	8002660 <_ZSt3cosf>
 80052f8:	4603      	mov	r3, r0
 80052fa:	4619      	mov	r1, r3
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7fb fd21 	bl	8000d44 <__aeabi_fmul>
 8005302:	4603      	mov	r3, r0
 8005304:	461c      	mov	r4, r3
 8005306:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005308:	f7fd f9b6 	bl	8002678 <_ZSt3sinf>
 800530c:	4602      	mov	r2, r0
 800530e:	4b4b      	ldr	r3, [pc, #300]	; (800543c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f7fb fd15 	bl	8000d44 <__aeabi_fmul>
 800531a:	4603      	mov	r3, r0
 800531c:	4619      	mov	r1, r3
 800531e:	4620      	mov	r0, r4
 8005320:	f7fb fc08 	bl	8000b34 <__addsf3>
 8005324:	4603      	mov	r3, r0
 8005326:	461c      	mov	r4, r3
 8005328:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800532a:	f7fd f999 	bl	8002660 <_ZSt3cosf>
 800532e:	4602      	mov	r2, r0
 8005330:	4b43      	ldr	r3, [pc, #268]	; (8005440 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f7fb fd04 	bl	8000d44 <__aeabi_fmul>
 800533c:	4603      	mov	r3, r0
 800533e:	461d      	mov	r5, r3
 8005340:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005342:	f7fd f999 	bl	8002678 <_ZSt3sinf>
 8005346:	4603      	mov	r3, r0
 8005348:	4619      	mov	r1, r3
 800534a:	4628      	mov	r0, r5
 800534c:	f7fb fcfa 	bl	8000d44 <__aeabi_fmul>
 8005350:	4603      	mov	r3, r0
 8005352:	4619      	mov	r1, r3
 8005354:	4620      	mov	r0, r4
 8005356:	f7fb fbed 	bl	8000b34 <__addsf3>
 800535a:	4603      	mov	r3, r0
 800535c:	461a      	mov	r2, r3
 800535e:	4b3c      	ldr	r3, [pc, #240]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8005360:	601a      	str	r2, [r3, #0]


		  accXm *= g; accYm *= g; accZm *= g;
 8005362:	4b39      	ldr	r3, [pc, #228]	; (8005448 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005368:	4618      	mov	r0, r3
 800536a:	f7fb fceb 	bl	8000d44 <__aeabi_fmul>
 800536e:	4603      	mov	r3, r0
 8005370:	461a      	mov	r2, r3
 8005372:	4b35      	ldr	r3, [pc, #212]	; (8005448 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	4b35      	ldr	r3, [pc, #212]	; (800544c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb fce1 	bl	8000d44 <__aeabi_fmul>
 8005382:	4603      	mov	r3, r0
 8005384:	461a      	mov	r2, r3
 8005386:	4b31      	ldr	r3, [pc, #196]	; (800544c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	4b31      	ldr	r3, [pc, #196]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005390:	4618      	mov	r0, r3
 8005392:	f7fb fcd7 	bl	8000d44 <__aeabi_fmul>
 8005396:	4603      	mov	r3, r0
 8005398:	461a      	mov	r2, r3
 800539a:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 800539c:	601a      	str	r2, [r3, #0]

		  //EKF.acc_vert = (accZc - 1.0)  * g;
		  EKF.acc_vert = accZm;
 800539e:	4b2c      	ldr	r3, [pc, #176]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053a4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
		  float accXm = ax_b  * g;
		  float accYm = (accYc-AccYh)  * g;
		  */


		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 80053a8:	4b27      	ldr	r3, [pc, #156]	; (8005448 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a29      	ldr	r2, [pc, #164]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053ae:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
		  EKF.accYm = accYm;
 80053b2:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a27      	ldr	r2, [pc, #156]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053b8:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		  EKF.acc_pos_x = accXm;
 80053bc:	4b22      	ldr	r3, [pc, #136]	; (8005448 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a24      	ldr	r2, [pc, #144]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053c2:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
		  EKF.acc_pos_y = -accYm;
 80053c6:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053d0:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  EKF.sonar_alt = sonar_alt;
 80053d4:	4b20      	ldr	r3, [pc, #128]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053da:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
		  EKF.baro_alt = baro_alt;
 80053de:	4b1f      	ldr	r3, [pc, #124]	; (800545c <HAL_TIM_PeriodElapsedCallback+0xacc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053e4:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053f2:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4

		  EKF.Run();
 80053f6:	4817      	ldr	r0, [pc, #92]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053f8:	f00b f888 	bl	801050c <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 80053fc:	4b15      	ldr	r3, [pc, #84]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80053fe:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8005404:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005408:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 800540e:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005412:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8005418:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 800541a:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800541c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005420:	4a10      	ldr	r2, [pc, #64]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8005422:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005426:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800542a:	4a0e      	ldr	r2, [pc, #56]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 800542c:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005430:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005434:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8005436:	6153      	str	r3, [r2, #20]
 8005438:	e016      	b.n	8005468 <HAL_TIM_PeriodElapsedCallback+0xad8>
 800543a:	bf00      	nop
 800543c:	20000bd0 	.word	0x20000bd0
 8005440:	20000bd4 	.word	0x20000bd4
 8005444:	20000bd8 	.word	0x20000bd8
 8005448:	20000bdc 	.word	0x20000bdc
 800544c:	20000be0 	.word	0x20000be0
 8005450:	20000be4 	.word	0x20000be4
 8005454:	20000e70 	.word	0x20000e70
 8005458:	200018ac 	.word	0x200018ac
 800545c:	200018a8 	.word	0x200018a8
 8005460:	20001938 	.word	0x20001938
 8005464:	20000c3c 	.word	0x20000c3c


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8005468:	4b67      	ldr	r3, [pc, #412]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe f9bb 	bl	80037e8 <_Z9checkModei>

			controller.z_vel = EKF.vz;
 8005472:	4b66      	ldr	r3, [pc, #408]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8005474:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005478:	4a65      	ldr	r2, [pc, #404]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800547a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
			controller.z = EKF.alt_gnd;
 800547e:	4b63      	ldr	r3, [pc, #396]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8005480:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005484:	4a62      	ldr	r2, [pc, #392]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005486:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

			controller.vx	 = EKF.vx;
 800548a:	4b60      	ldr	r3, [pc, #384]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800548c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005490:	4a5f      	ldr	r2, [pc, #380]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005492:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			controller.x     = EKF.x;
 8005496:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8005498:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800549c:	4a5c      	ldr	r2, [pc, #368]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800549e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

			controller.vy	 = EKF.vy;
 80054a2:	4b5a      	ldr	r3, [pc, #360]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80054a4:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80054a8:	4a59      	ldr	r2, [pc, #356]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80054aa:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
			controller.y     = EKF.y;
 80054ae:	4b57      	ldr	r3, [pc, #348]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80054b0:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80054b4:	4a56      	ldr	r2, [pc, #344]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80054b6:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0

		  controller.state = state;
 80054ba:	4b55      	ldr	r3, [pc, #340]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80054bc:	4a55      	ldr	r2, [pc, #340]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 80054be:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80054c2:	4615      	mov	r5, r2
 80054c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 80054d0:	4b4f      	ldr	r3, [pc, #316]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80054d2:	4a51      	ldr	r2, [pc, #324]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80054d4:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80054d8:	4615      	mov	r5, r2
 80054da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e2:	682b      	ldr	r3, [r5, #0]
 80054e4:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 80054e6:	4b48      	ldr	r3, [pc, #288]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fb fbd6 	bl	8000c9c <__aeabi_i2f>
 80054f0:	4603      	mov	r3, r0
 80054f2:	4a47      	ldr	r2, [pc, #284]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80054f4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		  controller.ch2 = ch[1];
 80054f8:	4b43      	ldr	r3, [pc, #268]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fb fbcd 	bl	8000c9c <__aeabi_i2f>
 8005502:	4603      	mov	r3, r0
 8005504:	4a42      	ldr	r2, [pc, #264]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005506:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
		  controller.ch1 = ch[0];
 800550a:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fb fbc4 	bl	8000c9c <__aeabi_i2f>
 8005514:	4603      	mov	r3, r0
 8005516:	4a3e      	ldr	r2, [pc, #248]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005518:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
		  controller.Run();
 800551c:	483c      	ldr	r0, [pc, #240]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800551e:	f006 f9b9 	bl	800b894 <_ZN10Controller3RunEv>

		  controller_output[0] = controller.controller_output_pwm[0];
 8005522:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005524:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005528:	4a3c      	ldr	r2, [pc, #240]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800552a:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 800552c:	4b38      	ldr	r3, [pc, #224]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800552e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005532:	4a3a      	ldr	r2, [pc, #232]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8005534:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8005536:	4b36      	ldr	r3, [pc, #216]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005538:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800553c:	4a37      	ldr	r2, [pc, #220]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800553e:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005542:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8005546:	4a35      	ldr	r2, [pc, #212]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8005548:	60d3      	str	r3, [r2, #12]
#endif
		#ifdef UAV1

		  if(armed) {
 800554a:	4b35      	ldr	r3, [pc, #212]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d031      	beq.n	80055b6 <HAL_TIM_PeriodElapsedCallback+0xc26>



			  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8005552:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f240 52db 	movw	r2, #1499	; 0x5db
 800555a:	4293      	cmp	r3, r2
 800555c:	dc1a      	bgt.n	8005594 <HAL_TIM_PeriodElapsedCallback+0xc04>
 800555e:	4b2a      	ldr	r3, [pc, #168]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f240 424c 	movw	r2, #1100	; 0x44c
 8005566:	4293      	cmp	r3, r2
 8005568:	dd14      	ble.n	8005594 <HAL_TIM_PeriodElapsedCallback+0xc04>

				  controller_output_2[0] = controller.controller_output_pwm2[0];
 800556a:	4b29      	ldr	r3, [pc, #164]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800556c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005570:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8005572:	6013      	str	r3, [r2, #0]
				  controller_output_2[1] = controller.controller_output_pwm2[1];
 8005574:	4b26      	ldr	r3, [pc, #152]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005576:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 800557c:	6053      	str	r3, [r2, #4]
				  controller_output_2[2] = controller.controller_output_pwm2[2];
 800557e:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005580:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005584:	4a27      	ldr	r2, [pc, #156]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8005586:	6093      	str	r3, [r2, #8]
				  controller_output_2[3] = controller.controller_output_pwm2[3];
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800558a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800558e:	4a25      	ldr	r2, [pc, #148]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8005590:	60d3      	str	r3, [r2, #12]
 8005592:	e020      	b.n	80055d6 <HAL_TIM_PeriodElapsedCallback+0xc46>

			  }

			  else {
				  controller_output_2[0] = 1000;
 8005594:	4b23      	ldr	r3, [pc, #140]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8005596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800559a:	601a      	str	r2, [r3, #0]
				  controller_output_2[1] = 1000;
 800559c:	4b21      	ldr	r3, [pc, #132]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 800559e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a2:	605a      	str	r2, [r3, #4]
				  controller_output_2[2] = 1000;
 80055a4:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80055a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055aa:	609a      	str	r2, [r3, #8]
				  controller_output_2[3] = 1000;
 80055ac:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80055ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	e00f      	b.n	80055d6 <HAL_TIM_PeriodElapsedCallback+0xc46>
			  }

		  }

		  else {
			  controller_output_2[0] = 1000;
 80055b6:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80055b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055bc:	601a      	str	r2, [r3, #0]
			  controller_output_2[1] = 1000;
 80055be:	4b19      	ldr	r3, [pc, #100]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80055c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055c4:	605a      	str	r2, [r3, #4]
			  controller_output_2[2] = 1000;
 80055c6:	4b17      	ldr	r3, [pc, #92]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80055c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055cc:	609a      	str	r2, [r3, #8]
			  controller_output_2[3] = 1000;
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80055d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055d4:	60da      	str	r2, [r3, #12]
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80055d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80055dc:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80055de:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80055e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80055e6:	4a0c      	ldr	r2, [pc, #48]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80055e8:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;
		 // SendTelem();
		  TelemPack();
 80055ea:	f7fe fb09 	bl	8003c00 <_Z9TelemPackv>
		  CheckFailsafe();
 80055ee:	f7fe f9f1 	bl	80039d4 <_Z13CheckFailsafev>
		  CheckSwarm();
 80055f2:	f7fe f9af 	bl	8003954 <_Z10CheckSwarmv>
		  PWMYaz();
 80055f6:	f7ff f84f 	bl	8004698 <_Z6PWMYazv>
		  SwitchMag();
 80055fa:	f7fe f945 	bl	8003888 <_Z9SwitchMagv>


		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 80055fe:	bf00      	nop
 8005600:	3784      	adds	r7, #132	; 0x84
 8005602:	46bd      	mov	sp, r7
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	bf00      	nop
 8005608:	20001810 	.word	0x20001810
 800560c:	20000e70 	.word	0x20000e70
 8005610:	200011b0 	.word	0x200011b0
 8005614:	20000c3c 	.word	0x20000c3c
 8005618:	20000c18 	.word	0x20000c18
 800561c:	200017e0 	.word	0x200017e0
 8005620:	200018a5 	.word	0x200018a5
 8005624:	200017f0 	.word	0x200017f0

08005628 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a55      	ldr	r2, [pc, #340]	; (8005788 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005634:	4293      	cmp	r3, r2
 8005636:	f040 80a2 	bne.w	800577e <HAL_TIM_IC_CaptureCallback+0x156>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	7f1b      	ldrb	r3, [r3, #28]
 800563e:	2b04      	cmp	r3, #4
 8005640:	f040 809d 	bne.w	800577e <HAL_TIM_IC_CaptureCallback+0x156>
	{
				IC_Val1 = IC_Val2;
 8005644:	4b51      	ldr	r3, [pc, #324]	; (800578c <HAL_TIM_IC_CaptureCallback+0x164>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a51      	ldr	r2, [pc, #324]	; (8005790 <HAL_TIM_IC_CaptureCallback+0x168>)
 800564a:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 800564c:	2108      	movs	r1, #8
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f004 fba6 	bl	8009da0 <HAL_TIM_ReadCapturedValue>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	4b4c      	ldr	r3, [pc, #304]	; (800578c <HAL_TIM_IC_CaptureCallback+0x164>)
 800565a:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 800565c:	4b4b      	ldr	r3, [pc, #300]	; (800578c <HAL_TIM_IC_CaptureCallback+0x164>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b4b      	ldr	r3, [pc, #300]	; (8005790 <HAL_TIM_IC_CaptureCallback+0x168>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	4a4b      	ldr	r2, [pc, #300]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005668:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 800566a:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	0fdb      	lsrs	r3, r3, #31
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d006      	beq.n	8005684 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8005676:	4b47      	ldr	r3, [pc, #284]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800567e:	33ff      	adds	r3, #255	; 0xff
 8005680:	4a44      	ldr	r2, [pc, #272]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005682:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 8005684:	4b43      	ldr	r3, [pc, #268]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800568c:	db06      	blt.n	800569c <HAL_TIM_IC_CaptureCallback+0x74>
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005696:	dc01      	bgt.n	800569c <HAL_TIM_IC_CaptureCallback+0x74>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_TIM_IC_CaptureCallback+0x76>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01c      	beq.n	80056dc <HAL_TIM_IC_CaptureCallback+0xb4>
					#ifdef UAV1
						ch_[i] = ch[i];
 80056a2:	4b3d      	ldr	r3, [pc, #244]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b21b      	sxth	r3, r3
 80056b0:	4619      	mov	r1, r3
 80056b2:	4b3a      	ldr	r3, [pc, #232]	; (800579c <HAL_TIM_IC_CaptureCallback+0x174>)
 80056b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b8:	4a39      	ldr	r2, [pc, #228]	; (80057a0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80056ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b21b      	sxth	r3, r3
 80056c4:	4619      	mov	r1, r3
 80056c6:	4b33      	ldr	r3, [pc, #204]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a34      	ldr	r2, [pc, #208]	; (800579c <HAL_TIM_IC_CaptureCallback+0x174>)
 80056cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 80056d0:	4b34      	ldr	r3, [pc, #208]	; (80057a4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a33      	ldr	r2, [pc, #204]	; (80057a4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	e015      	b.n	8005708 <HAL_TIM_IC_CaptureCallback+0xe0>
						ch_count++;
					#endif

					}

					else if(Diff > CH0) {
 80056dc:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bfcc      	ite	gt
 80056e8:	2301      	movgt	r3, #1
 80056ea:	2300      	movle	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 80056f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056f8:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 80056fa:	4b26      	ldr	r3, [pc, #152]	; (8005794 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a27      	ldr	r2, [pc, #156]	; (800579c <HAL_TIM_IC_CaptureCallback+0x174>)
 8005700:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 8005702:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8005704:	2201      	movs	r2, #1
 8005706:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8005708:	4b24      	ldr	r3, [pc, #144]	; (800579c <HAL_TIM_IC_CaptureCallback+0x174>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fcae 	bl	8004070 <_Z7pwm2angt>
 8005714:	4603      	mov	r3, r0
 8005716:	4a25      	ldr	r2, [pc, #148]	; (80057ac <HAL_TIM_IC_CaptureCallback+0x184>)
 8005718:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 800571a:	4b20      	ldr	r3, [pc, #128]	; (800579c <HAL_TIM_IC_CaptureCallback+0x174>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	b29b      	uxth	r3, r3
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fca5 	bl	8004070 <_Z7pwm2angt>
 8005726:	4603      	mov	r3, r0
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <HAL_TIM_IC_CaptureCallback+0x184>)
 800572a:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 800572c:	4b1f      	ldr	r3, [pc, #124]	; (80057ac <HAL_TIM_IC_CaptureCallback+0x184>)
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_TIM_IC_CaptureCallback+0x174>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	b29b      	uxth	r3, r3
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fcd4 	bl	80040e8 <_Z8pwm2ratet>
 8005740:	4603      	mov	r3, r0
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_TIM_IC_CaptureCallback+0x184>)
 8005744:	6153      	str	r3, [r2, #20]

				i++;
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b21b      	sxth	r3, r3
 800574c:	b29b      	uxth	r3, r3
 800574e:	3301      	adds	r3, #1
 8005750:	b29b      	uxth	r3, r3
 8005752:	b21a      	sxth	r2, r3
 8005754:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005756:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b21b      	sxth	r3, r3
 800575e:	4619      	mov	r1, r3
 8005760:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <HAL_TIM_IC_CaptureCallback+0x188>)
 8005762:	fb83 2301 	smull	r2, r3, r3, r1
 8005766:	105a      	asrs	r2, r3, #1
 8005768:	17cb      	asrs	r3, r1, #31
 800576a:	1ad2      	subs	r2, r2, r3
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	1aca      	subs	r2, r1, r3
 8005778:	b212      	sxth	r2, r2
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_TIM_IC_CaptureCallback+0x170>)
 800577c:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	2000099c 	.word	0x2000099c
 800578c:	20001800 	.word	0x20001800
 8005790:	20001804 	.word	0x20001804
 8005794:	20001808 	.word	0x20001808
 8005798:	2000180c 	.word	0x2000180c
 800579c:	20001810 	.word	0x20001810
 80057a0:	2000183c 	.word	0x2000183c
 80057a4:	20001908 	.word	0x20001908
 80057a8:	20001894 	.word	0x20001894
 80057ac:	20000c18 	.word	0x20000c18
 80057b0:	2e8ba2e9 	.word	0x2e8ba2e9

080057b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057b8:	b672      	cpsid	i
}
 80057ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057bc:	e7fe      	b.n	80057bc <Error_Handler+0x8>
	...

080057c0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10a      	bne.n	80057e6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d105      	bne.n	80057e6 <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 80057da:	480c      	ldr	r0, [pc, #48]	; (800580c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80057dc:	f006 fd64 	bl	800c2a8 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 80057e0:	480b      	ldr	r0, [pc, #44]	; (8005810 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80057e2:	f005 ff5d 	bl	800b6a0 <_ZN10ControllerC1Ev>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d105      	bne.n	8005802 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80057f6:	4806      	ldr	r0, [pc, #24]	; (8005810 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80057f8:	f006 fd18 	bl	800c22c <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 80057fc:	4803      	ldr	r0, [pc, #12]	; (800580c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80057fe:	f00a fef9 	bl	80105f4 <_ZN15Kalman_FiltresiD1Ev>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000e70 	.word	0x20000e70
 8005810:	200011b0 	.word	0x200011b0

08005814 <_GLOBAL__sub_I_hi2c1>:
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
 8005818:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800581c:	2001      	movs	r0, #1
 800581e:	f7ff ffcf 	bl	80057c0 <_Z41__static_initialization_and_destruction_0ii>
 8005822:	bd80      	pop	{r7, pc}

08005824 <_GLOBAL__sub_D_hi2c1>:
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
 8005828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800582c:	2000      	movs	r0, #0
 800582e:	f7ff ffc7 	bl	80057c0 <_Z41__static_initialization_and_destruction_0ii>
 8005832:	bd80      	pop	{r7, pc}

08005834 <moving_median_create>:

void
moving_median_create(movingMedian_t *context,
                     uint16_t filter_size,
                     uint16_t sample_time)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
 8005840:	4613      	mov	r3, r2
 8005842:	803b      	strh	r3, [r7, #0]
  free(context->buffer);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f00d fce3 	bl	8013214 <free>

  if (filter_size % 2 == 0)
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <moving_median_create+0x32>
  {
    context->size = filter_size - 1;
 800585a:	887b      	ldrh	r3, [r7, #2]
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	809a      	strh	r2, [r3, #4]
 8005864:	e002      	b.n	800586c <moving_median_create+0x38>
  }
  else
  {
    context->size = filter_size;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	887a      	ldrh	r2, [r7, #2]
 800586a:	809a      	strh	r2, [r3, #4]
  }

  context->buffer = (int16_t*)malloc(filter_size * sizeof(int16_t));
 800586c:	887b      	ldrh	r3, [r7, #2]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	4618      	mov	r0, r3
 8005872:	f00d fcc7 	bl	8013204 <malloc>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
  context->index = 0;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	80da      	strh	r2, [r3, #6]
  context->fill = 0;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	811a      	strh	r2, [r3, #8]
  context->filtered = 0;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	815a      	strh	r2, [r3, #10]
  context->sample_time = sample_time;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	883a      	ldrh	r2, [r7, #0]
 8005894:	819a      	strh	r2, [r3, #12]
  context->last_time = 0;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	611a      	str	r2, [r3, #16]
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <HAL_MspInit+0x5c>)
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	4a14      	ldr	r2, [pc, #80]	; (8005900 <HAL_MspInit+0x5c>)
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	6193      	str	r3, [r2, #24]
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <HAL_MspInit+0x5c>)
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <HAL_MspInit+0x5c>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	4a0e      	ldr	r2, [pc, #56]	; (8005900 <HAL_MspInit+0x5c>)
 80058c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058cc:	61d3      	str	r3, [r2, #28]
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <HAL_MspInit+0x5c>)
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_MspInit+0x60>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	4a04      	ldr	r2, [pc, #16]	; (8005904 <HAL_MspInit+0x60>)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr
 8005900:	40021000 	.word	0x40021000
 8005904:	40010000 	.word	0x40010000

08005908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a15      	ldr	r2, [pc, #84]	; (8005978 <HAL_I2C_MspInit+0x70>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d123      	bne.n	8005970 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_I2C_MspInit+0x74>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <HAL_I2C_MspInit+0x74>)
 800592e:	f043 0308 	orr.w	r3, r3, #8
 8005932:	6193      	str	r3, [r2, #24]
 8005934:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_I2C_MspInit+0x74>)
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005940:	23c0      	movs	r3, #192	; 0xc0
 8005942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005944:	2312      	movs	r3, #18
 8005946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005948:	2303      	movs	r3, #3
 800594a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800594c:	f107 0310 	add.w	r3, r7, #16
 8005950:	4619      	mov	r1, r3
 8005952:	480b      	ldr	r0, [pc, #44]	; (8005980 <HAL_I2C_MspInit+0x78>)
 8005954:	f001 f8aa 	bl	8006aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005958:	4b08      	ldr	r3, [pc, #32]	; (800597c <HAL_I2C_MspInit+0x74>)
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	4a07      	ldr	r2, [pc, #28]	; (800597c <HAL_I2C_MspInit+0x74>)
 800595e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005962:	61d3      	str	r3, [r2, #28]
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_I2C_MspInit+0x74>)
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005970:	bf00      	nop
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40005400 	.word	0x40005400
 800597c:	40021000 	.word	0x40021000
 8005980:	40010c00 	.word	0x40010c00

08005984 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <HAL_TIM_PWM_MspInit+0x34>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10b      	bne.n	80059ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_TIM_PWM_MspInit+0x38>)
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	4a08      	ldr	r2, [pc, #32]	; (80059bc <HAL_TIM_PWM_MspInit+0x38>)
 800599c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059a0:	6193      	str	r3, [r2, #24]
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_TIM_PWM_MspInit+0x38>)
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40021000 	.word	0x40021000

080059c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	; 0x28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c8:	f107 0318 	add.w	r3, r7, #24
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d114      	bne.n	8005a0a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059e0:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	61d3      	str	r3, [r2, #28]
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80059f8:	2200      	movs	r2, #0
 80059fa:	2101      	movs	r1, #1
 80059fc:	201c      	movs	r0, #28
 80059fe:	f000 fd50 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005a02:	201c      	movs	r0, #28
 8005a04:	f000 fd69 	bl	80064da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005a08:	e042      	b.n	8005a90 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a23      	ldr	r2, [pc, #140]	; (8005a9c <HAL_TIM_Base_MspInit+0xdc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d12c      	bne.n	8005a6e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a14:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	61d3      	str	r3, [r2, #28]
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a32:	f043 0308 	orr.w	r3, r3, #8
 8005a36:	6193      	str	r3, [r2, #24]
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a44:	2301      	movs	r3, #1
 8005a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a50:	f107 0318 	add.w	r3, r7, #24
 8005a54:	4619      	mov	r1, r3
 8005a56:	4812      	ldr	r0, [pc, #72]	; (8005aa0 <HAL_TIM_Base_MspInit+0xe0>)
 8005a58:	f001 f828 	bl	8006aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	201d      	movs	r0, #29
 8005a62:	f000 fd1e 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a66:	201d      	movs	r0, #29
 8005a68:	f000 fd37 	bl	80064da <HAL_NVIC_EnableIRQ>
}
 8005a6c:	e010      	b.n	8005a90 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <HAL_TIM_Base_MspInit+0xe4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10b      	bne.n	8005a90 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	4a06      	ldr	r2, [pc, #24]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a7e:	f043 0304 	orr.w	r3, r3, #4
 8005a82:	61d3      	str	r3, [r2, #28]
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <HAL_TIM_Base_MspInit+0xd8>)
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
}
 8005a90:	bf00      	nop
 8005a92:	3728      	adds	r7, #40	; 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40010c00 	.word	0x40010c00
 8005aa4:	40000800 	.word	0x40000800

08005aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ab0:	f107 0310 	add.w	r3, r7, #16
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <HAL_TIM_MspPostInit+0x8c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d131      	bne.n	8005b2c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <HAL_TIM_MspPostInit+0x90>)
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <HAL_TIM_MspPostInit+0x90>)
 8005ace:	f043 0308 	orr.w	r3, r3, #8
 8005ad2:	6193      	str	r3, [r2, #24]
 8005ad4:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <HAL_TIM_MspPostInit+0x90>)
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ae0:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <HAL_TIM_MspPostInit+0x90>)
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	4a14      	ldr	r2, [pc, #80]	; (8005b38 <HAL_TIM_MspPostInit+0x90>)
 8005ae6:	f043 0304 	orr.w	r3, r3, #4
 8005aea:	6193      	str	r3, [r2, #24]
 8005aec:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_TIM_MspPostInit+0x90>)
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005af8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005afe:	2302      	movs	r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b02:	2302      	movs	r3, #2
 8005b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b06:	f107 0310 	add.w	r3, r7, #16
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	480b      	ldr	r0, [pc, #44]	; (8005b3c <HAL_TIM_MspPostInit+0x94>)
 8005b0e:	f000 ffcd 	bl	8006aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005b12:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b20:	f107 0310 	add.w	r3, r7, #16
 8005b24:	4619      	mov	r1, r3
 8005b26:	4806      	ldr	r0, [pc, #24]	; (8005b40 <HAL_TIM_MspPostInit+0x98>)
 8005b28:	f000 ffc0 	bl	8006aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005b2c:	bf00      	nop
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	40010c00 	.word	0x40010c00
 8005b40:	40010800 	.word	0x40010800

08005b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08c      	sub	sp, #48	; 0x30
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4c:	f107 0320 	add.w	r3, r7, #32
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a96      	ldr	r2, [pc, #600]	; (8005db8 <HAL_UART_MspInit+0x274>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d159      	bne.n	8005c18 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b64:	4b95      	ldr	r3, [pc, #596]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	4a94      	ldr	r2, [pc, #592]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b6e:	6193      	str	r3, [r2, #24]
 8005b70:	4b92      	ldr	r3, [pc, #584]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b7c:	4b8f      	ldr	r3, [pc, #572]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	4a8e      	ldr	r2, [pc, #568]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005b82:	f043 0304 	orr.w	r3, r3, #4
 8005b86:	6193      	str	r3, [r2, #24]
 8005b88:	4b8c      	ldr	r3, [pc, #560]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba2:	f107 0320 	add.w	r3, r7, #32
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4885      	ldr	r0, [pc, #532]	; (8005dc0 <HAL_UART_MspInit+0x27c>)
 8005baa:	f000 ff7f 	bl	8006aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bbc:	f107 0320 	add.w	r3, r7, #32
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	487f      	ldr	r0, [pc, #508]	; (8005dc0 <HAL_UART_MspInit+0x27c>)
 8005bc4:	f000 ff72 	bl	8006aac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005bc8:	4b7e      	ldr	r3, [pc, #504]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005bca:	4a7f      	ldr	r2, [pc, #508]	; (8005dc8 <HAL_UART_MspInit+0x284>)
 8005bcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bce:	4b7d      	ldr	r3, [pc, #500]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bd4:	4b7b      	ldr	r3, [pc, #492]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bda:	4b7a      	ldr	r3, [pc, #488]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005bdc:	2280      	movs	r2, #128	; 0x80
 8005bde:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005be0:	4b78      	ldr	r3, [pc, #480]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005be6:	4b77      	ldr	r3, [pc, #476]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005bec:	4b75      	ldr	r3, [pc, #468]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005bee:	2220      	movs	r2, #32
 8005bf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005bf2:	4b74      	ldr	r3, [pc, #464]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bf8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005bfa:	4872      	ldr	r0, [pc, #456]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005bfc:	f000 fc96 	bl	800652c <HAL_DMA_Init>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8005c06:	f7ff fdd5 	bl	80057b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a6d      	ldr	r2, [pc, #436]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8005c10:	4a6c      	ldr	r2, [pc, #432]	; (8005dc4 <HAL_UART_MspInit+0x280>)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005c16:	e0cb      	b.n	8005db0 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==USART2)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a6b      	ldr	r2, [pc, #428]	; (8005dcc <HAL_UART_MspInit+0x288>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	f040 8087 	bne.w	8005d32 <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c24:	4b65      	ldr	r3, [pc, #404]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	4a64      	ldr	r2, [pc, #400]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2e:	61d3      	str	r3, [r2, #28]
 8005c30:	4b62      	ldr	r3, [pc, #392]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3c:	4b5f      	ldr	r3, [pc, #380]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	4a5e      	ldr	r2, [pc, #376]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005c42:	f043 0304 	orr.w	r3, r3, #4
 8005c46:	6193      	str	r3, [r2, #24]
 8005c48:	4b5c      	ldr	r3, [pc, #368]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c54:	2304      	movs	r3, #4
 8005c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c60:	f107 0320 	add.w	r3, r7, #32
 8005c64:	4619      	mov	r1, r3
 8005c66:	4856      	ldr	r0, [pc, #344]	; (8005dc0 <HAL_UART_MspInit+0x27c>)
 8005c68:	f000 ff20 	bl	8006aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c70:	2300      	movs	r3, #0
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c78:	f107 0320 	add.w	r3, r7, #32
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4850      	ldr	r0, [pc, #320]	; (8005dc0 <HAL_UART_MspInit+0x27c>)
 8005c80:	f000 ff14 	bl	8006aac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005c84:	4b52      	ldr	r3, [pc, #328]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005c86:	4a53      	ldr	r2, [pc, #332]	; (8005dd4 <HAL_UART_MspInit+0x290>)
 8005c88:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c8a:	4b51      	ldr	r3, [pc, #324]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c90:	4b4f      	ldr	r3, [pc, #316]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c96:	4b4e      	ldr	r3, [pc, #312]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005c98:	2280      	movs	r2, #128	; 0x80
 8005c9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ca2:	4b4b      	ldr	r3, [pc, #300]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005ca8:	4b49      	ldr	r3, [pc, #292]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005caa:	2220      	movs	r2, #32
 8005cac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005cae:	4b48      	ldr	r3, [pc, #288]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005cb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005cb6:	4846      	ldr	r0, [pc, #280]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005cb8:	f000 fc38 	bl	800652c <HAL_DMA_Init>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8005cc2:	f7ff fd77 	bl	80057b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a41      	ldr	r2, [pc, #260]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005cca:	635a      	str	r2, [r3, #52]	; 0x34
 8005ccc:	4a40      	ldr	r2, [pc, #256]	; (8005dd0 <HAL_UART_MspInit+0x28c>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005cd2:	4b41      	ldr	r3, [pc, #260]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005cd4:	4a41      	ldr	r2, [pc, #260]	; (8005ddc <HAL_UART_MspInit+0x298>)
 8005cd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cd8:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005cda:	2210      	movs	r2, #16
 8005cdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cde:	4b3e      	ldr	r3, [pc, #248]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ce4:	4b3c      	ldr	r3, [pc, #240]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cea:	4b3b      	ldr	r3, [pc, #236]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cf0:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005cfc:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d04:	4834      	ldr	r0, [pc, #208]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005d06:	f000 fc11 	bl	800652c <HAL_DMA_Init>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8005d10:	f7ff fd50 	bl	80057b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005d18:	631a      	str	r2, [r3, #48]	; 0x30
 8005d1a:	4a2f      	ldr	r2, [pc, #188]	; (8005dd8 <HAL_UART_MspInit+0x294>)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d20:	2200      	movs	r2, #0
 8005d22:	2100      	movs	r1, #0
 8005d24:	2026      	movs	r0, #38	; 0x26
 8005d26:	f000 fbbc 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d2a:	2026      	movs	r0, #38	; 0x26
 8005d2c:	f000 fbd5 	bl	80064da <HAL_NVIC_EnableIRQ>
}
 8005d30:	e03e      	b.n	8005db0 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==USART3)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <HAL_UART_MspInit+0x29c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d139      	bne.n	8005db0 <HAL_UART_MspInit+0x26c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4a1e      	ldr	r2, [pc, #120]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d46:	61d3      	str	r3, [r2, #28]
 8005d48:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005d5a:	f043 0308 	orr.w	r3, r3, #8
 8005d5e:	6193      	str	r3, [r2, #24]
 8005d60:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <HAL_UART_MspInit+0x278>)
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d72:	2302      	movs	r3, #2
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d76:	2303      	movs	r3, #3
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7a:	f107 0320 	add.w	r3, r7, #32
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4818      	ldr	r0, [pc, #96]	; (8005de4 <HAL_UART_MspInit+0x2a0>)
 8005d82:	f000 fe93 	bl	8006aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d94:	f107 0320 	add.w	r3, r7, #32
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4812      	ldr	r0, [pc, #72]	; (8005de4 <HAL_UART_MspInit+0x2a0>)
 8005d9c:	f000 fe86 	bl	8006aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005da0:	2200      	movs	r2, #0
 8005da2:	2100      	movs	r1, #0
 8005da4:	2027      	movs	r0, #39	; 0x27
 8005da6:	f000 fb7c 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005daa:	2027      	movs	r0, #39	; 0x27
 8005dac:	f000 fb95 	bl	80064da <HAL_NVIC_EnableIRQ>
}
 8005db0:	bf00      	nop
 8005db2:	3730      	adds	r7, #48	; 0x30
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40013800 	.word	0x40013800
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40010800 	.word	0x40010800
 8005dc4:	20000aec 	.word	0x20000aec
 8005dc8:	40020058 	.word	0x40020058
 8005dcc:	40004400 	.word	0x40004400
 8005dd0:	20000b30 	.word	0x20000b30
 8005dd4:	4002006c 	.word	0x4002006c
 8005dd8:	20000b74 	.word	0x20000b74
 8005ddc:	40020080 	.word	0x40020080
 8005de0:	40004800 	.word	0x40004800
 8005de4:	40010c00 	.word	0x40010c00

08005de8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <HAL_UART_MspDeInit+0x9c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d110      	bne.n	8005e1c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005dfa:	4b23      	ldr	r3, [pc, #140]	; (8005e88 <HAL_UART_MspDeInit+0xa0>)
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <HAL_UART_MspDeInit+0xa0>)
 8005e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e04:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005e06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e0a:	4820      	ldr	r0, [pc, #128]	; (8005e8c <HAL_UART_MspDeInit+0xa4>)
 8005e0c:	f000 ffd2 	bl	8006db4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fbe3 	bl	80065e0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8005e1a:	e02f      	b.n	8005e7c <HAL_UART_MspDeInit+0x94>
  else if(huart->Instance==USART2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1b      	ldr	r2, [pc, #108]	; (8005e90 <HAL_UART_MspDeInit+0xa8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d117      	bne.n	8005e56 <HAL_UART_MspDeInit+0x6e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005e26:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_UART_MspDeInit+0xa0>)
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <HAL_UART_MspDeInit+0xa0>)
 8005e2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e30:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8005e32:	210c      	movs	r1, #12
 8005e34:	4815      	ldr	r0, [pc, #84]	; (8005e8c <HAL_UART_MspDeInit+0xa4>)
 8005e36:	f000 ffbd 	bl	8006db4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fbce 	bl	80065e0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fbc9 	bl	80065e0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005e4e:	2026      	movs	r0, #38	; 0x26
 8005e50:	f000 fb51 	bl	80064f6 <HAL_NVIC_DisableIRQ>
}
 8005e54:	e012      	b.n	8005e7c <HAL_UART_MspDeInit+0x94>
  else if(huart->Instance==USART3)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a0e      	ldr	r2, [pc, #56]	; (8005e94 <HAL_UART_MspDeInit+0xac>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10d      	bne.n	8005e7c <HAL_UART_MspDeInit+0x94>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_UART_MspDeInit+0xa0>)
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <HAL_UART_MspDeInit+0xa0>)
 8005e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e6a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8005e6c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005e70:	4809      	ldr	r0, [pc, #36]	; (8005e98 <HAL_UART_MspDeInit+0xb0>)
 8005e72:	f000 ff9f 	bl	8006db4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8005e76:	2027      	movs	r0, #39	; 0x27
 8005e78:	f000 fb3d 	bl	80064f6 <HAL_NVIC_DisableIRQ>
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40013800 	.word	0x40013800
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40010800 	.word	0x40010800
 8005e90:	40004400 	.word	0x40004400
 8005e94:	40004800 	.word	0x40004800
 8005e98:	40010c00 	.word	0x40010c00

08005e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ea0:	e7fe      	b.n	8005ea0 <NMI_Handler+0x4>
	...

08005ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HardFault_Handler+0x30>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <HardFault_Handler+0x30>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8005ebc:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <HardFault_Handler+0x30>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ec4:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8005ec6:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <HardFault_Handler+0x30>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ed0:	e7fe      	b.n	8005ed0 <HardFault_Handler+0x2c>
 8005ed2:	bf00      	nop
 8005ed4:	2000090c 	.word	0x2000090c

08005ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005edc:	e7fe      	b.n	8005edc <MemManage_Handler+0x4>

08005ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ee2:	e7fe      	b.n	8005ee2 <BusFault_Handler+0x4>

08005ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ee8:	e7fe      	b.n	8005ee8 <UsageFault_Handler+0x4>

08005eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005eea:	b480      	push	{r7}
 8005eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005efa:	bf00      	nop
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f02:	b480      	push	{r7}
 8005f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
	...

08005f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 8005f14:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <SysTick_Handler+0x24>)
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d006      	beq.n	8005f2c <SysTick_Handler+0x1c>
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <SysTick_Handler+0x24>)
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <SysTick_Handler+0x24>)
 8005f2a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f2c:	f000 f97e 	bl	800622c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f30:	bf00      	nop
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20001a20 	.word	0x20001a20

08005f38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005f3c:	4802      	ldr	r0, [pc, #8]	; (8005f48 <DMA1_Channel5_IRQHandler+0x10>)
 8005f3e:	f000 fc81 	bl	8006844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005f42:	bf00      	nop
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000aec 	.word	0x20000aec

08005f4c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005f50:	4802      	ldr	r0, [pc, #8]	; (8005f5c <DMA1_Channel6_IRQHandler+0x10>)
 8005f52:	f000 fc77 	bl	8006844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005f56:	bf00      	nop
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000b30 	.word	0x20000b30

08005f60 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005f64:	4802      	ldr	r0, [pc, #8]	; (8005f70 <DMA1_Channel7_IRQHandler+0x10>)
 8005f66:	f000 fc6d 	bl	8006844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000b74 	.word	0x20000b74

08005f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005f78:	4802      	ldr	r0, [pc, #8]	; (8005f84 <TIM2_IRQHandler+0x10>)
 8005f7a:	f003 fbf3 	bl	8009764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005f7e:	bf00      	nop
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000954 	.word	0x20000954

08005f88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005f8c:	4802      	ldr	r0, [pc, #8]	; (8005f98 <TIM3_IRQHandler+0x10>)
 8005f8e:	f003 fbe9 	bl	8009764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	2000099c 	.word	0x2000099c

08005f9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005fa0:	4802      	ldr	r0, [pc, #8]	; (8005fac <USART2_IRQHandler+0x10>)
 8005fa2:	f004 ff2d 	bl	800ae00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005fa6:	bf00      	nop
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000a6c 	.word	0x20000a6c

08005fb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 8005fb4:	4803      	ldr	r0, [pc, #12]	; (8005fc4 <USART3_IRQHandler+0x14>)
 8005fb6:	f7fb ffd5 	bl	8001f64 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005fba:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <USART3_IRQHandler+0x14>)
 8005fbc:	f004 ff20 	bl	800ae00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005fc0:	bf00      	nop
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000aac 	.word	0x20000aac

08005fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
	return 1;
 8005fcc:	2301      	movs	r3, #1
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <_kill>:

int _kill(int pid, int sig)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005fe0:	f00d f8e6 	bl	80131b0 <__errno>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2216      	movs	r2, #22
 8005fe8:	601a      	str	r2, [r3, #0]
	return -1;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <_exit>:

void _exit (int status)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff ffe7 	bl	8005fd6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006008:	e7fe      	b.n	8006008 <_exit+0x12>

0800600a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e00a      	b.n	8006032 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800601c:	f3af 8000 	nop.w
 8006020:	4601      	mov	r1, r0
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	60ba      	str	r2, [r7, #8]
 8006028:	b2ca      	uxtb	r2, r1
 800602a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	dbf0      	blt.n	800601c <_read+0x12>
	}

return len;
 800603a:	687b      	ldr	r3, [r7, #4]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e009      	b.n	800606a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	60ba      	str	r2, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	3301      	adds	r3, #1
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	dbf1      	blt.n	8006056 <_write+0x12>
	}
	return len;
 8006072:	687b      	ldr	r3, [r7, #4]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_close>:

int _close(int file)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	return -1;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060a2:	605a      	str	r2, [r3, #4]
	return 0;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <_isatty>:

int _isatty(int file)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	return 1;
 80060b8:	2301      	movs	r3, #1
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
	return 0;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060e4:	4a14      	ldr	r2, [pc, #80]	; (8006138 <_sbrk+0x5c>)
 80060e6:	4b15      	ldr	r3, [pc, #84]	; (800613c <_sbrk+0x60>)
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <_sbrk+0x64>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060f8:	4b11      	ldr	r3, [pc, #68]	; (8006140 <_sbrk+0x64>)
 80060fa:	4a12      	ldr	r2, [pc, #72]	; (8006144 <_sbrk+0x68>)
 80060fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <_sbrk+0x64>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	429a      	cmp	r2, r3
 800610a:	d207      	bcs.n	800611c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800610c:	f00d f850 	bl	80131b0 <__errno>
 8006110:	4603      	mov	r3, r0
 8006112:	220c      	movs	r2, #12
 8006114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006116:	f04f 33ff 	mov.w	r3, #4294967295
 800611a:	e009      	b.n	8006130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800611c:	4b08      	ldr	r3, [pc, #32]	; (8006140 <_sbrk+0x64>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <_sbrk+0x64>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4413      	add	r3, r2
 800612a:	4a05      	ldr	r2, [pc, #20]	; (8006140 <_sbrk+0x64>)
 800612c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800612e:	68fb      	ldr	r3, [r7, #12]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20005000 	.word	0x20005000
 800613c:	00000400 	.word	0x00000400
 8006140:	20001a0c 	.word	0x20001a0c
 8006144:	20001a38 	.word	0x20001a38

08006148 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800614c:	bf00      	nop
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006154:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006156:	e003      	b.n	8006160 <LoopCopyDataInit>

08006158 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800615a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800615c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800615e:	3104      	adds	r1, #4

08006160 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006160:	480a      	ldr	r0, [pc, #40]	; (800618c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006164:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006166:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006168:	d3f6      	bcc.n	8006158 <CopyDataInit>
  ldr r2, =_sbss
 800616a:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800616c:	e002      	b.n	8006174 <LoopFillZerobss>

0800616e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800616e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006170:	f842 3b04 	str.w	r3, [r2], #4

08006174 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006176:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006178:	d3f9      	bcc.n	800616e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800617a:	f7ff ffe5 	bl	8006148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800617e:	f00d f81d 	bl	80131bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006182:	f7fc fcc1 	bl	8002b08 <main>
  bx lr
 8006186:	4770      	bx	lr
  ldr r3, =_sidata
 8006188:	08014b08 	.word	0x08014b08
  ldr r0, =_sdata
 800618c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006190:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8006194:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8006198:	20001a38 	.word	0x20001a38

0800619c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800619c:	e7fe      	b.n	800619c <ADC1_2_IRQHandler>
	...

080061a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061a4:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <HAL_Init+0x28>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a07      	ldr	r2, [pc, #28]	; (80061c8 <HAL_Init+0x28>)
 80061aa:	f043 0310 	orr.w	r3, r3, #16
 80061ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061b0:	2003      	movs	r0, #3
 80061b2:	f000 f96b 	bl	800648c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061b6:	2000      	movs	r0, #0
 80061b8:	f000 f808 	bl	80061cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061bc:	f7ff fb72 	bl	80058a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40022000 	.word	0x40022000

080061cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <HAL_InitTick+0x54>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b12      	ldr	r3, [pc, #72]	; (8006224 <HAL_InitTick+0x58>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	4619      	mov	r1, r3
 80061de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f991 	bl	8006512 <HAL_SYSTICK_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e00e      	b.n	8006218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b0f      	cmp	r3, #15
 80061fe:	d80a      	bhi.n	8006216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006200:	2200      	movs	r2, #0
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	f000 f94b 	bl	80064a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800620c:	4a06      	ldr	r2, [pc, #24]	; (8006228 <HAL_InitTick+0x5c>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000004 	.word	0x20000004
 8006224:	2000000c 	.word	0x2000000c
 8006228:	20000008 	.word	0x20000008

0800622c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_IncTick+0x1c>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_IncTick+0x20>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4413      	add	r3, r2
 800623c:	4a03      	ldr	r2, [pc, #12]	; (800624c <HAL_IncTick+0x20>)
 800623e:	6013      	str	r3, [r2, #0]
}
 8006240:	bf00      	nop
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	2000000c 	.word	0x2000000c
 800624c:	20001a24 	.word	0x20001a24

08006250 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return uwTick;
 8006254:	4b02      	ldr	r3, [pc, #8]	; (8006260 <HAL_GetTick+0x10>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	20001a24 	.word	0x20001a24

08006264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800626c:	f7ff fff0 	bl	8006250 <HAL_GetTick>
 8006270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d005      	beq.n	800628a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800627e:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <HAL_Delay+0x44>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800628a:	bf00      	nop
 800628c:	f7ff ffe0 	bl	8006250 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	429a      	cmp	r2, r3
 800629a:	d8f7      	bhi.n	800628c <HAL_Delay+0x28>
  {
  }
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	2000000c 	.word	0x2000000c

080062ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <__NVIC_SetPriorityGrouping+0x44>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062de:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <__NVIC_SetPriorityGrouping+0x44>)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	60d3      	str	r3, [r2, #12]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	e000ed00 	.word	0xe000ed00

080062f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <__NVIC_GetPriorityGrouping+0x18>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	f003 0307 	and.w	r3, r3, #7
}
 8006302:	4618      	mov	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	2b00      	cmp	r3, #0
 8006320:	db0b      	blt.n	800633a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f003 021f 	and.w	r2, r3, #31
 8006328:	4906      	ldr	r1, [pc, #24]	; (8006344 <__NVIC_EnableIRQ+0x34>)
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	2001      	movs	r0, #1
 8006332:	fa00 f202 	lsl.w	r2, r0, r2
 8006336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	e000e100 	.word	0xe000e100

08006348 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006356:	2b00      	cmp	r3, #0
 8006358:	db12      	blt.n	8006380 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	f003 021f 	and.w	r2, r3, #31
 8006360:	490a      	ldr	r1, [pc, #40]	; (800638c <__NVIC_DisableIRQ+0x44>)
 8006362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	2001      	movs	r0, #1
 800636a:	fa00 f202 	lsl.w	r2, r0, r2
 800636e:	3320      	adds	r3, #32
 8006370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006374:	f3bf 8f4f 	dsb	sy
}
 8006378:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800637a:	f3bf 8f6f 	isb	sy
}
 800637e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	e000e100 	.word	0xe000e100

08006390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	6039      	str	r1, [r7, #0]
 800639a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db0a      	blt.n	80063ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	490c      	ldr	r1, [pc, #48]	; (80063dc <__NVIC_SetPriority+0x4c>)
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	440b      	add	r3, r1
 80063b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b8:	e00a      	b.n	80063d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	4908      	ldr	r1, [pc, #32]	; (80063e0 <__NVIC_SetPriority+0x50>)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	3b04      	subs	r3, #4
 80063c8:	0112      	lsls	r2, r2, #4
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	440b      	add	r3, r1
 80063ce:	761a      	strb	r2, [r3, #24]
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	e000e100 	.word	0xe000e100
 80063e0:	e000ed00 	.word	0xe000ed00

080063e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	; 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f1c3 0307 	rsb	r3, r3, #7
 80063fe:	2b04      	cmp	r3, #4
 8006400:	bf28      	it	cs
 8006402:	2304      	movcs	r3, #4
 8006404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3304      	adds	r3, #4
 800640a:	2b06      	cmp	r3, #6
 800640c:	d902      	bls.n	8006414 <NVIC_EncodePriority+0x30>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3b03      	subs	r3, #3
 8006412:	e000      	b.n	8006416 <NVIC_EncodePriority+0x32>
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006418:	f04f 32ff 	mov.w	r2, #4294967295
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43da      	mvns	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	401a      	ands	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800642c:	f04f 31ff 	mov.w	r1, #4294967295
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	fa01 f303 	lsl.w	r3, r1, r3
 8006436:	43d9      	mvns	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800643c:	4313      	orrs	r3, r2
         );
}
 800643e:	4618      	mov	r0, r3
 8006440:	3724      	adds	r7, #36	; 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3b01      	subs	r3, #1
 8006454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006458:	d301      	bcc.n	800645e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800645a:	2301      	movs	r3, #1
 800645c:	e00f      	b.n	800647e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <SysTick_Config+0x40>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006466:	210f      	movs	r1, #15
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	f7ff ff90 	bl	8006390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <SysTick_Config+0x40>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <SysTick_Config+0x40>)
 8006478:	2207      	movs	r2, #7
 800647a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	e000e010 	.word	0xe000e010

0800648c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff09 	bl	80062ac <__NVIC_SetPriorityGrouping>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	4603      	mov	r3, r0
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064b4:	f7ff ff1e 	bl	80062f4 <__NVIC_GetPriorityGrouping>
 80064b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f7ff ff90 	bl	80063e4 <NVIC_EncodePriority>
 80064c4:	4602      	mov	r2, r0
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff5f 	bl	8006390 <__NVIC_SetPriority>
}
 80064d2:	bf00      	nop
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	4603      	mov	r3, r0
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ff11 	bl	8006310 <__NVIC_EnableIRQ>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	4603      	mov	r3, r0
 80064fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff ff1f 	bl	8006348 <__NVIC_DisableIRQ>
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ff94 	bl	8006448 <SysTick_Config>
 8006520:	4603      	mov	r3, r0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e043      	b.n	80065ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <HAL_DMA_Init+0xa8>)
 800654a:	4413      	add	r3, r2
 800654c:	4a22      	ldr	r2, [pc, #136]	; (80065d8 <HAL_DMA_Init+0xac>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	091b      	lsrs	r3, r3, #4
 8006554:	009a      	lsls	r2, r3, #2
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1f      	ldr	r2, [pc, #124]	; (80065dc <HAL_DMA_Init+0xb0>)
 800655e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006576:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800657a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800659c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr
 80065d4:	bffdfff8 	.word	0xbffdfff8
 80065d8:	cccccccd 	.word	0xcccccccd
 80065dc:	40020000 	.word	0x40020000

080065e0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e046      	b.n	8006680 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0201 	bic.w	r2, r2, #1
 8006600:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <HAL_DMA_DeInit+0xac>)
 800662a:	4413      	add	r3, r2
 800662c:	4a18      	ldr	r2, [pc, #96]	; (8006690 <HAL_DMA_DeInit+0xb0>)
 800662e:	fba2 2303 	umull	r2, r3, r2, r3
 8006632:	091b      	lsrs	r3, r3, #4
 8006634:	009a      	lsls	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <HAL_DMA_DeInit+0xb4>)
 800663e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f202 	lsl.w	r2, r1, r2
 800664e:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	bffdfff8 	.word	0xbffdfff8
 8006690:	cccccccd 	.word	0xcccccccd
 8006694:	40020000 	.word	0x40020000

08006698 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_DMA_Start_IT+0x20>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e04a      	b.n	800674e <HAL_DMA_Start_IT+0xb6>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d13a      	bne.n	8006740 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f9ae 	bl	8006a50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 020e 	orr.w	r2, r2, #14
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	e00f      	b.n	800672e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0204 	bic.w	r2, r2, #4
 800671c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 020a 	orr.w	r2, r2, #10
 800672c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0201 	orr.w	r2, r2, #1
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e005      	b.n	800674c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006748:	2302      	movs	r3, #2
 800674a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800676a:	2b02      	cmp	r3, #2
 800676c:	d005      	beq.n	800677a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2204      	movs	r2, #4
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
 8006778:	e051      	b.n	800681e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 020e 	bic.w	r2, r2, #14
 8006788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a22      	ldr	r2, [pc, #136]	; (8006828 <HAL_DMA_Abort_IT+0xd0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d029      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xa0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a20      	ldr	r2, [pc, #128]	; (800682c <HAL_DMA_Abort_IT+0xd4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d022      	beq.n	80067f4 <HAL_DMA_Abort_IT+0x9c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <HAL_DMA_Abort_IT+0xd8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d01a      	beq.n	80067ee <HAL_DMA_Abort_IT+0x96>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <HAL_DMA_Abort_IT+0xdc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d012      	beq.n	80067e8 <HAL_DMA_Abort_IT+0x90>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <HAL_DMA_Abort_IT+0xe0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00a      	beq.n	80067e2 <HAL_DMA_Abort_IT+0x8a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1a      	ldr	r2, [pc, #104]	; (800683c <HAL_DMA_Abort_IT+0xe4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d102      	bne.n	80067dc <HAL_DMA_Abort_IT+0x84>
 80067d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067da:	e00e      	b.n	80067fa <HAL_DMA_Abort_IT+0xa2>
 80067dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e0:	e00b      	b.n	80067fa <HAL_DMA_Abort_IT+0xa2>
 80067e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067e6:	e008      	b.n	80067fa <HAL_DMA_Abort_IT+0xa2>
 80067e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ec:	e005      	b.n	80067fa <HAL_DMA_Abort_IT+0xa2>
 80067ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067f2:	e002      	b.n	80067fa <HAL_DMA_Abort_IT+0xa2>
 80067f4:	2310      	movs	r3, #16
 80067f6:	e000      	b.n	80067fa <HAL_DMA_Abort_IT+0xa2>
 80067f8:	2301      	movs	r3, #1
 80067fa:	4a11      	ldr	r2, [pc, #68]	; (8006840 <HAL_DMA_Abort_IT+0xe8>)
 80067fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	4798      	blx	r3
    } 
  }
  return status;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40020008 	.word	0x40020008
 800682c:	4002001c 	.word	0x4002001c
 8006830:	40020030 	.word	0x40020030
 8006834:	40020044 	.word	0x40020044
 8006838:	40020058 	.word	0x40020058
 800683c:	4002006c 	.word	0x4002006c
 8006840:	40020000 	.word	0x40020000

08006844 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	2204      	movs	r2, #4
 8006862:	409a      	lsls	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d04f      	beq.n	800690c <HAL_DMA_IRQHandler+0xc8>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d04a      	beq.n	800690c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d107      	bne.n	8006894 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0204 	bic.w	r2, r2, #4
 8006892:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a66      	ldr	r2, [pc, #408]	; (8006a34 <HAL_DMA_IRQHandler+0x1f0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d029      	beq.n	80068f2 <HAL_DMA_IRQHandler+0xae>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a65      	ldr	r2, [pc, #404]	; (8006a38 <HAL_DMA_IRQHandler+0x1f4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_IRQHandler+0xaa>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a63      	ldr	r2, [pc, #396]	; (8006a3c <HAL_DMA_IRQHandler+0x1f8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01a      	beq.n	80068e8 <HAL_DMA_IRQHandler+0xa4>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a62      	ldr	r2, [pc, #392]	; (8006a40 <HAL_DMA_IRQHandler+0x1fc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d012      	beq.n	80068e2 <HAL_DMA_IRQHandler+0x9e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a60      	ldr	r2, [pc, #384]	; (8006a44 <HAL_DMA_IRQHandler+0x200>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00a      	beq.n	80068dc <HAL_DMA_IRQHandler+0x98>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a5f      	ldr	r2, [pc, #380]	; (8006a48 <HAL_DMA_IRQHandler+0x204>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d102      	bne.n	80068d6 <HAL_DMA_IRQHandler+0x92>
 80068d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80068d4:	e00e      	b.n	80068f4 <HAL_DMA_IRQHandler+0xb0>
 80068d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068da:	e00b      	b.n	80068f4 <HAL_DMA_IRQHandler+0xb0>
 80068dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068e0:	e008      	b.n	80068f4 <HAL_DMA_IRQHandler+0xb0>
 80068e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068e6:	e005      	b.n	80068f4 <HAL_DMA_IRQHandler+0xb0>
 80068e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ec:	e002      	b.n	80068f4 <HAL_DMA_IRQHandler+0xb0>
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	e000      	b.n	80068f4 <HAL_DMA_IRQHandler+0xb0>
 80068f2:	2304      	movs	r3, #4
 80068f4:	4a55      	ldr	r2, [pc, #340]	; (8006a4c <HAL_DMA_IRQHandler+0x208>)
 80068f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8094 	beq.w	8006a2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800690a:	e08e      	b.n	8006a2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	2202      	movs	r2, #2
 8006912:	409a      	lsls	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4013      	ands	r3, r2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d056      	beq.n	80069ca <HAL_DMA_IRQHandler+0x186>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d051      	beq.n	80069ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 020a 	bic.w	r2, r2, #10
 8006942:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a38      	ldr	r2, [pc, #224]	; (8006a34 <HAL_DMA_IRQHandler+0x1f0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d029      	beq.n	80069aa <HAL_DMA_IRQHandler+0x166>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <HAL_DMA_IRQHandler+0x1f4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d022      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x162>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a35      	ldr	r2, [pc, #212]	; (8006a3c <HAL_DMA_IRQHandler+0x1f8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d01a      	beq.n	80069a0 <HAL_DMA_IRQHandler+0x15c>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a34      	ldr	r2, [pc, #208]	; (8006a40 <HAL_DMA_IRQHandler+0x1fc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d012      	beq.n	800699a <HAL_DMA_IRQHandler+0x156>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a32      	ldr	r2, [pc, #200]	; (8006a44 <HAL_DMA_IRQHandler+0x200>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00a      	beq.n	8006994 <HAL_DMA_IRQHandler+0x150>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a31      	ldr	r2, [pc, #196]	; (8006a48 <HAL_DMA_IRQHandler+0x204>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d102      	bne.n	800698e <HAL_DMA_IRQHandler+0x14a>
 8006988:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800698c:	e00e      	b.n	80069ac <HAL_DMA_IRQHandler+0x168>
 800698e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006992:	e00b      	b.n	80069ac <HAL_DMA_IRQHandler+0x168>
 8006994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006998:	e008      	b.n	80069ac <HAL_DMA_IRQHandler+0x168>
 800699a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800699e:	e005      	b.n	80069ac <HAL_DMA_IRQHandler+0x168>
 80069a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a4:	e002      	b.n	80069ac <HAL_DMA_IRQHandler+0x168>
 80069a6:	2320      	movs	r3, #32
 80069a8:	e000      	b.n	80069ac <HAL_DMA_IRQHandler+0x168>
 80069aa:	2302      	movs	r3, #2
 80069ac:	4a27      	ldr	r2, [pc, #156]	; (8006a4c <HAL_DMA_IRQHandler+0x208>)
 80069ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d034      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80069c8:	e02f      	b.n	8006a2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	2208      	movs	r2, #8
 80069d0:	409a      	lsls	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d028      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x1e8>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d023      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 020e 	bic.w	r2, r2, #14
 80069f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fc:	2101      	movs	r1, #1
 80069fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006a02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	4798      	blx	r3
    }
  }
  return;
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
}
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40020008 	.word	0x40020008
 8006a38:	4002001c 	.word	0x4002001c
 8006a3c:	40020030 	.word	0x40020030
 8006a40:	40020044 	.word	0x40020044
 8006a44:	40020058 	.word	0x40020058
 8006a48:	4002006c 	.word	0x4002006c
 8006a4c:	40020000 	.word	0x40020000

08006a50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	2101      	movs	r1, #1
 8006a68:	fa01 f202 	lsl.w	r2, r1, r2
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d108      	bne.n	8006a90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a8e:	e007      	b.n	8006aa0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]
}
 8006aa0:	bf00      	nop
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr
	...

08006aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b08b      	sub	sp, #44	; 0x2c
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006aba:	2300      	movs	r3, #0
 8006abc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006abe:	e169      	b.n	8006d94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	f040 8158 	bne.w	8006d8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4a9a      	ldr	r2, [pc, #616]	; (8006d4c <HAL_GPIO_Init+0x2a0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d05e      	beq.n	8006ba6 <HAL_GPIO_Init+0xfa>
 8006ae8:	4a98      	ldr	r2, [pc, #608]	; (8006d4c <HAL_GPIO_Init+0x2a0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d875      	bhi.n	8006bda <HAL_GPIO_Init+0x12e>
 8006aee:	4a98      	ldr	r2, [pc, #608]	; (8006d50 <HAL_GPIO_Init+0x2a4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d058      	beq.n	8006ba6 <HAL_GPIO_Init+0xfa>
 8006af4:	4a96      	ldr	r2, [pc, #600]	; (8006d50 <HAL_GPIO_Init+0x2a4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d86f      	bhi.n	8006bda <HAL_GPIO_Init+0x12e>
 8006afa:	4a96      	ldr	r2, [pc, #600]	; (8006d54 <HAL_GPIO_Init+0x2a8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d052      	beq.n	8006ba6 <HAL_GPIO_Init+0xfa>
 8006b00:	4a94      	ldr	r2, [pc, #592]	; (8006d54 <HAL_GPIO_Init+0x2a8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d869      	bhi.n	8006bda <HAL_GPIO_Init+0x12e>
 8006b06:	4a94      	ldr	r2, [pc, #592]	; (8006d58 <HAL_GPIO_Init+0x2ac>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d04c      	beq.n	8006ba6 <HAL_GPIO_Init+0xfa>
 8006b0c:	4a92      	ldr	r2, [pc, #584]	; (8006d58 <HAL_GPIO_Init+0x2ac>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d863      	bhi.n	8006bda <HAL_GPIO_Init+0x12e>
 8006b12:	4a92      	ldr	r2, [pc, #584]	; (8006d5c <HAL_GPIO_Init+0x2b0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d046      	beq.n	8006ba6 <HAL_GPIO_Init+0xfa>
 8006b18:	4a90      	ldr	r2, [pc, #576]	; (8006d5c <HAL_GPIO_Init+0x2b0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d85d      	bhi.n	8006bda <HAL_GPIO_Init+0x12e>
 8006b1e:	2b12      	cmp	r3, #18
 8006b20:	d82a      	bhi.n	8006b78 <HAL_GPIO_Init+0xcc>
 8006b22:	2b12      	cmp	r3, #18
 8006b24:	d859      	bhi.n	8006bda <HAL_GPIO_Init+0x12e>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_GPIO_Init+0x80>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006ba7 	.word	0x08006ba7
 8006b30:	08006b81 	.word	0x08006b81
 8006b34:	08006b93 	.word	0x08006b93
 8006b38:	08006bd5 	.word	0x08006bd5
 8006b3c:	08006bdb 	.word	0x08006bdb
 8006b40:	08006bdb 	.word	0x08006bdb
 8006b44:	08006bdb 	.word	0x08006bdb
 8006b48:	08006bdb 	.word	0x08006bdb
 8006b4c:	08006bdb 	.word	0x08006bdb
 8006b50:	08006bdb 	.word	0x08006bdb
 8006b54:	08006bdb 	.word	0x08006bdb
 8006b58:	08006bdb 	.word	0x08006bdb
 8006b5c:	08006bdb 	.word	0x08006bdb
 8006b60:	08006bdb 	.word	0x08006bdb
 8006b64:	08006bdb 	.word	0x08006bdb
 8006b68:	08006bdb 	.word	0x08006bdb
 8006b6c:	08006bdb 	.word	0x08006bdb
 8006b70:	08006b89 	.word	0x08006b89
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	4a79      	ldr	r2, [pc, #484]	; (8006d60 <HAL_GPIO_Init+0x2b4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006b7e:	e02c      	b.n	8006bda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	623b      	str	r3, [r7, #32]
          break;
 8006b86:	e029      	b.n	8006bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	623b      	str	r3, [r7, #32]
          break;
 8006b90:	e024      	b.n	8006bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	3308      	adds	r3, #8
 8006b98:	623b      	str	r3, [r7, #32]
          break;
 8006b9a:	e01f      	b.n	8006bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	623b      	str	r3, [r7, #32]
          break;
 8006ba4:	e01a      	b.n	8006bdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d102      	bne.n	8006bb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006bae:	2304      	movs	r3, #4
 8006bb0:	623b      	str	r3, [r7, #32]
          break;
 8006bb2:	e013      	b.n	8006bdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d105      	bne.n	8006bc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	611a      	str	r2, [r3, #16]
          break;
 8006bc6:	e009      	b.n	8006bdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bc8:	2308      	movs	r3, #8
 8006bca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	615a      	str	r2, [r3, #20]
          break;
 8006bd2:	e003      	b.n	8006bdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	623b      	str	r3, [r7, #32]
          break;
 8006bd8:	e000      	b.n	8006bdc <HAL_GPIO_Init+0x130>
          break;
 8006bda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2bff      	cmp	r3, #255	; 0xff
 8006be0:	d801      	bhi.n	8006be6 <HAL_GPIO_Init+0x13a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	e001      	b.n	8006bea <HAL_GPIO_Init+0x13e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3304      	adds	r3, #4
 8006bea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	2bff      	cmp	r3, #255	; 0xff
 8006bf0:	d802      	bhi.n	8006bf8 <HAL_GPIO_Init+0x14c>
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	e002      	b.n	8006bfe <HAL_GPIO_Init+0x152>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	3b08      	subs	r3, #8
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	210f      	movs	r1, #15
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	401a      	ands	r2, r3
 8006c10:	6a39      	ldr	r1, [r7, #32]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	fa01 f303 	lsl.w	r3, r1, r3
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80b1 	beq.w	8006d8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c2c:	4b4d      	ldr	r3, [pc, #308]	; (8006d64 <HAL_GPIO_Init+0x2b8>)
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	4a4c      	ldr	r2, [pc, #304]	; (8006d64 <HAL_GPIO_Init+0x2b8>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6193      	str	r3, [r2, #24]
 8006c38:	4b4a      	ldr	r3, [pc, #296]	; (8006d64 <HAL_GPIO_Init+0x2b8>)
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006c44:	4a48      	ldr	r2, [pc, #288]	; (8006d68 <HAL_GPIO_Init+0x2bc>)
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	089b      	lsrs	r3, r3, #2
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	220f      	movs	r2, #15
 8006c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c60:	43db      	mvns	r3, r3
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4013      	ands	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a40      	ldr	r2, [pc, #256]	; (8006d6c <HAL_GPIO_Init+0x2c0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <HAL_GPIO_Init+0x1ec>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a3f      	ldr	r2, [pc, #252]	; (8006d70 <HAL_GPIO_Init+0x2c4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00d      	beq.n	8006c94 <HAL_GPIO_Init+0x1e8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a3e      	ldr	r2, [pc, #248]	; (8006d74 <HAL_GPIO_Init+0x2c8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <HAL_GPIO_Init+0x1e4>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a3d      	ldr	r2, [pc, #244]	; (8006d78 <HAL_GPIO_Init+0x2cc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d101      	bne.n	8006c8c <HAL_GPIO_Init+0x1e0>
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e006      	b.n	8006c9a <HAL_GPIO_Init+0x1ee>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	e004      	b.n	8006c9a <HAL_GPIO_Init+0x1ee>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e002      	b.n	8006c9a <HAL_GPIO_Init+0x1ee>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <HAL_GPIO_Init+0x1ee>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9c:	f002 0203 	and.w	r2, r2, #3
 8006ca0:	0092      	lsls	r2, r2, #2
 8006ca2:	4093      	lsls	r3, r2
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006caa:	492f      	ldr	r1, [pc, #188]	; (8006d68 <HAL_GPIO_Init+0x2bc>)
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d006      	beq.n	8006cd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006cc4:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	492c      	ldr	r1, [pc, #176]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	600b      	str	r3, [r1, #0]
 8006cd0:	e006      	b.n	8006ce0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006cd2:	4b2a      	ldr	r3, [pc, #168]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	4928      	ldr	r1, [pc, #160]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d006      	beq.n	8006cfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006cec:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	4922      	ldr	r1, [pc, #136]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]
 8006cf8:	e006      	b.n	8006d08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006cfa:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	491e      	ldr	r1, [pc, #120]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d006      	beq.n	8006d22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d14:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	4918      	ldr	r1, [pc, #96]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	608b      	str	r3, [r1, #8]
 8006d20:	e006      	b.n	8006d30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d22:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	4914      	ldr	r1, [pc, #80]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d021      	beq.n	8006d80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d3c:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	490e      	ldr	r1, [pc, #56]	; (8006d7c <HAL_GPIO_Init+0x2d0>)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60cb      	str	r3, [r1, #12]
 8006d48:	e021      	b.n	8006d8e <HAL_GPIO_Init+0x2e2>
 8006d4a:	bf00      	nop
 8006d4c:	10320000 	.word	0x10320000
 8006d50:	10310000 	.word	0x10310000
 8006d54:	10220000 	.word	0x10220000
 8006d58:	10210000 	.word	0x10210000
 8006d5c:	10120000 	.word	0x10120000
 8006d60:	10110000 	.word	0x10110000
 8006d64:	40021000 	.word	0x40021000
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40010800 	.word	0x40010800
 8006d70:	40010c00 	.word	0x40010c00
 8006d74:	40011000 	.word	0x40011000
 8006d78:	40011400 	.word	0x40011400
 8006d7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_GPIO_Init+0x304>)
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	43db      	mvns	r3, r3
 8006d88:	4909      	ldr	r1, [pc, #36]	; (8006db0 <HAL_GPIO_Init+0x304>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	3301      	adds	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f47f ae8e 	bne.w	8006ac0 <HAL_GPIO_Init+0x14>
  }
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	372c      	adds	r7, #44	; 0x2c
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr
 8006db0:	40010400 	.word	0x40010400

08006db4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b089      	sub	sp, #36	; 0x24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8006dc2:	e09a      	b.n	8006efa <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 808d 	beq.w	8006ef4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8006dda:	4a4e      	ldr	r2, [pc, #312]	; (8006f14 <HAL_GPIO_DeInit+0x160>)
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	089b      	lsrs	r3, r3, #2
 8006de0:	3302      	adds	r3, #2
 8006de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	220f      	movs	r2, #15
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a46      	ldr	r2, [pc, #280]	; (8006f18 <HAL_GPIO_DeInit+0x164>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d013      	beq.n	8006e2c <HAL_GPIO_DeInit+0x78>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a45      	ldr	r2, [pc, #276]	; (8006f1c <HAL_GPIO_DeInit+0x168>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00d      	beq.n	8006e28 <HAL_GPIO_DeInit+0x74>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a44      	ldr	r2, [pc, #272]	; (8006f20 <HAL_GPIO_DeInit+0x16c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <HAL_GPIO_DeInit+0x70>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a43      	ldr	r2, [pc, #268]	; (8006f24 <HAL_GPIO_DeInit+0x170>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d101      	bne.n	8006e20 <HAL_GPIO_DeInit+0x6c>
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <HAL_GPIO_DeInit+0x7a>
 8006e20:	2304      	movs	r3, #4
 8006e22:	e004      	b.n	8006e2e <HAL_GPIO_DeInit+0x7a>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e002      	b.n	8006e2e <HAL_GPIO_DeInit+0x7a>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <HAL_GPIO_DeInit+0x7a>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	f002 0203 	and.w	r2, r2, #3
 8006e34:	0092      	lsls	r2, r2, #2
 8006e36:	4093      	lsls	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d132      	bne.n	8006ea4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	220f      	movs	r2, #15
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8006e4e:	4a31      	ldr	r2, [pc, #196]	; (8006f14 <HAL_GPIO_DeInit+0x160>)
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	089b      	lsrs	r3, r3, #2
 8006e54:	3302      	adds	r3, #2
 8006e56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	43da      	mvns	r2, r3
 8006e5e:	482d      	ldr	r0, [pc, #180]	; (8006f14 <HAL_GPIO_DeInit+0x160>)
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	089b      	lsrs	r3, r3, #2
 8006e64:	400a      	ands	r2, r1
 8006e66:	3302      	adds	r3, #2
 8006e68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006e6c:	4b2e      	ldr	r3, [pc, #184]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	43db      	mvns	r3, r3
 8006e74:	492c      	ldr	r1, [pc, #176]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006e7a:	4b2b      	ldr	r3, [pc, #172]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	43db      	mvns	r3, r3
 8006e82:	4929      	ldr	r1, [pc, #164]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006e88:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	4925      	ldr	r1, [pc, #148]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	4922      	ldr	r1, [pc, #136]	; (8006f28 <HAL_GPIO_DeInit+0x174>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2bff      	cmp	r3, #255	; 0xff
 8006ea8:	d801      	bhi.n	8006eae <HAL_GPIO_DeInit+0xfa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	e001      	b.n	8006eb2 <HAL_GPIO_DeInit+0xfe>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2bff      	cmp	r3, #255	; 0xff
 8006eb8:	d802      	bhi.n	8006ec0 <HAL_GPIO_DeInit+0x10c>
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	e002      	b.n	8006ec6 <HAL_GPIO_DeInit+0x112>
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	3b08      	subs	r3, #8
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	210f      	movs	r1, #15
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	2104      	movs	r1, #4
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	43db      	mvns	r3, r3
 8006eee:	401a      	ands	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	fa22 f303 	lsr.w	r3, r2, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f af5e 	bne.w	8006dc4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	3724      	adds	r7, #36	; 0x24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40010800 	.word	0x40010800
 8006f1c:	40010c00 	.word	0x40010c00
 8006f20:	40011000 	.word	0x40011000
 8006f24:	40011400 	.word	0x40011400
 8006f28:	40010400 	.word	0x40010400

08006f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	807b      	strh	r3, [r7, #2]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f3c:	787b      	ldrb	r3, [r7, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f42:	887a      	ldrh	r2, [r7, #2]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006f48:	e003      	b.n	8006f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006f4a:	887b      	ldrh	r3, [r7, #2]
 8006f4c:	041a      	lsls	r2, r3, #16
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	611a      	str	r2, [r3, #16]
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e12b      	b.n	80071c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fe fcc0 	bl	8005908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	; 0x24
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fc0:	f002 f84e 	bl	8009060 <HAL_RCC_GetPCLK1Freq>
 8006fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4a81      	ldr	r2, [pc, #516]	; (80071d0 <HAL_I2C_Init+0x274>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d807      	bhi.n	8006fe0 <HAL_I2C_Init+0x84>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a80      	ldr	r2, [pc, #512]	; (80071d4 <HAL_I2C_Init+0x278>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	bf94      	ite	ls
 8006fd8:	2301      	movls	r3, #1
 8006fda:	2300      	movhi	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e006      	b.n	8006fee <HAL_I2C_Init+0x92>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a7d      	ldr	r2, [pc, #500]	; (80071d8 <HAL_I2C_Init+0x27c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bf94      	ite	ls
 8006fe8:	2301      	movls	r3, #1
 8006fea:	2300      	movhi	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e0e7      	b.n	80071c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a78      	ldr	r2, [pc, #480]	; (80071dc <HAL_I2C_Init+0x280>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	0c9b      	lsrs	r3, r3, #18
 8007000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	4a6a      	ldr	r2, [pc, #424]	; (80071d0 <HAL_I2C_Init+0x274>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d802      	bhi.n	8007030 <HAL_I2C_Init+0xd4>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	3301      	adds	r3, #1
 800702e:	e009      	b.n	8007044 <HAL_I2C_Init+0xe8>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	4a69      	ldr	r2, [pc, #420]	; (80071e0 <HAL_I2C_Init+0x284>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	099b      	lsrs	r3, r3, #6
 8007042:	3301      	adds	r3, #1
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	430b      	orrs	r3, r1
 800704a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	495c      	ldr	r1, [pc, #368]	; (80071d0 <HAL_I2C_Init+0x274>)
 8007060:	428b      	cmp	r3, r1
 8007062:	d819      	bhi.n	8007098 <HAL_I2C_Init+0x13c>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1e59      	subs	r1, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007078:	400b      	ands	r3, r1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_I2C_Init+0x138>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1e59      	subs	r1, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	fbb1 f3f3 	udiv	r3, r1, r3
 800708c:	3301      	adds	r3, #1
 800708e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007092:	e051      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 8007094:	2304      	movs	r3, #4
 8007096:	e04f      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d111      	bne.n	80070c4 <HAL_I2C_Init+0x168>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	1e58      	subs	r0, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6859      	ldr	r1, [r3, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	440b      	add	r3, r1
 80070ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80070b2:	3301      	adds	r3, #1
 80070b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	e012      	b.n	80070ea <HAL_I2C_Init+0x18e>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	1e58      	subs	r0, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6859      	ldr	r1, [r3, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	0099      	lsls	r1, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070da:	3301      	adds	r3, #1
 80070dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bf0c      	ite	eq
 80070e4:	2301      	moveq	r3, #1
 80070e6:	2300      	movne	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <HAL_I2C_Init+0x196>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e022      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10e      	bne.n	8007118 <HAL_I2C_Init+0x1bc>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1e58      	subs	r0, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6859      	ldr	r1, [r3, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	440b      	add	r3, r1
 8007108:	fbb0 f3f3 	udiv	r3, r0, r3
 800710c:	3301      	adds	r3, #1
 800710e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007116:	e00f      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	1e58      	subs	r0, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6859      	ldr	r1, [r3, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	440b      	add	r3, r1
 8007126:	0099      	lsls	r1, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	fbb0 f3f3 	udiv	r3, r0, r3
 800712e:	3301      	adds	r3, #1
 8007130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	6809      	ldr	r1, [r1, #0]
 800713c:	4313      	orrs	r3, r2
 800713e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69da      	ldr	r2, [r3, #28]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6911      	ldr	r1, [r2, #16]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68d2      	ldr	r2, [r2, #12]
 8007172:	4311      	orrs	r1, r2
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6812      	ldr	r2, [r2, #0]
 8007178:	430b      	orrs	r3, r1
 800717a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	000186a0 	.word	0x000186a0
 80071d4:	001e847f 	.word	0x001e847f
 80071d8:	003d08ff 	.word	0x003d08ff
 80071dc:	431bde83 	.word	0x431bde83
 80071e0:	10624dd3 	.word	0x10624dd3

080071e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	461a      	mov	r2, r3
 80071f0:	460b      	mov	r3, r1
 80071f2:	817b      	strh	r3, [r7, #10]
 80071f4:	4613      	mov	r3, r2
 80071f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071f8:	f7ff f82a 	bl	8006250 <HAL_GetTick>
 80071fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b20      	cmp	r3, #32
 8007208:	f040 80e0 	bne.w	80073cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2319      	movs	r3, #25
 8007212:	2201      	movs	r2, #1
 8007214:	4970      	ldr	r1, [pc, #448]	; (80073d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f001 f972 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007222:	2302      	movs	r3, #2
 8007224:	e0d3      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_I2C_Master_Transmit+0x50>
 8007230:	2302      	movs	r3, #2
 8007232:	e0cc      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ea>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d007      	beq.n	800725a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2221      	movs	r2, #33	; 0x21
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2210      	movs	r2, #16
 8007276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	893a      	ldrh	r2, [r7, #8]
 800728a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4a50      	ldr	r2, [pc, #320]	; (80073dc <HAL_I2C_Master_Transmit+0x1f8>)
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800729c:	8979      	ldrh	r1, [r7, #10]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6a3a      	ldr	r2, [r7, #32]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fe5e 	bl	8007f64 <I2C_MasterRequestWrite>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e08d      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80072c8:	e066      	b.n	8007398 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	6a39      	ldr	r1, [r7, #32]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f001 f9ec 	bl	80086ac <I2C_WaitOnTXEFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00d      	beq.n	80072f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d107      	bne.n	80072f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e06b      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b04      	cmp	r3, #4
 8007332:	d11b      	bne.n	800736c <HAL_I2C_Master_Transmit+0x188>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d017      	beq.n	800736c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	6a39      	ldr	r1, [r7, #32]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f001 f9dc 	bl	800872e <I2C_WaitOnBTFFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b04      	cmp	r3, #4
 8007382:	d107      	bne.n	8007394 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007392:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e01a      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739c:	2b00      	cmp	r3, #0
 800739e:	d194      	bne.n	80072ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	e000      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80073cc:	2302      	movs	r3, #2
  }
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	00100002 	.word	0x00100002
 80073dc:	ffff0000 	.word	0xffff0000

080073e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08c      	sub	sp, #48	; 0x30
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	461a      	mov	r2, r3
 80073ec:	460b      	mov	r3, r1
 80073ee:	817b      	strh	r3, [r7, #10]
 80073f0:	4613      	mov	r3, r2
 80073f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073f8:	f7fe ff2a 	bl	8006250 <HAL_GetTick>
 80073fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b20      	cmp	r3, #32
 8007408:	f040 823f 	bne.w	800788a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	2319      	movs	r3, #25
 8007412:	2201      	movs	r2, #1
 8007414:	497f      	ldr	r1, [pc, #508]	; (8007614 <HAL_I2C_Master_Receive+0x234>)
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f001 f872 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
 8007424:	e232      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_I2C_Master_Receive+0x54>
 8007430:	2302      	movs	r3, #2
 8007432:	e22b      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b01      	cmp	r3, #1
 8007448:	d007      	beq.n	800745a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0201 	orr.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007468:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2222      	movs	r2, #34	; 0x22
 800746e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2210      	movs	r2, #16
 8007476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	893a      	ldrh	r2, [r7, #8]
 800748a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4a5f      	ldr	r2, [pc, #380]	; (8007618 <HAL_I2C_Master_Receive+0x238>)
 800749a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800749c:	8979      	ldrh	r1, [r7, #10]
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fde0 	bl	8008068 <I2C_MasterRequestRead>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e1ec      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d113      	bne.n	80074e2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ba:	2300      	movs	r3, #0
 80074bc:	61fb      	str	r3, [r7, #28]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	61fb      	str	r3, [r7, #28]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	61fb      	str	r3, [r7, #28]
 80074ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	e1c0      	b.n	8007864 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d11e      	bne.n	8007528 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80074fa:	b672      	cpsid	i
}
 80074fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074fe:	2300      	movs	r3, #0
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007522:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007524:	b662      	cpsie	i
}
 8007526:	e035      	b.n	8007594 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	2b02      	cmp	r3, #2
 800752e:	d11e      	bne.n	800756e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800753e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007540:	b672      	cpsid	i
}
 8007542:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007568:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800756a:	b662      	cpsie	i
}
 800756c:	e012      	b.n	8007594 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800757c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007594:	e166      	b.n	8007864 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759a:	2b03      	cmp	r3, #3
 800759c:	f200 811f 	bhi.w	80077de <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d123      	bne.n	80075f0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 f8ff 	bl	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e167      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075ee:	e139      	b.n	8007864 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d152      	bne.n	800769e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	2200      	movs	r2, #0
 8007600:	4906      	ldr	r1, [pc, #24]	; (800761c <HAL_I2C_Master_Receive+0x23c>)
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 ff7c 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d008      	beq.n	8007620 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e13c      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
 8007612:	bf00      	nop
 8007614:	00100002 	.word	0x00100002
 8007618:	ffff0000 	.word	0xffff0000
 800761c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007620:	b672      	cpsid	i
}
 8007622:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007666:	b662      	cpsie	i
}
 8007668:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800769c:	e0e2      	b.n	8007864 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	2200      	movs	r2, #0
 80076a6:	497b      	ldr	r1, [pc, #492]	; (8007894 <HAL_I2C_Master_Receive+0x4b4>)
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 ff29 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e0e9      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80076c8:	b672      	cpsid	i
}
 80076ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076fe:	4b66      	ldr	r3, [pc, #408]	; (8007898 <HAL_I2C_Master_Receive+0x4b8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	08db      	lsrs	r3, r3, #3
 8007704:	4a65      	ldr	r2, [pc, #404]	; (800789c <HAL_I2C_Master_Receive+0x4bc>)
 8007706:	fba2 2303 	umull	r2, r3, r2, r3
 800770a:	0a1a      	lsrs	r2, r3, #8
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	00da      	lsls	r2, r3, #3
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	3b01      	subs	r3, #1
 800771c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d118      	bne.n	8007756 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f043 0220 	orr.w	r2, r3, #32
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007746:	b662      	cpsie	i
}
 8007748:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e09a      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b04      	cmp	r3, #4
 8007762:	d1d9      	bne.n	8007718 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80077a6:	b662      	cpsie	i
}
 80077a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077dc:	e042      	b.n	8007864 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 ffe4 	bl	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e04c      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b04      	cmp	r3, #4
 8007830:	d118      	bne.n	8007864 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	f47f ae94 	bne.w	8007596 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	e000      	b.n	800788c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800788a:	2302      	movs	r3, #2
  }
}
 800788c:	4618      	mov	r0, r3
 800788e:	3728      	adds	r7, #40	; 0x28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	00010004 	.word	0x00010004
 8007898:	20000004 	.word	0x20000004
 800789c:	14f8b589 	.word	0x14f8b589

080078a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	461a      	mov	r2, r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	817b      	strh	r3, [r7, #10]
 80078b2:	460b      	mov	r3, r1
 80078b4:	813b      	strh	r3, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078ba:	f7fe fcc9 	bl	8006250 <HAL_GetTick>
 80078be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	f040 80d9 	bne.w	8007a80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2319      	movs	r3, #25
 80078d4:	2201      	movs	r2, #1
 80078d6:	496d      	ldr	r1, [pc, #436]	; (8007a8c <HAL_I2C_Mem_Write+0x1ec>)
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fe11 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078e4:	2302      	movs	r3, #2
 80078e6:	e0cc      	b.n	8007a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_I2C_Mem_Write+0x56>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e0c5      	b.n	8007a82 <HAL_I2C_Mem_Write+0x1e2>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b01      	cmp	r3, #1
 800790a:	d007      	beq.n	800791c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0201 	orr.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800792a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2221      	movs	r2, #33	; 0x21
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2240      	movs	r2, #64	; 0x40
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a3a      	ldr	r2, [r7, #32]
 8007946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800794c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4a4d      	ldr	r2, [pc, #308]	; (8007a90 <HAL_I2C_Mem_Write+0x1f0>)
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800795e:	88f8      	ldrh	r0, [r7, #6]
 8007960:	893a      	ldrh	r2, [r7, #8]
 8007962:	8979      	ldrh	r1, [r7, #10]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	4603      	mov	r3, r0
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fc48 	bl	8008204 <I2C_RequestMemoryWrite>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d052      	beq.n	8007a20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e081      	b.n	8007a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fe92 	bl	80086ac <I2C_WaitOnTXEFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	2b04      	cmp	r3, #4
 8007994:	d107      	bne.n	80079a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e06b      	b.n	8007a82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d11b      	bne.n	8007a20 <HAL_I2C_Mem_Write+0x180>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d017      	beq.n	8007a20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	781a      	ldrb	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1aa      	bne.n	800797e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fe7e 	bl	800872e <I2C_WaitOnBTFFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00d      	beq.n	8007a54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d107      	bne.n	8007a50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e016      	b.n	8007a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e000      	b.n	8007a82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a80:	2302      	movs	r3, #2
  }
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	00100002 	.word	0x00100002
 8007a90:	ffff0000 	.word	0xffff0000

08007a94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08c      	sub	sp, #48	; 0x30
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	817b      	strh	r3, [r7, #10]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	813b      	strh	r3, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ab2:	f7fe fbcd 	bl	8006250 <HAL_GetTick>
 8007ab6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	f040 8244 	bne.w	8007f4e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	2319      	movs	r3, #25
 8007acc:	2201      	movs	r2, #1
 8007ace:	4982      	ldr	r1, [pc, #520]	; (8007cd8 <HAL_I2C_Mem_Read+0x244>)
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fd15 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
 8007ade:	e237      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <HAL_I2C_Mem_Read+0x5a>
 8007aea:	2302      	movs	r3, #2
 8007aec:	e230      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d007      	beq.n	8007b14 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2222      	movs	r2, #34	; 0x22
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2240      	movs	r2, #64	; 0x40
 8007b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a62      	ldr	r2, [pc, #392]	; (8007cdc <HAL_I2C_Mem_Read+0x248>)
 8007b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b56:	88f8      	ldrh	r0, [r7, #6]
 8007b58:	893a      	ldrh	r2, [r7, #8]
 8007b5a:	8979      	ldrh	r1, [r7, #10]
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	9301      	str	r3, [sp, #4]
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	4603      	mov	r3, r0
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fbe2 	bl	8008330 <I2C_RequestMemoryRead>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e1ec      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d113      	bne.n	8007ba6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e1c0      	b.n	8007f28 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d11e      	bne.n	8007bec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bbe:	b672      	cpsid	i
}
 8007bc0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	61bb      	str	r3, [r7, #24]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007be8:	b662      	cpsie	i
}
 8007bea:	e035      	b.n	8007c58 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d11e      	bne.n	8007c32 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c04:	b672      	cpsid	i
}
 8007c06:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c08:	2300      	movs	r3, #0
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007c2e:	b662      	cpsie	i
}
 8007c30:	e012      	b.n	8007c58 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c40:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c42:	2300      	movs	r3, #0
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007c58:	e166      	b.n	8007f28 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	f200 811f 	bhi.w	8007ea2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d123      	bne.n	8007cb4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fd9d 	bl	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e167      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cb2:	e139      	b.n	8007f28 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d152      	bne.n	8007d62 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4906      	ldr	r1, [pc, #24]	; (8007ce0 <HAL_I2C_Mem_Read+0x24c>)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fc1a 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e13c      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
 8007cd6:	bf00      	nop
 8007cd8:	00100002 	.word	0x00100002
 8007cdc:	ffff0000 	.word	0xffff0000
 8007ce0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007ce4:	b672      	cpsid	i
}
 8007ce6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007d2a:	b662      	cpsie	i
}
 8007d2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691a      	ldr	r2, [r3, #16]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	b2d2      	uxtb	r2, r2
 8007d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d60:	e0e2      	b.n	8007f28 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	2200      	movs	r2, #0
 8007d6a:	497b      	ldr	r1, [pc, #492]	; (8007f58 <HAL_I2C_Mem_Read+0x4c4>)
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 fbc7 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e0e9      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d8c:	b672      	cpsid	i
}
 8007d8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007dc2:	4b66      	ldr	r3, [pc, #408]	; (8007f5c <HAL_I2C_Mem_Read+0x4c8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	08db      	lsrs	r3, r3, #3
 8007dc8:	4a65      	ldr	r2, [pc, #404]	; (8007f60 <HAL_I2C_Mem_Read+0x4cc>)
 8007dca:	fba2 2303 	umull	r2, r3, r2, r3
 8007dce:	0a1a      	lsrs	r2, r3, #8
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	00da      	lsls	r2, r3, #3
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d118      	bne.n	8007e1a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	f043 0220 	orr.w	r2, r3, #32
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007e0a:	b662      	cpsie	i
}
 8007e0c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e09a      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d1d9      	bne.n	8007ddc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691a      	ldr	r2, [r3, #16]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007e6a:	b662      	cpsie	i
}
 8007e6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ea0:	e042      	b.n	8007f28 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fc82 	bl	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e04c      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d118      	bne.n	8007f28 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	b2d2      	uxtb	r2, r2
 8007f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f47f ae94 	bne.w	8007c5a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e000      	b.n	8007f50 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007f4e:	2302      	movs	r3, #2
  }
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3728      	adds	r7, #40	; 0x28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	00010004 	.word	0x00010004
 8007f5c:	20000004 	.word	0x20000004
 8007f60:	14f8b589 	.word	0x14f8b589

08007f64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	460b      	mov	r3, r1
 8007f72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d006      	beq.n	8007f8e <I2C_MasterRequestWrite+0x2a>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d003      	beq.n	8007f8e <I2C_MasterRequestWrite+0x2a>
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f8c:	d108      	bne.n	8007fa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e00b      	b.n	8007fb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	2b12      	cmp	r3, #18
 8007fa6:	d107      	bne.n	8007fb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fa9b 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00d      	beq.n	8007fec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fde:	d103      	bne.n	8007fe8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e035      	b.n	8008058 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ff4:	d108      	bne.n	8008008 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ff6:	897b      	ldrh	r3, [r7, #10]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008004:	611a      	str	r2, [r3, #16]
 8008006:	e01b      	b.n	8008040 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008008:	897b      	ldrh	r3, [r7, #10]
 800800a:	11db      	asrs	r3, r3, #7
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f003 0306 	and.w	r3, r3, #6
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f063 030f 	orn	r3, r3, #15
 8008018:	b2da      	uxtb	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	490e      	ldr	r1, [pc, #56]	; (8008060 <I2C_MasterRequestWrite+0xfc>)
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fac1 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e010      	b.n	8008058 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	b2da      	uxtb	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4907      	ldr	r1, [pc, #28]	; (8008064 <I2C_MasterRequestWrite+0x100>)
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fab1 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e000      	b.n	8008058 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	00010008 	.word	0x00010008
 8008064:	00010002 	.word	0x00010002

08008068 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af02      	add	r7, sp, #8
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	460b      	mov	r3, r1
 8008076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800808c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b08      	cmp	r3, #8
 8008092:	d006      	beq.n	80080a2 <I2C_MasterRequestRead+0x3a>
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d003      	beq.n	80080a2 <I2C_MasterRequestRead+0x3a>
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080a0:	d108      	bne.n	80080b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e00b      	b.n	80080cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	2b11      	cmp	r3, #17
 80080ba:	d107      	bne.n	80080cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 fa11 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00d      	beq.n	8008100 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f2:	d103      	bne.n	80080fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e079      	b.n	80081f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008108:	d108      	bne.n	800811c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800810a:	897b      	ldrh	r3, [r7, #10]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	611a      	str	r2, [r3, #16]
 800811a:	e05f      	b.n	80081dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800811c:	897b      	ldrh	r3, [r7, #10]
 800811e:	11db      	asrs	r3, r3, #7
 8008120:	b2db      	uxtb	r3, r3
 8008122:	f003 0306 	and.w	r3, r3, #6
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f063 030f 	orn	r3, r3, #15
 800812c:	b2da      	uxtb	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	4930      	ldr	r1, [pc, #192]	; (80081fc <I2C_MasterRequestRead+0x194>)
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 fa37 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e054      	b.n	80081f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800814a:	897b      	ldrh	r3, [r7, #10]
 800814c:	b2da      	uxtb	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4929      	ldr	r1, [pc, #164]	; (8008200 <I2C_MasterRequestRead+0x198>)
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 fa27 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e044      	b.n	80081f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800818e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f9af 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00d      	beq.n	80081c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b6:	d103      	bne.n	80081c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e017      	b.n	80081f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80081c4:	897b      	ldrh	r3, [r7, #10]
 80081c6:	11db      	asrs	r3, r3, #7
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0306 	and.w	r3, r3, #6
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f063 030e 	orn	r3, r3, #14
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	4907      	ldr	r1, [pc, #28]	; (8008200 <I2C_MasterRequestRead+0x198>)
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 f9e3 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	00010008 	.word	0x00010008
 8008200:	00010002 	.word	0x00010002

08008204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	461a      	mov	r2, r3
 8008212:	4603      	mov	r3, r0
 8008214:	817b      	strh	r3, [r7, #10]
 8008216:	460b      	mov	r3, r1
 8008218:	813b      	strh	r3, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800822c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	2200      	movs	r2, #0
 8008236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 f960 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008254:	d103      	bne.n	800825e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800825c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e05f      	b.n	8008322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008262:	897b      	ldrh	r3, [r7, #10]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	6a3a      	ldr	r2, [r7, #32]
 8008276:	492d      	ldr	r1, [pc, #180]	; (800832c <I2C_RequestMemoryWrite+0x128>)
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f998 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e04c      	b.n	8008322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800829e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a0:	6a39      	ldr	r1, [r7, #32]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fa02 	bl	80086ac <I2C_WaitOnTXEFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00d      	beq.n	80082ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d107      	bne.n	80082c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e02b      	b.n	8008322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d105      	bne.n	80082dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082d0:	893b      	ldrh	r3, [r7, #8]
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	611a      	str	r2, [r3, #16]
 80082da:	e021      	b.n	8008320 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082dc:	893b      	ldrh	r3, [r7, #8]
 80082de:	0a1b      	lsrs	r3, r3, #8
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ec:	6a39      	ldr	r1, [r7, #32]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 f9dc 	bl	80086ac <I2C_WaitOnTXEFlagUntilTimeout>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00d      	beq.n	8008316 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d107      	bne.n	8008312 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e005      	b.n	8008322 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008316:	893b      	ldrh	r3, [r7, #8]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	00010002 	.word	0x00010002

08008330 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	4608      	mov	r0, r1
 800833a:	4611      	mov	r1, r2
 800833c:	461a      	mov	r2, r3
 800833e:	4603      	mov	r3, r0
 8008340:	817b      	strh	r3, [r7, #10]
 8008342:	460b      	mov	r3, r1
 8008344:	813b      	strh	r3, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008358:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008368:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	2200      	movs	r2, #0
 8008372:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 f8c2 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00d      	beq.n	800839e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008390:	d103      	bne.n	800839a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008398:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e0aa      	b.n	80084f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800839e:	897b      	ldrh	r3, [r7, #10]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	6a3a      	ldr	r2, [r7, #32]
 80083b2:	4952      	ldr	r1, [pc, #328]	; (80084fc <I2C_RequestMemoryRead+0x1cc>)
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f8fa 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e097      	b.n	80084f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083dc:	6a39      	ldr	r1, [r7, #32]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f964 	bl	80086ac <I2C_WaitOnTXEFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d107      	bne.n	8008402 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008400:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e076      	b.n	80084f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d105      	bne.n	8008418 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800840c:	893b      	ldrh	r3, [r7, #8]
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	611a      	str	r2, [r3, #16]
 8008416:	e021      	b.n	800845c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008418:	893b      	ldrh	r3, [r7, #8]
 800841a:	0a1b      	lsrs	r3, r3, #8
 800841c:	b29b      	uxth	r3, r3
 800841e:	b2da      	uxtb	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008428:	6a39      	ldr	r1, [r7, #32]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f93e 	bl	80086ac <I2C_WaitOnTXEFlagUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00d      	beq.n	8008452 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	2b04      	cmp	r3, #4
 800843c:	d107      	bne.n	800844e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800844c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e050      	b.n	80084f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008452:	893b      	ldrh	r3, [r7, #8]
 8008454:	b2da      	uxtb	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800845c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845e:	6a39      	ldr	r1, [r7, #32]
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f923 	bl	80086ac <I2C_WaitOnTXEFlagUntilTimeout>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00d      	beq.n	8008488 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b04      	cmp	r3, #4
 8008472:	d107      	bne.n	8008484 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008482:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e035      	b.n	80084f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008496:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	2200      	movs	r2, #0
 80084a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f82b 	bl	8008500 <I2C_WaitOnFlagUntilTimeout>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084be:	d103      	bne.n	80084c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e013      	b.n	80084f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80084cc:	897b      	ldrh	r3, [r7, #10]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	6a3a      	ldr	r2, [r7, #32]
 80084e0:	4906      	ldr	r1, [pc, #24]	; (80084fc <I2C_RequestMemoryRead+0x1cc>)
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 f863 	bl	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	00010002 	.word	0x00010002

08008500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008510:	e025      	b.n	800855e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d021      	beq.n	800855e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851a:	f7fd fe99 	bl	8006250 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d302      	bcc.n	8008530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d116      	bne.n	800855e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	f043 0220 	orr.w	r2, r3, #32
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e023      	b.n	80085a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	0c1b      	lsrs	r3, r3, #16
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b01      	cmp	r3, #1
 8008566:	d10d      	bne.n	8008584 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	43da      	mvns	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4013      	ands	r3, r2
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	bf0c      	ite	eq
 800857a:	2301      	moveq	r3, #1
 800857c:	2300      	movne	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	e00c      	b.n	800859e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	43da      	mvns	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4013      	ands	r3, r2
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	bf0c      	ite	eq
 8008596:	2301      	moveq	r3, #1
 8008598:	2300      	movne	r3, #0
 800859a:	b2db      	uxtb	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d0b6      	beq.n	8008512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085bc:	e051      	b.n	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085cc:	d123      	bne.n	8008616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f043 0204 	orr.w	r2, r3, #4
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e046      	b.n	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861c:	d021      	beq.n	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861e:	f7fd fe17 	bl	8006250 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	429a      	cmp	r2, r3
 800862c:	d302      	bcc.n	8008634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d116      	bne.n	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2220      	movs	r2, #32
 800863e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	f043 0220 	orr.w	r2, r3, #32
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e020      	b.n	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	0c1b      	lsrs	r3, r3, #16
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d10c      	bne.n	8008686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	43da      	mvns	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4013      	ands	r3, r2
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	e00b      	b.n	800869e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	43da      	mvns	r2, r3
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	4013      	ands	r3, r2
 8008692:	b29b      	uxth	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	bf14      	ite	ne
 8008698:	2301      	movne	r3, #1
 800869a:	2300      	moveq	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d18d      	bne.n	80085be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086b8:	e02d      	b.n	8008716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f8ce 	bl	800885c <I2C_IsAcknowledgeFailed>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e02d      	b.n	8008726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d021      	beq.n	8008716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d2:	f7fd fdbd 	bl	8006250 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d302      	bcc.n	80086e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d116      	bne.n	8008716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	f043 0220 	orr.w	r2, r3, #32
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e007      	b.n	8008726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008720:	2b80      	cmp	r3, #128	; 0x80
 8008722:	d1ca      	bne.n	80086ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800873a:	e02d      	b.n	8008798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f88d 	bl	800885c <I2C_IsAcknowledgeFailed>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e02d      	b.n	80087a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d021      	beq.n	8008798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008754:	f7fd fd7c 	bl	8006250 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	429a      	cmp	r2, r3
 8008762:	d302      	bcc.n	800876a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d116      	bne.n	8008798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	f043 0220 	orr.w	r2, r3, #32
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e007      	b.n	80087a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	f003 0304 	and.w	r3, r3, #4
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	d1ca      	bne.n	800873c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087bc:	e042      	b.n	8008844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d119      	bne.n	8008800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f06f 0210 	mvn.w	r2, #16
 80087d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e029      	b.n	8008854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008800:	f7fd fd26 	bl	8006250 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	d302      	bcc.n	8008816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d116      	bne.n	8008844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	f043 0220 	orr.w	r2, r3, #32
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e007      	b.n	8008854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884e:	2b40      	cmp	r3, #64	; 0x40
 8008850:	d1b5      	bne.n	80087be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800886e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008872:	d11b      	bne.n	80088ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800887c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	f043 0204 	orr.w	r2, r3, #4
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e26c      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 8087 	beq.w	80089e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088d8:	4b92      	ldr	r3, [pc, #584]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f003 030c 	and.w	r3, r3, #12
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d00c      	beq.n	80088fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80088e4:	4b8f      	ldr	r3, [pc, #572]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f003 030c 	and.w	r3, r3, #12
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d112      	bne.n	8008916 <HAL_RCC_OscConfig+0x5e>
 80088f0:	4b8c      	ldr	r3, [pc, #560]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088fc:	d10b      	bne.n	8008916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088fe:	4b89      	ldr	r3, [pc, #548]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d06c      	beq.n	80089e4 <HAL_RCC_OscConfig+0x12c>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d168      	bne.n	80089e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e246      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800891e:	d106      	bne.n	800892e <HAL_RCC_OscConfig+0x76>
 8008920:	4b80      	ldr	r3, [pc, #512]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a7f      	ldr	r2, [pc, #508]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	e02e      	b.n	800898c <HAL_RCC_OscConfig+0xd4>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10c      	bne.n	8008950 <HAL_RCC_OscConfig+0x98>
 8008936:	4b7b      	ldr	r3, [pc, #492]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a7a      	ldr	r2, [pc, #488]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 800893c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	4b78      	ldr	r3, [pc, #480]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a77      	ldr	r2, [pc, #476]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	e01d      	b.n	800898c <HAL_RCC_OscConfig+0xd4>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008958:	d10c      	bne.n	8008974 <HAL_RCC_OscConfig+0xbc>
 800895a:	4b72      	ldr	r3, [pc, #456]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a71      	ldr	r2, [pc, #452]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	4b6f      	ldr	r3, [pc, #444]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a6e      	ldr	r2, [pc, #440]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 800896c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	e00b      	b.n	800898c <HAL_RCC_OscConfig+0xd4>
 8008974:	4b6b      	ldr	r3, [pc, #428]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a6a      	ldr	r2, [pc, #424]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 800897a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	4b68      	ldr	r3, [pc, #416]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a67      	ldr	r2, [pc, #412]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800898a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d013      	beq.n	80089bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008994:	f7fd fc5c 	bl	8006250 <HAL_GetTick>
 8008998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800899c:	f7fd fc58 	bl	8006250 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b64      	cmp	r3, #100	; 0x64
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e1fa      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089ae:	4b5d      	ldr	r3, [pc, #372]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0f0      	beq.n	800899c <HAL_RCC_OscConfig+0xe4>
 80089ba:	e014      	b.n	80089e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089bc:	f7fd fc48 	bl	8006250 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089c2:	e008      	b.n	80089d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089c4:	f7fd fc44 	bl	8006250 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b64      	cmp	r3, #100	; 0x64
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e1e6      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089d6:	4b53      	ldr	r3, [pc, #332]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f0      	bne.n	80089c4 <HAL_RCC_OscConfig+0x10c>
 80089e2:	e000      	b.n	80089e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d063      	beq.n	8008aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089f2:	4b4c      	ldr	r3, [pc, #304]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f003 030c 	and.w	r3, r3, #12
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00b      	beq.n	8008a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80089fe:	4b49      	ldr	r3, [pc, #292]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f003 030c 	and.w	r3, r3, #12
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d11c      	bne.n	8008a44 <HAL_RCC_OscConfig+0x18c>
 8008a0a:	4b46      	ldr	r3, [pc, #280]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d116      	bne.n	8008a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a16:	4b43      	ldr	r3, [pc, #268]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <HAL_RCC_OscConfig+0x176>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d001      	beq.n	8008a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e1ba      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2e:	4b3d      	ldr	r3, [pc, #244]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	4939      	ldr	r1, [pc, #228]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a42:	e03a      	b.n	8008aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d020      	beq.n	8008a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a4c:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <HAL_RCC_OscConfig+0x270>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a52:	f7fd fbfd 	bl	8006250 <HAL_GetTick>
 8008a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a5a:	f7fd fbf9 	bl	8006250 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e19b      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a6c:	4b2d      	ldr	r3, [pc, #180]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0f0      	beq.n	8008a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a78:	4b2a      	ldr	r3, [pc, #168]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	4927      	ldr	r1, [pc, #156]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	600b      	str	r3, [r1, #0]
 8008a8c:	e015      	b.n	8008aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a8e:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <HAL_RCC_OscConfig+0x270>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a94:	f7fd fbdc 	bl	8006250 <HAL_GetTick>
 8008a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a9c:	f7fd fbd8 	bl	8006250 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e17a      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aae:	4b1d      	ldr	r3, [pc, #116]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f0      	bne.n	8008a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d03a      	beq.n	8008b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d019      	beq.n	8008b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ace:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <HAL_RCC_OscConfig+0x274>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ad4:	f7fd fbbc 	bl	8006250 <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008adc:	f7fd fbb8 	bl	8006250 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e15a      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <HAL_RCC_OscConfig+0x26c>)
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0f0      	beq.n	8008adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008afa:	2001      	movs	r0, #1
 8008afc:	f000 fad8 	bl	80090b0 <RCC_Delay>
 8008b00:	e01c      	b.n	8008b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b02:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <HAL_RCC_OscConfig+0x274>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b08:	f7fd fba2 	bl	8006250 <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b0e:	e00f      	b.n	8008b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b10:	f7fd fb9e 	bl	8006250 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d908      	bls.n	8008b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e140      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
 8008b22:	bf00      	nop
 8008b24:	40021000 	.word	0x40021000
 8008b28:	42420000 	.word	0x42420000
 8008b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b30:	4b9e      	ldr	r3, [pc, #632]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e9      	bne.n	8008b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 80a6 	beq.w	8008c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b4e:	4b97      	ldr	r3, [pc, #604]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10d      	bne.n	8008b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b5a:	4b94      	ldr	r3, [pc, #592]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	4a93      	ldr	r2, [pc, #588]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b64:	61d3      	str	r3, [r2, #28]
 8008b66:	4b91      	ldr	r3, [pc, #580]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b6e:	60bb      	str	r3, [r7, #8]
 8008b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b72:	2301      	movs	r3, #1
 8008b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b76:	4b8e      	ldr	r3, [pc, #568]	; (8008db0 <HAL_RCC_OscConfig+0x4f8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d118      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b82:	4b8b      	ldr	r3, [pc, #556]	; (8008db0 <HAL_RCC_OscConfig+0x4f8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a8a      	ldr	r2, [pc, #552]	; (8008db0 <HAL_RCC_OscConfig+0x4f8>)
 8008b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b8e:	f7fd fb5f 	bl	8006250 <HAL_GetTick>
 8008b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b94:	e008      	b.n	8008ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b96:	f7fd fb5b 	bl	8006250 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b64      	cmp	r3, #100	; 0x64
 8008ba2:	d901      	bls.n	8008ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e0fd      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ba8:	4b81      	ldr	r3, [pc, #516]	; (8008db0 <HAL_RCC_OscConfig+0x4f8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0f0      	beq.n	8008b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d106      	bne.n	8008bca <HAL_RCC_OscConfig+0x312>
 8008bbc:	4b7b      	ldr	r3, [pc, #492]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	4a7a      	ldr	r2, [pc, #488]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	6213      	str	r3, [r2, #32]
 8008bc8:	e02d      	b.n	8008c26 <HAL_RCC_OscConfig+0x36e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCC_OscConfig+0x334>
 8008bd2:	4b76      	ldr	r3, [pc, #472]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	4a75      	ldr	r2, [pc, #468]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	6213      	str	r3, [r2, #32]
 8008bde:	4b73      	ldr	r3, [pc, #460]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	4a72      	ldr	r2, [pc, #456]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008be4:	f023 0304 	bic.w	r3, r3, #4
 8008be8:	6213      	str	r3, [r2, #32]
 8008bea:	e01c      	b.n	8008c26 <HAL_RCC_OscConfig+0x36e>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b05      	cmp	r3, #5
 8008bf2:	d10c      	bne.n	8008c0e <HAL_RCC_OscConfig+0x356>
 8008bf4:	4b6d      	ldr	r3, [pc, #436]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	4a6c      	ldr	r2, [pc, #432]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008bfa:	f043 0304 	orr.w	r3, r3, #4
 8008bfe:	6213      	str	r3, [r2, #32]
 8008c00:	4b6a      	ldr	r3, [pc, #424]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	4a69      	ldr	r2, [pc, #420]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	6213      	str	r3, [r2, #32]
 8008c0c:	e00b      	b.n	8008c26 <HAL_RCC_OscConfig+0x36e>
 8008c0e:	4b67      	ldr	r3, [pc, #412]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	4a66      	ldr	r2, [pc, #408]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	6213      	str	r3, [r2, #32]
 8008c1a:	4b64      	ldr	r3, [pc, #400]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	4a63      	ldr	r2, [pc, #396]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c20:	f023 0304 	bic.w	r3, r3, #4
 8008c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d015      	beq.n	8008c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c2e:	f7fd fb0f 	bl	8006250 <HAL_GetTick>
 8008c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c34:	e00a      	b.n	8008c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c36:	f7fd fb0b 	bl	8006250 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d901      	bls.n	8008c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e0ab      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c4c:	4b57      	ldr	r3, [pc, #348]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0ee      	beq.n	8008c36 <HAL_RCC_OscConfig+0x37e>
 8008c58:	e014      	b.n	8008c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c5a:	f7fd faf9 	bl	8006250 <HAL_GetTick>
 8008c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c60:	e00a      	b.n	8008c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c62:	f7fd faf5 	bl	8006250 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d901      	bls.n	8008c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e095      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c78:	4b4c      	ldr	r3, [pc, #304]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1ee      	bne.n	8008c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d105      	bne.n	8008c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c8a:	4b48      	ldr	r3, [pc, #288]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	4a47      	ldr	r2, [pc, #284]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8081 	beq.w	8008da2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ca0:	4b42      	ldr	r3, [pc, #264]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f003 030c 	and.w	r3, r3, #12
 8008ca8:	2b08      	cmp	r3, #8
 8008caa:	d061      	beq.n	8008d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d146      	bne.n	8008d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cb4:	4b3f      	ldr	r3, [pc, #252]	; (8008db4 <HAL_RCC_OscConfig+0x4fc>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cba:	f7fd fac9 	bl	8006250 <HAL_GetTick>
 8008cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cc0:	e008      	b.n	8008cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc2:	f7fd fac5 	bl	8006250 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e067      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cd4:	4b35      	ldr	r3, [pc, #212]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1f0      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce8:	d108      	bne.n	8008cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008cea:	4b30      	ldr	r3, [pc, #192]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	492d      	ldr	r1, [pc, #180]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cfc:	4b2b      	ldr	r3, [pc, #172]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a19      	ldr	r1, [r3, #32]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	430b      	orrs	r3, r1
 8008d0e:	4927      	ldr	r1, [pc, #156]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d14:	4b27      	ldr	r3, [pc, #156]	; (8008db4 <HAL_RCC_OscConfig+0x4fc>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d1a:	f7fd fa99 	bl	8006250 <HAL_GetTick>
 8008d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d22:	f7fd fa95 	bl	8006250 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e037      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d34:	4b1d      	ldr	r3, [pc, #116]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f0      	beq.n	8008d22 <HAL_RCC_OscConfig+0x46a>
 8008d40:	e02f      	b.n	8008da2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d42:	4b1c      	ldr	r3, [pc, #112]	; (8008db4 <HAL_RCC_OscConfig+0x4fc>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d48:	f7fd fa82 	bl	8006250 <HAL_GetTick>
 8008d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d50:	f7fd fa7e 	bl	8006250 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e020      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1f0      	bne.n	8008d50 <HAL_RCC_OscConfig+0x498>
 8008d6e:	e018      	b.n	8008da2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e013      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <HAL_RCC_OscConfig+0x4f4>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d106      	bne.n	8008d9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d001      	beq.n	8008da2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e000      	b.n	8008da4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	40021000 	.word	0x40021000
 8008db0:	40007000 	.word	0x40007000
 8008db4:	42420060 	.word	0x42420060

08008db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e0d0      	b.n	8008f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dcc:	4b6a      	ldr	r3, [pc, #424]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d910      	bls.n	8008dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dda:	4b67      	ldr	r3, [pc, #412]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f023 0207 	bic.w	r2, r3, #7
 8008de2:	4965      	ldr	r1, [pc, #404]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dea:	4b63      	ldr	r3, [pc, #396]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d001      	beq.n	8008dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e0b8      	b.n	8008f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d020      	beq.n	8008e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e14:	4b59      	ldr	r3, [pc, #356]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a58      	ldr	r2, [pc, #352]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e2c:	4b53      	ldr	r3, [pc, #332]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	4a52      	ldr	r2, [pc, #328]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e38:	4b50      	ldr	r3, [pc, #320]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	494d      	ldr	r1, [pc, #308]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d040      	beq.n	8008ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d107      	bne.n	8008e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e5e:	4b47      	ldr	r3, [pc, #284]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d115      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e07f      	b.n	8008f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d107      	bne.n	8008e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e76:	4b41      	ldr	r3, [pc, #260]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e073      	b.n	8008f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e86:	4b3d      	ldr	r3, [pc, #244]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e06b      	b.n	8008f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e96:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f023 0203 	bic.w	r2, r3, #3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4936      	ldr	r1, [pc, #216]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ea8:	f7fd f9d2 	bl	8006250 <HAL_GetTick>
 8008eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eae:	e00a      	b.n	8008ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eb0:	f7fd f9ce 	bl	8006250 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e053      	b.n	8008f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ec6:	4b2d      	ldr	r3, [pc, #180]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f003 020c 	and.w	r2, r3, #12
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d1eb      	bne.n	8008eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ed8:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d210      	bcs.n	8008f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ee6:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f023 0207 	bic.w	r2, r3, #7
 8008eee:	4922      	ldr	r1, [pc, #136]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ef6:	4b20      	ldr	r3, [pc, #128]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d001      	beq.n	8008f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e032      	b.n	8008f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f14:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	4916      	ldr	r1, [pc, #88]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0308 	and.w	r3, r3, #8
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f32:	4b12      	ldr	r3, [pc, #72]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	490e      	ldr	r1, [pc, #56]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f46:	f000 f821 	bl	8008f8c <HAL_RCC_GetSysClockFreq>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	091b      	lsrs	r3, r3, #4
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	490a      	ldr	r1, [pc, #40]	; (8008f80 <HAL_RCC_ClockConfig+0x1c8>)
 8008f58:	5ccb      	ldrb	r3, [r1, r3]
 8008f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5e:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <HAL_RCC_ClockConfig+0x1cc>)
 8008f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <HAL_RCC_ClockConfig+0x1d0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fd f930 	bl	80061cc <HAL_InitTick>

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	40022000 	.word	0x40022000
 8008f7c:	40021000 	.word	0x40021000
 8008f80:	08014444 	.word	0x08014444
 8008f84:	20000004 	.word	0x20000004
 8008f88:	20000008 	.word	0x20000008

08008f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f8c:	b490      	push	{r4, r7}
 8008f8e:	b08a      	sub	sp, #40	; 0x28
 8008f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008f92:	4b2a      	ldr	r3, [pc, #168]	; (800903c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008f94:	1d3c      	adds	r4, r7, #4
 8008f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008f9c:	f240 2301 	movw	r3, #513	; 0x201
 8008fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61fb      	str	r3, [r7, #28]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	2300      	movs	r3, #0
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008fb6:	4b22      	ldr	r3, [pc, #136]	; (8009040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d002      	beq.n	8008fcc <HAL_RCC_GetSysClockFreq+0x40>
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	d003      	beq.n	8008fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8008fca:	e02d      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008fcc:	4b1d      	ldr	r3, [pc, #116]	; (8009044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fce:	623b      	str	r3, [r7, #32]
      break;
 8008fd0:	e02d      	b.n	800902e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	0c9b      	lsrs	r3, r3, #18
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008fde:	4413      	add	r3, r2
 8008fe0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008fe4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d013      	beq.n	8009018 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ff0:	4b13      	ldr	r3, [pc, #76]	; (8009040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	0c5b      	lsrs	r3, r3, #17
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008ffe:	4413      	add	r3, r2
 8009000:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009004:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	4a0e      	ldr	r2, [pc, #56]	; (8009044 <HAL_RCC_GetSysClockFreq+0xb8>)
 800900a:	fb02 f203 	mul.w	r2, r2, r3
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	fbb2 f3f3 	udiv	r3, r2, r3
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
 8009016:	e004      	b.n	8009022 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4a0b      	ldr	r2, [pc, #44]	; (8009048 <HAL_RCC_GetSysClockFreq+0xbc>)
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	623b      	str	r3, [r7, #32]
      break;
 8009026:	e002      	b.n	800902e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <HAL_RCC_GetSysClockFreq+0xb8>)
 800902a:	623b      	str	r3, [r7, #32]
      break;
 800902c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800902e:	6a3b      	ldr	r3, [r7, #32]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3728      	adds	r7, #40	; 0x28
 8009034:	46bd      	mov	sp, r7
 8009036:	bc90      	pop	{r4, r7}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	08014434 	.word	0x08014434
 8009040:	40021000 	.word	0x40021000
 8009044:	007a1200 	.word	0x007a1200
 8009048:	003d0900 	.word	0x003d0900

0800904c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800904c:	b480      	push	{r7}
 800904e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <HAL_RCC_GetHCLKFreq+0x10>)
 8009052:	681b      	ldr	r3, [r3, #0]
}
 8009054:	4618      	mov	r0, r3
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr
 800905c:	20000004 	.word	0x20000004

08009060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009064:	f7ff fff2 	bl	800904c <HAL_RCC_GetHCLKFreq>
 8009068:	4602      	mov	r2, r0
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	0a1b      	lsrs	r3, r3, #8
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	4903      	ldr	r1, [pc, #12]	; (8009084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009076:	5ccb      	ldrb	r3, [r1, r3]
 8009078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800907c:	4618      	mov	r0, r3
 800907e:	bd80      	pop	{r7, pc}
 8009080:	40021000 	.word	0x40021000
 8009084:	08014454 	.word	0x08014454

08009088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800908c:	f7ff ffde 	bl	800904c <HAL_RCC_GetHCLKFreq>
 8009090:	4602      	mov	r2, r0
 8009092:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	0adb      	lsrs	r3, r3, #11
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	4903      	ldr	r1, [pc, #12]	; (80090ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800909e:	5ccb      	ldrb	r3, [r1, r3]
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40021000 	.word	0x40021000
 80090ac:	08014454 	.word	0x08014454

080090b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <RCC_Delay+0x34>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a0a      	ldr	r2, [pc, #40]	; (80090e8 <RCC_Delay+0x38>)
 80090be:	fba2 2303 	umull	r2, r3, r2, r3
 80090c2:	0a5b      	lsrs	r3, r3, #9
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80090cc:	bf00      	nop
  }
  while (Delay --);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	60fa      	str	r2, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1f9      	bne.n	80090cc <RCC_Delay+0x1c>
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr
 80090e4:	20000004 	.word	0x20000004
 80090e8:	10624dd3 	.word	0x10624dd3

080090ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e041      	b.n	8009182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fc fc54 	bl	80059c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f000 fe98 	bl	8009e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b01      	cmp	r3, #1
 800919e:	d001      	beq.n	80091a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e032      	b.n	800920a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a18      	ldr	r2, [pc, #96]	; (8009214 <HAL_TIM_Base_Start+0x88>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00e      	beq.n	80091d4 <HAL_TIM_Base_Start+0x48>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d009      	beq.n	80091d4 <HAL_TIM_Base_Start+0x48>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a14      	ldr	r2, [pc, #80]	; (8009218 <HAL_TIM_Base_Start+0x8c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d004      	beq.n	80091d4 <HAL_TIM_Base_Start+0x48>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a13      	ldr	r2, [pc, #76]	; (800921c <HAL_TIM_Base_Start+0x90>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d111      	bne.n	80091f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b06      	cmp	r3, #6
 80091e4:	d010      	beq.n	8009208 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0201 	orr.w	r2, r2, #1
 80091f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f6:	e007      	b.n	8009208 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0201 	orr.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	bc80      	pop	{r7}
 8009212:	4770      	bx	lr
 8009214:	40012c00 	.word	0x40012c00
 8009218:	40000400 	.word	0x40000400
 800921c:	40000800 	.word	0x40000800

08009220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b01      	cmp	r3, #1
 8009232:	d001      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e03a      	b.n	80092ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2202      	movs	r2, #2
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0201 	orr.w	r2, r2, #1
 800924e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <HAL_TIM_Base_Start_IT+0x98>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00e      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x58>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009262:	d009      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x58>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a14      	ldr	r2, [pc, #80]	; (80092bc <HAL_TIM_Base_Start_IT+0x9c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d004      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x58>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a13      	ldr	r2, [pc, #76]	; (80092c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d111      	bne.n	800929c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b06      	cmp	r3, #6
 8009288:	d010      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f042 0201 	orr.w	r2, r2, #1
 8009298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800929a:	e007      	b.n	80092ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bc80      	pop	{r7}
 80092b6:	4770      	bx	lr
 80092b8:	40012c00 	.word	0x40012c00
 80092bc:	40000400 	.word	0x40000400
 80092c0:	40000800 	.word	0x40000800

080092c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e041      	b.n	800935a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7fc fb4a 	bl	8005984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3304      	adds	r3, #4
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f000 fdac 	bl	8009e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <HAL_TIM_PWM_Start+0x24>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b01      	cmp	r3, #1
 800937e:	bf14      	ite	ne
 8009380:	2301      	movne	r3, #1
 8009382:	2300      	moveq	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	e022      	b.n	80093ce <HAL_TIM_PWM_Start+0x6a>
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b04      	cmp	r3, #4
 800938c:	d109      	bne.n	80093a2 <HAL_TIM_PWM_Start+0x3e>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b01      	cmp	r3, #1
 8009398:	bf14      	ite	ne
 800939a:	2301      	movne	r3, #1
 800939c:	2300      	moveq	r3, #0
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	e015      	b.n	80093ce <HAL_TIM_PWM_Start+0x6a>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d109      	bne.n	80093bc <HAL_TIM_PWM_Start+0x58>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	e008      	b.n	80093ce <HAL_TIM_PWM_Start+0x6a>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	bf14      	ite	ne
 80093c8:	2301      	movne	r3, #1
 80093ca:	2300      	moveq	r3, #0
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e05e      	b.n	8009494 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <HAL_TIM_PWM_Start+0x82>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e4:	e013      	b.n	800940e <HAL_TIM_PWM_Start+0xaa>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d104      	bne.n	80093f6 <HAL_TIM_PWM_Start+0x92>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093f4:	e00b      	b.n	800940e <HAL_TIM_PWM_Start+0xaa>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d104      	bne.n	8009406 <HAL_TIM_PWM_Start+0xa2>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009404:	e003      	b.n	800940e <HAL_TIM_PWM_Start+0xaa>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2202      	movs	r2, #2
 800940a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2201      	movs	r2, #1
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f001 f8af 	bl	800a57a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a1e      	ldr	r2, [pc, #120]	; (800949c <HAL_TIM_PWM_Start+0x138>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d107      	bne.n	8009436 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009434:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a18      	ldr	r2, [pc, #96]	; (800949c <HAL_TIM_PWM_Start+0x138>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00e      	beq.n	800945e <HAL_TIM_PWM_Start+0xfa>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009448:	d009      	beq.n	800945e <HAL_TIM_PWM_Start+0xfa>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <HAL_TIM_PWM_Start+0x13c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_TIM_PWM_Start+0xfa>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a12      	ldr	r2, [pc, #72]	; (80094a4 <HAL_TIM_PWM_Start+0x140>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d111      	bne.n	8009482 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b06      	cmp	r3, #6
 800946e:	d010      	beq.n	8009492 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0201 	orr.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009480:	e007      	b.n	8009492 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f042 0201 	orr.w	r2, r2, #1
 8009490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40000400 	.word	0x40000400
 80094a4:	40000800 	.word	0x40000800

080094a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e041      	b.n	800953e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f839 	bl	8009546 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4619      	mov	r1, r3
 80094e6:	4610      	mov	r0, r2
 80094e8:	f000 fcba 	bl	8009e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	bc80      	pop	{r7}
 8009556:	4770      	bx	lr

08009558 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <HAL_TIM_IC_Start_IT+0x1a>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800956e:	b2db      	uxtb	r3, r3
 8009570:	e013      	b.n	800959a <HAL_TIM_IC_Start_IT+0x42>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b04      	cmp	r3, #4
 8009576:	d104      	bne.n	8009582 <HAL_TIM_IC_Start_IT+0x2a>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800957e:	b2db      	uxtb	r3, r3
 8009580:	e00b      	b.n	800959a <HAL_TIM_IC_Start_IT+0x42>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b08      	cmp	r3, #8
 8009586:	d104      	bne.n	8009592 <HAL_TIM_IC_Start_IT+0x3a>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800958e:	b2db      	uxtb	r3, r3
 8009590:	e003      	b.n	800959a <HAL_TIM_IC_Start_IT+0x42>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009598:	b2db      	uxtb	r3, r3
 800959a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <HAL_TIM_IC_Start_IT+0x54>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	e013      	b.n	80095d4 <HAL_TIM_IC_Start_IT+0x7c>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d104      	bne.n	80095bc <HAL_TIM_IC_Start_IT+0x64>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	e00b      	b.n	80095d4 <HAL_TIM_IC_Start_IT+0x7c>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b08      	cmp	r3, #8
 80095c0:	d104      	bne.n	80095cc <HAL_TIM_IC_Start_IT+0x74>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	e003      	b.n	80095d4 <HAL_TIM_IC_Start_IT+0x7c>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d102      	bne.n	80095e2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d001      	beq.n	80095e6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e0b3      	b.n	800974e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d104      	bne.n	80095f6 <HAL_TIM_IC_Start_IT+0x9e>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095f4:	e013      	b.n	800961e <HAL_TIM_IC_Start_IT+0xc6>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d104      	bne.n	8009606 <HAL_TIM_IC_Start_IT+0xae>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009604:	e00b      	b.n	800961e <HAL_TIM_IC_Start_IT+0xc6>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b08      	cmp	r3, #8
 800960a:	d104      	bne.n	8009616 <HAL_TIM_IC_Start_IT+0xbe>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2202      	movs	r2, #2
 8009610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009614:	e003      	b.n	800961e <HAL_TIM_IC_Start_IT+0xc6>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2202      	movs	r2, #2
 800961a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d104      	bne.n	800962e <HAL_TIM_IC_Start_IT+0xd6>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800962c:	e013      	b.n	8009656 <HAL_TIM_IC_Start_IT+0xfe>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b04      	cmp	r3, #4
 8009632:	d104      	bne.n	800963e <HAL_TIM_IC_Start_IT+0xe6>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800963c:	e00b      	b.n	8009656 <HAL_TIM_IC_Start_IT+0xfe>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b08      	cmp	r3, #8
 8009642:	d104      	bne.n	800964e <HAL_TIM_IC_Start_IT+0xf6>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800964c:	e003      	b.n	8009656 <HAL_TIM_IC_Start_IT+0xfe>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2202      	movs	r2, #2
 8009652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b0c      	cmp	r3, #12
 800965a:	d841      	bhi.n	80096e0 <HAL_TIM_IC_Start_IT+0x188>
 800965c:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <HAL_TIM_IC_Start_IT+0x10c>)
 800965e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009662:	bf00      	nop
 8009664:	08009699 	.word	0x08009699
 8009668:	080096e1 	.word	0x080096e1
 800966c:	080096e1 	.word	0x080096e1
 8009670:	080096e1 	.word	0x080096e1
 8009674:	080096ab 	.word	0x080096ab
 8009678:	080096e1 	.word	0x080096e1
 800967c:	080096e1 	.word	0x080096e1
 8009680:	080096e1 	.word	0x080096e1
 8009684:	080096bd 	.word	0x080096bd
 8009688:	080096e1 	.word	0x080096e1
 800968c:	080096e1 	.word	0x080096e1
 8009690:	080096e1 	.word	0x080096e1
 8009694:	080096cf 	.word	0x080096cf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68da      	ldr	r2, [r3, #12]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0202 	orr.w	r2, r2, #2
 80096a6:	60da      	str	r2, [r3, #12]
      break;
 80096a8:	e01b      	b.n	80096e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0204 	orr.w	r2, r2, #4
 80096b8:	60da      	str	r2, [r3, #12]
      break;
 80096ba:	e012      	b.n	80096e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f042 0208 	orr.w	r2, r2, #8
 80096ca:	60da      	str	r2, [r3, #12]
      break;
 80096cc:	e009      	b.n	80096e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68da      	ldr	r2, [r3, #12]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0210 	orr.w	r2, r2, #16
 80096dc:	60da      	str	r2, [r3, #12]
      break;
 80096de:	e000      	b.n	80096e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80096e0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2201      	movs	r2, #1
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 ff45 	bl	800a57a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a18      	ldr	r2, [pc, #96]	; (8009758 <HAL_TIM_IC_Start_IT+0x200>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00e      	beq.n	8009718 <HAL_TIM_IC_Start_IT+0x1c0>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009702:	d009      	beq.n	8009718 <HAL_TIM_IC_Start_IT+0x1c0>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a14      	ldr	r2, [pc, #80]	; (800975c <HAL_TIM_IC_Start_IT+0x204>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d004      	beq.n	8009718 <HAL_TIM_IC_Start_IT+0x1c0>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a13      	ldr	r2, [pc, #76]	; (8009760 <HAL_TIM_IC_Start_IT+0x208>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d111      	bne.n	800973c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b06      	cmp	r3, #6
 8009728:	d010      	beq.n	800974c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f042 0201 	orr.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800973a:	e007      	b.n	800974c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40012c00 	.word	0x40012c00
 800975c:	40000400 	.word	0x40000400
 8009760:	40000800 	.word	0x40000800

08009764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f003 0302 	and.w	r3, r3, #2
 8009776:	2b02      	cmp	r3, #2
 8009778:	d122      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b02      	cmp	r3, #2
 8009786:	d11b      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f06f 0202 	mvn.w	r2, #2
 8009790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7fb ff3e 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 80097ac:	e005      	b.n	80097ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fb3a 	bl	8009e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fb40 	bl	8009e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f003 0304 	and.w	r3, r3, #4
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	d122      	bne.n	8009814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f003 0304 	and.w	r3, r3, #4
 80097d8:	2b04      	cmp	r3, #4
 80097da:	d11b      	bne.n	8009814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f06f 0204 	mvn.w	r2, #4
 80097e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2202      	movs	r2, #2
 80097ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7fb ff14 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 8009800:	e005      	b.n	800980e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fb10 	bl	8009e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fb16 	bl	8009e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f003 0308 	and.w	r3, r3, #8
 800981e:	2b08      	cmp	r3, #8
 8009820:	d122      	bne.n	8009868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f003 0308 	and.w	r3, r3, #8
 800982c:	2b08      	cmp	r3, #8
 800982e:	d11b      	bne.n	8009868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f06f 0208 	mvn.w	r2, #8
 8009838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2204      	movs	r2, #4
 800983e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7fb feea 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 8009854:	e005      	b.n	8009862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fae6 	bl	8009e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 faec 	bl	8009e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	2b10      	cmp	r3, #16
 8009874:	d122      	bne.n	80098bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f003 0310 	and.w	r3, r3, #16
 8009880:	2b10      	cmp	r3, #16
 8009882:	d11b      	bne.n	80098bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f06f 0210 	mvn.w	r2, #16
 800988c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2208      	movs	r2, #8
 8009892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7fb fec0 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 80098a8:	e005      	b.n	80098b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fabc 	bl	8009e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fac2 	bl	8009e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d10e      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d107      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f06f 0201 	mvn.w	r2, #1
 80098e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7fb f854 	bl	8004990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	2b80      	cmp	r3, #128	; 0x80
 80098f4:	d10e      	bne.n	8009914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009900:	2b80      	cmp	r3, #128	; 0x80
 8009902:	d107      	bne.n	8009914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800990c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 ffae 	bl	800a870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991e:	2b40      	cmp	r3, #64	; 0x40
 8009920:	d10e      	bne.n	8009940 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992c:	2b40      	cmp	r3, #64	; 0x40
 800992e:	d107      	bne.n	8009940 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fa86 	bl	8009e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	f003 0320 	and.w	r3, r3, #32
 800994a:	2b20      	cmp	r3, #32
 800994c:	d10e      	bne.n	800996c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f003 0320 	and.w	r3, r3, #32
 8009958:	2b20      	cmp	r3, #32
 800995a:	d107      	bne.n	800996c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f06f 0220 	mvn.w	r2, #32
 8009964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 ff79 	bl	800a85e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_TIM_IC_ConfigChannel+0x1a>
 800998a:	2302      	movs	r3, #2
 800998c:	e082      	b.n	8009a94 <HAL_TIM_IC_ConfigChannel+0x120>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11b      	bne.n	80099d4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f000 fc42 	bl	800a234 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 020c 	bic.w	r2, r2, #12
 80099be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6999      	ldr	r1, [r3, #24]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	689a      	ldr	r2, [r3, #8]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	619a      	str	r2, [r3, #24]
 80099d2:	e05a      	b.n	8009a8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d11c      	bne.n	8009a14 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	f000 fcab 	bl	800a344 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80099fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6999      	ldr	r1, [r3, #24]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	021a      	lsls	r2, r3, #8
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	619a      	str	r2, [r3, #24]
 8009a12:	e03a      	b.n	8009a8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b08      	cmp	r3, #8
 8009a18:	d11b      	bne.n	8009a52 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	6819      	ldr	r1, [r3, #0]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f000 fcf6 	bl	800a41a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69da      	ldr	r2, [r3, #28]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 020c 	bic.w	r2, r2, #12
 8009a3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69d9      	ldr	r1, [r3, #28]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	430a      	orrs	r2, r1
 8009a4e:	61da      	str	r2, [r3, #28]
 8009a50:	e01b      	b.n	8009a8a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6819      	ldr	r1, [r3, #0]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f000 fd15 	bl	800a490 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69da      	ldr	r2, [r3, #28]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69d9      	ldr	r1, [r3, #28]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	021a      	lsls	r2, r3, #8
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e0ac      	b.n	8009c10 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b0c      	cmp	r3, #12
 8009ac2:	f200 809f 	bhi.w	8009c04 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009b01 	.word	0x08009b01
 8009ad0:	08009c05 	.word	0x08009c05
 8009ad4:	08009c05 	.word	0x08009c05
 8009ad8:	08009c05 	.word	0x08009c05
 8009adc:	08009b41 	.word	0x08009b41
 8009ae0:	08009c05 	.word	0x08009c05
 8009ae4:	08009c05 	.word	0x08009c05
 8009ae8:	08009c05 	.word	0x08009c05
 8009aec:	08009b83 	.word	0x08009b83
 8009af0:	08009c05 	.word	0x08009c05
 8009af4:	08009c05 	.word	0x08009c05
 8009af8:	08009c05 	.word	0x08009c05
 8009afc:	08009bc3 	.word	0x08009bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68b9      	ldr	r1, [r7, #8]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 fa0c 	bl	8009f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0208 	orr.w	r2, r2, #8
 8009b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0204 	bic.w	r2, r2, #4
 8009b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6999      	ldr	r1, [r3, #24]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	691a      	ldr	r2, [r3, #16]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	619a      	str	r2, [r3, #24]
      break;
 8009b3e:	e062      	b.n	8009c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fa52 	bl	8009ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6999      	ldr	r1, [r3, #24]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	021a      	lsls	r2, r3, #8
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	619a      	str	r2, [r3, #24]
      break;
 8009b80:	e041      	b.n	8009c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 fa9b 	bl	800a0c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f042 0208 	orr.w	r2, r2, #8
 8009b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69da      	ldr	r2, [r3, #28]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0204 	bic.w	r2, r2, #4
 8009bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	69d9      	ldr	r1, [r3, #28]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	61da      	str	r2, [r3, #28]
      break;
 8009bc0:	e021      	b.n	8009c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fae5 	bl	800a198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69da      	ldr	r2, [r3, #28]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69d9      	ldr	r1, [r3, #28]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	021a      	lsls	r2, r3, #8
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	61da      	str	r2, [r3, #28]
      break;
 8009c02:	e000      	b.n	8009c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d101      	bne.n	8009c30 <HAL_TIM_ConfigClockSource+0x18>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e0b3      	b.n	8009d98 <HAL_TIM_ConfigClockSource+0x180>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c68:	d03e      	beq.n	8009ce8 <HAL_TIM_ConfigClockSource+0xd0>
 8009c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6e:	f200 8087 	bhi.w	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c76:	f000 8085 	beq.w	8009d84 <HAL_TIM_ConfigClockSource+0x16c>
 8009c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c7e:	d87f      	bhi.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009c80:	2b70      	cmp	r3, #112	; 0x70
 8009c82:	d01a      	beq.n	8009cba <HAL_TIM_ConfigClockSource+0xa2>
 8009c84:	2b70      	cmp	r3, #112	; 0x70
 8009c86:	d87b      	bhi.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009c88:	2b60      	cmp	r3, #96	; 0x60
 8009c8a:	d050      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x116>
 8009c8c:	2b60      	cmp	r3, #96	; 0x60
 8009c8e:	d877      	bhi.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009c90:	2b50      	cmp	r3, #80	; 0x50
 8009c92:	d03c      	beq.n	8009d0e <HAL_TIM_ConfigClockSource+0xf6>
 8009c94:	2b50      	cmp	r3, #80	; 0x50
 8009c96:	d873      	bhi.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009c98:	2b40      	cmp	r3, #64	; 0x40
 8009c9a:	d058      	beq.n	8009d4e <HAL_TIM_ConfigClockSource+0x136>
 8009c9c:	2b40      	cmp	r3, #64	; 0x40
 8009c9e:	d86f      	bhi.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009ca0:	2b30      	cmp	r3, #48	; 0x30
 8009ca2:	d064      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x156>
 8009ca4:	2b30      	cmp	r3, #48	; 0x30
 8009ca6:	d86b      	bhi.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009ca8:	2b20      	cmp	r3, #32
 8009caa:	d060      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x156>
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	d867      	bhi.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d05c      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x156>
 8009cb4:	2b10      	cmp	r3, #16
 8009cb6:	d05a      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009cb8:	e062      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	6899      	ldr	r1, [r3, #8]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f000 fc37 	bl	800a53c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	609a      	str	r2, [r3, #8]
      break;
 8009ce6:	e04e      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6818      	ldr	r0, [r3, #0]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	6899      	ldr	r1, [r3, #8]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f000 fc20 	bl	800a53c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d0a:	609a      	str	r2, [r3, #8]
      break;
 8009d0c:	e03b      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	6859      	ldr	r1, [r3, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f000 fae4 	bl	800a2e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2150      	movs	r1, #80	; 0x50
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fbee 	bl	800a508 <TIM_ITRx_SetConfig>
      break;
 8009d2c:	e02b      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6859      	ldr	r1, [r3, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f000 fb3e 	bl	800a3bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2160      	movs	r1, #96	; 0x60
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fbde 	bl	800a508 <TIM_ITRx_SetConfig>
      break;
 8009d4c:	e01b      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	6859      	ldr	r1, [r3, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f000 fac4 	bl	800a2e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2140      	movs	r1, #64	; 0x40
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fbce 	bl	800a508 <TIM_ITRx_SetConfig>
      break;
 8009d6c:	e00b      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f000 fbc5 	bl	800a508 <TIM_ITRx_SetConfig>
        break;
 8009d7e:	e002      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009d84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b0c      	cmp	r3, #12
 8009db2:	d831      	bhi.n	8009e18 <HAL_TIM_ReadCapturedValue+0x78>
 8009db4:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8009db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dba:	bf00      	nop
 8009dbc:	08009df1 	.word	0x08009df1
 8009dc0:	08009e19 	.word	0x08009e19
 8009dc4:	08009e19 	.word	0x08009e19
 8009dc8:	08009e19 	.word	0x08009e19
 8009dcc:	08009dfb 	.word	0x08009dfb
 8009dd0:	08009e19 	.word	0x08009e19
 8009dd4:	08009e19 	.word	0x08009e19
 8009dd8:	08009e19 	.word	0x08009e19
 8009ddc:	08009e05 	.word	0x08009e05
 8009de0:	08009e19 	.word	0x08009e19
 8009de4:	08009e19 	.word	0x08009e19
 8009de8:	08009e19 	.word	0x08009e19
 8009dec:	08009e0f 	.word	0x08009e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	60fb      	str	r3, [r7, #12]

      break;
 8009df8:	e00f      	b.n	8009e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e00:	60fb      	str	r3, [r7, #12]

      break;
 8009e02:	e00a      	b.n	8009e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0a:	60fb      	str	r3, [r7, #12]

      break;
 8009e0c:	e005      	b.n	8009e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e14:	60fb      	str	r3, [r7, #12]

      break;
 8009e16:	e000      	b.n	8009e1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009e18:	bf00      	nop
  }

  return tmpreg;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop

08009e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr

08009e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr

08009e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bc80      	pop	{r7}
 8009e5c:	4770      	bx	lr
	...

08009e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a29      	ldr	r2, [pc, #164]	; (8009f18 <TIM_Base_SetConfig+0xb8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00b      	beq.n	8009e90 <TIM_Base_SetConfig+0x30>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e7e:	d007      	beq.n	8009e90 <TIM_Base_SetConfig+0x30>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a26      	ldr	r2, [pc, #152]	; (8009f1c <TIM_Base_SetConfig+0xbc>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_Base_SetConfig+0x30>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a25      	ldr	r2, [pc, #148]	; (8009f20 <TIM_Base_SetConfig+0xc0>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d108      	bne.n	8009ea2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a1c      	ldr	r2, [pc, #112]	; (8009f18 <TIM_Base_SetConfig+0xb8>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00b      	beq.n	8009ec2 <TIM_Base_SetConfig+0x62>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb0:	d007      	beq.n	8009ec2 <TIM_Base_SetConfig+0x62>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a19      	ldr	r2, [pc, #100]	; (8009f1c <TIM_Base_SetConfig+0xbc>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d003      	beq.n	8009ec2 <TIM_Base_SetConfig+0x62>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a18      	ldr	r2, [pc, #96]	; (8009f20 <TIM_Base_SetConfig+0xc0>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d108      	bne.n	8009ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	689a      	ldr	r2, [r3, #8]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a07      	ldr	r2, [pc, #28]	; (8009f18 <TIM_Base_SetConfig+0xb8>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d103      	bne.n	8009f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	691a      	ldr	r2, [r3, #16]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	615a      	str	r2, [r3, #20]
}
 8009f0e:	bf00      	nop
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr
 8009f18:	40012c00 	.word	0x40012c00
 8009f1c:	40000400 	.word	0x40000400
 8009f20:	40000800 	.word	0x40000800

08009f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	f023 0201 	bic.w	r2, r3, #1
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f023 0302 	bic.w	r3, r3, #2
 8009f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a1c      	ldr	r2, [pc, #112]	; (8009fec <TIM_OC1_SetConfig+0xc8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d10c      	bne.n	8009f9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f023 0308 	bic.w	r3, r3, #8
 8009f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f023 0304 	bic.w	r3, r3, #4
 8009f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a13      	ldr	r2, [pc, #76]	; (8009fec <TIM_OC1_SetConfig+0xc8>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d111      	bne.n	8009fc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	621a      	str	r2, [r3, #32]
}
 8009fe0:	bf00      	nop
 8009fe2:	371c      	adds	r7, #28
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bc80      	pop	{r7}
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40012c00 	.word	0x40012c00

08009ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f023 0210 	bic.w	r2, r3, #16
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f023 0320 	bic.w	r3, r3, #32
 800a03a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	4313      	orrs	r3, r2
 800a046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a1d      	ldr	r2, [pc, #116]	; (800a0c0 <TIM_OC2_SetConfig+0xd0>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10d      	bne.n	800a06c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a06a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a14      	ldr	r2, [pc, #80]	; (800a0c0 <TIM_OC2_SetConfig+0xd0>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d113      	bne.n	800a09c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a07a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4313      	orrs	r3, r2
 800a09a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	621a      	str	r2, [r3, #32]
}
 800a0b6:	bf00      	nop
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bc80      	pop	{r7}
 800a0be:	4770      	bx	lr
 800a0c0:	40012c00 	.word	0x40012c00

0800a0c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4313      	orrs	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a10c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	021b      	lsls	r3, r3, #8
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <TIM_OC3_SetConfig+0xd0>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d10d      	bne.n	800a13e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	021b      	lsls	r3, r3, #8
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	4313      	orrs	r3, r2
 800a134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a13c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a14      	ldr	r2, [pc, #80]	; (800a194 <TIM_OC3_SetConfig+0xd0>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d113      	bne.n	800a16e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a14c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4313      	orrs	r3, r2
 800a160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	011b      	lsls	r3, r3, #4
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	621a      	str	r2, [r3, #32]
}
 800a188:	bf00      	nop
 800a18a:	371c      	adds	r7, #28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	40012c00 	.word	0x40012c00

0800a198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	021b      	lsls	r3, r3, #8
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	031b      	lsls	r3, r3, #12
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a0f      	ldr	r2, [pc, #60]	; (800a230 <TIM_OC4_SetConfig+0x98>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d109      	bne.n	800a20c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	695b      	ldr	r3, [r3, #20]
 800a204:	019b      	lsls	r3, r3, #6
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	4313      	orrs	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	621a      	str	r2, [r3, #32]
}
 800a226:	bf00      	nop
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bc80      	pop	{r7}
 800a22e:	4770      	bx	lr
 800a230:	40012c00 	.word	0x40012c00

0800a234 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	f023 0201 	bic.w	r2, r3, #1
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4a1f      	ldr	r2, [pc, #124]	; (800a2dc <TIM_TI1_SetConfig+0xa8>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d00b      	beq.n	800a27a <TIM_TI1_SetConfig+0x46>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a268:	d007      	beq.n	800a27a <TIM_TI1_SetConfig+0x46>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4a1c      	ldr	r2, [pc, #112]	; (800a2e0 <TIM_TI1_SetConfig+0xac>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d003      	beq.n	800a27a <TIM_TI1_SetConfig+0x46>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <TIM_TI1_SetConfig+0xb0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d101      	bne.n	800a27e <TIM_TI1_SetConfig+0x4a>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e000      	b.n	800a280 <TIM_TI1_SetConfig+0x4c>
 800a27e:	2300      	movs	r3, #0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d008      	beq.n	800a296 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4313      	orrs	r3, r2
 800a292:	617b      	str	r3, [r7, #20]
 800a294:	e003      	b.n	800a29e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f043 0301 	orr.w	r3, r3, #1
 800a29c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f023 030a 	bic.w	r3, r3, #10
 800a2b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f003 030a 	and.w	r3, r3, #10
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bc80      	pop	{r7}
 800a2da:	4770      	bx	lr
 800a2dc:	40012c00 	.word	0x40012c00
 800a2e0:	40000400 	.word	0x40000400
 800a2e4:	40000800 	.word	0x40000800

0800a2e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f023 0201 	bic.w	r2, r3, #1
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f023 030a 	bic.w	r3, r3, #10
 800a324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	621a      	str	r2, [r3, #32]
}
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr

0800a344 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f023 0210 	bic.w	r2, r3, #16
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	021b      	lsls	r3, r3, #8
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	4313      	orrs	r3, r2
 800a37a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	031b      	lsls	r3, r3, #12
 800a388:	b29b      	uxth	r3, r3
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a396:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	621a      	str	r2, [r3, #32]
}
 800a3b2:	bf00      	nop
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	f023 0210 	bic.w	r2, r3, #16
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	031b      	lsls	r3, r3, #12
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr

0800a41a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b087      	sub	sp, #28
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f023 0303 	bic.w	r3, r3, #3
 800a446:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a456:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	011b      	lsls	r3, r3, #4
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a46a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	021b      	lsls	r3, r3, #8
 800a470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4313      	orrs	r3, r2
 800a478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	621a      	str	r2, [r3, #32]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr

0800a490 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	031b      	lsls	r3, r3, #12
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	031b      	lsls	r3, r3, #12
 800a4e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	621a      	str	r2, [r3, #32]
}
 800a4fe:	bf00      	nop
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	bc80      	pop	{r7}
 800a506:	4770      	bx	lr

0800a508 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4313      	orrs	r3, r2
 800a526:	f043 0307 	orr.w	r3, r3, #7
 800a52a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	609a      	str	r2, [r3, #8]
}
 800a532:	bf00      	nop
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	bc80      	pop	{r7}
 800a53a:	4770      	bx	lr

0800a53c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	021a      	lsls	r2, r3, #8
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	431a      	orrs	r2, r3
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4313      	orrs	r3, r2
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	609a      	str	r2, [r3, #8]
}
 800a570:	bf00      	nop
 800a572:	371c      	adds	r7, #28
 800a574:	46bd      	mov	sp, r7
 800a576:	bc80      	pop	{r7}
 800a578:	4770      	bx	lr

0800a57a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b087      	sub	sp, #28
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f003 031f 	and.w	r3, r3, #31
 800a58c:	2201      	movs	r2, #1
 800a58e:	fa02 f303 	lsl.w	r3, r2, r3
 800a592:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a1a      	ldr	r2, [r3, #32]
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	43db      	mvns	r3, r3
 800a59c:	401a      	ands	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a1a      	ldr	r2, [r3, #32]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f003 031f 	and.w	r3, r3, #31
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	621a      	str	r2, [r3, #32]
}
 800a5b8:	bf00      	nop
 800a5ba:	371c      	adds	r7, #28
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d109      	bne.n	800a5e8 <HAL_TIMEx_PWMN_Start+0x24>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	bf14      	ite	ne
 800a5e0:	2301      	movne	r3, #1
 800a5e2:	2300      	moveq	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	e022      	b.n	800a62e <HAL_TIMEx_PWMN_Start+0x6a>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2b04      	cmp	r3, #4
 800a5ec:	d109      	bne.n	800a602 <HAL_TIMEx_PWMN_Start+0x3e>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	bf14      	ite	ne
 800a5fa:	2301      	movne	r3, #1
 800a5fc:	2300      	moveq	r3, #0
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	e015      	b.n	800a62e <HAL_TIMEx_PWMN_Start+0x6a>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b08      	cmp	r3, #8
 800a606:	d109      	bne.n	800a61c <HAL_TIMEx_PWMN_Start+0x58>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b01      	cmp	r3, #1
 800a612:	bf14      	ite	ne
 800a614:	2301      	movne	r3, #1
 800a616:	2300      	moveq	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	e008      	b.n	800a62e <HAL_TIMEx_PWMN_Start+0x6a>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b01      	cmp	r3, #1
 800a626:	bf14      	ite	ne
 800a628:	2301      	movne	r3, #1
 800a62a:	2300      	moveq	r3, #0
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e059      	b.n	800a6ea <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d104      	bne.n	800a646 <HAL_TIMEx_PWMN_Start+0x82>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a644:	e013      	b.n	800a66e <HAL_TIMEx_PWMN_Start+0xaa>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d104      	bne.n	800a656 <HAL_TIMEx_PWMN_Start+0x92>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2202      	movs	r2, #2
 800a650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a654:	e00b      	b.n	800a66e <HAL_TIMEx_PWMN_Start+0xaa>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b08      	cmp	r3, #8
 800a65a:	d104      	bne.n	800a666 <HAL_TIMEx_PWMN_Start+0xa2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a664:	e003      	b.n	800a66e <HAL_TIMEx_PWMN_Start+0xaa>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2204      	movs	r2, #4
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f903 	bl	800a882 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a68a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <HAL_TIMEx_PWMN_Start+0x130>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d00e      	beq.n	800a6b4 <HAL_TIMEx_PWMN_Start+0xf0>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69e:	d009      	beq.n	800a6b4 <HAL_TIMEx_PWMN_Start+0xf0>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a14      	ldr	r2, [pc, #80]	; (800a6f8 <HAL_TIMEx_PWMN_Start+0x134>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d004      	beq.n	800a6b4 <HAL_TIMEx_PWMN_Start+0xf0>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a13      	ldr	r2, [pc, #76]	; (800a6fc <HAL_TIMEx_PWMN_Start+0x138>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d111      	bne.n	800a6d8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b06      	cmp	r3, #6
 800a6c4:	d010      	beq.n	800a6e8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f042 0201 	orr.w	r2, r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d6:	e007      	b.n	800a6e8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0201 	orr.w	r2, r2, #1
 800a6e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	40012c00 	.word	0x40012c00
 800a6f8:	40000400 	.word	0x40000400
 800a6fc:	40000800 	.word	0x40000800

0800a700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a714:	2302      	movs	r3, #2
 800a716:	e046      	b.n	800a7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a16      	ldr	r2, [pc, #88]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00e      	beq.n	800a77a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a764:	d009      	beq.n	800a77a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a12      	ldr	r2, [pc, #72]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d004      	beq.n	800a77a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a10      	ldr	r2, [pc, #64]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d10c      	bne.n	800a794 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bc80      	pop	{r7}
 800a7ae:	4770      	bx	lr
 800a7b0:	40012c00 	.word	0x40012c00
 800a7b4:	40000400 	.word	0x40000400
 800a7b8:	40000800 	.word	0x40000800

0800a7bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e03d      	b.n	800a854 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4313      	orrs	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	4313      	orrs	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3714      	adds	r7, #20
 800a858:	46bd      	mov	sp, r7
 800a85a:	bc80      	pop	{r7}
 800a85c:	4770      	bx	lr

0800a85e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bc80      	pop	{r7}
 800a86e:	4770      	bx	lr

0800a870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bc80      	pop	{r7}
 800a880:	4770      	bx	lr

0800a882 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a882:	b480      	push	{r7}
 800a884:	b087      	sub	sp, #28
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	60b9      	str	r1, [r7, #8]
 800a88c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f003 031f 	and.w	r3, r3, #31
 800a894:	2204      	movs	r2, #4
 800a896:	fa02 f303 	lsl.w	r3, r2, r3
 800a89a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6a1a      	ldr	r2, [r3, #32]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	43db      	mvns	r3, r3
 800a8a4:	401a      	ands	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a1a      	ldr	r2, [r3, #32]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f003 031f 	and.w	r3, r3, #31
 800a8b4:	6879      	ldr	r1, [r7, #4]
 800a8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	621a      	str	r2, [r3, #32]
}
 800a8c0:	bf00      	nop
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bc80      	pop	{r7}
 800a8c8:	4770      	bx	lr

0800a8ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e03f      	b.n	800a95c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d106      	bne.n	800a8f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7fb f927 	bl	8005b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2224      	movs	r2, #36	; 0x24
 800a8fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68da      	ldr	r2, [r3, #12]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a90c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fe38 	bl	800b584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691a      	ldr	r2, [r3, #16]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	695a      	ldr	r2, [r3, #20]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a932:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68da      	ldr	r2, [r3, #12]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a942:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e01e      	b.n	800a9b4 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2224      	movs	r2, #36	; 0x24
 800a97a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a98c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7fb fa2a 	bl	8005de8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af02      	add	r7, sp, #8
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b20      	cmp	r3, #32
 800a9da:	d17c      	bne.n	800aad6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <HAL_UART_Transmit+0x2c>
 800a9e2:	88fb      	ldrh	r3, [r7, #6]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e075      	b.n	800aad8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d101      	bne.n	800a9fa <HAL_UART_Transmit+0x3e>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e06e      	b.n	800aad8 <HAL_UART_Transmit+0x11c>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2221      	movs	r2, #33	; 0x21
 800aa0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800aa10:	f7fb fc1e 	bl	8006250 <HAL_GetTick>
 800aa14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	88fa      	ldrh	r2, [r7, #6]
 800aa1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	88fa      	ldrh	r2, [r7, #6]
 800aa20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2a:	d108      	bne.n	800aa3e <HAL_UART_Transmit+0x82>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d104      	bne.n	800aa3e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aa34:	2300      	movs	r3, #0
 800aa36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	61bb      	str	r3, [r7, #24]
 800aa3c:	e003      	b.n	800aa46 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800aa4e:	e02a      	b.n	800aaa6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2200      	movs	r2, #0
 800aa58:	2180      	movs	r1, #128	; 0x80
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 fbc0 	bl	800b1e0 <UART_WaitOnFlagUntilTimeout>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e036      	b.n	800aad8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10b      	bne.n	800aa88 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa7e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	3302      	adds	r3, #2
 800aa84:	61bb      	str	r3, [r7, #24]
 800aa86:	e007      	b.n	800aa98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	781a      	ldrb	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	3301      	adds	r3, #1
 800aa96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1cf      	bne.n	800aa50 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2200      	movs	r2, #0
 800aab8:	2140      	movs	r1, #64	; 0x40
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 fb90 	bl	800b1e0 <UART_WaitOnFlagUntilTimeout>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e006      	b.n	800aad8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2220      	movs	r2, #32
 800aace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	e000      	b.n	800aad8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aad6:	2302      	movs	r3, #2
  }
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3720      	adds	r7, #32
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	d153      	bne.n	800aba2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <HAL_UART_Transmit_DMA+0x26>
 800ab00:	88fb      	ldrh	r3, [r7, #6]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e04c      	b.n	800aba4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d101      	bne.n	800ab18 <HAL_UART_Transmit_DMA+0x38>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e045      	b.n	800aba4 <HAL_UART_Transmit_DMA+0xc4>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	88fa      	ldrh	r2, [r7, #6]
 800ab2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	88fa      	ldrh	r2, [r7, #6]
 800ab30:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2221      	movs	r2, #33	; 0x21
 800ab3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab44:	4a19      	ldr	r2, [pc, #100]	; (800abac <HAL_UART_Transmit_DMA+0xcc>)
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	4a18      	ldr	r2, [pc, #96]	; (800abb0 <HAL_UART_Transmit_DMA+0xd0>)
 800ab4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	4a17      	ldr	r2, [pc, #92]	; (800abb4 <HAL_UART_Transmit_DMA+0xd4>)
 800ab56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800ab60:	f107 0308 	add.w	r3, r7, #8
 800ab64:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	6819      	ldr	r1, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3304      	adds	r3, #4
 800ab74:	461a      	mov	r2, r3
 800ab76:	88fb      	ldrh	r3, [r7, #6]
 800ab78:	f7fb fd8e 	bl	8006698 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab84:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	695a      	ldr	r2, [r3, #20]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ab9c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e000      	b.n	800aba4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800aba2:	2302      	movs	r3, #2
  }
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	0800b05b 	.word	0x0800b05b
 800abb0:	0800b0ad 	.word	0x0800b0ad
 800abb4:	0800b14d 	.word	0x0800b14d

0800abb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b20      	cmp	r3, #32
 800abd0:	d166      	bne.n	800aca0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <HAL_UART_Receive_DMA+0x26>
 800abd8:	88fb      	ldrh	r3, [r7, #6]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e05f      	b.n	800aca2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d101      	bne.n	800abf0 <HAL_UART_Receive_DMA+0x38>
 800abec:	2302      	movs	r3, #2
 800abee:	e058      	b.n	800aca2 <HAL_UART_Receive_DMA+0xea>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	88fa      	ldrh	r2, [r7, #6]
 800ac02:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2222      	movs	r2, #34	; 0x22
 800ac0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac16:	4a25      	ldr	r2, [pc, #148]	; (800acac <HAL_UART_Receive_DMA+0xf4>)
 800ac18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1e:	4a24      	ldr	r2, [pc, #144]	; (800acb0 <HAL_UART_Receive_DMA+0xf8>)
 800ac20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac26:	4a23      	ldr	r2, [pc, #140]	; (800acb4 <HAL_UART_Receive_DMA+0xfc>)
 800ac28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2e:	2200      	movs	r2, #0
 800ac30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800ac32:	f107 0308 	add.w	r3, r7, #8
 800ac36:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4619      	mov	r1, r3
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	88fb      	ldrh	r3, [r7, #6]
 800ac4a:	f7fb fd25 	bl	8006698 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ac4e:	2300      	movs	r3, #0
 800ac50:	613b      	str	r3, [r7, #16]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	613b      	str	r3, [r7, #16]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	613b      	str	r3, [r7, #16]
 800ac62:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68da      	ldr	r2, [r3, #12]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac7a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	695a      	ldr	r2, [r3, #20]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f042 0201 	orr.w	r2, r2, #1
 800ac8a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	695a      	ldr	r2, [r3, #20]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac9a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e000      	b.n	800aca2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aca0:	2302      	movs	r3, #2
  }
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	0800b0c9 	.word	0x0800b0c9
 800acb0:	0800b131 	.word	0x0800b131
 800acb4:	0800b14d 	.word	0x0800b14d

0800acb8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800acc0:	2301      	movs	r3, #1
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800acd2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695a      	ldr	r2, [r3, #20]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f022 0201 	bic.w	r2, r2, #1
 800ace2:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00f      	beq.n	800ad0c <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	4a3e      	ldr	r2, [pc, #248]	; (800adf8 <HAL_UART_Abort_IT+0x140>)
 800ad00:	635a      	str	r2, [r3, #52]	; 0x34
 800ad02:	e003      	b.n	800ad0c <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad08:	2200      	movs	r2, #0
 800ad0a:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00f      	beq.n	800ad34 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad26:	4a35      	ldr	r2, [pc, #212]	; (800adfc <HAL_UART_Abort_IT+0x144>)
 800ad28:	635a      	str	r2, [r3, #52]	; 0x34
 800ad2a:	e003      	b.n	800ad34 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad30:	2200      	movs	r2, #0
 800ad32:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d01a      	beq.n	800ad78 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	695a      	ldr	r2, [r3, #20]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad50:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00e      	beq.n	800ad78 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fb fcfa 	bl	8006758 <HAL_DMA_Abort_IT>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d004      	beq.n	800ad74 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6e:	2200      	movs	r2, #0
 800ad70:	635a      	str	r2, [r3, #52]	; 0x34
 800ad72:	e001      	b.n	800ad78 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d01c      	beq.n	800adc0 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	695a      	ldr	r2, [r3, #20]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad94:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d010      	beq.n	800adc0 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fb fcd8 	bl	8006758 <HAL_DMA_Abort_IT>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d006      	beq.n	800adbc <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb2:	2200      	movs	r2, #0
 800adb4:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 800adb6:	2301      	movs	r3, #1
 800adb8:	60fb      	str	r3, [r7, #12]
 800adba:	e001      	b.n	800adc0 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d113      	bne.n	800adee <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2220      	movs	r2, #32
 800addc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2220      	movs	r2, #32
 800ade4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f92d 	bl	800b048 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	0800b301 	.word	0x0800b301
 800adfc:	0800b35b 	.word	0x0800b35b

0800ae00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b088      	sub	sp, #32
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ae24:	2300      	movs	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10d      	bne.n	800ae52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d008      	beq.n	800ae52 <HAL_UART_IRQHandler+0x52>
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fb19 	bl	800b482 <UART_Receive_IT>
      return;
 800ae50:	e0d0      	b.n	800aff4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 80b0 	beq.w	800afba <HAL_UART_IRQHandler+0x1ba>
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d105      	bne.n	800ae70 <HAL_UART_IRQHandler+0x70>
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80a5 	beq.w	800afba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <HAL_UART_IRQHandler+0x90>
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae88:	f043 0201 	orr.w	r2, r3, #1
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00a      	beq.n	800aeb0 <HAL_UART_IRQHandler+0xb0>
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea8:	f043 0202 	orr.w	r2, r3, #2
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <HAL_UART_IRQHandler+0xd0>
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d005      	beq.n	800aed0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec8:	f043 0204 	orr.w	r2, r3, #4
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f003 0308 	and.w	r3, r3, #8
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00f      	beq.n	800aefa <HAL_UART_IRQHandler+0xfa>
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	f003 0320 	and.w	r3, r3, #32
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d104      	bne.n	800aeee <HAL_UART_IRQHandler+0xee>
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef2:	f043 0208 	orr.w	r2, r3, #8
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d077      	beq.n	800aff2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d007      	beq.n	800af1c <HAL_UART_IRQHandler+0x11c>
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	f003 0320 	and.w	r3, r3, #32
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fab3 	bl	800b482 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	bf14      	ite	ne
 800af2a:	2301      	movne	r3, #1
 800af2c:	2300      	moveq	r3, #0
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af36:	f003 0308 	and.w	r3, r3, #8
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d102      	bne.n	800af44 <HAL_UART_IRQHandler+0x144>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d031      	beq.n	800afa8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f9aa 	bl	800b29e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	695b      	ldr	r3, [r3, #20]
 800af50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	d023      	beq.n	800afa0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	695a      	ldr	r2, [r3, #20]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d013      	beq.n	800af98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af74:	4a21      	ldr	r2, [pc, #132]	; (800affc <HAL_UART_IRQHandler+0x1fc>)
 800af76:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fb fbeb 	bl	8006758 <HAL_DMA_Abort_IT>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d016      	beq.n	800afb6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800af92:	4610      	mov	r0, r2
 800af94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af96:	e00e      	b.n	800afb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f84c 	bl	800b036 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9e:	e00a      	b.n	800afb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f848 	bl	800b036 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa6:	e006      	b.n	800afb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f844 	bl	800b036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800afb4:	e01d      	b.n	800aff2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb6:	bf00      	nop
    return;
 800afb8:	e01b      	b.n	800aff2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d008      	beq.n	800afd6 <HAL_UART_IRQHandler+0x1d6>
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f9f0 	bl	800b3b4 <UART_Transmit_IT>
    return;
 800afd4:	e00e      	b.n	800aff4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d009      	beq.n	800aff4 <HAL_UART_IRQHandler+0x1f4>
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d004      	beq.n	800aff4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fa31 	bl	800b452 <UART_EndTransmit_IT>
    return;
 800aff0:	e000      	b.n	800aff4 <HAL_UART_IRQHandler+0x1f4>
    return;
 800aff2:	bf00      	nop
  }
}
 800aff4:	3720      	adds	r7, #32
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	0800b2d9 	.word	0x0800b2d9

0800b000 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bc80      	pop	{r7}
 800b010:	4770      	bx	lr

0800b012 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	bc80      	pop	{r7}
 800b022:	4770      	bx	lr

0800b024 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	bc80      	pop	{r7}
 800b034:	4770      	bx	lr

0800b036 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b03e:	bf00      	nop
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	bc80      	pop	{r7}
 800b046:	4770      	bx	lr

0800b048 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr

0800b05a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b00      	cmp	r3, #0
 800b074:	d113      	bne.n	800b09e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	695a      	ldr	r2, [r3, #20]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b08a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68da      	ldr	r2, [r3, #12]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b09a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b09c:	e002      	b.n	800b0a4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7f7 fce6 	bl	8002a70 <HAL_UART_TxCpltCallback>
}
 800b0a4:	bf00      	nop
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f7ff ffa0 	bl	800b000 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c0:	bf00      	nop
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0320 	and.w	r3, r3, #32
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d11e      	bne.n	800b122 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68da      	ldr	r2, [r3, #12]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	695a      	ldr	r2, [r3, #20]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0201 	bic.w	r2, r2, #1
 800b108:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	695a      	ldr	r2, [r3, #20]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b118:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff ff75 	bl	800b012 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b128:	bf00      	nop
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f7ff ff70 	bl	800b024 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b144:	bf00      	nop
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b154:	2300      	movs	r3, #0
 800b156:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bf14      	ite	ne
 800b16c:	2301      	movne	r3, #1
 800b16e:	2300      	moveq	r3, #0
 800b170:	b2db      	uxtb	r3, r3
 800b172:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b21      	cmp	r3, #33	; 0x21
 800b17e:	d108      	bne.n	800b192 <UART_DMAError+0x46>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d005      	beq.n	800b192 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2200      	movs	r2, #0
 800b18a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b18c:	68b8      	ldr	r0, [r7, #8]
 800b18e:	f000 f871 	bl	800b274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bf14      	ite	ne
 800b1a0:	2301      	movne	r3, #1
 800b1a2:	2300      	moveq	r3, #0
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	2b22      	cmp	r3, #34	; 0x22
 800b1b2:	d108      	bne.n	800b1c6 <UART_DMAError+0x7a>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d005      	beq.n	800b1c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b1c0:	68b8      	ldr	r0, [r7, #8]
 800b1c2:	f000 f86c 	bl	800b29e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ca:	f043 0210 	orr.w	r2, r3, #16
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1d2:	68b8      	ldr	r0, [r7, #8]
 800b1d4:	f7ff ff2f 	bl	800b036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1f0:	e02c      	b.n	800b24c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f8:	d028      	beq.n	800b24c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <UART_WaitOnFlagUntilTimeout+0x30>
 800b200:	f7fb f826 	bl	8006250 <HAL_GetTick>
 800b204:	4602      	mov	r2, r0
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d21d      	bcs.n	800b24c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b21e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	695a      	ldr	r2, [r3, #20]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0201 	bic.w	r2, r2, #1
 800b22e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2220      	movs	r2, #32
 800b234:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2220      	movs	r2, #32
 800b23c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e00f      	b.n	800b26c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4013      	ands	r3, r2
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	429a      	cmp	r2, r3
 800b25a:	bf0c      	ite	eq
 800b25c:	2301      	moveq	r3, #1
 800b25e:	2300      	movne	r3, #0
 800b260:	b2db      	uxtb	r3, r3
 800b262:	461a      	mov	r2, r3
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	429a      	cmp	r2, r3
 800b268:	d0c3      	beq.n	800b1f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b28a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2220      	movs	r2, #32
 800b290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	bc80      	pop	{r7}
 800b29c:	4770      	bx	lr

0800b29e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68da      	ldr	r2, [r3, #12]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	695a      	ldr	r2, [r3, #20]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 0201 	bic.w	r2, r2, #1
 800b2c4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b2ce:	bf00      	nop
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bc80      	pop	{r7}
 800b2d6:	4770      	bx	lr

0800b2d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff fe9f 	bl	800b036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b312:	2200      	movs	r2, #0
 800b314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d004      	beq.n	800b328 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b324:	2b00      	cmp	r3, #0
 800b326:	d114      	bne.n	800b352 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2220      	movs	r2, #32
 800b346:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7ff fe7c 	bl	800b048 <HAL_UART_AbortCpltCallback>
 800b350:	e000      	b.n	800b354 <UART_DMATxAbortCallback+0x54>
      return;
 800b352:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36c:	2200      	movs	r2, #0
 800b36e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b374:	2b00      	cmp	r3, #0
 800b376:	d004      	beq.n	800b382 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d114      	bne.n	800b3ac <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2220      	movs	r2, #32
 800b398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f7ff fe4f 	bl	800b048 <HAL_UART_AbortCpltCallback>
 800b3aa:	e000      	b.n	800b3ae <UART_DMARxAbortCallback+0x54>
      return;
 800b3ac:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b21      	cmp	r3, #33	; 0x21
 800b3c6:	d13e      	bne.n	800b446 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d0:	d114      	bne.n	800b3fc <UART_Transmit_IT+0x48>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d110      	bne.n	800b3fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	1c9a      	adds	r2, r3, #2
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	621a      	str	r2, [r3, #32]
 800b3fa:	e008      	b.n	800b40e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	1c59      	adds	r1, r3, #1
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	6211      	str	r1, [r2, #32]
 800b406:	781a      	ldrb	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b412:	b29b      	uxth	r3, r3
 800b414:	3b01      	subs	r3, #1
 800b416:	b29b      	uxth	r3, r3
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	4619      	mov	r1, r3
 800b41c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10f      	bne.n	800b442 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68da      	ldr	r2, [r3, #12]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b430:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68da      	ldr	r2, [r3, #12]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b440:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	e000      	b.n	800b448 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b446:	2302      	movs	r3, #2
  }
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bc80      	pop	{r7}
 800b450:	4770      	bx	lr

0800b452 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b082      	sub	sp, #8
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b468:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7f7 fafc 	bl	8002a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b084      	sub	sp, #16
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b22      	cmp	r3, #34	; 0x22
 800b494:	d170      	bne.n	800b578 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b49e:	d117      	bne.n	800b4d0 <UART_Receive_IT+0x4e>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d113      	bne.n	800b4d0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c8:	1c9a      	adds	r2, r3, #2
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	629a      	str	r2, [r3, #40]	; 0x28
 800b4ce:	e026      	b.n	800b51e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e2:	d007      	beq.n	800b4f4 <UART_Receive_IT+0x72>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10a      	bne.n	800b502 <UART_Receive_IT+0x80>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	e008      	b.n	800b514 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b522:	b29b      	uxth	r3, r3
 800b524:	3b01      	subs	r3, #1
 800b526:	b29b      	uxth	r3, r3
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	4619      	mov	r1, r3
 800b52c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d120      	bne.n	800b574 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68da      	ldr	r2, [r3, #12]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 0220 	bic.w	r2, r2, #32
 800b540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	695a      	ldr	r2, [r3, #20]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f022 0201 	bic.w	r2, r2, #1
 800b560:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff fd51 	bl	800b012 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	e002      	b.n	800b57a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	e000      	b.n	800b57a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800b578:	2302      	movs	r3, #2
  }
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b5be:	f023 030c 	bic.w	r3, r3, #12
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	6812      	ldr	r2, [r2, #0]
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	430b      	orrs	r3, r1
 800b5ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	695b      	ldr	r3, [r3, #20]
 800b5d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	699a      	ldr	r2, [r3, #24]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a2c      	ldr	r2, [pc, #176]	; (800b698 <UART_SetConfig+0x114>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d103      	bne.n	800b5f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b5ec:	f7fd fd4c 	bl	8009088 <HAL_RCC_GetPCLK2Freq>
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	e002      	b.n	800b5fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b5f4:	f7fd fd34 	bl	8009060 <HAL_RCC_GetPCLK1Freq>
 800b5f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	009a      	lsls	r2, r3, #2
 800b604:	441a      	add	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b610:	4a22      	ldr	r2, [pc, #136]	; (800b69c <UART_SetConfig+0x118>)
 800b612:	fba2 2303 	umull	r2, r3, r2, r3
 800b616:	095b      	lsrs	r3, r3, #5
 800b618:	0119      	lsls	r1, r3, #4
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009a      	lsls	r2, r3, #2
 800b624:	441a      	add	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b630:	4b1a      	ldr	r3, [pc, #104]	; (800b69c <UART_SetConfig+0x118>)
 800b632:	fba3 0302 	umull	r0, r3, r3, r2
 800b636:	095b      	lsrs	r3, r3, #5
 800b638:	2064      	movs	r0, #100	; 0x64
 800b63a:	fb00 f303 	mul.w	r3, r0, r3
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	011b      	lsls	r3, r3, #4
 800b642:	3332      	adds	r3, #50	; 0x32
 800b644:	4a15      	ldr	r2, [pc, #84]	; (800b69c <UART_SetConfig+0x118>)
 800b646:	fba2 2303 	umull	r2, r3, r2, r3
 800b64a:	095b      	lsrs	r3, r3, #5
 800b64c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b650:	4419      	add	r1, r3
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	4613      	mov	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	009a      	lsls	r2, r3, #2
 800b65c:	441a      	add	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	fbb2 f2f3 	udiv	r2, r2, r3
 800b668:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <UART_SetConfig+0x118>)
 800b66a:	fba3 0302 	umull	r0, r3, r3, r2
 800b66e:	095b      	lsrs	r3, r3, #5
 800b670:	2064      	movs	r0, #100	; 0x64
 800b672:	fb00 f303 	mul.w	r3, r0, r3
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	011b      	lsls	r3, r3, #4
 800b67a:	3332      	adds	r3, #50	; 0x32
 800b67c:	4a07      	ldr	r2, [pc, #28]	; (800b69c <UART_SetConfig+0x118>)
 800b67e:	fba2 2303 	umull	r2, r3, r2, r3
 800b682:	095b      	lsrs	r3, r3, #5
 800b684:	f003 020f 	and.w	r2, r3, #15
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	440a      	add	r2, r1
 800b68e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	40013800 	.word	0x40013800
 800b69c:	51eb851f 	.word	0x51eb851f

0800b6a0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af04      	add	r7, sp, #16
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a6b      	ldr	r2, [pc, #428]	; (800b858 <_ZN10ControllerC1Ev+0x1b8>)
 800b6ac:	639a      	str	r2, [r3, #56]	; 0x38
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a6a      	ldr	r2, [pc, #424]	; (800b85c <_ZN10ControllerC1Ev+0x1bc>)
 800b6b2:	63da      	str	r2, [r3, #60]	; 0x3c
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	22c8      	movs	r2, #200	; 0xc8
 800b6b8:	641a      	str	r2, [r3, #64]	; 0x40
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f5 faec 	bl	8000c9c <__aeabi_i2f>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b6cc:	f7f5 fbee 	bl	8000eac <__aeabi_fdiv>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	645a      	str	r2, [r3, #68]	; 0x44
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a61      	ldr	r2, [pc, #388]	; (800b860 <_ZN10ControllerC1Ev+0x1c0>)
 800b6dc:	649a      	str	r2, [r3, #72]	; 0x48
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a60      	ldr	r2, [pc, #384]	; (800b864 <_ZN10ControllerC1Ev+0x1c4>)
 800b6e2:	64da      	str	r2, [r3, #76]	; 0x4c
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a60      	ldr	r2, [pc, #384]	; (800b868 <_ZN10ControllerC1Ev+0x1c8>)
 800b6e8:	651a      	str	r2, [r3, #80]	; 0x50
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f04f 0200 	mov.w	r2, #0
 800b6f0:	655a      	str	r2, [r3, #84]	; 0x54
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a5d      	ldr	r2, [pc, #372]	; (800b86c <_ZN10ControllerC1Ev+0x1cc>)
 800b6f6:	659a      	str	r2, [r3, #88]	; 0x58
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a5d      	ldr	r2, [pc, #372]	; (800b870 <_ZN10ControllerC1Ev+0x1d0>)
 800b6fc:	65da      	str	r2, [r3, #92]	; 0x5c
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a5c      	ldr	r2, [pc, #368]	; (800b874 <_ZN10ControllerC1Ev+0x1d4>)
 800b702:	661a      	str	r2, [r3, #96]	; 0x60
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	665a      	str	r2, [r3, #100]	; 0x64
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	669a      	str	r2, [r3, #104]	; 0x68
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a56      	ldr	r2, [pc, #344]	; (800b878 <_ZN10ControllerC1Ev+0x1d8>)
 800b720:	671a      	str	r2, [r3, #112]	; 0x70
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a55      	ldr	r2, [pc, #340]	; (800b87c <_ZN10ControllerC1Ev+0x1dc>)
 800b726:	675a      	str	r2, [r3, #116]	; 0x74
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a55      	ldr	r2, [pc, #340]	; (800b880 <_ZN10ControllerC1Ev+0x1e0>)
 800b72c:	679a      	str	r2, [r3, #120]	; 0x78
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a54      	ldr	r2, [pc, #336]	; (800b884 <_ZN10ControllerC1Ev+0x1e4>)
 800b732:	67da      	str	r2, [r3, #124]	; 0x7c
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a54      	ldr	r2, [pc, #336]	; (800b888 <_ZN10ControllerC1Ev+0x1e8>)
 800b738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a53      	ldr	r2, [pc, #332]	; (800b88c <_ZN10ControllerC1Ev+0x1ec>)
 800b740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a52      	ldr	r2, [pc, #328]	; (800b890 <_ZN10ControllerC1Ev+0x1f0>)
 800b748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f04f 0200 	mov.w	r2, #0
 800b752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f04f 0200 	mov.w	r2, #0
 800b75c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b766:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f04f 0200 	mov.w	r2, #0
 800b770:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f04f 0200 	mov.w	r2, #0
 800b77a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800b784:	a330      	add	r3, pc, #192	; (adr r3, 800b848 <_ZN10ControllerC1Ev+0x1a8>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b78e:	a32e      	add	r3, pc, #184	; (adr r3, 800b848 <_ZN10ControllerC1Ev+0x1a8>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	e9cd 2300 	strd	r2, r3, [sp]
 800b798:	a32d      	add	r3, pc, #180	; (adr r3, 800b850 <_ZN10ControllerC1Ev+0x1b0>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	4608      	mov	r0, r1
 800b7a0:	f005 fb4c 	bl	8010e3c <_ZN3lpfC1Eddd>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 800b7aa:	a327      	add	r3, pc, #156	; (adr r3, 800b848 <_ZN10ControllerC1Ev+0x1a8>)
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7b4:	a324      	add	r3, pc, #144	; (adr r3, 800b848 <_ZN10ControllerC1Ev+0x1a8>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	e9cd 2300 	strd	r2, r3, [sp]
 800b7be:	a324      	add	r3, pc, #144	; (adr r3, 800b850 <_ZN10ControllerC1Ev+0x1b0>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	f005 fb39 	bl	8010e3c <_ZN3lpfC1Eddd>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b7d0:	a31d      	add	r3, pc, #116	; (adr r3, 800b848 <_ZN10ControllerC1Ev+0x1a8>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7da:	a31b      	add	r3, pc, #108	; (adr r3, 800b848 <_ZN10ControllerC1Ev+0x1a8>)
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	e9cd 2300 	strd	r2, r3, [sp]
 800b7e4:	a31a      	add	r3, pc, #104	; (adr r3, 800b850 <_ZN10ControllerC1Ev+0x1b0>)
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	4608      	mov	r0, r1
 800b7ec:	f005 fb26 	bl	8010e3c <_ZN3lpfC1Eddd>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f004 ff1a 	bl	8010630 <_ZN3PIDC1Ev>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800b802:	4618      	mov	r0, r3
 800b804:	f004 ff14 	bl	8010630 <_ZN3PIDC1Ev>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800b80e:	4618      	mov	r0, r3
 800b810:	f004 ff0e 	bl	8010630 <_ZN3PIDC1Ev>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b81a:	4618      	mov	r0, r3
 800b81c:	f004 ff08 	bl	8010630 <_ZN3PIDC1Ev>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800b826:	4618      	mov	r0, r3
 800b828:	f004 ff02 	bl	8010630 <_ZN3PIDC1Ev>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800b832:	4618      	mov	r0, r3
 800b834:	f004 fefc 	bl	8010630 <_ZN3PIDC1Ev>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	f3af 8000 	nop.w
 800b848:	fc3b4f61 	.word	0xfc3b4f61
 800b84c:	3fa35935 	.word	0x3fa35935
 800b850:	4f0d844d 	.word	0x4f0d844d
 800b854:	3fed94af 	.word	0x3fed94af
 800b858:	44c1c000 	.word	0x44c1c000
 800b85c:	42654ca3 	.word	0x42654ca3
 800b860:	3fb33333 	.word	0x3fb33333
 800b864:	411cf5c3 	.word	0x411cf5c3
 800b868:	41f9d70a 	.word	0x41f9d70a
 800b86c:	3e6147ae 	.word	0x3e6147ae
 800b870:	3d4ccccd 	.word	0x3d4ccccd
 800b874:	3cf5c28f 	.word	0x3cf5c28f
 800b878:	40a00000 	.word	0x40a00000
 800b87c:	41100000 	.word	0x41100000
 800b880:	41400000 	.word	0x41400000
 800b884:	40400000 	.word	0x40400000
 800b888:	41200000 	.word	0x41200000
 800b88c:	41700000 	.word	0x41700000
 800b890:	c0800000 	.word	0xc0800000

0800b894 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800b894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b898:	b092      	sub	sp, #72	; 0x48
 800b89a:	af04      	add	r7, sp, #16
 800b89c:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
		vel_controller_counter++;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	625a      	str	r2, [r3, #36]	; 0x24

        roll  = state.angles[0];
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	609a      	str	r2, [r3, #8]
        
    if(!swarm) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800b908:	f083 0301 	eor.w	r3, r3, #1
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d01b      	beq.n	800b94a <_ZN10Controller3RunEv+0xb6>
         Kp_roll = 0.28; //0.3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a52      	ldr	r2, [pc, #328]	; (800ba60 <_ZN10Controller3RunEv+0x1cc>)
 800b916:	659a      	str	r2, [r3, #88]	; 0x58
         Ki_roll = 0.02;  //0.008
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a52      	ldr	r2, [pc, #328]	; (800ba64 <_ZN10Controller3RunEv+0x1d0>)
 800b91c:	65da      	str	r2, [r3, #92]	; 0x5c
         Kd_roll = 0.03; //0.007 0.01
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a51      	ldr	r2, [pc, #324]	; (800ba68 <_ZN10Controller3RunEv+0x1d4>)
 800b922:	661a      	str	r2, [r3, #96]	; 0x60

         Kp_pitch = Kp_roll;	//0.8
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	665a      	str	r2, [r3, #100]	; 0x64
         Ki_pitch = Ki_roll;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	669a      	str	r2, [r3, #104]	; 0x68
         Kd_pitch = Kd_roll;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	66da      	str	r2, [r3, #108]	; 0x6c

         Kp_yaw = 5.0;// 1;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a4b      	ldr	r2, [pc, #300]	; (800ba6c <_ZN10Controller3RunEv+0x1d8>)
 800b940:	671a      	str	r2, [r3, #112]	; 0x70
         Ki_yaw = 12;// 1;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a4a      	ldr	r2, [pc, #296]	; (800ba70 <_ZN10Controller3RunEv+0x1dc>)
 800b946:	675a      	str	r2, [r3, #116]	; 0x74
 800b948:	e01b      	b.n	800b982 <_ZN10Controller3RunEv+0xee>
    }

    else {
        Kp_roll = 0.9; //0.3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a49      	ldr	r2, [pc, #292]	; (800ba74 <_ZN10Controller3RunEv+0x1e0>)
 800b94e:	659a      	str	r2, [r3, #88]	; 0x58
        Ki_roll = 0.00;  //0.008
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f04f 0200 	mov.w	r2, #0
 800b956:	65da      	str	r2, [r3, #92]	; 0x5c
        Kd_roll = 0.03; //0.007 0.01
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a43      	ldr	r2, [pc, #268]	; (800ba68 <_ZN10Controller3RunEv+0x1d4>)
 800b95c:	661a      	str	r2, [r3, #96]	; 0x60

        Kp_pitch = Kp_roll;	//0.8
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	665a      	str	r2, [r3, #100]	; 0x64
        Ki_pitch = Ki_roll;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	669a      	str	r2, [r3, #104]	; 0x68
        Kd_pitch = Kd_roll;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	66da      	str	r2, [r3, #108]	; 0x6c

        Kp_yaw = 5.0;// 1;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a3c      	ldr	r2, [pc, #240]	; (800ba6c <_ZN10Controller3RunEv+0x1d8>)
 800b97a:	671a      	str	r2, [r3, #112]	; 0x70
        Ki_yaw = 12;// 1;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a3c      	ldr	r2, [pc, #240]	; (800ba70 <_ZN10Controller3RunEv+0x1dc>)
 800b980:	675a      	str	r2, [r3, #116]	; 0x74
    }

    int thr;
    int thr2 = pid_roll.Sat(ch3, 2000, 1000);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b98e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b992:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b996:	f005 f9db 	bl	8010d50 <_ZN3PID3SatEfii>
 800b99a:	4603      	mov	r3, r0
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7f5 fbad 	bl	80010fc <__aeabi_f2iz>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch(mod) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	f000 8153 	beq.w	800bc58 <_ZN10Controller3RunEv+0x3c4>
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	f300 81d4 	bgt.w	800bd60 <_ZN10Controller3RunEv+0x4cc>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <_ZN10Controller3RunEv+0x12e>
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d05b      	beq.n	800ba78 <_ZN10Controller3RunEv+0x1e4>
 800b9c0:	e1ce      	b.n	800bd60 <_ZN10Controller3RunEv+0x4cc>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b9ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9d2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b9d6:	f005 f9bb 	bl	8010d50 <_ZN3PID3SatEfii>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7f5 fb8d 	bl	80010fc <__aeabi_f2iz>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba16:	4619      	mov	r1, r3
 800ba18:	4610      	mov	r0, r2
 800ba1a:	f005 fa2a 	bl	8010e72 <_ZN3lpf3RunEf>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800ba32:	4619      	mov	r1, r3
 800ba34:	4610      	mov	r0, r2
 800ba36:	f005 fa1c 	bl	8010e72 <_ZN3lpf3RunEf>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ba4e:	4619      	mov	r1, r3
 800ba50:	4610      	mov	r0, r2
 800ba52:	f005 fa0e 	bl	8010e72 <_ZN3lpf3RunEf>
 800ba56:	4602      	mov	r2, r0
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    	    break;
 800ba5e:	e17f      	b.n	800bd60 <_ZN10Controller3RunEv+0x4cc>
 800ba60:	3e8f5c29 	.word	0x3e8f5c29
 800ba64:	3ca3d70a 	.word	0x3ca3d70a
 800ba68:	3cf5c28f 	.word	0x3cf5c28f
 800ba6c:	40a00000 	.word	0x40a00000
 800ba70:	41400000 	.word	0x41400000
 800ba74:	3f666666 	.word	0x3f666666
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 819c 	ldr.w	r8, [r3, #412]	; 0x19c
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 91a0 	ldr.w	r9, [r3, #416]	; 0x1a0
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 a198 	ldr.w	sl, [r3, #408]	; 0x198
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f5 fb50 	bl	8001148 <__aeabi_f2uiz>
 800baa8:	4603      	mov	r3, r0
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	9501      	str	r5, [sp, #4]
 800baae:	9400      	str	r4, [sp, #0]
 800bab0:	4653      	mov	r3, sl
 800bab2:	464a      	mov	r2, r9
 800bab4:	4641      	mov	r1, r8
 800bab6:	4630      	mov	r0, r6
 800bab8:	f004 fe54 	bl	8010764 <_ZN3PID6PI_VelEfffffj>
 800babc:	4604      	mov	r4, r0
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7f5 f93b 	bl	8000d44 <__aeabi_fmul>
 800bace:	4603      	mov	r3, r0
 800bad0:	4619      	mov	r1, r3
 800bad2:	4620      	mov	r0, r4
 800bad4:	f7f5 f82e 	bl	8000b34 <__addsf3>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			float deg2rad = 0.0175;
 800bae2:	4b5c      	ldr	r3, [pc, #368]	; (800bc54 <_ZN10Controller3RunEv+0x3c0>)
 800bae4:	62fb      	str	r3, [r7, #44]	; 0x2c
			float roll_r = roll * deg2rad;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	4619      	mov	r1, r3
 800baec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baee:	f7f5 f929 	bl	8000d44 <__aeabi_fmul>
 800baf2:	4603      	mov	r3, r0
 800baf4:	62bb      	str	r3, [r7, #40]	; 0x28
			float pitch_r = pitch * deg2rad;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	4619      	mov	r1, r3
 800bafc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bafe:	f7f5 f921 	bl	8000d44 <__aeabi_fmul>
 800bb02:	4603      	mov	r3, r0
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800bb06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb08:	f7f6 fdaa 	bl	8002660 <_ZSt3cosf>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	4619      	mov	r1, r3
 800bb10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bb14:	f7f5 f9ca 	bl	8000eac <__aeabi_fdiv>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	461c      	mov	r4, r3
 800bb1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb1e:	f7f6 fd9f 	bl	8002660 <_ZSt3cosf>
 800bb22:	4603      	mov	r3, r0
 800bb24:	4619      	mov	r1, r3
 800bb26:	4620      	mov	r0, r4
 800bb28:	f7f5 f9c0 	bl	8000eac <__aeabi_fdiv>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	623b      	str	r3, [r7, #32]

			F = F * b2e ; // Body to Earth
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bb36:	6a39      	ldr	r1, [r7, #32]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7f5 f903 	bl	8000d44 <__aeabi_fmul>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	461a      	mov	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			F = p_alt.Sat(F, F_max, F_min);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7f5 facf 	bl	80010fc <__aeabi_f2iz>
 800bb5e:	4606      	mov	r6, r0
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7f5 fac9 	bl	80010fc <__aeabi_f2iz>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	4629      	mov	r1, r5
 800bb70:	4620      	mov	r0, r4
 800bb72:	f005 f8ed 	bl	8010d50 <_ZN3PID3SatEfii>
 800bb76:	4602      	mov	r2, r0
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			thr = p_alt.F2thr(F);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	f005 f90f 	bl	8010db0 <_ZN3PID5F2thrEf>
 800bb92:	4603      	mov	r3, r0
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800bb9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb9e:	f7f5 f87d 	bl	8000c9c <__aeabi_i2f>
 800bba2:	4601      	mov	r1, r0
 800bba4:	f240 434c 	movw	r3, #1100	; 0x44c
 800bba8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bbac:	4620      	mov	r0, r4
 800bbae:	f005 f8cf 	bl	8010d50 <_ZN3PID3SatEfii>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7f5 faa1 	bl	80010fc <__aeabi_f2iz>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800bbbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bbc0:	f7f5 f86c 	bl	8000c9c <__aeabi_i2f>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
			z0 = p_alt.zi;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des     = state_des.angles[0];
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f005 f931 	bl	8010e72 <_ZN3lpf3RunEf>
 800bc10:	4602      	mov	r2, r0
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bc24:	4619      	mov	r1, r3
 800bc26:	4610      	mov	r0, r2
 800bc28:	f005 f923 	bl	8010e72 <_ZN3lpf3RunEf>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bc40:	4619      	mov	r1, r3
 800bc42:	4610      	mov	r0, r2
 800bc44:	f005 f915 	bl	8010e72 <_ZN3lpf3RunEf>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			break;
 800bc50:	e086      	b.n	800bd60 <_ZN10Controller3RunEv+0x4cc>
 800bc52:	bf00      	nop
 800bc54:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800bc64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc68:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bc6c:	f005 f870 	bl	8010d50 <_ZN3PID3SatEfii>
 800bc70:	4603      	mov	r3, r0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7f5 fa42 	bl	80010fc <__aeabi_f2iz>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	637b      	str	r3, [r7, #52]	; 0x34

    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);

    	    if(vel_controller_counter >= 10) {
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b09      	cmp	r3, #9
 800bc82:	d958      	bls.n	800bd36 <_ZN10Controller3RunEv+0x4a2>
    	    	//PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd)
    	    	vel_controller_counter = 0;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	625a      	str	r2, [r3, #36]	; 0x24
        		pitch_des = p_velx.PID_Pos(x0,x,Kp_velx,Ki_velx,Kd_velx);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800bcae:	9201      	str	r2, [sp, #4]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	f004 feab 	bl	8010a10 <_ZN3PID7PID_PosEfffff>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des  = p_vely.PID_Pos(y0,y,Kp_vely,Ki_vely,Kd_vely);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 41c0 	ldr.w	r4, [r3, #448]	; 0x1c0
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800bce6:	9201      	str	r2, [sp, #4]
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	462b      	mov	r3, r5
 800bcec:	4622      	mov	r2, r4
 800bcee:	f004 fe8f 	bl	8010a10 <_ZN3PID7PID_PosEfffff>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

        		pitch_des = p_velx.Sat(pitch_des, 20, -20);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800bd06:	f06f 0313 	mvn.w	r3, #19
 800bd0a:	2214      	movs	r2, #20
 800bd0c:	f005 f820 	bl	8010d50 <_ZN3PID3SatEfii>
 800bd10:	4602      	mov	r2, r0
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des = p_vely.Sat(roll_des, 20, -20);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800bd24:	f06f 0313 	mvn.w	r3, #19
 800bd28:	2214      	movs	r2, #20
 800bd2a:	f005 f811 	bl	8010d50 <_ZN3PID3SatEfii>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

    	    }

            yaw_rate_des = state_des.rates[2];
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f005 f88e 	bl	8010e72 <_ZN3lpf3RunEf>
 800bd56:	4602      	mov	r2, r0
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    		break;
 800bd5e:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68da      	ldr	r2, [r3, #12]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	4623      	mov	r3, r4
 800bd7c:	f004 fcb4 	bl	80106e8 <_ZN3PID7P_AngleEffff>
 800bd80:	4602      	mov	r2, r0
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7f4 fed2 	bl	8000b34 <__addsf3>
 800bd90:	4603      	mov	r3, r0
 800bd92:	461a      	mov	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	691a      	ldr	r2, [r3, #16]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	4623      	mov	r3, r4
 800bdb6:	f004 fc97 	bl	80106e8 <_ZN3PID7P_AngleEffff>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	f7f4 feb5 	bl	8000b34 <__addsf3>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	461a      	mov	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f004 fd1c 	bl	8010820 <_ZN3PID6RateFFEf>
 800bde8:	61f8      	str	r0, [r7, #28]
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	f004 fd11 	bl	8010820 <_ZN3PID6RateFFEf>
 800bdfe:	61b8      	str	r0, [r7, #24]

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);// + pd_roll_ff;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	699e      	ldr	r6, [r3, #24]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be1e:	6879      	ldr	r1, [r7, #4]
 800be20:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800be26:	9003      	str	r0, [sp, #12]
 800be28:	9102      	str	r1, [sp, #8]
 800be2a:	9201      	str	r2, [sp, #4]
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	4663      	mov	r3, ip
 800be30:	4632      	mov	r2, r6
 800be32:	4629      	mov	r1, r5
 800be34:	4620      	mov	r0, r4
 800be36:	f004 fd43 	bl	80108c0 <_ZN3PID9PID_Rate2Efffffff>
 800be3a:	4602      	mov	r2, r0
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);// + pd_pitch_ff;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	69de      	ldr	r6, [r3, #28]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800be68:	9003      	str	r0, [sp, #12]
 800be6a:	9102      	str	r1, [sp, #8]
 800be6c:	9201      	str	r2, [sp, #4]
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	4663      	mov	r3, ip
 800be72:	4632      	mov	r2, r6
 800be74:	4629      	mov	r1, r5
 800be76:	4620      	mov	r0, r4
 800be78:	f004 fd22 	bl	80108c0 <_ZN3PID9PID_Rate2Efffffff>
 800be7c:	4602      	mov	r2, r0
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f503 7052 	add.w	r0, r3, #840	; 0x348
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1a      	ldr	r2, [r3, #32]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be9c:	f04f 0500 	mov.w	r5, #0
 800bea0:	9501      	str	r5, [sp, #4]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	4623      	mov	r3, r4
 800bea6:	f004 fdf1 	bl	8010a8c <_ZN3PID7PD_RateEfffff>
 800beaa:	4602      	mov	r2, r0
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140


#ifdef UAV1


    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800beb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800beb4:	f7f4 fef2 	bl	8000c9c <__aeabi_i2f>
 800beb8:	4602      	mov	r2, r0
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f7f4 fe36 	bl	8000b34 <__addsf3>
 800bec8:	4603      	mov	r3, r0
 800beca:	461a      	mov	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bed2:	4619      	mov	r1, r3
 800bed4:	4610      	mov	r0, r2
 800bed6:	f7f4 fe2b 	bl	8000b30 <__aeabi_fsub>
 800beda:	4603      	mov	r3, r0
 800bedc:	461a      	mov	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7f4 fe22 	bl	8000b30 <__aeabi_fsub>
 800beec:	4603      	mov	r3, r0
 800beee:	4982      	ldr	r1, [pc, #520]	; (800c0f8 <_ZN10Controller3RunEv+0x864>)
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7f4 fe1f 	bl	8000b34 <__addsf3>
 800bef6:	4603      	mov	r3, r0
 800bef8:	4980      	ldr	r1, [pc, #512]	; (800c0fc <_ZN10Controller3RunEv+0x868>)
 800befa:	4618      	mov	r0, r3
 800befc:	f7f4 fe18 	bl	8000b30 <__aeabi_fsub>
 800bf00:	4603      	mov	r3, r0
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7f5 f8fa 	bl	80010fc <__aeabi_f2iz>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	617b      	str	r3, [r7, #20]
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 800bf0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf0e:	f7f4 fec5 	bl	8000c9c <__aeabi_i2f>
 800bf12:	4602      	mov	r2, r0
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	f7f4 fe07 	bl	8000b30 <__aeabi_fsub>
 800bf22:	4603      	mov	r3, r0
 800bf24:	461a      	mov	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4610      	mov	r0, r2
 800bf30:	f7f4 fe00 	bl	8000b34 <__addsf3>
 800bf34:	4603      	mov	r3, r0
 800bf36:	461a      	mov	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf3e:	4619      	mov	r1, r3
 800bf40:	4610      	mov	r0, r2
 800bf42:	f7f4 fdf5 	bl	8000b30 <__aeabi_fsub>
 800bf46:	4603      	mov	r3, r0
 800bf48:	496b      	ldr	r1, [pc, #428]	; (800c0f8 <_ZN10Controller3RunEv+0x864>)
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7f4 fdf0 	bl	8000b30 <__aeabi_fsub>
 800bf50:	4603      	mov	r3, r0
 800bf52:	496a      	ldr	r1, [pc, #424]	; (800c0fc <_ZN10Controller3RunEv+0x868>)
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7f4 fded 	bl	8000b34 <__addsf3>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7f5 f8cd 	bl	80010fc <__aeabi_f2iz>
 800bf62:	4603      	mov	r3, r0
 800bf64:	613b      	str	r3, [r7, #16]
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800bf66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf68:	f7f4 fe98 	bl	8000c9c <__aeabi_i2f>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bf74:	4619      	mov	r1, r3
 800bf76:	4610      	mov	r0, r2
 800bf78:	f7f4 fddc 	bl	8000b34 <__addsf3>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bf86:	4619      	mov	r1, r3
 800bf88:	4610      	mov	r0, r2
 800bf8a:	f7f4 fdd3 	bl	8000b34 <__addsf3>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	461a      	mov	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	f7f4 fdca 	bl	8000b34 <__addsf3>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	4955      	ldr	r1, [pc, #340]	; (800c0f8 <_ZN10Controller3RunEv+0x864>)
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7f4 fdc5 	bl	8000b34 <__addsf3>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	4953      	ldr	r1, [pc, #332]	; (800c0fc <_ZN10Controller3RunEv+0x868>)
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7f4 fdc0 	bl	8000b34 <__addsf3>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7f5 f8a0 	bl	80010fc <__aeabi_f2iz>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	60fb      	str	r3, [r7, #12]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800bfc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bfc2:	f7f4 fe6b 	bl	8000c9c <__aeabi_i2f>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	f7f4 fdad 	bl	8000b30 <__aeabi_fsub>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	461a      	mov	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	f7f4 fda4 	bl	8000b30 <__aeabi_fsub>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bff2:	4619      	mov	r1, r3
 800bff4:	4610      	mov	r0, r2
 800bff6:	f7f4 fd9d 	bl	8000b34 <__addsf3>
 800bffa:	4603      	mov	r3, r0
 800bffc:	493e      	ldr	r1, [pc, #248]	; (800c0f8 <_ZN10Controller3RunEv+0x864>)
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f4 fd96 	bl	8000b30 <__aeabi_fsub>
 800c004:	4603      	mov	r3, r0
 800c006:	493d      	ldr	r1, [pc, #244]	; (800c0fc <_ZN10Controller3RunEv+0x868>)
 800c008:	4618      	mov	r0, r3
 800c00a:	f7f4 fd91 	bl	8000b30 <__aeabi_fsub>
 800c00e:	4603      	mov	r3, r0
 800c010:	4618      	mov	r0, r3
 800c012:	f7f5 f873 	bl	80010fc <__aeabi_f2iz>
 800c016:	4603      	mov	r3, r0
 800c018:	60bb      	str	r3, [r7, #8]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;

#endif

    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c020:	6978      	ldr	r0, [r7, #20]
 800c022:	f7f4 fe3b 	bl	8000c9c <__aeabi_i2f>
 800c026:	4601      	mov	r1, r0
 800c028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	f240 434c 	movw	r3, #1100	; 0x44c
 800c030:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c034:	4620      	mov	r0, r4
 800c036:	f004 fe51 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c03a:	4603      	mov	r3, r0
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7f5 f85d 	bl	80010fc <__aeabi_f2iz>
 800c042:	4603      	mov	r3, r0
 800c044:	617b      	str	r3, [r7, #20]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c04c:	6938      	ldr	r0, [r7, #16]
 800c04e:	f7f4 fe25 	bl	8000c9c <__aeabi_i2f>
 800c052:	4601      	mov	r1, r0
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	f240 434c 	movw	r3, #1100	; 0x44c
 800c05c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c060:	4620      	mov	r0, r4
 800c062:	f004 fe3b 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c066:	4603      	mov	r3, r0
 800c068:	4618      	mov	r0, r3
 800c06a:	f7f5 f847 	bl	80010fc <__aeabi_f2iz>
 800c06e:	4603      	mov	r3, r0
 800c070:	613b      	str	r3, [r7, #16]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7f4 fe0f 	bl	8000c9c <__aeabi_i2f>
 800c07e:	4601      	mov	r1, r0
 800c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	f240 434c 	movw	r3, #1100	; 0x44c
 800c088:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c08c:	4620      	mov	r0, r4
 800c08e:	f004 fe25 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c092:	4603      	mov	r3, r0
 800c094:	4618      	mov	r0, r3
 800c096:	f7f5 f831 	bl	80010fc <__aeabi_f2iz>
 800c09a:	4603      	mov	r3, r0
 800c09c:	60fb      	str	r3, [r7, #12]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c0a4:	68b8      	ldr	r0, [r7, #8]
 800c0a6:	f7f4 fdf9 	bl	8000c9c <__aeabi_i2f>
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	f240 434c 	movw	r3, #1100	; 0x44c
 800c0b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f004 fe0f 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7f5 f81b 	bl	80010fc <__aeabi_f2iz>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	60bb      	str	r3, [r7, #8]
    controller_output_pwm2[1] = thr - pd_pitch + pd_roll  + p_yaw;
    controller_output_pwm2[2] = thr + pd_pitch + pd_roll  - p_yaw;
    controller_output_pwm2[3] = thr - pd_pitch - pd_roll  - p_yaw;
    */

    if(swarm) {
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d015      	beq.n	800c100 <_ZN10Controller3RunEv+0x86c>
        controller_output_pwm2[0] = thr2;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = thr2;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = thr2;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = thr2;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0f0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800c0f4:	e018      	b.n	800c128 <_ZN10Controller3RunEv+0x894>
 800c0f6:	bf00      	nop
 800c0f8:	41f00000 	.word	0x41f00000
 800c0fc:	41500000 	.word	0x41500000
    }

    else {
        controller_output_pwm2[0] = 1000;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c106:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = 1000;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c110:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = 1000;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c11a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = 1000;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c124:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }



    //Saturate pwm values
    controller_output_pwm2[0] = (int)pid_roll.Sat(controller_output_pwm2[0],PWM_UPPER,1000,thr);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c134:	4618      	mov	r0, r3
 800c136:	f7f4 fdb1 	bl	8000c9c <__aeabi_i2f>
 800c13a:	4601      	mov	r1, r0
 800c13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c144:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c148:	4620      	mov	r0, r4
 800c14a:	f004 fdc7 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c14e:	4603      	mov	r3, r0
 800c150:	4618      	mov	r0, r3
 800c152:	f7f4 ffd3 	bl	80010fc <__aeabi_f2iz>
 800c156:	4602      	mov	r2, r0
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm2[1] = (int)pid_roll.Sat(controller_output_pwm2[1],PWM_UPPER,1000,thr);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f4 fd96 	bl	8000c9c <__aeabi_i2f>
 800c170:	4601      	mov	r1, r0
 800c172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c17a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c17e:	4620      	mov	r0, r4
 800c180:	f004 fdac 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c184:	4603      	mov	r3, r0
 800c186:	4618      	mov	r0, r3
 800c188:	f7f4 ffb8 	bl	80010fc <__aeabi_f2iz>
 800c18c:	4602      	mov	r2, r0
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm2[2] = (int)pid_roll.Sat(controller_output_pwm2[2],PWM_UPPER,1000,thr);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7f4 fd7b 	bl	8000c9c <__aeabi_i2f>
 800c1a6:	4601      	mov	r1, r0
 800c1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c1b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f004 fd91 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7f4 ff9d 	bl	80010fc <__aeabi_f2iz>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    controller_output_pwm2[3] = (int)pid_roll.Sat(controller_output_pwm2[3],PWM_UPPER,1000,thr);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f4 fd60 	bl	8000c9c <__aeabi_i2f>
 800c1dc:	4601      	mov	r1, r0
 800c1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c1e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f004 fd76 	bl	8010cdc <_ZN3PID3SatEfiii>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f4 ff82 	bl	80010fc <__aeabi_f2iz>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    controller_output_pwm[1] = pwm2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    controller_output_pwm[2] = pwm3;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    controller_output_pwm[3] = pwm4;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  //  return controller_output;
}
 800c220:	bf00      	nop
 800c222:	3738      	adds	r7, #56	; 0x38
 800c224:	46bd      	mov	sp, r7
 800c226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22a:	bf00      	nop

0800c22c <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800c23a:	4618      	mov	r0, r3
 800c23c:	f004 fdf0 	bl	8010e20 <_ZN3PIDD1Ev>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800c246:	4618      	mov	r0, r3
 800c248:	f004 fdea 	bl	8010e20 <_ZN3PIDD1Ev>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c252:	4618      	mov	r0, r3
 800c254:	f004 fde4 	bl	8010e20 <_ZN3PIDD1Ev>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c25e:	4618      	mov	r0, r3
 800c260:	f004 fdde 	bl	8010e20 <_ZN3PIDD1Ev>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800c26a:	4618      	mov	r0, r3
 800c26c:	f004 fdd8 	bl	8010e20 <_ZN3PIDD1Ev>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800c276:	4618      	mov	r0, r3
 800c278:	f004 fdd2 	bl	8010e20 <_ZN3PIDD1Ev>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	33f0      	adds	r3, #240	; 0xf0
 800c280:	4618      	mov	r0, r3
 800c282:	f004 fe4c 	bl	8010f1e <_ZN3lpfD1Ev>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	33c8      	adds	r3, #200	; 0xc8
 800c28a:	4618      	mov	r0, r3
 800c28c:	f004 fe47 	bl	8010f1e <_ZN3lpfD1Ev>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	33a0      	adds	r3, #160	; 0xa0
 800c294:	4618      	mov	r0, r3
 800c296:	f004 fe42 	bl	8010f1e <_ZN3lpfD1Ev>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	0000      	movs	r0, r0
	...

0800c2a8 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af04      	add	r7, sp, #16
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f04f 0200 	mov.w	r2, #0
 800c2b6:	60da      	str	r2, [r3, #12]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a85      	ldr	r2, [pc, #532]	; (800c4d0 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800c2bc:	611a      	str	r2, [r3, #16]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f04f 0200 	mov.w	r2, #0
 800c2c4:	62da      	str	r2, [r3, #44]	; 0x2c
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	631a      	str	r2, [r3, #48]	; 0x30
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	635a      	str	r2, [r3, #52]	; 0x34
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a7e      	ldr	r2, [pc, #504]	; (800c4d4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c2da:	639a      	str	r2, [r3, #56]	; 0x38
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a7e      	ldr	r2, [pc, #504]	; (800c4d8 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800c2e0:	651a      	str	r2, [r3, #80]	; 0x50
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a7d      	ldr	r2, [pc, #500]	; (800c4dc <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800c2e6:	655a      	str	r2, [r3, #84]	; 0x54
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f04f 0200 	mov.w	r2, #0
 800c2ee:	659a      	str	r2, [r3, #88]	; 0x58
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f04f 0200 	mov.w	r2, #0
 800c2f6:	65da      	str	r2, [r3, #92]	; 0x5c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f04f 0200 	mov.w	r2, #0
 800c2fe:	661a      	str	r2, [r3, #96]	; 0x60
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a74      	ldr	r2, [pc, #464]	; (800c4d4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c304:	665a      	str	r2, [r3, #100]	; 0x64
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a75      	ldr	r2, [pc, #468]	; (800c4e0 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800c30a:	67da      	str	r2, [r3, #124]	; 0x7c
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f04f 0200 	mov.w	r2, #0
 800c312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f04f 0200 	mov.w	r2, #0
 800c31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a70      	ldr	r2, [pc, #448]	; (800c4e4 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800c324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a6a      	ldr	r2, [pc, #424]	; (800c4d4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c32c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a68      	ldr	r2, [pc, #416]	; (800c4d4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c334:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4a6b      	ldr	r2, [pc, #428]	; (800c4e8 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800c33c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a6a      	ldr	r2, [pc, #424]	; (800c4ec <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800c344:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c34e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a66      	ldr	r2, [pc, #408]	; (800c4f0 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800c356:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a65      	ldr	r2, [pc, #404]	; (800c4f4 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800c35e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c368:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a62      	ldr	r2, [pc, #392]	; (800c4f8 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 800c370:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	22c8      	movs	r2, #200	; 0xc8
 800c378:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c382:	4618      	mov	r0, r3
 800c384:	f7f4 fc8a 	bl	8000c9c <__aeabi_i2f>
 800c388:	4603      	mov	r3, r0
 800c38a:	4619      	mov	r1, r3
 800c38c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c390:	f7f4 fd8c 	bl	8000eac <__aeabi_fdiv>
 800c394:	4603      	mov	r3, r0
 800c396:	4618      	mov	r0, r3
 800c398:	f7f4 f846 	bl	8000428 <__aeabi_f2d>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a54      	ldr	r2, [pc, #336]	; (800c4fc <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800c3aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a53      	ldr	r2, [pc, #332]	; (800c500 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800c3b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a51      	ldr	r2, [pc, #324]	; (800c500 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800c3ba:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a50      	ldr	r2, [pc, #320]	; (800c504 <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800c3c2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800c3cc:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a4d      	ldr	r2, [pc, #308]	; (800c508 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800c3d4:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c3de:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a49      	ldr	r2, [pc, #292]	; (800c50c <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800c3e6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a48      	ldr	r2, [pc, #288]	; (800c510 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800c3ee:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a47      	ldr	r2, [pc, #284]	; (800c514 <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800c3f6:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c400:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c40a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4a41      	ldr	r2, [pc, #260]	; (800c518 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800c412:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f04f 0200 	mov.w	r2, #0
 800c41c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
 800c426:	a31e      	add	r3, pc, #120	; (adr r3, 800c4a0 <_ZN15Kalman_FiltresiC1Ev+0x1f8>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c430:	a31b      	add	r3, pc, #108	; (adr r3, 800c4a0 <_ZN15Kalman_FiltresiC1Ev+0x1f8>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	e9cd 2300 	strd	r2, r3, [sp]
 800c43a:	a31b      	add	r3, pc, #108	; (adr r3, 800c4a8 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	4608      	mov	r0, r1
 800c442:	f004 fcfb 	bl	8010e3c <_ZN3lpfC1Eddd>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800c44c:	a318      	add	r3, pc, #96	; (adr r3, 800c4b0 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c456:	a316      	add	r3, pc, #88	; (adr r3, 800c4b0 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	e9cd 2300 	strd	r2, r3, [sp]
 800c460:	a315      	add	r3, pc, #84	; (adr r3, 800c4b8 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	4608      	mov	r0, r1
 800c468:	f004 fce8 	bl	8010e3c <_ZN3lpfC1Eddd>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f503 7146 	add.w	r1, r3, #792	; 0x318
 800c472:	a313      	add	r3, pc, #76	; (adr r3, 800c4c0 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c47c:	a310      	add	r3, pc, #64	; (adr r3, 800c4c0 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	e9cd 2300 	strd	r2, r3, [sp]
 800c486:	a310      	add	r3, pc, #64	; (adr r3, 800c4c8 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	4608      	mov	r0, r1
 800c48e:	f004 fcd5 	bl	8010e3c <_ZN3lpfC1Eddd>

}
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	f3af 8000 	nop.w
 800c4a0:	de7ea5f8 	.word	0xde7ea5f8
 800c4a4:	3fb2a454 	.word	0x3fb2a454
 800c4a8:	ab367a10 	.word	0xab367a10
 800c4ac:	3feb573e 	.word	0x3feb573e
 800c4b0:	fc3b4f61 	.word	0xfc3b4f61
 800c4b4:	3fa35935 	.word	0x3fa35935
 800c4b8:	4f0d844d 	.word	0x4f0d844d
 800c4bc:	3fed94af 	.word	0x3fed94af
 800c4c0:	e5c91d15 	.word	0xe5c91d15
 800c4c4:	3feda43f 	.word	0x3feda43f
 800c4c8:	cb923a2a 	.word	0xcb923a2a
 800c4cc:	bfeb487f 	.word	0xbfeb487f
 800c4d0:	3ca3d70a 	.word	0x3ca3d70a
 800c4d4:	4e6e6b28 	.word	0x4e6e6b28
 800c4d8:	3c23d70a 	.word	0x3c23d70a
 800c4dc:	3f333333 	.word	0x3f333333
 800c4e0:	47c35000 	.word	0x47c35000
 800c4e4:	461c4000 	.word	0x461c4000
 800c4e8:	41200000 	.word	0x41200000
 800c4ec:	4b189680 	.word	0x4b189680
 800c4f0:	40a00000 	.word	0x40a00000
 800c4f4:	42480000 	.word	0x42480000
 800c4f8:	42654ca3 	.word	0x42654ca3
 800c4fc:	38d1b717 	.word	0x38d1b717
 800c500:	40400000 	.word	0x40400000
 800c504:	41a00000 	.word	0x41a00000
 800c508:	3cdd2f1b 	.word	0x3cdd2f1b
 800c50c:	48f42400 	.word	0x48f42400
 800c510:	3727c5ac 	.word	0x3727c5ac
 800c514:	322bcc77 	.word	0x322bcc77
 800c518:	40066666 	.word	0x40066666

0800c51c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>:
void Kalman_Filtresi::PredictUpdatePos(pos_axis axis) {
 800c51c:	b5b0      	push	{r4, r5, r7, lr}
 800c51e:	b0a8      	sub	sp, #160	; 0xa0
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
	float pos,vel,a,b,accm,pos_gps,vgps,S1_1,S1_2,S1_3,S1_4,S2_1,S2_2,S2_3,S2_4,S3_1,S3_2,S3_3,S3_4,S4_1, S4_2, S4_3, S4_4;
	float angle;
	float deg2rad = M_PI/180.0;
 800c528:	4b3b      	ldr	r3, [pc, #236]	; (800c618 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0xfc>)
 800c52a:	643b      	str	r3, [r7, #64]	; 0x40

	switch (axis) {
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1c>
 800c532:	2b01      	cmp	r3, #1
 800c534:	d072      	beq.n	800c61c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x100>
 800c536:	e0df      	b.n	800c6f8 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1dc>
		case x_axis:
			pos = x;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c53e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			a = apx;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			vel = vx;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			b = bax;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c55c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			angle = -pitch_ekf*deg2rad;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800c566:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c56a:	4619      	mov	r1, r3
 800c56c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c56e:	f7f4 fbe9 	bl	8000d44 <__aeabi_fmul>
 800c572:	4603      	mov	r3, r0
 800c574:	63fb      	str	r3, [r7, #60]	; 0x3c

			pos_gps = xgps;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c57c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			vgps   = vgpsx;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			accm		= accx;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			S1_1 = Sp1_1x;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c59a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S1_2 = Sp1_2x;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c5a4:	67fb      	str	r3, [r7, #124]	; 0x7c
			S1_3 = Sp1_3x;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c5ac:	67bb      	str	r3, [r7, #120]	; 0x78
			S1_4 = Sp1_4x;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5b4:	677b      	str	r3, [r7, #116]	; 0x74
			S2_1 = Sp2_1x;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c5bc:	673b      	str	r3, [r7, #112]	; 0x70
			S2_2 = Sp2_2x;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5c4:	66fb      	str	r3, [r7, #108]	; 0x6c
			S2_3 = Sp2_3x;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c5cc:	66bb      	str	r3, [r7, #104]	; 0x68
			S2_4 = Sp2_4x;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5d4:	667b      	str	r3, [r7, #100]	; 0x64
			S3_1 = Sp3_1x;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c5dc:	663b      	str	r3, [r7, #96]	; 0x60
			S3_2 = Sp3_2x;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
			S3_3 = Sp3_3x;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c5ec:	65bb      	str	r3, [r7, #88]	; 0x58
			S3_4 = Sp3_4x;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c5f4:	657b      	str	r3, [r7, #84]	; 0x54
			S4_1 = Sp4_1x;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c5fc:	653b      	str	r3, [r7, #80]	; 0x50
			S4_2 = Sp4_2x;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c604:	64fb      	str	r3, [r7, #76]	; 0x4c
			S4_3 = Sp4_3x;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c60c:	64bb      	str	r3, [r7, #72]	; 0x48
			S4_4 = Sp4_4x;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c614:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 800c616:	e06f      	b.n	800c6f8 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1dc>
 800c618:	3c8efa35 	.word	0x3c8efa35

		case y_axis:
			pos = y;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800c622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			a = apy;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800c62c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			vel = vy;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800c636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			b = bay;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800c640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			angle = roll_ekf*deg2rad;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800c64a:	4619      	mov	r1, r3
 800c64c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c64e:	f7f4 fb79 	bl	8000d44 <__aeabi_fmul>
 800c652:	4603      	mov	r3, r0
 800c654:	63fb      	str	r3, [r7, #60]	; 0x3c

			pos_gps = ygps;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800c65c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			vgps   = vgpsy;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			accm		= accy;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800c670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			S1_1 = Sp1_1y;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c67a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S1_2 = Sp1_2y;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c684:	67fb      	str	r3, [r7, #124]	; 0x7c
			S1_3 = Sp1_3y;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c68c:	67bb      	str	r3, [r7, #120]	; 0x78
			S1_4 = Sp1_4y;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c694:	677b      	str	r3, [r7, #116]	; 0x74
			S2_1 = Sp2_1y;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800c69c:	673b      	str	r3, [r7, #112]	; 0x70
			S2_2 = Sp2_2y;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c6a4:	66fb      	str	r3, [r7, #108]	; 0x6c
			S2_3 = Sp2_3y;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c6ac:	66bb      	str	r3, [r7, #104]	; 0x68
			S2_4 = Sp2_4y;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c6b4:	667b      	str	r3, [r7, #100]	; 0x64
			S3_1 = Sp3_1y;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c6bc:	663b      	str	r3, [r7, #96]	; 0x60
			S3_2 = Sp3_2y;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c6c4:	65fb      	str	r3, [r7, #92]	; 0x5c
			S3_3 = Sp3_3y;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c6cc:	65bb      	str	r3, [r7, #88]	; 0x58
			S3_4 = Sp3_4y;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c6d4:	657b      	str	r3, [r7, #84]	; 0x54
			S4_1 = Sp4_1y;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c6dc:	653b      	str	r3, [r7, #80]	; 0x50
			S4_2 = Sp4_2y;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c6e4:	64fb      	str	r3, [r7, #76]	; 0x4c
			S4_3 = Sp4_3y;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c6ec:	64bb      	str	r3, [r7, #72]	; 0x48
			S4_4 = Sp4_4y;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800c6f4:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 800c6f6:	bf00      	nop

	}
	pos =(a*pos_st*pos_st)/2 + (vel)*pos_st + (pos);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c700:	4618      	mov	r0, r3
 800c702:	f7f4 fb1f 	bl	8000d44 <__aeabi_fmul>
 800c706:	4603      	mov	r3, r0
 800c708:	461a      	mov	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	4619      	mov	r1, r3
 800c710:	4610      	mov	r0, r2
 800c712:	f7f4 fb17 	bl	8000d44 <__aeabi_fmul>
 800c716:	4603      	mov	r3, r0
 800c718:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7f4 fbc5 	bl	8000eac <__aeabi_fdiv>
 800c722:	4603      	mov	r3, r0
 800c724:	461c      	mov	r4, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c72e:	4618      	mov	r0, r3
 800c730:	f7f4 fb08 	bl	8000d44 <__aeabi_fmul>
 800c734:	4603      	mov	r3, r0
 800c736:	4619      	mov	r1, r3
 800c738:	4620      	mov	r0, r4
 800c73a:	f7f4 f9fb 	bl	8000b34 <__addsf3>
 800c73e:	4603      	mov	r3, r0
 800c740:	4619      	mov	r1, r3
 800c742:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c746:	f7f4 f9f5 	bl	8000b34 <__addsf3>
 800c74a:	4603      	mov	r3, r0
 800c74c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	vel =                   (vel) + pos_st*a;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c758:	4618      	mov	r0, r3
 800c75a:	f7f4 faf3 	bl	8000d44 <__aeabi_fmul>
 800c75e:	4603      	mov	r3, r0
 800c760:	4619      	mov	r1, r3
 800c762:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c766:	f7f4 f9e5 	bl	8000b34 <__addsf3>
 800c76a:	4603      	mov	r3, r0
 800c76c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		//a = g*angle;
//	}

	//b =                                (b);

	S1_1=S1_1 + sx + S1_2*pos_st + S2_1*pos_st + (S1_3*pos_st*pos_st)/2 + S2_2*pos_st*pos_st + (S2_3*pos_st*pos_st*pos_st)/2 + (S3_1*pos_st*pos_st)/2 + (S3_2*pos_st*pos_st*pos_st)/2 + (S3_3*pos_st*pos_st*pos_st*pos_st)/4;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800c776:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7f4 f9da 	bl	8000b34 <__addsf3>
 800c780:	4603      	mov	r3, r0
 800c782:	461c      	mov	r4, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7f4 fada 	bl	8000d44 <__aeabi_fmul>
 800c790:	4603      	mov	r3, r0
 800c792:	4619      	mov	r1, r3
 800c794:	4620      	mov	r0, r4
 800c796:	f7f4 f9cd 	bl	8000b34 <__addsf3>
 800c79a:	4603      	mov	r3, r0
 800c79c:	461c      	mov	r4, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7f4 facd 	bl	8000d44 <__aeabi_fmul>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f7f4 f9c0 	bl	8000b34 <__addsf3>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	461c      	mov	r4, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7f4 fac0 	bl	8000d44 <__aeabi_fmul>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	f7f4 fab8 	bl	8000d44 <__aeabi_fmul>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f4 fb66 	bl	8000eac <__aeabi_fdiv>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f7f4 f9a5 	bl	8000b34 <__addsf3>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	461c      	mov	r4, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7f4 faa5 	bl	8000d44 <__aeabi_fmul>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	4619      	mov	r1, r3
 800c804:	4610      	mov	r0, r2
 800c806:	f7f4 fa9d 	bl	8000d44 <__aeabi_fmul>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4619      	mov	r1, r3
 800c80e:	4620      	mov	r0, r4
 800c810:	f7f4 f990 	bl	8000b34 <__addsf3>
 800c814:	4603      	mov	r3, r0
 800c816:	461c      	mov	r4, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f4 fa90 	bl	8000d44 <__aeabi_fmul>
 800c824:	4603      	mov	r3, r0
 800c826:	461a      	mov	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f7f4 fa88 	bl	8000d44 <__aeabi_fmul>
 800c834:	4603      	mov	r3, r0
 800c836:	461a      	mov	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7f4 fa80 	bl	8000d44 <__aeabi_fmul>
 800c844:	4603      	mov	r3, r0
 800c846:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7f4 fb2e 	bl	8000eac <__aeabi_fdiv>
 800c850:	4603      	mov	r3, r0
 800c852:	4619      	mov	r1, r3
 800c854:	4620      	mov	r0, r4
 800c856:	f7f4 f96d 	bl	8000b34 <__addsf3>
 800c85a:	4603      	mov	r3, r0
 800c85c:	461c      	mov	r4, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c864:	4618      	mov	r0, r3
 800c866:	f7f4 fa6d 	bl	8000d44 <__aeabi_fmul>
 800c86a:	4603      	mov	r3, r0
 800c86c:	461a      	mov	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7f4 fa65 	bl	8000d44 <__aeabi_fmul>
 800c87a:	4603      	mov	r3, r0
 800c87c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c880:	4618      	mov	r0, r3
 800c882:	f7f4 fb13 	bl	8000eac <__aeabi_fdiv>
 800c886:	4603      	mov	r3, r0
 800c888:	4619      	mov	r1, r3
 800c88a:	4620      	mov	r0, r4
 800c88c:	f7f4 f952 	bl	8000b34 <__addsf3>
 800c890:	4603      	mov	r3, r0
 800c892:	461c      	mov	r4, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f4 fa52 	bl	8000d44 <__aeabi_fmul>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	f7f4 fa4a 	bl	8000d44 <__aeabi_fmul>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4610      	mov	r0, r2
 800c8bc:	f7f4 fa42 	bl	8000d44 <__aeabi_fmul>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7f4 faf0 	bl	8000eac <__aeabi_fdiv>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f7f4 f92f 	bl	8000b34 <__addsf3>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	461c      	mov	r4, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7f4 fa2f 	bl	8000d44 <__aeabi_fmul>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	f7f4 fa27 	bl	8000d44 <__aeabi_fmul>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7f4 fa1f 	bl	8000d44 <__aeabi_fmul>
 800c906:	4603      	mov	r3, r0
 800c908:	461a      	mov	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	4619      	mov	r1, r3
 800c910:	4610      	mov	r0, r2
 800c912:	f7f4 fa17 	bl	8000d44 <__aeabi_fmul>
 800c916:	4603      	mov	r3, r0
 800c918:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7f4 fac5 	bl	8000eac <__aeabi_fdiv>
 800c922:	4603      	mov	r3, r0
 800c924:	4619      	mov	r1, r3
 800c926:	4620      	mov	r0, r4
 800c928:	f7f4 f904 	bl	8000b34 <__addsf3>
 800c92c:	4603      	mov	r3, r0
 800c92e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	S1_2=S1_2 + S1_3*pos_st + S2_2*pos_st + S2_3*pos_st*pos_st + (S3_2*pos_st*pos_st)/2 + (S3_3*pos_st*pos_st*pos_st)/2;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c938:	4618      	mov	r0, r3
 800c93a:	f7f4 fa03 	bl	8000d44 <__aeabi_fmul>
 800c93e:	4603      	mov	r3, r0
 800c940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c942:	4618      	mov	r0, r3
 800c944:	f7f4 f8f6 	bl	8000b34 <__addsf3>
 800c948:	4603      	mov	r3, r0
 800c94a:	461c      	mov	r4, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c952:	4618      	mov	r0, r3
 800c954:	f7f4 f9f6 	bl	8000d44 <__aeabi_fmul>
 800c958:	4603      	mov	r3, r0
 800c95a:	4619      	mov	r1, r3
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7f4 f8e9 	bl	8000b34 <__addsf3>
 800c962:	4603      	mov	r3, r0
 800c964:	461c      	mov	r4, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7f4 f9e9 	bl	8000d44 <__aeabi_fmul>
 800c972:	4603      	mov	r3, r0
 800c974:	461a      	mov	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	4619      	mov	r1, r3
 800c97c:	4610      	mov	r0, r2
 800c97e:	f7f4 f9e1 	bl	8000d44 <__aeabi_fmul>
 800c982:	4603      	mov	r3, r0
 800c984:	4619      	mov	r1, r3
 800c986:	4620      	mov	r0, r4
 800c988:	f7f4 f8d4 	bl	8000b34 <__addsf3>
 800c98c:	4603      	mov	r3, r0
 800c98e:	461c      	mov	r4, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c996:	4618      	mov	r0, r3
 800c998:	f7f4 f9d4 	bl	8000d44 <__aeabi_fmul>
 800c99c:	4603      	mov	r3, r0
 800c99e:	461a      	mov	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	f7f4 f9cc 	bl	8000d44 <__aeabi_fmul>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7f4 fa7a 	bl	8000eac <__aeabi_fdiv>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f7f4 f8b9 	bl	8000b34 <__addsf3>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	461c      	mov	r4, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7f4 f9b9 	bl	8000d44 <__aeabi_fmul>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	4610      	mov	r0, r2
 800c9de:	f7f4 f9b1 	bl	8000d44 <__aeabi_fmul>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	f7f4 f9a9 	bl	8000d44 <__aeabi_fmul>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7f4 fa57 	bl	8000eac <__aeabi_fdiv>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	4619      	mov	r1, r3
 800ca02:	4620      	mov	r0, r4
 800ca04:	f7f4 f896 	bl	8000b34 <__addsf3>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	67fb      	str	r3, [r7, #124]	; 0x7c
	S1_3=0;
 800ca0c:	f04f 0300 	mov.w	r3, #0
 800ca10:	67bb      	str	r3, [r7, #120]	; 0x78
	S1_4=S1_4 + S2_4*pos_st + (S3_4*pos_st*pos_st)/2;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7f4 f993 	bl	8000d44 <__aeabi_fmul>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7f4 f886 	bl	8000b34 <__addsf3>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461c      	mov	r4, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7f4 f986 	bl	8000d44 <__aeabi_fmul>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	4619      	mov	r1, r3
 800ca42:	4610      	mov	r0, r2
 800ca44:	f7f4 f97e 	bl	8000d44 <__aeabi_fmul>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7f4 fa2c 	bl	8000eac <__aeabi_fdiv>
 800ca54:	4603      	mov	r3, r0
 800ca56:	4619      	mov	r1, r3
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7f4 f86b 	bl	8000b34 <__addsf3>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	677b      	str	r3, [r7, #116]	; 0x74
	S2_1=S2_1 + (pos_st*pos_st*(S2_3 + S3_3*pos_st))/2 + S3_1*pos_st + pos_st*(S2_2 + S3_2*pos_st);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	691a      	ldr	r2, [r3, #16]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	f7f4 f969 	bl	8000d44 <__aeabi_fmul>
 800ca72:	4603      	mov	r3, r0
 800ca74:	461c      	mov	r4, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7f4 f961 	bl	8000d44 <__aeabi_fmul>
 800ca82:	4603      	mov	r3, r0
 800ca84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7f4 f854 	bl	8000b34 <__addsf3>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4620      	mov	r0, r4
 800ca92:	f7f4 f957 	bl	8000d44 <__aeabi_fmul>
 800ca96:	4603      	mov	r3, r0
 800ca98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7f4 fa05 	bl	8000eac <__aeabi_fdiv>
 800caa2:	4603      	mov	r3, r0
 800caa4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f4 f844 	bl	8000b34 <__addsf3>
 800caac:	4603      	mov	r3, r0
 800caae:	461c      	mov	r4, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f4 f944 	bl	8000d44 <__aeabi_fmul>
 800cabc:	4603      	mov	r3, r0
 800cabe:	4619      	mov	r1, r3
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7f4 f837 	bl	8000b34 <__addsf3>
 800cac6:	4603      	mov	r3, r0
 800cac8:	461d      	mov	r5, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	691c      	ldr	r4, [r3, #16]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7f4 f935 	bl	8000d44 <__aeabi_fmul>
 800cada:	4603      	mov	r3, r0
 800cadc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f4 f828 	bl	8000b34 <__addsf3>
 800cae4:	4603      	mov	r3, r0
 800cae6:	4619      	mov	r1, r3
 800cae8:	4620      	mov	r0, r4
 800caea:	f7f4 f92b 	bl	8000d44 <__aeabi_fmul>
 800caee:	4603      	mov	r3, r0
 800caf0:	4619      	mov	r1, r3
 800caf2:	4628      	mov	r0, r5
 800caf4:	f7f4 f81e 	bl	8000b34 <__addsf3>
 800caf8:	4603      	mov	r3, r0
 800cafa:	673b      	str	r3, [r7, #112]	; 0x70
	S2_2=S2_2 + sv + S3_2*pos_st + pos_st*(S2_3 + S3_3*pos_st);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800cb02:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7f4 f815 	bl	8000b34 <__addsf3>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	461c      	mov	r4, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7f4 f915 	bl	8000d44 <__aeabi_fmul>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7f4 f808 	bl	8000b34 <__addsf3>
 800cb24:	4603      	mov	r3, r0
 800cb26:	461d      	mov	r5, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691c      	ldr	r4, [r3, #16]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7f4 f906 	bl	8000d44 <__aeabi_fmul>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7f3 fff9 	bl	8000b34 <__addsf3>
 800cb42:	4603      	mov	r3, r0
 800cb44:	4619      	mov	r1, r3
 800cb46:	4620      	mov	r0, r4
 800cb48:	f7f4 f8fc 	bl	8000d44 <__aeabi_fmul>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4628      	mov	r0, r5
 800cb52:	f7f3 ffef 	bl	8000b34 <__addsf3>
 800cb56:	4603      	mov	r3, r0
 800cb58:	66fb      	str	r3, [r7, #108]	; 0x6c
	S2_3=0;
 800cb5a:	f04f 0300 	mov.w	r3, #0
 800cb5e:	66bb      	str	r3, [r7, #104]	; 0x68
	S2_4=S2_4 + S3_4*pos_st;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	691b      	ldr	r3, [r3, #16]
 800cb64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7f4 f8ec 	bl	8000d44 <__aeabi_fmul>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cb72:	f7f3 ffdf 	bl	8000b34 <__addsf3>
 800cb76:	4603      	mov	r3, r0
 800cb78:	667b      	str	r3, [r7, #100]	; 0x64
	S3_1=0;
 800cb7a:	f04f 0300 	mov.w	r3, #0
 800cb7e:	663b      	str	r3, [r7, #96]	; 0x60
	S3_2=0;
 800cb80:	f04f 0300 	mov.w	r3, #0
 800cb84:	65fb      	str	r3, [r7, #92]	; 0x5c
	S3_3=sa;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb8a:	65bb      	str	r3, [r7, #88]	; 0x58
	S3_4=0;
 800cb8c:	f04f 0300 	mov.w	r3, #0
 800cb90:	657b      	str	r3, [r7, #84]	; 0x54
	S4_1=S4_1 + S4_2*pos_st + (S4_3*pos_st*pos_st)/2;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7f4 f8d3 	bl	8000d44 <__aeabi_fmul>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7f3 ffc6 	bl	8000b34 <__addsf3>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	461c      	mov	r4, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7f4 f8c6 	bl	8000d44 <__aeabi_fmul>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	461a      	mov	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	f7f4 f8be 	bl	8000d44 <__aeabi_fmul>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7f4 f96c 	bl	8000eac <__aeabi_fdiv>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f7f3 ffab 	bl	8000b34 <__addsf3>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	653b      	str	r3, [r7, #80]	; 0x50
	S4_2=S4_2 + S4_3*pos_st;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7f4 f8ab 	bl	8000d44 <__aeabi_fmul>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cbf4:	f7f3 ff9e 	bl	8000b34 <__addsf3>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	64fb      	str	r3, [r7, #76]	; 0x4c
	S4_3=0;
 800cbfc:	f04f 0300 	mov.w	r3, #0
 800cc00:	64bb      	str	r3, [r7, #72]	; 0x48
	S4_4=S4_4 + sb;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cc0c:	f7f3 ff92 	bl	8000b34 <__addsf3>
 800cc10:	4603      	mov	r3, r0
 800cc12:	647b      	str	r3, [r7, #68]	; 0x44

	float A = (Qap*Qgps*Qgps_v + Qap*Qgps*S2_2 + Qap*Qgps_v*S1_1 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qap*S1_1*S2_2 - Qap*S1_2*S2_1 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1 + S1_1*S2_2*S3_3 - S1_1*S2_3*S3_2 - S1_2*S2_1*S3_3 + S1_2*S2_3*S3_1 + S1_3*S2_1*S3_2 - S1_3*S2_2*S3_1 + S1_1*S2_2*S3_4 - S1_1*S2_4*S3_2 - S1_2*S2_1*S3_4 + S1_2*S2_4*S3_1 + S1_4*S2_1*S3_2 - S1_4*S2_2*S3_1 + S1_1*S2_2*S4_3 - S1_1*S2_3*S4_2 - S1_2*S2_1*S4_3 + S1_2*S2_3*S4_1 + S1_3*S2_1*S4_2 - S1_3*S2_2*S4_1 + S1_1*S2_2*S4_4 - S1_1*S2_4*S4_2 - S1_2*S2_1*S4_4 + S1_2*S2_4*S4_1 + S1_4*S2_1*S4_2 - S1_4*S2_2*S4_1);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cc20:	4619      	mov	r1, r3
 800cc22:	4610      	mov	r0, r2
 800cc24:	f7f4 f88e 	bl	8000d44 <__aeabi_fmul>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	4619      	mov	r1, r3
 800cc32:	4610      	mov	r0, r2
 800cc34:	f7f4 f886 	bl	8000d44 <__aeabi_fmul>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	461c      	mov	r4, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cc48:	4619      	mov	r1, r3
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	f7f4 f87a 	bl	8000d44 <__aeabi_fmul>
 800cc50:	4603      	mov	r3, r0
 800cc52:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7f4 f875 	bl	8000d44 <__aeabi_fmul>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f7f3 ff68 	bl	8000b34 <__addsf3>
 800cc64:	4603      	mov	r3, r0
 800cc66:	461c      	mov	r4, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	4619      	mov	r1, r3
 800cc74:	4610      	mov	r0, r2
 800cc76:	f7f4 f865 	bl	8000d44 <__aeabi_fmul>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7f4 f85f 	bl	8000d44 <__aeabi_fmul>
 800cc86:	4603      	mov	r3, r0
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7f3 ff52 	bl	8000b34 <__addsf3>
 800cc90:	4603      	mov	r3, r0
 800cc92:	461c      	mov	r4, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f7f4 f84f 	bl	8000d44 <__aeabi_fmul>
 800cca6:	4603      	mov	r3, r0
 800cca8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7f4 f84a 	bl	8000d44 <__aeabi_fmul>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f7f3 ff3d 	bl	8000b34 <__addsf3>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	461c      	mov	r4, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4610      	mov	r0, r2
 800cccc:	f7f4 f83a 	bl	8000d44 <__aeabi_fmul>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7f4 f835 	bl	8000d44 <__aeabi_fmul>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	4619      	mov	r1, r3
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7f3 ff28 	bl	8000b34 <__addsf3>
 800cce4:	4603      	mov	r3, r0
 800cce6:	461c      	mov	r4, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	f7f4 f825 	bl	8000d44 <__aeabi_fmul>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f4 f820 	bl	8000d44 <__aeabi_fmul>
 800cd04:	4603      	mov	r3, r0
 800cd06:	4619      	mov	r1, r3
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f7f3 ff13 	bl	8000b34 <__addsf3>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	461c      	mov	r4, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	4610      	mov	r0, r2
 800cd20:	f7f4 f810 	bl	8000d44 <__aeabi_fmul>
 800cd24:	4603      	mov	r3, r0
 800cd26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f4 f80b 	bl	8000d44 <__aeabi_fmul>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	4619      	mov	r1, r3
 800cd32:	4620      	mov	r0, r4
 800cd34:	f7f3 fefe 	bl	8000b34 <__addsf3>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	461c      	mov	r4, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800cd42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f3 fffc 	bl	8000d44 <__aeabi_fmul>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7f3 fff7 	bl	8000d44 <__aeabi_fmul>
 800cd56:	4603      	mov	r3, r0
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7f3 feea 	bl	8000b34 <__addsf3>
 800cd60:	4603      	mov	r3, r0
 800cd62:	461c      	mov	r4, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800cd6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7f3 ffe9 	bl	8000d44 <__aeabi_fmul>
 800cd72:	4603      	mov	r3, r0
 800cd74:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7f3 ffe4 	bl	8000d44 <__aeabi_fmul>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	4619      	mov	r1, r3
 800cd80:	4620      	mov	r0, r4
 800cd82:	f7f3 fed5 	bl	8000b30 <__aeabi_fsub>
 800cd86:	4603      	mov	r3, r0
 800cd88:	461c      	mov	r4, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7f3 ffd6 	bl	8000d44 <__aeabi_fmul>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f3 ffd1 	bl	8000d44 <__aeabi_fmul>
 800cda2:	4603      	mov	r3, r0
 800cda4:	4619      	mov	r1, r3
 800cda6:	4620      	mov	r0, r4
 800cda8:	f7f3 fec4 	bl	8000b34 <__addsf3>
 800cdac:	4603      	mov	r3, r0
 800cdae:	461c      	mov	r4, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cdb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7f3 ffc3 	bl	8000d44 <__aeabi_fmul>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7f3 ffbe 	bl	8000d44 <__aeabi_fmul>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	4619      	mov	r1, r3
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f7f3 feaf 	bl	8000b30 <__aeabi_fsub>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	461c      	mov	r4, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cddc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f3 ffb0 	bl	8000d44 <__aeabi_fmul>
 800cde4:	4603      	mov	r3, r0
 800cde6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7f3 ffab 	bl	8000d44 <__aeabi_fmul>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f7f3 fe9e 	bl	8000b34 <__addsf3>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	461c      	mov	r4, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce02:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f3 ff9d 	bl	8000d44 <__aeabi_fmul>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f3 ff98 	bl	8000d44 <__aeabi_fmul>
 800ce14:	4603      	mov	r3, r0
 800ce16:	4619      	mov	r1, r3
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f7f3 fe89 	bl	8000b30 <__aeabi_fsub>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	461c      	mov	r4, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7f3 ff8a 	bl	8000d44 <__aeabi_fmul>
 800ce30:	4603      	mov	r3, r0
 800ce32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7f3 ff85 	bl	8000d44 <__aeabi_fmul>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f7f3 fe78 	bl	8000b34 <__addsf3>
 800ce44:	4603      	mov	r3, r0
 800ce46:	461c      	mov	r4, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7f3 ff77 	bl	8000d44 <__aeabi_fmul>
 800ce56:	4603      	mov	r3, r0
 800ce58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7f3 ff72 	bl	8000d44 <__aeabi_fmul>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4619      	mov	r1, r3
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7f3 fe63 	bl	8000b30 <__aeabi_fsub>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	461c      	mov	r4, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce74:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f3 ff64 	bl	8000d44 <__aeabi_fmul>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7f3 ff5f 	bl	8000d44 <__aeabi_fmul>
 800ce86:	4603      	mov	r3, r0
 800ce88:	4619      	mov	r1, r3
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f7f3 fe52 	bl	8000b34 <__addsf3>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461c      	mov	r4, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f3 ff51 	bl	8000d44 <__aeabi_fmul>
 800cea2:	4603      	mov	r3, r0
 800cea4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f3 ff4c 	bl	8000d44 <__aeabi_fmul>
 800ceac:	4603      	mov	r3, r0
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f7f3 fe3d 	bl	8000b30 <__aeabi_fsub>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	461c      	mov	r4, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7f3 ff3e 	bl	8000d44 <__aeabi_fmul>
 800cec8:	4603      	mov	r3, r0
 800ceca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cecc:	4618      	mov	r0, r3
 800cece:	f7f3 ff39 	bl	8000d44 <__aeabi_fmul>
 800ced2:	4603      	mov	r3, r0
 800ced4:	4619      	mov	r1, r3
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7f3 fe2c 	bl	8000b34 <__addsf3>
 800cedc:	4603      	mov	r3, r0
 800cede:	461c      	mov	r4, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7f3 ff2c 	bl	8000d44 <__aeabi_fmul>
 800ceec:	4603      	mov	r3, r0
 800ceee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7f3 ff27 	bl	8000d44 <__aeabi_fmul>
 800cef6:	4603      	mov	r3, r0
 800cef8:	4619      	mov	r1, r3
 800cefa:	4620      	mov	r0, r4
 800cefc:	f7f3 fe18 	bl	8000b30 <__aeabi_fsub>
 800cf00:	4603      	mov	r3, r0
 800cf02:	461c      	mov	r4, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7f3 ff19 	bl	8000d44 <__aeabi_fmul>
 800cf12:	4603      	mov	r3, r0
 800cf14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f3 ff14 	bl	8000d44 <__aeabi_fmul>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4620      	mov	r0, r4
 800cf22:	f7f3 fe07 	bl	8000b34 <__addsf3>
 800cf26:	4603      	mov	r3, r0
 800cf28:	461c      	mov	r4, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7f3 ff07 	bl	8000d44 <__aeabi_fmul>
 800cf36:	4603      	mov	r3, r0
 800cf38:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f3 ff02 	bl	8000d44 <__aeabi_fmul>
 800cf40:	4603      	mov	r3, r0
 800cf42:	4619      	mov	r1, r3
 800cf44:	4620      	mov	r0, r4
 800cf46:	f7f3 fdf3 	bl	8000b30 <__aeabi_fsub>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	461c      	mov	r4, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7f3 fef4 	bl	8000d44 <__aeabi_fmul>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7f3 feef 	bl	8000d44 <__aeabi_fmul>
 800cf66:	4603      	mov	r3, r0
 800cf68:	4619      	mov	r1, r3
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f7f3 fde2 	bl	8000b34 <__addsf3>
 800cf70:	4603      	mov	r3, r0
 800cf72:	461c      	mov	r4, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7f3 fee2 	bl	8000d44 <__aeabi_fmul>
 800cf80:	4603      	mov	r3, r0
 800cf82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7f3 fedd 	bl	8000d44 <__aeabi_fmul>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7f3 fdce 	bl	8000b30 <__aeabi_fsub>
 800cf94:	4603      	mov	r3, r0
 800cf96:	461c      	mov	r4, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7f3 fecf 	bl	8000d44 <__aeabi_fmul>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7f3 feca 	bl	8000d44 <__aeabi_fmul>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f7f3 fdbd 	bl	8000b34 <__addsf3>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	461c      	mov	r4, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7f3 febd 	bl	8000d44 <__aeabi_fmul>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7f3 feb8 	bl	8000d44 <__aeabi_fmul>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f7f3 fda9 	bl	8000b30 <__aeabi_fsub>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	461c      	mov	r4, r3
 800cfe2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cfe4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cfe8:	f7f3 feac 	bl	8000d44 <__aeabi_fmul>
 800cfec:	4603      	mov	r3, r0
 800cfee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7f3 fea7 	bl	8000d44 <__aeabi_fmul>
 800cff6:	4603      	mov	r3, r0
 800cff8:	4619      	mov	r1, r3
 800cffa:	4620      	mov	r0, r4
 800cffc:	f7f3 fd9a 	bl	8000b34 <__addsf3>
 800d000:	4603      	mov	r3, r0
 800d002:	461c      	mov	r4, r3
 800d004:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d006:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d00a:	f7f3 fe9b 	bl	8000d44 <__aeabi_fmul>
 800d00e:	4603      	mov	r3, r0
 800d010:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d012:	4618      	mov	r0, r3
 800d014:	f7f3 fe96 	bl	8000d44 <__aeabi_fmul>
 800d018:	4603      	mov	r3, r0
 800d01a:	4619      	mov	r1, r3
 800d01c:	4620      	mov	r0, r4
 800d01e:	f7f3 fd87 	bl	8000b30 <__aeabi_fsub>
 800d022:	4603      	mov	r3, r0
 800d024:	461c      	mov	r4, r3
 800d026:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d028:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d02a:	f7f3 fe8b 	bl	8000d44 <__aeabi_fmul>
 800d02e:	4603      	mov	r3, r0
 800d030:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d032:	4618      	mov	r0, r3
 800d034:	f7f3 fe86 	bl	8000d44 <__aeabi_fmul>
 800d038:	4603      	mov	r3, r0
 800d03a:	4619      	mov	r1, r3
 800d03c:	4620      	mov	r0, r4
 800d03e:	f7f3 fd77 	bl	8000b30 <__aeabi_fsub>
 800d042:	4603      	mov	r3, r0
 800d044:	461c      	mov	r4, r3
 800d046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d048:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d04a:	f7f3 fe7b 	bl	8000d44 <__aeabi_fmul>
 800d04e:	4603      	mov	r3, r0
 800d050:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d052:	4618      	mov	r0, r3
 800d054:	f7f3 fe76 	bl	8000d44 <__aeabi_fmul>
 800d058:	4603      	mov	r3, r0
 800d05a:	4619      	mov	r1, r3
 800d05c:	4620      	mov	r0, r4
 800d05e:	f7f3 fd69 	bl	8000b34 <__addsf3>
 800d062:	4603      	mov	r3, r0
 800d064:	461c      	mov	r4, r3
 800d066:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d068:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d06a:	f7f3 fe6b 	bl	8000d44 <__aeabi_fmul>
 800d06e:	4603      	mov	r3, r0
 800d070:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d072:	4618      	mov	r0, r3
 800d074:	f7f3 fe66 	bl	8000d44 <__aeabi_fmul>
 800d078:	4603      	mov	r3, r0
 800d07a:	4619      	mov	r1, r3
 800d07c:	4620      	mov	r0, r4
 800d07e:	f7f3 fd59 	bl	8000b34 <__addsf3>
 800d082:	4603      	mov	r3, r0
 800d084:	461c      	mov	r4, r3
 800d086:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d088:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d08a:	f7f3 fe5b 	bl	8000d44 <__aeabi_fmul>
 800d08e:	4603      	mov	r3, r0
 800d090:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d092:	4618      	mov	r0, r3
 800d094:	f7f3 fe56 	bl	8000d44 <__aeabi_fmul>
 800d098:	4603      	mov	r3, r0
 800d09a:	4619      	mov	r1, r3
 800d09c:	4620      	mov	r0, r4
 800d09e:	f7f3 fd47 	bl	8000b30 <__aeabi_fsub>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	461c      	mov	r4, r3
 800d0a6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d0a8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d0ac:	f7f3 fe4a 	bl	8000d44 <__aeabi_fmul>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7f3 fe45 	bl	8000d44 <__aeabi_fmul>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	4619      	mov	r1, r3
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f7f3 fd38 	bl	8000b34 <__addsf3>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	461c      	mov	r4, r3
 800d0c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d0ca:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d0ce:	f7f3 fe39 	bl	8000d44 <__aeabi_fmul>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7f3 fe34 	bl	8000d44 <__aeabi_fmul>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	4619      	mov	r1, r3
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f7f3 fd25 	bl	8000b30 <__aeabi_fsub>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	461c      	mov	r4, r3
 800d0ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d0ec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d0ee:	f7f3 fe29 	bl	8000d44 <__aeabi_fmul>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f3 fe24 	bl	8000d44 <__aeabi_fmul>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	4619      	mov	r1, r3
 800d100:	4620      	mov	r0, r4
 800d102:	f7f3 fd15 	bl	8000b30 <__aeabi_fsub>
 800d106:	4603      	mov	r3, r0
 800d108:	461c      	mov	r4, r3
 800d10a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d10c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d10e:	f7f3 fe19 	bl	8000d44 <__aeabi_fmul>
 800d112:	4603      	mov	r3, r0
 800d114:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d116:	4618      	mov	r0, r3
 800d118:	f7f3 fe14 	bl	8000d44 <__aeabi_fmul>
 800d11c:	4603      	mov	r3, r0
 800d11e:	4619      	mov	r1, r3
 800d120:	4620      	mov	r0, r4
 800d122:	f7f3 fd07 	bl	8000b34 <__addsf3>
 800d126:	4603      	mov	r3, r0
 800d128:	461c      	mov	r4, r3
 800d12a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d12c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d12e:	f7f3 fe09 	bl	8000d44 <__aeabi_fmul>
 800d132:	4603      	mov	r3, r0
 800d134:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d136:	4618      	mov	r0, r3
 800d138:	f7f3 fe04 	bl	8000d44 <__aeabi_fmul>
 800d13c:	4603      	mov	r3, r0
 800d13e:	4619      	mov	r1, r3
 800d140:	4620      	mov	r0, r4
 800d142:	f7f3 fcf7 	bl	8000b34 <__addsf3>
 800d146:	4603      	mov	r3, r0
 800d148:	461c      	mov	r4, r3
 800d14a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d14c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d14e:	f7f3 fdf9 	bl	8000d44 <__aeabi_fmul>
 800d152:	4603      	mov	r3, r0
 800d154:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d156:	4618      	mov	r0, r3
 800d158:	f7f3 fdf4 	bl	8000d44 <__aeabi_fmul>
 800d15c:	4603      	mov	r3, r0
 800d15e:	4619      	mov	r1, r3
 800d160:	4620      	mov	r0, r4
 800d162:	f7f3 fce5 	bl	8000b30 <__aeabi_fsub>
 800d166:	4603      	mov	r3, r0
 800d168:	461c      	mov	r4, r3
 800d16a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d16c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d170:	f7f3 fde8 	bl	8000d44 <__aeabi_fmul>
 800d174:	4603      	mov	r3, r0
 800d176:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d178:	4618      	mov	r0, r3
 800d17a:	f7f3 fde3 	bl	8000d44 <__aeabi_fmul>
 800d17e:	4603      	mov	r3, r0
 800d180:	4619      	mov	r1, r3
 800d182:	4620      	mov	r0, r4
 800d184:	f7f3 fcd6 	bl	8000b34 <__addsf3>
 800d188:	4603      	mov	r3, r0
 800d18a:	461c      	mov	r4, r3
 800d18c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d18e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d192:	f7f3 fdd7 	bl	8000d44 <__aeabi_fmul>
 800d196:	4603      	mov	r3, r0
 800d198:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7f3 fdd2 	bl	8000d44 <__aeabi_fmul>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f7f3 fcc3 	bl	8000b30 <__aeabi_fsub>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	461c      	mov	r4, r3
 800d1ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d1b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d1b2:	f7f3 fdc7 	bl	8000d44 <__aeabi_fmul>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7f3 fdc2 	bl	8000d44 <__aeabi_fmul>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f7f3 fcb3 	bl	8000b30 <__aeabi_fsub>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	461c      	mov	r4, r3
 800d1ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d1d0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d1d2:	f7f3 fdb7 	bl	8000d44 <__aeabi_fmul>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f3 fdb2 	bl	8000d44 <__aeabi_fmul>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7f3 fca5 	bl	8000b34 <__addsf3>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	461c      	mov	r4, r3
 800d1ee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d1f0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d1f2:	f7f3 fda7 	bl	8000d44 <__aeabi_fmul>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7f3 fda2 	bl	8000d44 <__aeabi_fmul>
 800d200:	4603      	mov	r3, r0
 800d202:	4619      	mov	r1, r3
 800d204:	4620      	mov	r0, r4
 800d206:	f7f3 fc95 	bl	8000b34 <__addsf3>
 800d20a:	4603      	mov	r3, r0
 800d20c:	461c      	mov	r4, r3
 800d20e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d210:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d212:	f7f3 fd97 	bl	8000d44 <__aeabi_fmul>
 800d216:	4603      	mov	r3, r0
 800d218:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7f3 fd92 	bl	8000d44 <__aeabi_fmul>
 800d220:	4603      	mov	r3, r0
 800d222:	4619      	mov	r1, r3
 800d224:	4620      	mov	r0, r4
 800d226:	f7f3 fc83 	bl	8000b30 <__aeabi_fsub>
 800d22a:	4603      	mov	r3, r0
 800d22c:	461c      	mov	r4, r3
 800d22e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d230:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d234:	f7f3 fd86 	bl	8000d44 <__aeabi_fmul>
 800d238:	4603      	mov	r3, r0
 800d23a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7f3 fd81 	bl	8000d44 <__aeabi_fmul>
 800d242:	4603      	mov	r3, r0
 800d244:	4619      	mov	r1, r3
 800d246:	4620      	mov	r0, r4
 800d248:	f7f3 fc74 	bl	8000b34 <__addsf3>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461c      	mov	r4, r3
 800d250:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d252:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d256:	f7f3 fd75 	bl	8000d44 <__aeabi_fmul>
 800d25a:	4603      	mov	r3, r0
 800d25c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d25e:	4618      	mov	r0, r3
 800d260:	f7f3 fd70 	bl	8000d44 <__aeabi_fmul>
 800d264:	4603      	mov	r3, r0
 800d266:	4619      	mov	r1, r3
 800d268:	4620      	mov	r0, r4
 800d26a:	f7f3 fc61 	bl	8000b30 <__aeabi_fsub>
 800d26e:	4603      	mov	r3, r0
 800d270:	461c      	mov	r4, r3
 800d272:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d274:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d276:	f7f3 fd65 	bl	8000d44 <__aeabi_fmul>
 800d27a:	4603      	mov	r3, r0
 800d27c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f3 fd60 	bl	8000d44 <__aeabi_fmul>
 800d284:	4603      	mov	r3, r0
 800d286:	4619      	mov	r1, r3
 800d288:	4620      	mov	r0, r4
 800d28a:	f7f3 fc51 	bl	8000b30 <__aeabi_fsub>
 800d28e:	4603      	mov	r3, r0
 800d290:	461c      	mov	r4, r3
 800d292:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d294:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d296:	f7f3 fd55 	bl	8000d44 <__aeabi_fmul>
 800d29a:	4603      	mov	r3, r0
 800d29c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f3 fd50 	bl	8000d44 <__aeabi_fmul>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7f3 fc43 	bl	8000b34 <__addsf3>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	461c      	mov	r4, r3
 800d2b2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d2b4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d2b6:	f7f3 fd45 	bl	8000d44 <__aeabi_fmul>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7f3 fd40 	bl	8000d44 <__aeabi_fmul>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f7f3 fc33 	bl	8000b34 <__addsf3>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	461c      	mov	r4, r3
 800d2d2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d2d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d2d6:	f7f3 fd35 	bl	8000d44 <__aeabi_fmul>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7f3 fd30 	bl	8000d44 <__aeabi_fmul>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f7f3 fc21 	bl	8000b30 <__aeabi_fsub>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	63bb      	str	r3, [r7, #56]	; 0x38
	float Kt11=1 - (Qap*Qgps*Qgps_v + Qap*Qgps*S2_2 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2)/A;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d2fe:	4619      	mov	r1, r3
 800d300:	4610      	mov	r0, r2
 800d302:	f7f3 fd1f 	bl	8000d44 <__aeabi_fmul>
 800d306:	4603      	mov	r3, r0
 800d308:	461a      	mov	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	4619      	mov	r1, r3
 800d310:	4610      	mov	r0, r2
 800d312:	f7f3 fd17 	bl	8000d44 <__aeabi_fmul>
 800d316:	4603      	mov	r3, r0
 800d318:	461c      	mov	r4, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d326:	4619      	mov	r1, r3
 800d328:	4610      	mov	r0, r2
 800d32a:	f7f3 fd0b 	bl	8000d44 <__aeabi_fmul>
 800d32e:	4603      	mov	r3, r0
 800d330:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d332:	4618      	mov	r0, r3
 800d334:	f7f3 fd06 	bl	8000d44 <__aeabi_fmul>
 800d338:	4603      	mov	r3, r0
 800d33a:	4619      	mov	r1, r3
 800d33c:	4620      	mov	r0, r4
 800d33e:	f7f3 fbf9 	bl	8000b34 <__addsf3>
 800d342:	4603      	mov	r3, r0
 800d344:	461c      	mov	r4, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	4619      	mov	r1, r3
 800d352:	4610      	mov	r0, r2
 800d354:	f7f3 fcf6 	bl	8000d44 <__aeabi_fmul>
 800d358:	4603      	mov	r3, r0
 800d35a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7f3 fcf1 	bl	8000d44 <__aeabi_fmul>
 800d362:	4603      	mov	r3, r0
 800d364:	4619      	mov	r1, r3
 800d366:	4620      	mov	r0, r4
 800d368:	f7f3 fbe4 	bl	8000b34 <__addsf3>
 800d36c:	4603      	mov	r3, r0
 800d36e:	461c      	mov	r4, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	4619      	mov	r1, r3
 800d37c:	4610      	mov	r0, r2
 800d37e:	f7f3 fce1 	bl	8000d44 <__aeabi_fmul>
 800d382:	4603      	mov	r3, r0
 800d384:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d386:	4618      	mov	r0, r3
 800d388:	f7f3 fcdc 	bl	8000d44 <__aeabi_fmul>
 800d38c:	4603      	mov	r3, r0
 800d38e:	4619      	mov	r1, r3
 800d390:	4620      	mov	r0, r4
 800d392:	f7f3 fbcf 	bl	8000b34 <__addsf3>
 800d396:	4603      	mov	r3, r0
 800d398:	461c      	mov	r4, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	f7f3 fccc 	bl	8000d44 <__aeabi_fmul>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7f3 fcc7 	bl	8000d44 <__aeabi_fmul>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f7f3 fbba 	bl	8000b34 <__addsf3>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	461c      	mov	r4, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	f7f3 fcb7 	bl	8000d44 <__aeabi_fmul>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7f3 fcb2 	bl	8000d44 <__aeabi_fmul>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f7f3 fba5 	bl	8000b34 <__addsf3>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	461c      	mov	r4, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d3f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7f3 fca4 	bl	8000d44 <__aeabi_fmul>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d400:	4618      	mov	r0, r3
 800d402:	f7f3 fc9f 	bl	8000d44 <__aeabi_fmul>
 800d406:	4603      	mov	r3, r0
 800d408:	4619      	mov	r1, r3
 800d40a:	4620      	mov	r0, r4
 800d40c:	f7f3 fb92 	bl	8000b34 <__addsf3>
 800d410:	4603      	mov	r3, r0
 800d412:	461c      	mov	r4, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d41a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7f3 fc91 	bl	8000d44 <__aeabi_fmul>
 800d422:	4603      	mov	r3, r0
 800d424:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d426:	4618      	mov	r0, r3
 800d428:	f7f3 fc8c 	bl	8000d44 <__aeabi_fmul>
 800d42c:	4603      	mov	r3, r0
 800d42e:	4619      	mov	r1, r3
 800d430:	4620      	mov	r0, r4
 800d432:	f7f3 fb7d 	bl	8000b30 <__aeabi_fsub>
 800d436:	4603      	mov	r3, r0
 800d438:	461c      	mov	r4, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d440:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d442:	4618      	mov	r0, r3
 800d444:	f7f3 fc7e 	bl	8000d44 <__aeabi_fmul>
 800d448:	4603      	mov	r3, r0
 800d44a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7f3 fc79 	bl	8000d44 <__aeabi_fmul>
 800d452:	4603      	mov	r3, r0
 800d454:	4619      	mov	r1, r3
 800d456:	4620      	mov	r0, r4
 800d458:	f7f3 fb6c 	bl	8000b34 <__addsf3>
 800d45c:	4603      	mov	r3, r0
 800d45e:	461c      	mov	r4, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d466:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d468:	4618      	mov	r0, r3
 800d46a:	f7f3 fc6b 	bl	8000d44 <__aeabi_fmul>
 800d46e:	4603      	mov	r3, r0
 800d470:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d472:	4618      	mov	r0, r3
 800d474:	f7f3 fc66 	bl	8000d44 <__aeabi_fmul>
 800d478:	4603      	mov	r3, r0
 800d47a:	4619      	mov	r1, r3
 800d47c:	4620      	mov	r0, r4
 800d47e:	f7f3 fb57 	bl	8000b30 <__aeabi_fsub>
 800d482:	4603      	mov	r3, r0
 800d484:	461c      	mov	r4, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d48c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f3 fc58 	bl	8000d44 <__aeabi_fmul>
 800d494:	4603      	mov	r3, r0
 800d496:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d498:	4618      	mov	r0, r3
 800d49a:	f7f3 fc53 	bl	8000d44 <__aeabi_fmul>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f7f3 fb46 	bl	8000b34 <__addsf3>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	461c      	mov	r4, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d4b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7f3 fc45 	bl	8000d44 <__aeabi_fmul>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7f3 fc40 	bl	8000d44 <__aeabi_fmul>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f7f3 fb31 	bl	8000b30 <__aeabi_fsub>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	461c      	mov	r4, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d4d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7f3 fc32 	bl	8000d44 <__aeabi_fmul>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7f3 fc2d 	bl	8000d44 <__aeabi_fmul>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f7f3 fb20 	bl	8000b34 <__addsf3>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	461c      	mov	r4, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d4fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d500:	4618      	mov	r0, r3
 800d502:	f7f3 fc1f 	bl	8000d44 <__aeabi_fmul>
 800d506:	4603      	mov	r3, r0
 800d508:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7f3 fc1a 	bl	8000d44 <__aeabi_fmul>
 800d510:	4603      	mov	r3, r0
 800d512:	4619      	mov	r1, r3
 800d514:	4620      	mov	r0, r4
 800d516:	f7f3 fb0b 	bl	8000b30 <__aeabi_fsub>
 800d51a:	4603      	mov	r3, r0
 800d51c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f3 fcc4 	bl	8000eac <__aeabi_fdiv>
 800d524:	4603      	mov	r3, r0
 800d526:	4619      	mov	r1, r3
 800d528:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d52c:	f7f3 fb00 	bl	8000b30 <__aeabi_fsub>
 800d530:	4603      	mov	r3, r0
 800d532:	637b      	str	r3, [r7, #52]	; 0x34
	float Kt12=(Qgps*(Qgps_v*S1_3 + Qgps_v*S1_4 - S1_2*S2_3 + S1_3*S2_2 - S1_2*S2_4 + S1_4*S2_2))/A;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d540:	4618      	mov	r0, r3
 800d542:	f7f3 fbff 	bl	8000d44 <__aeabi_fmul>
 800d546:	4603      	mov	r3, r0
 800d548:	461d      	mov	r5, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d550:	4618      	mov	r0, r3
 800d552:	f7f3 fbf7 	bl	8000d44 <__aeabi_fmul>
 800d556:	4603      	mov	r3, r0
 800d558:	4619      	mov	r1, r3
 800d55a:	4628      	mov	r0, r5
 800d55c:	f7f3 faea 	bl	8000b34 <__addsf3>
 800d560:	4603      	mov	r3, r0
 800d562:	461d      	mov	r5, r3
 800d564:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d566:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d568:	f7f3 fbec 	bl	8000d44 <__aeabi_fmul>
 800d56c:	4603      	mov	r3, r0
 800d56e:	4619      	mov	r1, r3
 800d570:	4628      	mov	r0, r5
 800d572:	f7f3 fadd 	bl	8000b30 <__aeabi_fsub>
 800d576:	4603      	mov	r3, r0
 800d578:	461d      	mov	r5, r3
 800d57a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d57c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d57e:	f7f3 fbe1 	bl	8000d44 <__aeabi_fmul>
 800d582:	4603      	mov	r3, r0
 800d584:	4619      	mov	r1, r3
 800d586:	4628      	mov	r0, r5
 800d588:	f7f3 fad4 	bl	8000b34 <__addsf3>
 800d58c:	4603      	mov	r3, r0
 800d58e:	461d      	mov	r5, r3
 800d590:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d592:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d594:	f7f3 fbd6 	bl	8000d44 <__aeabi_fmul>
 800d598:	4603      	mov	r3, r0
 800d59a:	4619      	mov	r1, r3
 800d59c:	4628      	mov	r0, r5
 800d59e:	f7f3 fac7 	bl	8000b30 <__aeabi_fsub>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	461d      	mov	r5, r3
 800d5a6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d5a8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d5aa:	f7f3 fbcb 	bl	8000d44 <__aeabi_fmul>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	f7f3 fabe 	bl	8000b34 <__addsf3>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f7f3 fbc1 	bl	8000d44 <__aeabi_fmul>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f3 fc70 	bl	8000eac <__aeabi_fdiv>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	633b      	str	r3, [r7, #48]	; 0x30
	float Kt13=(Qgps*(Qap*S1_2 + S1_2*S3_3 - S1_3*S3_2 + S1_2*S3_4 - S1_4*S3_2 + S1_2*S4_3 - S1_3*S4_2 + S1_2*S4_4 - S1_4*S4_2))/A;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d5dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7f3 fbb0 	bl	8000d44 <__aeabi_fmul>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	461d      	mov	r5, r3
 800d5e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d5ec:	f7f3 fbaa 	bl	8000d44 <__aeabi_fmul>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f7f3 fa9d 	bl	8000b34 <__addsf3>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	461d      	mov	r5, r3
 800d5fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d600:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d602:	f7f3 fb9f 	bl	8000d44 <__aeabi_fmul>
 800d606:	4603      	mov	r3, r0
 800d608:	4619      	mov	r1, r3
 800d60a:	4628      	mov	r0, r5
 800d60c:	f7f3 fa90 	bl	8000b30 <__aeabi_fsub>
 800d610:	4603      	mov	r3, r0
 800d612:	461d      	mov	r5, r3
 800d614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d616:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d618:	f7f3 fb94 	bl	8000d44 <__aeabi_fmul>
 800d61c:	4603      	mov	r3, r0
 800d61e:	4619      	mov	r1, r3
 800d620:	4628      	mov	r0, r5
 800d622:	f7f3 fa87 	bl	8000b34 <__addsf3>
 800d626:	4603      	mov	r3, r0
 800d628:	461d      	mov	r5, r3
 800d62a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d62c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d62e:	f7f3 fb89 	bl	8000d44 <__aeabi_fmul>
 800d632:	4603      	mov	r3, r0
 800d634:	4619      	mov	r1, r3
 800d636:	4628      	mov	r0, r5
 800d638:	f7f3 fa7a 	bl	8000b30 <__aeabi_fsub>
 800d63c:	4603      	mov	r3, r0
 800d63e:	461d      	mov	r5, r3
 800d640:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d642:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d644:	f7f3 fb7e 	bl	8000d44 <__aeabi_fmul>
 800d648:	4603      	mov	r3, r0
 800d64a:	4619      	mov	r1, r3
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7f3 fa71 	bl	8000b34 <__addsf3>
 800d652:	4603      	mov	r3, r0
 800d654:	461d      	mov	r5, r3
 800d656:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d658:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d65a:	f7f3 fb73 	bl	8000d44 <__aeabi_fmul>
 800d65e:	4603      	mov	r3, r0
 800d660:	4619      	mov	r1, r3
 800d662:	4628      	mov	r0, r5
 800d664:	f7f3 fa64 	bl	8000b30 <__aeabi_fsub>
 800d668:	4603      	mov	r3, r0
 800d66a:	461d      	mov	r5, r3
 800d66c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d66e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d670:	f7f3 fb68 	bl	8000d44 <__aeabi_fmul>
 800d674:	4603      	mov	r3, r0
 800d676:	4619      	mov	r1, r3
 800d678:	4628      	mov	r0, r5
 800d67a:	f7f3 fa5b 	bl	8000b34 <__addsf3>
 800d67e:	4603      	mov	r3, r0
 800d680:	461d      	mov	r5, r3
 800d682:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d684:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d686:	f7f3 fb5d 	bl	8000d44 <__aeabi_fmul>
 800d68a:	4603      	mov	r3, r0
 800d68c:	4619      	mov	r1, r3
 800d68e:	4628      	mov	r0, r5
 800d690:	f7f3 fa4e 	bl	8000b30 <__aeabi_fsub>
 800d694:	4603      	mov	r3, r0
 800d696:	4619      	mov	r1, r3
 800d698:	4620      	mov	r0, r4
 800d69a:	f7f3 fb53 	bl	8000d44 <__aeabi_fmul>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7f3 fc02 	bl	8000eac <__aeabi_fdiv>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Kt21=(Qgps_v*(Qap*S2_1 + S2_1*S3_3 - S2_3*S3_1 + S2_1*S3_4 - S2_4*S3_1 + S2_1*S4_3 - S2_3*S4_1 + S2_1*S4_4 - S2_4*S4_1))/A;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	68dc      	ldr	r4, [r3, #12]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d6b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7f3 fb43 	bl	8000d44 <__aeabi_fmul>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	461d      	mov	r5, r3
 800d6c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6c4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d6c6:	f7f3 fb3d 	bl	8000d44 <__aeabi_fmul>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f7f3 fa30 	bl	8000b34 <__addsf3>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	461d      	mov	r5, r3
 800d6d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d6da:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d6dc:	f7f3 fb32 	bl	8000d44 <__aeabi_fmul>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f7f3 fa23 	bl	8000b30 <__aeabi_fsub>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	461d      	mov	r5, r3
 800d6ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6f0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d6f2:	f7f3 fb27 	bl	8000d44 <__aeabi_fmul>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f7f3 fa1a 	bl	8000b34 <__addsf3>
 800d700:	4603      	mov	r3, r0
 800d702:	461d      	mov	r5, r3
 800d704:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d706:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d708:	f7f3 fb1c 	bl	8000d44 <__aeabi_fmul>
 800d70c:	4603      	mov	r3, r0
 800d70e:	4619      	mov	r1, r3
 800d710:	4628      	mov	r0, r5
 800d712:	f7f3 fa0d 	bl	8000b30 <__aeabi_fsub>
 800d716:	4603      	mov	r3, r0
 800d718:	461d      	mov	r5, r3
 800d71a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d71c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d71e:	f7f3 fb11 	bl	8000d44 <__aeabi_fmul>
 800d722:	4603      	mov	r3, r0
 800d724:	4619      	mov	r1, r3
 800d726:	4628      	mov	r0, r5
 800d728:	f7f3 fa04 	bl	8000b34 <__addsf3>
 800d72c:	4603      	mov	r3, r0
 800d72e:	461d      	mov	r5, r3
 800d730:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d732:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d734:	f7f3 fb06 	bl	8000d44 <__aeabi_fmul>
 800d738:	4603      	mov	r3, r0
 800d73a:	4619      	mov	r1, r3
 800d73c:	4628      	mov	r0, r5
 800d73e:	f7f3 f9f7 	bl	8000b30 <__aeabi_fsub>
 800d742:	4603      	mov	r3, r0
 800d744:	461d      	mov	r5, r3
 800d746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d748:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d74a:	f7f3 fafb 	bl	8000d44 <__aeabi_fmul>
 800d74e:	4603      	mov	r3, r0
 800d750:	4619      	mov	r1, r3
 800d752:	4628      	mov	r0, r5
 800d754:	f7f3 f9ee 	bl	8000b34 <__addsf3>
 800d758:	4603      	mov	r3, r0
 800d75a:	461d      	mov	r5, r3
 800d75c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d75e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d760:	f7f3 faf0 	bl	8000d44 <__aeabi_fmul>
 800d764:	4603      	mov	r3, r0
 800d766:	4619      	mov	r1, r3
 800d768:	4628      	mov	r0, r5
 800d76a:	f7f3 f9e1 	bl	8000b30 <__aeabi_fsub>
 800d76e:	4603      	mov	r3, r0
 800d770:	4619      	mov	r1, r3
 800d772:	4620      	mov	r0, r4
 800d774:	f7f3 fae6 	bl	8000d44 <__aeabi_fmul>
 800d778:	4603      	mov	r3, r0
 800d77a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7f3 fb95 	bl	8000eac <__aeabi_fdiv>
 800d782:	4603      	mov	r3, r0
 800d784:	62bb      	str	r3, [r7, #40]	; 0x28
	float Kt22=(Qgps_v*(Qgps*S2_3 + Qgps*S2_4 + S1_1*S2_3 - S1_3*S2_1 + S1_1*S2_4 - S1_4*S2_1))/A;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68dc      	ldr	r4, [r3, #12]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d790:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d792:	4618      	mov	r0, r3
 800d794:	f7f3 fad6 	bl	8000d44 <__aeabi_fmul>
 800d798:	4603      	mov	r3, r0
 800d79a:	461d      	mov	r5, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d7a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7f3 facd 	bl	8000d44 <__aeabi_fmul>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f7f3 f9c0 	bl	8000b34 <__addsf3>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	461d      	mov	r5, r3
 800d7b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d7ba:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d7be:	f7f3 fac1 	bl	8000d44 <__aeabi_fmul>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f7f3 f9b4 	bl	8000b34 <__addsf3>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	461d      	mov	r5, r3
 800d7d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d7d2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d7d4:	f7f3 fab6 	bl	8000d44 <__aeabi_fmul>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f7f3 f9a7 	bl	8000b30 <__aeabi_fsub>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	461d      	mov	r5, r3
 800d7e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d7e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d7ec:	f7f3 faaa 	bl	8000d44 <__aeabi_fmul>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f7f3 f99d 	bl	8000b34 <__addsf3>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	461d      	mov	r5, r3
 800d7fe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d800:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d802:	f7f3 fa9f 	bl	8000d44 <__aeabi_fmul>
 800d806:	4603      	mov	r3, r0
 800d808:	4619      	mov	r1, r3
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7f3 f990 	bl	8000b30 <__aeabi_fsub>
 800d810:	4603      	mov	r3, r0
 800d812:	4619      	mov	r1, r3
 800d814:	4620      	mov	r0, r4
 800d816:	f7f3 fa95 	bl	8000d44 <__aeabi_fmul>
 800d81a:	4603      	mov	r3, r0
 800d81c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d81e:	4618      	mov	r0, r3
 800d820:	f7f3 fb44 	bl	8000eac <__aeabi_fdiv>
 800d824:	4603      	mov	r3, r0
 800d826:	627b      	str	r3, [r7, #36]	; 0x24
	float Kt23=1 - (Qap*Qgps*Qgps_v + Qap*Qgps_v*S1_1 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1)/A;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d834:	4619      	mov	r1, r3
 800d836:	4610      	mov	r0, r2
 800d838:	f7f3 fa84 	bl	8000d44 <__aeabi_fmul>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f7f3 fa7c 	bl	8000d44 <__aeabi_fmul>
 800d84c:	4603      	mov	r3, r0
 800d84e:	461c      	mov	r4, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7f3 fa71 	bl	8000d44 <__aeabi_fmul>
 800d862:	4603      	mov	r3, r0
 800d864:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d868:	4618      	mov	r0, r3
 800d86a:	f7f3 fa6b 	bl	8000d44 <__aeabi_fmul>
 800d86e:	4603      	mov	r3, r0
 800d870:	4619      	mov	r1, r3
 800d872:	4620      	mov	r0, r4
 800d874:	f7f3 f95e 	bl	8000b34 <__addsf3>
 800d878:	4603      	mov	r3, r0
 800d87a:	461c      	mov	r4, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f7f3 fa5b 	bl	8000d44 <__aeabi_fmul>
 800d88e:	4603      	mov	r3, r0
 800d890:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d892:	4618      	mov	r0, r3
 800d894:	f7f3 fa56 	bl	8000d44 <__aeabi_fmul>
 800d898:	4603      	mov	r3, r0
 800d89a:	4619      	mov	r1, r3
 800d89c:	4620      	mov	r0, r4
 800d89e:	f7f3 f949 	bl	8000b34 <__addsf3>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	461c      	mov	r4, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	4610      	mov	r0, r2
 800d8b4:	f7f3 fa46 	bl	8000d44 <__aeabi_fmul>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7f3 fa41 	bl	8000d44 <__aeabi_fmul>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f7f3 f934 	bl	8000b34 <__addsf3>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	461c      	mov	r4, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	4610      	mov	r0, r2
 800d8de:	f7f3 fa31 	bl	8000d44 <__aeabi_fmul>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7f3 fa2c 	bl	8000d44 <__aeabi_fmul>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f7f3 f91f 	bl	8000b34 <__addsf3>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	461c      	mov	r4, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f7f3 fa1c 	bl	8000d44 <__aeabi_fmul>
 800d90c:	4603      	mov	r3, r0
 800d90e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d910:	4618      	mov	r0, r3
 800d912:	f7f3 fa17 	bl	8000d44 <__aeabi_fmul>
 800d916:	4603      	mov	r3, r0
 800d918:	4619      	mov	r1, r3
 800d91a:	4620      	mov	r0, r4
 800d91c:	f7f3 f90a 	bl	8000b34 <__addsf3>
 800d920:	4603      	mov	r3, r0
 800d922:	461c      	mov	r4, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f3 fa09 	bl	8000d44 <__aeabi_fmul>
 800d932:	4603      	mov	r3, r0
 800d934:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d936:	4618      	mov	r0, r3
 800d938:	f7f3 fa04 	bl	8000d44 <__aeabi_fmul>
 800d93c:	4603      	mov	r3, r0
 800d93e:	4619      	mov	r1, r3
 800d940:	4620      	mov	r0, r4
 800d942:	f7f3 f8f7 	bl	8000b34 <__addsf3>
 800d946:	4603      	mov	r3, r0
 800d948:	461c      	mov	r4, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d950:	4618      	mov	r0, r3
 800d952:	f7f3 f9f7 	bl	8000d44 <__aeabi_fmul>
 800d956:	4603      	mov	r3, r0
 800d958:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7f3 f9f2 	bl	8000d44 <__aeabi_fmul>
 800d960:	4603      	mov	r3, r0
 800d962:	4619      	mov	r1, r3
 800d964:	4620      	mov	r0, r4
 800d966:	f7f3 f8e3 	bl	8000b30 <__aeabi_fsub>
 800d96a:	4603      	mov	r3, r0
 800d96c:	461c      	mov	r4, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d976:	4618      	mov	r0, r3
 800d978:	f7f3 f9e4 	bl	8000d44 <__aeabi_fmul>
 800d97c:	4603      	mov	r3, r0
 800d97e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d980:	4618      	mov	r0, r3
 800d982:	f7f3 f9df 	bl	8000d44 <__aeabi_fmul>
 800d986:	4603      	mov	r3, r0
 800d988:	4619      	mov	r1, r3
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7f3 f8d2 	bl	8000b34 <__addsf3>
 800d990:	4603      	mov	r3, r0
 800d992:	461c      	mov	r4, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7f3 f9d2 	bl	8000d44 <__aeabi_fmul>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7f3 f9cd 	bl	8000d44 <__aeabi_fmul>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f7f3 f8be 	bl	8000b30 <__aeabi_fsub>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	461c      	mov	r4, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7f3 f9bf 	bl	8000d44 <__aeabi_fmul>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7f3 f9ba 	bl	8000d44 <__aeabi_fmul>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f7f3 f8ad 	bl	8000b34 <__addsf3>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	461c      	mov	r4, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f3 f9ad 	bl	8000d44 <__aeabi_fmul>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7f3 f9a8 	bl	8000d44 <__aeabi_fmul>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f7f3 f899 	bl	8000b30 <__aeabi_fsub>
 800d9fe:	4603      	mov	r3, r0
 800da00:	461c      	mov	r4, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7f3 f99a 	bl	8000d44 <__aeabi_fmul>
 800da10:	4603      	mov	r3, r0
 800da12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da14:	4618      	mov	r0, r3
 800da16:	f7f3 f995 	bl	8000d44 <__aeabi_fmul>
 800da1a:	4603      	mov	r3, r0
 800da1c:	4619      	mov	r1, r3
 800da1e:	4620      	mov	r0, r4
 800da20:	f7f3 f888 	bl	8000b34 <__addsf3>
 800da24:	4603      	mov	r3, r0
 800da26:	461c      	mov	r4, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800da2e:	4618      	mov	r0, r3
 800da30:	f7f3 f988 	bl	8000d44 <__aeabi_fmul>
 800da34:	4603      	mov	r3, r0
 800da36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da38:	4618      	mov	r0, r3
 800da3a:	f7f3 f983 	bl	8000d44 <__aeabi_fmul>
 800da3e:	4603      	mov	r3, r0
 800da40:	4619      	mov	r1, r3
 800da42:	4620      	mov	r0, r4
 800da44:	f7f3 f874 	bl	8000b30 <__aeabi_fsub>
 800da48:	4603      	mov	r3, r0
 800da4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7f3 fa2d 	bl	8000eac <__aeabi_fdiv>
 800da52:	4603      	mov	r3, r0
 800da54:	4619      	mov	r1, r3
 800da56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800da5a:	f7f3 f869 	bl	8000b30 <__aeabi_fsub>
 800da5e:	4603      	mov	r3, r0
 800da60:	623b      	str	r3, [r7, #32]
	float Kt31=(Qap*Qgps_v*S3_1 - Qap*S2_1*S3_2 + Qap*S2_2*S3_1 + Qgps_v*S3_1*S4_3 - Qgps_v*S3_3*S4_1 + Qgps_v*S3_1*S4_4 - Qgps_v*S3_4*S4_1 - S2_1*S3_2*S4_3 + S2_1*S3_3*S4_2 + S2_2*S3_1*S4_3 - S2_2*S3_3*S4_1 - S2_3*S3_1*S4_2 + S2_3*S3_2*S4_1 - S2_1*S3_2*S4_4 + S2_1*S3_4*S4_2 + S2_2*S3_1*S4_4 - S2_2*S3_4*S4_1 - S2_4*S3_1*S4_2 + S2_4*S3_2*S4_1)/A;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	4619      	mov	r1, r3
 800da6e:	4610      	mov	r0, r2
 800da70:	f7f3 f968 	bl	8000d44 <__aeabi_fmul>
 800da74:	4603      	mov	r3, r0
 800da76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800da78:	4618      	mov	r0, r3
 800da7a:	f7f3 f963 	bl	8000d44 <__aeabi_fmul>
 800da7e:	4603      	mov	r3, r0
 800da80:	461c      	mov	r4, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800da88:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7f3 f95a 	bl	8000d44 <__aeabi_fmul>
 800da90:	4603      	mov	r3, r0
 800da92:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800da94:	4618      	mov	r0, r3
 800da96:	f7f3 f955 	bl	8000d44 <__aeabi_fmul>
 800da9a:	4603      	mov	r3, r0
 800da9c:	4619      	mov	r1, r3
 800da9e:	4620      	mov	r0, r4
 800daa0:	f7f3 f846 	bl	8000b30 <__aeabi_fsub>
 800daa4:	4603      	mov	r3, r0
 800daa6:	461c      	mov	r4, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800daae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7f3 f947 	bl	8000d44 <__aeabi_fmul>
 800dab6:	4603      	mov	r3, r0
 800dab8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800daba:	4618      	mov	r0, r3
 800dabc:	f7f3 f942 	bl	8000d44 <__aeabi_fmul>
 800dac0:	4603      	mov	r3, r0
 800dac2:	4619      	mov	r1, r3
 800dac4:	4620      	mov	r0, r4
 800dac6:	f7f3 f835 	bl	8000b34 <__addsf3>
 800daca:	4603      	mov	r3, r0
 800dacc:	461c      	mov	r4, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f3 f935 	bl	8000d44 <__aeabi_fmul>
 800dada:	4603      	mov	r3, r0
 800dadc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dade:	4618      	mov	r0, r3
 800dae0:	f7f3 f930 	bl	8000d44 <__aeabi_fmul>
 800dae4:	4603      	mov	r3, r0
 800dae6:	4619      	mov	r1, r3
 800dae8:	4620      	mov	r0, r4
 800daea:	f7f3 f823 	bl	8000b34 <__addsf3>
 800daee:	4603      	mov	r3, r0
 800daf0:	461c      	mov	r4, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7f3 f923 	bl	8000d44 <__aeabi_fmul>
 800dafe:	4603      	mov	r3, r0
 800db00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db02:	4618      	mov	r0, r3
 800db04:	f7f3 f91e 	bl	8000d44 <__aeabi_fmul>
 800db08:	4603      	mov	r3, r0
 800db0a:	4619      	mov	r1, r3
 800db0c:	4620      	mov	r0, r4
 800db0e:	f7f3 f80f 	bl	8000b30 <__aeabi_fsub>
 800db12:	4603      	mov	r3, r0
 800db14:	461c      	mov	r4, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7f3 f911 	bl	8000d44 <__aeabi_fmul>
 800db22:	4603      	mov	r3, r0
 800db24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db26:	4618      	mov	r0, r3
 800db28:	f7f3 f90c 	bl	8000d44 <__aeabi_fmul>
 800db2c:	4603      	mov	r3, r0
 800db2e:	4619      	mov	r1, r3
 800db30:	4620      	mov	r0, r4
 800db32:	f7f2 ffff 	bl	8000b34 <__addsf3>
 800db36:	4603      	mov	r3, r0
 800db38:	461c      	mov	r4, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db40:	4618      	mov	r0, r3
 800db42:	f7f3 f8ff 	bl	8000d44 <__aeabi_fmul>
 800db46:	4603      	mov	r3, r0
 800db48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7f3 f8fa 	bl	8000d44 <__aeabi_fmul>
 800db50:	4603      	mov	r3, r0
 800db52:	4619      	mov	r1, r3
 800db54:	4620      	mov	r0, r4
 800db56:	f7f2 ffeb 	bl	8000b30 <__aeabi_fsub>
 800db5a:	4603      	mov	r3, r0
 800db5c:	461c      	mov	r4, r3
 800db5e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800db60:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800db62:	f7f3 f8ef 	bl	8000d44 <__aeabi_fmul>
 800db66:	4603      	mov	r3, r0
 800db68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7f3 f8ea 	bl	8000d44 <__aeabi_fmul>
 800db70:	4603      	mov	r3, r0
 800db72:	4619      	mov	r1, r3
 800db74:	4620      	mov	r0, r4
 800db76:	f7f2 ffdb 	bl	8000b30 <__aeabi_fsub>
 800db7a:	4603      	mov	r3, r0
 800db7c:	461c      	mov	r4, r3
 800db7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800db80:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800db82:	f7f3 f8df 	bl	8000d44 <__aeabi_fmul>
 800db86:	4603      	mov	r3, r0
 800db88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7f3 f8da 	bl	8000d44 <__aeabi_fmul>
 800db90:	4603      	mov	r3, r0
 800db92:	4619      	mov	r1, r3
 800db94:	4620      	mov	r0, r4
 800db96:	f7f2 ffcd 	bl	8000b34 <__addsf3>
 800db9a:	4603      	mov	r3, r0
 800db9c:	461c      	mov	r4, r3
 800db9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dba0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dba2:	f7f3 f8cf 	bl	8000d44 <__aeabi_fmul>
 800dba6:	4603      	mov	r3, r0
 800dba8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7f3 f8ca 	bl	8000d44 <__aeabi_fmul>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f7f2 ffbd 	bl	8000b34 <__addsf3>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	461c      	mov	r4, r3
 800dbbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dbc2:	f7f3 f8bf 	bl	8000d44 <__aeabi_fmul>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7f3 f8ba 	bl	8000d44 <__aeabi_fmul>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f7f2 ffab 	bl	8000b30 <__aeabi_fsub>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	461c      	mov	r4, r3
 800dbde:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dbe0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dbe2:	f7f3 f8af 	bl	8000d44 <__aeabi_fmul>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f3 f8aa 	bl	8000d44 <__aeabi_fmul>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f7f2 ff9b 	bl	8000b30 <__aeabi_fsub>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	461c      	mov	r4, r3
 800dbfe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dc00:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dc02:	f7f3 f89f 	bl	8000d44 <__aeabi_fmul>
 800dc06:	4603      	mov	r3, r0
 800dc08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7f3 f89a 	bl	8000d44 <__aeabi_fmul>
 800dc10:	4603      	mov	r3, r0
 800dc12:	4619      	mov	r1, r3
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7f2 ff8d 	bl	8000b34 <__addsf3>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	461c      	mov	r4, r3
 800dc1e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dc20:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800dc22:	f7f3 f88f 	bl	8000d44 <__aeabi_fmul>
 800dc26:	4603      	mov	r3, r0
 800dc28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7f3 f88a 	bl	8000d44 <__aeabi_fmul>
 800dc30:	4603      	mov	r3, r0
 800dc32:	4619      	mov	r1, r3
 800dc34:	4620      	mov	r0, r4
 800dc36:	f7f2 ff7b 	bl	8000b30 <__aeabi_fsub>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	461c      	mov	r4, r3
 800dc3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc40:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800dc42:	f7f3 f87f 	bl	8000d44 <__aeabi_fmul>
 800dc46:	4603      	mov	r3, r0
 800dc48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7f3 f87a 	bl	8000d44 <__aeabi_fmul>
 800dc50:	4603      	mov	r3, r0
 800dc52:	4619      	mov	r1, r3
 800dc54:	4620      	mov	r0, r4
 800dc56:	f7f2 ff6d 	bl	8000b34 <__addsf3>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	461c      	mov	r4, r3
 800dc5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc62:	f7f3 f86f 	bl	8000d44 <__aeabi_fmul>
 800dc66:	4603      	mov	r3, r0
 800dc68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7f3 f86a 	bl	8000d44 <__aeabi_fmul>
 800dc70:	4603      	mov	r3, r0
 800dc72:	4619      	mov	r1, r3
 800dc74:	4620      	mov	r0, r4
 800dc76:	f7f2 ff5d 	bl	8000b34 <__addsf3>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	461c      	mov	r4, r3
 800dc7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc82:	f7f3 f85f 	bl	8000d44 <__aeabi_fmul>
 800dc86:	4603      	mov	r3, r0
 800dc88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f3 f85a 	bl	8000d44 <__aeabi_fmul>
 800dc90:	4603      	mov	r3, r0
 800dc92:	4619      	mov	r1, r3
 800dc94:	4620      	mov	r0, r4
 800dc96:	f7f2 ff4b 	bl	8000b30 <__aeabi_fsub>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	461c      	mov	r4, r3
 800dc9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dca0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dca2:	f7f3 f84f 	bl	8000d44 <__aeabi_fmul>
 800dca6:	4603      	mov	r3, r0
 800dca8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f3 f84a 	bl	8000d44 <__aeabi_fmul>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7f2 ff3b 	bl	8000b30 <__aeabi_fsub>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	461c      	mov	r4, r3
 800dcbe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dcc0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dcc2:	f7f3 f83f 	bl	8000d44 <__aeabi_fmul>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7f3 f83a 	bl	8000d44 <__aeabi_fmul>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7f2 ff2d 	bl	8000b34 <__addsf3>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7f3 f8e4 	bl	8000eac <__aeabi_fdiv>
 800dce4:	4603      	mov	r3, r0
 800dce6:	61fb      	str	r3, [r7, #28]
	float Kt32=(Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + S1_1*S2_2*S3_3 - S1_1*S2_3*S3_2 - S1_2*S2_1*S3_3 + S1_2*S2_3*S3_1 + S1_3*S2_1*S3_2 - S1_3*S2_2*S3_1 + S1_1*S2_2*S3_4 - S1_1*S2_4*S3_2 - S1_2*S2_1*S3_4 + S1_2*S2_4*S3_1 + S1_4*S2_1*S3_2 - S1_4*S2_2*S3_1)/A;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	f7f3 f825 	bl	8000d44 <__aeabi_fmul>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7f3 f820 	bl	8000d44 <__aeabi_fmul>
 800dd04:	4603      	mov	r3, r0
 800dd06:	461c      	mov	r4, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7f3 f815 	bl	8000d44 <__aeabi_fmul>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f3 f810 	bl	8000d44 <__aeabi_fmul>
 800dd24:	4603      	mov	r3, r0
 800dd26:	4619      	mov	r1, r3
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f7f2 ff03 	bl	8000b34 <__addsf3>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	461c      	mov	r4, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dd38:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7f3 f802 	bl	8000d44 <__aeabi_fmul>
 800dd40:	4603      	mov	r3, r0
 800dd42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7f2 fffd 	bl	8000d44 <__aeabi_fmul>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f7f2 fef0 	bl	8000b34 <__addsf3>
 800dd54:	4603      	mov	r3, r0
 800dd56:	461c      	mov	r4, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dd5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f2 ffef 	bl	8000d44 <__aeabi_fmul>
 800dd66:	4603      	mov	r3, r0
 800dd68:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f2 ffea 	bl	8000d44 <__aeabi_fmul>
 800dd70:	4603      	mov	r3, r0
 800dd72:	4619      	mov	r1, r3
 800dd74:	4620      	mov	r0, r4
 800dd76:	f7f2 fedb 	bl	8000b30 <__aeabi_fsub>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	461c      	mov	r4, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dd84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f2 ffdc 	bl	8000d44 <__aeabi_fmul>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7f2 ffd7 	bl	8000d44 <__aeabi_fmul>
 800dd96:	4603      	mov	r3, r0
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f7f2 feca 	bl	8000b34 <__addsf3>
 800dda0:	4603      	mov	r3, r0
 800dda2:	461c      	mov	r4, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ddaa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7f2 ffc9 	bl	8000d44 <__aeabi_fmul>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7f2 ffc4 	bl	8000d44 <__aeabi_fmul>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f7f2 feb5 	bl	8000b30 <__aeabi_fsub>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	461c      	mov	r4, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7f2 ffb6 	bl	8000d44 <__aeabi_fmul>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7f2 ffb1 	bl	8000d44 <__aeabi_fmul>
 800dde2:	4603      	mov	r3, r0
 800dde4:	4619      	mov	r1, r3
 800dde6:	4620      	mov	r0, r4
 800dde8:	f7f2 fea4 	bl	8000b34 <__addsf3>
 800ddec:	4603      	mov	r3, r0
 800ddee:	461c      	mov	r4, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7f2 ffa4 	bl	8000d44 <__aeabi_fmul>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de00:	4618      	mov	r0, r3
 800de02:	f7f2 ff9f 	bl	8000d44 <__aeabi_fmul>
 800de06:	4603      	mov	r3, r0
 800de08:	4619      	mov	r1, r3
 800de0a:	4620      	mov	r0, r4
 800de0c:	f7f2 fe90 	bl	8000b30 <__aeabi_fsub>
 800de10:	4603      	mov	r3, r0
 800de12:	461c      	mov	r4, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7f2 ff91 	bl	8000d44 <__aeabi_fmul>
 800de22:	4603      	mov	r3, r0
 800de24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de26:	4618      	mov	r0, r3
 800de28:	f7f2 ff8c 	bl	8000d44 <__aeabi_fmul>
 800de2c:	4603      	mov	r3, r0
 800de2e:	4619      	mov	r1, r3
 800de30:	4620      	mov	r0, r4
 800de32:	f7f2 fe7f 	bl	8000b34 <__addsf3>
 800de36:	4603      	mov	r3, r0
 800de38:	461c      	mov	r4, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800de40:	4618      	mov	r0, r3
 800de42:	f7f2 ff7f 	bl	8000d44 <__aeabi_fmul>
 800de46:	4603      	mov	r3, r0
 800de48:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7f2 ff7a 	bl	8000d44 <__aeabi_fmul>
 800de50:	4603      	mov	r3, r0
 800de52:	4619      	mov	r1, r3
 800de54:	4620      	mov	r0, r4
 800de56:	f7f2 fe6b 	bl	8000b30 <__aeabi_fsub>
 800de5a:	4603      	mov	r3, r0
 800de5c:	461c      	mov	r4, r3
 800de5e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800de60:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800de64:	f7f2 ff6e 	bl	8000d44 <__aeabi_fmul>
 800de68:	4603      	mov	r3, r0
 800de6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7f2 ff69 	bl	8000d44 <__aeabi_fmul>
 800de72:	4603      	mov	r3, r0
 800de74:	4619      	mov	r1, r3
 800de76:	4620      	mov	r0, r4
 800de78:	f7f2 fe5c 	bl	8000b34 <__addsf3>
 800de7c:	4603      	mov	r3, r0
 800de7e:	461c      	mov	r4, r3
 800de80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de82:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800de86:	f7f2 ff5d 	bl	8000d44 <__aeabi_fmul>
 800de8a:	4603      	mov	r3, r0
 800de8c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800de8e:	4618      	mov	r0, r3
 800de90:	f7f2 ff58 	bl	8000d44 <__aeabi_fmul>
 800de94:	4603      	mov	r3, r0
 800de96:	4619      	mov	r1, r3
 800de98:	4620      	mov	r0, r4
 800de9a:	f7f2 fe49 	bl	8000b30 <__aeabi_fsub>
 800de9e:	4603      	mov	r3, r0
 800dea0:	461c      	mov	r4, r3
 800dea2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dea4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dea6:	f7f2 ff4d 	bl	8000d44 <__aeabi_fmul>
 800deaa:	4603      	mov	r3, r0
 800deac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f2 ff48 	bl	8000d44 <__aeabi_fmul>
 800deb4:	4603      	mov	r3, r0
 800deb6:	4619      	mov	r1, r3
 800deb8:	4620      	mov	r0, r4
 800deba:	f7f2 fe39 	bl	8000b30 <__aeabi_fsub>
 800debe:	4603      	mov	r3, r0
 800dec0:	461c      	mov	r4, r3
 800dec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dec4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dec6:	f7f2 ff3d 	bl	8000d44 <__aeabi_fmul>
 800deca:	4603      	mov	r3, r0
 800decc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f2 ff38 	bl	8000d44 <__aeabi_fmul>
 800ded4:	4603      	mov	r3, r0
 800ded6:	4619      	mov	r1, r3
 800ded8:	4620      	mov	r0, r4
 800deda:	f7f2 fe2b 	bl	8000b34 <__addsf3>
 800dede:	4603      	mov	r3, r0
 800dee0:	461c      	mov	r4, r3
 800dee2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dee4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800dee6:	f7f2 ff2d 	bl	8000d44 <__aeabi_fmul>
 800deea:	4603      	mov	r3, r0
 800deec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800deee:	4618      	mov	r0, r3
 800def0:	f7f2 ff28 	bl	8000d44 <__aeabi_fmul>
 800def4:	4603      	mov	r3, r0
 800def6:	4619      	mov	r1, r3
 800def8:	4620      	mov	r0, r4
 800defa:	f7f2 fe1b 	bl	8000b34 <__addsf3>
 800defe:	4603      	mov	r3, r0
 800df00:	461c      	mov	r4, r3
 800df02:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df04:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800df06:	f7f2 ff1d 	bl	8000d44 <__aeabi_fmul>
 800df0a:	4603      	mov	r3, r0
 800df0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df0e:	4618      	mov	r0, r3
 800df10:	f7f2 ff18 	bl	8000d44 <__aeabi_fmul>
 800df14:	4603      	mov	r3, r0
 800df16:	4619      	mov	r1, r3
 800df18:	4620      	mov	r0, r4
 800df1a:	f7f2 fe09 	bl	8000b30 <__aeabi_fsub>
 800df1e:	4603      	mov	r3, r0
 800df20:	461c      	mov	r4, r3
 800df22:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df24:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800df28:	f7f2 ff0c 	bl	8000d44 <__aeabi_fmul>
 800df2c:	4603      	mov	r3, r0
 800df2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df30:	4618      	mov	r0, r3
 800df32:	f7f2 ff07 	bl	8000d44 <__aeabi_fmul>
 800df36:	4603      	mov	r3, r0
 800df38:	4619      	mov	r1, r3
 800df3a:	4620      	mov	r0, r4
 800df3c:	f7f2 fdfa 	bl	8000b34 <__addsf3>
 800df40:	4603      	mov	r3, r0
 800df42:	461c      	mov	r4, r3
 800df44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800df46:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800df4a:	f7f2 fefb 	bl	8000d44 <__aeabi_fmul>
 800df4e:	4603      	mov	r3, r0
 800df50:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800df52:	4618      	mov	r0, r3
 800df54:	f7f2 fef6 	bl	8000d44 <__aeabi_fmul>
 800df58:	4603      	mov	r3, r0
 800df5a:	4619      	mov	r1, r3
 800df5c:	4620      	mov	r0, r4
 800df5e:	f7f2 fde7 	bl	8000b30 <__aeabi_fsub>
 800df62:	4603      	mov	r3, r0
 800df64:	461c      	mov	r4, r3
 800df66:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800df68:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800df6a:	f7f2 feeb 	bl	8000d44 <__aeabi_fmul>
 800df6e:	4603      	mov	r3, r0
 800df70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df72:	4618      	mov	r0, r3
 800df74:	f7f2 fee6 	bl	8000d44 <__aeabi_fmul>
 800df78:	4603      	mov	r3, r0
 800df7a:	4619      	mov	r1, r3
 800df7c:	4620      	mov	r0, r4
 800df7e:	f7f2 fdd7 	bl	8000b30 <__aeabi_fsub>
 800df82:	4603      	mov	r3, r0
 800df84:	461c      	mov	r4, r3
 800df86:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800df88:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800df8a:	f7f2 fedb 	bl	8000d44 <__aeabi_fmul>
 800df8e:	4603      	mov	r3, r0
 800df90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df92:	4618      	mov	r0, r3
 800df94:	f7f2 fed6 	bl	8000d44 <__aeabi_fmul>
 800df98:	4603      	mov	r3, r0
 800df9a:	4619      	mov	r1, r3
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7f2 fdc9 	bl	8000b34 <__addsf3>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	461c      	mov	r4, r3
 800dfa6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dfa8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dfaa:	f7f2 fecb 	bl	8000d44 <__aeabi_fmul>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7f2 fec6 	bl	8000d44 <__aeabi_fmul>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	4619      	mov	r1, r3
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7f2 fdb9 	bl	8000b34 <__addsf3>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	461c      	mov	r4, r3
 800dfc6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dfc8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dfca:	f7f2 febb 	bl	8000d44 <__aeabi_fmul>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7f2 feb6 	bl	8000d44 <__aeabi_fmul>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f7f2 fda7 	bl	8000b30 <__aeabi_fsub>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f2 ff60 	bl	8000eac <__aeabi_fdiv>
 800dfec:	4603      	mov	r3, r0
 800dfee:	61bb      	str	r3, [r7, #24]
	float Kt33=(Qap*Qgps*S3_2 + Qap*S1_1*S3_2 - Qap*S1_2*S3_1 + Qgps*S3_2*S4_3 - Qgps*S3_3*S4_2 + Qgps*S3_2*S4_4 - Qgps*S3_4*S4_2 + S1_1*S3_2*S4_3 - S1_1*S3_3*S4_2 - S1_2*S3_1*S4_3 + S1_2*S3_3*S4_1 + S1_3*S3_1*S4_2 - S1_3*S3_2*S4_1 + S1_1*S3_2*S4_4 - S1_1*S3_4*S4_2 - S1_2*S3_1*S4_4 + S1_2*S3_4*S4_1 + S1_4*S3_1*S4_2 - S1_4*S3_2*S4_1)/A;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dffc:	4619      	mov	r1, r3
 800dffe:	4610      	mov	r0, r2
 800e000:	f7f2 fea0 	bl	8000d44 <__aeabi_fmul>
 800e004:	4603      	mov	r3, r0
 800e006:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f2 fe9b 	bl	8000d44 <__aeabi_fmul>
 800e00e:	4603      	mov	r3, r0
 800e010:	461c      	mov	r4, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e018:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7f2 fe91 	bl	8000d44 <__aeabi_fmul>
 800e022:	4603      	mov	r3, r0
 800e024:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e026:	4618      	mov	r0, r3
 800e028:	f7f2 fe8c 	bl	8000d44 <__aeabi_fmul>
 800e02c:	4603      	mov	r3, r0
 800e02e:	4619      	mov	r1, r3
 800e030:	4620      	mov	r0, r4
 800e032:	f7f2 fd7f 	bl	8000b34 <__addsf3>
 800e036:	4603      	mov	r3, r0
 800e038:	461c      	mov	r4, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e042:	4618      	mov	r0, r3
 800e044:	f7f2 fe7e 	bl	8000d44 <__aeabi_fmul>
 800e048:	4603      	mov	r3, r0
 800e04a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7f2 fe79 	bl	8000d44 <__aeabi_fmul>
 800e052:	4603      	mov	r3, r0
 800e054:	4619      	mov	r1, r3
 800e056:	4620      	mov	r0, r4
 800e058:	f7f2 fd6a 	bl	8000b30 <__aeabi_fsub>
 800e05c:	4603      	mov	r3, r0
 800e05e:	461c      	mov	r4, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e066:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e068:	4618      	mov	r0, r3
 800e06a:	f7f2 fe6b 	bl	8000d44 <__aeabi_fmul>
 800e06e:	4603      	mov	r3, r0
 800e070:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e072:	4618      	mov	r0, r3
 800e074:	f7f2 fe66 	bl	8000d44 <__aeabi_fmul>
 800e078:	4603      	mov	r3, r0
 800e07a:	4619      	mov	r1, r3
 800e07c:	4620      	mov	r0, r4
 800e07e:	f7f2 fd59 	bl	8000b34 <__addsf3>
 800e082:	4603      	mov	r3, r0
 800e084:	461c      	mov	r4, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e08c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e08e:	4618      	mov	r0, r3
 800e090:	f7f2 fe58 	bl	8000d44 <__aeabi_fmul>
 800e094:	4603      	mov	r3, r0
 800e096:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e098:	4618      	mov	r0, r3
 800e09a:	f7f2 fe53 	bl	8000d44 <__aeabi_fmul>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7f2 fd44 	bl	8000b30 <__aeabi_fsub>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	461c      	mov	r4, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e0b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7f2 fe45 	bl	8000d44 <__aeabi_fmul>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f2 fe40 	bl	8000d44 <__aeabi_fmul>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f7f2 fd33 	bl	8000b34 <__addsf3>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	461c      	mov	r4, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e0d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f2 fe32 	bl	8000d44 <__aeabi_fmul>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7f2 fe2d 	bl	8000d44 <__aeabi_fmul>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f7f2 fd1e 	bl	8000b30 <__aeabi_fsub>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	461c      	mov	r4, r3
 800e0f8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e0fa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e0fe:	f7f2 fe21 	bl	8000d44 <__aeabi_fmul>
 800e102:	4603      	mov	r3, r0
 800e104:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e106:	4618      	mov	r0, r3
 800e108:	f7f2 fe1c 	bl	8000d44 <__aeabi_fmul>
 800e10c:	4603      	mov	r3, r0
 800e10e:	4619      	mov	r1, r3
 800e110:	4620      	mov	r0, r4
 800e112:	f7f2 fd0f 	bl	8000b34 <__addsf3>
 800e116:	4603      	mov	r3, r0
 800e118:	461c      	mov	r4, r3
 800e11a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e11c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e120:	f7f2 fe10 	bl	8000d44 <__aeabi_fmul>
 800e124:	4603      	mov	r3, r0
 800e126:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f2 fe0b 	bl	8000d44 <__aeabi_fmul>
 800e12e:	4603      	mov	r3, r0
 800e130:	4619      	mov	r1, r3
 800e132:	4620      	mov	r0, r4
 800e134:	f7f2 fcfc 	bl	8000b30 <__aeabi_fsub>
 800e138:	4603      	mov	r3, r0
 800e13a:	461c      	mov	r4, r3
 800e13c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e13e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e140:	f7f2 fe00 	bl	8000d44 <__aeabi_fmul>
 800e144:	4603      	mov	r3, r0
 800e146:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e148:	4618      	mov	r0, r3
 800e14a:	f7f2 fdfb 	bl	8000d44 <__aeabi_fmul>
 800e14e:	4603      	mov	r3, r0
 800e150:	4619      	mov	r1, r3
 800e152:	4620      	mov	r0, r4
 800e154:	f7f2 fcec 	bl	8000b30 <__aeabi_fsub>
 800e158:	4603      	mov	r3, r0
 800e15a:	461c      	mov	r4, r3
 800e15c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e15e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e160:	f7f2 fdf0 	bl	8000d44 <__aeabi_fmul>
 800e164:	4603      	mov	r3, r0
 800e166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f2 fdeb 	bl	8000d44 <__aeabi_fmul>
 800e16e:	4603      	mov	r3, r0
 800e170:	4619      	mov	r1, r3
 800e172:	4620      	mov	r0, r4
 800e174:	f7f2 fcde 	bl	8000b34 <__addsf3>
 800e178:	4603      	mov	r3, r0
 800e17a:	461c      	mov	r4, r3
 800e17c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e17e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e180:	f7f2 fde0 	bl	8000d44 <__aeabi_fmul>
 800e184:	4603      	mov	r3, r0
 800e186:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f2 fddb 	bl	8000d44 <__aeabi_fmul>
 800e18e:	4603      	mov	r3, r0
 800e190:	4619      	mov	r1, r3
 800e192:	4620      	mov	r0, r4
 800e194:	f7f2 fcce 	bl	8000b34 <__addsf3>
 800e198:	4603      	mov	r3, r0
 800e19a:	461c      	mov	r4, r3
 800e19c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e19e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e1a0:	f7f2 fdd0 	bl	8000d44 <__aeabi_fmul>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7f2 fdcb 	bl	8000d44 <__aeabi_fmul>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f7f2 fcbc 	bl	8000b30 <__aeabi_fsub>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	461c      	mov	r4, r3
 800e1bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e1be:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e1c2:	f7f2 fdbf 	bl	8000d44 <__aeabi_fmul>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7f2 fdba 	bl	8000d44 <__aeabi_fmul>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f7f2 fcad 	bl	8000b34 <__addsf3>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	461c      	mov	r4, r3
 800e1de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e1e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e1e4:	f7f2 fdae 	bl	8000d44 <__aeabi_fmul>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7f2 fda9 	bl	8000d44 <__aeabi_fmul>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f7f2 fc9a 	bl	8000b30 <__aeabi_fsub>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	461c      	mov	r4, r3
 800e200:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e202:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e204:	f7f2 fd9e 	bl	8000d44 <__aeabi_fmul>
 800e208:	4603      	mov	r3, r0
 800e20a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f2 fd99 	bl	8000d44 <__aeabi_fmul>
 800e212:	4603      	mov	r3, r0
 800e214:	4619      	mov	r1, r3
 800e216:	4620      	mov	r0, r4
 800e218:	f7f2 fc8a 	bl	8000b30 <__aeabi_fsub>
 800e21c:	4603      	mov	r3, r0
 800e21e:	461c      	mov	r4, r3
 800e220:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e222:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e224:	f7f2 fd8e 	bl	8000d44 <__aeabi_fmul>
 800e228:	4603      	mov	r3, r0
 800e22a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7f2 fd89 	bl	8000d44 <__aeabi_fmul>
 800e232:	4603      	mov	r3, r0
 800e234:	4619      	mov	r1, r3
 800e236:	4620      	mov	r0, r4
 800e238:	f7f2 fc7c 	bl	8000b34 <__addsf3>
 800e23c:	4603      	mov	r3, r0
 800e23e:	461c      	mov	r4, r3
 800e240:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e242:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e244:	f7f2 fd7e 	bl	8000d44 <__aeabi_fmul>
 800e248:	4603      	mov	r3, r0
 800e24a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7f2 fd79 	bl	8000d44 <__aeabi_fmul>
 800e252:	4603      	mov	r3, r0
 800e254:	4619      	mov	r1, r3
 800e256:	4620      	mov	r0, r4
 800e258:	f7f2 fc6c 	bl	8000b34 <__addsf3>
 800e25c:	4603      	mov	r3, r0
 800e25e:	461c      	mov	r4, r3
 800e260:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e262:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e264:	f7f2 fd6e 	bl	8000d44 <__aeabi_fmul>
 800e268:	4603      	mov	r3, r0
 800e26a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7f2 fd69 	bl	8000d44 <__aeabi_fmul>
 800e272:	4603      	mov	r3, r0
 800e274:	4619      	mov	r1, r3
 800e276:	4620      	mov	r0, r4
 800e278:	f7f2 fc5a 	bl	8000b30 <__aeabi_fsub>
 800e27c:	4603      	mov	r3, r0
 800e27e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e280:	4618      	mov	r0, r3
 800e282:	f7f2 fe13 	bl	8000eac <__aeabi_fdiv>
 800e286:	4603      	mov	r3, r0
 800e288:	617b      	str	r3, [r7, #20]
	float Kt41=(Qap*Qgps_v*S4_1 - Qap*S2_1*S4_2 + Qap*S2_2*S4_1 - Qgps_v*S3_1*S4_3 + Qgps_v*S3_3*S4_1 - Qgps_v*S3_1*S4_4 + Qgps_v*S3_4*S4_1 + S2_1*S3_2*S4_3 - S2_1*S3_3*S4_2 - S2_2*S3_1*S4_3 + S2_2*S3_3*S4_1 + S2_3*S3_1*S4_2 - S2_3*S3_2*S4_1 + S2_1*S3_2*S4_4 - S2_1*S3_4*S4_2 - S2_2*S3_1*S4_4 + S2_2*S3_4*S4_1 + S2_4*S3_1*S4_2 - S2_4*S3_2*S4_1)/A;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f7f2 fd54 	bl	8000d44 <__aeabi_fmul>
 800e29c:	4603      	mov	r3, r0
 800e29e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7f2 fd4f 	bl	8000d44 <__aeabi_fmul>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	461c      	mov	r4, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e2b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f2 fd46 	bl	8000d44 <__aeabi_fmul>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7f2 fd41 	bl	8000d44 <__aeabi_fmul>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f7f2 fc32 	bl	8000b30 <__aeabi_fsub>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461c      	mov	r4, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e2d6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f2 fd33 	bl	8000d44 <__aeabi_fmul>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f2 fd2e 	bl	8000d44 <__aeabi_fmul>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f7f2 fc21 	bl	8000b34 <__addsf3>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	461c      	mov	r4, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7f2 fd21 	bl	8000d44 <__aeabi_fmul>
 800e302:	4603      	mov	r3, r0
 800e304:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e306:	4618      	mov	r0, r3
 800e308:	f7f2 fd1c 	bl	8000d44 <__aeabi_fmul>
 800e30c:	4603      	mov	r3, r0
 800e30e:	4619      	mov	r1, r3
 800e310:	4620      	mov	r0, r4
 800e312:	f7f2 fc0d 	bl	8000b30 <__aeabi_fsub>
 800e316:	4603      	mov	r3, r0
 800e318:	461c      	mov	r4, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e320:	4618      	mov	r0, r3
 800e322:	f7f2 fd0f 	bl	8000d44 <__aeabi_fmul>
 800e326:	4603      	mov	r3, r0
 800e328:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f2 fd0a 	bl	8000d44 <__aeabi_fmul>
 800e330:	4603      	mov	r3, r0
 800e332:	4619      	mov	r1, r3
 800e334:	4620      	mov	r0, r4
 800e336:	f7f2 fbfd 	bl	8000b34 <__addsf3>
 800e33a:	4603      	mov	r3, r0
 800e33c:	461c      	mov	r4, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e344:	4618      	mov	r0, r3
 800e346:	f7f2 fcfd 	bl	8000d44 <__aeabi_fmul>
 800e34a:	4603      	mov	r3, r0
 800e34c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f2 fcf8 	bl	8000d44 <__aeabi_fmul>
 800e354:	4603      	mov	r3, r0
 800e356:	4619      	mov	r1, r3
 800e358:	4620      	mov	r0, r4
 800e35a:	f7f2 fbe9 	bl	8000b30 <__aeabi_fsub>
 800e35e:	4603      	mov	r3, r0
 800e360:	461c      	mov	r4, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e368:	4618      	mov	r0, r3
 800e36a:	f7f2 fceb 	bl	8000d44 <__aeabi_fmul>
 800e36e:	4603      	mov	r3, r0
 800e370:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e372:	4618      	mov	r0, r3
 800e374:	f7f2 fce6 	bl	8000d44 <__aeabi_fmul>
 800e378:	4603      	mov	r3, r0
 800e37a:	4619      	mov	r1, r3
 800e37c:	4620      	mov	r0, r4
 800e37e:	f7f2 fbd9 	bl	8000b34 <__addsf3>
 800e382:	4603      	mov	r3, r0
 800e384:	461c      	mov	r4, r3
 800e386:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e388:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e38a:	f7f2 fcdb 	bl	8000d44 <__aeabi_fmul>
 800e38e:	4603      	mov	r3, r0
 800e390:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e392:	4618      	mov	r0, r3
 800e394:	f7f2 fcd6 	bl	8000d44 <__aeabi_fmul>
 800e398:	4603      	mov	r3, r0
 800e39a:	4619      	mov	r1, r3
 800e39c:	4620      	mov	r0, r4
 800e39e:	f7f2 fbc9 	bl	8000b34 <__addsf3>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	461c      	mov	r4, r3
 800e3a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e3aa:	f7f2 fccb 	bl	8000d44 <__aeabi_fmul>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f2 fcc6 	bl	8000d44 <__aeabi_fmul>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7f2 fbb7 	bl	8000b30 <__aeabi_fsub>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	461c      	mov	r4, r3
 800e3c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e3c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e3ca:	f7f2 fcbb 	bl	8000d44 <__aeabi_fmul>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f2 fcb6 	bl	8000d44 <__aeabi_fmul>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f7f2 fba7 	bl	8000b30 <__aeabi_fsub>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	461c      	mov	r4, r3
 800e3e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e3ea:	f7f2 fcab 	bl	8000d44 <__aeabi_fmul>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f2 fca6 	bl	8000d44 <__aeabi_fmul>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f7f2 fb99 	bl	8000b34 <__addsf3>
 800e402:	4603      	mov	r3, r0
 800e404:	461c      	mov	r4, r3
 800e406:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e408:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800e40a:	f7f2 fc9b 	bl	8000d44 <__aeabi_fmul>
 800e40e:	4603      	mov	r3, r0
 800e410:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e412:	4618      	mov	r0, r3
 800e414:	f7f2 fc96 	bl	8000d44 <__aeabi_fmul>
 800e418:	4603      	mov	r3, r0
 800e41a:	4619      	mov	r1, r3
 800e41c:	4620      	mov	r0, r4
 800e41e:	f7f2 fb89 	bl	8000b34 <__addsf3>
 800e422:	4603      	mov	r3, r0
 800e424:	461c      	mov	r4, r3
 800e426:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e428:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800e42a:	f7f2 fc8b 	bl	8000d44 <__aeabi_fmul>
 800e42e:	4603      	mov	r3, r0
 800e430:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e432:	4618      	mov	r0, r3
 800e434:	f7f2 fc86 	bl	8000d44 <__aeabi_fmul>
 800e438:	4603      	mov	r3, r0
 800e43a:	4619      	mov	r1, r3
 800e43c:	4620      	mov	r0, r4
 800e43e:	f7f2 fb77 	bl	8000b30 <__aeabi_fsub>
 800e442:	4603      	mov	r3, r0
 800e444:	461c      	mov	r4, r3
 800e446:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e448:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e44a:	f7f2 fc7b 	bl	8000d44 <__aeabi_fmul>
 800e44e:	4603      	mov	r3, r0
 800e450:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e452:	4618      	mov	r0, r3
 800e454:	f7f2 fc76 	bl	8000d44 <__aeabi_fmul>
 800e458:	4603      	mov	r3, r0
 800e45a:	4619      	mov	r1, r3
 800e45c:	4620      	mov	r0, r4
 800e45e:	f7f2 fb69 	bl	8000b34 <__addsf3>
 800e462:	4603      	mov	r3, r0
 800e464:	461c      	mov	r4, r3
 800e466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e468:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e46a:	f7f2 fc6b 	bl	8000d44 <__aeabi_fmul>
 800e46e:	4603      	mov	r3, r0
 800e470:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e472:	4618      	mov	r0, r3
 800e474:	f7f2 fc66 	bl	8000d44 <__aeabi_fmul>
 800e478:	4603      	mov	r3, r0
 800e47a:	4619      	mov	r1, r3
 800e47c:	4620      	mov	r0, r4
 800e47e:	f7f2 fb57 	bl	8000b30 <__aeabi_fsub>
 800e482:	4603      	mov	r3, r0
 800e484:	461c      	mov	r4, r3
 800e486:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e488:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e48a:	f7f2 fc5b 	bl	8000d44 <__aeabi_fmul>
 800e48e:	4603      	mov	r3, r0
 800e490:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e492:	4618      	mov	r0, r3
 800e494:	f7f2 fc56 	bl	8000d44 <__aeabi_fmul>
 800e498:	4603      	mov	r3, r0
 800e49a:	4619      	mov	r1, r3
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7f2 fb47 	bl	8000b30 <__aeabi_fsub>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	461c      	mov	r4, r3
 800e4a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e4aa:	f7f2 fc4b 	bl	8000d44 <__aeabi_fmul>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f2 fc46 	bl	8000d44 <__aeabi_fmul>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f7f2 fb39 	bl	8000b34 <__addsf3>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	461c      	mov	r4, r3
 800e4c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e4c8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e4ca:	f7f2 fc3b 	bl	8000d44 <__aeabi_fmul>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7f2 fc36 	bl	8000d44 <__aeabi_fmul>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f7f2 fb29 	bl	8000b34 <__addsf3>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	461c      	mov	r4, r3
 800e4e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e4e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e4ea:	f7f2 fc2b 	bl	8000d44 <__aeabi_fmul>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7f2 fc26 	bl	8000d44 <__aeabi_fmul>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7f2 fb17 	bl	8000b30 <__aeabi_fsub>
 800e502:	4603      	mov	r3, r0
 800e504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e506:	4618      	mov	r0, r3
 800e508:	f7f2 fcd0 	bl	8000eac <__aeabi_fdiv>
 800e50c:	4603      	mov	r3, r0
 800e50e:	613b      	str	r3, [r7, #16]
	float Kt42=(Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1 + S1_1*S2_2*S4_3 - S1_1*S2_3*S4_2 - S1_2*S2_1*S4_3 + S1_2*S2_3*S4_1 + S1_3*S2_1*S4_2 - S1_3*S2_2*S4_1 + S1_1*S2_2*S4_4 - S1_1*S2_4*S4_2 - S1_2*S2_1*S4_4 + S1_2*S2_4*S4_1 + S1_4*S2_1*S4_2 - S1_4*S2_2*S4_1)/A;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	4619      	mov	r1, r3
 800e51c:	4610      	mov	r0, r2
 800e51e:	f7f2 fc11 	bl	8000d44 <__aeabi_fmul>
 800e522:	4603      	mov	r3, r0
 800e524:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e526:	4618      	mov	r0, r3
 800e528:	f7f2 fc0c 	bl	8000d44 <__aeabi_fmul>
 800e52c:	4603      	mov	r3, r0
 800e52e:	461c      	mov	r4, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	4619      	mov	r1, r3
 800e53c:	4610      	mov	r0, r2
 800e53e:	f7f2 fc01 	bl	8000d44 <__aeabi_fmul>
 800e542:	4603      	mov	r3, r0
 800e544:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e546:	4618      	mov	r0, r3
 800e548:	f7f2 fbfc 	bl	8000d44 <__aeabi_fmul>
 800e54c:	4603      	mov	r3, r0
 800e54e:	4619      	mov	r1, r3
 800e550:	4620      	mov	r0, r4
 800e552:	f7f2 faef 	bl	8000b34 <__addsf3>
 800e556:	4603      	mov	r3, r0
 800e558:	461c      	mov	r4, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e560:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e562:	4618      	mov	r0, r3
 800e564:	f7f2 fbee 	bl	8000d44 <__aeabi_fmul>
 800e568:	4603      	mov	r3, r0
 800e56a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7f2 fbe9 	bl	8000d44 <__aeabi_fmul>
 800e572:	4603      	mov	r3, r0
 800e574:	4619      	mov	r1, r3
 800e576:	4620      	mov	r0, r4
 800e578:	f7f2 fadc 	bl	8000b34 <__addsf3>
 800e57c:	4603      	mov	r3, r0
 800e57e:	461c      	mov	r4, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e586:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f2 fbdb 	bl	8000d44 <__aeabi_fmul>
 800e58e:	4603      	mov	r3, r0
 800e590:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e592:	4618      	mov	r0, r3
 800e594:	f7f2 fbd6 	bl	8000d44 <__aeabi_fmul>
 800e598:	4603      	mov	r3, r0
 800e59a:	4619      	mov	r1, r3
 800e59c:	4620      	mov	r0, r4
 800e59e:	f7f2 fac7 	bl	8000b30 <__aeabi_fsub>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	461c      	mov	r4, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e5ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7f2 fbc8 	bl	8000d44 <__aeabi_fmul>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7f2 fbc3 	bl	8000d44 <__aeabi_fmul>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f7f2 fab6 	bl	8000b34 <__addsf3>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e5d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7f2 fbb5 	bl	8000d44 <__aeabi_fmul>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7f2 fbb0 	bl	8000d44 <__aeabi_fmul>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f7f2 faa1 	bl	8000b30 <__aeabi_fsub>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	461c      	mov	r4, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7f2 fba2 	bl	8000d44 <__aeabi_fmul>
 800e600:	4603      	mov	r3, r0
 800e602:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e604:	4618      	mov	r0, r3
 800e606:	f7f2 fb9d 	bl	8000d44 <__aeabi_fmul>
 800e60a:	4603      	mov	r3, r0
 800e60c:	4619      	mov	r1, r3
 800e60e:	4620      	mov	r0, r4
 800e610:	f7f2 fa90 	bl	8000b34 <__addsf3>
 800e614:	4603      	mov	r3, r0
 800e616:	461c      	mov	r4, r3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f2 fb90 	bl	8000d44 <__aeabi_fmul>
 800e624:	4603      	mov	r3, r0
 800e626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e628:	4618      	mov	r0, r3
 800e62a:	f7f2 fb8b 	bl	8000d44 <__aeabi_fmul>
 800e62e:	4603      	mov	r3, r0
 800e630:	4619      	mov	r1, r3
 800e632:	4620      	mov	r0, r4
 800e634:	f7f2 fa7c 	bl	8000b30 <__aeabi_fsub>
 800e638:	4603      	mov	r3, r0
 800e63a:	461c      	mov	r4, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e644:	4618      	mov	r0, r3
 800e646:	f7f2 fb7d 	bl	8000d44 <__aeabi_fmul>
 800e64a:	4603      	mov	r3, r0
 800e64c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e64e:	4618      	mov	r0, r3
 800e650:	f7f2 fb78 	bl	8000d44 <__aeabi_fmul>
 800e654:	4603      	mov	r3, r0
 800e656:	4619      	mov	r1, r3
 800e658:	4620      	mov	r0, r4
 800e65a:	f7f2 fa6b 	bl	8000b34 <__addsf3>
 800e65e:	4603      	mov	r3, r0
 800e660:	461c      	mov	r4, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e668:	4618      	mov	r0, r3
 800e66a:	f7f2 fb6b 	bl	8000d44 <__aeabi_fmul>
 800e66e:	4603      	mov	r3, r0
 800e670:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e672:	4618      	mov	r0, r3
 800e674:	f7f2 fb66 	bl	8000d44 <__aeabi_fmul>
 800e678:	4603      	mov	r3, r0
 800e67a:	4619      	mov	r1, r3
 800e67c:	4620      	mov	r0, r4
 800e67e:	f7f2 fa57 	bl	8000b30 <__aeabi_fsub>
 800e682:	4603      	mov	r3, r0
 800e684:	461c      	mov	r4, r3
 800e686:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e688:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e68c:	f7f2 fb5a 	bl	8000d44 <__aeabi_fmul>
 800e690:	4603      	mov	r3, r0
 800e692:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e694:	4618      	mov	r0, r3
 800e696:	f7f2 fb55 	bl	8000d44 <__aeabi_fmul>
 800e69a:	4603      	mov	r3, r0
 800e69c:	4619      	mov	r1, r3
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f7f2 fa48 	bl	8000b34 <__addsf3>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	461c      	mov	r4, r3
 800e6a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e6aa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e6ae:	f7f2 fb49 	bl	8000d44 <__aeabi_fmul>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f2 fb44 	bl	8000d44 <__aeabi_fmul>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f7f2 fa35 	bl	8000b30 <__aeabi_fsub>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	461c      	mov	r4, r3
 800e6ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e6cc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e6ce:	f7f2 fb39 	bl	8000d44 <__aeabi_fmul>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7f2 fb34 	bl	8000d44 <__aeabi_fmul>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f7f2 fa25 	bl	8000b30 <__aeabi_fsub>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	461c      	mov	r4, r3
 800e6ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e6ec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e6ee:	f7f2 fb29 	bl	8000d44 <__aeabi_fmul>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7f2 fb24 	bl	8000d44 <__aeabi_fmul>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	4619      	mov	r1, r3
 800e700:	4620      	mov	r0, r4
 800e702:	f7f2 fa17 	bl	8000b34 <__addsf3>
 800e706:	4603      	mov	r3, r0
 800e708:	461c      	mov	r4, r3
 800e70a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e70c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e70e:	f7f2 fb19 	bl	8000d44 <__aeabi_fmul>
 800e712:	4603      	mov	r3, r0
 800e714:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e716:	4618      	mov	r0, r3
 800e718:	f7f2 fb14 	bl	8000d44 <__aeabi_fmul>
 800e71c:	4603      	mov	r3, r0
 800e71e:	4619      	mov	r1, r3
 800e720:	4620      	mov	r0, r4
 800e722:	f7f2 fa07 	bl	8000b34 <__addsf3>
 800e726:	4603      	mov	r3, r0
 800e728:	461c      	mov	r4, r3
 800e72a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e72c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e72e:	f7f2 fb09 	bl	8000d44 <__aeabi_fmul>
 800e732:	4603      	mov	r3, r0
 800e734:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e736:	4618      	mov	r0, r3
 800e738:	f7f2 fb04 	bl	8000d44 <__aeabi_fmul>
 800e73c:	4603      	mov	r3, r0
 800e73e:	4619      	mov	r1, r3
 800e740:	4620      	mov	r0, r4
 800e742:	f7f2 f9f5 	bl	8000b30 <__aeabi_fsub>
 800e746:	4603      	mov	r3, r0
 800e748:	461c      	mov	r4, r3
 800e74a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e74c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e750:	f7f2 faf8 	bl	8000d44 <__aeabi_fmul>
 800e754:	4603      	mov	r3, r0
 800e756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e758:	4618      	mov	r0, r3
 800e75a:	f7f2 faf3 	bl	8000d44 <__aeabi_fmul>
 800e75e:	4603      	mov	r3, r0
 800e760:	4619      	mov	r1, r3
 800e762:	4620      	mov	r0, r4
 800e764:	f7f2 f9e6 	bl	8000b34 <__addsf3>
 800e768:	4603      	mov	r3, r0
 800e76a:	461c      	mov	r4, r3
 800e76c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e76e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e772:	f7f2 fae7 	bl	8000d44 <__aeabi_fmul>
 800e776:	4603      	mov	r3, r0
 800e778:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7f2 fae2 	bl	8000d44 <__aeabi_fmul>
 800e780:	4603      	mov	r3, r0
 800e782:	4619      	mov	r1, r3
 800e784:	4620      	mov	r0, r4
 800e786:	f7f2 f9d3 	bl	8000b30 <__aeabi_fsub>
 800e78a:	4603      	mov	r3, r0
 800e78c:	461c      	mov	r4, r3
 800e78e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e790:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e792:	f7f2 fad7 	bl	8000d44 <__aeabi_fmul>
 800e796:	4603      	mov	r3, r0
 800e798:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7f2 fad2 	bl	8000d44 <__aeabi_fmul>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f7f2 f9c3 	bl	8000b30 <__aeabi_fsub>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	461c      	mov	r4, r3
 800e7ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e7b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e7b2:	f7f2 fac7 	bl	8000d44 <__aeabi_fmul>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f2 fac2 	bl	8000d44 <__aeabi_fmul>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f7f2 f9b5 	bl	8000b34 <__addsf3>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	461c      	mov	r4, r3
 800e7ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e7d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e7d2:	f7f2 fab7 	bl	8000d44 <__aeabi_fmul>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7f2 fab2 	bl	8000d44 <__aeabi_fmul>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f7f2 f9a5 	bl	8000b34 <__addsf3>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	461c      	mov	r4, r3
 800e7ee:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e7f0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e7f2:	f7f2 faa7 	bl	8000d44 <__aeabi_fmul>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7f2 faa2 	bl	8000d44 <__aeabi_fmul>
 800e800:	4603      	mov	r3, r0
 800e802:	4619      	mov	r1, r3
 800e804:	4620      	mov	r0, r4
 800e806:	f7f2 f993 	bl	8000b30 <__aeabi_fsub>
 800e80a:	4603      	mov	r3, r0
 800e80c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f2 fb4c 	bl	8000eac <__aeabi_fdiv>
 800e814:	4603      	mov	r3, r0
 800e816:	60fb      	str	r3, [r7, #12]
	float Kt43=(Qap*Qgps*S4_2 + Qap*S1_1*S4_2 - Qap*S1_2*S4_1 - Qgps*S3_2*S4_3 + Qgps*S3_3*S4_2 - Qgps*S3_2*S4_4 + Qgps*S3_4*S4_2 - S1_1*S3_2*S4_3 + S1_1*S3_3*S4_2 + S1_2*S3_1*S4_3 - S1_2*S3_3*S4_1 - S1_3*S3_1*S4_2 + S1_3*S3_2*S4_1 - S1_1*S3_2*S4_4 + S1_1*S3_4*S4_2 + S1_2*S3_1*S4_4 - S1_2*S3_4*S4_1 - S1_4*S3_1*S4_2 + S1_4*S3_2*S4_1)/A;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e824:	4619      	mov	r1, r3
 800e826:	4610      	mov	r0, r2
 800e828:	f7f2 fa8c 	bl	8000d44 <__aeabi_fmul>
 800e82c:	4603      	mov	r3, r0
 800e82e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e830:	4618      	mov	r0, r3
 800e832:	f7f2 fa87 	bl	8000d44 <__aeabi_fmul>
 800e836:	4603      	mov	r3, r0
 800e838:	461c      	mov	r4, r3
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e840:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e844:	4618      	mov	r0, r3
 800e846:	f7f2 fa7d 	bl	8000d44 <__aeabi_fmul>
 800e84a:	4603      	mov	r3, r0
 800e84c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e84e:	4618      	mov	r0, r3
 800e850:	f7f2 fa78 	bl	8000d44 <__aeabi_fmul>
 800e854:	4603      	mov	r3, r0
 800e856:	4619      	mov	r1, r3
 800e858:	4620      	mov	r0, r4
 800e85a:	f7f2 f96b 	bl	8000b34 <__addsf3>
 800e85e:	4603      	mov	r3, r0
 800e860:	461c      	mov	r4, r3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7f2 fa6a 	bl	8000d44 <__aeabi_fmul>
 800e870:	4603      	mov	r3, r0
 800e872:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e874:	4618      	mov	r0, r3
 800e876:	f7f2 fa65 	bl	8000d44 <__aeabi_fmul>
 800e87a:	4603      	mov	r3, r0
 800e87c:	4619      	mov	r1, r3
 800e87e:	4620      	mov	r0, r4
 800e880:	f7f2 f956 	bl	8000b30 <__aeabi_fsub>
 800e884:	4603      	mov	r3, r0
 800e886:	461c      	mov	r4, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e88e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e890:	4618      	mov	r0, r3
 800e892:	f7f2 fa57 	bl	8000d44 <__aeabi_fmul>
 800e896:	4603      	mov	r3, r0
 800e898:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7f2 fa52 	bl	8000d44 <__aeabi_fmul>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f7f2 f943 	bl	8000b30 <__aeabi_fsub>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	461c      	mov	r4, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e8b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f2 fa44 	bl	8000d44 <__aeabi_fmul>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7f2 fa3f 	bl	8000d44 <__aeabi_fmul>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f7f2 f932 	bl	8000b34 <__addsf3>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	461c      	mov	r4, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e8da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7f2 fa31 	bl	8000d44 <__aeabi_fmul>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7f2 fa2c 	bl	8000d44 <__aeabi_fmul>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f7f2 f91d 	bl	8000b30 <__aeabi_fsub>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	461c      	mov	r4, r3
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e900:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e902:	4618      	mov	r0, r3
 800e904:	f7f2 fa1e 	bl	8000d44 <__aeabi_fmul>
 800e908:	4603      	mov	r3, r0
 800e90a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7f2 fa19 	bl	8000d44 <__aeabi_fmul>
 800e912:	4603      	mov	r3, r0
 800e914:	4619      	mov	r1, r3
 800e916:	4620      	mov	r0, r4
 800e918:	f7f2 f90c 	bl	8000b34 <__addsf3>
 800e91c:	4603      	mov	r3, r0
 800e91e:	461c      	mov	r4, r3
 800e920:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e922:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e926:	f7f2 fa0d 	bl	8000d44 <__aeabi_fmul>
 800e92a:	4603      	mov	r3, r0
 800e92c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f2 fa08 	bl	8000d44 <__aeabi_fmul>
 800e934:	4603      	mov	r3, r0
 800e936:	4619      	mov	r1, r3
 800e938:	4620      	mov	r0, r4
 800e93a:	f7f2 f8f9 	bl	8000b30 <__aeabi_fsub>
 800e93e:	4603      	mov	r3, r0
 800e940:	461c      	mov	r4, r3
 800e942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e944:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e948:	f7f2 f9fc 	bl	8000d44 <__aeabi_fmul>
 800e94c:	4603      	mov	r3, r0
 800e94e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e950:	4618      	mov	r0, r3
 800e952:	f7f2 f9f7 	bl	8000d44 <__aeabi_fmul>
 800e956:	4603      	mov	r3, r0
 800e958:	4619      	mov	r1, r3
 800e95a:	4620      	mov	r0, r4
 800e95c:	f7f2 f8ea 	bl	8000b34 <__addsf3>
 800e960:	4603      	mov	r3, r0
 800e962:	461c      	mov	r4, r3
 800e964:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e966:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e968:	f7f2 f9ec 	bl	8000d44 <__aeabi_fmul>
 800e96c:	4603      	mov	r3, r0
 800e96e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e970:	4618      	mov	r0, r3
 800e972:	f7f2 f9e7 	bl	8000d44 <__aeabi_fmul>
 800e976:	4603      	mov	r3, r0
 800e978:	4619      	mov	r1, r3
 800e97a:	4620      	mov	r0, r4
 800e97c:	f7f2 f8da 	bl	8000b34 <__addsf3>
 800e980:	4603      	mov	r3, r0
 800e982:	461c      	mov	r4, r3
 800e984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e986:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e988:	f7f2 f9dc 	bl	8000d44 <__aeabi_fmul>
 800e98c:	4603      	mov	r3, r0
 800e98e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e990:	4618      	mov	r0, r3
 800e992:	f7f2 f9d7 	bl	8000d44 <__aeabi_fmul>
 800e996:	4603      	mov	r3, r0
 800e998:	4619      	mov	r1, r3
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7f2 f8c8 	bl	8000b30 <__aeabi_fsub>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	461c      	mov	r4, r3
 800e9a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9a6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e9a8:	f7f2 f9cc 	bl	8000d44 <__aeabi_fmul>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7f2 f9c7 	bl	8000d44 <__aeabi_fmul>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f7f2 f8b8 	bl	8000b30 <__aeabi_fsub>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	461c      	mov	r4, r3
 800e9c4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e9c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e9c8:	f7f2 f9bc 	bl	8000d44 <__aeabi_fmul>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7f2 f9b7 	bl	8000d44 <__aeabi_fmul>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f7f2 f8aa 	bl	8000b34 <__addsf3>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	461c      	mov	r4, r3
 800e9e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e9e6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e9ea:	f7f2 f9ab 	bl	8000d44 <__aeabi_fmul>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7f2 f9a6 	bl	8000d44 <__aeabi_fmul>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f7f2 f897 	bl	8000b30 <__aeabi_fsub>
 800ea02:	4603      	mov	r3, r0
 800ea04:	461c      	mov	r4, r3
 800ea06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea08:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ea0c:	f7f2 f99a 	bl	8000d44 <__aeabi_fmul>
 800ea10:	4603      	mov	r3, r0
 800ea12:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7f2 f995 	bl	8000d44 <__aeabi_fmul>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	4620      	mov	r0, r4
 800ea20:	f7f2 f888 	bl	8000b34 <__addsf3>
 800ea24:	4603      	mov	r3, r0
 800ea26:	461c      	mov	r4, r3
 800ea28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea2a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ea2c:	f7f2 f98a 	bl	8000d44 <__aeabi_fmul>
 800ea30:	4603      	mov	r3, r0
 800ea32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7f2 f985 	bl	8000d44 <__aeabi_fmul>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4620      	mov	r0, r4
 800ea40:	f7f2 f878 	bl	8000b34 <__addsf3>
 800ea44:	4603      	mov	r3, r0
 800ea46:	461c      	mov	r4, r3
 800ea48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ea4c:	f7f2 f97a 	bl	8000d44 <__aeabi_fmul>
 800ea50:	4603      	mov	r3, r0
 800ea52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f2 f975 	bl	8000d44 <__aeabi_fmul>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f7f2 f866 	bl	8000b30 <__aeabi_fsub>
 800ea64:	4603      	mov	r3, r0
 800ea66:	461c      	mov	r4, r3
 800ea68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ea6c:	f7f2 f96a 	bl	8000d44 <__aeabi_fmul>
 800ea70:	4603      	mov	r3, r0
 800ea72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7f2 f965 	bl	8000d44 <__aeabi_fmul>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f7f2 f856 	bl	8000b30 <__aeabi_fsub>
 800ea84:	4603      	mov	r3, r0
 800ea86:	461c      	mov	r4, r3
 800ea88:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ea8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ea8c:	f7f2 f95a 	bl	8000d44 <__aeabi_fmul>
 800ea90:	4603      	mov	r3, r0
 800ea92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7f2 f955 	bl	8000d44 <__aeabi_fmul>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f7f2 f848 	bl	8000b34 <__addsf3>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7f2 f9ff 	bl	8000eac <__aeabi_fdiv>
 800eaae:	4603      	mov	r3, r0
 800eab0:	60bb      	str	r3, [r7, #8]

	pos = pos - Kt13*(vel - vgps) - Kt11*(pos - pos_gps) - Kt12*(a - accm + b);
 800eab2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800eab6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800eaba:	f7f2 f839 	bl	8000b30 <__aeabi_fsub>
 800eabe:	4603      	mov	r3, r0
 800eac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f2 f93e 	bl	8000d44 <__aeabi_fmul>
 800eac8:	4603      	mov	r3, r0
 800eaca:	4619      	mov	r1, r3
 800eacc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ead0:	f7f2 f82e 	bl	8000b30 <__aeabi_fsub>
 800ead4:	4603      	mov	r3, r0
 800ead6:	461c      	mov	r4, r3
 800ead8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800eadc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800eae0:	f7f2 f826 	bl	8000b30 <__aeabi_fsub>
 800eae4:	4603      	mov	r3, r0
 800eae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7f2 f92b 	bl	8000d44 <__aeabi_fmul>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f7f2 f81c 	bl	8000b30 <__aeabi_fsub>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	461c      	mov	r4, r3
 800eafc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800eb00:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800eb04:	f7f2 f814 	bl	8000b30 <__aeabi_fsub>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7f2 f810 	bl	8000b34 <__addsf3>
 800eb14:	4603      	mov	r3, r0
 800eb16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7f2 f913 	bl	8000d44 <__aeabi_fmul>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	4619      	mov	r1, r3
 800eb22:	4620      	mov	r0, r4
 800eb24:	f7f2 f804 	bl	8000b30 <__aeabi_fsub>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	vel = vel - Kt23*(vel - vgps) - Kt21*(pos - pos_gps) - Kt22*(a - accm + b);
 800eb2e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800eb32:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800eb36:	f7f1 fffb 	bl	8000b30 <__aeabi_fsub>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	6a39      	ldr	r1, [r7, #32]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7f2 f900 	bl	8000d44 <__aeabi_fmul>
 800eb44:	4603      	mov	r3, r0
 800eb46:	4619      	mov	r1, r3
 800eb48:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800eb4c:	f7f1 fff0 	bl	8000b30 <__aeabi_fsub>
 800eb50:	4603      	mov	r3, r0
 800eb52:	461c      	mov	r4, r3
 800eb54:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800eb58:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800eb5c:	f7f1 ffe8 	bl	8000b30 <__aeabi_fsub>
 800eb60:	4603      	mov	r3, r0
 800eb62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7f2 f8ed 	bl	8000d44 <__aeabi_fmul>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f7f1 ffde 	bl	8000b30 <__aeabi_fsub>
 800eb74:	4603      	mov	r3, r0
 800eb76:	461c      	mov	r4, r3
 800eb78:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800eb7c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800eb80:	f7f1 ffd6 	bl	8000b30 <__aeabi_fsub>
 800eb84:	4603      	mov	r3, r0
 800eb86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7f1 ffd2 	bl	8000b34 <__addsf3>
 800eb90:	4603      	mov	r3, r0
 800eb92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7f2 f8d5 	bl	8000d44 <__aeabi_fmul>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7f1 ffc6 	bl	8000b30 <__aeabi_fsub>
 800eba4:	4603      	mov	r3, r0
 800eba6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	a = a - Kt33*(vel - vgps) - Kt31*(pos - pos_gps) - Kt32*(a - accm + b);
 800ebaa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ebae:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ebb2:	f7f1 ffbd 	bl	8000b30 <__aeabi_fsub>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	6979      	ldr	r1, [r7, #20]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7f2 f8c2 	bl	8000d44 <__aeabi_fmul>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800ebc8:	f7f1 ffb2 	bl	8000b30 <__aeabi_fsub>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	461c      	mov	r4, r3
 800ebd0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ebd4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ebd8:	f7f1 ffaa 	bl	8000b30 <__aeabi_fsub>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	69f9      	ldr	r1, [r7, #28]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f2 f8af 	bl	8000d44 <__aeabi_fmul>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4620      	mov	r0, r4
 800ebec:	f7f1 ffa0 	bl	8000b30 <__aeabi_fsub>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	461c      	mov	r4, r3
 800ebf4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ebf8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800ebfc:	f7f1 ff98 	bl	8000b30 <__aeabi_fsub>
 800ec00:	4603      	mov	r3, r0
 800ec02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7f1 ff94 	bl	8000b34 <__addsf3>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	69b9      	ldr	r1, [r7, #24]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7f2 f897 	bl	8000d44 <__aeabi_fmul>
 800ec16:	4603      	mov	r3, r0
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f7f1 ff88 	bl	8000b30 <__aeabi_fsub>
 800ec20:	4603      	mov	r3, r0
 800ec22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	b = b - Kt43*(vel - vgps) - Kt41*(pos - pos_gps) - Kt42*(a - accm + b);
 800ec26:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ec2a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ec2e:	f7f1 ff7f 	bl	8000b30 <__aeabi_fsub>
 800ec32:	4603      	mov	r3, r0
 800ec34:	68b9      	ldr	r1, [r7, #8]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7f2 f884 	bl	8000d44 <__aeabi_fmul>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	4619      	mov	r1, r3
 800ec40:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ec44:	f7f1 ff74 	bl	8000b30 <__aeabi_fsub>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	461c      	mov	r4, r3
 800ec4c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ec50:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ec54:	f7f1 ff6c 	bl	8000b30 <__aeabi_fsub>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	6939      	ldr	r1, [r7, #16]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7f2 f871 	bl	8000d44 <__aeabi_fmul>
 800ec62:	4603      	mov	r3, r0
 800ec64:	4619      	mov	r1, r3
 800ec66:	4620      	mov	r0, r4
 800ec68:	f7f1 ff62 	bl	8000b30 <__aeabi_fsub>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	461c      	mov	r4, r3
 800ec70:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ec74:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800ec78:	f7f1 ff5a 	bl	8000b30 <__aeabi_fsub>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f1 ff56 	bl	8000b34 <__addsf3>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	68f9      	ldr	r1, [r7, #12]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7f2 f859 	bl	8000d44 <__aeabi_fmul>
 800ec92:	4603      	mov	r3, r0
 800ec94:	4619      	mov	r1, r3
 800ec96:	4620      	mov	r0, r4
 800ec98:	f7f1 ff4a 	bl	8000b30 <__aeabi_fsub>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	S1_1=- S1_1*(Kt11 - 1) - Kt13*S2_1 - Kt12*S3_1 - Kt12*S4_1;
 800eca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eca6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ecaa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ecae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecb0:	f7f1 ff3e 	bl	8000b30 <__aeabi_fsub>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f7f2 f843 	bl	8000d44 <__aeabi_fmul>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	461c      	mov	r4, r3
 800ecc2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ecc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecc6:	f7f2 f83d 	bl	8000d44 <__aeabi_fmul>
 800ecca:	4603      	mov	r3, r0
 800eccc:	4619      	mov	r1, r3
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f7f1 ff2e 	bl	8000b30 <__aeabi_fsub>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	461c      	mov	r4, r3
 800ecd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecdc:	f7f2 f832 	bl	8000d44 <__aeabi_fmul>
 800ece0:	4603      	mov	r3, r0
 800ece2:	4619      	mov	r1, r3
 800ece4:	4620      	mov	r0, r4
 800ece6:	f7f1 ff23 	bl	8000b30 <__aeabi_fsub>
 800ecea:	4603      	mov	r3, r0
 800ecec:	461c      	mov	r4, r3
 800ecee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ecf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecf2:	f7f2 f827 	bl	8000d44 <__aeabi_fmul>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7f1 ff18 	bl	8000b30 <__aeabi_fsub>
 800ed00:	4603      	mov	r3, r0
 800ed02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	S1_2=- S1_2*(Kt11 - 1) - Kt13*S2_2 - Kt12*S3_2 - Kt12*S4_2;
 800ed06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed08:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ed0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ed10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed12:	f7f1 ff0d 	bl	8000b30 <__aeabi_fsub>
 800ed16:	4603      	mov	r3, r0
 800ed18:	4619      	mov	r1, r3
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f7f2 f812 	bl	8000d44 <__aeabi_fmul>
 800ed20:	4603      	mov	r3, r0
 800ed22:	461c      	mov	r4, r3
 800ed24:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ed26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed28:	f7f2 f80c 	bl	8000d44 <__aeabi_fmul>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4620      	mov	r0, r4
 800ed32:	f7f1 fefd 	bl	8000b30 <__aeabi_fsub>
 800ed36:	4603      	mov	r3, r0
 800ed38:	461c      	mov	r4, r3
 800ed3a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ed3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed3e:	f7f2 f801 	bl	8000d44 <__aeabi_fmul>
 800ed42:	4603      	mov	r3, r0
 800ed44:	4619      	mov	r1, r3
 800ed46:	4620      	mov	r0, r4
 800ed48:	f7f1 fef2 	bl	8000b30 <__aeabi_fsub>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	461c      	mov	r4, r3
 800ed50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ed52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed54:	f7f1 fff6 	bl	8000d44 <__aeabi_fmul>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f7f1 fee7 	bl	8000b30 <__aeabi_fsub>
 800ed62:	4603      	mov	r3, r0
 800ed64:	67fb      	str	r3, [r7, #124]	; 0x7c
	S1_3=- S1_3*(Kt11 - 1) - Kt13*S2_3 - Kt12*S3_3 - Kt12*S4_3;
 800ed66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed68:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ed6c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ed70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed72:	f7f1 fedd 	bl	8000b30 <__aeabi_fsub>
 800ed76:	4603      	mov	r3, r0
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f7f1 ffe2 	bl	8000d44 <__aeabi_fmul>
 800ed80:	4603      	mov	r3, r0
 800ed82:	461c      	mov	r4, r3
 800ed84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ed86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed88:	f7f1 ffdc 	bl	8000d44 <__aeabi_fmul>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	4619      	mov	r1, r3
 800ed90:	4620      	mov	r0, r4
 800ed92:	f7f1 fecd 	bl	8000b30 <__aeabi_fsub>
 800ed96:	4603      	mov	r3, r0
 800ed98:	461c      	mov	r4, r3
 800ed9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed9e:	f7f1 ffd1 	bl	8000d44 <__aeabi_fmul>
 800eda2:	4603      	mov	r3, r0
 800eda4:	4619      	mov	r1, r3
 800eda6:	4620      	mov	r0, r4
 800eda8:	f7f1 fec2 	bl	8000b30 <__aeabi_fsub>
 800edac:	4603      	mov	r3, r0
 800edae:	461c      	mov	r4, r3
 800edb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edb4:	f7f1 ffc6 	bl	8000d44 <__aeabi_fmul>
 800edb8:	4603      	mov	r3, r0
 800edba:	4619      	mov	r1, r3
 800edbc:	4620      	mov	r0, r4
 800edbe:	f7f1 feb7 	bl	8000b30 <__aeabi_fsub>
 800edc2:	4603      	mov	r3, r0
 800edc4:	67bb      	str	r3, [r7, #120]	; 0x78
	S1_4=- S1_4*(Kt11 - 1) - Kt13*S2_4 - Kt12*S3_4 - Kt12*S4_4;
 800edc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edc8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800edcc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800edd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edd2:	f7f1 fead 	bl	8000b30 <__aeabi_fsub>
 800edd6:	4603      	mov	r3, r0
 800edd8:	4619      	mov	r1, r3
 800edda:	4620      	mov	r0, r4
 800eddc:	f7f1 ffb2 	bl	8000d44 <__aeabi_fmul>
 800ede0:	4603      	mov	r3, r0
 800ede2:	461c      	mov	r4, r3
 800ede4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ede6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ede8:	f7f1 ffac 	bl	8000d44 <__aeabi_fmul>
 800edec:	4603      	mov	r3, r0
 800edee:	4619      	mov	r1, r3
 800edf0:	4620      	mov	r0, r4
 800edf2:	f7f1 fe9d 	bl	8000b30 <__aeabi_fsub>
 800edf6:	4603      	mov	r3, r0
 800edf8:	461c      	mov	r4, r3
 800edfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800edfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edfe:	f7f1 ffa1 	bl	8000d44 <__aeabi_fmul>
 800ee02:	4603      	mov	r3, r0
 800ee04:	4619      	mov	r1, r3
 800ee06:	4620      	mov	r0, r4
 800ee08:	f7f1 fe92 	bl	8000b30 <__aeabi_fsub>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	461c      	mov	r4, r3
 800ee10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee14:	f7f1 ff96 	bl	8000d44 <__aeabi_fmul>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f7f1 fe87 	bl	8000b30 <__aeabi_fsub>
 800ee22:	4603      	mov	r3, r0
 800ee24:	677b      	str	r3, [r7, #116]	; 0x74
	S2_1=- S2_1*(Kt23 - 1) - Kt21*S1_1 - Kt22*S3_1 - Kt22*S4_1;
 800ee26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee28:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ee2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ee30:	6a38      	ldr	r0, [r7, #32]
 800ee32:	f7f1 fe7d 	bl	8000b30 <__aeabi_fsub>
 800ee36:	4603      	mov	r3, r0
 800ee38:	4619      	mov	r1, r3
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7f1 ff82 	bl	8000d44 <__aeabi_fmul>
 800ee40:	4603      	mov	r3, r0
 800ee42:	461c      	mov	r4, r3
 800ee44:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ee48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee4a:	f7f1 ff7b 	bl	8000d44 <__aeabi_fmul>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	4619      	mov	r1, r3
 800ee52:	4620      	mov	r0, r4
 800ee54:	f7f1 fe6c 	bl	8000b30 <__aeabi_fsub>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	461c      	mov	r4, r3
 800ee5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ee5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee60:	f7f1 ff70 	bl	8000d44 <__aeabi_fmul>
 800ee64:	4603      	mov	r3, r0
 800ee66:	4619      	mov	r1, r3
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f7f1 fe61 	bl	8000b30 <__aeabi_fsub>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	461c      	mov	r4, r3
 800ee72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee76:	f7f1 ff65 	bl	8000d44 <__aeabi_fmul>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f7f1 fe56 	bl	8000b30 <__aeabi_fsub>
 800ee84:	4603      	mov	r3, r0
 800ee86:	673b      	str	r3, [r7, #112]	; 0x70
	S2_2=- S2_2*(Kt23 - 1) - Kt21*S1_2 - Kt22*S3_2 - Kt22*S4_2;
 800ee88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee8a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ee8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ee92:	6a38      	ldr	r0, [r7, #32]
 800ee94:	f7f1 fe4c 	bl	8000b30 <__aeabi_fsub>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f7f1 ff51 	bl	8000d44 <__aeabi_fmul>
 800eea2:	4603      	mov	r3, r0
 800eea4:	461c      	mov	r4, r3
 800eea6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeaa:	f7f1 ff4b 	bl	8000d44 <__aeabi_fmul>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f7f1 fe3c 	bl	8000b30 <__aeabi_fsub>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	461c      	mov	r4, r3
 800eebc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800eebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eec0:	f7f1 ff40 	bl	8000d44 <__aeabi_fmul>
 800eec4:	4603      	mov	r3, r0
 800eec6:	4619      	mov	r1, r3
 800eec8:	4620      	mov	r0, r4
 800eeca:	f7f1 fe31 	bl	8000b30 <__aeabi_fsub>
 800eece:	4603      	mov	r3, r0
 800eed0:	461c      	mov	r4, r3
 800eed2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800eed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eed6:	f7f1 ff35 	bl	8000d44 <__aeabi_fmul>
 800eeda:	4603      	mov	r3, r0
 800eedc:	4619      	mov	r1, r3
 800eede:	4620      	mov	r0, r4
 800eee0:	f7f1 fe26 	bl	8000b30 <__aeabi_fsub>
 800eee4:	4603      	mov	r3, r0
 800eee6:	66fb      	str	r3, [r7, #108]	; 0x6c
	S2_3=- S2_3*(Kt23 - 1) - Kt21*S1_3 - Kt22*S3_3 - Kt22*S4_3;
 800eee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eeea:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800eeee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eef2:	6a38      	ldr	r0, [r7, #32]
 800eef4:	f7f1 fe1c 	bl	8000b30 <__aeabi_fsub>
 800eef8:	4603      	mov	r3, r0
 800eefa:	4619      	mov	r1, r3
 800eefc:	4620      	mov	r0, r4
 800eefe:	f7f1 ff21 	bl	8000d44 <__aeabi_fmul>
 800ef02:	4603      	mov	r3, r0
 800ef04:	461c      	mov	r4, r3
 800ef06:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ef08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef0a:	f7f1 ff1b 	bl	8000d44 <__aeabi_fmul>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	4619      	mov	r1, r3
 800ef12:	4620      	mov	r0, r4
 800ef14:	f7f1 fe0c 	bl	8000b30 <__aeabi_fsub>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	461c      	mov	r4, r3
 800ef1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef20:	f7f1 ff10 	bl	8000d44 <__aeabi_fmul>
 800ef24:	4603      	mov	r3, r0
 800ef26:	4619      	mov	r1, r3
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f7f1 fe01 	bl	8000b30 <__aeabi_fsub>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	461c      	mov	r4, r3
 800ef32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ef34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef36:	f7f1 ff05 	bl	8000d44 <__aeabi_fmul>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f7f1 fdf6 	bl	8000b30 <__aeabi_fsub>
 800ef44:	4603      	mov	r3, r0
 800ef46:	66bb      	str	r3, [r7, #104]	; 0x68
	S2_4=- S2_4*(Kt23 - 1) - Kt21*S1_4 - Kt22*S3_4 - Kt22*S4_4;
 800ef48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef4a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ef4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ef52:	6a38      	ldr	r0, [r7, #32]
 800ef54:	f7f1 fdec 	bl	8000b30 <__aeabi_fsub>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f7f1 fef1 	bl	8000d44 <__aeabi_fmul>
 800ef62:	4603      	mov	r3, r0
 800ef64:	461c      	mov	r4, r3
 800ef66:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ef68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef6a:	f7f1 feeb 	bl	8000d44 <__aeabi_fmul>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	4619      	mov	r1, r3
 800ef72:	4620      	mov	r0, r4
 800ef74:	f7f1 fddc 	bl	8000b30 <__aeabi_fsub>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	461c      	mov	r4, r3
 800ef7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef80:	f7f1 fee0 	bl	8000d44 <__aeabi_fmul>
 800ef84:	4603      	mov	r3, r0
 800ef86:	4619      	mov	r1, r3
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f7f1 fdd1 	bl	8000b30 <__aeabi_fsub>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	461c      	mov	r4, r3
 800ef92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef96:	f7f1 fed5 	bl	8000d44 <__aeabi_fmul>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7f1 fdc6 	bl	8000b30 <__aeabi_fsub>
 800efa4:	4603      	mov	r3, r0
 800efa6:	667b      	str	r3, [r7, #100]	; 0x64
	S3_1=- S3_1*(Kt32 - 1) - Kt31*S1_1 - Kt33*S2_1 - Kt32*S4_1;
 800efa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efaa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800efae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800efb2:	69b8      	ldr	r0, [r7, #24]
 800efb4:	f7f1 fdbc 	bl	8000b30 <__aeabi_fsub>
 800efb8:	4603      	mov	r3, r0
 800efba:	4619      	mov	r1, r3
 800efbc:	4620      	mov	r0, r4
 800efbe:	f7f1 fec1 	bl	8000d44 <__aeabi_fmul>
 800efc2:	4603      	mov	r3, r0
 800efc4:	461c      	mov	r4, r3
 800efc6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800efca:	69f8      	ldr	r0, [r7, #28]
 800efcc:	f7f1 feba 	bl	8000d44 <__aeabi_fmul>
 800efd0:	4603      	mov	r3, r0
 800efd2:	4619      	mov	r1, r3
 800efd4:	4620      	mov	r0, r4
 800efd6:	f7f1 fdab 	bl	8000b30 <__aeabi_fsub>
 800efda:	4603      	mov	r3, r0
 800efdc:	461c      	mov	r4, r3
 800efde:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800efe0:	6978      	ldr	r0, [r7, #20]
 800efe2:	f7f1 feaf 	bl	8000d44 <__aeabi_fmul>
 800efe6:	4603      	mov	r3, r0
 800efe8:	4619      	mov	r1, r3
 800efea:	4620      	mov	r0, r4
 800efec:	f7f1 fda0 	bl	8000b30 <__aeabi_fsub>
 800eff0:	4603      	mov	r3, r0
 800eff2:	461c      	mov	r4, r3
 800eff4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eff6:	69b8      	ldr	r0, [r7, #24]
 800eff8:	f7f1 fea4 	bl	8000d44 <__aeabi_fmul>
 800effc:	4603      	mov	r3, r0
 800effe:	4619      	mov	r1, r3
 800f000:	4620      	mov	r0, r4
 800f002:	f7f1 fd95 	bl	8000b30 <__aeabi_fsub>
 800f006:	4603      	mov	r3, r0
 800f008:	663b      	str	r3, [r7, #96]	; 0x60
	S3_2=- S3_2*(Kt32 - 1) - Kt31*S1_2 - Kt33*S2_2 - Kt32*S4_2;
 800f00a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f00c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f010:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f014:	69b8      	ldr	r0, [r7, #24]
 800f016:	f7f1 fd8b 	bl	8000b30 <__aeabi_fsub>
 800f01a:	4603      	mov	r3, r0
 800f01c:	4619      	mov	r1, r3
 800f01e:	4620      	mov	r0, r4
 800f020:	f7f1 fe90 	bl	8000d44 <__aeabi_fmul>
 800f024:	4603      	mov	r3, r0
 800f026:	461c      	mov	r4, r3
 800f028:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f02a:	69f8      	ldr	r0, [r7, #28]
 800f02c:	f7f1 fe8a 	bl	8000d44 <__aeabi_fmul>
 800f030:	4603      	mov	r3, r0
 800f032:	4619      	mov	r1, r3
 800f034:	4620      	mov	r0, r4
 800f036:	f7f1 fd7b 	bl	8000b30 <__aeabi_fsub>
 800f03a:	4603      	mov	r3, r0
 800f03c:	461c      	mov	r4, r3
 800f03e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f040:	6978      	ldr	r0, [r7, #20]
 800f042:	f7f1 fe7f 	bl	8000d44 <__aeabi_fmul>
 800f046:	4603      	mov	r3, r0
 800f048:	4619      	mov	r1, r3
 800f04a:	4620      	mov	r0, r4
 800f04c:	f7f1 fd70 	bl	8000b30 <__aeabi_fsub>
 800f050:	4603      	mov	r3, r0
 800f052:	461c      	mov	r4, r3
 800f054:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f056:	69b8      	ldr	r0, [r7, #24]
 800f058:	f7f1 fe74 	bl	8000d44 <__aeabi_fmul>
 800f05c:	4603      	mov	r3, r0
 800f05e:	4619      	mov	r1, r3
 800f060:	4620      	mov	r0, r4
 800f062:	f7f1 fd65 	bl	8000b30 <__aeabi_fsub>
 800f066:	4603      	mov	r3, r0
 800f068:	65fb      	str	r3, [r7, #92]	; 0x5c
	S3_3=- S3_3*(Kt32 - 1) - Kt31*S1_3 - Kt33*S2_3 - Kt32*S4_3;
 800f06a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f06c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f070:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f074:	69b8      	ldr	r0, [r7, #24]
 800f076:	f7f1 fd5b 	bl	8000b30 <__aeabi_fsub>
 800f07a:	4603      	mov	r3, r0
 800f07c:	4619      	mov	r1, r3
 800f07e:	4620      	mov	r0, r4
 800f080:	f7f1 fe60 	bl	8000d44 <__aeabi_fmul>
 800f084:	4603      	mov	r3, r0
 800f086:	461c      	mov	r4, r3
 800f088:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f08a:	69f8      	ldr	r0, [r7, #28]
 800f08c:	f7f1 fe5a 	bl	8000d44 <__aeabi_fmul>
 800f090:	4603      	mov	r3, r0
 800f092:	4619      	mov	r1, r3
 800f094:	4620      	mov	r0, r4
 800f096:	f7f1 fd4b 	bl	8000b30 <__aeabi_fsub>
 800f09a:	4603      	mov	r3, r0
 800f09c:	461c      	mov	r4, r3
 800f09e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f0a0:	6978      	ldr	r0, [r7, #20]
 800f0a2:	f7f1 fe4f 	bl	8000d44 <__aeabi_fmul>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f7f1 fd40 	bl	8000b30 <__aeabi_fsub>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	461c      	mov	r4, r3
 800f0b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f0b6:	69b8      	ldr	r0, [r7, #24]
 800f0b8:	f7f1 fe44 	bl	8000d44 <__aeabi_fmul>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	4619      	mov	r1, r3
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f7f1 fd35 	bl	8000b30 <__aeabi_fsub>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	65bb      	str	r3, [r7, #88]	; 0x58
	S3_4=- S3_4*(Kt32 - 1) - Kt31*S1_4 - Kt33*S2_4 - Kt32*S4_4;
 800f0ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0cc:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f0d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f0d4:	69b8      	ldr	r0, [r7, #24]
 800f0d6:	f7f1 fd2b 	bl	8000b30 <__aeabi_fsub>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	4619      	mov	r1, r3
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f7f1 fe30 	bl	8000d44 <__aeabi_fmul>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	461c      	mov	r4, r3
 800f0e8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f0ea:	69f8      	ldr	r0, [r7, #28]
 800f0ec:	f7f1 fe2a 	bl	8000d44 <__aeabi_fmul>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7f1 fd1b 	bl	8000b30 <__aeabi_fsub>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	461c      	mov	r4, r3
 800f0fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f100:	6978      	ldr	r0, [r7, #20]
 800f102:	f7f1 fe1f 	bl	8000d44 <__aeabi_fmul>
 800f106:	4603      	mov	r3, r0
 800f108:	4619      	mov	r1, r3
 800f10a:	4620      	mov	r0, r4
 800f10c:	f7f1 fd10 	bl	8000b30 <__aeabi_fsub>
 800f110:	4603      	mov	r3, r0
 800f112:	461c      	mov	r4, r3
 800f114:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f116:	69b8      	ldr	r0, [r7, #24]
 800f118:	f7f1 fe14 	bl	8000d44 <__aeabi_fmul>
 800f11c:	4603      	mov	r3, r0
 800f11e:	4619      	mov	r1, r3
 800f120:	4620      	mov	r0, r4
 800f122:	f7f1 fd05 	bl	8000b30 <__aeabi_fsub>
 800f126:	4603      	mov	r3, r0
 800f128:	657b      	str	r3, [r7, #84]	; 0x54
	S4_1=- S4_1*(Kt42 - 1) - Kt41*S1_1 - Kt43*S2_1 - Kt42*S3_1;
 800f12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f12c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f130:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f7f1 fcfb 	bl	8000b30 <__aeabi_fsub>
 800f13a:	4603      	mov	r3, r0
 800f13c:	4619      	mov	r1, r3
 800f13e:	4620      	mov	r0, r4
 800f140:	f7f1 fe00 	bl	8000d44 <__aeabi_fmul>
 800f144:	4603      	mov	r3, r0
 800f146:	461c      	mov	r4, r3
 800f148:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f14c:	6938      	ldr	r0, [r7, #16]
 800f14e:	f7f1 fdf9 	bl	8000d44 <__aeabi_fmul>
 800f152:	4603      	mov	r3, r0
 800f154:	4619      	mov	r1, r3
 800f156:	4620      	mov	r0, r4
 800f158:	f7f1 fcea 	bl	8000b30 <__aeabi_fsub>
 800f15c:	4603      	mov	r3, r0
 800f15e:	461c      	mov	r4, r3
 800f160:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f162:	68b8      	ldr	r0, [r7, #8]
 800f164:	f7f1 fdee 	bl	8000d44 <__aeabi_fmul>
 800f168:	4603      	mov	r3, r0
 800f16a:	4619      	mov	r1, r3
 800f16c:	4620      	mov	r0, r4
 800f16e:	f7f1 fcdf 	bl	8000b30 <__aeabi_fsub>
 800f172:	4603      	mov	r3, r0
 800f174:	461c      	mov	r4, r3
 800f176:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f7f1 fde3 	bl	8000d44 <__aeabi_fmul>
 800f17e:	4603      	mov	r3, r0
 800f180:	4619      	mov	r1, r3
 800f182:	4620      	mov	r0, r4
 800f184:	f7f1 fcd4 	bl	8000b30 <__aeabi_fsub>
 800f188:	4603      	mov	r3, r0
 800f18a:	653b      	str	r3, [r7, #80]	; 0x50
	S4_2=- S4_2*(Kt42 - 1) - Kt41*S1_2 - Kt43*S2_2 - Kt42*S3_2;
 800f18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f18e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f192:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f7f1 fcca 	bl	8000b30 <__aeabi_fsub>
 800f19c:	4603      	mov	r3, r0
 800f19e:	4619      	mov	r1, r3
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f7f1 fdcf 	bl	8000d44 <__aeabi_fmul>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	461c      	mov	r4, r3
 800f1aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f1ac:	6938      	ldr	r0, [r7, #16]
 800f1ae:	f7f1 fdc9 	bl	8000d44 <__aeabi_fmul>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f7f1 fcba 	bl	8000b30 <__aeabi_fsub>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	461c      	mov	r4, r3
 800f1c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f1c2:	68b8      	ldr	r0, [r7, #8]
 800f1c4:	f7f1 fdbe 	bl	8000d44 <__aeabi_fmul>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f7f1 fcaf 	bl	8000b30 <__aeabi_fsub>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	461c      	mov	r4, r3
 800f1d6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f7f1 fdb3 	bl	8000d44 <__aeabi_fmul>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f7f1 fca4 	bl	8000b30 <__aeabi_fsub>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	S4_3=- S4_3*(Kt42 - 1) - Kt41*S1_3 - Kt43*S2_3 - Kt42*S3_3;
 800f1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1ee:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f1f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f7f1 fc9a 	bl	8000b30 <__aeabi_fsub>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	4619      	mov	r1, r3
 800f200:	4620      	mov	r0, r4
 800f202:	f7f1 fd9f 	bl	8000d44 <__aeabi_fmul>
 800f206:	4603      	mov	r3, r0
 800f208:	461c      	mov	r4, r3
 800f20a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f20c:	6938      	ldr	r0, [r7, #16]
 800f20e:	f7f1 fd99 	bl	8000d44 <__aeabi_fmul>
 800f212:	4603      	mov	r3, r0
 800f214:	4619      	mov	r1, r3
 800f216:	4620      	mov	r0, r4
 800f218:	f7f1 fc8a 	bl	8000b30 <__aeabi_fsub>
 800f21c:	4603      	mov	r3, r0
 800f21e:	461c      	mov	r4, r3
 800f220:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f222:	68b8      	ldr	r0, [r7, #8]
 800f224:	f7f1 fd8e 	bl	8000d44 <__aeabi_fmul>
 800f228:	4603      	mov	r3, r0
 800f22a:	4619      	mov	r1, r3
 800f22c:	4620      	mov	r0, r4
 800f22e:	f7f1 fc7f 	bl	8000b30 <__aeabi_fsub>
 800f232:	4603      	mov	r3, r0
 800f234:	461c      	mov	r4, r3
 800f236:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f7f1 fd83 	bl	8000d44 <__aeabi_fmul>
 800f23e:	4603      	mov	r3, r0
 800f240:	4619      	mov	r1, r3
 800f242:	4620      	mov	r0, r4
 800f244:	f7f1 fc74 	bl	8000b30 <__aeabi_fsub>
 800f248:	4603      	mov	r3, r0
 800f24a:	64bb      	str	r3, [r7, #72]	; 0x48
	S4_4=- S4_4*(Kt42 - 1) - Kt41*S1_4 - Kt43*S2_4 - Kt42*S3_4;
 800f24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f24e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f252:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7f1 fc6a 	bl	8000b30 <__aeabi_fsub>
 800f25c:	4603      	mov	r3, r0
 800f25e:	4619      	mov	r1, r3
 800f260:	4620      	mov	r0, r4
 800f262:	f7f1 fd6f 	bl	8000d44 <__aeabi_fmul>
 800f266:	4603      	mov	r3, r0
 800f268:	461c      	mov	r4, r3
 800f26a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f26c:	6938      	ldr	r0, [r7, #16]
 800f26e:	f7f1 fd69 	bl	8000d44 <__aeabi_fmul>
 800f272:	4603      	mov	r3, r0
 800f274:	4619      	mov	r1, r3
 800f276:	4620      	mov	r0, r4
 800f278:	f7f1 fc5a 	bl	8000b30 <__aeabi_fsub>
 800f27c:	4603      	mov	r3, r0
 800f27e:	461c      	mov	r4, r3
 800f280:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f282:	68b8      	ldr	r0, [r7, #8]
 800f284:	f7f1 fd5e 	bl	8000d44 <__aeabi_fmul>
 800f288:	4603      	mov	r3, r0
 800f28a:	4619      	mov	r1, r3
 800f28c:	4620      	mov	r0, r4
 800f28e:	f7f1 fc4f 	bl	8000b30 <__aeabi_fsub>
 800f292:	4603      	mov	r3, r0
 800f294:	461c      	mov	r4, r3
 800f296:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f7f1 fd53 	bl	8000d44 <__aeabi_fmul>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f7f1 fc44 	bl	8000b30 <__aeabi_fsub>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	647b      	str	r3, [r7, #68]	; 0x44

	switch (axis) {
 800f2ac:	78fb      	ldrb	r3, [r7, #3]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d002      	beq.n	800f2b8 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2d9c>
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d056      	beq.n	800f364 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2e48>
			 Sp4_4y = S4_4 ;
			break;

	}

}
 800f2b6:	e0ab      	b.n	800f410 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2ef4>
			x = pos;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f2be:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
			vx = vel;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f2c8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			apx = a;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f2d2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			bax = b;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f2dc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			 Sp1_1x = S1_1;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			 Sp1_2x = S1_2;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f2ee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
			 Sp1_3x = S1_3 ;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f2f6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			 Sp1_4x = S1_4 ;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f2fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
			 Sp2_1x = S2_1 ;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f306:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			 Sp2_2x = S2_2;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f30e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			 Sp2_3x = S2_3 ;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f316:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
			 Sp2_4x = S2_4 ;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f31e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			 Sp3_1x = S3_1 ;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f326:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
			 Sp3_2x = S3_2 ;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f32e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			 Sp3_3x = S3_3 ;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f336:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			 Sp3_4x = S3_4 ;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f33e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			 Sp4_1x = S4_1;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f346:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			 Sp4_2x = S4_2;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f34e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			 Sp4_3x = S4_3 ;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f356:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			 Sp4_4x = S4_4 ;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f35e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			break;
 800f362:	e055      	b.n	800f410 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2ef4>
			y = pos;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f36a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			vy = vel;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f374:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
			apy = a;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f37e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
			bay = b;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f388:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
			 Sp1_1y = S1_1;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f392:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			 Sp1_2y = S1_2;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f39a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			 Sp1_3y = S1_3 ;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			 Sp1_4y = S1_4 ;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f3aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			 Sp2_1y = S2_1 ;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f3b2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			 Sp2_2y = S2_2;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f3ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
			 Sp2_3y = S2_3 ;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f3c2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			 Sp2_4y = S2_4 ;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f3ca:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			 Sp3_1y = S3_1 ;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f3d2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			 Sp3_2y = S3_2 ;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3da:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			 Sp3_3y = S3_3 ;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			 Sp3_4y = S3_4 ;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			 Sp4_1y = S4_1;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3f2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			 Sp4_2y = S4_2;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f3fa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			 Sp4_3y = S4_3 ;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f402:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			 Sp4_4y = S4_4 ;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f40a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
			break;
 800f40e:	bf00      	nop
}
 800f410:	bf00      	nop
 800f412:	37a0      	adds	r7, #160	; 0xa0
 800f414:	46bd      	mov	sp, r7
 800f416:	bdb0      	pop	{r4, r5, r7, pc}

0800f418 <_ZN15Kalman_Filtresi7EKF_PosEv>:

void Kalman_Filtresi::EKF_Pos() {
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]

	if(pos_ekf_counter == POS_EKF_RATE) { //50 Hz
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	2b04      	cmp	r3, #4
 800f426:	d146      	bne.n	800f4b6 <_ZN15Kalman_Filtresi7EKF_PosEv+0x9e>
		accx = acc_pos_x;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		accy = acc_pos_y;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		acc_pos_x_med = 0;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f04f 0200 	mov.w	r2, #0
 800f446:	601a      	str	r2, [r3, #0]
		pos_ekf_counter = 0;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	605a      	str	r2, [r3, #4]
		gps_ekf_counter++;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	1c5a      	adds	r2, r3, #1
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	609a      	str	r2, [r3, #8]

		if(gps_fixed) {
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d01a      	beq.n	800f498 <_ZN15Kalman_Filtresi7EKF_PosEv+0x80>

			if(	gps_ekf_counter >= 10) {	//5 Hz
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	2b09      	cmp	r3, #9
 800f468:	d90e      	bls.n	800f488 <_ZN15Kalman_Filtresi7EKF_PosEv+0x70>
				NED2Body();
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 ff9c 	bl	80103a8 <_ZN15Kalman_Filtresi8NED2BodyEv>

				gps_ekf_counter = 0;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	609a      	str	r2, [r3, #8]
				Qgps = 4.0;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800f47c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 80;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a0f      	ldr	r2, [pc, #60]	; (800f4c0 <_ZN15Kalman_Filtresi7EKF_PosEv+0xa8>)
 800f484:	60da      	str	r2, [r3, #12]
 800f486:	e00e      	b.n	800f4a6 <_ZN15Kalman_Filtresi7EKF_PosEv+0x8e>
			}

			else {
				Qgps = 1.0e9;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a0e      	ldr	r2, [pc, #56]	; (800f4c4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f48c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 1.0e9;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a0c      	ldr	r2, [pc, #48]	; (800f4c4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f494:	60da      	str	r2, [r3, #12]
 800f496:	e006      	b.n	800f4a6 <_ZN15Kalman_Filtresi7EKF_PosEv+0x8e>
			}

		}

		else {
				Qgps = 1.0e9;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a0a      	ldr	r2, [pc, #40]	; (800f4c4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f49c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 1.0e9;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a08      	ldr	r2, [pc, #32]	; (800f4c4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f4a4:	60da      	str	r2, [r3, #12]
					}

		PredictUpdatePos(x_axis);
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f7fd f837 	bl	800c51c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>
		PredictUpdatePos(y_axis);
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7fd f833 	bl	800c51c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>


	}


}
 800f4b6:	bf00      	nop
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	42a00000 	.word	0x42a00000
 800f4c4:	4e6e6b28 	.word	0x4e6e6b28

0800f4c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800f4c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4cc:	b09e      	sub	sp, #120	; 0x78
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float accY = acc[1];
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800f4e4:	63bb      	str	r3, [r7, #56]	; 0x38
	  float accZ = acc[2];
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800f4ec:	637b      	str	r3, [r7, #52]	; 0x34

	  float gyroX = gyro[0];
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800f4f4:	633b      	str	r3, [r7, #48]	; 0x30
	  float gyroY = gyro[1];
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800f4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float gyroZ = gyro[2];
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800f504:	62bb      	str	r3, [r7, #40]	; 0x28

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800f506:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f508:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f50a:	f7f1 fc1b 	bl	8000d44 <__aeabi_fmul>
 800f50e:	4603      	mov	r3, r0
 800f510:	461c      	mov	r4, r3
 800f512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f514:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f516:	f7f1 fc15 	bl	8000d44 <__aeabi_fmul>
 800f51a:	4603      	mov	r3, r0
 800f51c:	4619      	mov	r1, r3
 800f51e:	4620      	mov	r0, r4
 800f520:	f7f1 fb08 	bl	8000b34 <__addsf3>
 800f524:	4603      	mov	r3, r0
 800f526:	461c      	mov	r4, r3
 800f528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f52a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f52c:	f7f1 fc0a 	bl	8000d44 <__aeabi_fmul>
 800f530:	4603      	mov	r3, r0
 800f532:	4619      	mov	r1, r3
 800f534:	4620      	mov	r0, r4
 800f536:	f7f1 fafd 	bl	8000b34 <__addsf3>
 800f53a:	4603      	mov	r3, r0
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f3 fa8b 	bl	8002a58 <_ZSt4sqrtf>
 800f542:	6278      	str	r0, [r7, #36]	; 0x24

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800f544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f546:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f548:	f7f1 fcb0 	bl	8000eac <__aeabi_fdiv>
 800f54c:	4603      	mov	r3, r0
 800f54e:	4618      	mov	r0, r3
 800f550:	f7f3 fa5c 	bl	8002a0c <_ZSt4asinf>
 800f554:	4602      	mov	r2, r0
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800f55c:	4619      	mov	r1, r3
 800f55e:	4610      	mov	r0, r2
 800f560:	f7f1 fbf0 	bl	8000d44 <__aeabi_fmul>
 800f564:	4603      	mov	r3, r0
 800f566:	461a      	mov	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f56e:	4619      	mov	r1, r3
 800f570:	4610      	mov	r0, r2
 800f572:	f7f1 fadf 	bl	8000b34 <__addsf3>
 800f576:	4603      	mov	r3, r0
 800f578:	461a      	mov	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800f580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f582:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f584:	f7f1 fc92 	bl	8000eac <__aeabi_fdiv>
 800f588:	4603      	mov	r3, r0
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7f3 fa3e 	bl	8002a0c <_ZSt4asinf>
 800f590:	4602      	mov	r2, r0
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800f598:	4619      	mov	r1, r3
 800f59a:	4610      	mov	r0, r2
 800f59c:	f7f1 fbd2 	bl	8000d44 <__aeabi_fmul>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	4610      	mov	r0, r2
 800f5ae:	f7f1 fac1 	bl	8000b34 <__addsf3>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;
    //ANGLE PREDICTION
	switch(euler_angle) {
 800f5bc:	78fb      	ldrb	r3, [r7, #3]
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	f000 809a 	beq.w	800f6f8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x230>
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	f300 80fb 	bgt.w	800f7c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d002      	beq.n	800f5d4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x10c>
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d049      	beq.n	800f666 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x19e>
 800f5d2:	e0f5      	b.n	800f7c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
		case ROLL:
			angle_ekf = roll_ekf;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800f5da:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = roll_rate;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6a1b      	ldr	r3, [r3, #32]
 800f5e0:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = roll_bias;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f5e8:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = roll_acc;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800f5f0:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroX;
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f4:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-2;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a50      	ldr	r2, [pc, #320]	; (800f73c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f5fa:	651a      	str	r2, [r3, #80]	; 0x50
			if(!armed) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f602:	f083 0301 	eor.w	r3, r3, #1
 800f606:	b2db      	uxtb	r3, r3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d004      	beq.n	800f616 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x14e>
				Qa = 3;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a4c      	ldr	r2, [pc, #304]	; (800f740 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800f610:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f614:	e003      	b.n	800f61e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x156>

			}

			else {
				Qa = 5e6;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a4a      	ldr	r2, [pc, #296]	; (800f744 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>)
 800f61a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4a49      	ldr	r2, [pc, #292]	; (800f748 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x280>)
 800f622:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-2;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4a44      	ldr	r2, [pc, #272]	; (800f73c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f62a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_roll;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f632:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_roll;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f638:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_roll;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f63e:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_roll;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f644:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_roll;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f64a:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_roll;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f650:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_roll;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f656:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_roll;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f65c:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_roll;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f662:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f664:	e0ac      	b.n	800f7c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case PITCH:
			angle_ekf = pitch_ekf;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800f66c:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = pitch_rate;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f672:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = pitch_bias;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f67a:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = pitch_acc;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800f682:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroY;
 800f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f686:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-2;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a2c      	ldr	r2, [pc, #176]	; (800f73c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f68c:	651a      	str	r2, [r3, #80]	; 0x50
			if(!armed) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f694:	f083 0301 	eor.w	r3, r3, #1
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d004      	beq.n	800f6a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1e0>
				Qa = 3;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a27      	ldr	r2, [pc, #156]	; (800f740 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800f6a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f6a6:	e003      	b.n	800f6b0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1e8>

			}

			else {
				Qa = 5e6;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a26      	ldr	r2, [pc, #152]	; (800f744 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>)
 800f6ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a25      	ldr	r2, [pc, #148]	; (800f748 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x280>)
 800f6b4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-2;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4a20      	ldr	r2, [pc, #128]	; (800f73c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f6bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_pitch;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c4:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_pitch;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ca:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_pitch;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6d0:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_pitch;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6d6:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_pitch;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6dc:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_pitch;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6e2:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_pitch;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6e8:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_pitch;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6ee:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_pitch;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6f4:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f6f6:	e063      	b.n	800f7c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case YAW:
			angle_ekf = yaw_ekf;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800f6fe:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = yaw_rate;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f704:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = yaw_bias;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f70c:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = yaw_acc;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f714:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroZ;
 800f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f718:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 5e2;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4a0b      	ldr	r2, [pc, #44]	; (800f74c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x284>)
 800f71e:	651a      	str	r2, [r3, #80]	; 0x50

			if(!armed) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f726:	f083 0301 	eor.w	r3, r3, #1
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00f      	beq.n	800f750 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x288>
				Qa = 3;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a03      	ldr	r2, [pc, #12]	; (800f740 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800f734:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f738:	e00e      	b.n	800f758 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x290>
 800f73a:	bf00      	nop
 800f73c:	3c23d70a 	.word	0x3c23d70a
 800f740:	40400000 	.word	0x40400000
 800f744:	4a989680 	.word	0x4a989680
 800f748:	41200000 	.word	0x41200000
 800f74c:	43fa0000 	.word	0x43fa0000

			}

			else {
				Qa = 5e8;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a18      	ldr	r2, [pc, #96]	; (800f7b4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2ec>)
 800f754:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a17      	ldr	r2, [pc, #92]	; (800f7b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f0>)
 800f75c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-4;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a16      	ldr	r2, [pc, #88]	; (800f7bc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f4>)
 800f764:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_yaw;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f76c:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_yaw;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f774:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_yaw;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f77c:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_yaw;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f784:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_yaw;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f78c:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_yaw;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f794:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_yaw;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f79c:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_yaw;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7a4:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_yaw;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f7ac:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f7ae:	bf00      	nop
 800f7b0:	e006      	b.n	800f7c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
 800f7b2:	bf00      	nop
 800f7b4:	4dee6b28 	.word	0x4dee6b28
 800f7b8:	41200000 	.word	0x41200000
 800f7bc:	38d1b717 	.word	0x38d1b717

	}

    angle_ekf = (angle_ekf) + st*(angle_rate) - st*angle_bias;
 800f7c0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f7c2:	f7f0 fe31 	bl	8000428 <__aeabi_f2d>
 800f7c6:	4680      	mov	r8, r0
 800f7c8:	4689      	mov	r9, r1
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	e9d3 455e 	ldrd	r4, r5, [r3, #376]	; 0x178
 800f7d0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f7d2:	f7f0 fe29 	bl	8000428 <__aeabi_f2d>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	4620      	mov	r0, r4
 800f7dc:	4629      	mov	r1, r5
 800f7de:	f7f0 fe7b 	bl	80004d8 <__aeabi_dmul>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	4649      	mov	r1, r9
 800f7ea:	f7f0 fcbf 	bl	800016c <__adddf3>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	4690      	mov	r8, r2
 800f7f4:	4699      	mov	r9, r3
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	e9d3 455e 	ldrd	r4, r5, [r3, #376]	; 0x178
 800f7fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f7fe:	f7f0 fe13 	bl	8000428 <__aeabi_f2d>
 800f802:	4602      	mov	r2, r0
 800f804:	460b      	mov	r3, r1
 800f806:	4620      	mov	r0, r4
 800f808:	4629      	mov	r1, r5
 800f80a:	f7f0 fe65 	bl	80004d8 <__aeabi_dmul>
 800f80e:	4602      	mov	r2, r0
 800f810:	460b      	mov	r3, r1
 800f812:	4640      	mov	r0, r8
 800f814:	4649      	mov	r1, r9
 800f816:	f7f0 fca7 	bl	8000168 <__aeabi_dsub>
 800f81a:	4602      	mov	r2, r0
 800f81c:	460b      	mov	r3, r1
 800f81e:	4610      	mov	r0, r2
 800f820:	4619      	mov	r1, r3
 800f822:	f7f1 f931 	bl	8000a88 <__aeabi_d2f>
 800f826:	4603      	mov	r3, r0
 800f828:	677b      	str	r3, [r7, #116]	; 0x74

    S11_angle = S11_angle + sa + S31_angle*st - st*st*(S12_angle - S22_angle*st + S32_angle*st)/st + (st*st*(S13_angle - S23_angle*st + S33_angle*st))/st;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f82e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f830:	4618      	mov	r0, r3
 800f832:	f7f1 f97f 	bl	8000b34 <__addsf3>
 800f836:	4603      	mov	r3, r0
 800f838:	4618      	mov	r0, r3
 800f83a:	f7f0 fdf5 	bl	8000428 <__aeabi_f2d>
 800f83e:	4604      	mov	r4, r0
 800f840:	460d      	mov	r5, r1
 800f842:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f844:	f7f0 fdf0 	bl	8000428 <__aeabi_f2d>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f84e:	f7f0 fe43 	bl	80004d8 <__aeabi_dmul>
 800f852:	4602      	mov	r2, r0
 800f854:	460b      	mov	r3, r1
 800f856:	4620      	mov	r0, r4
 800f858:	4629      	mov	r1, r5
 800f85a:	f7f0 fc87 	bl	800016c <__adddf3>
 800f85e:	4602      	mov	r2, r0
 800f860:	460b      	mov	r3, r1
 800f862:	4690      	mov	r8, r2
 800f864:	4699      	mov	r9, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f872:	f7f0 fe31 	bl	80004d8 <__aeabi_dmul>
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	4692      	mov	sl, r2
 800f87c:	469b      	mov	fp, r3
 800f87e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f880:	f7f0 fdd2 	bl	8000428 <__aeabi_f2d>
 800f884:	4604      	mov	r4, r0
 800f886:	460d      	mov	r5, r1
 800f888:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f88a:	f7f0 fdcd 	bl	8000428 <__aeabi_f2d>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f894:	f7f0 fe20 	bl	80004d8 <__aeabi_dmul>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	4620      	mov	r0, r4
 800f89e:	4629      	mov	r1, r5
 800f8a0:	f7f0 fc62 	bl	8000168 <__aeabi_dsub>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	4614      	mov	r4, r2
 800f8aa:	461d      	mov	r5, r3
 800f8ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f8ae:	f7f0 fdbb 	bl	8000428 <__aeabi_f2d>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f8b8:	f7f0 fe0e 	bl	80004d8 <__aeabi_dmul>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	f7f0 fc52 	bl	800016c <__adddf3>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	4650      	mov	r0, sl
 800f8ce:	4659      	mov	r1, fp
 800f8d0:	f7f0 fe02 	bl	80004d8 <__aeabi_dmul>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	4610      	mov	r0, r2
 800f8da:	4619      	mov	r1, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f8e2:	f7f0 ff23 	bl	800072c <__aeabi_ddiv>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4649      	mov	r1, r9
 800f8ee:	f7f0 fc3b 	bl	8000168 <__aeabi_dsub>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4690      	mov	r8, r2
 800f8f8:	4699      	mov	r9, r3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f906:	f7f0 fde7 	bl	80004d8 <__aeabi_dmul>
 800f90a:	4602      	mov	r2, r0
 800f90c:	460b      	mov	r3, r1
 800f90e:	4692      	mov	sl, r2
 800f910:	469b      	mov	fp, r3
 800f912:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f914:	f7f0 fd88 	bl	8000428 <__aeabi_f2d>
 800f918:	4604      	mov	r4, r0
 800f91a:	460d      	mov	r5, r1
 800f91c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f91e:	f7f0 fd83 	bl	8000428 <__aeabi_f2d>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f928:	f7f0 fdd6 	bl	80004d8 <__aeabi_dmul>
 800f92c:	4602      	mov	r2, r0
 800f92e:	460b      	mov	r3, r1
 800f930:	4620      	mov	r0, r4
 800f932:	4629      	mov	r1, r5
 800f934:	f7f0 fc18 	bl	8000168 <__aeabi_dsub>
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	4614      	mov	r4, r2
 800f93e:	461d      	mov	r5, r3
 800f940:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f942:	f7f0 fd71 	bl	8000428 <__aeabi_f2d>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f94c:	f7f0 fdc4 	bl	80004d8 <__aeabi_dmul>
 800f950:	4602      	mov	r2, r0
 800f952:	460b      	mov	r3, r1
 800f954:	4620      	mov	r0, r4
 800f956:	4629      	mov	r1, r5
 800f958:	f7f0 fc08 	bl	800016c <__adddf3>
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	4650      	mov	r0, sl
 800f962:	4659      	mov	r1, fp
 800f964:	f7f0 fdb8 	bl	80004d8 <__aeabi_dmul>
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4610      	mov	r0, r2
 800f96e:	4619      	mov	r1, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f976:	f7f0 fed9 	bl	800072c <__aeabi_ddiv>
 800f97a:	4602      	mov	r2, r0
 800f97c:	460b      	mov	r3, r1
 800f97e:	4640      	mov	r0, r8
 800f980:	4649      	mov	r1, r9
 800f982:	f7f0 fbf3 	bl	800016c <__adddf3>
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	4610      	mov	r0, r2
 800f98c:	4619      	mov	r1, r3
 800f98e:	f7f1 f87b 	bl	8000a88 <__aeabi_d2f>
 800f992:	4603      	mov	r3, r0
 800f994:	663b      	str	r3, [r7, #96]	; 0x60
    S12_angle = S12_angle - S22_angle*st + S32_angle*st;
 800f996:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f998:	f7f0 fd46 	bl	8000428 <__aeabi_f2d>
 800f99c:	4604      	mov	r4, r0
 800f99e:	460d      	mov	r5, r1
 800f9a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f9a2:	f7f0 fd41 	bl	8000428 <__aeabi_f2d>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f9ac:	f7f0 fd94 	bl	80004d8 <__aeabi_dmul>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	f7f0 fbd6 	bl	8000168 <__aeabi_dsub>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	460b      	mov	r3, r1
 800f9c0:	4614      	mov	r4, r2
 800f9c2:	461d      	mov	r5, r3
 800f9c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9c6:	f7f0 fd2f 	bl	8000428 <__aeabi_f2d>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f9d0:	f7f0 fd82 	bl	80004d8 <__aeabi_dmul>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4620      	mov	r0, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	f7f0 fbc6 	bl	800016c <__adddf3>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	4610      	mov	r0, r2
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	f7f1 f84e 	bl	8000a88 <__aeabi_d2f>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    S13_angle = S13_angle - S23_angle*st + S33_angle*st;
 800f9f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f9f2:	f7f0 fd19 	bl	8000428 <__aeabi_f2d>
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	460d      	mov	r5, r1
 800f9fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f9fc:	f7f0 fd14 	bl	8000428 <__aeabi_f2d>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800fa06:	f7f0 fd67 	bl	80004d8 <__aeabi_dmul>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	4620      	mov	r0, r4
 800fa10:	4629      	mov	r1, r5
 800fa12:	f7f0 fba9 	bl	8000168 <__aeabi_dsub>
 800fa16:	4602      	mov	r2, r0
 800fa18:	460b      	mov	r3, r1
 800fa1a:	4614      	mov	r4, r2
 800fa1c:	461d      	mov	r5, r3
 800fa1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fa20:	f7f0 fd02 	bl	8000428 <__aeabi_f2d>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800fa2a:	f7f0 fd55 	bl	80004d8 <__aeabi_dmul>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	4620      	mov	r0, r4
 800fa34:	4629      	mov	r1, r5
 800fa36:	f7f0 fb99 	bl	800016c <__adddf3>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	4610      	mov	r0, r2
 800fa40:	4619      	mov	r1, r3
 800fa42:	f7f1 f821 	bl	8000a88 <__aeabi_d2f>
 800fa46:	4603      	mov	r3, r0
 800fa48:	65bb      	str	r3, [r7, #88]	; 0x58

    S21_angle = S21_angle - S22_angle*st + S23_angle*(st);
 800fa4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fa4c:	f7f0 fcec 	bl	8000428 <__aeabi_f2d>
 800fa50:	4604      	mov	r4, r0
 800fa52:	460d      	mov	r5, r1
 800fa54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fa56:	f7f0 fce7 	bl	8000428 <__aeabi_f2d>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800fa60:	f7f0 fd3a 	bl	80004d8 <__aeabi_dmul>
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	4620      	mov	r0, r4
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	f7f0 fb7c 	bl	8000168 <__aeabi_dsub>
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	4614      	mov	r4, r2
 800fa76:	461d      	mov	r5, r3
 800fa78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fa7a:	f7f0 fcd5 	bl	8000428 <__aeabi_f2d>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800fa84:	f7f0 fd28 	bl	80004d8 <__aeabi_dmul>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4629      	mov	r1, r5
 800fa90:	f7f0 fb6c 	bl	800016c <__adddf3>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	4610      	mov	r0, r2
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	f7f0 fff4 	bl	8000a88 <__aeabi_d2f>
 800faa0:	4603      	mov	r3, r0
 800faa2:	657b      	str	r3, [r7, #84]	; 0x54
    S22_angle = S22_angle + sb;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800faaa:	4619      	mov	r1, r3
 800faac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800faae:	f7f1 f841 	bl	8000b34 <__addsf3>
 800fab2:	4603      	mov	r3, r0
 800fab4:	653b      	str	r3, [r7, #80]	; 0x50
    //S23_angle = S23_angle;

    S31_angle = S31_angle - S32_angle*st  + S33_angle*(st);
 800fab6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fab8:	f7f0 fcb6 	bl	8000428 <__aeabi_f2d>
 800fabc:	4604      	mov	r4, r0
 800fabe:	460d      	mov	r5, r1
 800fac0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fac2:	f7f0 fcb1 	bl	8000428 <__aeabi_f2d>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800facc:	f7f0 fd04 	bl	80004d8 <__aeabi_dmul>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4620      	mov	r0, r4
 800fad6:	4629      	mov	r1, r5
 800fad8:	f7f0 fb46 	bl	8000168 <__aeabi_dsub>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	4614      	mov	r4, r2
 800fae2:	461d      	mov	r5, r3
 800fae4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fae6:	f7f0 fc9f 	bl	8000428 <__aeabi_f2d>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800faf0:	f7f0 fcf2 	bl	80004d8 <__aeabi_dmul>
 800faf4:	4602      	mov	r2, r0
 800faf6:	460b      	mov	r3, r1
 800faf8:	4620      	mov	r0, r4
 800fafa:	4629      	mov	r1, r5
 800fafc:	f7f0 fb36 	bl	800016c <__adddf3>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	4610      	mov	r0, r2
 800fb06:	4619      	mov	r1, r3
 800fb08:	f7f0 ffbe 	bl	8000a88 <__aeabi_d2f>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	64bb      	str	r3, [r7, #72]	; 0x48
    //S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb14:	4619      	mov	r1, r3
 800fb16:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fb18:	f7f1 f80c 	bl	8000b34 <__addsf3>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	643b      	str	r3, [r7, #64]	; 0x40

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	4610      	mov	r0, r2
 800fb30:	f7f1 f908 	bl	8000d44 <__aeabi_fmul>
 800fb34:	4603      	mov	r3, r0
 800fb36:	461c      	mov	r4, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fb3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7f1 f8ff 	bl	8000d44 <__aeabi_fmul>
 800fb46:	4603      	mov	r3, r0
 800fb48:	4619      	mov	r1, r3
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f7f0 fff2 	bl	8000b34 <__addsf3>
 800fb50:	4603      	mov	r3, r0
 800fb52:	461c      	mov	r4, r3
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fb5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7f1 f8f1 	bl	8000d44 <__aeabi_fmul>
 800fb62:	4603      	mov	r3, r0
 800fb64:	4619      	mov	r1, r3
 800fb66:	4620      	mov	r0, r4
 800fb68:	f7f0 ffe4 	bl	8000b34 <__addsf3>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	461c      	mov	r4, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fb76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7f1 f8e3 	bl	8000d44 <__aeabi_fmul>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	4619      	mov	r1, r3
 800fb82:	4620      	mov	r0, r4
 800fb84:	f7f0 ffd6 	bl	8000b34 <__addsf3>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	461c      	mov	r4, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fb92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7f1 f8d5 	bl	8000d44 <__aeabi_fmul>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4620      	mov	r0, r4
 800fba0:	f7f0 ffc8 	bl	8000b34 <__addsf3>
 800fba4:	4603      	mov	r3, r0
 800fba6:	461c      	mov	r4, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fbae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7f1 f8c7 	bl	8000d44 <__aeabi_fmul>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	4619      	mov	r1, r3
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f7f0 ffba 	bl	8000b34 <__addsf3>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	461c      	mov	r4, r3
 800fbc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbc6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fbc8:	f7f1 f8bc 	bl	8000d44 <__aeabi_fmul>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	4619      	mov	r1, r3
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f7f0 ffaf 	bl	8000b34 <__addsf3>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	461c      	mov	r4, r3
 800fbda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbdc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fbde:	f7f1 f8b1 	bl	8000d44 <__aeabi_fmul>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f7f0 ffa2 	bl	8000b30 <__aeabi_fsub>
 800fbec:	4603      	mov	r3, r0
 800fbee:	461c      	mov	r4, r3
 800fbf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fbf2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fbf4:	f7f1 f8a6 	bl	8000d44 <__aeabi_fmul>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f7f0 ff99 	bl	8000b34 <__addsf3>
 800fc02:	4603      	mov	r3, r0
 800fc04:	461c      	mov	r4, r3
 800fc06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc08:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fc0a:	f7f1 f89b 	bl	8000d44 <__aeabi_fmul>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	4619      	mov	r1, r3
 800fc12:	4620      	mov	r0, r4
 800fc14:	f7f0 ff8c 	bl	8000b30 <__aeabi_fsub>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461c      	mov	r4, r3
 800fc1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc1e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fc20:	f7f1 f890 	bl	8000d44 <__aeabi_fmul>
 800fc24:	4603      	mov	r3, r0
 800fc26:	4619      	mov	r1, r3
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f7f0 ff83 	bl	8000b34 <__addsf3>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	461c      	mov	r4, r3
 800fc32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc34:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fc36:	f7f1 f885 	bl	8000d44 <__aeabi_fmul>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f7f0 ff76 	bl	8000b30 <__aeabi_fsub>
 800fc44:	4603      	mov	r3, r0
 800fc46:	461c      	mov	r4, r3
 800fc48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc4a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fc4c:	f7f1 f87a 	bl	8000d44 <__aeabi_fmul>
 800fc50:	4603      	mov	r3, r0
 800fc52:	4619      	mov	r1, r3
 800fc54:	4620      	mov	r0, r4
 800fc56:	f7f0 ff6d 	bl	8000b34 <__addsf3>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	461c      	mov	r4, r3
 800fc5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fc62:	f7f1 f86f 	bl	8000d44 <__aeabi_fmul>
 800fc66:	4603      	mov	r3, r0
 800fc68:	4619      	mov	r1, r3
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f7f0 ff60 	bl	8000b30 <__aeabi_fsub>
 800fc70:	4603      	mov	r3, r0
 800fc72:	623b      	str	r3, [r7, #32]
    float Kt11_att = 1 - (Qa*(Qg + S22_angle + S23_angle + S32_angle + S33_angle))/A;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fc80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7f0 ff56 	bl	8000b34 <__addsf3>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7f0 ff51 	bl	8000b34 <__addsf3>
 800fc92:	4603      	mov	r3, r0
 800fc94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7f0 ff4c 	bl	8000b34 <__addsf3>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7f0 ff47 	bl	8000b34 <__addsf3>
 800fca6:	4603      	mov	r3, r0
 800fca8:	4619      	mov	r1, r3
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f7f1 f84a 	bl	8000d44 <__aeabi_fmul>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	6a39      	ldr	r1, [r7, #32]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7f1 f8f9 	bl	8000eac <__aeabi_fdiv>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fcc2:	f7f0 ff35 	bl	8000b30 <__aeabi_fsub>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	61fb      	str	r3, [r7, #28]
    float Kt12_att = (Qa*(S12_angle + S13_angle))/A;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800fcd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fcd4:	f7f0 ff2e 	bl	8000b34 <__addsf3>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	4619      	mov	r1, r3
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f7f1 f831 	bl	8000d44 <__aeabi_fmul>
 800fce2:	4603      	mov	r3, r0
 800fce4:	6a39      	ldr	r1, [r7, #32]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7f1 f8e0 	bl	8000eac <__aeabi_fdiv>
 800fcec:	4603      	mov	r3, r0
 800fcee:	61bb      	str	r3, [r7, #24]
    float Kt21_att = (Qg*S21_angle + S21_angle*S32_angle - S22_angle*S31_angle + S21_angle*S33_angle - S23_angle*S31_angle)/A;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fcf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7f1 f823 	bl	8000d44 <__aeabi_fmul>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	461c      	mov	r4, r3
 800fd02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd06:	f7f1 f81d 	bl	8000d44 <__aeabi_fmul>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f7f0 ff10 	bl	8000b34 <__addsf3>
 800fd14:	4603      	mov	r3, r0
 800fd16:	461c      	mov	r4, r3
 800fd18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fd1c:	f7f1 f812 	bl	8000d44 <__aeabi_fmul>
 800fd20:	4603      	mov	r3, r0
 800fd22:	4619      	mov	r1, r3
 800fd24:	4620      	mov	r0, r4
 800fd26:	f7f0 ff03 	bl	8000b30 <__aeabi_fsub>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	461c      	mov	r4, r3
 800fd2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd32:	f7f1 f807 	bl	8000d44 <__aeabi_fmul>
 800fd36:	4603      	mov	r3, r0
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f7f0 fefa 	bl	8000b34 <__addsf3>
 800fd40:	4603      	mov	r3, r0
 800fd42:	461c      	mov	r4, r3
 800fd44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fd48:	f7f0 fffc 	bl	8000d44 <__aeabi_fmul>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	4619      	mov	r1, r3
 800fd50:	4620      	mov	r0, r4
 800fd52:	f7f0 feed 	bl	8000b30 <__aeabi_fsub>
 800fd56:	4603      	mov	r3, r0
 800fd58:	6a39      	ldr	r1, [r7, #32]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7f1 f8a6 	bl	8000eac <__aeabi_fdiv>
 800fd60:	4603      	mov	r3, r0
 800fd62:	617b      	str	r3, [r7, #20]
    float Kt22_att = (Qa*S22_angle + Qa*S23_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle)/A;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fd6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7f0 ffe9 	bl	8000d44 <__aeabi_fmul>
 800fd72:	4603      	mov	r3, r0
 800fd74:	461c      	mov	r4, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fd7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7f0 ffe0 	bl	8000d44 <__aeabi_fmul>
 800fd84:	4603      	mov	r3, r0
 800fd86:	4619      	mov	r1, r3
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f7f0 fed3 	bl	8000b34 <__addsf3>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	461c      	mov	r4, r3
 800fd92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd94:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fd96:	f7f0 ffd5 	bl	8000d44 <__aeabi_fmul>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f7f0 fec8 	bl	8000b34 <__addsf3>
 800fda4:	4603      	mov	r3, r0
 800fda6:	461c      	mov	r4, r3
 800fda8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fdaa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fdac:	f7f0 ffca 	bl	8000d44 <__aeabi_fmul>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f7f0 febb 	bl	8000b30 <__aeabi_fsub>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	461c      	mov	r4, r3
 800fdbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fdc0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fdc2:	f7f0 ffbf 	bl	8000d44 <__aeabi_fmul>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	4619      	mov	r1, r3
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f7f0 feb2 	bl	8000b34 <__addsf3>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	461c      	mov	r4, r3
 800fdd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fdd6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fdd8:	f7f0 ffb4 	bl	8000d44 <__aeabi_fmul>
 800fddc:	4603      	mov	r3, r0
 800fdde:	4619      	mov	r1, r3
 800fde0:	4620      	mov	r0, r4
 800fde2:	f7f0 fea5 	bl	8000b30 <__aeabi_fsub>
 800fde6:	4603      	mov	r3, r0
 800fde8:	6a39      	ldr	r1, [r7, #32]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7f1 f85e 	bl	8000eac <__aeabi_fdiv>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	613b      	str	r3, [r7, #16]
    float Kt31_att = (Qg*S31_angle - S21_angle*S32_angle + S22_angle*S31_angle - S21_angle*S33_angle + S23_angle*S31_angle)/A;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fdfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7f0 ffa1 	bl	8000d44 <__aeabi_fmul>
 800fe02:	4603      	mov	r3, r0
 800fe04:	461c      	mov	r4, r3
 800fe06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fe0a:	f7f0 ff9b 	bl	8000d44 <__aeabi_fmul>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	4619      	mov	r1, r3
 800fe12:	4620      	mov	r0, r4
 800fe14:	f7f0 fe8c 	bl	8000b30 <__aeabi_fsub>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	461c      	mov	r4, r3
 800fe1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fe1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fe20:	f7f0 ff90 	bl	8000d44 <__aeabi_fmul>
 800fe24:	4603      	mov	r3, r0
 800fe26:	4619      	mov	r1, r3
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f7f0 fe83 	bl	8000b34 <__addsf3>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	461c      	mov	r4, r3
 800fe32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fe36:	f7f0 ff85 	bl	8000d44 <__aeabi_fmul>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f7f0 fe76 	bl	8000b30 <__aeabi_fsub>
 800fe44:	4603      	mov	r3, r0
 800fe46:	461c      	mov	r4, r3
 800fe48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fe4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe4c:	f7f0 ff7a 	bl	8000d44 <__aeabi_fmul>
 800fe50:	4603      	mov	r3, r0
 800fe52:	4619      	mov	r1, r3
 800fe54:	4620      	mov	r0, r4
 800fe56:	f7f0 fe6d 	bl	8000b34 <__addsf3>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	6a39      	ldr	r1, [r7, #32]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7f1 f824 	bl	8000eac <__aeabi_fdiv>
 800fe64:	4603      	mov	r3, r0
 800fe66:	60fb      	str	r3, [r7, #12]
    float Kt32_att = (Qa*S32_angle + Qa*S33_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle)/A;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fe6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7f0 ff67 	bl	8000d44 <__aeabi_fmul>
 800fe76:	4603      	mov	r3, r0
 800fe78:	461c      	mov	r4, r3
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fe80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7f0 ff5e 	bl	8000d44 <__aeabi_fmul>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f7f0 fe51 	bl	8000b34 <__addsf3>
 800fe92:	4603      	mov	r3, r0
 800fe94:	461c      	mov	r4, r3
 800fe96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe98:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fe9a:	f7f0 ff53 	bl	8000d44 <__aeabi_fmul>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	4619      	mov	r1, r3
 800fea2:	4620      	mov	r0, r4
 800fea4:	f7f0 fe46 	bl	8000b34 <__addsf3>
 800fea8:	4603      	mov	r3, r0
 800feaa:	461c      	mov	r4, r3
 800feac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800feae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800feb0:	f7f0 ff48 	bl	8000d44 <__aeabi_fmul>
 800feb4:	4603      	mov	r3, r0
 800feb6:	4619      	mov	r1, r3
 800feb8:	4620      	mov	r0, r4
 800feba:	f7f0 fe39 	bl	8000b30 <__aeabi_fsub>
 800febe:	4603      	mov	r3, r0
 800fec0:	461c      	mov	r4, r3
 800fec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fec4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fec6:	f7f0 ff3d 	bl	8000d44 <__aeabi_fmul>
 800feca:	4603      	mov	r3, r0
 800fecc:	4619      	mov	r1, r3
 800fece:	4620      	mov	r0, r4
 800fed0:	f7f0 fe30 	bl	8000b34 <__addsf3>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461c      	mov	r4, r3
 800fed8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800feda:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fedc:	f7f0 ff32 	bl	8000d44 <__aeabi_fmul>
 800fee0:	4603      	mov	r3, r0
 800fee2:	4619      	mov	r1, r3
 800fee4:	4620      	mov	r0, r4
 800fee6:	f7f0 fe23 	bl	8000b30 <__aeabi_fsub>
 800feea:	4603      	mov	r3, r0
 800feec:	6a39      	ldr	r1, [r7, #32]
 800feee:	4618      	mov	r0, r3
 800fef0:	f7f0 ffdc 	bl	8000eac <__aeabi_fdiv>
 800fef4:	4603      	mov	r3, r0
 800fef6:	60bb      	str	r3, [r7, #8]

    angle_ekf = (angle_ekf) + Kt11_att*((angle_acc) - (angle_ekf)) - Kt12_att*((angle_bias) - (gyro) + (angle_rate));
 800fef8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fefa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800fefc:	f7f0 fe18 	bl	8000b30 <__aeabi_fsub>
 800ff00:	4603      	mov	r3, r0
 800ff02:	69f9      	ldr	r1, [r7, #28]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7f0 ff1d 	bl	8000d44 <__aeabi_fmul>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7f0 fe10 	bl	8000b34 <__addsf3>
 800ff14:	4603      	mov	r3, r0
 800ff16:	461c      	mov	r4, r3
 800ff18:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ff1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ff1c:	f7f0 fe08 	bl	8000b30 <__aeabi_fsub>
 800ff20:	4603      	mov	r3, r0
 800ff22:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7f0 fe05 	bl	8000b34 <__addsf3>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	69b9      	ldr	r1, [r7, #24]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7f0 ff08 	bl	8000d44 <__aeabi_fmul>
 800ff34:	4603      	mov	r3, r0
 800ff36:	4619      	mov	r1, r3
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f7f0 fdf9 	bl	8000b30 <__aeabi_fsub>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	677b      	str	r3, [r7, #116]	; 0x74


    angle_bias = (angle_bias) + Kt21_att*((angle_acc) - (angle_ekf)) - Kt22_att*((angle_bias) - (gyro) + (angle_rate));
 800ff42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ff44:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ff46:	f7f0 fdf3 	bl	8000b30 <__aeabi_fsub>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	6979      	ldr	r1, [r7, #20]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7f0 fef8 	bl	8000d44 <__aeabi_fmul>
 800ff54:	4603      	mov	r3, r0
 800ff56:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7f0 fdeb 	bl	8000b34 <__addsf3>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	461c      	mov	r4, r3
 800ff62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ff64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ff66:	f7f0 fde3 	bl	8000b30 <__aeabi_fsub>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7f0 fde0 	bl	8000b34 <__addsf3>
 800ff74:	4603      	mov	r3, r0
 800ff76:	6939      	ldr	r1, [r7, #16]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7f0 fee3 	bl	8000d44 <__aeabi_fmul>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	4619      	mov	r1, r3
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7f0 fdd4 	bl	8000b30 <__aeabi_fsub>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	66fb      	str	r3, [r7, #108]	; 0x6c


    angle_rate = (angle_rate) + Kt31_att*((angle_acc) - (angle_ekf)) - Kt32_att*((angle_bias) - (gyro) + (angle_rate));
 800ff8c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ff8e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ff90:	f7f0 fdce 	bl	8000b30 <__aeabi_fsub>
 800ff94:	4603      	mov	r3, r0
 800ff96:	68f9      	ldr	r1, [r7, #12]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7f0 fed3 	bl	8000d44 <__aeabi_fmul>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f0 fdc6 	bl	8000b34 <__addsf3>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461c      	mov	r4, r3
 800ffac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ffae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ffb0:	f7f0 fdbe 	bl	8000b30 <__aeabi_fsub>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7f0 fdbb 	bl	8000b34 <__addsf3>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	68b9      	ldr	r1, [r7, #8]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7f0 febe 	bl	8000d44 <__aeabi_fmul>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	4619      	mov	r1, r3
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f7f0 fdaf 	bl	8000b30 <__aeabi_fsub>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	673b      	str	r3, [r7, #112]	; 0x70


    S11_angle = - S11_angle*(Kt11_att - 1) - Kt12_att*S21_angle - Kt12_att*S31_angle;
 800ffd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffd8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ffdc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ffe0:	69f8      	ldr	r0, [r7, #28]
 800ffe2:	f7f0 fda5 	bl	8000b30 <__aeabi_fsub>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	4619      	mov	r1, r3
 800ffea:	4620      	mov	r0, r4
 800ffec:	f7f0 feaa 	bl	8000d44 <__aeabi_fmul>
 800fff0:	4603      	mov	r3, r0
 800fff2:	461c      	mov	r4, r3
 800fff4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fff6:	69b8      	ldr	r0, [r7, #24]
 800fff8:	f7f0 fea4 	bl	8000d44 <__aeabi_fmul>
 800fffc:	4603      	mov	r3, r0
 800fffe:	4619      	mov	r1, r3
 8010000:	4620      	mov	r0, r4
 8010002:	f7f0 fd95 	bl	8000b30 <__aeabi_fsub>
 8010006:	4603      	mov	r3, r0
 8010008:	461c      	mov	r4, r3
 801000a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801000c:	69b8      	ldr	r0, [r7, #24]
 801000e:	f7f0 fe99 	bl	8000d44 <__aeabi_fmul>
 8010012:	4603      	mov	r3, r0
 8010014:	4619      	mov	r1, r3
 8010016:	4620      	mov	r0, r4
 8010018:	f7f0 fd8a 	bl	8000b30 <__aeabi_fsub>
 801001c:	4603      	mov	r3, r0
 801001e:	663b      	str	r3, [r7, #96]	; 0x60


    S12_angle = - S12_angle*(Kt11_att - 1) - Kt12_att*S22_angle - Kt12_att*S32_angle;
 8010020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010022:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8010026:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801002a:	69f8      	ldr	r0, [r7, #28]
 801002c:	f7f0 fd80 	bl	8000b30 <__aeabi_fsub>
 8010030:	4603      	mov	r3, r0
 8010032:	4619      	mov	r1, r3
 8010034:	4620      	mov	r0, r4
 8010036:	f7f0 fe85 	bl	8000d44 <__aeabi_fmul>
 801003a:	4603      	mov	r3, r0
 801003c:	461c      	mov	r4, r3
 801003e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010040:	69b8      	ldr	r0, [r7, #24]
 8010042:	f7f0 fe7f 	bl	8000d44 <__aeabi_fmul>
 8010046:	4603      	mov	r3, r0
 8010048:	4619      	mov	r1, r3
 801004a:	4620      	mov	r0, r4
 801004c:	f7f0 fd70 	bl	8000b30 <__aeabi_fsub>
 8010050:	4603      	mov	r3, r0
 8010052:	461c      	mov	r4, r3
 8010054:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010056:	69b8      	ldr	r0, [r7, #24]
 8010058:	f7f0 fe74 	bl	8000d44 <__aeabi_fmul>
 801005c:	4603      	mov	r3, r0
 801005e:	4619      	mov	r1, r3
 8010060:	4620      	mov	r0, r4
 8010062:	f7f0 fd65 	bl	8000b30 <__aeabi_fsub>
 8010066:	4603      	mov	r3, r0
 8010068:	65fb      	str	r3, [r7, #92]	; 0x5c


    S13_angle = - S13_angle*(Kt11_att - 1) - Kt12_att*S23_angle - Kt12_att*S33_angle;
 801006a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801006c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8010070:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010074:	69f8      	ldr	r0, [r7, #28]
 8010076:	f7f0 fd5b 	bl	8000b30 <__aeabi_fsub>
 801007a:	4603      	mov	r3, r0
 801007c:	4619      	mov	r1, r3
 801007e:	4620      	mov	r0, r4
 8010080:	f7f0 fe60 	bl	8000d44 <__aeabi_fmul>
 8010084:	4603      	mov	r3, r0
 8010086:	461c      	mov	r4, r3
 8010088:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801008a:	69b8      	ldr	r0, [r7, #24]
 801008c:	f7f0 fe5a 	bl	8000d44 <__aeabi_fmul>
 8010090:	4603      	mov	r3, r0
 8010092:	4619      	mov	r1, r3
 8010094:	4620      	mov	r0, r4
 8010096:	f7f0 fd4b 	bl	8000b30 <__aeabi_fsub>
 801009a:	4603      	mov	r3, r0
 801009c:	461c      	mov	r4, r3
 801009e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100a0:	69b8      	ldr	r0, [r7, #24]
 80100a2:	f7f0 fe4f 	bl	8000d44 <__aeabi_fmul>
 80100a6:	4603      	mov	r3, r0
 80100a8:	4619      	mov	r1, r3
 80100aa:	4620      	mov	r0, r4
 80100ac:	f7f0 fd40 	bl	8000b30 <__aeabi_fsub>
 80100b0:	4603      	mov	r3, r0
 80100b2:	65bb      	str	r3, [r7, #88]	; 0x58


    S21_angle = - S21_angle*(Kt22_att - 1) - Kt21_att*S11_angle - Kt22_att*S31_angle;
 80100b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100b6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80100ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80100be:	6938      	ldr	r0, [r7, #16]
 80100c0:	f7f0 fd36 	bl	8000b30 <__aeabi_fsub>
 80100c4:	4603      	mov	r3, r0
 80100c6:	4619      	mov	r1, r3
 80100c8:	4620      	mov	r0, r4
 80100ca:	f7f0 fe3b 	bl	8000d44 <__aeabi_fmul>
 80100ce:	4603      	mov	r3, r0
 80100d0:	461c      	mov	r4, r3
 80100d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80100d4:	6978      	ldr	r0, [r7, #20]
 80100d6:	f7f0 fe35 	bl	8000d44 <__aeabi_fmul>
 80100da:	4603      	mov	r3, r0
 80100dc:	4619      	mov	r1, r3
 80100de:	4620      	mov	r0, r4
 80100e0:	f7f0 fd26 	bl	8000b30 <__aeabi_fsub>
 80100e4:	4603      	mov	r3, r0
 80100e6:	461c      	mov	r4, r3
 80100e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80100ea:	6938      	ldr	r0, [r7, #16]
 80100ec:	f7f0 fe2a 	bl	8000d44 <__aeabi_fmul>
 80100f0:	4603      	mov	r3, r0
 80100f2:	4619      	mov	r1, r3
 80100f4:	4620      	mov	r0, r4
 80100f6:	f7f0 fd1b 	bl	8000b30 <__aeabi_fsub>
 80100fa:	4603      	mov	r3, r0
 80100fc:	657b      	str	r3, [r7, #84]	; 0x54


    S22_angle = - S22_angle*(Kt22_att - 1) - Kt21_att*S12_angle - Kt22_att*S32_angle;
 80100fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010100:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8010104:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010108:	6938      	ldr	r0, [r7, #16]
 801010a:	f7f0 fd11 	bl	8000b30 <__aeabi_fsub>
 801010e:	4603      	mov	r3, r0
 8010110:	4619      	mov	r1, r3
 8010112:	4620      	mov	r0, r4
 8010114:	f7f0 fe16 	bl	8000d44 <__aeabi_fmul>
 8010118:	4603      	mov	r3, r0
 801011a:	461c      	mov	r4, r3
 801011c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801011e:	6978      	ldr	r0, [r7, #20]
 8010120:	f7f0 fe10 	bl	8000d44 <__aeabi_fmul>
 8010124:	4603      	mov	r3, r0
 8010126:	4619      	mov	r1, r3
 8010128:	4620      	mov	r0, r4
 801012a:	f7f0 fd01 	bl	8000b30 <__aeabi_fsub>
 801012e:	4603      	mov	r3, r0
 8010130:	461c      	mov	r4, r3
 8010132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010134:	6938      	ldr	r0, [r7, #16]
 8010136:	f7f0 fe05 	bl	8000d44 <__aeabi_fmul>
 801013a:	4603      	mov	r3, r0
 801013c:	4619      	mov	r1, r3
 801013e:	4620      	mov	r0, r4
 8010140:	f7f0 fcf6 	bl	8000b30 <__aeabi_fsub>
 8010144:	4603      	mov	r3, r0
 8010146:	653b      	str	r3, [r7, #80]	; 0x50


    S23_angle = - S23_angle*(Kt22_att - 1) - Kt21_att*S13_angle - Kt22_att*S33_angle;
 8010148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801014a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 801014e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010152:	6938      	ldr	r0, [r7, #16]
 8010154:	f7f0 fcec 	bl	8000b30 <__aeabi_fsub>
 8010158:	4603      	mov	r3, r0
 801015a:	4619      	mov	r1, r3
 801015c:	4620      	mov	r0, r4
 801015e:	f7f0 fdf1 	bl	8000d44 <__aeabi_fmul>
 8010162:	4603      	mov	r3, r0
 8010164:	461c      	mov	r4, r3
 8010166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010168:	6978      	ldr	r0, [r7, #20]
 801016a:	f7f0 fdeb 	bl	8000d44 <__aeabi_fmul>
 801016e:	4603      	mov	r3, r0
 8010170:	4619      	mov	r1, r3
 8010172:	4620      	mov	r0, r4
 8010174:	f7f0 fcdc 	bl	8000b30 <__aeabi_fsub>
 8010178:	4603      	mov	r3, r0
 801017a:	461c      	mov	r4, r3
 801017c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801017e:	6938      	ldr	r0, [r7, #16]
 8010180:	f7f0 fde0 	bl	8000d44 <__aeabi_fmul>
 8010184:	4603      	mov	r3, r0
 8010186:	4619      	mov	r1, r3
 8010188:	4620      	mov	r0, r4
 801018a:	f7f0 fcd1 	bl	8000b30 <__aeabi_fsub>
 801018e:	4603      	mov	r3, r0
 8010190:	64fb      	str	r3, [r7, #76]	; 0x4c


    S31_angle = - S31_angle*(Kt32_att - 1) - Kt31_att*S11_angle - Kt32_att*S21_angle;
 8010192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010194:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8010198:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801019c:	68b8      	ldr	r0, [r7, #8]
 801019e:	f7f0 fcc7 	bl	8000b30 <__aeabi_fsub>
 80101a2:	4603      	mov	r3, r0
 80101a4:	4619      	mov	r1, r3
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7f0 fdcc 	bl	8000d44 <__aeabi_fmul>
 80101ac:	4603      	mov	r3, r0
 80101ae:	461c      	mov	r4, r3
 80101b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80101b2:	68f8      	ldr	r0, [r7, #12]
 80101b4:	f7f0 fdc6 	bl	8000d44 <__aeabi_fmul>
 80101b8:	4603      	mov	r3, r0
 80101ba:	4619      	mov	r1, r3
 80101bc:	4620      	mov	r0, r4
 80101be:	f7f0 fcb7 	bl	8000b30 <__aeabi_fsub>
 80101c2:	4603      	mov	r3, r0
 80101c4:	461c      	mov	r4, r3
 80101c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101c8:	68b8      	ldr	r0, [r7, #8]
 80101ca:	f7f0 fdbb 	bl	8000d44 <__aeabi_fmul>
 80101ce:	4603      	mov	r3, r0
 80101d0:	4619      	mov	r1, r3
 80101d2:	4620      	mov	r0, r4
 80101d4:	f7f0 fcac 	bl	8000b30 <__aeabi_fsub>
 80101d8:	4603      	mov	r3, r0
 80101da:	64bb      	str	r3, [r7, #72]	; 0x48


    S32_angle = - S32_angle*(Kt32_att - 1) - Kt31_att*S12_angle - Kt32_att*S22_angle;
 80101dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101de:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80101e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80101e6:	68b8      	ldr	r0, [r7, #8]
 80101e8:	f7f0 fca2 	bl	8000b30 <__aeabi_fsub>
 80101ec:	4603      	mov	r3, r0
 80101ee:	4619      	mov	r1, r3
 80101f0:	4620      	mov	r0, r4
 80101f2:	f7f0 fda7 	bl	8000d44 <__aeabi_fmul>
 80101f6:	4603      	mov	r3, r0
 80101f8:	461c      	mov	r4, r3
 80101fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f7f0 fda1 	bl	8000d44 <__aeabi_fmul>
 8010202:	4603      	mov	r3, r0
 8010204:	4619      	mov	r1, r3
 8010206:	4620      	mov	r0, r4
 8010208:	f7f0 fc92 	bl	8000b30 <__aeabi_fsub>
 801020c:	4603      	mov	r3, r0
 801020e:	461c      	mov	r4, r3
 8010210:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010212:	68b8      	ldr	r0, [r7, #8]
 8010214:	f7f0 fd96 	bl	8000d44 <__aeabi_fmul>
 8010218:	4603      	mov	r3, r0
 801021a:	4619      	mov	r1, r3
 801021c:	4620      	mov	r0, r4
 801021e:	f7f0 fc87 	bl	8000b30 <__aeabi_fsub>
 8010222:	4603      	mov	r3, r0
 8010224:	647b      	str	r3, [r7, #68]	; 0x44


    S33_angle = - S33_angle*(Kt32_att - 1) - Kt31_att*S13_angle - Kt32_att*S23_angle;
 8010226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010228:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 801022c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010230:	68b8      	ldr	r0, [r7, #8]
 8010232:	f7f0 fc7d 	bl	8000b30 <__aeabi_fsub>
 8010236:	4603      	mov	r3, r0
 8010238:	4619      	mov	r1, r3
 801023a:	4620      	mov	r0, r4
 801023c:	f7f0 fd82 	bl	8000d44 <__aeabi_fmul>
 8010240:	4603      	mov	r3, r0
 8010242:	461c      	mov	r4, r3
 8010244:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f7f0 fd7c 	bl	8000d44 <__aeabi_fmul>
 801024c:	4603      	mov	r3, r0
 801024e:	4619      	mov	r1, r3
 8010250:	4620      	mov	r0, r4
 8010252:	f7f0 fc6d 	bl	8000b30 <__aeabi_fsub>
 8010256:	4603      	mov	r3, r0
 8010258:	461c      	mov	r4, r3
 801025a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801025c:	68b8      	ldr	r0, [r7, #8]
 801025e:	f7f0 fd71 	bl	8000d44 <__aeabi_fmul>
 8010262:	4603      	mov	r3, r0
 8010264:	4619      	mov	r1, r3
 8010266:	4620      	mov	r0, r4
 8010268:	f7f0 fc62 	bl	8000b30 <__aeabi_fsub>
 801026c:	4603      	mov	r3, r0
 801026e:	643b      	str	r3, [r7, #64]	; 0x40

    switch(euler_angle) {
 8010270:	78fb      	ldrb	r3, [r7, #3]
 8010272:	2b02      	cmp	r3, #2
 8010274:	d05d      	beq.n	8010332 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe6a>
 8010276:	2b02      	cmp	r3, #2
 8010278:	f300 808e 	bgt.w	8010398 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
 801027c:	2b00      	cmp	r3, #0
 801027e:	d002      	beq.n	8010286 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xdbe>
 8010280:	2b01      	cmp	r3, #1
 8010282:	d02b      	beq.n	80102dc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe14>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 8010284:	e088      	b.n	8010398 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 roll_ekf = angle_ekf ;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801028a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    			 roll_rate = angle_rate;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010292:	621a      	str	r2, [r3, #32]
    			 roll_bias = angle_bias;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010298:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    			 roll_acc = angle_acc ;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102a0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    			 S11_roll = S11_angle;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102a8:	659a      	str	r2, [r3, #88]	; 0x58
    			 S12_roll = S12_angle;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102ae:	65da      	str	r2, [r3, #92]	; 0x5c
    			 S13_roll = S13_angle;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102b4:	669a      	str	r2, [r3, #104]	; 0x68
    			 S21_roll = S21_angle;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102ba:	661a      	str	r2, [r3, #96]	; 0x60
    			 S22_roll = S22_angle;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80102c0:	665a      	str	r2, [r3, #100]	; 0x64
    			 S23_roll = S23_angle;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102c6:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S31_roll = S31_angle;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102cc:	671a      	str	r2, [r3, #112]	; 0x70
    			 S32_roll = S32_angle;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102d2:	675a      	str	r2, [r3, #116]	; 0x74
    			 S33_roll = S33_angle;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102d8:	679a      	str	r2, [r3, #120]	; 0x78
    			break;
 80102da:	e05d      	b.n	8010398 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 pitch_ekf = angle_ekf ;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80102e0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    			 pitch_rate = angle_rate;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80102e8:	625a      	str	r2, [r3, #36]	; 0x24
    			 pitch_bias = angle_bias;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80102ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    			 pitch_acc = angle_acc ;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102f6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    			 S11_pitch = S11_angle;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102fe:	62da      	str	r2, [r3, #44]	; 0x2c
    			 S12_pitch = S12_angle;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010304:	631a      	str	r2, [r3, #48]	; 0x30
    			 S13_pitch = S13_angle;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801030a:	63da      	str	r2, [r3, #60]	; 0x3c
    			 S21_pitch = S21_angle;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010310:	635a      	str	r2, [r3, #52]	; 0x34
    			 S22_pitch = S22_angle;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010316:	639a      	str	r2, [r3, #56]	; 0x38
    			 S23_pitch = S23_angle;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801031c:	641a      	str	r2, [r3, #64]	; 0x40
    			 S31_pitch = S31_angle;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010322:	645a      	str	r2, [r3, #68]	; 0x44
    			 S32_pitch = S32_angle;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010328:	649a      	str	r2, [r3, #72]	; 0x48
    			 S33_pitch = S33_angle;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801032e:	64da      	str	r2, [r3, #76]	; 0x4c
    			break;
 8010330:	e032      	b.n	8010398 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 yaw_ekf = angle_ekf ;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010336:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    			 yaw_rate = angle_rate;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801033e:	629a      	str	r2, [r3, #40]	; 0x28
    			 yaw_bias = angle_bias;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010344:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    			 yaw_acc = angle_acc ;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801034c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    			 S11_yaw = S11_angle;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010354:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S12_yaw = S12_angle;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801035a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			 S13_yaw = S13_angle;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    			 S21_yaw = S21_angle;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801036a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S22_yaw = S22_angle;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			 S23_yaw = S23_angle;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801037a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    			 S31_yaw = S31_angle;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010382:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    			 S32_yaw = S32_angle;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801038a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    			 S33_yaw = S33_angle;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010392:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    			break;
 8010396:	bf00      	nop
}
 8010398:	bf00      	nop
 801039a:	3778      	adds	r7, #120	; 0x78
 801039c:	46bd      	mov	sp, r7
 801039e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103a2:	bf00      	nop
 80103a4:	0000      	movs	r0, r0
	...

080103a8 <_ZN15Kalman_Filtresi8NED2BodyEv>:
	  S22_x = S22_x - S12_x*(Kt21);


}
*/
void Kalman_Filtresi::NED2Body() {
 80103a8:	b590      	push	{r4, r7, lr}
 80103aa:	b089      	sub	sp, #36	; 0x24
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
	float deg2rad = M_PI/180.0;
 80103b0:	4b55      	ldr	r3, [pc, #340]	; (8010508 <_ZN15Kalman_Filtresi8NED2BodyEv+0x160>)
 80103b2:	61fb      	str	r3, [r7, #28]

	float yaw   = -yaw_ekf*deg2rad;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80103ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80103be:	4619      	mov	r1, r3
 80103c0:	69f8      	ldr	r0, [r7, #28]
 80103c2:	f7f0 fcbf 	bl	8000d44 <__aeabi_fmul>
 80103c6:	4603      	mov	r3, r0
 80103c8:	61bb      	str	r3, [r7, #24]
	//float roll  = roll_ekf*deg2rad;
	//float pitch = pitch_ekf*deg2rad;

	float DCM11 = cos(yaw);
 80103ca:	69b8      	ldr	r0, [r7, #24]
 80103cc:	f7f2 f948 	bl	8002660 <_ZSt3cosf>
 80103d0:	6178      	str	r0, [r7, #20]
	float DCM22 = DCM11;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	613b      	str	r3, [r7, #16]

	float DCM12 = sin(yaw);
 80103d6:	69b8      	ldr	r0, [r7, #24]
 80103d8:	f7f2 f94e 	bl	8002678 <_ZSt3sinf>
 80103dc:	60f8      	str	r0, [r7, #12]
	float DCM21 = -DCM12;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80103e4:	60bb      	str	r3, [r7, #8]

	_xbody = xbody;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	_ybody = ybody;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

	xbody = DCM11*xned + DCM21*yned;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010404:	6979      	ldr	r1, [r7, #20]
 8010406:	4618      	mov	r0, r3
 8010408:	f7f0 fc9c 	bl	8000d44 <__aeabi_fmul>
 801040c:	4603      	mov	r3, r0
 801040e:	461c      	mov	r4, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010416:	68b9      	ldr	r1, [r7, #8]
 8010418:	4618      	mov	r0, r3
 801041a:	f7f0 fc93 	bl	8000d44 <__aeabi_fmul>
 801041e:	4603      	mov	r3, r0
 8010420:	4619      	mov	r1, r3
 8010422:	4620      	mov	r0, r4
 8010424:	f7f0 fb86 	bl	8000b34 <__addsf3>
 8010428:	4603      	mov	r3, r0
 801042a:	461a      	mov	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ybody = DCM12*xned + DCM22*yned;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010438:	68f9      	ldr	r1, [r7, #12]
 801043a:	4618      	mov	r0, r3
 801043c:	f7f0 fc82 	bl	8000d44 <__aeabi_fmul>
 8010440:	4603      	mov	r3, r0
 8010442:	461c      	mov	r4, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801044a:	6939      	ldr	r1, [r7, #16]
 801044c:	4618      	mov	r0, r3
 801044e:	f7f0 fc79 	bl	8000d44 <__aeabi_fmul>
 8010452:	4603      	mov	r3, r0
 8010454:	4619      	mov	r1, r3
 8010456:	4620      	mov	r0, r4
 8010458:	f7f0 fb6c 	bl	8000b34 <__addsf3>
 801045c:	4603      	mov	r3, r0
 801045e:	461a      	mov	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	/*
	vgpsx = DCM11*vgpsxned + DCM21*vgpsyned;
	vgpsy = DCM12*vgpsxned + DCM22*vgpsyned;
	*/

	vgpsx = (xbody - _xbody) / 0.2;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8010472:	4619      	mov	r1, r3
 8010474:	4610      	mov	r0, r2
 8010476:	f7f0 fb5b 	bl	8000b30 <__aeabi_fsub>
 801047a:	4603      	mov	r3, r0
 801047c:	4618      	mov	r0, r3
 801047e:	f7ef ffd3 	bl	8000428 <__aeabi_f2d>
 8010482:	a31f      	add	r3, pc, #124	; (adr r3, 8010500 <_ZN15Kalman_Filtresi8NED2BodyEv+0x158>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	f7f0 f950 	bl	800072c <__aeabi_ddiv>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	4610      	mov	r0, r2
 8010492:	4619      	mov	r1, r3
 8010494:	f7f0 faf8 	bl	8000a88 <__aeabi_d2f>
 8010498:	4602      	mov	r2, r0
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	vgpsy = (ybody - _ybody) / 0.2;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80104ac:	4619      	mov	r1, r3
 80104ae:	4610      	mov	r0, r2
 80104b0:	f7f0 fb3e 	bl	8000b30 <__aeabi_fsub>
 80104b4:	4603      	mov	r3, r0
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7ef ffb6 	bl	8000428 <__aeabi_f2d>
 80104bc:	a310      	add	r3, pc, #64	; (adr r3, 8010500 <_ZN15Kalman_Filtresi8NED2BodyEv+0x158>)
 80104be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c2:	f7f0 f933 	bl	800072c <__aeabi_ddiv>
 80104c6:	4602      	mov	r2, r0
 80104c8:	460b      	mov	r3, r1
 80104ca:	4610      	mov	r0, r2
 80104cc:	4619      	mov	r1, r3
 80104ce:	f7f0 fadb 	bl	8000a88 <__aeabi_d2f>
 80104d2:	4602      	mov	r2, r0
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	//vgpsx = vel_gps_filt.Run(vgpsx);
	//vgpsy = vel_gps_filt.Run(vgpsy);

	xgps = xbody;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	ygps = ybody;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

}
 80104f2:	bf00      	nop
 80104f4:	3724      	adds	r7, #36	; 0x24
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd90      	pop	{r4, r7, pc}
 80104fa:	bf00      	nop
 80104fc:	f3af 8000 	nop.w
 8010500:	9999999a 	.word	0x9999999a
 8010504:	3fc99999 	.word	0x3fc99999
 8010508:	3c8efa35 	.word	0x3c8efa35

0801050c <_ZN15Kalman_Filtresi3RunEv>:
void Kalman_Filtresi::Run() {
 801050c:	b580      	push	{r7, lr}
 801050e:	b086      	sub	sp, #24
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]

  acc_pos_x_med += acc_pos_x;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 801051e:	4619      	mov	r1, r3
 8010520:	4610      	mov	r0, r2
 8010522:	f7f0 fb07 	bl	8000b34 <__addsf3>
 8010526:	4603      	mov	r3, r0
 8010528:	461a      	mov	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	601a      	str	r2, [r3, #0]
  float accX = acc[0];
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010534:	617b      	str	r3, [r7, #20]
  float accY = acc[1];
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801053c:	613b      	str	r3, [r7, #16]
  float accZ = acc[2];
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010544:	60fb      	str	r3, [r7, #12]




    if(gyro_ready) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 801054c:	2b00      	cmp	r3, #0
 801054e:	d014      	beq.n	801057a <_ZN15Kalman_Filtresi3RunEv+0x6e>

    pos_ekf_counter++;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	1c5a      	adds	r2, r3, #1
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	605a      	str	r2, [r3, #4]
    EKF_Attitude(ROLL);
 801055a:	2100      	movs	r1, #0
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7fe ffb3 	bl	800f4c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 8010562:	2101      	movs	r1, #1
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7fe ffaf 	bl	800f4c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 801056a:	2102      	movs	r1, #2
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7fe ffab 	bl	800f4c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>

    //EKF_Alt();
    EKF_Pos();
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7fe ff50 	bl	800f418 <_ZN15Kalman_Filtresi7EKF_PosEv>
 8010578:	e003      	b.n	8010582 <_ZN15Kalman_Filtresi3RunEv+0x76>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
    	*/
    	gyro_ready = true;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2201      	movs	r2, #1
 801057e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    state.angles[1] = pitch_ekf;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    state.angles[2] = -1*yaw_ekf;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80105a0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    state.rates[0] = roll_rate;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a1a      	ldr	r2, [r3, #32]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    state.rates[1] = pitch_rate;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    state.rates[2] = yaw_rate;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

    state.bias[0] = roll_bias;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    state.bias[1] = pitch_bias;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    state.bias[2] = yaw_bias;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

}
 80105ec:	bf00      	nop
 80105ee:	3718      	adds	r7, #24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010602:	4618      	mov	r0, r3
 8010604:	f000 fc8b 	bl	8010f1e <_ZN3lpfD1Ev>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801060e:	4618      	mov	r0, r3
 8010610:	f000 fc85 	bl	8010f1e <_ZN3lpfD1Ev>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801061a:	4618      	mov	r0, r3
 801061c:	f000 fc7f 	bl	8010f1e <_ZN3lpfD1Ev>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	0000      	movs	r0, r0
 801062c:	0000      	movs	r0, r0
	...

08010630 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 8010630:	b580      	push	{r7, lr}
 8010632:	b086      	sub	sp, #24
 8010634:	af04      	add	r7, sp, #16
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4a27      	ldr	r2, [pc, #156]	; (80106d8 <_ZN3PIDC1Ev+0xa8>)
 801063c:	609a      	str	r2, [r3, #8]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4a26      	ldr	r2, [pc, #152]	; (80106dc <_ZN3PIDC1Ev+0xac>)
 8010642:	60da      	str	r2, [r3, #12]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4a26      	ldr	r2, [pc, #152]	; (80106e0 <_ZN3PIDC1Ev+0xb0>)
 8010648:	611a      	str	r2, [r3, #16]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	22c8      	movs	r2, #200	; 0xc8
 801064e:	615a      	str	r2, [r3, #20]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	695b      	ldr	r3, [r3, #20]
 8010654:	4618      	mov	r0, r3
 8010656:	f7f0 fb21 	bl	8000c9c <__aeabi_i2f>
 801065a:	4603      	mov	r3, r0
 801065c:	4619      	mov	r1, r3
 801065e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010662:	f7f0 fc23 	bl	8000eac <__aeabi_fdiv>
 8010666:	4603      	mov	r3, r0
 8010668:	461a      	mov	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	619a      	str	r2, [r3, #24]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4a1c      	ldr	r2, [pc, #112]	; (80106e4 <_ZN3PIDC1Ev+0xb4>)
 8010672:	61da      	str	r2, [r3, #28]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	69da      	ldr	r2, [r3, #28]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	699b      	ldr	r3, [r3, #24]
 801067c:	4619      	mov	r1, r3
 801067e:	4610      	mov	r0, r2
 8010680:	f7f0 fb60 	bl	8000d44 <__aeabi_fmul>
 8010684:	4603      	mov	r3, r0
 8010686:	461a      	mov	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	621a      	str	r2, [r3, #32]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010692:	a30d      	add	r3, pc, #52	; (adr r3, 80106c8 <_ZN3PIDC1Ev+0x98>)
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801069c:	a30a      	add	r3, pc, #40	; (adr r3, 80106c8 <_ZN3PIDC1Ev+0x98>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	e9cd 2300 	strd	r2, r3, [sp]
 80106a6:	a30a      	add	r3, pc, #40	; (adr r3, 80106d0 <_ZN3PIDC1Ev+0xa0>)
 80106a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ac:	4608      	mov	r0, r1
 80106ae:	f000 fbc5 	bl	8010e3c <_ZN3lpfC1Eddd>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80106b8:	669a      	str	r2, [r3, #104]	; 0x68
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4618      	mov	r0, r3
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	f3af 8000 	nop.w
 80106c8:	de7ea5f8 	.word	0xde7ea5f8
 80106cc:	3fb2a454 	.word	0x3fb2a454
 80106d0:	ab367a10 	.word	0xab367a10
 80106d4:	3feb573e 	.word	0x3feb573e
 80106d8:	3d4ccccd 	.word	0x3d4ccccd
 80106dc:	42f00000 	.word	0x42f00000
 80106e0:	c2f00000 	.word	0xc2f00000
 80106e4:	3e99999a 	.word	0x3e99999a

080106e8 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 80106e8:	b590      	push	{r4, r7, lr}
 80106ea:	b087      	sub	sp, #28
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	607a      	str	r2, [r7, #4]
 80106f4:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 80106f6:	6879      	ldr	r1, [r7, #4]
 80106f8:	68b8      	ldr	r0, [r7, #8]
 80106fa:	f7f0 fa19 	bl	8000b30 <__aeabi_fsub>
 80106fe:	4603      	mov	r3, r0
 8010700:	461a      	mov	r2, r3
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ie_roll += e_angle*st;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	699b      	ldr	r3, [r3, #24]
 8010716:	4619      	mov	r1, r3
 8010718:	4610      	mov	r0, r2
 801071a:	f7f0 fb13 	bl	8000d44 <__aeabi_fmul>
 801071e:	4603      	mov	r3, r0
 8010720:	4619      	mov	r1, r3
 8010722:	4620      	mov	r0, r4
 8010724:	f7f0 fa06 	bl	8000b34 <__addsf3>
 8010728:	4603      	mov	r3, r0
 801072a:	461a      	mov	r2, r3
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	67da      	str	r2, [r3, #124]	; 0x7c
	P = Kp_angle*e_angle;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010736:	4619      	mov	r1, r3
 8010738:	6838      	ldr	r0, [r7, #0]
 801073a:	f7f0 fb03 	bl	8000d44 <__aeabi_fmul>
 801073e:	4603      	mov	r3, r0
 8010740:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010746:	4619      	mov	r1, r3
 8010748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801074a:	f7f0 fafb 	bl	8000d44 <__aeabi_fmul>
 801074e:	4603      	mov	r3, r0
 8010750:	613b      	str	r3, [r7, #16]
    return P+I;
 8010752:	6939      	ldr	r1, [r7, #16]
 8010754:	6978      	ldr	r0, [r7, #20]
 8010756:	f7f0 f9ed 	bl	8000b34 <__addsf3>
 801075a:	4603      	mov	r3, r0

}
 801075c:	4618      	mov	r0, r3
 801075e:	371c      	adds	r7, #28
 8010760:	46bd      	mov	sp, r7
 8010762:	bd90      	pop	{r4, r7, pc}

08010764 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 8010764:	b580      	push	{r7, lr}
 8010766:	b08a      	sub	sp, #40	; 0x28
 8010768:	af00      	add	r7, sp, #0
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	607a      	str	r2, [r7, #4]
 8010770:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 8010772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010774:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8010778:	4293      	cmp	r3, r2
 801077a:	d90e      	bls.n	801079a <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	68b9      	ldr	r1, [r7, #8]
 8010782:	4618      	mov	r0, r3
 8010784:	f7f0 f9d6 	bl	8000b34 <__addsf3>
 8010788:	4603      	mov	r3, r0
 801078a:	461a      	mov	r2, r3
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = vz_def;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	69db      	ldr	r3, [r3, #28]
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
 8010798:	e01c      	b.n	80107d4 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 801079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079c:	f240 5213 	movw	r2, #1299	; 0x513
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d810      	bhi.n	80107c6 <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6a1b      	ldr	r3, [r3, #32]
 80107a8:	4619      	mov	r1, r3
 80107aa:	68b8      	ldr	r0, [r7, #8]
 80107ac:	f7f0 f9c0 	bl	8000b30 <__aeabi_fsub>
 80107b0:	4603      	mov	r3, r0
 80107b2:	461a      	mov	r2, r3
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = -1 * vz_def;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	69db      	ldr	r3, [r3, #28]
 80107be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80107c2:	627b      	str	r3, [r7, #36]	; 0x24
 80107c4:	e006      	b.n	80107d4 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	68ba      	ldr	r2, [r7, #8]
 80107ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = 0;
 80107ce:	f04f 0300 	mov.w	r3, #0
 80107d2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 80107d4:	6839      	ldr	r1, [r7, #0]
 80107d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107d8:	f7f0 f9aa 	bl	8000b30 <__aeabi_fsub>
 80107dc:	4603      	mov	r3, r0
 80107de:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 80107e0:	6a39      	ldr	r1, [r7, #32]
 80107e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107e4:	f7f0 faae 	bl	8000d44 <__aeabi_fmul>
 80107e8:	4603      	mov	r3, r0
 80107ea:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 80107ec:	6879      	ldr	r1, [r7, #4]
 80107ee:	68b8      	ldr	r0, [r7, #8]
 80107f0:	f7f0 f99e 	bl	8000b30 <__aeabi_fsub>
 80107f4:	4603      	mov	r3, r0
 80107f6:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 80107f8:	69b9      	ldr	r1, [r7, #24]
 80107fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107fc:	f7f0 faa2 	bl	8000d44 <__aeabi_fmul>
 8010800:	4603      	mov	r3, r0
 8010802:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 8010804:	6979      	ldr	r1, [r7, #20]
 8010806:	69f8      	ldr	r0, [r7, #28]
 8010808:	f7f0 f994 	bl	8000b34 <__addsf3>
 801080c:	4603      	mov	r3, r0
 801080e:	613b      	str	r3, [r7, #16]
    return PI;
 8010810:	693b      	ldr	r3, [r7, #16]

}
 8010812:	4618      	mov	r0, r3
 8010814:	3728      	adds	r7, #40	; 0x28
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	0000      	movs	r0, r0
 801081c:	0000      	movs	r0, r0
	...

08010820 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 8010820:	b5b0      	push	{r4, r5, r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801082e:	4618      	mov	r0, r3
 8010830:	f7ef fdfa 	bl	8000428 <__aeabi_f2d>
 8010834:	a31e      	add	r3, pc, #120	; (adr r3, 80108b0 <_ZN3PID6RateFFEf+0x90>)
 8010836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083a:	f7ef fe4d 	bl	80004d8 <__aeabi_dmul>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	4614      	mov	r4, r2
 8010844:	461d      	mov	r5, r3
 8010846:	6838      	ldr	r0, [r7, #0]
 8010848:	f7ef fdee 	bl	8000428 <__aeabi_f2d>
 801084c:	a31a      	add	r3, pc, #104	; (adr r3, 80108b8 <_ZN3PID6RateFFEf+0x98>)
 801084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010852:	f7ef fe41 	bl	80004d8 <__aeabi_dmul>
 8010856:	4602      	mov	r2, r0
 8010858:	460b      	mov	r3, r1
 801085a:	4620      	mov	r0, r4
 801085c:	4629      	mov	r1, r5
 801085e:	f7ef fc85 	bl	800016c <__adddf3>
 8010862:	4602      	mov	r2, r0
 8010864:	460b      	mov	r3, r1
 8010866:	4614      	mov	r4, r2
 8010868:	461d      	mov	r5, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801086e:	4618      	mov	r0, r3
 8010870:	f7ef fdda 	bl	8000428 <__aeabi_f2d>
 8010874:	a310      	add	r3, pc, #64	; (adr r3, 80108b8 <_ZN3PID6RateFFEf+0x98>)
 8010876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087a:	f7ef fe2d 	bl	80004d8 <__aeabi_dmul>
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	f7ef fc6f 	bl	8000168 <__aeabi_dsub>
 801088a:	4602      	mov	r2, r0
 801088c:	460b      	mov	r3, r1
 801088e:	4610      	mov	r0, r2
 8010890:	4619      	mov	r1, r3
 8010892:	f7f0 f8f9 	bl	8000a88 <__aeabi_d2f>
 8010896:	4603      	mov	r3, r0
 8010898:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801089e:	68f9      	ldr	r1, [r7, #12]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7f0 fa4f 	bl	8000d44 <__aeabi_fmul>
 80108a6:	4603      	mov	r3, r0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bdb0      	pop	{r4, r5, r7, pc}
 80108b0:	1eb851ec 	.word	0x1eb851ec
 80108b4:	3fefeb85 	.word	0x3fefeb85
 80108b8:	538ef34d 	.word	0x538ef34d
 80108bc:	3fb72474 	.word	0x3fb72474

080108c0 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 80108c0:	b590      	push	{r4, r7, lr}
 80108c2:	b087      	sub	sp, #28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 80108ce:	6879      	ldr	r1, [r7, #4]
 80108d0:	68b8      	ldr	r0, [r7, #8]
 80108d2:	f7f0 f92d 	bl	8000b30 <__aeabi_fsub>
 80108d6:	4603      	mov	r3, r0
 80108d8:	461a      	mov	r2, r3
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate += e_roll*st;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	699b      	ldr	r3, [r3, #24]
 80108ec:	4619      	mov	r1, r3
 80108ee:	4610      	mov	r0, r2
 80108f0:	f7f0 fa28 	bl	8000d44 <__aeabi_fmul>
 80108f4:	4603      	mov	r3, r0
 80108f6:	4619      	mov	r1, r3
 80108f8:	4620      	mov	r0, r4
 80108fa:	f7f0 f91b 	bl	8000b34 <__addsf3>
 80108fe:	4603      	mov	r3, r0
 8010900:	461a      	mov	r2, r3
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	P = Kp * e_roll;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801090c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801090e:	4618      	mov	r0, r3
 8010910:	f7f0 fa18 	bl	8000d44 <__aeabi_fmul>
 8010914:	4603      	mov	r3, r0
 8010916:	461a      	mov	r2, r3
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010926:	4618      	mov	r0, r3
 8010928:	f7f0 fa0c 	bl	8000d44 <__aeabi_fmul>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801093a:	4619      	mov	r1, r3
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f7f0 f8f7 	bl	8000b30 <__aeabi_fsub>
 8010942:	4603      	mov	r3, r0
 8010944:	461a      	mov	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	699b      	ldr	r3, [r3, #24]
 801094a:	4619      	mov	r1, r3
 801094c:	4610      	mov	r0, r2
 801094e:	f7f0 faad 	bl	8000eac <__aeabi_fdiv>
 8010952:	4603      	mov	r3, r0
 8010954:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	3338      	adds	r3, #56	; 0x38
 801095a:	6979      	ldr	r1, [r7, #20]
 801095c:	4618      	mov	r0, r3
 801095e:	f000 fa88 	bl	8010e72 <_ZN3lpf3RunEf>
 8010962:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801096a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801096c:	4618      	mov	r0, r3
 801096e:	f7f0 f9e9 	bl	8000d44 <__aeabi_fmul>
 8010972:	4603      	mov	r3, r0
 8010974:	6979      	ldr	r1, [r7, #20]
 8010976:	4618      	mov	r0, r3
 8010978:	f7f0 f8da 	bl	8000b30 <__aeabi_fsub>
 801097c:	4603      	mov	r3, r0
 801097e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010980:	4618      	mov	r0, r3
 8010982:	f7f0 f9df 	bl	8000d44 <__aeabi_fmul>
 8010986:	4603      	mov	r3, r0
 8010988:	461a      	mov	r2, r3
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801099c:	4619      	mov	r1, r3
 801099e:	4610      	mov	r0, r2
 80109a0:	f7f0 f8c8 	bl	8000b34 <__addsf3>
 80109a4:	4603      	mov	r3, r0
 80109a6:	461a      	mov	r2, r3
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80109ae:	4619      	mov	r1, r3
 80109b0:	4610      	mov	r0, r2
 80109b2:	f7f0 f8bf 	bl	8000b34 <__addsf3>
 80109b6:	4603      	mov	r3, r0
 80109b8:	461a      	mov	r2, r3
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80109d0:	4b0e      	ldr	r3, [pc, #56]	; (8010a0c <_ZN3PID9PID_Rate2Efffffff+0x14c>)
 80109d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f000 f9ba 	bl	8010d50 <_ZN3PID3SatEfii>
 80109dc:	4602      	mov	r2, r0
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	alpha_dot_des_ = alpha_dot_des;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	62da      	str	r2, [r3, #44]	; 0x2c
	alpha_dot_ = alpha_dot;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	631a      	str	r2, [r3, #48]	; 0x30
	return pd;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd90      	pop	{r4, r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	fffffed4 	.word	0xfffffed4

08010a10 <_ZN3PID7PID_PosEfffff>:

float PID::PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd) {
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	607a      	str	r2, [r7, #4]
 8010a1c:	603b      	str	r3, [r7, #0]
	_e_pos = e_pos;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	685a      	ldr	r2, [r3, #4]
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	601a      	str	r2, [r3, #0]
	e_pos = pos_des - pos;
 8010a26:	6879      	ldr	r1, [r7, #4]
 8010a28:	68b8      	ldr	r0, [r7, #8]
 8010a2a:	f7f0 f881 	bl	8000b30 <__aeabi_fsub>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	461a      	mov	r2, r3
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	605a      	str	r2, [r3, #4]
	float P = Kp * e_pos;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	6838      	ldr	r0, [r7, #0]
 8010a3e:	f7f0 f981 	bl	8000d44 <__aeabi_fmul>
 8010a42:	4603      	mov	r3, r0
 8010a44:	61fb      	str	r3, [r7, #28]

	float e_pos_dot = (e_pos - _e_pos)/st_pos;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	685a      	ldr	r2, [r3, #4]
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	4610      	mov	r0, r2
 8010a52:	f7f0 f86d 	bl	8000b30 <__aeabi_fsub>
 8010a56:	4603      	mov	r3, r0
 8010a58:	461a      	mov	r2, r3
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	689b      	ldr	r3, [r3, #8]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	4610      	mov	r0, r2
 8010a62:	f7f0 fa23 	bl	8000eac <__aeabi_fdiv>
 8010a66:	4603      	mov	r3, r0
 8010a68:	61bb      	str	r3, [r7, #24]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	//alpha_dot_dot = d_filt.Run(alpha_dot_dot);

	float D = Kd * e_pos_dot;
 8010a6a:	69b9      	ldr	r1, [r7, #24]
 8010a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a6e:	f7f0 f969 	bl	8000d44 <__aeabi_fmul>
 8010a72:	4603      	mov	r3, r0
 8010a74:	617b      	str	r3, [r7, #20]
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	float pd = P + D;
 8010a76:	6979      	ldr	r1, [r7, #20]
 8010a78:	69f8      	ldr	r0, [r7, #28]
 8010a7a:	f7f0 f85b 	bl	8000b34 <__addsf3>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	613b      	str	r3, [r7, #16]
	return pd;
 8010a82:	693b      	ldr	r3, [r7, #16]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3720      	adds	r7, #32
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 8010a8c:	b590      	push	{r4, r7, lr}
 8010a8e:	b087      	sub	sp, #28
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	60b9      	str	r1, [r7, #8]
 8010a96:	607a      	str	r2, [r7, #4]
 8010a98:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 8010a9a:	6879      	ldr	r1, [r7, #4]
 8010a9c:	68b8      	ldr	r0, [r7, #8]
 8010a9e:	f7f0 f847 	bl	8000b30 <__aeabi_fsub>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	66da      	str	r2, [r3, #108]	; 0x6c
  float e_roll_der = - alpha_dot;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8010ab0:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ab6:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7f0 fb1d 	bl	80010fc <__aeabi_f2iz>
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f0 fb16 	bl	80010fc <__aeabi_f2iz>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	429c      	cmp	r4, r3
 8010ad4:	d019      	beq.n	8010b0a <_ZN3PID7PD_RateEfffff+0x7e>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ada:	4619      	mov	r1, r3
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f000 f8df 	bl	8010ca0 <_ZN3PID3sgnEf>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	461c      	mov	r4, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010aec:	4619      	mov	r1, r3
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f000 f8d6 	bl	8010ca0 <_ZN3PID3sgnEf>
 8010af4:	4603      	mov	r3, r0
 8010af6:	429c      	cmp	r4, r3
 8010af8:	bf0c      	ite	eq
 8010afa:	2301      	moveq	r3, #1
 8010afc:	2300      	movne	r3, #0
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d002      	beq.n	8010b0a <_ZN3PID7PD_RateEfffff+0x7e>
      e_roll_int = 0;
 8010b04:	f04f 0300 	mov.w	r3, #0
 8010b08:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7f0 f917 	bl	8000d44 <__aeabi_fmul>
 8010b16:	4603      	mov	r3, r0
 8010b18:	461a      	mov	r2, r3
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010b20:	4619      	mov	r1, r3
 8010b22:	4610      	mov	r0, r2
 8010b24:	f7f0 f804 	bl	8000b30 <__aeabi_fsub>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	494d      	ldr	r1, [pc, #308]	; (8010c60 <_ZN3PID7PD_RateEfffff+0x1d4>)
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7f0 f909 	bl	8000d44 <__aeabi_fmul>
 8010b32:	4603      	mov	r3, r0
 8010b34:	461a      	mov	r2, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_int += de_filt*st;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	699b      	ldr	r3, [r3, #24]
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	4610      	mov	r0, r2
 8010b50:	f7f0 f8f8 	bl	8000d44 <__aeabi_fmul>
 8010b54:	4603      	mov	r3, r0
 8010b56:	4619      	mov	r1, r3
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f7ef ffeb 	bl	8000b34 <__addsf3>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	461a      	mov	r2, r3
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	de = e_roll - e_eski_roll;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b70:	4619      	mov	r1, r3
 8010b72:	4610      	mov	r0, r2
 8010b74:	f7ef ffdc 	bl	8000b30 <__aeabi_fsub>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	e_eski_roll = e_roll;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	675a      	str	r2, [r3, #116]	; 0x74

  ie_roll += e_roll_int*st;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	699b      	ldr	r3, [r3, #24]
 8010b92:	6979      	ldr	r1, [r7, #20]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7f0 f8d5 	bl	8000d44 <__aeabi_fmul>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f7ef ffc8 	bl	8000b34 <__addsf3>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	67da      	str	r2, [r3, #124]	; 0x7c

  ie_roll_sat = ie_roll;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bba:	6839      	ldr	r1, [r7, #0]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7f0 f8c1 	bl	8000d44 <__aeabi_fmul>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7f0 f8af 	bl	8000d44 <__aeabi_fmul>
 8010be6:	4603      	mov	r3, r0
 8010be8:	461a      	mov	r2, r3
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//D = lpf.update(D);
	pd = P + I + D;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	4610      	mov	r0, r2
 8010c00:	f7ef ff98 	bl	8000b34 <__addsf3>
 8010c04:	4603      	mov	r3, r0
 8010c06:	461a      	mov	r2, r3
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010c0e:	4619      	mov	r1, r3
 8010c10:	4610      	mov	r0, r2
 8010c12:	f7ef ff8f 	bl	8000b34 <__addsf3>
 8010c16:	4603      	mov	r3, r0
 8010c18:	461a      	mov	r2, r3
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8010c30:	4b0c      	ldr	r3, [pc, #48]	; (8010c64 <_ZN3PID7PD_RateEfffff+0x1d8>)
 8010c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f000 f88a 	bl	8010d50 <_ZN3PID3SatEfii>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return pd;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8

}
 8010c56:	4618      	mov	r0, r3
 8010c58:	371c      	adds	r7, #28
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd90      	pop	{r4, r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	42c80000 	.word	0x42c80000
 8010c64:	fffffed4 	.word	0xfffffed4

08010c68 <_ZN3PID5resetEv>:

void PID::reset() {
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f04f 0200 	mov.w	r2, #0
 8010c76:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f04f 0200 	mov.w	r2, #0
 8010c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f04f 0200 	mov.w	r2, #0
 8010c88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f04f 0200 	mov.w	r2, #0
 8010c92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8010c96:	bf00      	nop
 8010c98:	370c      	adds	r7, #12
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bc80      	pop	{r7}
 8010c9e:	4770      	bx	lr

08010ca0 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 8010caa:	f04f 0100 	mov.w	r1, #0
 8010cae:	6838      	ldr	r0, [r7, #0]
 8010cb0:	f7f0 f9e6 	bl	8001080 <__aeabi_fcmplt>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <_ZN3PID3sgnEf+0x1e>
 8010cba:	23ff      	movs	r3, #255	; 0xff
 8010cbc:	e00a      	b.n	8010cd4 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 8010cbe:	f04f 0100 	mov.w	r1, #0
 8010cc2:	6838      	ldr	r0, [r7, #0]
 8010cc4:	f7f0 f9fa 	bl	80010bc <__aeabi_fcmpgt>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d001      	beq.n	8010cd2 <_ZN3PID3sgnEf+0x32>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e000      	b.n	8010cd4 <_ZN3PID3sgnEf+0x34>
  return 0;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
 8010ce8:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8010cf0:	dd24      	ble.n	8010d3c <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7ef ffd2 	bl	8000c9c <__aeabi_i2f>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	68b8      	ldr	r0, [r7, #8]
 8010cfe:	f7f0 f9dd 	bl	80010bc <__aeabi_fcmpgt>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d005      	beq.n	8010d14 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7ef ffc7 	bl	8000c9c <__aeabi_i2f>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	617b      	str	r3, [r7, #20]
 8010d12:	e015      	b.n	8010d40 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 8010d14:	6838      	ldr	r0, [r7, #0]
 8010d16:	f7ef ffc1 	bl	8000c9c <__aeabi_i2f>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	68b8      	ldr	r0, [r7, #8]
 8010d20:	f7f0 f9ae 	bl	8001080 <__aeabi_fcmplt>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d005      	beq.n	8010d36 <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 8010d2a:	6838      	ldr	r0, [r7, #0]
 8010d2c:	f7ef ffb6 	bl	8000c9c <__aeabi_i2f>
 8010d30:	4603      	mov	r3, r0
 8010d32:	617b      	str	r3, [r7, #20]
 8010d34:	e004      	b.n	8010d40 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	617b      	str	r3, [r7, #20]
 8010d3a:	e001      	b.n	8010d40 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 8010d3c:	4b03      	ldr	r3, [pc, #12]	; (8010d4c <_ZN3PID3SatEfiii+0x70>)
 8010d3e:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 8010d40:	697b      	ldr	r3, [r7, #20]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3718      	adds	r7, #24
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	447a0000 	.word	0x447a0000

08010d50 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
 8010d5c:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ef ff9c 	bl	8000c9c <__aeabi_i2f>
 8010d64:	4603      	mov	r3, r0
 8010d66:	4619      	mov	r1, r3
 8010d68:	68b8      	ldr	r0, [r7, #8]
 8010d6a:	f7f0 f9a7 	bl	80010bc <__aeabi_fcmpgt>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d005      	beq.n	8010d80 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ef ff91 	bl	8000c9c <__aeabi_i2f>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	617b      	str	r3, [r7, #20]
 8010d7e:	e012      	b.n	8010da6 <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 8010d80:	6838      	ldr	r0, [r7, #0]
 8010d82:	f7ef ff8b 	bl	8000c9c <__aeabi_i2f>
 8010d86:	4603      	mov	r3, r0
 8010d88:	4619      	mov	r1, r3
 8010d8a:	68b8      	ldr	r0, [r7, #8]
 8010d8c:	f7f0 f978 	bl	8001080 <__aeabi_fcmplt>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d005      	beq.n	8010da2 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 8010d96:	6838      	ldr	r0, [r7, #0]
 8010d98:	f7ef ff80 	bl	8000c9c <__aeabi_i2f>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	617b      	str	r3, [r7, #20]
 8010da0:	e001      	b.n	8010da6 <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 8010da6:	697b      	ldr	r3, [r7, #20]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3718      	adds	r7, #24
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b088      	sub	sp, #32
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 8010dba:	4b16      	ldr	r3, [pc, #88]	; (8010e14 <_ZN3PID5F2thrEf+0x64>)
 8010dbc:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 8010dbe:	4b16      	ldr	r3, [pc, #88]	; (8010e18 <_ZN3PID5F2thrEf+0x68>)
 8010dc0:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 8010dc2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8010dc6:	6838      	ldr	r0, [r7, #0]
 8010dc8:	f7f0 f870 	bl	8000eac <__aeabi_fdiv>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 8010dd0:	69f9      	ldr	r1, [r7, #28]
 8010dd2:	6978      	ldr	r0, [r7, #20]
 8010dd4:	f7f0 f86a 	bl	8000eac <__aeabi_fdiv>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7f1 fe3c 	bl	8002a58 <_ZSt4sqrtf>
 8010de0:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 8010de2:	490e      	ldr	r1, [pc, #56]	; (8010e1c <_ZN3PID5F2thrEf+0x6c>)
 8010de4:	6938      	ldr	r0, [r7, #16]
 8010de6:	f7ef ffad 	bl	8000d44 <__aeabi_fmul>
 8010dea:	4603      	mov	r3, r0
 8010dec:	69b9      	ldr	r1, [r7, #24]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7f0 f85c 	bl	8000eac <__aeabi_fdiv>
 8010df4:	4603      	mov	r3, r0
 8010df6:	4909      	ldr	r1, [pc, #36]	; (8010e1c <_ZN3PID5F2thrEf+0x6c>)
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7ef fe9b 	bl	8000b34 <__addsf3>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f0 f9a1 	bl	8001148 <__aeabi_f2uiz>
 8010e06:	4603      	mov	r3, r0
 8010e08:	60fb      	str	r3, [r7, #12]
	return thr;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3720      	adds	r7, #32
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	3359f513 	.word	0x3359f513
 8010e18:	46896e00 	.word	0x46896e00
 8010e1c:	447a0000 	.word	0x447a0000

08010e20 <_ZN3PIDD1Ev>:

PID::~PID() {};
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	3338      	adds	r3, #56	; 0x38
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f000 f876 	bl	8010f1e <_ZN3lpfD1Ev>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 8010e3c:	b480      	push	{r7}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60f8      	str	r0, [r7, #12]
 8010e44:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 8010e48:	68f9      	ldr	r1, [r7, #12]
 8010e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 8010e52:	68f9      	ldr	r1, [r7, #12]
 8010e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010e58:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 8010e5c:	68f9      	ldr	r1, [r7, #12]
 8010e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010e62:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3714      	adds	r7, #20
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bc80      	pop	{r7}
 8010e70:	4770      	bx	lr

08010e72 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 8010e72:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ef facd 	bl	8000428 <__aeabi_f2d>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	4620      	mov	r0, r4
 8010e94:	4629      	mov	r1, r5
 8010e96:	f7ef fb1f 	bl	80004d8 <__aeabi_dmul>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	4690      	mov	r8, r2
 8010ea0:	4699      	mov	r9, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8010ea8:	6838      	ldr	r0, [r7, #0]
 8010eaa:	f7ef fabd 	bl	8000428 <__aeabi_f2d>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	4629      	mov	r1, r5
 8010eb6:	f7ef fb0f 	bl	80004d8 <__aeabi_dmul>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	4640      	mov	r0, r8
 8010ec0:	4649      	mov	r1, r9
 8010ec2:	f7ef f953 	bl	800016c <__adddf3>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	4690      	mov	r8, r2
 8010ecc:	4699      	mov	r9, r3
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7ef faa5 	bl	8000428 <__aeabi_f2d>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	4629      	mov	r1, r5
 8010ee6:	f7ef faf7 	bl	80004d8 <__aeabi_dmul>
 8010eea:	4602      	mov	r2, r0
 8010eec:	460b      	mov	r3, r1
 8010eee:	4640      	mov	r0, r8
 8010ef0:	4649      	mov	r1, r9
 8010ef2:	f7ef f93b 	bl	800016c <__adddf3>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	4610      	mov	r0, r2
 8010efc:	4619      	mov	r1, r3
 8010efe:	f7ef fdc3 	bl	8000a88 <__aeabi_d2f>
 8010f02:	4603      	mov	r3, r0
 8010f04:	60fb      	str	r3, [r7, #12]
	x_ = x;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	683a      	ldr	r2, [r7, #0]
 8010f0a:	601a      	str	r2, [r3, #0]
	y_ = y;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	68fa      	ldr	r2, [r7, #12]
 8010f10:	605a      	str	r2, [r3, #4]
	return y;
 8010f12:	68fb      	ldr	r3, [r7, #12]

}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08010f1e <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 8010f1e:	b480      	push	{r7}
 8010f20:	b083      	sub	sp, #12
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bc80      	pop	{r7}
 8010f30:	4770      	bx	lr
	...

08010f34 <atanf>:
 8010f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f38:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8010f3c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8010f40:	4604      	mov	r4, r0
 8010f42:	4680      	mov	r8, r0
 8010f44:	db0e      	blt.n	8010f64 <atanf+0x30>
 8010f46:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010f4a:	dd04      	ble.n	8010f56 <atanf+0x22>
 8010f4c:	4601      	mov	r1, r0
 8010f4e:	f7ef fdf1 	bl	8000b34 <__addsf3>
 8010f52:	4604      	mov	r4, r0
 8010f54:	e003      	b.n	8010f5e <atanf+0x2a>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	f300 80ce 	bgt.w	80110f8 <atanf+0x1c4>
 8010f5c:	4c67      	ldr	r4, [pc, #412]	; (80110fc <atanf+0x1c8>)
 8010f5e:	4620      	mov	r0, r4
 8010f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f64:	4b66      	ldr	r3, [pc, #408]	; (8011100 <atanf+0x1cc>)
 8010f66:	429d      	cmp	r5, r3
 8010f68:	dc0e      	bgt.n	8010f88 <atanf+0x54>
 8010f6a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8010f6e:	da08      	bge.n	8010f82 <atanf+0x4e>
 8010f70:	4964      	ldr	r1, [pc, #400]	; (8011104 <atanf+0x1d0>)
 8010f72:	f7ef fddf 	bl	8000b34 <__addsf3>
 8010f76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010f7a:	f7f0 f89f 	bl	80010bc <__aeabi_fcmpgt>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d1ed      	bne.n	8010f5e <atanf+0x2a>
 8010f82:	f04f 36ff 	mov.w	r6, #4294967295
 8010f86:	e01c      	b.n	8010fc2 <atanf+0x8e>
 8010f88:	f000 f914 	bl	80111b4 <fabsf>
 8010f8c:	4b5e      	ldr	r3, [pc, #376]	; (8011108 <atanf+0x1d4>)
 8010f8e:	4604      	mov	r4, r0
 8010f90:	429d      	cmp	r5, r3
 8010f92:	dc7c      	bgt.n	801108e <atanf+0x15a>
 8010f94:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010f98:	429d      	cmp	r5, r3
 8010f9a:	dc67      	bgt.n	801106c <atanf+0x138>
 8010f9c:	4601      	mov	r1, r0
 8010f9e:	f7ef fdc9 	bl	8000b34 <__addsf3>
 8010fa2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010fa6:	f7ef fdc3 	bl	8000b30 <__aeabi_fsub>
 8010faa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010fae:	4605      	mov	r5, r0
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	f7ef fdbf 	bl	8000b34 <__addsf3>
 8010fb6:	4601      	mov	r1, r0
 8010fb8:	4628      	mov	r0, r5
 8010fba:	f7ef ff77 	bl	8000eac <__aeabi_fdiv>
 8010fbe:	2600      	movs	r6, #0
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	4621      	mov	r1, r4
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	f7ef febd 	bl	8000d44 <__aeabi_fmul>
 8010fca:	4601      	mov	r1, r0
 8010fcc:	4607      	mov	r7, r0
 8010fce:	f7ef feb9 	bl	8000d44 <__aeabi_fmul>
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	494d      	ldr	r1, [pc, #308]	; (801110c <atanf+0x1d8>)
 8010fd6:	f7ef feb5 	bl	8000d44 <__aeabi_fmul>
 8010fda:	494d      	ldr	r1, [pc, #308]	; (8011110 <atanf+0x1dc>)
 8010fdc:	f7ef fdaa 	bl	8000b34 <__addsf3>
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	f7ef feaf 	bl	8000d44 <__aeabi_fmul>
 8010fe6:	494b      	ldr	r1, [pc, #300]	; (8011114 <atanf+0x1e0>)
 8010fe8:	f7ef fda4 	bl	8000b34 <__addsf3>
 8010fec:	4629      	mov	r1, r5
 8010fee:	f7ef fea9 	bl	8000d44 <__aeabi_fmul>
 8010ff2:	4949      	ldr	r1, [pc, #292]	; (8011118 <atanf+0x1e4>)
 8010ff4:	f7ef fd9e 	bl	8000b34 <__addsf3>
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	f7ef fea3 	bl	8000d44 <__aeabi_fmul>
 8010ffe:	4947      	ldr	r1, [pc, #284]	; (801111c <atanf+0x1e8>)
 8011000:	f7ef fd98 	bl	8000b34 <__addsf3>
 8011004:	4629      	mov	r1, r5
 8011006:	f7ef fe9d 	bl	8000d44 <__aeabi_fmul>
 801100a:	4945      	ldr	r1, [pc, #276]	; (8011120 <atanf+0x1ec>)
 801100c:	f7ef fd92 	bl	8000b34 <__addsf3>
 8011010:	4639      	mov	r1, r7
 8011012:	f7ef fe97 	bl	8000d44 <__aeabi_fmul>
 8011016:	4943      	ldr	r1, [pc, #268]	; (8011124 <atanf+0x1f0>)
 8011018:	4607      	mov	r7, r0
 801101a:	4628      	mov	r0, r5
 801101c:	f7ef fe92 	bl	8000d44 <__aeabi_fmul>
 8011020:	4941      	ldr	r1, [pc, #260]	; (8011128 <atanf+0x1f4>)
 8011022:	f7ef fd85 	bl	8000b30 <__aeabi_fsub>
 8011026:	4629      	mov	r1, r5
 8011028:	f7ef fe8c 	bl	8000d44 <__aeabi_fmul>
 801102c:	493f      	ldr	r1, [pc, #252]	; (801112c <atanf+0x1f8>)
 801102e:	f7ef fd7f 	bl	8000b30 <__aeabi_fsub>
 8011032:	4629      	mov	r1, r5
 8011034:	f7ef fe86 	bl	8000d44 <__aeabi_fmul>
 8011038:	493d      	ldr	r1, [pc, #244]	; (8011130 <atanf+0x1fc>)
 801103a:	f7ef fd79 	bl	8000b30 <__aeabi_fsub>
 801103e:	4629      	mov	r1, r5
 8011040:	f7ef fe80 	bl	8000d44 <__aeabi_fmul>
 8011044:	493b      	ldr	r1, [pc, #236]	; (8011134 <atanf+0x200>)
 8011046:	f7ef fd73 	bl	8000b30 <__aeabi_fsub>
 801104a:	4629      	mov	r1, r5
 801104c:	f7ef fe7a 	bl	8000d44 <__aeabi_fmul>
 8011050:	4601      	mov	r1, r0
 8011052:	4638      	mov	r0, r7
 8011054:	f7ef fd6e 	bl	8000b34 <__addsf3>
 8011058:	4621      	mov	r1, r4
 801105a:	f7ef fe73 	bl	8000d44 <__aeabi_fmul>
 801105e:	1c73      	adds	r3, r6, #1
 8011060:	4601      	mov	r1, r0
 8011062:	d133      	bne.n	80110cc <atanf+0x198>
 8011064:	4620      	mov	r0, r4
 8011066:	f7ef fd63 	bl	8000b30 <__aeabi_fsub>
 801106a:	e772      	b.n	8010f52 <atanf+0x1e>
 801106c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011070:	f7ef fd5e 	bl	8000b30 <__aeabi_fsub>
 8011074:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011078:	4605      	mov	r5, r0
 801107a:	4620      	mov	r0, r4
 801107c:	f7ef fd5a 	bl	8000b34 <__addsf3>
 8011080:	4601      	mov	r1, r0
 8011082:	4628      	mov	r0, r5
 8011084:	f7ef ff12 	bl	8000eac <__aeabi_fdiv>
 8011088:	2601      	movs	r6, #1
 801108a:	4604      	mov	r4, r0
 801108c:	e799      	b.n	8010fc2 <atanf+0x8e>
 801108e:	4b2a      	ldr	r3, [pc, #168]	; (8011138 <atanf+0x204>)
 8011090:	429d      	cmp	r5, r3
 8011092:	dc14      	bgt.n	80110be <atanf+0x18a>
 8011094:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8011098:	f7ef fd4a 	bl	8000b30 <__aeabi_fsub>
 801109c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80110a0:	4605      	mov	r5, r0
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7ef fe4e 	bl	8000d44 <__aeabi_fmul>
 80110a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80110ac:	f7ef fd42 	bl	8000b34 <__addsf3>
 80110b0:	4601      	mov	r1, r0
 80110b2:	4628      	mov	r0, r5
 80110b4:	f7ef fefa 	bl	8000eac <__aeabi_fdiv>
 80110b8:	2602      	movs	r6, #2
 80110ba:	4604      	mov	r4, r0
 80110bc:	e781      	b.n	8010fc2 <atanf+0x8e>
 80110be:	4601      	mov	r1, r0
 80110c0:	481e      	ldr	r0, [pc, #120]	; (801113c <atanf+0x208>)
 80110c2:	f7ef fef3 	bl	8000eac <__aeabi_fdiv>
 80110c6:	2603      	movs	r6, #3
 80110c8:	4604      	mov	r4, r0
 80110ca:	e77a      	b.n	8010fc2 <atanf+0x8e>
 80110cc:	4b1c      	ldr	r3, [pc, #112]	; (8011140 <atanf+0x20c>)
 80110ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80110d2:	f7ef fd2d 	bl	8000b30 <__aeabi_fsub>
 80110d6:	4621      	mov	r1, r4
 80110d8:	f7ef fd2a 	bl	8000b30 <__aeabi_fsub>
 80110dc:	4b19      	ldr	r3, [pc, #100]	; (8011144 <atanf+0x210>)
 80110de:	4601      	mov	r1, r0
 80110e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80110e4:	f7ef fd24 	bl	8000b30 <__aeabi_fsub>
 80110e8:	f1b8 0f00 	cmp.w	r8, #0
 80110ec:	4604      	mov	r4, r0
 80110ee:	f6bf af36 	bge.w	8010f5e <atanf+0x2a>
 80110f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80110f6:	e72c      	b.n	8010f52 <atanf+0x1e>
 80110f8:	4c13      	ldr	r4, [pc, #76]	; (8011148 <atanf+0x214>)
 80110fa:	e730      	b.n	8010f5e <atanf+0x2a>
 80110fc:	bfc90fdb 	.word	0xbfc90fdb
 8011100:	3edfffff 	.word	0x3edfffff
 8011104:	7149f2ca 	.word	0x7149f2ca
 8011108:	3f97ffff 	.word	0x3f97ffff
 801110c:	3c8569d7 	.word	0x3c8569d7
 8011110:	3d4bda59 	.word	0x3d4bda59
 8011114:	3d886b35 	.word	0x3d886b35
 8011118:	3dba2e6e 	.word	0x3dba2e6e
 801111c:	3e124925 	.word	0x3e124925
 8011120:	3eaaaaab 	.word	0x3eaaaaab
 8011124:	bd15a221 	.word	0xbd15a221
 8011128:	3d6ef16b 	.word	0x3d6ef16b
 801112c:	3d9d8795 	.word	0x3d9d8795
 8011130:	3de38e38 	.word	0x3de38e38
 8011134:	3e4ccccd 	.word	0x3e4ccccd
 8011138:	401bffff 	.word	0x401bffff
 801113c:	bf800000 	.word	0xbf800000
 8011140:	0801446c 	.word	0x0801446c
 8011144:	0801445c 	.word	0x0801445c
 8011148:	3fc90fdb 	.word	0x3fc90fdb

0801114c <cosf>:
 801114c:	b507      	push	{r0, r1, r2, lr}
 801114e:	4a18      	ldr	r2, [pc, #96]	; (80111b0 <cosf+0x64>)
 8011150:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011154:	4293      	cmp	r3, r2
 8011156:	4601      	mov	r1, r0
 8011158:	dc03      	bgt.n	8011162 <cosf+0x16>
 801115a:	2100      	movs	r1, #0
 801115c:	f001 fac4 	bl	80126e8 <__kernel_cosf>
 8011160:	e004      	b.n	801116c <cosf+0x20>
 8011162:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011166:	db04      	blt.n	8011172 <cosf+0x26>
 8011168:	f7ef fce2 	bl	8000b30 <__aeabi_fsub>
 801116c:	b003      	add	sp, #12
 801116e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011172:	4669      	mov	r1, sp
 8011174:	f001 f908 	bl	8012388 <__ieee754_rem_pio2f>
 8011178:	f000 0203 	and.w	r2, r0, #3
 801117c:	2a01      	cmp	r2, #1
 801117e:	d005      	beq.n	801118c <cosf+0x40>
 8011180:	2a02      	cmp	r2, #2
 8011182:	d00a      	beq.n	801119a <cosf+0x4e>
 8011184:	b972      	cbnz	r2, 80111a4 <cosf+0x58>
 8011186:	9901      	ldr	r1, [sp, #4]
 8011188:	9800      	ldr	r0, [sp, #0]
 801118a:	e7e7      	b.n	801115c <cosf+0x10>
 801118c:	9901      	ldr	r1, [sp, #4]
 801118e:	9800      	ldr	r0, [sp, #0]
 8011190:	f001 fde0 	bl	8012d54 <__kernel_sinf>
 8011194:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011198:	e7e8      	b.n	801116c <cosf+0x20>
 801119a:	9901      	ldr	r1, [sp, #4]
 801119c:	9800      	ldr	r0, [sp, #0]
 801119e:	f001 faa3 	bl	80126e8 <__kernel_cosf>
 80111a2:	e7f7      	b.n	8011194 <cosf+0x48>
 80111a4:	2201      	movs	r2, #1
 80111a6:	9901      	ldr	r1, [sp, #4]
 80111a8:	9800      	ldr	r0, [sp, #0]
 80111aa:	f001 fdd3 	bl	8012d54 <__kernel_sinf>
 80111ae:	e7dd      	b.n	801116c <cosf+0x20>
 80111b0:	3f490fd8 	.word	0x3f490fd8

080111b4 <fabsf>:
 80111b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80111b8:	4770      	bx	lr
	...

080111bc <sinf>:
 80111bc:	b507      	push	{r0, r1, r2, lr}
 80111be:	4a19      	ldr	r2, [pc, #100]	; (8011224 <sinf+0x68>)
 80111c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80111c4:	4293      	cmp	r3, r2
 80111c6:	4601      	mov	r1, r0
 80111c8:	dc04      	bgt.n	80111d4 <sinf+0x18>
 80111ca:	2200      	movs	r2, #0
 80111cc:	2100      	movs	r1, #0
 80111ce:	f001 fdc1 	bl	8012d54 <__kernel_sinf>
 80111d2:	e004      	b.n	80111de <sinf+0x22>
 80111d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80111d8:	db04      	blt.n	80111e4 <sinf+0x28>
 80111da:	f7ef fca9 	bl	8000b30 <__aeabi_fsub>
 80111de:	b003      	add	sp, #12
 80111e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80111e4:	4669      	mov	r1, sp
 80111e6:	f001 f8cf 	bl	8012388 <__ieee754_rem_pio2f>
 80111ea:	f000 0003 	and.w	r0, r0, #3
 80111ee:	2801      	cmp	r0, #1
 80111f0:	d006      	beq.n	8011200 <sinf+0x44>
 80111f2:	2802      	cmp	r0, #2
 80111f4:	d009      	beq.n	801120a <sinf+0x4e>
 80111f6:	b980      	cbnz	r0, 801121a <sinf+0x5e>
 80111f8:	2201      	movs	r2, #1
 80111fa:	9901      	ldr	r1, [sp, #4]
 80111fc:	9800      	ldr	r0, [sp, #0]
 80111fe:	e7e6      	b.n	80111ce <sinf+0x12>
 8011200:	9901      	ldr	r1, [sp, #4]
 8011202:	9800      	ldr	r0, [sp, #0]
 8011204:	f001 fa70 	bl	80126e8 <__kernel_cosf>
 8011208:	e7e9      	b.n	80111de <sinf+0x22>
 801120a:	2201      	movs	r2, #1
 801120c:	9901      	ldr	r1, [sp, #4]
 801120e:	9800      	ldr	r0, [sp, #0]
 8011210:	f001 fda0 	bl	8012d54 <__kernel_sinf>
 8011214:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011218:	e7e1      	b.n	80111de <sinf+0x22>
 801121a:	9901      	ldr	r1, [sp, #4]
 801121c:	9800      	ldr	r0, [sp, #0]
 801121e:	f001 fa63 	bl	80126e8 <__kernel_cosf>
 8011222:	e7f7      	b.n	8011214 <sinf+0x58>
 8011224:	3f490fd8 	.word	0x3f490fd8

08011228 <pow>:
 8011228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801122c:	461f      	mov	r7, r3
 801122e:	4680      	mov	r8, r0
 8011230:	4689      	mov	r9, r1
 8011232:	4616      	mov	r6, r2
 8011234:	f000 f91c 	bl	8011470 <__ieee754_pow>
 8011238:	4b4d      	ldr	r3, [pc, #308]	; (8011370 <pow+0x148>)
 801123a:	4604      	mov	r4, r0
 801123c:	f993 3000 	ldrsb.w	r3, [r3]
 8011240:	460d      	mov	r5, r1
 8011242:	3301      	adds	r3, #1
 8011244:	d015      	beq.n	8011272 <pow+0x4a>
 8011246:	4632      	mov	r2, r6
 8011248:	463b      	mov	r3, r7
 801124a:	4630      	mov	r0, r6
 801124c:	4639      	mov	r1, r7
 801124e:	f7ef fbdd 	bl	8000a0c <__aeabi_dcmpun>
 8011252:	b970      	cbnz	r0, 8011272 <pow+0x4a>
 8011254:	4642      	mov	r2, r8
 8011256:	464b      	mov	r3, r9
 8011258:	4640      	mov	r0, r8
 801125a:	4649      	mov	r1, r9
 801125c:	f7ef fbd6 	bl	8000a0c <__aeabi_dcmpun>
 8011260:	2200      	movs	r2, #0
 8011262:	2300      	movs	r3, #0
 8011264:	b148      	cbz	r0, 801127a <pow+0x52>
 8011266:	4630      	mov	r0, r6
 8011268:	4639      	mov	r1, r7
 801126a:	f7ef fb9d 	bl	80009a8 <__aeabi_dcmpeq>
 801126e:	2800      	cmp	r0, #0
 8011270:	d17b      	bne.n	801136a <pow+0x142>
 8011272:	4620      	mov	r0, r4
 8011274:	4629      	mov	r1, r5
 8011276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127a:	4640      	mov	r0, r8
 801127c:	4649      	mov	r1, r9
 801127e:	f7ef fb93 	bl	80009a8 <__aeabi_dcmpeq>
 8011282:	b1e0      	cbz	r0, 80112be <pow+0x96>
 8011284:	2200      	movs	r2, #0
 8011286:	2300      	movs	r3, #0
 8011288:	4630      	mov	r0, r6
 801128a:	4639      	mov	r1, r7
 801128c:	f7ef fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8011290:	2800      	cmp	r0, #0
 8011292:	d16a      	bne.n	801136a <pow+0x142>
 8011294:	4630      	mov	r0, r6
 8011296:	4639      	mov	r1, r7
 8011298:	f001 fdd5 	bl	8012e46 <finite>
 801129c:	2800      	cmp	r0, #0
 801129e:	d0e8      	beq.n	8011272 <pow+0x4a>
 80112a0:	2200      	movs	r2, #0
 80112a2:	2300      	movs	r3, #0
 80112a4:	4630      	mov	r0, r6
 80112a6:	4639      	mov	r1, r7
 80112a8:	f7ef fb88 	bl	80009bc <__aeabi_dcmplt>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	d0e0      	beq.n	8011272 <pow+0x4a>
 80112b0:	f001 ff7e 	bl	80131b0 <__errno>
 80112b4:	2321      	movs	r3, #33	; 0x21
 80112b6:	2400      	movs	r4, #0
 80112b8:	6003      	str	r3, [r0, #0]
 80112ba:	4d2e      	ldr	r5, [pc, #184]	; (8011374 <pow+0x14c>)
 80112bc:	e7d9      	b.n	8011272 <pow+0x4a>
 80112be:	4620      	mov	r0, r4
 80112c0:	4629      	mov	r1, r5
 80112c2:	f001 fdc0 	bl	8012e46 <finite>
 80112c6:	bba8      	cbnz	r0, 8011334 <pow+0x10c>
 80112c8:	4640      	mov	r0, r8
 80112ca:	4649      	mov	r1, r9
 80112cc:	f001 fdbb 	bl	8012e46 <finite>
 80112d0:	b380      	cbz	r0, 8011334 <pow+0x10c>
 80112d2:	4630      	mov	r0, r6
 80112d4:	4639      	mov	r1, r7
 80112d6:	f001 fdb6 	bl	8012e46 <finite>
 80112da:	b358      	cbz	r0, 8011334 <pow+0x10c>
 80112dc:	4622      	mov	r2, r4
 80112de:	462b      	mov	r3, r5
 80112e0:	4620      	mov	r0, r4
 80112e2:	4629      	mov	r1, r5
 80112e4:	f7ef fb92 	bl	8000a0c <__aeabi_dcmpun>
 80112e8:	b160      	cbz	r0, 8011304 <pow+0xdc>
 80112ea:	f001 ff61 	bl	80131b0 <__errno>
 80112ee:	2321      	movs	r3, #33	; 0x21
 80112f0:	2200      	movs	r2, #0
 80112f2:	6003      	str	r3, [r0, #0]
 80112f4:	2300      	movs	r3, #0
 80112f6:	4610      	mov	r0, r2
 80112f8:	4619      	mov	r1, r3
 80112fa:	f7ef fa17 	bl	800072c <__aeabi_ddiv>
 80112fe:	4604      	mov	r4, r0
 8011300:	460d      	mov	r5, r1
 8011302:	e7b6      	b.n	8011272 <pow+0x4a>
 8011304:	f001 ff54 	bl	80131b0 <__errno>
 8011308:	2322      	movs	r3, #34	; 0x22
 801130a:	2200      	movs	r2, #0
 801130c:	6003      	str	r3, [r0, #0]
 801130e:	4649      	mov	r1, r9
 8011310:	2300      	movs	r3, #0
 8011312:	4640      	mov	r0, r8
 8011314:	f7ef fb52 	bl	80009bc <__aeabi_dcmplt>
 8011318:	2400      	movs	r4, #0
 801131a:	b148      	cbz	r0, 8011330 <pow+0x108>
 801131c:	4630      	mov	r0, r6
 801131e:	4639      	mov	r1, r7
 8011320:	f001 fd9e 	bl	8012e60 <rint>
 8011324:	4632      	mov	r2, r6
 8011326:	463b      	mov	r3, r7
 8011328:	f7ef fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 801132c:	2800      	cmp	r0, #0
 801132e:	d0c4      	beq.n	80112ba <pow+0x92>
 8011330:	4d11      	ldr	r5, [pc, #68]	; (8011378 <pow+0x150>)
 8011332:	e79e      	b.n	8011272 <pow+0x4a>
 8011334:	2200      	movs	r2, #0
 8011336:	2300      	movs	r3, #0
 8011338:	4620      	mov	r0, r4
 801133a:	4629      	mov	r1, r5
 801133c:	f7ef fb34 	bl	80009a8 <__aeabi_dcmpeq>
 8011340:	2800      	cmp	r0, #0
 8011342:	d096      	beq.n	8011272 <pow+0x4a>
 8011344:	4640      	mov	r0, r8
 8011346:	4649      	mov	r1, r9
 8011348:	f001 fd7d 	bl	8012e46 <finite>
 801134c:	2800      	cmp	r0, #0
 801134e:	d090      	beq.n	8011272 <pow+0x4a>
 8011350:	4630      	mov	r0, r6
 8011352:	4639      	mov	r1, r7
 8011354:	f001 fd77 	bl	8012e46 <finite>
 8011358:	2800      	cmp	r0, #0
 801135a:	d08a      	beq.n	8011272 <pow+0x4a>
 801135c:	f001 ff28 	bl	80131b0 <__errno>
 8011360:	2322      	movs	r3, #34	; 0x22
 8011362:	2400      	movs	r4, #0
 8011364:	2500      	movs	r5, #0
 8011366:	6003      	str	r3, [r0, #0]
 8011368:	e783      	b.n	8011272 <pow+0x4a>
 801136a:	2400      	movs	r4, #0
 801136c:	4d03      	ldr	r5, [pc, #12]	; (801137c <pow+0x154>)
 801136e:	e780      	b.n	8011272 <pow+0x4a>
 8011370:	2000000d 	.word	0x2000000d
 8011374:	fff00000 	.word	0xfff00000
 8011378:	7ff00000 	.word	0x7ff00000
 801137c:	3ff00000 	.word	0x3ff00000

08011380 <sqrt>:
 8011380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011382:	4606      	mov	r6, r0
 8011384:	460f      	mov	r7, r1
 8011386:	f000 fd89 	bl	8011e9c <__ieee754_sqrt>
 801138a:	4b12      	ldr	r3, [pc, #72]	; (80113d4 <sqrt+0x54>)
 801138c:	4604      	mov	r4, r0
 801138e:	f993 3000 	ldrsb.w	r3, [r3]
 8011392:	460d      	mov	r5, r1
 8011394:	3301      	adds	r3, #1
 8011396:	d019      	beq.n	80113cc <sqrt+0x4c>
 8011398:	4632      	mov	r2, r6
 801139a:	463b      	mov	r3, r7
 801139c:	4630      	mov	r0, r6
 801139e:	4639      	mov	r1, r7
 80113a0:	f7ef fb34 	bl	8000a0c <__aeabi_dcmpun>
 80113a4:	b990      	cbnz	r0, 80113cc <sqrt+0x4c>
 80113a6:	2200      	movs	r2, #0
 80113a8:	2300      	movs	r3, #0
 80113aa:	4630      	mov	r0, r6
 80113ac:	4639      	mov	r1, r7
 80113ae:	f7ef fb05 	bl	80009bc <__aeabi_dcmplt>
 80113b2:	b158      	cbz	r0, 80113cc <sqrt+0x4c>
 80113b4:	f001 fefc 	bl	80131b0 <__errno>
 80113b8:	2321      	movs	r3, #33	; 0x21
 80113ba:	2200      	movs	r2, #0
 80113bc:	6003      	str	r3, [r0, #0]
 80113be:	2300      	movs	r3, #0
 80113c0:	4610      	mov	r0, r2
 80113c2:	4619      	mov	r1, r3
 80113c4:	f7ef f9b2 	bl	800072c <__aeabi_ddiv>
 80113c8:	4604      	mov	r4, r0
 80113ca:	460d      	mov	r5, r1
 80113cc:	4620      	mov	r0, r4
 80113ce:	4629      	mov	r1, r5
 80113d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113d2:	bf00      	nop
 80113d4:	2000000d 	.word	0x2000000d

080113d8 <asinf>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	4604      	mov	r4, r0
 80113dc:	f000 fe0a 	bl	8011ff4 <__ieee754_asinf>
 80113e0:	4b0e      	ldr	r3, [pc, #56]	; (801141c <asinf+0x44>)
 80113e2:	4605      	mov	r5, r0
 80113e4:	f993 3000 	ldrsb.w	r3, [r3]
 80113e8:	3301      	adds	r3, #1
 80113ea:	d015      	beq.n	8011418 <asinf+0x40>
 80113ec:	4621      	mov	r1, r4
 80113ee:	4620      	mov	r0, r4
 80113f0:	f7ef fe6e 	bl	80010d0 <__aeabi_fcmpun>
 80113f4:	b980      	cbnz	r0, 8011418 <asinf+0x40>
 80113f6:	4620      	mov	r0, r4
 80113f8:	f7ff fedc 	bl	80111b4 <fabsf>
 80113fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011400:	f7ef fe5c 	bl	80010bc <__aeabi_fcmpgt>
 8011404:	b140      	cbz	r0, 8011418 <asinf+0x40>
 8011406:	f001 fed3 	bl	80131b0 <__errno>
 801140a:	2321      	movs	r3, #33	; 0x21
 801140c:	6003      	str	r3, [r0, #0]
 801140e:	4804      	ldr	r0, [pc, #16]	; (8011420 <asinf+0x48>)
 8011410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011414:	f001 be78 	b.w	8013108 <nanf>
 8011418:	4628      	mov	r0, r5
 801141a:	bd38      	pop	{r3, r4, r5, pc}
 801141c:	2000000d 	.word	0x2000000d
 8011420:	0801495f 	.word	0x0801495f

08011424 <atan2f>:
 8011424:	f000 bf2a 	b.w	801227c <__ieee754_atan2f>

08011428 <sqrtf>:
 8011428:	b538      	push	{r3, r4, r5, lr}
 801142a:	4605      	mov	r5, r0
 801142c:	f001 f90a 	bl	8012644 <__ieee754_sqrtf>
 8011430:	4b0d      	ldr	r3, [pc, #52]	; (8011468 <sqrtf+0x40>)
 8011432:	4604      	mov	r4, r0
 8011434:	f993 3000 	ldrsb.w	r3, [r3]
 8011438:	3301      	adds	r3, #1
 801143a:	d012      	beq.n	8011462 <sqrtf+0x3a>
 801143c:	4629      	mov	r1, r5
 801143e:	4628      	mov	r0, r5
 8011440:	f7ef fe46 	bl	80010d0 <__aeabi_fcmpun>
 8011444:	b968      	cbnz	r0, 8011462 <sqrtf+0x3a>
 8011446:	2100      	movs	r1, #0
 8011448:	4628      	mov	r0, r5
 801144a:	f7ef fe19 	bl	8001080 <__aeabi_fcmplt>
 801144e:	b140      	cbz	r0, 8011462 <sqrtf+0x3a>
 8011450:	f001 feae 	bl	80131b0 <__errno>
 8011454:	2321      	movs	r3, #33	; 0x21
 8011456:	2100      	movs	r1, #0
 8011458:	6003      	str	r3, [r0, #0]
 801145a:	4608      	mov	r0, r1
 801145c:	f7ef fd26 	bl	8000eac <__aeabi_fdiv>
 8011460:	4604      	mov	r4, r0
 8011462:	4620      	mov	r0, r4
 8011464:	bd38      	pop	{r3, r4, r5, pc}
 8011466:	bf00      	nop
 8011468:	2000000d 	.word	0x2000000d
 801146c:	00000000 	.word	0x00000000

08011470 <__ieee754_pow>:
 8011470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	b093      	sub	sp, #76	; 0x4c
 8011476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801147a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 801147e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011482:	ea55 0302 	orrs.w	r3, r5, r2
 8011486:	4607      	mov	r7, r0
 8011488:	4688      	mov	r8, r1
 801148a:	f000 84bf 	beq.w	8011e0c <__ieee754_pow+0x99c>
 801148e:	4b7e      	ldr	r3, [pc, #504]	; (8011688 <__ieee754_pow+0x218>)
 8011490:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8011494:	429c      	cmp	r4, r3
 8011496:	4689      	mov	r9, r1
 8011498:	4682      	mov	sl, r0
 801149a:	dc09      	bgt.n	80114b0 <__ieee754_pow+0x40>
 801149c:	d103      	bne.n	80114a6 <__ieee754_pow+0x36>
 801149e:	b978      	cbnz	r0, 80114c0 <__ieee754_pow+0x50>
 80114a0:	42a5      	cmp	r5, r4
 80114a2:	dd02      	ble.n	80114aa <__ieee754_pow+0x3a>
 80114a4:	e00c      	b.n	80114c0 <__ieee754_pow+0x50>
 80114a6:	429d      	cmp	r5, r3
 80114a8:	dc02      	bgt.n	80114b0 <__ieee754_pow+0x40>
 80114aa:	429d      	cmp	r5, r3
 80114ac:	d10e      	bne.n	80114cc <__ieee754_pow+0x5c>
 80114ae:	b16a      	cbz	r2, 80114cc <__ieee754_pow+0x5c>
 80114b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80114b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80114b8:	ea54 030a 	orrs.w	r3, r4, sl
 80114bc:	f000 84a6 	beq.w	8011e0c <__ieee754_pow+0x99c>
 80114c0:	4872      	ldr	r0, [pc, #456]	; (801168c <__ieee754_pow+0x21c>)
 80114c2:	b013      	add	sp, #76	; 0x4c
 80114c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c8:	f001 bcc4 	b.w	8012e54 <nan>
 80114cc:	f1b9 0f00 	cmp.w	r9, #0
 80114d0:	da39      	bge.n	8011546 <__ieee754_pow+0xd6>
 80114d2:	4b6f      	ldr	r3, [pc, #444]	; (8011690 <__ieee754_pow+0x220>)
 80114d4:	429d      	cmp	r5, r3
 80114d6:	dc54      	bgt.n	8011582 <__ieee754_pow+0x112>
 80114d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80114dc:	429d      	cmp	r5, r3
 80114de:	f340 84a6 	ble.w	8011e2e <__ieee754_pow+0x9be>
 80114e2:	152b      	asrs	r3, r5, #20
 80114e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80114e8:	2b14      	cmp	r3, #20
 80114ea:	dd0f      	ble.n	801150c <__ieee754_pow+0x9c>
 80114ec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80114f0:	fa22 f103 	lsr.w	r1, r2, r3
 80114f4:	fa01 f303 	lsl.w	r3, r1, r3
 80114f8:	4293      	cmp	r3, r2
 80114fa:	f040 8498 	bne.w	8011e2e <__ieee754_pow+0x9be>
 80114fe:	f001 0101 	and.w	r1, r1, #1
 8011502:	f1c1 0302 	rsb	r3, r1, #2
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	b182      	cbz	r2, 801152c <__ieee754_pow+0xbc>
 801150a:	e05e      	b.n	80115ca <__ieee754_pow+0x15a>
 801150c:	2a00      	cmp	r2, #0
 801150e:	d15a      	bne.n	80115c6 <__ieee754_pow+0x156>
 8011510:	f1c3 0314 	rsb	r3, r3, #20
 8011514:	fa45 f103 	asr.w	r1, r5, r3
 8011518:	fa01 f303 	lsl.w	r3, r1, r3
 801151c:	42ab      	cmp	r3, r5
 801151e:	f040 8483 	bne.w	8011e28 <__ieee754_pow+0x9b8>
 8011522:	f001 0101 	and.w	r1, r1, #1
 8011526:	f1c1 0302 	rsb	r3, r1, #2
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	4b59      	ldr	r3, [pc, #356]	; (8011694 <__ieee754_pow+0x224>)
 801152e:	429d      	cmp	r5, r3
 8011530:	d130      	bne.n	8011594 <__ieee754_pow+0x124>
 8011532:	2e00      	cmp	r6, #0
 8011534:	f280 8474 	bge.w	8011e20 <__ieee754_pow+0x9b0>
 8011538:	463a      	mov	r2, r7
 801153a:	4643      	mov	r3, r8
 801153c:	2000      	movs	r0, #0
 801153e:	4955      	ldr	r1, [pc, #340]	; (8011694 <__ieee754_pow+0x224>)
 8011540:	f7ef f8f4 	bl	800072c <__aeabi_ddiv>
 8011544:	e02f      	b.n	80115a6 <__ieee754_pow+0x136>
 8011546:	2300      	movs	r3, #0
 8011548:	9300      	str	r3, [sp, #0]
 801154a:	2a00      	cmp	r2, #0
 801154c:	d13d      	bne.n	80115ca <__ieee754_pow+0x15a>
 801154e:	4b4e      	ldr	r3, [pc, #312]	; (8011688 <__ieee754_pow+0x218>)
 8011550:	429d      	cmp	r5, r3
 8011552:	d1eb      	bne.n	801152c <__ieee754_pow+0xbc>
 8011554:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011558:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801155c:	ea53 030a 	orrs.w	r3, r3, sl
 8011560:	f000 8454 	beq.w	8011e0c <__ieee754_pow+0x99c>
 8011564:	4b4c      	ldr	r3, [pc, #304]	; (8011698 <__ieee754_pow+0x228>)
 8011566:	429c      	cmp	r4, r3
 8011568:	dd0d      	ble.n	8011586 <__ieee754_pow+0x116>
 801156a:	2e00      	cmp	r6, #0
 801156c:	f280 8454 	bge.w	8011e18 <__ieee754_pow+0x9a8>
 8011570:	f04f 0b00 	mov.w	fp, #0
 8011574:	f04f 0c00 	mov.w	ip, #0
 8011578:	4658      	mov	r0, fp
 801157a:	4661      	mov	r1, ip
 801157c:	b013      	add	sp, #76	; 0x4c
 801157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011582:	2302      	movs	r3, #2
 8011584:	e7e0      	b.n	8011548 <__ieee754_pow+0xd8>
 8011586:	2e00      	cmp	r6, #0
 8011588:	daf2      	bge.n	8011570 <__ieee754_pow+0x100>
 801158a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801158e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8011592:	e7f1      	b.n	8011578 <__ieee754_pow+0x108>
 8011594:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8011598:	d108      	bne.n	80115ac <__ieee754_pow+0x13c>
 801159a:	463a      	mov	r2, r7
 801159c:	4643      	mov	r3, r8
 801159e:	4638      	mov	r0, r7
 80115a0:	4641      	mov	r1, r8
 80115a2:	f7ee ff99 	bl	80004d8 <__aeabi_dmul>
 80115a6:	4683      	mov	fp, r0
 80115a8:	468c      	mov	ip, r1
 80115aa:	e7e5      	b.n	8011578 <__ieee754_pow+0x108>
 80115ac:	4b3b      	ldr	r3, [pc, #236]	; (801169c <__ieee754_pow+0x22c>)
 80115ae:	429e      	cmp	r6, r3
 80115b0:	d10b      	bne.n	80115ca <__ieee754_pow+0x15a>
 80115b2:	f1b9 0f00 	cmp.w	r9, #0
 80115b6:	db08      	blt.n	80115ca <__ieee754_pow+0x15a>
 80115b8:	4638      	mov	r0, r7
 80115ba:	4641      	mov	r1, r8
 80115bc:	b013      	add	sp, #76	; 0x4c
 80115be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c2:	f000 bc6b 	b.w	8011e9c <__ieee754_sqrt>
 80115c6:	2300      	movs	r3, #0
 80115c8:	9300      	str	r3, [sp, #0]
 80115ca:	4638      	mov	r0, r7
 80115cc:	4641      	mov	r1, r8
 80115ce:	f001 fc37 	bl	8012e40 <fabs>
 80115d2:	4683      	mov	fp, r0
 80115d4:	468c      	mov	ip, r1
 80115d6:	f1ba 0f00 	cmp.w	sl, #0
 80115da:	d129      	bne.n	8011630 <__ieee754_pow+0x1c0>
 80115dc:	b124      	cbz	r4, 80115e8 <__ieee754_pow+0x178>
 80115de:	4b2d      	ldr	r3, [pc, #180]	; (8011694 <__ieee754_pow+0x224>)
 80115e0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d123      	bne.n	8011630 <__ieee754_pow+0x1c0>
 80115e8:	2e00      	cmp	r6, #0
 80115ea:	da07      	bge.n	80115fc <__ieee754_pow+0x18c>
 80115ec:	465a      	mov	r2, fp
 80115ee:	4663      	mov	r3, ip
 80115f0:	2000      	movs	r0, #0
 80115f2:	4928      	ldr	r1, [pc, #160]	; (8011694 <__ieee754_pow+0x224>)
 80115f4:	f7ef f89a 	bl	800072c <__aeabi_ddiv>
 80115f8:	4683      	mov	fp, r0
 80115fa:	468c      	mov	ip, r1
 80115fc:	f1b9 0f00 	cmp.w	r9, #0
 8011600:	daba      	bge.n	8011578 <__ieee754_pow+0x108>
 8011602:	9b00      	ldr	r3, [sp, #0]
 8011604:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011608:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801160c:	4323      	orrs	r3, r4
 801160e:	d108      	bne.n	8011622 <__ieee754_pow+0x1b2>
 8011610:	465a      	mov	r2, fp
 8011612:	4663      	mov	r3, ip
 8011614:	4658      	mov	r0, fp
 8011616:	4661      	mov	r1, ip
 8011618:	f7ee fda6 	bl	8000168 <__aeabi_dsub>
 801161c:	4602      	mov	r2, r0
 801161e:	460b      	mov	r3, r1
 8011620:	e78e      	b.n	8011540 <__ieee754_pow+0xd0>
 8011622:	9b00      	ldr	r3, [sp, #0]
 8011624:	2b01      	cmp	r3, #1
 8011626:	d1a7      	bne.n	8011578 <__ieee754_pow+0x108>
 8011628:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801162c:	469c      	mov	ip, r3
 801162e:	e7a3      	b.n	8011578 <__ieee754_pow+0x108>
 8011630:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8011634:	3b01      	subs	r3, #1
 8011636:	930c      	str	r3, [sp, #48]	; 0x30
 8011638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801163a:	9b00      	ldr	r3, [sp, #0]
 801163c:	4313      	orrs	r3, r2
 801163e:	d104      	bne.n	801164a <__ieee754_pow+0x1da>
 8011640:	463a      	mov	r2, r7
 8011642:	4643      	mov	r3, r8
 8011644:	4638      	mov	r0, r7
 8011646:	4641      	mov	r1, r8
 8011648:	e7e6      	b.n	8011618 <__ieee754_pow+0x1a8>
 801164a:	4b15      	ldr	r3, [pc, #84]	; (80116a0 <__ieee754_pow+0x230>)
 801164c:	429d      	cmp	r5, r3
 801164e:	f340 80f9 	ble.w	8011844 <__ieee754_pow+0x3d4>
 8011652:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011656:	429d      	cmp	r5, r3
 8011658:	4b0f      	ldr	r3, [pc, #60]	; (8011698 <__ieee754_pow+0x228>)
 801165a:	dd09      	ble.n	8011670 <__ieee754_pow+0x200>
 801165c:	429c      	cmp	r4, r3
 801165e:	dc0c      	bgt.n	801167a <__ieee754_pow+0x20a>
 8011660:	2e00      	cmp	r6, #0
 8011662:	da85      	bge.n	8011570 <__ieee754_pow+0x100>
 8011664:	a306      	add	r3, pc, #24	; (adr r3, 8011680 <__ieee754_pow+0x210>)
 8011666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166a:	4610      	mov	r0, r2
 801166c:	4619      	mov	r1, r3
 801166e:	e798      	b.n	80115a2 <__ieee754_pow+0x132>
 8011670:	429c      	cmp	r4, r3
 8011672:	dbf5      	blt.n	8011660 <__ieee754_pow+0x1f0>
 8011674:	4b07      	ldr	r3, [pc, #28]	; (8011694 <__ieee754_pow+0x224>)
 8011676:	429c      	cmp	r4, r3
 8011678:	dd14      	ble.n	80116a4 <__ieee754_pow+0x234>
 801167a:	2e00      	cmp	r6, #0
 801167c:	dcf2      	bgt.n	8011664 <__ieee754_pow+0x1f4>
 801167e:	e777      	b.n	8011570 <__ieee754_pow+0x100>
 8011680:	8800759c 	.word	0x8800759c
 8011684:	7e37e43c 	.word	0x7e37e43c
 8011688:	7ff00000 	.word	0x7ff00000
 801168c:	0801495f 	.word	0x0801495f
 8011690:	433fffff 	.word	0x433fffff
 8011694:	3ff00000 	.word	0x3ff00000
 8011698:	3fefffff 	.word	0x3fefffff
 801169c:	3fe00000 	.word	0x3fe00000
 80116a0:	41e00000 	.word	0x41e00000
 80116a4:	4661      	mov	r1, ip
 80116a6:	2200      	movs	r2, #0
 80116a8:	4658      	mov	r0, fp
 80116aa:	4b61      	ldr	r3, [pc, #388]	; (8011830 <__ieee754_pow+0x3c0>)
 80116ac:	f7ee fd5c 	bl	8000168 <__aeabi_dsub>
 80116b0:	a355      	add	r3, pc, #340	; (adr r3, 8011808 <__ieee754_pow+0x398>)
 80116b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b6:	4604      	mov	r4, r0
 80116b8:	460d      	mov	r5, r1
 80116ba:	f7ee ff0d 	bl	80004d8 <__aeabi_dmul>
 80116be:	a354      	add	r3, pc, #336	; (adr r3, 8011810 <__ieee754_pow+0x3a0>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	4606      	mov	r6, r0
 80116c6:	460f      	mov	r7, r1
 80116c8:	4620      	mov	r0, r4
 80116ca:	4629      	mov	r1, r5
 80116cc:	f7ee ff04 	bl	80004d8 <__aeabi_dmul>
 80116d0:	2200      	movs	r2, #0
 80116d2:	4682      	mov	sl, r0
 80116d4:	468b      	mov	fp, r1
 80116d6:	4620      	mov	r0, r4
 80116d8:	4629      	mov	r1, r5
 80116da:	4b56      	ldr	r3, [pc, #344]	; (8011834 <__ieee754_pow+0x3c4>)
 80116dc:	f7ee fefc 	bl	80004d8 <__aeabi_dmul>
 80116e0:	4602      	mov	r2, r0
 80116e2:	460b      	mov	r3, r1
 80116e4:	a14c      	add	r1, pc, #304	; (adr r1, 8011818 <__ieee754_pow+0x3a8>)
 80116e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116ea:	f7ee fd3d 	bl	8000168 <__aeabi_dsub>
 80116ee:	4622      	mov	r2, r4
 80116f0:	462b      	mov	r3, r5
 80116f2:	f7ee fef1 	bl	80004d8 <__aeabi_dmul>
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	2000      	movs	r0, #0
 80116fc:	494e      	ldr	r1, [pc, #312]	; (8011838 <__ieee754_pow+0x3c8>)
 80116fe:	f7ee fd33 	bl	8000168 <__aeabi_dsub>
 8011702:	4622      	mov	r2, r4
 8011704:	462b      	mov	r3, r5
 8011706:	4680      	mov	r8, r0
 8011708:	4689      	mov	r9, r1
 801170a:	4620      	mov	r0, r4
 801170c:	4629      	mov	r1, r5
 801170e:	f7ee fee3 	bl	80004d8 <__aeabi_dmul>
 8011712:	4602      	mov	r2, r0
 8011714:	460b      	mov	r3, r1
 8011716:	4640      	mov	r0, r8
 8011718:	4649      	mov	r1, r9
 801171a:	f7ee fedd 	bl	80004d8 <__aeabi_dmul>
 801171e:	a340      	add	r3, pc, #256	; (adr r3, 8011820 <__ieee754_pow+0x3b0>)
 8011720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011724:	f7ee fed8 	bl	80004d8 <__aeabi_dmul>
 8011728:	4602      	mov	r2, r0
 801172a:	460b      	mov	r3, r1
 801172c:	4650      	mov	r0, sl
 801172e:	4659      	mov	r1, fp
 8011730:	f7ee fd1a 	bl	8000168 <__aeabi_dsub>
 8011734:	f04f 0a00 	mov.w	sl, #0
 8011738:	4602      	mov	r2, r0
 801173a:	460b      	mov	r3, r1
 801173c:	4604      	mov	r4, r0
 801173e:	460d      	mov	r5, r1
 8011740:	4630      	mov	r0, r6
 8011742:	4639      	mov	r1, r7
 8011744:	f7ee fd12 	bl	800016c <__adddf3>
 8011748:	4632      	mov	r2, r6
 801174a:	463b      	mov	r3, r7
 801174c:	4650      	mov	r0, sl
 801174e:	468b      	mov	fp, r1
 8011750:	f7ee fd0a 	bl	8000168 <__aeabi_dsub>
 8011754:	4602      	mov	r2, r0
 8011756:	460b      	mov	r3, r1
 8011758:	4620      	mov	r0, r4
 801175a:	4629      	mov	r1, r5
 801175c:	f7ee fd04 	bl	8000168 <__aeabi_dsub>
 8011760:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011764:	9b00      	ldr	r3, [sp, #0]
 8011766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011768:	3b01      	subs	r3, #1
 801176a:	4313      	orrs	r3, r2
 801176c:	f04f 0600 	mov.w	r6, #0
 8011770:	f04f 0200 	mov.w	r2, #0
 8011774:	bf0c      	ite	eq
 8011776:	4b31      	ldreq	r3, [pc, #196]	; (801183c <__ieee754_pow+0x3cc>)
 8011778:	4b2d      	ldrne	r3, [pc, #180]	; (8011830 <__ieee754_pow+0x3c0>)
 801177a:	4604      	mov	r4, r0
 801177c:	460d      	mov	r5, r1
 801177e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011782:	e9cd 2300 	strd	r2, r3, [sp]
 8011786:	4632      	mov	r2, r6
 8011788:	463b      	mov	r3, r7
 801178a:	f7ee fced 	bl	8000168 <__aeabi_dsub>
 801178e:	4652      	mov	r2, sl
 8011790:	465b      	mov	r3, fp
 8011792:	f7ee fea1 	bl	80004d8 <__aeabi_dmul>
 8011796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801179a:	4680      	mov	r8, r0
 801179c:	4689      	mov	r9, r1
 801179e:	4620      	mov	r0, r4
 80117a0:	4629      	mov	r1, r5
 80117a2:	f7ee fe99 	bl	80004d8 <__aeabi_dmul>
 80117a6:	4602      	mov	r2, r0
 80117a8:	460b      	mov	r3, r1
 80117aa:	4640      	mov	r0, r8
 80117ac:	4649      	mov	r1, r9
 80117ae:	f7ee fcdd 	bl	800016c <__adddf3>
 80117b2:	4632      	mov	r2, r6
 80117b4:	463b      	mov	r3, r7
 80117b6:	4680      	mov	r8, r0
 80117b8:	4689      	mov	r9, r1
 80117ba:	4650      	mov	r0, sl
 80117bc:	4659      	mov	r1, fp
 80117be:	f7ee fe8b 	bl	80004d8 <__aeabi_dmul>
 80117c2:	4604      	mov	r4, r0
 80117c4:	460d      	mov	r5, r1
 80117c6:	460b      	mov	r3, r1
 80117c8:	4602      	mov	r2, r0
 80117ca:	4649      	mov	r1, r9
 80117cc:	4640      	mov	r0, r8
 80117ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80117d2:	f7ee fccb 	bl	800016c <__adddf3>
 80117d6:	4b1a      	ldr	r3, [pc, #104]	; (8011840 <__ieee754_pow+0x3d0>)
 80117d8:	4682      	mov	sl, r0
 80117da:	4299      	cmp	r1, r3
 80117dc:	460f      	mov	r7, r1
 80117de:	460e      	mov	r6, r1
 80117e0:	f340 82ed 	ble.w	8011dbe <__ieee754_pow+0x94e>
 80117e4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80117e8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80117ec:	4303      	orrs	r3, r0
 80117ee:	f000 81e7 	beq.w	8011bc0 <__ieee754_pow+0x750>
 80117f2:	a30d      	add	r3, pc, #52	; (adr r3, 8011828 <__ieee754_pow+0x3b8>)
 80117f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117fc:	f7ee fe6c 	bl	80004d8 <__aeabi_dmul>
 8011800:	a309      	add	r3, pc, #36	; (adr r3, 8011828 <__ieee754_pow+0x3b8>)
 8011802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011806:	e6cc      	b.n	80115a2 <__ieee754_pow+0x132>
 8011808:	60000000 	.word	0x60000000
 801180c:	3ff71547 	.word	0x3ff71547
 8011810:	f85ddf44 	.word	0xf85ddf44
 8011814:	3e54ae0b 	.word	0x3e54ae0b
 8011818:	55555555 	.word	0x55555555
 801181c:	3fd55555 	.word	0x3fd55555
 8011820:	652b82fe 	.word	0x652b82fe
 8011824:	3ff71547 	.word	0x3ff71547
 8011828:	8800759c 	.word	0x8800759c
 801182c:	7e37e43c 	.word	0x7e37e43c
 8011830:	3ff00000 	.word	0x3ff00000
 8011834:	3fd00000 	.word	0x3fd00000
 8011838:	3fe00000 	.word	0x3fe00000
 801183c:	bff00000 	.word	0xbff00000
 8011840:	408fffff 	.word	0x408fffff
 8011844:	4bd4      	ldr	r3, [pc, #848]	; (8011b98 <__ieee754_pow+0x728>)
 8011846:	2200      	movs	r2, #0
 8011848:	ea09 0303 	and.w	r3, r9, r3
 801184c:	b943      	cbnz	r3, 8011860 <__ieee754_pow+0x3f0>
 801184e:	4658      	mov	r0, fp
 8011850:	4661      	mov	r1, ip
 8011852:	4bd2      	ldr	r3, [pc, #840]	; (8011b9c <__ieee754_pow+0x72c>)
 8011854:	f7ee fe40 	bl	80004d8 <__aeabi_dmul>
 8011858:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801185c:	4683      	mov	fp, r0
 801185e:	460c      	mov	r4, r1
 8011860:	1523      	asrs	r3, r4, #20
 8011862:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011866:	4413      	add	r3, r2
 8011868:	930b      	str	r3, [sp, #44]	; 0x2c
 801186a:	4bcd      	ldr	r3, [pc, #820]	; (8011ba0 <__ieee754_pow+0x730>)
 801186c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011870:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011874:	429c      	cmp	r4, r3
 8011876:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801187a:	dd08      	ble.n	801188e <__ieee754_pow+0x41e>
 801187c:	4bc9      	ldr	r3, [pc, #804]	; (8011ba4 <__ieee754_pow+0x734>)
 801187e:	429c      	cmp	r4, r3
 8011880:	f340 819c 	ble.w	8011bbc <__ieee754_pow+0x74c>
 8011884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011886:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801188a:	3301      	adds	r3, #1
 801188c:	930b      	str	r3, [sp, #44]	; 0x2c
 801188e:	2600      	movs	r6, #0
 8011890:	00f3      	lsls	r3, r6, #3
 8011892:	930d      	str	r3, [sp, #52]	; 0x34
 8011894:	4bc4      	ldr	r3, [pc, #784]	; (8011ba8 <__ieee754_pow+0x738>)
 8011896:	4658      	mov	r0, fp
 8011898:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801189c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80118a0:	4629      	mov	r1, r5
 80118a2:	461a      	mov	r2, r3
 80118a4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80118a8:	4623      	mov	r3, r4
 80118aa:	f7ee fc5d 	bl	8000168 <__aeabi_dsub>
 80118ae:	46da      	mov	sl, fp
 80118b0:	462b      	mov	r3, r5
 80118b2:	4652      	mov	r2, sl
 80118b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80118b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80118bc:	f7ee fc56 	bl	800016c <__adddf3>
 80118c0:	4602      	mov	r2, r0
 80118c2:	460b      	mov	r3, r1
 80118c4:	2000      	movs	r0, #0
 80118c6:	49b9      	ldr	r1, [pc, #740]	; (8011bac <__ieee754_pow+0x73c>)
 80118c8:	f7ee ff30 	bl	800072c <__aeabi_ddiv>
 80118cc:	4602      	mov	r2, r0
 80118ce:	460b      	mov	r3, r1
 80118d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80118d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80118d8:	f7ee fdfe 	bl	80004d8 <__aeabi_dmul>
 80118dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80118e0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80118e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80118e8:	2300      	movs	r3, #0
 80118ea:	2200      	movs	r2, #0
 80118ec:	46ab      	mov	fp, r5
 80118ee:	106d      	asrs	r5, r5, #1
 80118f0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80118f4:	9304      	str	r3, [sp, #16]
 80118f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80118fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80118fe:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8011902:	4640      	mov	r0, r8
 8011904:	4649      	mov	r1, r9
 8011906:	4614      	mov	r4, r2
 8011908:	461d      	mov	r5, r3
 801190a:	f7ee fde5 	bl	80004d8 <__aeabi_dmul>
 801190e:	4602      	mov	r2, r0
 8011910:	460b      	mov	r3, r1
 8011912:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011916:	f7ee fc27 	bl	8000168 <__aeabi_dsub>
 801191a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801191e:	4606      	mov	r6, r0
 8011920:	460f      	mov	r7, r1
 8011922:	4620      	mov	r0, r4
 8011924:	4629      	mov	r1, r5
 8011926:	f7ee fc1f 	bl	8000168 <__aeabi_dsub>
 801192a:	4602      	mov	r2, r0
 801192c:	460b      	mov	r3, r1
 801192e:	4650      	mov	r0, sl
 8011930:	4659      	mov	r1, fp
 8011932:	f7ee fc19 	bl	8000168 <__aeabi_dsub>
 8011936:	4642      	mov	r2, r8
 8011938:	464b      	mov	r3, r9
 801193a:	f7ee fdcd 	bl	80004d8 <__aeabi_dmul>
 801193e:	4602      	mov	r2, r0
 8011940:	460b      	mov	r3, r1
 8011942:	4630      	mov	r0, r6
 8011944:	4639      	mov	r1, r7
 8011946:	f7ee fc0f 	bl	8000168 <__aeabi_dsub>
 801194a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801194e:	f7ee fdc3 	bl	80004d8 <__aeabi_dmul>
 8011952:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801195a:	4610      	mov	r0, r2
 801195c:	4619      	mov	r1, r3
 801195e:	f7ee fdbb 	bl	80004d8 <__aeabi_dmul>
 8011962:	a37b      	add	r3, pc, #492	; (adr r3, 8011b50 <__ieee754_pow+0x6e0>)
 8011964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011968:	4604      	mov	r4, r0
 801196a:	460d      	mov	r5, r1
 801196c:	f7ee fdb4 	bl	80004d8 <__aeabi_dmul>
 8011970:	a379      	add	r3, pc, #484	; (adr r3, 8011b58 <__ieee754_pow+0x6e8>)
 8011972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011976:	f7ee fbf9 	bl	800016c <__adddf3>
 801197a:	4622      	mov	r2, r4
 801197c:	462b      	mov	r3, r5
 801197e:	f7ee fdab 	bl	80004d8 <__aeabi_dmul>
 8011982:	a377      	add	r3, pc, #476	; (adr r3, 8011b60 <__ieee754_pow+0x6f0>)
 8011984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011988:	f7ee fbf0 	bl	800016c <__adddf3>
 801198c:	4622      	mov	r2, r4
 801198e:	462b      	mov	r3, r5
 8011990:	f7ee fda2 	bl	80004d8 <__aeabi_dmul>
 8011994:	a374      	add	r3, pc, #464	; (adr r3, 8011b68 <__ieee754_pow+0x6f8>)
 8011996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199a:	f7ee fbe7 	bl	800016c <__adddf3>
 801199e:	4622      	mov	r2, r4
 80119a0:	462b      	mov	r3, r5
 80119a2:	f7ee fd99 	bl	80004d8 <__aeabi_dmul>
 80119a6:	a372      	add	r3, pc, #456	; (adr r3, 8011b70 <__ieee754_pow+0x700>)
 80119a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ac:	f7ee fbde 	bl	800016c <__adddf3>
 80119b0:	4622      	mov	r2, r4
 80119b2:	462b      	mov	r3, r5
 80119b4:	f7ee fd90 	bl	80004d8 <__aeabi_dmul>
 80119b8:	a36f      	add	r3, pc, #444	; (adr r3, 8011b78 <__ieee754_pow+0x708>)
 80119ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119be:	f7ee fbd5 	bl	800016c <__adddf3>
 80119c2:	4622      	mov	r2, r4
 80119c4:	4606      	mov	r6, r0
 80119c6:	460f      	mov	r7, r1
 80119c8:	462b      	mov	r3, r5
 80119ca:	4620      	mov	r0, r4
 80119cc:	4629      	mov	r1, r5
 80119ce:	f7ee fd83 	bl	80004d8 <__aeabi_dmul>
 80119d2:	4602      	mov	r2, r0
 80119d4:	460b      	mov	r3, r1
 80119d6:	4630      	mov	r0, r6
 80119d8:	4639      	mov	r1, r7
 80119da:	f7ee fd7d 	bl	80004d8 <__aeabi_dmul>
 80119de:	4604      	mov	r4, r0
 80119e0:	460d      	mov	r5, r1
 80119e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119e6:	4642      	mov	r2, r8
 80119e8:	464b      	mov	r3, r9
 80119ea:	f7ee fbbf 	bl	800016c <__adddf3>
 80119ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80119f2:	f7ee fd71 	bl	80004d8 <__aeabi_dmul>
 80119f6:	4622      	mov	r2, r4
 80119f8:	462b      	mov	r3, r5
 80119fa:	f7ee fbb7 	bl	800016c <__adddf3>
 80119fe:	4642      	mov	r2, r8
 8011a00:	4606      	mov	r6, r0
 8011a02:	460f      	mov	r7, r1
 8011a04:	464b      	mov	r3, r9
 8011a06:	4640      	mov	r0, r8
 8011a08:	4649      	mov	r1, r9
 8011a0a:	f7ee fd65 	bl	80004d8 <__aeabi_dmul>
 8011a0e:	2200      	movs	r2, #0
 8011a10:	4b67      	ldr	r3, [pc, #412]	; (8011bb0 <__ieee754_pow+0x740>)
 8011a12:	4682      	mov	sl, r0
 8011a14:	468b      	mov	fp, r1
 8011a16:	f7ee fba9 	bl	800016c <__adddf3>
 8011a1a:	4632      	mov	r2, r6
 8011a1c:	463b      	mov	r3, r7
 8011a1e:	f7ee fba5 	bl	800016c <__adddf3>
 8011a22:	9c04      	ldr	r4, [sp, #16]
 8011a24:	460d      	mov	r5, r1
 8011a26:	4622      	mov	r2, r4
 8011a28:	460b      	mov	r3, r1
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	4649      	mov	r1, r9
 8011a2e:	f7ee fd53 	bl	80004d8 <__aeabi_dmul>
 8011a32:	2200      	movs	r2, #0
 8011a34:	4680      	mov	r8, r0
 8011a36:	4689      	mov	r9, r1
 8011a38:	4620      	mov	r0, r4
 8011a3a:	4629      	mov	r1, r5
 8011a3c:	4b5c      	ldr	r3, [pc, #368]	; (8011bb0 <__ieee754_pow+0x740>)
 8011a3e:	f7ee fb93 	bl	8000168 <__aeabi_dsub>
 8011a42:	4652      	mov	r2, sl
 8011a44:	465b      	mov	r3, fp
 8011a46:	f7ee fb8f 	bl	8000168 <__aeabi_dsub>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4630      	mov	r0, r6
 8011a50:	4639      	mov	r1, r7
 8011a52:	f7ee fb89 	bl	8000168 <__aeabi_dsub>
 8011a56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a5a:	f7ee fd3d 	bl	80004d8 <__aeabi_dmul>
 8011a5e:	4622      	mov	r2, r4
 8011a60:	4606      	mov	r6, r0
 8011a62:	460f      	mov	r7, r1
 8011a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011a68:	462b      	mov	r3, r5
 8011a6a:	f7ee fd35 	bl	80004d8 <__aeabi_dmul>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	460b      	mov	r3, r1
 8011a72:	4630      	mov	r0, r6
 8011a74:	4639      	mov	r1, r7
 8011a76:	f7ee fb79 	bl	800016c <__adddf3>
 8011a7a:	4606      	mov	r6, r0
 8011a7c:	460f      	mov	r7, r1
 8011a7e:	4602      	mov	r2, r0
 8011a80:	460b      	mov	r3, r1
 8011a82:	4640      	mov	r0, r8
 8011a84:	4649      	mov	r1, r9
 8011a86:	f7ee fb71 	bl	800016c <__adddf3>
 8011a8a:	a33d      	add	r3, pc, #244	; (adr r3, 8011b80 <__ieee754_pow+0x710>)
 8011a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a90:	9c04      	ldr	r4, [sp, #16]
 8011a92:	460d      	mov	r5, r1
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ee fd1f 	bl	80004d8 <__aeabi_dmul>
 8011a9a:	4642      	mov	r2, r8
 8011a9c:	464b      	mov	r3, r9
 8011a9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	f7ee fb5f 	bl	8000168 <__aeabi_dsub>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	460b      	mov	r3, r1
 8011aae:	4630      	mov	r0, r6
 8011ab0:	4639      	mov	r1, r7
 8011ab2:	f7ee fb59 	bl	8000168 <__aeabi_dsub>
 8011ab6:	a334      	add	r3, pc, #208	; (adr r3, 8011b88 <__ieee754_pow+0x718>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	f7ee fd0c 	bl	80004d8 <__aeabi_dmul>
 8011ac0:	a333      	add	r3, pc, #204	; (adr r3, 8011b90 <__ieee754_pow+0x720>)
 8011ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac6:	4606      	mov	r6, r0
 8011ac8:	460f      	mov	r7, r1
 8011aca:	4620      	mov	r0, r4
 8011acc:	4629      	mov	r1, r5
 8011ace:	f7ee fd03 	bl	80004d8 <__aeabi_dmul>
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	4639      	mov	r1, r7
 8011ada:	f7ee fb47 	bl	800016c <__adddf3>
 8011ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ae0:	4b34      	ldr	r3, [pc, #208]	; (8011bb4 <__ieee754_pow+0x744>)
 8011ae2:	4413      	add	r3, r2
 8011ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae8:	f7ee fb40 	bl	800016c <__adddf3>
 8011aec:	4680      	mov	r8, r0
 8011aee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011af0:	4689      	mov	r9, r1
 8011af2:	f7ee fc87 	bl	8000404 <__aeabi_i2d>
 8011af6:	4604      	mov	r4, r0
 8011af8:	460d      	mov	r5, r1
 8011afa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011afc:	4b2e      	ldr	r3, [pc, #184]	; (8011bb8 <__ieee754_pow+0x748>)
 8011afe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b02:	4413      	add	r3, r2
 8011b04:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011b08:	4642      	mov	r2, r8
 8011b0a:	464b      	mov	r3, r9
 8011b0c:	f7ee fb2e 	bl	800016c <__adddf3>
 8011b10:	4632      	mov	r2, r6
 8011b12:	463b      	mov	r3, r7
 8011b14:	f7ee fb2a 	bl	800016c <__adddf3>
 8011b18:	4622      	mov	r2, r4
 8011b1a:	462b      	mov	r3, r5
 8011b1c:	f7ee fb26 	bl	800016c <__adddf3>
 8011b20:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011b24:	4622      	mov	r2, r4
 8011b26:	462b      	mov	r3, r5
 8011b28:	4650      	mov	r0, sl
 8011b2a:	468b      	mov	fp, r1
 8011b2c:	f7ee fb1c 	bl	8000168 <__aeabi_dsub>
 8011b30:	4632      	mov	r2, r6
 8011b32:	463b      	mov	r3, r7
 8011b34:	f7ee fb18 	bl	8000168 <__aeabi_dsub>
 8011b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b3c:	f7ee fb14 	bl	8000168 <__aeabi_dsub>
 8011b40:	4602      	mov	r2, r0
 8011b42:	460b      	mov	r3, r1
 8011b44:	4640      	mov	r0, r8
 8011b46:	4649      	mov	r1, r9
 8011b48:	e608      	b.n	801175c <__ieee754_pow+0x2ec>
 8011b4a:	bf00      	nop
 8011b4c:	f3af 8000 	nop.w
 8011b50:	4a454eef 	.word	0x4a454eef
 8011b54:	3fca7e28 	.word	0x3fca7e28
 8011b58:	93c9db65 	.word	0x93c9db65
 8011b5c:	3fcd864a 	.word	0x3fcd864a
 8011b60:	a91d4101 	.word	0xa91d4101
 8011b64:	3fd17460 	.word	0x3fd17460
 8011b68:	518f264d 	.word	0x518f264d
 8011b6c:	3fd55555 	.word	0x3fd55555
 8011b70:	db6fabff 	.word	0xdb6fabff
 8011b74:	3fdb6db6 	.word	0x3fdb6db6
 8011b78:	33333303 	.word	0x33333303
 8011b7c:	3fe33333 	.word	0x3fe33333
 8011b80:	e0000000 	.word	0xe0000000
 8011b84:	3feec709 	.word	0x3feec709
 8011b88:	dc3a03fd 	.word	0xdc3a03fd
 8011b8c:	3feec709 	.word	0x3feec709
 8011b90:	145b01f5 	.word	0x145b01f5
 8011b94:	be3e2fe0 	.word	0xbe3e2fe0
 8011b98:	7ff00000 	.word	0x7ff00000
 8011b9c:	43400000 	.word	0x43400000
 8011ba0:	0003988e 	.word	0x0003988e
 8011ba4:	000bb679 	.word	0x000bb679
 8011ba8:	08014480 	.word	0x08014480
 8011bac:	3ff00000 	.word	0x3ff00000
 8011bb0:	40080000 	.word	0x40080000
 8011bb4:	080144a0 	.word	0x080144a0
 8011bb8:	08014490 	.word	0x08014490
 8011bbc:	2601      	movs	r6, #1
 8011bbe:	e667      	b.n	8011890 <__ieee754_pow+0x420>
 8011bc0:	a39d      	add	r3, pc, #628	; (adr r3, 8011e38 <__ieee754_pow+0x9c8>)
 8011bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc6:	4640      	mov	r0, r8
 8011bc8:	4649      	mov	r1, r9
 8011bca:	f7ee facf 	bl	800016c <__adddf3>
 8011bce:	4622      	mov	r2, r4
 8011bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bd4:	462b      	mov	r3, r5
 8011bd6:	4650      	mov	r0, sl
 8011bd8:	4639      	mov	r1, r7
 8011bda:	f7ee fac5 	bl	8000168 <__aeabi_dsub>
 8011bde:	4602      	mov	r2, r0
 8011be0:	460b      	mov	r3, r1
 8011be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011be6:	f7ee ff07 	bl	80009f8 <__aeabi_dcmpgt>
 8011bea:	2800      	cmp	r0, #0
 8011bec:	f47f ae01 	bne.w	80117f2 <__ieee754_pow+0x382>
 8011bf0:	4aa5      	ldr	r2, [pc, #660]	; (8011e88 <__ieee754_pow+0xa18>)
 8011bf2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	f340 8103 	ble.w	8011e02 <__ieee754_pow+0x992>
 8011bfc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011c00:	2000      	movs	r0, #0
 8011c02:	151b      	asrs	r3, r3, #20
 8011c04:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011c08:	fa4a f303 	asr.w	r3, sl, r3
 8011c0c:	4433      	add	r3, r6
 8011c0e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011c12:	4f9e      	ldr	r7, [pc, #632]	; (8011e8c <__ieee754_pow+0xa1c>)
 8011c14:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011c18:	4117      	asrs	r7, r2
 8011c1a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011c1e:	ea23 0107 	bic.w	r1, r3, r7
 8011c22:	f1c2 0214 	rsb	r2, r2, #20
 8011c26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	fa4a fa02 	asr.w	sl, sl, r2
 8011c30:	2e00      	cmp	r6, #0
 8011c32:	4602      	mov	r2, r0
 8011c34:	4629      	mov	r1, r5
 8011c36:	4620      	mov	r0, r4
 8011c38:	bfb8      	it	lt
 8011c3a:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c3e:	f7ee fa93 	bl	8000168 <__aeabi_dsub>
 8011c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c4a:	2400      	movs	r4, #0
 8011c4c:	4642      	mov	r2, r8
 8011c4e:	464b      	mov	r3, r9
 8011c50:	f7ee fa8c 	bl	800016c <__adddf3>
 8011c54:	a37a      	add	r3, pc, #488	; (adr r3, 8011e40 <__ieee754_pow+0x9d0>)
 8011c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	460d      	mov	r5, r1
 8011c5e:	f7ee fc3b 	bl	80004d8 <__aeabi_dmul>
 8011c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c66:	4606      	mov	r6, r0
 8011c68:	460f      	mov	r7, r1
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	f7ee fa7b 	bl	8000168 <__aeabi_dsub>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	4640      	mov	r0, r8
 8011c78:	4649      	mov	r1, r9
 8011c7a:	f7ee fa75 	bl	8000168 <__aeabi_dsub>
 8011c7e:	a372      	add	r3, pc, #456	; (adr r3, 8011e48 <__ieee754_pow+0x9d8>)
 8011c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c84:	f7ee fc28 	bl	80004d8 <__aeabi_dmul>
 8011c88:	a371      	add	r3, pc, #452	; (adr r3, 8011e50 <__ieee754_pow+0x9e0>)
 8011c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8e:	4680      	mov	r8, r0
 8011c90:	4689      	mov	r9, r1
 8011c92:	4620      	mov	r0, r4
 8011c94:	4629      	mov	r1, r5
 8011c96:	f7ee fc1f 	bl	80004d8 <__aeabi_dmul>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	4640      	mov	r0, r8
 8011ca0:	4649      	mov	r1, r9
 8011ca2:	f7ee fa63 	bl	800016c <__adddf3>
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	460d      	mov	r5, r1
 8011caa:	4602      	mov	r2, r0
 8011cac:	460b      	mov	r3, r1
 8011cae:	4630      	mov	r0, r6
 8011cb0:	4639      	mov	r1, r7
 8011cb2:	f7ee fa5b 	bl	800016c <__adddf3>
 8011cb6:	4632      	mov	r2, r6
 8011cb8:	463b      	mov	r3, r7
 8011cba:	4680      	mov	r8, r0
 8011cbc:	4689      	mov	r9, r1
 8011cbe:	f7ee fa53 	bl	8000168 <__aeabi_dsub>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	4629      	mov	r1, r5
 8011cca:	f7ee fa4d 	bl	8000168 <__aeabi_dsub>
 8011cce:	4642      	mov	r2, r8
 8011cd0:	4606      	mov	r6, r0
 8011cd2:	460f      	mov	r7, r1
 8011cd4:	464b      	mov	r3, r9
 8011cd6:	4640      	mov	r0, r8
 8011cd8:	4649      	mov	r1, r9
 8011cda:	f7ee fbfd 	bl	80004d8 <__aeabi_dmul>
 8011cde:	a35e      	add	r3, pc, #376	; (adr r3, 8011e58 <__ieee754_pow+0x9e8>)
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	f7ee fbf6 	bl	80004d8 <__aeabi_dmul>
 8011cec:	a35c      	add	r3, pc, #368	; (adr r3, 8011e60 <__ieee754_pow+0x9f0>)
 8011cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf2:	f7ee fa39 	bl	8000168 <__aeabi_dsub>
 8011cf6:	4622      	mov	r2, r4
 8011cf8:	462b      	mov	r3, r5
 8011cfa:	f7ee fbed 	bl	80004d8 <__aeabi_dmul>
 8011cfe:	a35a      	add	r3, pc, #360	; (adr r3, 8011e68 <__ieee754_pow+0x9f8>)
 8011d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d04:	f7ee fa32 	bl	800016c <__adddf3>
 8011d08:	4622      	mov	r2, r4
 8011d0a:	462b      	mov	r3, r5
 8011d0c:	f7ee fbe4 	bl	80004d8 <__aeabi_dmul>
 8011d10:	a357      	add	r3, pc, #348	; (adr r3, 8011e70 <__ieee754_pow+0xa00>)
 8011d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d16:	f7ee fa27 	bl	8000168 <__aeabi_dsub>
 8011d1a:	4622      	mov	r2, r4
 8011d1c:	462b      	mov	r3, r5
 8011d1e:	f7ee fbdb 	bl	80004d8 <__aeabi_dmul>
 8011d22:	a355      	add	r3, pc, #340	; (adr r3, 8011e78 <__ieee754_pow+0xa08>)
 8011d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d28:	f7ee fa20 	bl	800016c <__adddf3>
 8011d2c:	4622      	mov	r2, r4
 8011d2e:	462b      	mov	r3, r5
 8011d30:	f7ee fbd2 	bl	80004d8 <__aeabi_dmul>
 8011d34:	4602      	mov	r2, r0
 8011d36:	460b      	mov	r3, r1
 8011d38:	4640      	mov	r0, r8
 8011d3a:	4649      	mov	r1, r9
 8011d3c:	f7ee fa14 	bl	8000168 <__aeabi_dsub>
 8011d40:	4604      	mov	r4, r0
 8011d42:	460d      	mov	r5, r1
 8011d44:	4602      	mov	r2, r0
 8011d46:	460b      	mov	r3, r1
 8011d48:	4640      	mov	r0, r8
 8011d4a:	4649      	mov	r1, r9
 8011d4c:	f7ee fbc4 	bl	80004d8 <__aeabi_dmul>
 8011d50:	2200      	movs	r2, #0
 8011d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	4629      	mov	r1, r5
 8011d5e:	f7ee fa03 	bl	8000168 <__aeabi_dsub>
 8011d62:	4602      	mov	r2, r0
 8011d64:	460b      	mov	r3, r1
 8011d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d6a:	f7ee fcdf 	bl	800072c <__aeabi_ddiv>
 8011d6e:	4632      	mov	r2, r6
 8011d70:	4604      	mov	r4, r0
 8011d72:	460d      	mov	r5, r1
 8011d74:	463b      	mov	r3, r7
 8011d76:	4640      	mov	r0, r8
 8011d78:	4649      	mov	r1, r9
 8011d7a:	f7ee fbad 	bl	80004d8 <__aeabi_dmul>
 8011d7e:	4632      	mov	r2, r6
 8011d80:	463b      	mov	r3, r7
 8011d82:	f7ee f9f3 	bl	800016c <__adddf3>
 8011d86:	4602      	mov	r2, r0
 8011d88:	460b      	mov	r3, r1
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	4629      	mov	r1, r5
 8011d8e:	f7ee f9eb 	bl	8000168 <__aeabi_dsub>
 8011d92:	4642      	mov	r2, r8
 8011d94:	464b      	mov	r3, r9
 8011d96:	f7ee f9e7 	bl	8000168 <__aeabi_dsub>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	2000      	movs	r0, #0
 8011da0:	493b      	ldr	r1, [pc, #236]	; (8011e90 <__ieee754_pow+0xa20>)
 8011da2:	f7ee f9e1 	bl	8000168 <__aeabi_dsub>
 8011da6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011daa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011dae:	da2b      	bge.n	8011e08 <__ieee754_pow+0x998>
 8011db0:	4652      	mov	r2, sl
 8011db2:	f001 f8e1 	bl	8012f78 <scalbn>
 8011db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dba:	f7ff bbf2 	b.w	80115a2 <__ieee754_pow+0x132>
 8011dbe:	4b35      	ldr	r3, [pc, #212]	; (8011e94 <__ieee754_pow+0xa24>)
 8011dc0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8011dc4:	429f      	cmp	r7, r3
 8011dc6:	f77f af13 	ble.w	8011bf0 <__ieee754_pow+0x780>
 8011dca:	4b33      	ldr	r3, [pc, #204]	; (8011e98 <__ieee754_pow+0xa28>)
 8011dcc:	440b      	add	r3, r1
 8011dce:	4303      	orrs	r3, r0
 8011dd0:	d00b      	beq.n	8011dea <__ieee754_pow+0x97a>
 8011dd2:	a32b      	add	r3, pc, #172	; (adr r3, 8011e80 <__ieee754_pow+0xa10>)
 8011dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ddc:	f7ee fb7c 	bl	80004d8 <__aeabi_dmul>
 8011de0:	a327      	add	r3, pc, #156	; (adr r3, 8011e80 <__ieee754_pow+0xa10>)
 8011de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de6:	f7ff bbdc 	b.w	80115a2 <__ieee754_pow+0x132>
 8011dea:	4622      	mov	r2, r4
 8011dec:	462b      	mov	r3, r5
 8011dee:	f7ee f9bb 	bl	8000168 <__aeabi_dsub>
 8011df2:	4642      	mov	r2, r8
 8011df4:	464b      	mov	r3, r9
 8011df6:	f7ee fdf5 	bl	80009e4 <__aeabi_dcmpge>
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	f43f aef8 	beq.w	8011bf0 <__ieee754_pow+0x780>
 8011e00:	e7e7      	b.n	8011dd2 <__ieee754_pow+0x962>
 8011e02:	f04f 0a00 	mov.w	sl, #0
 8011e06:	e71e      	b.n	8011c46 <__ieee754_pow+0x7d6>
 8011e08:	4621      	mov	r1, r4
 8011e0a:	e7d4      	b.n	8011db6 <__ieee754_pow+0x946>
 8011e0c:	f04f 0b00 	mov.w	fp, #0
 8011e10:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011e90 <__ieee754_pow+0xa20>
 8011e14:	f7ff bbb0 	b.w	8011578 <__ieee754_pow+0x108>
 8011e18:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8011e1c:	f7ff bbac 	b.w	8011578 <__ieee754_pow+0x108>
 8011e20:	4638      	mov	r0, r7
 8011e22:	4641      	mov	r1, r8
 8011e24:	f7ff bbbf 	b.w	80115a6 <__ieee754_pow+0x136>
 8011e28:	9200      	str	r2, [sp, #0]
 8011e2a:	f7ff bb7f 	b.w	801152c <__ieee754_pow+0xbc>
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f7ff bb69 	b.w	8011506 <__ieee754_pow+0x96>
 8011e34:	f3af 8000 	nop.w
 8011e38:	652b82fe 	.word	0x652b82fe
 8011e3c:	3c971547 	.word	0x3c971547
 8011e40:	00000000 	.word	0x00000000
 8011e44:	3fe62e43 	.word	0x3fe62e43
 8011e48:	fefa39ef 	.word	0xfefa39ef
 8011e4c:	3fe62e42 	.word	0x3fe62e42
 8011e50:	0ca86c39 	.word	0x0ca86c39
 8011e54:	be205c61 	.word	0xbe205c61
 8011e58:	72bea4d0 	.word	0x72bea4d0
 8011e5c:	3e663769 	.word	0x3e663769
 8011e60:	c5d26bf1 	.word	0xc5d26bf1
 8011e64:	3ebbbd41 	.word	0x3ebbbd41
 8011e68:	af25de2c 	.word	0xaf25de2c
 8011e6c:	3f11566a 	.word	0x3f11566a
 8011e70:	16bebd93 	.word	0x16bebd93
 8011e74:	3f66c16c 	.word	0x3f66c16c
 8011e78:	5555553e 	.word	0x5555553e
 8011e7c:	3fc55555 	.word	0x3fc55555
 8011e80:	c2f8f359 	.word	0xc2f8f359
 8011e84:	01a56e1f 	.word	0x01a56e1f
 8011e88:	3fe00000 	.word	0x3fe00000
 8011e8c:	000fffff 	.word	0x000fffff
 8011e90:	3ff00000 	.word	0x3ff00000
 8011e94:	4090cbff 	.word	0x4090cbff
 8011e98:	3f6f3400 	.word	0x3f6f3400

08011e9c <__ieee754_sqrt>:
 8011e9c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8011ff0 <__ieee754_sqrt+0x154>
 8011ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea4:	ea3c 0c01 	bics.w	ip, ip, r1
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	4606      	mov	r6, r0
 8011eac:	460d      	mov	r5, r1
 8011eae:	460a      	mov	r2, r1
 8011eb0:	4607      	mov	r7, r0
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	d10e      	bne.n	8011ed4 <__ieee754_sqrt+0x38>
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	f7ee fb0e 	bl	80004d8 <__aeabi_dmul>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	4629      	mov	r1, r5
 8011ec4:	f7ee f952 	bl	800016c <__adddf3>
 8011ec8:	4606      	mov	r6, r0
 8011eca:	460d      	mov	r5, r1
 8011ecc:	4630      	mov	r0, r6
 8011ece:	4629      	mov	r1, r5
 8011ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed4:	2900      	cmp	r1, #0
 8011ed6:	dc0d      	bgt.n	8011ef4 <__ieee754_sqrt+0x58>
 8011ed8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8011edc:	ea5c 0707 	orrs.w	r7, ip, r7
 8011ee0:	d0f4      	beq.n	8011ecc <__ieee754_sqrt+0x30>
 8011ee2:	b139      	cbz	r1, 8011ef4 <__ieee754_sqrt+0x58>
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	f7ee f93f 	bl	8000168 <__aeabi_dsub>
 8011eea:	4602      	mov	r2, r0
 8011eec:	460b      	mov	r3, r1
 8011eee:	f7ee fc1d 	bl	800072c <__aeabi_ddiv>
 8011ef2:	e7e9      	b.n	8011ec8 <__ieee754_sqrt+0x2c>
 8011ef4:	1512      	asrs	r2, r2, #20
 8011ef6:	d074      	beq.n	8011fe2 <__ieee754_sqrt+0x146>
 8011ef8:	2000      	movs	r0, #0
 8011efa:	07d5      	lsls	r5, r2, #31
 8011efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f00:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8011f04:	bf5e      	ittt	pl
 8011f06:	0fe3      	lsrpl	r3, r4, #31
 8011f08:	0064      	lslpl	r4, r4, #1
 8011f0a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8011f0e:	0fe3      	lsrs	r3, r4, #31
 8011f10:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011f14:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011f18:	2516      	movs	r5, #22
 8011f1a:	4601      	mov	r1, r0
 8011f1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011f20:	1076      	asrs	r6, r6, #1
 8011f22:	0064      	lsls	r4, r4, #1
 8011f24:	188f      	adds	r7, r1, r2
 8011f26:	429f      	cmp	r7, r3
 8011f28:	bfde      	ittt	le
 8011f2a:	1bdb      	suble	r3, r3, r7
 8011f2c:	18b9      	addle	r1, r7, r2
 8011f2e:	1880      	addle	r0, r0, r2
 8011f30:	005b      	lsls	r3, r3, #1
 8011f32:	3d01      	subs	r5, #1
 8011f34:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011f38:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011f3c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011f40:	d1f0      	bne.n	8011f24 <__ieee754_sqrt+0x88>
 8011f42:	462a      	mov	r2, r5
 8011f44:	f04f 0e20 	mov.w	lr, #32
 8011f48:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011f4c:	428b      	cmp	r3, r1
 8011f4e:	eb07 0c05 	add.w	ip, r7, r5
 8011f52:	dc02      	bgt.n	8011f5a <__ieee754_sqrt+0xbe>
 8011f54:	d113      	bne.n	8011f7e <__ieee754_sqrt+0xe2>
 8011f56:	45a4      	cmp	ip, r4
 8011f58:	d811      	bhi.n	8011f7e <__ieee754_sqrt+0xe2>
 8011f5a:	f1bc 0f00 	cmp.w	ip, #0
 8011f5e:	eb0c 0507 	add.w	r5, ip, r7
 8011f62:	da43      	bge.n	8011fec <__ieee754_sqrt+0x150>
 8011f64:	2d00      	cmp	r5, #0
 8011f66:	db41      	blt.n	8011fec <__ieee754_sqrt+0x150>
 8011f68:	f101 0801 	add.w	r8, r1, #1
 8011f6c:	1a5b      	subs	r3, r3, r1
 8011f6e:	4641      	mov	r1, r8
 8011f70:	45a4      	cmp	ip, r4
 8011f72:	bf88      	it	hi
 8011f74:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011f78:	eba4 040c 	sub.w	r4, r4, ip
 8011f7c:	443a      	add	r2, r7
 8011f7e:	005b      	lsls	r3, r3, #1
 8011f80:	f1be 0e01 	subs.w	lr, lr, #1
 8011f84:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011f88:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8011f8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011f90:	d1dc      	bne.n	8011f4c <__ieee754_sqrt+0xb0>
 8011f92:	4323      	orrs	r3, r4
 8011f94:	d006      	beq.n	8011fa4 <__ieee754_sqrt+0x108>
 8011f96:	1c54      	adds	r4, r2, #1
 8011f98:	bf0b      	itete	eq
 8011f9a:	4672      	moveq	r2, lr
 8011f9c:	3201      	addne	r2, #1
 8011f9e:	3001      	addeq	r0, #1
 8011fa0:	f022 0201 	bicne.w	r2, r2, #1
 8011fa4:	1043      	asrs	r3, r0, #1
 8011fa6:	07c1      	lsls	r1, r0, #31
 8011fa8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011fac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011fb0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011fb4:	bf48      	it	mi
 8011fb6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011fba:	4610      	mov	r0, r2
 8011fbc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8011fc0:	e782      	b.n	8011ec8 <__ieee754_sqrt+0x2c>
 8011fc2:	0ae3      	lsrs	r3, r4, #11
 8011fc4:	3915      	subs	r1, #21
 8011fc6:	0564      	lsls	r4, r4, #21
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d0fa      	beq.n	8011fc2 <__ieee754_sqrt+0x126>
 8011fcc:	02de      	lsls	r6, r3, #11
 8011fce:	d50a      	bpl.n	8011fe6 <__ieee754_sqrt+0x14a>
 8011fd0:	f1c2 0020 	rsb	r0, r2, #32
 8011fd4:	fa24 f000 	lsr.w	r0, r4, r0
 8011fd8:	1e55      	subs	r5, r2, #1
 8011fda:	4094      	lsls	r4, r2
 8011fdc:	4303      	orrs	r3, r0
 8011fde:	1b4a      	subs	r2, r1, r5
 8011fe0:	e78a      	b.n	8011ef8 <__ieee754_sqrt+0x5c>
 8011fe2:	4611      	mov	r1, r2
 8011fe4:	e7f0      	b.n	8011fc8 <__ieee754_sqrt+0x12c>
 8011fe6:	005b      	lsls	r3, r3, #1
 8011fe8:	3201      	adds	r2, #1
 8011fea:	e7ef      	b.n	8011fcc <__ieee754_sqrt+0x130>
 8011fec:	4688      	mov	r8, r1
 8011fee:	e7bd      	b.n	8011f6c <__ieee754_sqrt+0xd0>
 8011ff0:	7ff00000 	.word	0x7ff00000

08011ff4 <__ieee754_asinf>:
 8011ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ff8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8011ffc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012000:	4604      	mov	r4, r0
 8012002:	4605      	mov	r5, r0
 8012004:	d10c      	bne.n	8012020 <__ieee754_asinf+0x2c>
 8012006:	498d      	ldr	r1, [pc, #564]	; (801223c <__ieee754_asinf+0x248>)
 8012008:	f7ee fe9c 	bl	8000d44 <__aeabi_fmul>
 801200c:	498c      	ldr	r1, [pc, #560]	; (8012240 <__ieee754_asinf+0x24c>)
 801200e:	4605      	mov	r5, r0
 8012010:	4620      	mov	r0, r4
 8012012:	f7ee fe97 	bl	8000d44 <__aeabi_fmul>
 8012016:	4601      	mov	r1, r0
 8012018:	4628      	mov	r0, r5
 801201a:	f7ee fd8b 	bl	8000b34 <__addsf3>
 801201e:	e006      	b.n	801202e <__ieee754_asinf+0x3a>
 8012020:	dd07      	ble.n	8012032 <__ieee754_asinf+0x3e>
 8012022:	4601      	mov	r1, r0
 8012024:	f7ee fd84 	bl	8000b30 <__aeabi_fsub>
 8012028:	4601      	mov	r1, r0
 801202a:	f7ee ff3f 	bl	8000eac <__aeabi_fdiv>
 801202e:	4604      	mov	r4, r0
 8012030:	e00e      	b.n	8012050 <__ieee754_asinf+0x5c>
 8012032:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8012036:	da58      	bge.n	80120ea <__ieee754_asinf+0xf6>
 8012038:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 801203c:	da0b      	bge.n	8012056 <__ieee754_asinf+0x62>
 801203e:	4981      	ldr	r1, [pc, #516]	; (8012244 <__ieee754_asinf+0x250>)
 8012040:	f7ee fd78 	bl	8000b34 <__addsf3>
 8012044:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8012048:	f7ef f838 	bl	80010bc <__aeabi_fcmpgt>
 801204c:	2800      	cmp	r0, #0
 801204e:	d04c      	beq.n	80120ea <__ieee754_asinf+0xf6>
 8012050:	4620      	mov	r0, r4
 8012052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012056:	4601      	mov	r1, r0
 8012058:	f7ee fe74 	bl	8000d44 <__aeabi_fmul>
 801205c:	4605      	mov	r5, r0
 801205e:	497a      	ldr	r1, [pc, #488]	; (8012248 <__ieee754_asinf+0x254>)
 8012060:	f7ee fe70 	bl	8000d44 <__aeabi_fmul>
 8012064:	4979      	ldr	r1, [pc, #484]	; (801224c <__ieee754_asinf+0x258>)
 8012066:	f7ee fd65 	bl	8000b34 <__addsf3>
 801206a:	4629      	mov	r1, r5
 801206c:	f7ee fe6a 	bl	8000d44 <__aeabi_fmul>
 8012070:	4977      	ldr	r1, [pc, #476]	; (8012250 <__ieee754_asinf+0x25c>)
 8012072:	f7ee fd5d 	bl	8000b30 <__aeabi_fsub>
 8012076:	4629      	mov	r1, r5
 8012078:	f7ee fe64 	bl	8000d44 <__aeabi_fmul>
 801207c:	4975      	ldr	r1, [pc, #468]	; (8012254 <__ieee754_asinf+0x260>)
 801207e:	f7ee fd59 	bl	8000b34 <__addsf3>
 8012082:	4629      	mov	r1, r5
 8012084:	f7ee fe5e 	bl	8000d44 <__aeabi_fmul>
 8012088:	4973      	ldr	r1, [pc, #460]	; (8012258 <__ieee754_asinf+0x264>)
 801208a:	f7ee fd51 	bl	8000b30 <__aeabi_fsub>
 801208e:	4629      	mov	r1, r5
 8012090:	f7ee fe58 	bl	8000d44 <__aeabi_fmul>
 8012094:	4971      	ldr	r1, [pc, #452]	; (801225c <__ieee754_asinf+0x268>)
 8012096:	f7ee fd4d 	bl	8000b34 <__addsf3>
 801209a:	4629      	mov	r1, r5
 801209c:	f7ee fe52 	bl	8000d44 <__aeabi_fmul>
 80120a0:	496f      	ldr	r1, [pc, #444]	; (8012260 <__ieee754_asinf+0x26c>)
 80120a2:	4606      	mov	r6, r0
 80120a4:	4628      	mov	r0, r5
 80120a6:	f7ee fe4d 	bl	8000d44 <__aeabi_fmul>
 80120aa:	496e      	ldr	r1, [pc, #440]	; (8012264 <__ieee754_asinf+0x270>)
 80120ac:	f7ee fd40 	bl	8000b30 <__aeabi_fsub>
 80120b0:	4629      	mov	r1, r5
 80120b2:	f7ee fe47 	bl	8000d44 <__aeabi_fmul>
 80120b6:	496c      	ldr	r1, [pc, #432]	; (8012268 <__ieee754_asinf+0x274>)
 80120b8:	f7ee fd3c 	bl	8000b34 <__addsf3>
 80120bc:	4629      	mov	r1, r5
 80120be:	f7ee fe41 	bl	8000d44 <__aeabi_fmul>
 80120c2:	496a      	ldr	r1, [pc, #424]	; (801226c <__ieee754_asinf+0x278>)
 80120c4:	f7ee fd34 	bl	8000b30 <__aeabi_fsub>
 80120c8:	4629      	mov	r1, r5
 80120ca:	f7ee fe3b 	bl	8000d44 <__aeabi_fmul>
 80120ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80120d2:	f7ee fd2f 	bl	8000b34 <__addsf3>
 80120d6:	4601      	mov	r1, r0
 80120d8:	4630      	mov	r0, r6
 80120da:	f7ee fee7 	bl	8000eac <__aeabi_fdiv>
 80120de:	4621      	mov	r1, r4
 80120e0:	f7ee fe30 	bl	8000d44 <__aeabi_fmul>
 80120e4:	4601      	mov	r1, r0
 80120e6:	4620      	mov	r0, r4
 80120e8:	e797      	b.n	801201a <__ieee754_asinf+0x26>
 80120ea:	4620      	mov	r0, r4
 80120ec:	f7ff f862 	bl	80111b4 <fabsf>
 80120f0:	4601      	mov	r1, r0
 80120f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80120f6:	f7ee fd1b 	bl	8000b30 <__aeabi_fsub>
 80120fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80120fe:	f7ee fe21 	bl	8000d44 <__aeabi_fmul>
 8012102:	4606      	mov	r6, r0
 8012104:	4950      	ldr	r1, [pc, #320]	; (8012248 <__ieee754_asinf+0x254>)
 8012106:	f7ee fe1d 	bl	8000d44 <__aeabi_fmul>
 801210a:	4950      	ldr	r1, [pc, #320]	; (801224c <__ieee754_asinf+0x258>)
 801210c:	f7ee fd12 	bl	8000b34 <__addsf3>
 8012110:	4631      	mov	r1, r6
 8012112:	f7ee fe17 	bl	8000d44 <__aeabi_fmul>
 8012116:	494e      	ldr	r1, [pc, #312]	; (8012250 <__ieee754_asinf+0x25c>)
 8012118:	f7ee fd0a 	bl	8000b30 <__aeabi_fsub>
 801211c:	4631      	mov	r1, r6
 801211e:	f7ee fe11 	bl	8000d44 <__aeabi_fmul>
 8012122:	494c      	ldr	r1, [pc, #304]	; (8012254 <__ieee754_asinf+0x260>)
 8012124:	f7ee fd06 	bl	8000b34 <__addsf3>
 8012128:	4631      	mov	r1, r6
 801212a:	f7ee fe0b 	bl	8000d44 <__aeabi_fmul>
 801212e:	494a      	ldr	r1, [pc, #296]	; (8012258 <__ieee754_asinf+0x264>)
 8012130:	f7ee fcfe 	bl	8000b30 <__aeabi_fsub>
 8012134:	4631      	mov	r1, r6
 8012136:	f7ee fe05 	bl	8000d44 <__aeabi_fmul>
 801213a:	4948      	ldr	r1, [pc, #288]	; (801225c <__ieee754_asinf+0x268>)
 801213c:	f7ee fcfa 	bl	8000b34 <__addsf3>
 8012140:	4631      	mov	r1, r6
 8012142:	f7ee fdff 	bl	8000d44 <__aeabi_fmul>
 8012146:	4946      	ldr	r1, [pc, #280]	; (8012260 <__ieee754_asinf+0x26c>)
 8012148:	4681      	mov	r9, r0
 801214a:	4630      	mov	r0, r6
 801214c:	f7ee fdfa 	bl	8000d44 <__aeabi_fmul>
 8012150:	4944      	ldr	r1, [pc, #272]	; (8012264 <__ieee754_asinf+0x270>)
 8012152:	f7ee fced 	bl	8000b30 <__aeabi_fsub>
 8012156:	4631      	mov	r1, r6
 8012158:	f7ee fdf4 	bl	8000d44 <__aeabi_fmul>
 801215c:	4942      	ldr	r1, [pc, #264]	; (8012268 <__ieee754_asinf+0x274>)
 801215e:	f7ee fce9 	bl	8000b34 <__addsf3>
 8012162:	4631      	mov	r1, r6
 8012164:	f7ee fdee 	bl	8000d44 <__aeabi_fmul>
 8012168:	4940      	ldr	r1, [pc, #256]	; (801226c <__ieee754_asinf+0x278>)
 801216a:	f7ee fce1 	bl	8000b30 <__aeabi_fsub>
 801216e:	4631      	mov	r1, r6
 8012170:	f7ee fde8 	bl	8000d44 <__aeabi_fmul>
 8012174:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8012178:	f7ee fcdc 	bl	8000b34 <__addsf3>
 801217c:	4682      	mov	sl, r0
 801217e:	4630      	mov	r0, r6
 8012180:	f000 fa60 	bl	8012644 <__ieee754_sqrtf>
 8012184:	4b3a      	ldr	r3, [pc, #232]	; (8012270 <__ieee754_asinf+0x27c>)
 8012186:	4607      	mov	r7, r0
 8012188:	4598      	cmp	r8, r3
 801218a:	dd1a      	ble.n	80121c2 <__ieee754_asinf+0x1ce>
 801218c:	4651      	mov	r1, sl
 801218e:	4648      	mov	r0, r9
 8012190:	f7ee fe8c 	bl	8000eac <__aeabi_fdiv>
 8012194:	4639      	mov	r1, r7
 8012196:	f7ee fdd5 	bl	8000d44 <__aeabi_fmul>
 801219a:	4639      	mov	r1, r7
 801219c:	f7ee fcca 	bl	8000b34 <__addsf3>
 80121a0:	4601      	mov	r1, r0
 80121a2:	f7ee fcc7 	bl	8000b34 <__addsf3>
 80121a6:	4933      	ldr	r1, [pc, #204]	; (8012274 <__ieee754_asinf+0x280>)
 80121a8:	f7ee fcc4 	bl	8000b34 <__addsf3>
 80121ac:	4601      	mov	r1, r0
 80121ae:	4823      	ldr	r0, [pc, #140]	; (801223c <__ieee754_asinf+0x248>)
 80121b0:	f7ee fcbe 	bl	8000b30 <__aeabi_fsub>
 80121b4:	2d00      	cmp	r5, #0
 80121b6:	4604      	mov	r4, r0
 80121b8:	f73f af4a 	bgt.w	8012050 <__ieee754_asinf+0x5c>
 80121bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80121c0:	e735      	b.n	801202e <__ieee754_asinf+0x3a>
 80121c2:	4601      	mov	r1, r0
 80121c4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80121c8:	f7ee fcb4 	bl	8000b34 <__addsf3>
 80121cc:	4651      	mov	r1, sl
 80121ce:	4604      	mov	r4, r0
 80121d0:	4648      	mov	r0, r9
 80121d2:	f7ee fe6b 	bl	8000eac <__aeabi_fdiv>
 80121d6:	4601      	mov	r1, r0
 80121d8:	4620      	mov	r0, r4
 80121da:	f7ee fdb3 	bl	8000d44 <__aeabi_fmul>
 80121de:	f028 080f 	bic.w	r8, r8, #15
 80121e2:	4681      	mov	r9, r0
 80121e4:	4641      	mov	r1, r8
 80121e6:	4640      	mov	r0, r8
 80121e8:	f7ee fdac 	bl	8000d44 <__aeabi_fmul>
 80121ec:	4601      	mov	r1, r0
 80121ee:	4630      	mov	r0, r6
 80121f0:	f7ee fc9e 	bl	8000b30 <__aeabi_fsub>
 80121f4:	4641      	mov	r1, r8
 80121f6:	4604      	mov	r4, r0
 80121f8:	4638      	mov	r0, r7
 80121fa:	f7ee fc9b 	bl	8000b34 <__addsf3>
 80121fe:	4601      	mov	r1, r0
 8012200:	4620      	mov	r0, r4
 8012202:	f7ee fe53 	bl	8000eac <__aeabi_fdiv>
 8012206:	4601      	mov	r1, r0
 8012208:	f7ee fc94 	bl	8000b34 <__addsf3>
 801220c:	4601      	mov	r1, r0
 801220e:	480c      	ldr	r0, [pc, #48]	; (8012240 <__ieee754_asinf+0x24c>)
 8012210:	f7ee fc8e 	bl	8000b30 <__aeabi_fsub>
 8012214:	4601      	mov	r1, r0
 8012216:	4648      	mov	r0, r9
 8012218:	f7ee fc8a 	bl	8000b30 <__aeabi_fsub>
 801221c:	4641      	mov	r1, r8
 801221e:	4604      	mov	r4, r0
 8012220:	4640      	mov	r0, r8
 8012222:	f7ee fc87 	bl	8000b34 <__addsf3>
 8012226:	4601      	mov	r1, r0
 8012228:	4813      	ldr	r0, [pc, #76]	; (8012278 <__ieee754_asinf+0x284>)
 801222a:	f7ee fc81 	bl	8000b30 <__aeabi_fsub>
 801222e:	4601      	mov	r1, r0
 8012230:	4620      	mov	r0, r4
 8012232:	f7ee fc7d 	bl	8000b30 <__aeabi_fsub>
 8012236:	4601      	mov	r1, r0
 8012238:	480f      	ldr	r0, [pc, #60]	; (8012278 <__ieee754_asinf+0x284>)
 801223a:	e7b9      	b.n	80121b0 <__ieee754_asinf+0x1bc>
 801223c:	3fc90fdb 	.word	0x3fc90fdb
 8012240:	b33bbd2e 	.word	0xb33bbd2e
 8012244:	7149f2ca 	.word	0x7149f2ca
 8012248:	3811ef08 	.word	0x3811ef08
 801224c:	3a4f7f04 	.word	0x3a4f7f04
 8012250:	3d241146 	.word	0x3d241146
 8012254:	3e4e0aa8 	.word	0x3e4e0aa8
 8012258:	3ea6b090 	.word	0x3ea6b090
 801225c:	3e2aaaab 	.word	0x3e2aaaab
 8012260:	3d9dc62e 	.word	0x3d9dc62e
 8012264:	3f303361 	.word	0x3f303361
 8012268:	4001572d 	.word	0x4001572d
 801226c:	4019d139 	.word	0x4019d139
 8012270:	3f799999 	.word	0x3f799999
 8012274:	333bbd2e 	.word	0x333bbd2e
 8012278:	3f490fdb 	.word	0x3f490fdb

0801227c <__ieee754_atan2f>:
 801227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801227e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012282:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8012286:	4603      	mov	r3, r0
 8012288:	dc05      	bgt.n	8012296 <__ieee754_atan2f+0x1a>
 801228a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801228e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012292:	4607      	mov	r7, r0
 8012294:	dd04      	ble.n	80122a0 <__ieee754_atan2f+0x24>
 8012296:	4618      	mov	r0, r3
 8012298:	f7ee fc4c 	bl	8000b34 <__addsf3>
 801229c:	4603      	mov	r3, r0
 801229e:	e011      	b.n	80122c4 <__ieee754_atan2f+0x48>
 80122a0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80122a4:	d103      	bne.n	80122ae <__ieee754_atan2f+0x32>
 80122a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122aa:	f7fe be43 	b.w	8010f34 <atanf>
 80122ae:	178c      	asrs	r4, r1, #30
 80122b0:	f004 0402 	and.w	r4, r4, #2
 80122b4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80122b8:	b932      	cbnz	r2, 80122c8 <__ieee754_atan2f+0x4c>
 80122ba:	2c02      	cmp	r4, #2
 80122bc:	d04c      	beq.n	8012358 <__ieee754_atan2f+0xdc>
 80122be:	2c03      	cmp	r4, #3
 80122c0:	d100      	bne.n	80122c4 <__ieee754_atan2f+0x48>
 80122c2:	4b29      	ldr	r3, [pc, #164]	; (8012368 <__ieee754_atan2f+0xec>)
 80122c4:	4618      	mov	r0, r3
 80122c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122c8:	b91e      	cbnz	r6, 80122d2 <__ieee754_atan2f+0x56>
 80122ca:	2f00      	cmp	r7, #0
 80122cc:	da4a      	bge.n	8012364 <__ieee754_atan2f+0xe8>
 80122ce:	4b27      	ldr	r3, [pc, #156]	; (801236c <__ieee754_atan2f+0xf0>)
 80122d0:	e7f8      	b.n	80122c4 <__ieee754_atan2f+0x48>
 80122d2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80122d6:	d10e      	bne.n	80122f6 <__ieee754_atan2f+0x7a>
 80122d8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80122dc:	f104 34ff 	add.w	r4, r4, #4294967295
 80122e0:	d105      	bne.n	80122ee <__ieee754_atan2f+0x72>
 80122e2:	2c02      	cmp	r4, #2
 80122e4:	d83a      	bhi.n	801235c <__ieee754_atan2f+0xe0>
 80122e6:	4b22      	ldr	r3, [pc, #136]	; (8012370 <__ieee754_atan2f+0xf4>)
 80122e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80122ec:	e7ea      	b.n	80122c4 <__ieee754_atan2f+0x48>
 80122ee:	2c02      	cmp	r4, #2
 80122f0:	d836      	bhi.n	8012360 <__ieee754_atan2f+0xe4>
 80122f2:	4b20      	ldr	r3, [pc, #128]	; (8012374 <__ieee754_atan2f+0xf8>)
 80122f4:	e7f8      	b.n	80122e8 <__ieee754_atan2f+0x6c>
 80122f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80122fa:	d0e6      	beq.n	80122ca <__ieee754_atan2f+0x4e>
 80122fc:	1b92      	subs	r2, r2, r6
 80122fe:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8012302:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8012306:	da17      	bge.n	8012338 <__ieee754_atan2f+0xbc>
 8012308:	2900      	cmp	r1, #0
 801230a:	da01      	bge.n	8012310 <__ieee754_atan2f+0x94>
 801230c:	303c      	adds	r0, #60	; 0x3c
 801230e:	db15      	blt.n	801233c <__ieee754_atan2f+0xc0>
 8012310:	4618      	mov	r0, r3
 8012312:	f7ee fdcb 	bl	8000eac <__aeabi_fdiv>
 8012316:	f7fe ff4d 	bl	80111b4 <fabsf>
 801231a:	f7fe fe0b 	bl	8010f34 <atanf>
 801231e:	4603      	mov	r3, r0
 8012320:	2c01      	cmp	r4, #1
 8012322:	d00d      	beq.n	8012340 <__ieee754_atan2f+0xc4>
 8012324:	2c02      	cmp	r4, #2
 8012326:	d00e      	beq.n	8012346 <__ieee754_atan2f+0xca>
 8012328:	2c00      	cmp	r4, #0
 801232a:	d0cb      	beq.n	80122c4 <__ieee754_atan2f+0x48>
 801232c:	4912      	ldr	r1, [pc, #72]	; (8012378 <__ieee754_atan2f+0xfc>)
 801232e:	4618      	mov	r0, r3
 8012330:	f7ee fc00 	bl	8000b34 <__addsf3>
 8012334:	4911      	ldr	r1, [pc, #68]	; (801237c <__ieee754_atan2f+0x100>)
 8012336:	e00c      	b.n	8012352 <__ieee754_atan2f+0xd6>
 8012338:	4b11      	ldr	r3, [pc, #68]	; (8012380 <__ieee754_atan2f+0x104>)
 801233a:	e7f1      	b.n	8012320 <__ieee754_atan2f+0xa4>
 801233c:	2300      	movs	r3, #0
 801233e:	e7ef      	b.n	8012320 <__ieee754_atan2f+0xa4>
 8012340:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012344:	e7be      	b.n	80122c4 <__ieee754_atan2f+0x48>
 8012346:	490c      	ldr	r1, [pc, #48]	; (8012378 <__ieee754_atan2f+0xfc>)
 8012348:	4618      	mov	r0, r3
 801234a:	f7ee fbf3 	bl	8000b34 <__addsf3>
 801234e:	4601      	mov	r1, r0
 8012350:	480a      	ldr	r0, [pc, #40]	; (801237c <__ieee754_atan2f+0x100>)
 8012352:	f7ee fbed 	bl	8000b30 <__aeabi_fsub>
 8012356:	e7a1      	b.n	801229c <__ieee754_atan2f+0x20>
 8012358:	4b08      	ldr	r3, [pc, #32]	; (801237c <__ieee754_atan2f+0x100>)
 801235a:	e7b3      	b.n	80122c4 <__ieee754_atan2f+0x48>
 801235c:	4b09      	ldr	r3, [pc, #36]	; (8012384 <__ieee754_atan2f+0x108>)
 801235e:	e7b1      	b.n	80122c4 <__ieee754_atan2f+0x48>
 8012360:	2300      	movs	r3, #0
 8012362:	e7af      	b.n	80122c4 <__ieee754_atan2f+0x48>
 8012364:	4b06      	ldr	r3, [pc, #24]	; (8012380 <__ieee754_atan2f+0x104>)
 8012366:	e7ad      	b.n	80122c4 <__ieee754_atan2f+0x48>
 8012368:	c0490fdb 	.word	0xc0490fdb
 801236c:	bfc90fdb 	.word	0xbfc90fdb
 8012370:	080144b0 	.word	0x080144b0
 8012374:	080144bc 	.word	0x080144bc
 8012378:	33bbbd2e 	.word	0x33bbbd2e
 801237c:	40490fdb 	.word	0x40490fdb
 8012380:	3fc90fdb 	.word	0x3fc90fdb
 8012384:	3f490fdb 	.word	0x3f490fdb

08012388 <__ieee754_rem_pio2f>:
 8012388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238c:	4aa0      	ldr	r2, [pc, #640]	; (8012610 <__ieee754_rem_pio2f+0x288>)
 801238e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8012392:	4296      	cmp	r6, r2
 8012394:	460c      	mov	r4, r1
 8012396:	4682      	mov	sl, r0
 8012398:	b087      	sub	sp, #28
 801239a:	dc04      	bgt.n	80123a6 <__ieee754_rem_pio2f+0x1e>
 801239c:	2300      	movs	r3, #0
 801239e:	6008      	str	r0, [r1, #0]
 80123a0:	604b      	str	r3, [r1, #4]
 80123a2:	2500      	movs	r5, #0
 80123a4:	e01a      	b.n	80123dc <__ieee754_rem_pio2f+0x54>
 80123a6:	4a9b      	ldr	r2, [pc, #620]	; (8012614 <__ieee754_rem_pio2f+0x28c>)
 80123a8:	4296      	cmp	r6, r2
 80123aa:	dc4b      	bgt.n	8012444 <__ieee754_rem_pio2f+0xbc>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	499a      	ldr	r1, [pc, #616]	; (8012618 <__ieee754_rem_pio2f+0x290>)
 80123b0:	4f9a      	ldr	r7, [pc, #616]	; (801261c <__ieee754_rem_pio2f+0x294>)
 80123b2:	f026 060f 	bic.w	r6, r6, #15
 80123b6:	dd23      	ble.n	8012400 <__ieee754_rem_pio2f+0x78>
 80123b8:	f7ee fbba 	bl	8000b30 <__aeabi_fsub>
 80123bc:	42be      	cmp	r6, r7
 80123be:	4605      	mov	r5, r0
 80123c0:	d010      	beq.n	80123e4 <__ieee754_rem_pio2f+0x5c>
 80123c2:	4997      	ldr	r1, [pc, #604]	; (8012620 <__ieee754_rem_pio2f+0x298>)
 80123c4:	f7ee fbb4 	bl	8000b30 <__aeabi_fsub>
 80123c8:	4601      	mov	r1, r0
 80123ca:	6020      	str	r0, [r4, #0]
 80123cc:	4628      	mov	r0, r5
 80123ce:	f7ee fbaf 	bl	8000b30 <__aeabi_fsub>
 80123d2:	4993      	ldr	r1, [pc, #588]	; (8012620 <__ieee754_rem_pio2f+0x298>)
 80123d4:	f7ee fbac 	bl	8000b30 <__aeabi_fsub>
 80123d8:	2501      	movs	r5, #1
 80123da:	6060      	str	r0, [r4, #4]
 80123dc:	4628      	mov	r0, r5
 80123de:	b007      	add	sp, #28
 80123e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e4:	498f      	ldr	r1, [pc, #572]	; (8012624 <__ieee754_rem_pio2f+0x29c>)
 80123e6:	f7ee fba3 	bl	8000b30 <__aeabi_fsub>
 80123ea:	498f      	ldr	r1, [pc, #572]	; (8012628 <__ieee754_rem_pio2f+0x2a0>)
 80123ec:	4605      	mov	r5, r0
 80123ee:	f7ee fb9f 	bl	8000b30 <__aeabi_fsub>
 80123f2:	4601      	mov	r1, r0
 80123f4:	6020      	str	r0, [r4, #0]
 80123f6:	4628      	mov	r0, r5
 80123f8:	f7ee fb9a 	bl	8000b30 <__aeabi_fsub>
 80123fc:	498a      	ldr	r1, [pc, #552]	; (8012628 <__ieee754_rem_pio2f+0x2a0>)
 80123fe:	e7e9      	b.n	80123d4 <__ieee754_rem_pio2f+0x4c>
 8012400:	f7ee fb98 	bl	8000b34 <__addsf3>
 8012404:	42be      	cmp	r6, r7
 8012406:	4605      	mov	r5, r0
 8012408:	d00e      	beq.n	8012428 <__ieee754_rem_pio2f+0xa0>
 801240a:	4985      	ldr	r1, [pc, #532]	; (8012620 <__ieee754_rem_pio2f+0x298>)
 801240c:	f7ee fb92 	bl	8000b34 <__addsf3>
 8012410:	4601      	mov	r1, r0
 8012412:	6020      	str	r0, [r4, #0]
 8012414:	4628      	mov	r0, r5
 8012416:	f7ee fb8b 	bl	8000b30 <__aeabi_fsub>
 801241a:	4981      	ldr	r1, [pc, #516]	; (8012620 <__ieee754_rem_pio2f+0x298>)
 801241c:	f7ee fb8a 	bl	8000b34 <__addsf3>
 8012420:	f04f 35ff 	mov.w	r5, #4294967295
 8012424:	6060      	str	r0, [r4, #4]
 8012426:	e7d9      	b.n	80123dc <__ieee754_rem_pio2f+0x54>
 8012428:	497e      	ldr	r1, [pc, #504]	; (8012624 <__ieee754_rem_pio2f+0x29c>)
 801242a:	f7ee fb83 	bl	8000b34 <__addsf3>
 801242e:	497e      	ldr	r1, [pc, #504]	; (8012628 <__ieee754_rem_pio2f+0x2a0>)
 8012430:	4605      	mov	r5, r0
 8012432:	f7ee fb7f 	bl	8000b34 <__addsf3>
 8012436:	4601      	mov	r1, r0
 8012438:	6020      	str	r0, [r4, #0]
 801243a:	4628      	mov	r0, r5
 801243c:	f7ee fb78 	bl	8000b30 <__aeabi_fsub>
 8012440:	4979      	ldr	r1, [pc, #484]	; (8012628 <__ieee754_rem_pio2f+0x2a0>)
 8012442:	e7eb      	b.n	801241c <__ieee754_rem_pio2f+0x94>
 8012444:	4a79      	ldr	r2, [pc, #484]	; (801262c <__ieee754_rem_pio2f+0x2a4>)
 8012446:	4296      	cmp	r6, r2
 8012448:	f300 8091 	bgt.w	801256e <__ieee754_rem_pio2f+0x1e6>
 801244c:	f7fe feb2 	bl	80111b4 <fabsf>
 8012450:	4977      	ldr	r1, [pc, #476]	; (8012630 <__ieee754_rem_pio2f+0x2a8>)
 8012452:	4607      	mov	r7, r0
 8012454:	f7ee fc76 	bl	8000d44 <__aeabi_fmul>
 8012458:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801245c:	f7ee fb6a 	bl	8000b34 <__addsf3>
 8012460:	f7ee fe4c 	bl	80010fc <__aeabi_f2iz>
 8012464:	4605      	mov	r5, r0
 8012466:	f7ee fc19 	bl	8000c9c <__aeabi_i2f>
 801246a:	496b      	ldr	r1, [pc, #428]	; (8012618 <__ieee754_rem_pio2f+0x290>)
 801246c:	4681      	mov	r9, r0
 801246e:	f7ee fc69 	bl	8000d44 <__aeabi_fmul>
 8012472:	4601      	mov	r1, r0
 8012474:	4638      	mov	r0, r7
 8012476:	f7ee fb5b 	bl	8000b30 <__aeabi_fsub>
 801247a:	4969      	ldr	r1, [pc, #420]	; (8012620 <__ieee754_rem_pio2f+0x298>)
 801247c:	4680      	mov	r8, r0
 801247e:	4648      	mov	r0, r9
 8012480:	f7ee fc60 	bl	8000d44 <__aeabi_fmul>
 8012484:	2d1f      	cmp	r5, #31
 8012486:	4607      	mov	r7, r0
 8012488:	dc0c      	bgt.n	80124a4 <__ieee754_rem_pio2f+0x11c>
 801248a:	4a6a      	ldr	r2, [pc, #424]	; (8012634 <__ieee754_rem_pio2f+0x2ac>)
 801248c:	1e69      	subs	r1, r5, #1
 801248e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012492:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8012496:	4293      	cmp	r3, r2
 8012498:	d004      	beq.n	80124a4 <__ieee754_rem_pio2f+0x11c>
 801249a:	4639      	mov	r1, r7
 801249c:	4640      	mov	r0, r8
 801249e:	f7ee fb47 	bl	8000b30 <__aeabi_fsub>
 80124a2:	e00b      	b.n	80124bc <__ieee754_rem_pio2f+0x134>
 80124a4:	4639      	mov	r1, r7
 80124a6:	4640      	mov	r0, r8
 80124a8:	f7ee fb42 	bl	8000b30 <__aeabi_fsub>
 80124ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80124b0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80124b4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80124b8:	2e08      	cmp	r6, #8
 80124ba:	dc01      	bgt.n	80124c0 <__ieee754_rem_pio2f+0x138>
 80124bc:	6020      	str	r0, [r4, #0]
 80124be:	e026      	b.n	801250e <__ieee754_rem_pio2f+0x186>
 80124c0:	4958      	ldr	r1, [pc, #352]	; (8012624 <__ieee754_rem_pio2f+0x29c>)
 80124c2:	4648      	mov	r0, r9
 80124c4:	f7ee fc3e 	bl	8000d44 <__aeabi_fmul>
 80124c8:	4607      	mov	r7, r0
 80124ca:	4601      	mov	r1, r0
 80124cc:	4640      	mov	r0, r8
 80124ce:	f7ee fb2f 	bl	8000b30 <__aeabi_fsub>
 80124d2:	4601      	mov	r1, r0
 80124d4:	4606      	mov	r6, r0
 80124d6:	4640      	mov	r0, r8
 80124d8:	f7ee fb2a 	bl	8000b30 <__aeabi_fsub>
 80124dc:	4639      	mov	r1, r7
 80124de:	f7ee fb27 	bl	8000b30 <__aeabi_fsub>
 80124e2:	4607      	mov	r7, r0
 80124e4:	4950      	ldr	r1, [pc, #320]	; (8012628 <__ieee754_rem_pio2f+0x2a0>)
 80124e6:	4648      	mov	r0, r9
 80124e8:	f7ee fc2c 	bl	8000d44 <__aeabi_fmul>
 80124ec:	4639      	mov	r1, r7
 80124ee:	f7ee fb1f 	bl	8000b30 <__aeabi_fsub>
 80124f2:	4601      	mov	r1, r0
 80124f4:	4607      	mov	r7, r0
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7ee fb1a 	bl	8000b30 <__aeabi_fsub>
 80124fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012500:	ebab 0b03 	sub.w	fp, fp, r3
 8012504:	f1bb 0f19 	cmp.w	fp, #25
 8012508:	dc16      	bgt.n	8012538 <__ieee754_rem_pio2f+0x1b0>
 801250a:	46b0      	mov	r8, r6
 801250c:	6020      	str	r0, [r4, #0]
 801250e:	6826      	ldr	r6, [r4, #0]
 8012510:	4640      	mov	r0, r8
 8012512:	4631      	mov	r1, r6
 8012514:	f7ee fb0c 	bl	8000b30 <__aeabi_fsub>
 8012518:	4639      	mov	r1, r7
 801251a:	f7ee fb09 	bl	8000b30 <__aeabi_fsub>
 801251e:	f1ba 0f00 	cmp.w	sl, #0
 8012522:	6060      	str	r0, [r4, #4]
 8012524:	f6bf af5a 	bge.w	80123dc <__ieee754_rem_pio2f+0x54>
 8012528:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801252c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012530:	6026      	str	r6, [r4, #0]
 8012532:	6060      	str	r0, [r4, #4]
 8012534:	426d      	negs	r5, r5
 8012536:	e751      	b.n	80123dc <__ieee754_rem_pio2f+0x54>
 8012538:	493f      	ldr	r1, [pc, #252]	; (8012638 <__ieee754_rem_pio2f+0x2b0>)
 801253a:	4648      	mov	r0, r9
 801253c:	f7ee fc02 	bl	8000d44 <__aeabi_fmul>
 8012540:	4607      	mov	r7, r0
 8012542:	4601      	mov	r1, r0
 8012544:	4630      	mov	r0, r6
 8012546:	f7ee faf3 	bl	8000b30 <__aeabi_fsub>
 801254a:	4601      	mov	r1, r0
 801254c:	4680      	mov	r8, r0
 801254e:	4630      	mov	r0, r6
 8012550:	f7ee faee 	bl	8000b30 <__aeabi_fsub>
 8012554:	4639      	mov	r1, r7
 8012556:	f7ee faeb 	bl	8000b30 <__aeabi_fsub>
 801255a:	4606      	mov	r6, r0
 801255c:	4937      	ldr	r1, [pc, #220]	; (801263c <__ieee754_rem_pio2f+0x2b4>)
 801255e:	4648      	mov	r0, r9
 8012560:	f7ee fbf0 	bl	8000d44 <__aeabi_fmul>
 8012564:	4631      	mov	r1, r6
 8012566:	f7ee fae3 	bl	8000b30 <__aeabi_fsub>
 801256a:	4607      	mov	r7, r0
 801256c:	e795      	b.n	801249a <__ieee754_rem_pio2f+0x112>
 801256e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8012572:	db05      	blt.n	8012580 <__ieee754_rem_pio2f+0x1f8>
 8012574:	4601      	mov	r1, r0
 8012576:	f7ee fadb 	bl	8000b30 <__aeabi_fsub>
 801257a:	6060      	str	r0, [r4, #4]
 801257c:	6020      	str	r0, [r4, #0]
 801257e:	e710      	b.n	80123a2 <__ieee754_rem_pio2f+0x1a>
 8012580:	15f7      	asrs	r7, r6, #23
 8012582:	3f86      	subs	r7, #134	; 0x86
 8012584:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8012588:	4630      	mov	r0, r6
 801258a:	f7ee fdb7 	bl	80010fc <__aeabi_f2iz>
 801258e:	f7ee fb85 	bl	8000c9c <__aeabi_i2f>
 8012592:	4601      	mov	r1, r0
 8012594:	9003      	str	r0, [sp, #12]
 8012596:	4630      	mov	r0, r6
 8012598:	f7ee faca 	bl	8000b30 <__aeabi_fsub>
 801259c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80125a0:	f7ee fbd0 	bl	8000d44 <__aeabi_fmul>
 80125a4:	4606      	mov	r6, r0
 80125a6:	f7ee fda9 	bl	80010fc <__aeabi_f2iz>
 80125aa:	f7ee fb77 	bl	8000c9c <__aeabi_i2f>
 80125ae:	4601      	mov	r1, r0
 80125b0:	9004      	str	r0, [sp, #16]
 80125b2:	4605      	mov	r5, r0
 80125b4:	4630      	mov	r0, r6
 80125b6:	f7ee fabb 	bl	8000b30 <__aeabi_fsub>
 80125ba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80125be:	f7ee fbc1 	bl	8000d44 <__aeabi_fmul>
 80125c2:	2100      	movs	r1, #0
 80125c4:	9005      	str	r0, [sp, #20]
 80125c6:	f7ee fd51 	bl	800106c <__aeabi_fcmpeq>
 80125ca:	b1f0      	cbz	r0, 801260a <__ieee754_rem_pio2f+0x282>
 80125cc:	2100      	movs	r1, #0
 80125ce:	4628      	mov	r0, r5
 80125d0:	f7ee fd4c 	bl	800106c <__aeabi_fcmpeq>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	bf14      	ite	ne
 80125d8:	2301      	movne	r3, #1
 80125da:	2302      	moveq	r3, #2
 80125dc:	4a18      	ldr	r2, [pc, #96]	; (8012640 <__ieee754_rem_pio2f+0x2b8>)
 80125de:	4621      	mov	r1, r4
 80125e0:	9201      	str	r2, [sp, #4]
 80125e2:	2202      	movs	r2, #2
 80125e4:	a803      	add	r0, sp, #12
 80125e6:	9200      	str	r2, [sp, #0]
 80125e8:	463a      	mov	r2, r7
 80125ea:	f000 f8fd 	bl	80127e8 <__kernel_rem_pio2f>
 80125ee:	f1ba 0f00 	cmp.w	sl, #0
 80125f2:	4605      	mov	r5, r0
 80125f4:	f6bf aef2 	bge.w	80123dc <__ieee754_rem_pio2f+0x54>
 80125f8:	6823      	ldr	r3, [r4, #0]
 80125fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80125fe:	6023      	str	r3, [r4, #0]
 8012600:	6863      	ldr	r3, [r4, #4]
 8012602:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012606:	6063      	str	r3, [r4, #4]
 8012608:	e794      	b.n	8012534 <__ieee754_rem_pio2f+0x1ac>
 801260a:	2303      	movs	r3, #3
 801260c:	e7e6      	b.n	80125dc <__ieee754_rem_pio2f+0x254>
 801260e:	bf00      	nop
 8012610:	3f490fd8 	.word	0x3f490fd8
 8012614:	4016cbe3 	.word	0x4016cbe3
 8012618:	3fc90f80 	.word	0x3fc90f80
 801261c:	3fc90fd0 	.word	0x3fc90fd0
 8012620:	37354443 	.word	0x37354443
 8012624:	37354400 	.word	0x37354400
 8012628:	2e85a308 	.word	0x2e85a308
 801262c:	43490f80 	.word	0x43490f80
 8012630:	3f22f984 	.word	0x3f22f984
 8012634:	080144c8 	.word	0x080144c8
 8012638:	2e85a300 	.word	0x2e85a300
 801263c:	248d3132 	.word	0x248d3132
 8012640:	08014548 	.word	0x08014548

08012644 <__ieee754_sqrtf>:
 8012644:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8012648:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801264c:	b570      	push	{r4, r5, r6, lr}
 801264e:	4603      	mov	r3, r0
 8012650:	4604      	mov	r4, r0
 8012652:	d309      	bcc.n	8012668 <__ieee754_sqrtf+0x24>
 8012654:	4601      	mov	r1, r0
 8012656:	f7ee fb75 	bl	8000d44 <__aeabi_fmul>
 801265a:	4601      	mov	r1, r0
 801265c:	4620      	mov	r0, r4
 801265e:	f7ee fa69 	bl	8000b34 <__addsf3>
 8012662:	4604      	mov	r4, r0
 8012664:	4620      	mov	r0, r4
 8012666:	bd70      	pop	{r4, r5, r6, pc}
 8012668:	2a00      	cmp	r2, #0
 801266a:	d0fb      	beq.n	8012664 <__ieee754_sqrtf+0x20>
 801266c:	2800      	cmp	r0, #0
 801266e:	da06      	bge.n	801267e <__ieee754_sqrtf+0x3a>
 8012670:	4601      	mov	r1, r0
 8012672:	f7ee fa5d 	bl	8000b30 <__aeabi_fsub>
 8012676:	4601      	mov	r1, r0
 8012678:	f7ee fc18 	bl	8000eac <__aeabi_fdiv>
 801267c:	e7f1      	b.n	8012662 <__ieee754_sqrtf+0x1e>
 801267e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8012682:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8012686:	d029      	beq.n	80126dc <__ieee754_sqrtf+0x98>
 8012688:	f3c3 0216 	ubfx	r2, r3, #0, #23
 801268c:	07cb      	lsls	r3, r1, #31
 801268e:	f04f 0300 	mov.w	r3, #0
 8012692:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8012696:	f04f 0419 	mov.w	r4, #25
 801269a:	461e      	mov	r6, r3
 801269c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80126a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80126a4:	bf58      	it	pl
 80126a6:	0052      	lslpl	r2, r2, #1
 80126a8:	1040      	asrs	r0, r0, #1
 80126aa:	0052      	lsls	r2, r2, #1
 80126ac:	1875      	adds	r5, r6, r1
 80126ae:	4295      	cmp	r5, r2
 80126b0:	bfde      	ittt	le
 80126b2:	186e      	addle	r6, r5, r1
 80126b4:	1b52      	suble	r2, r2, r5
 80126b6:	185b      	addle	r3, r3, r1
 80126b8:	3c01      	subs	r4, #1
 80126ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80126be:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80126c2:	d1f3      	bne.n	80126ac <__ieee754_sqrtf+0x68>
 80126c4:	b112      	cbz	r2, 80126cc <__ieee754_sqrtf+0x88>
 80126c6:	3301      	adds	r3, #1
 80126c8:	f023 0301 	bic.w	r3, r3, #1
 80126cc:	105c      	asrs	r4, r3, #1
 80126ce:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80126d2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80126d6:	e7c5      	b.n	8012664 <__ieee754_sqrtf+0x20>
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	3201      	adds	r2, #1
 80126dc:	0218      	lsls	r0, r3, #8
 80126de:	d5fb      	bpl.n	80126d8 <__ieee754_sqrtf+0x94>
 80126e0:	3a01      	subs	r2, #1
 80126e2:	1a89      	subs	r1, r1, r2
 80126e4:	e7d0      	b.n	8012688 <__ieee754_sqrtf+0x44>
	...

080126e8 <__kernel_cosf>:
 80126e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ec:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80126f0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80126f4:	4606      	mov	r6, r0
 80126f6:	4688      	mov	r8, r1
 80126f8:	da03      	bge.n	8012702 <__kernel_cosf+0x1a>
 80126fa:	f7ee fcff 	bl	80010fc <__aeabi_f2iz>
 80126fe:	2800      	cmp	r0, #0
 8012700:	d05c      	beq.n	80127bc <__kernel_cosf+0xd4>
 8012702:	4631      	mov	r1, r6
 8012704:	4630      	mov	r0, r6
 8012706:	f7ee fb1d 	bl	8000d44 <__aeabi_fmul>
 801270a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801270e:	4605      	mov	r5, r0
 8012710:	f7ee fb18 	bl	8000d44 <__aeabi_fmul>
 8012714:	492b      	ldr	r1, [pc, #172]	; (80127c4 <__kernel_cosf+0xdc>)
 8012716:	4607      	mov	r7, r0
 8012718:	4628      	mov	r0, r5
 801271a:	f7ee fb13 	bl	8000d44 <__aeabi_fmul>
 801271e:	492a      	ldr	r1, [pc, #168]	; (80127c8 <__kernel_cosf+0xe0>)
 8012720:	f7ee fa08 	bl	8000b34 <__addsf3>
 8012724:	4629      	mov	r1, r5
 8012726:	f7ee fb0d 	bl	8000d44 <__aeabi_fmul>
 801272a:	4928      	ldr	r1, [pc, #160]	; (80127cc <__kernel_cosf+0xe4>)
 801272c:	f7ee fa00 	bl	8000b30 <__aeabi_fsub>
 8012730:	4629      	mov	r1, r5
 8012732:	f7ee fb07 	bl	8000d44 <__aeabi_fmul>
 8012736:	4926      	ldr	r1, [pc, #152]	; (80127d0 <__kernel_cosf+0xe8>)
 8012738:	f7ee f9fc 	bl	8000b34 <__addsf3>
 801273c:	4629      	mov	r1, r5
 801273e:	f7ee fb01 	bl	8000d44 <__aeabi_fmul>
 8012742:	4924      	ldr	r1, [pc, #144]	; (80127d4 <__kernel_cosf+0xec>)
 8012744:	f7ee f9f4 	bl	8000b30 <__aeabi_fsub>
 8012748:	4629      	mov	r1, r5
 801274a:	f7ee fafb 	bl	8000d44 <__aeabi_fmul>
 801274e:	4922      	ldr	r1, [pc, #136]	; (80127d8 <__kernel_cosf+0xf0>)
 8012750:	f7ee f9f0 	bl	8000b34 <__addsf3>
 8012754:	4629      	mov	r1, r5
 8012756:	f7ee faf5 	bl	8000d44 <__aeabi_fmul>
 801275a:	4629      	mov	r1, r5
 801275c:	f7ee faf2 	bl	8000d44 <__aeabi_fmul>
 8012760:	4641      	mov	r1, r8
 8012762:	4605      	mov	r5, r0
 8012764:	4630      	mov	r0, r6
 8012766:	f7ee faed 	bl	8000d44 <__aeabi_fmul>
 801276a:	4601      	mov	r1, r0
 801276c:	4628      	mov	r0, r5
 801276e:	f7ee f9df 	bl	8000b30 <__aeabi_fsub>
 8012772:	4b1a      	ldr	r3, [pc, #104]	; (80127dc <__kernel_cosf+0xf4>)
 8012774:	4605      	mov	r5, r0
 8012776:	429c      	cmp	r4, r3
 8012778:	dc0a      	bgt.n	8012790 <__kernel_cosf+0xa8>
 801277a:	4601      	mov	r1, r0
 801277c:	4638      	mov	r0, r7
 801277e:	f7ee f9d7 	bl	8000b30 <__aeabi_fsub>
 8012782:	4601      	mov	r1, r0
 8012784:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012788:	f7ee f9d2 	bl	8000b30 <__aeabi_fsub>
 801278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012790:	4b13      	ldr	r3, [pc, #76]	; (80127e0 <__kernel_cosf+0xf8>)
 8012792:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012796:	429c      	cmp	r4, r3
 8012798:	bfcc      	ite	gt
 801279a:	4c12      	ldrgt	r4, [pc, #72]	; (80127e4 <__kernel_cosf+0xfc>)
 801279c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80127a0:	4621      	mov	r1, r4
 80127a2:	f7ee f9c5 	bl	8000b30 <__aeabi_fsub>
 80127a6:	4621      	mov	r1, r4
 80127a8:	4606      	mov	r6, r0
 80127aa:	4638      	mov	r0, r7
 80127ac:	f7ee f9c0 	bl	8000b30 <__aeabi_fsub>
 80127b0:	4629      	mov	r1, r5
 80127b2:	f7ee f9bd 	bl	8000b30 <__aeabi_fsub>
 80127b6:	4601      	mov	r1, r0
 80127b8:	4630      	mov	r0, r6
 80127ba:	e7e5      	b.n	8012788 <__kernel_cosf+0xa0>
 80127bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80127c0:	e7e4      	b.n	801278c <__kernel_cosf+0xa4>
 80127c2:	bf00      	nop
 80127c4:	ad47d74e 	.word	0xad47d74e
 80127c8:	310f74f6 	.word	0x310f74f6
 80127cc:	3493f27c 	.word	0x3493f27c
 80127d0:	37d00d01 	.word	0x37d00d01
 80127d4:	3ab60b61 	.word	0x3ab60b61
 80127d8:	3d2aaaab 	.word	0x3d2aaaab
 80127dc:	3e999999 	.word	0x3e999999
 80127e0:	3f480000 	.word	0x3f480000
 80127e4:	3e900000 	.word	0x3e900000

080127e8 <__kernel_rem_pio2f>:
 80127e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	b0db      	sub	sp, #364	; 0x16c
 80127ee:	9202      	str	r2, [sp, #8]
 80127f0:	9304      	str	r3, [sp, #16]
 80127f2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80127f4:	4bc5      	ldr	r3, [pc, #788]	; (8012b0c <__kernel_rem_pio2f+0x324>)
 80127f6:	9005      	str	r0, [sp, #20]
 80127f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127fc:	9100      	str	r1, [sp, #0]
 80127fe:	9301      	str	r3, [sp, #4]
 8012800:	9b04      	ldr	r3, [sp, #16]
 8012802:	3b01      	subs	r3, #1
 8012804:	9303      	str	r3, [sp, #12]
 8012806:	9b02      	ldr	r3, [sp, #8]
 8012808:	1d1a      	adds	r2, r3, #4
 801280a:	f2c0 809b 	blt.w	8012944 <__kernel_rem_pio2f+0x15c>
 801280e:	1edc      	subs	r4, r3, #3
 8012810:	bf48      	it	mi
 8012812:	1d1c      	addmi	r4, r3, #4
 8012814:	10e4      	asrs	r4, r4, #3
 8012816:	2500      	movs	r5, #0
 8012818:	f04f 0a00 	mov.w	sl, #0
 801281c:	1c67      	adds	r7, r4, #1
 801281e:	00fb      	lsls	r3, r7, #3
 8012820:	9306      	str	r3, [sp, #24]
 8012822:	9b02      	ldr	r3, [sp, #8]
 8012824:	9a03      	ldr	r2, [sp, #12]
 8012826:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 801282a:	9b01      	ldr	r3, [sp, #4]
 801282c:	1aa6      	subs	r6, r4, r2
 801282e:	eb03 0802 	add.w	r8, r3, r2
 8012832:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8012834:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8012838:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 801283c:	4545      	cmp	r5, r8
 801283e:	f340 8083 	ble.w	8012948 <__kernel_rem_pio2f+0x160>
 8012842:	f04f 0800 	mov.w	r8, #0
 8012846:	f04f 0b00 	mov.w	fp, #0
 801284a:	9b04      	ldr	r3, [sp, #16]
 801284c:	aa1e      	add	r2, sp, #120	; 0x78
 801284e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012852:	ab46      	add	r3, sp, #280	; 0x118
 8012854:	9a01      	ldr	r2, [sp, #4]
 8012856:	4590      	cmp	r8, r2
 8012858:	f340 809c 	ble.w	8012994 <__kernel_rem_pio2f+0x1ac>
 801285c:	4613      	mov	r3, r2
 801285e:	aa0a      	add	r2, sp, #40	; 0x28
 8012860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012864:	9308      	str	r3, [sp, #32]
 8012866:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8012868:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801286c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012870:	9307      	str	r3, [sp, #28]
 8012872:	ad0a      	add	r5, sp, #40	; 0x28
 8012874:	462e      	mov	r6, r5
 8012876:	46c3      	mov	fp, r8
 8012878:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 801287c:	ab5a      	add	r3, sp, #360	; 0x168
 801287e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8012882:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8012886:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 801288a:	f1bb 0f00 	cmp.w	fp, #0
 801288e:	f300 8086 	bgt.w	801299e <__kernel_rem_pio2f+0x1b6>
 8012892:	4639      	mov	r1, r7
 8012894:	4620      	mov	r0, r4
 8012896:	f000 fc3b 	bl	8013110 <scalbnf>
 801289a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 801289e:	4604      	mov	r4, r0
 80128a0:	f7ee fa50 	bl	8000d44 <__aeabi_fmul>
 80128a4:	f000 fbee 	bl	8013084 <floorf>
 80128a8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80128ac:	f7ee fa4a 	bl	8000d44 <__aeabi_fmul>
 80128b0:	4601      	mov	r1, r0
 80128b2:	4620      	mov	r0, r4
 80128b4:	f7ee f93c 	bl	8000b30 <__aeabi_fsub>
 80128b8:	4604      	mov	r4, r0
 80128ba:	f7ee fc1f 	bl	80010fc <__aeabi_f2iz>
 80128be:	4606      	mov	r6, r0
 80128c0:	f7ee f9ec 	bl	8000c9c <__aeabi_i2f>
 80128c4:	4601      	mov	r1, r0
 80128c6:	4620      	mov	r0, r4
 80128c8:	f7ee f932 	bl	8000b30 <__aeabi_fsub>
 80128cc:	2f00      	cmp	r7, #0
 80128ce:	4681      	mov	r9, r0
 80128d0:	f340 8084 	ble.w	80129dc <__kernel_rem_pio2f+0x1f4>
 80128d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80128d8:	ab0a      	add	r3, sp, #40	; 0x28
 80128da:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80128de:	f1c7 0108 	rsb	r1, r7, #8
 80128e2:	fa44 f301 	asr.w	r3, r4, r1
 80128e6:	441e      	add	r6, r3
 80128e8:	408b      	lsls	r3, r1
 80128ea:	1ae4      	subs	r4, r4, r3
 80128ec:	f1c7 0007 	rsb	r0, r7, #7
 80128f0:	ab0a      	add	r3, sp, #40	; 0x28
 80128f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80128f6:	4104      	asrs	r4, r0
 80128f8:	2c00      	cmp	r4, #0
 80128fa:	dd7e      	ble.n	80129fa <__kernel_rem_pio2f+0x212>
 80128fc:	2200      	movs	r2, #0
 80128fe:	4692      	mov	sl, r2
 8012900:	3601      	adds	r6, #1
 8012902:	4590      	cmp	r8, r2
 8012904:	f300 80b0 	bgt.w	8012a68 <__kernel_rem_pio2f+0x280>
 8012908:	2f00      	cmp	r7, #0
 801290a:	dd05      	ble.n	8012918 <__kernel_rem_pio2f+0x130>
 801290c:	2f01      	cmp	r7, #1
 801290e:	f000 80bd 	beq.w	8012a8c <__kernel_rem_pio2f+0x2a4>
 8012912:	2f02      	cmp	r7, #2
 8012914:	f000 80c5 	beq.w	8012aa2 <__kernel_rem_pio2f+0x2ba>
 8012918:	2c02      	cmp	r4, #2
 801291a:	d16e      	bne.n	80129fa <__kernel_rem_pio2f+0x212>
 801291c:	4649      	mov	r1, r9
 801291e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012922:	f7ee f905 	bl	8000b30 <__aeabi_fsub>
 8012926:	4681      	mov	r9, r0
 8012928:	f1ba 0f00 	cmp.w	sl, #0
 801292c:	d065      	beq.n	80129fa <__kernel_rem_pio2f+0x212>
 801292e:	4639      	mov	r1, r7
 8012930:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012934:	f000 fbec 	bl	8013110 <scalbnf>
 8012938:	4601      	mov	r1, r0
 801293a:	4648      	mov	r0, r9
 801293c:	f7ee f8f8 	bl	8000b30 <__aeabi_fsub>
 8012940:	4681      	mov	r9, r0
 8012942:	e05a      	b.n	80129fa <__kernel_rem_pio2f+0x212>
 8012944:	2400      	movs	r4, #0
 8012946:	e766      	b.n	8012816 <__kernel_rem_pio2f+0x2e>
 8012948:	42ee      	cmn	r6, r5
 801294a:	d407      	bmi.n	801295c <__kernel_rem_pio2f+0x174>
 801294c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012950:	f7ee f9a4 	bl	8000c9c <__aeabi_i2f>
 8012954:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8012958:	3501      	adds	r5, #1
 801295a:	e76f      	b.n	801283c <__kernel_rem_pio2f+0x54>
 801295c:	4650      	mov	r0, sl
 801295e:	e7f9      	b.n	8012954 <__kernel_rem_pio2f+0x16c>
 8012960:	9b05      	ldr	r3, [sp, #20]
 8012962:	f8da 1000 	ldr.w	r1, [sl]
 8012966:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801296a:	f7ee f9eb 	bl	8000d44 <__aeabi_fmul>
 801296e:	4601      	mov	r1, r0
 8012970:	4630      	mov	r0, r6
 8012972:	f7ee f8df 	bl	8000b34 <__addsf3>
 8012976:	4606      	mov	r6, r0
 8012978:	f109 0901 	add.w	r9, r9, #1
 801297c:	ab46      	add	r3, sp, #280	; 0x118
 801297e:	9a03      	ldr	r2, [sp, #12]
 8012980:	f1aa 0a04 	sub.w	sl, sl, #4
 8012984:	4591      	cmp	r9, r2
 8012986:	ddeb      	ble.n	8012960 <__kernel_rem_pio2f+0x178>
 8012988:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801298c:	3504      	adds	r5, #4
 801298e:	f108 0801 	add.w	r8, r8, #1
 8012992:	e75f      	b.n	8012854 <__kernel_rem_pio2f+0x6c>
 8012994:	46aa      	mov	sl, r5
 8012996:	465e      	mov	r6, fp
 8012998:	f04f 0900 	mov.w	r9, #0
 801299c:	e7ef      	b.n	801297e <__kernel_rem_pio2f+0x196>
 801299e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80129a2:	4620      	mov	r0, r4
 80129a4:	f7ee f9ce 	bl	8000d44 <__aeabi_fmul>
 80129a8:	f7ee fba8 	bl	80010fc <__aeabi_f2iz>
 80129ac:	f7ee f976 	bl	8000c9c <__aeabi_i2f>
 80129b0:	4649      	mov	r1, r9
 80129b2:	9009      	str	r0, [sp, #36]	; 0x24
 80129b4:	f7ee f9c6 	bl	8000d44 <__aeabi_fmul>
 80129b8:	4601      	mov	r1, r0
 80129ba:	4620      	mov	r0, r4
 80129bc:	f7ee f8b8 	bl	8000b30 <__aeabi_fsub>
 80129c0:	f7ee fb9c 	bl	80010fc <__aeabi_f2iz>
 80129c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129ca:	f846 0b04 	str.w	r0, [r6], #4
 80129ce:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7ee f8ae 	bl	8000b34 <__addsf3>
 80129d8:	4604      	mov	r4, r0
 80129da:	e756      	b.n	801288a <__kernel_rem_pio2f+0xa2>
 80129dc:	d106      	bne.n	80129ec <__kernel_rem_pio2f+0x204>
 80129de:	f108 33ff 	add.w	r3, r8, #4294967295
 80129e2:	aa0a      	add	r2, sp, #40	; 0x28
 80129e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129e8:	1224      	asrs	r4, r4, #8
 80129ea:	e785      	b.n	80128f8 <__kernel_rem_pio2f+0x110>
 80129ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80129f0:	f7ee fb5a 	bl	80010a8 <__aeabi_fcmpge>
 80129f4:	4604      	mov	r4, r0
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d134      	bne.n	8012a64 <__kernel_rem_pio2f+0x27c>
 80129fa:	2100      	movs	r1, #0
 80129fc:	4648      	mov	r0, r9
 80129fe:	f7ee fb35 	bl	800106c <__aeabi_fcmpeq>
 8012a02:	2800      	cmp	r0, #0
 8012a04:	f000 809a 	beq.w	8012b3c <__kernel_rem_pio2f+0x354>
 8012a08:	f108 35ff 	add.w	r5, r8, #4294967295
 8012a0c:	462b      	mov	r3, r5
 8012a0e:	2200      	movs	r2, #0
 8012a10:	9901      	ldr	r1, [sp, #4]
 8012a12:	428b      	cmp	r3, r1
 8012a14:	da4d      	bge.n	8012ab2 <__kernel_rem_pio2f+0x2ca>
 8012a16:	2a00      	cmp	r2, #0
 8012a18:	d07c      	beq.n	8012b14 <__kernel_rem_pio2f+0x32c>
 8012a1a:	ab0a      	add	r3, sp, #40	; 0x28
 8012a1c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012a20:	3f08      	subs	r7, #8
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f000 8088 	beq.w	8012b38 <__kernel_rem_pio2f+0x350>
 8012a28:	4639      	mov	r1, r7
 8012a2a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012a2e:	f000 fb6f 	bl	8013110 <scalbnf>
 8012a32:	46aa      	mov	sl, r5
 8012a34:	4681      	mov	r9, r0
 8012a36:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8012a3a:	af46      	add	r7, sp, #280	; 0x118
 8012a3c:	f1ba 0f00 	cmp.w	sl, #0
 8012a40:	f280 80b1 	bge.w	8012ba6 <__kernel_rem_pio2f+0x3be>
 8012a44:	46a9      	mov	r9, r5
 8012a46:	f04f 0a00 	mov.w	sl, #0
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	f1b9 0f00 	cmp.w	r9, #0
 8012a50:	f2c0 80db 	blt.w	8012c0a <__kernel_rem_pio2f+0x422>
 8012a54:	a946      	add	r1, sp, #280	; 0x118
 8012a56:	4617      	mov	r7, r2
 8012a58:	f04f 0800 	mov.w	r8, #0
 8012a5c:	4b2c      	ldr	r3, [pc, #176]	; (8012b10 <__kernel_rem_pio2f+0x328>)
 8012a5e:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8012a62:	e0c3      	b.n	8012bec <__kernel_rem_pio2f+0x404>
 8012a64:	2402      	movs	r4, #2
 8012a66:	e749      	b.n	80128fc <__kernel_rem_pio2f+0x114>
 8012a68:	682b      	ldr	r3, [r5, #0]
 8012a6a:	f1ba 0f00 	cmp.w	sl, #0
 8012a6e:	d108      	bne.n	8012a82 <__kernel_rem_pio2f+0x29a>
 8012a70:	b11b      	cbz	r3, 8012a7a <__kernel_rem_pio2f+0x292>
 8012a72:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8012a76:	602b      	str	r3, [r5, #0]
 8012a78:	2301      	movs	r3, #1
 8012a7a:	469a      	mov	sl, r3
 8012a7c:	3201      	adds	r2, #1
 8012a7e:	3504      	adds	r5, #4
 8012a80:	e73f      	b.n	8012902 <__kernel_rem_pio2f+0x11a>
 8012a82:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012a86:	602b      	str	r3, [r5, #0]
 8012a88:	4653      	mov	r3, sl
 8012a8a:	e7f6      	b.n	8012a7a <__kernel_rem_pio2f+0x292>
 8012a8c:	f108 32ff 	add.w	r2, r8, #4294967295
 8012a90:	ab0a      	add	r3, sp, #40	; 0x28
 8012a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a9a:	a90a      	add	r1, sp, #40	; 0x28
 8012a9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012aa0:	e73a      	b.n	8012918 <__kernel_rem_pio2f+0x130>
 8012aa2:	f108 32ff 	add.w	r2, r8, #4294967295
 8012aa6:	ab0a      	add	r3, sp, #40	; 0x28
 8012aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ab0:	e7f3      	b.n	8012a9a <__kernel_rem_pio2f+0x2b2>
 8012ab2:	a90a      	add	r1, sp, #40	; 0x28
 8012ab4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012ab8:	3b01      	subs	r3, #1
 8012aba:	430a      	orrs	r2, r1
 8012abc:	e7a8      	b.n	8012a10 <__kernel_rem_pio2f+0x228>
 8012abe:	3301      	adds	r3, #1
 8012ac0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012ac4:	2900      	cmp	r1, #0
 8012ac6:	d0fa      	beq.n	8012abe <__kernel_rem_pio2f+0x2d6>
 8012ac8:	9a04      	ldr	r2, [sp, #16]
 8012aca:	f108 0501 	add.w	r5, r8, #1
 8012ace:	eb08 0402 	add.w	r4, r8, r2
 8012ad2:	aa1e      	add	r2, sp, #120	; 0x78
 8012ad4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012ad8:	4498      	add	r8, r3
 8012ada:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8012ade:	45a8      	cmp	r8, r5
 8012ae0:	f6ff aec7 	blt.w	8012872 <__kernel_rem_pio2f+0x8a>
 8012ae4:	9b07      	ldr	r3, [sp, #28]
 8012ae6:	46a3      	mov	fp, r4
 8012ae8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012aec:	f7ee f8d6 	bl	8000c9c <__aeabi_i2f>
 8012af0:	f04f 0a00 	mov.w	sl, #0
 8012af4:	2600      	movs	r6, #0
 8012af6:	f84b 0b04 	str.w	r0, [fp], #4
 8012afa:	9b03      	ldr	r3, [sp, #12]
 8012afc:	459a      	cmp	sl, r3
 8012afe:	dd0c      	ble.n	8012b1a <__kernel_rem_pio2f+0x332>
 8012b00:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8012b04:	465c      	mov	r4, fp
 8012b06:	3501      	adds	r5, #1
 8012b08:	e7e9      	b.n	8012ade <__kernel_rem_pio2f+0x2f6>
 8012b0a:	bf00      	nop
 8012b0c:	0801488c 	.word	0x0801488c
 8012b10:	08014860 	.word	0x08014860
 8012b14:	2301      	movs	r3, #1
 8012b16:	9a08      	ldr	r2, [sp, #32]
 8012b18:	e7d2      	b.n	8012ac0 <__kernel_rem_pio2f+0x2d8>
 8012b1a:	9b05      	ldr	r3, [sp, #20]
 8012b1c:	f854 0904 	ldr.w	r0, [r4], #-4
 8012b20:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8012b24:	f7ee f90e 	bl	8000d44 <__aeabi_fmul>
 8012b28:	4601      	mov	r1, r0
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f7ee f802 	bl	8000b34 <__addsf3>
 8012b30:	f10a 0a01 	add.w	sl, sl, #1
 8012b34:	4606      	mov	r6, r0
 8012b36:	e7e0      	b.n	8012afa <__kernel_rem_pio2f+0x312>
 8012b38:	3d01      	subs	r5, #1
 8012b3a:	e76e      	b.n	8012a1a <__kernel_rem_pio2f+0x232>
 8012b3c:	9b06      	ldr	r3, [sp, #24]
 8012b3e:	9a02      	ldr	r2, [sp, #8]
 8012b40:	4648      	mov	r0, r9
 8012b42:	1a99      	subs	r1, r3, r2
 8012b44:	f000 fae4 	bl	8013110 <scalbnf>
 8012b48:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8012b4c:	4605      	mov	r5, r0
 8012b4e:	f7ee faab 	bl	80010a8 <__aeabi_fcmpge>
 8012b52:	b300      	cbz	r0, 8012b96 <__kernel_rem_pio2f+0x3ae>
 8012b54:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8012b58:	4628      	mov	r0, r5
 8012b5a:	f7ee f8f3 	bl	8000d44 <__aeabi_fmul>
 8012b5e:	f7ee facd 	bl	80010fc <__aeabi_f2iz>
 8012b62:	f7ee f89b 	bl	8000c9c <__aeabi_i2f>
 8012b66:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8012b6a:	4681      	mov	r9, r0
 8012b6c:	f7ee f8ea 	bl	8000d44 <__aeabi_fmul>
 8012b70:	4601      	mov	r1, r0
 8012b72:	4628      	mov	r0, r5
 8012b74:	f7ed ffdc 	bl	8000b30 <__aeabi_fsub>
 8012b78:	f7ee fac0 	bl	80010fc <__aeabi_f2iz>
 8012b7c:	ab0a      	add	r3, sp, #40	; 0x28
 8012b7e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012b82:	4648      	mov	r0, r9
 8012b84:	f7ee faba 	bl	80010fc <__aeabi_f2iz>
 8012b88:	f108 0501 	add.w	r5, r8, #1
 8012b8c:	ab0a      	add	r3, sp, #40	; 0x28
 8012b8e:	3708      	adds	r7, #8
 8012b90:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012b94:	e748      	b.n	8012a28 <__kernel_rem_pio2f+0x240>
 8012b96:	4628      	mov	r0, r5
 8012b98:	f7ee fab0 	bl	80010fc <__aeabi_f2iz>
 8012b9c:	ab0a      	add	r3, sp, #40	; 0x28
 8012b9e:	4645      	mov	r5, r8
 8012ba0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012ba4:	e740      	b.n	8012a28 <__kernel_rem_pio2f+0x240>
 8012ba6:	ab0a      	add	r3, sp, #40	; 0x28
 8012ba8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012bac:	f7ee f876 	bl	8000c9c <__aeabi_i2f>
 8012bb0:	4649      	mov	r1, r9
 8012bb2:	f7ee f8c7 	bl	8000d44 <__aeabi_fmul>
 8012bb6:	4641      	mov	r1, r8
 8012bb8:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8012bbc:	4648      	mov	r0, r9
 8012bbe:	f7ee f8c1 	bl	8000d44 <__aeabi_fmul>
 8012bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012bc6:	4681      	mov	r9, r0
 8012bc8:	e738      	b.n	8012a3c <__kernel_rem_pio2f+0x254>
 8012bca:	f853 0b04 	ldr.w	r0, [r3], #4
 8012bce:	f85b 1b04 	ldr.w	r1, [fp], #4
 8012bd2:	9203      	str	r2, [sp, #12]
 8012bd4:	9302      	str	r3, [sp, #8]
 8012bd6:	f7ee f8b5 	bl	8000d44 <__aeabi_fmul>
 8012bda:	4601      	mov	r1, r0
 8012bdc:	4638      	mov	r0, r7
 8012bde:	f7ed ffa9 	bl	8000b34 <__addsf3>
 8012be2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012be6:	4607      	mov	r7, r0
 8012be8:	f108 0801 	add.w	r8, r8, #1
 8012bec:	9901      	ldr	r1, [sp, #4]
 8012bee:	4588      	cmp	r8, r1
 8012bf0:	dc01      	bgt.n	8012bf6 <__kernel_rem_pio2f+0x40e>
 8012bf2:	45c2      	cmp	sl, r8
 8012bf4:	dae9      	bge.n	8012bca <__kernel_rem_pio2f+0x3e2>
 8012bf6:	ab5a      	add	r3, sp, #360	; 0x168
 8012bf8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8012bfc:	f843 7ca0 	str.w	r7, [r3, #-160]
 8012c00:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c04:	f10a 0a01 	add.w	sl, sl, #1
 8012c08:	e720      	b.n	8012a4c <__kernel_rem_pio2f+0x264>
 8012c0a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012c0c:	2b02      	cmp	r3, #2
 8012c0e:	dc07      	bgt.n	8012c20 <__kernel_rem_pio2f+0x438>
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	dc4d      	bgt.n	8012cb0 <__kernel_rem_pio2f+0x4c8>
 8012c14:	d02e      	beq.n	8012c74 <__kernel_rem_pio2f+0x48c>
 8012c16:	f006 0007 	and.w	r0, r6, #7
 8012c1a:	b05b      	add	sp, #364	; 0x16c
 8012c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c20:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012c22:	2b03      	cmp	r3, #3
 8012c24:	d1f7      	bne.n	8012c16 <__kernel_rem_pio2f+0x42e>
 8012c26:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8012c2a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8012c2e:	46b8      	mov	r8, r7
 8012c30:	46aa      	mov	sl, r5
 8012c32:	f1ba 0f00 	cmp.w	sl, #0
 8012c36:	dc48      	bgt.n	8012cca <__kernel_rem_pio2f+0x4e2>
 8012c38:	46a9      	mov	r9, r5
 8012c3a:	f1b9 0f01 	cmp.w	r9, #1
 8012c3e:	dc5f      	bgt.n	8012d00 <__kernel_rem_pio2f+0x518>
 8012c40:	2000      	movs	r0, #0
 8012c42:	2d01      	cmp	r5, #1
 8012c44:	dc75      	bgt.n	8012d32 <__kernel_rem_pio2f+0x54a>
 8012c46:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8012c48:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012c4a:	2c00      	cmp	r4, #0
 8012c4c:	d177      	bne.n	8012d3e <__kernel_rem_pio2f+0x556>
 8012c4e:	9900      	ldr	r1, [sp, #0]
 8012c50:	600a      	str	r2, [r1, #0]
 8012c52:	460a      	mov	r2, r1
 8012c54:	604b      	str	r3, [r1, #4]
 8012c56:	6090      	str	r0, [r2, #8]
 8012c58:	e7dd      	b.n	8012c16 <__kernel_rem_pio2f+0x42e>
 8012c5a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8012c5e:	f7ed ff69 	bl	8000b34 <__addsf3>
 8012c62:	3d01      	subs	r5, #1
 8012c64:	2d00      	cmp	r5, #0
 8012c66:	daf8      	bge.n	8012c5a <__kernel_rem_pio2f+0x472>
 8012c68:	b10c      	cbz	r4, 8012c6e <__kernel_rem_pio2f+0x486>
 8012c6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012c6e:	9b00      	ldr	r3, [sp, #0]
 8012c70:	6018      	str	r0, [r3, #0]
 8012c72:	e7d0      	b.n	8012c16 <__kernel_rem_pio2f+0x42e>
 8012c74:	2000      	movs	r0, #0
 8012c76:	af32      	add	r7, sp, #200	; 0xc8
 8012c78:	e7f4      	b.n	8012c64 <__kernel_rem_pio2f+0x47c>
 8012c7a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8012c7e:	f7ed ff59 	bl	8000b34 <__addsf3>
 8012c82:	3f01      	subs	r7, #1
 8012c84:	2f00      	cmp	r7, #0
 8012c86:	daf8      	bge.n	8012c7a <__kernel_rem_pio2f+0x492>
 8012c88:	b1bc      	cbz	r4, 8012cba <__kernel_rem_pio2f+0x4d2>
 8012c8a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8012c8e:	9a00      	ldr	r2, [sp, #0]
 8012c90:	4601      	mov	r1, r0
 8012c92:	6013      	str	r3, [r2, #0]
 8012c94:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8012c96:	f7ed ff4b 	bl	8000b30 <__aeabi_fsub>
 8012c9a:	2701      	movs	r7, #1
 8012c9c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8012ca0:	42bd      	cmp	r5, r7
 8012ca2:	da0c      	bge.n	8012cbe <__kernel_rem_pio2f+0x4d6>
 8012ca4:	b10c      	cbz	r4, 8012caa <__kernel_rem_pio2f+0x4c2>
 8012ca6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012caa:	9b00      	ldr	r3, [sp, #0]
 8012cac:	6058      	str	r0, [r3, #4]
 8012cae:	e7b2      	b.n	8012c16 <__kernel_rem_pio2f+0x42e>
 8012cb0:	462f      	mov	r7, r5
 8012cb2:	2000      	movs	r0, #0
 8012cb4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8012cb8:	e7e4      	b.n	8012c84 <__kernel_rem_pio2f+0x49c>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	e7e7      	b.n	8012c8e <__kernel_rem_pio2f+0x4a6>
 8012cbe:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8012cc2:	f7ed ff37 	bl	8000b34 <__addsf3>
 8012cc6:	3701      	adds	r7, #1
 8012cc8:	e7ea      	b.n	8012ca0 <__kernel_rem_pio2f+0x4b8>
 8012cca:	f8d8 3000 	ldr.w	r3, [r8]
 8012cce:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	4610      	mov	r0, r2
 8012cd6:	9302      	str	r3, [sp, #8]
 8012cd8:	9201      	str	r2, [sp, #4]
 8012cda:	f7ed ff2b 	bl	8000b34 <__addsf3>
 8012cde:	9a01      	ldr	r2, [sp, #4]
 8012ce0:	4601      	mov	r1, r0
 8012ce2:	4681      	mov	r9, r0
 8012ce4:	4610      	mov	r0, r2
 8012ce6:	f7ed ff23 	bl	8000b30 <__aeabi_fsub>
 8012cea:	9b02      	ldr	r3, [sp, #8]
 8012cec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	f7ed ff1f 	bl	8000b34 <__addsf3>
 8012cf6:	f848 0904 	str.w	r0, [r8], #-4
 8012cfa:	f8c8 9000 	str.w	r9, [r8]
 8012cfe:	e798      	b.n	8012c32 <__kernel_rem_pio2f+0x44a>
 8012d00:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8012d04:	f8d7 a000 	ldr.w	sl, [r7]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	4651      	mov	r1, sl
 8012d0c:	9301      	str	r3, [sp, #4]
 8012d0e:	f7ed ff11 	bl	8000b34 <__addsf3>
 8012d12:	9b01      	ldr	r3, [sp, #4]
 8012d14:	4601      	mov	r1, r0
 8012d16:	4680      	mov	r8, r0
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7ed ff09 	bl	8000b30 <__aeabi_fsub>
 8012d1e:	4651      	mov	r1, sl
 8012d20:	f7ed ff08 	bl	8000b34 <__addsf3>
 8012d24:	f847 0904 	str.w	r0, [r7], #-4
 8012d28:	f109 39ff 	add.w	r9, r9, #4294967295
 8012d2c:	f8c7 8000 	str.w	r8, [r7]
 8012d30:	e783      	b.n	8012c3a <__kernel_rem_pio2f+0x452>
 8012d32:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8012d36:	f7ed fefd 	bl	8000b34 <__addsf3>
 8012d3a:	3d01      	subs	r5, #1
 8012d3c:	e781      	b.n	8012c42 <__kernel_rem_pio2f+0x45a>
 8012d3e:	9900      	ldr	r1, [sp, #0]
 8012d40:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8012d44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012d48:	600a      	str	r2, [r1, #0]
 8012d4a:	604b      	str	r3, [r1, #4]
 8012d4c:	460a      	mov	r2, r1
 8012d4e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012d52:	e780      	b.n	8012c56 <__kernel_rem_pio2f+0x46e>

08012d54 <__kernel_sinf>:
 8012d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012d5c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012d60:	4604      	mov	r4, r0
 8012d62:	460f      	mov	r7, r1
 8012d64:	4691      	mov	r9, r2
 8012d66:	da03      	bge.n	8012d70 <__kernel_sinf+0x1c>
 8012d68:	f7ee f9c8 	bl	80010fc <__aeabi_f2iz>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d035      	beq.n	8012ddc <__kernel_sinf+0x88>
 8012d70:	4621      	mov	r1, r4
 8012d72:	4620      	mov	r0, r4
 8012d74:	f7ed ffe6 	bl	8000d44 <__aeabi_fmul>
 8012d78:	4605      	mov	r5, r0
 8012d7a:	4601      	mov	r1, r0
 8012d7c:	4620      	mov	r0, r4
 8012d7e:	f7ed ffe1 	bl	8000d44 <__aeabi_fmul>
 8012d82:	4929      	ldr	r1, [pc, #164]	; (8012e28 <__kernel_sinf+0xd4>)
 8012d84:	4606      	mov	r6, r0
 8012d86:	4628      	mov	r0, r5
 8012d88:	f7ed ffdc 	bl	8000d44 <__aeabi_fmul>
 8012d8c:	4927      	ldr	r1, [pc, #156]	; (8012e2c <__kernel_sinf+0xd8>)
 8012d8e:	f7ed fecf 	bl	8000b30 <__aeabi_fsub>
 8012d92:	4629      	mov	r1, r5
 8012d94:	f7ed ffd6 	bl	8000d44 <__aeabi_fmul>
 8012d98:	4925      	ldr	r1, [pc, #148]	; (8012e30 <__kernel_sinf+0xdc>)
 8012d9a:	f7ed fecb 	bl	8000b34 <__addsf3>
 8012d9e:	4629      	mov	r1, r5
 8012da0:	f7ed ffd0 	bl	8000d44 <__aeabi_fmul>
 8012da4:	4923      	ldr	r1, [pc, #140]	; (8012e34 <__kernel_sinf+0xe0>)
 8012da6:	f7ed fec3 	bl	8000b30 <__aeabi_fsub>
 8012daa:	4629      	mov	r1, r5
 8012dac:	f7ed ffca 	bl	8000d44 <__aeabi_fmul>
 8012db0:	4921      	ldr	r1, [pc, #132]	; (8012e38 <__kernel_sinf+0xe4>)
 8012db2:	f7ed febf 	bl	8000b34 <__addsf3>
 8012db6:	4680      	mov	r8, r0
 8012db8:	f1b9 0f00 	cmp.w	r9, #0
 8012dbc:	d111      	bne.n	8012de2 <__kernel_sinf+0x8e>
 8012dbe:	4601      	mov	r1, r0
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	f7ed ffbf 	bl	8000d44 <__aeabi_fmul>
 8012dc6:	491d      	ldr	r1, [pc, #116]	; (8012e3c <__kernel_sinf+0xe8>)
 8012dc8:	f7ed feb2 	bl	8000b30 <__aeabi_fsub>
 8012dcc:	4631      	mov	r1, r6
 8012dce:	f7ed ffb9 	bl	8000d44 <__aeabi_fmul>
 8012dd2:	4601      	mov	r1, r0
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f7ed fead 	bl	8000b34 <__addsf3>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4620      	mov	r0, r4
 8012dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012de2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012de6:	4638      	mov	r0, r7
 8012de8:	f7ed ffac 	bl	8000d44 <__aeabi_fmul>
 8012dec:	4641      	mov	r1, r8
 8012dee:	4681      	mov	r9, r0
 8012df0:	4630      	mov	r0, r6
 8012df2:	f7ed ffa7 	bl	8000d44 <__aeabi_fmul>
 8012df6:	4601      	mov	r1, r0
 8012df8:	4648      	mov	r0, r9
 8012dfa:	f7ed fe99 	bl	8000b30 <__aeabi_fsub>
 8012dfe:	4629      	mov	r1, r5
 8012e00:	f7ed ffa0 	bl	8000d44 <__aeabi_fmul>
 8012e04:	4639      	mov	r1, r7
 8012e06:	f7ed fe93 	bl	8000b30 <__aeabi_fsub>
 8012e0a:	490c      	ldr	r1, [pc, #48]	; (8012e3c <__kernel_sinf+0xe8>)
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f7ed ff98 	bl	8000d44 <__aeabi_fmul>
 8012e14:	4601      	mov	r1, r0
 8012e16:	4628      	mov	r0, r5
 8012e18:	f7ed fe8c 	bl	8000b34 <__addsf3>
 8012e1c:	4601      	mov	r1, r0
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f7ed fe86 	bl	8000b30 <__aeabi_fsub>
 8012e24:	e7d9      	b.n	8012dda <__kernel_sinf+0x86>
 8012e26:	bf00      	nop
 8012e28:	2f2ec9d3 	.word	0x2f2ec9d3
 8012e2c:	32d72f34 	.word	0x32d72f34
 8012e30:	3638ef1b 	.word	0x3638ef1b
 8012e34:	39500d01 	.word	0x39500d01
 8012e38:	3c088889 	.word	0x3c088889
 8012e3c:	3e2aaaab 	.word	0x3e2aaaab

08012e40 <fabs>:
 8012e40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012e44:	4770      	bx	lr

08012e46 <finite>:
 8012e46:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8012e4a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012e4e:	0fc0      	lsrs	r0, r0, #31
 8012e50:	4770      	bx	lr
	...

08012e54 <nan>:
 8012e54:	2000      	movs	r0, #0
 8012e56:	4901      	ldr	r1, [pc, #4]	; (8012e5c <nan+0x8>)
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	7ff80000 	.word	0x7ff80000

08012e60 <rint>:
 8012e60:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8012e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e66:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8012e6a:	2f13      	cmp	r7, #19
 8012e6c:	4602      	mov	r2, r0
 8012e6e:	460b      	mov	r3, r1
 8012e70:	460c      	mov	r4, r1
 8012e72:	4605      	mov	r5, r0
 8012e74:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8012e78:	dc59      	bgt.n	8012f2e <rint+0xce>
 8012e7a:	2f00      	cmp	r7, #0
 8012e7c:	da2a      	bge.n	8012ed4 <rint+0x74>
 8012e7e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012e82:	4301      	orrs	r1, r0
 8012e84:	d022      	beq.n	8012ecc <rint+0x6c>
 8012e86:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8012e8a:	4301      	orrs	r1, r0
 8012e8c:	424d      	negs	r5, r1
 8012e8e:	430d      	orrs	r5, r1
 8012e90:	4936      	ldr	r1, [pc, #216]	; (8012f6c <rint+0x10c>)
 8012e92:	0c5c      	lsrs	r4, r3, #17
 8012e94:	0b2d      	lsrs	r5, r5, #12
 8012e96:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8012e9a:	0464      	lsls	r4, r4, #17
 8012e9c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012ea0:	ea45 0304 	orr.w	r3, r5, r4
 8012ea4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	4629      	mov	r1, r5
 8012eac:	f7ed f95e 	bl	800016c <__adddf3>
 8012eb0:	e9cd 0100 	strd	r0, r1, [sp]
 8012eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012eb8:	462b      	mov	r3, r5
 8012eba:	4622      	mov	r2, r4
 8012ebc:	f7ed f954 	bl	8000168 <__aeabi_dsub>
 8012ec0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ec4:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8012ec8:	4602      	mov	r2, r0
 8012eca:	460b      	mov	r3, r1
 8012ecc:	4610      	mov	r0, r2
 8012ece:	4619      	mov	r1, r3
 8012ed0:	b003      	add	sp, #12
 8012ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ed4:	4926      	ldr	r1, [pc, #152]	; (8012f70 <rint+0x110>)
 8012ed6:	4139      	asrs	r1, r7
 8012ed8:	ea03 0001 	and.w	r0, r3, r1
 8012edc:	4310      	orrs	r0, r2
 8012ede:	d0f5      	beq.n	8012ecc <rint+0x6c>
 8012ee0:	084b      	lsrs	r3, r1, #1
 8012ee2:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8012ee6:	ea52 0501 	orrs.w	r5, r2, r1
 8012eea:	d00c      	beq.n	8012f06 <rint+0xa6>
 8012eec:	ea24 0303 	bic.w	r3, r4, r3
 8012ef0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8012ef4:	2f13      	cmp	r7, #19
 8012ef6:	bf0c      	ite	eq
 8012ef8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8012efc:	2500      	movne	r5, #0
 8012efe:	fa44 f707 	asr.w	r7, r4, r7
 8012f02:	ea43 0407 	orr.w	r4, r3, r7
 8012f06:	4919      	ldr	r1, [pc, #100]	; (8012f6c <rint+0x10c>)
 8012f08:	4623      	mov	r3, r4
 8012f0a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8012f0e:	462a      	mov	r2, r5
 8012f10:	e9d6 4500 	ldrd	r4, r5, [r6]
 8012f14:	4620      	mov	r0, r4
 8012f16:	4629      	mov	r1, r5
 8012f18:	f7ed f928 	bl	800016c <__adddf3>
 8012f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8012f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f24:	4622      	mov	r2, r4
 8012f26:	462b      	mov	r3, r5
 8012f28:	f7ed f91e 	bl	8000168 <__aeabi_dsub>
 8012f2c:	e7cc      	b.n	8012ec8 <rint+0x68>
 8012f2e:	2f33      	cmp	r7, #51	; 0x33
 8012f30:	dd05      	ble.n	8012f3e <rint+0xde>
 8012f32:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8012f36:	d1c9      	bne.n	8012ecc <rint+0x6c>
 8012f38:	f7ed f918 	bl	800016c <__adddf3>
 8012f3c:	e7c4      	b.n	8012ec8 <rint+0x68>
 8012f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8012f42:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8012f46:	fa21 f10c 	lsr.w	r1, r1, ip
 8012f4a:	4208      	tst	r0, r1
 8012f4c:	d0be      	beq.n	8012ecc <rint+0x6c>
 8012f4e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8012f52:	bf18      	it	ne
 8012f54:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8012f58:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8012f5c:	bf1e      	ittt	ne
 8012f5e:	ea20 0303 	bicne.w	r3, r0, r3
 8012f62:	fa45 fc0c 	asrne.w	ip, r5, ip
 8012f66:	ea43 050c 	orrne.w	r5, r3, ip
 8012f6a:	e7cc      	b.n	8012f06 <rint+0xa6>
 8012f6c:	08014898 	.word	0x08014898
 8012f70:	000fffff 	.word	0x000fffff
 8012f74:	00000000 	.word	0x00000000

08012f78 <scalbn>:
 8012f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f7a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8012f7e:	4604      	mov	r4, r0
 8012f80:	460d      	mov	r5, r1
 8012f82:	4617      	mov	r7, r2
 8012f84:	460b      	mov	r3, r1
 8012f86:	b996      	cbnz	r6, 8012fae <scalbn+0x36>
 8012f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f8c:	4303      	orrs	r3, r0
 8012f8e:	d039      	beq.n	8013004 <scalbn+0x8c>
 8012f90:	4b35      	ldr	r3, [pc, #212]	; (8013068 <scalbn+0xf0>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	f7ed faa0 	bl	80004d8 <__aeabi_dmul>
 8012f98:	4b34      	ldr	r3, [pc, #208]	; (801306c <scalbn+0xf4>)
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	429f      	cmp	r7, r3
 8012f9e:	460d      	mov	r5, r1
 8012fa0:	da0f      	bge.n	8012fc2 <scalbn+0x4a>
 8012fa2:	a32d      	add	r3, pc, #180	; (adr r3, 8013058 <scalbn+0xe0>)
 8012fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa8:	f7ed fa96 	bl	80004d8 <__aeabi_dmul>
 8012fac:	e006      	b.n	8012fbc <scalbn+0x44>
 8012fae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012fb2:	4296      	cmp	r6, r2
 8012fb4:	d10a      	bne.n	8012fcc <scalbn+0x54>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	f7ed f8d8 	bl	800016c <__adddf3>
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	460d      	mov	r5, r1
 8012fc0:	e020      	b.n	8013004 <scalbn+0x8c>
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012fc8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8012fcc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8012fd0:	19b9      	adds	r1, r7, r6
 8012fd2:	4291      	cmp	r1, r2
 8012fd4:	dd0e      	ble.n	8012ff4 <scalbn+0x7c>
 8012fd6:	a322      	add	r3, pc, #136	; (adr r3, 8013060 <scalbn+0xe8>)
 8012fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fdc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8012fe0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8012fe4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012fe8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012fec:	4820      	ldr	r0, [pc, #128]	; (8013070 <scalbn+0xf8>)
 8012fee:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8012ff2:	e7d9      	b.n	8012fa8 <scalbn+0x30>
 8012ff4:	2900      	cmp	r1, #0
 8012ff6:	dd08      	ble.n	801300a <scalbn+0x92>
 8012ff8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ffc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013000:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8013004:	4620      	mov	r0, r4
 8013006:	4629      	mov	r1, r5
 8013008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801300a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 801300e:	da16      	bge.n	801303e <scalbn+0xc6>
 8013010:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013014:	429f      	cmp	r7, r3
 8013016:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801301a:	dd08      	ble.n	801302e <scalbn+0xb6>
 801301c:	4c15      	ldr	r4, [pc, #84]	; (8013074 <scalbn+0xfc>)
 801301e:	4814      	ldr	r0, [pc, #80]	; (8013070 <scalbn+0xf8>)
 8013020:	f363 74df 	bfi	r4, r3, #31, #1
 8013024:	a30e      	add	r3, pc, #56	; (adr r3, 8013060 <scalbn+0xe8>)
 8013026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302a:	4621      	mov	r1, r4
 801302c:	e7bc      	b.n	8012fa8 <scalbn+0x30>
 801302e:	4c12      	ldr	r4, [pc, #72]	; (8013078 <scalbn+0x100>)
 8013030:	4812      	ldr	r0, [pc, #72]	; (801307c <scalbn+0x104>)
 8013032:	f363 74df 	bfi	r4, r3, #31, #1
 8013036:	a308      	add	r3, pc, #32	; (adr r3, 8013058 <scalbn+0xe0>)
 8013038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303c:	e7f5      	b.n	801302a <scalbn+0xb2>
 801303e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013042:	3136      	adds	r1, #54	; 0x36
 8013044:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013048:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801304c:	4620      	mov	r0, r4
 801304e:	4629      	mov	r1, r5
 8013050:	2200      	movs	r2, #0
 8013052:	4b0b      	ldr	r3, [pc, #44]	; (8013080 <scalbn+0x108>)
 8013054:	e7a8      	b.n	8012fa8 <scalbn+0x30>
 8013056:	bf00      	nop
 8013058:	c2f8f359 	.word	0xc2f8f359
 801305c:	01a56e1f 	.word	0x01a56e1f
 8013060:	8800759c 	.word	0x8800759c
 8013064:	7e37e43c 	.word	0x7e37e43c
 8013068:	43500000 	.word	0x43500000
 801306c:	ffff3cb0 	.word	0xffff3cb0
 8013070:	8800759c 	.word	0x8800759c
 8013074:	7e37e43c 	.word	0x7e37e43c
 8013078:	01a56e1f 	.word	0x01a56e1f
 801307c:	c2f8f359 	.word	0xc2f8f359
 8013080:	3c900000 	.word	0x3c900000

08013084 <floorf>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 801308a:	3d7f      	subs	r5, #127	; 0x7f
 801308c:	2d16      	cmp	r5, #22
 801308e:	4601      	mov	r1, r0
 8013090:	4604      	mov	r4, r0
 8013092:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8013096:	dc26      	bgt.n	80130e6 <floorf+0x62>
 8013098:	2d00      	cmp	r5, #0
 801309a:	da0e      	bge.n	80130ba <floorf+0x36>
 801309c:	4917      	ldr	r1, [pc, #92]	; (80130fc <floorf+0x78>)
 801309e:	f7ed fd49 	bl	8000b34 <__addsf3>
 80130a2:	2100      	movs	r1, #0
 80130a4:	f7ee f80a 	bl	80010bc <__aeabi_fcmpgt>
 80130a8:	b128      	cbz	r0, 80130b6 <floorf+0x32>
 80130aa:	2c00      	cmp	r4, #0
 80130ac:	da23      	bge.n	80130f6 <floorf+0x72>
 80130ae:	4b14      	ldr	r3, [pc, #80]	; (8013100 <floorf+0x7c>)
 80130b0:	2e00      	cmp	r6, #0
 80130b2:	bf18      	it	ne
 80130b4:	461c      	movne	r4, r3
 80130b6:	4621      	mov	r1, r4
 80130b8:	e01b      	b.n	80130f2 <floorf+0x6e>
 80130ba:	4e12      	ldr	r6, [pc, #72]	; (8013104 <floorf+0x80>)
 80130bc:	412e      	asrs	r6, r5
 80130be:	4230      	tst	r0, r6
 80130c0:	d017      	beq.n	80130f2 <floorf+0x6e>
 80130c2:	490e      	ldr	r1, [pc, #56]	; (80130fc <floorf+0x78>)
 80130c4:	f7ed fd36 	bl	8000b34 <__addsf3>
 80130c8:	2100      	movs	r1, #0
 80130ca:	f7ed fff7 	bl	80010bc <__aeabi_fcmpgt>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d0f1      	beq.n	80130b6 <floorf+0x32>
 80130d2:	2c00      	cmp	r4, #0
 80130d4:	bfbe      	ittt	lt
 80130d6:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80130da:	fa43 f505 	asrlt.w	r5, r3, r5
 80130de:	1964      	addlt	r4, r4, r5
 80130e0:	ea24 0406 	bic.w	r4, r4, r6
 80130e4:	e7e7      	b.n	80130b6 <floorf+0x32>
 80130e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80130ea:	d302      	bcc.n	80130f2 <floorf+0x6e>
 80130ec:	f7ed fd22 	bl	8000b34 <__addsf3>
 80130f0:	4601      	mov	r1, r0
 80130f2:	4608      	mov	r0, r1
 80130f4:	bd70      	pop	{r4, r5, r6, pc}
 80130f6:	2400      	movs	r4, #0
 80130f8:	e7dd      	b.n	80130b6 <floorf+0x32>
 80130fa:	bf00      	nop
 80130fc:	7149f2ca 	.word	0x7149f2ca
 8013100:	bf800000 	.word	0xbf800000
 8013104:	007fffff 	.word	0x007fffff

08013108 <nanf>:
 8013108:	4800      	ldr	r0, [pc, #0]	; (801310c <nanf+0x4>)
 801310a:	4770      	bx	lr
 801310c:	7fc00000 	.word	0x7fc00000

08013110 <scalbnf>:
 8013110:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8013114:	b538      	push	{r3, r4, r5, lr}
 8013116:	4603      	mov	r3, r0
 8013118:	460d      	mov	r5, r1
 801311a:	4604      	mov	r4, r0
 801311c:	d02a      	beq.n	8013174 <scalbnf+0x64>
 801311e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013122:	d304      	bcc.n	801312e <scalbnf+0x1e>
 8013124:	4601      	mov	r1, r0
 8013126:	f7ed fd05 	bl	8000b34 <__addsf3>
 801312a:	4603      	mov	r3, r0
 801312c:	e022      	b.n	8013174 <scalbnf+0x64>
 801312e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8013132:	d117      	bne.n	8013164 <scalbnf+0x54>
 8013134:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8013138:	f7ed fe04 	bl	8000d44 <__aeabi_fmul>
 801313c:	4a17      	ldr	r2, [pc, #92]	; (801319c <scalbnf+0x8c>)
 801313e:	4603      	mov	r3, r0
 8013140:	4295      	cmp	r5, r2
 8013142:	db0b      	blt.n	801315c <scalbnf+0x4c>
 8013144:	4604      	mov	r4, r0
 8013146:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801314a:	3a19      	subs	r2, #25
 801314c:	442a      	add	r2, r5
 801314e:	2afe      	cmp	r2, #254	; 0xfe
 8013150:	dd0a      	ble.n	8013168 <scalbnf+0x58>
 8013152:	4913      	ldr	r1, [pc, #76]	; (80131a0 <scalbnf+0x90>)
 8013154:	4618      	mov	r0, r3
 8013156:	f361 001e 	bfi	r0, r1, #0, #31
 801315a:	e000      	b.n	801315e <scalbnf+0x4e>
 801315c:	4911      	ldr	r1, [pc, #68]	; (80131a4 <scalbnf+0x94>)
 801315e:	f7ed fdf1 	bl	8000d44 <__aeabi_fmul>
 8013162:	e7e2      	b.n	801312a <scalbnf+0x1a>
 8013164:	0dd2      	lsrs	r2, r2, #23
 8013166:	e7f1      	b.n	801314c <scalbnf+0x3c>
 8013168:	2a00      	cmp	r2, #0
 801316a:	dd05      	ble.n	8013178 <scalbnf+0x68>
 801316c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8013170:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8013174:	4618      	mov	r0, r3
 8013176:	bd38      	pop	{r3, r4, r5, pc}
 8013178:	f112 0f16 	cmn.w	r2, #22
 801317c:	da05      	bge.n	801318a <scalbnf+0x7a>
 801317e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013182:	4295      	cmp	r5, r2
 8013184:	dce5      	bgt.n	8013152 <scalbnf+0x42>
 8013186:	4907      	ldr	r1, [pc, #28]	; (80131a4 <scalbnf+0x94>)
 8013188:	e7e4      	b.n	8013154 <scalbnf+0x44>
 801318a:	3219      	adds	r2, #25
 801318c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8013190:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8013194:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8013198:	e7e1      	b.n	801315e <scalbnf+0x4e>
 801319a:	bf00      	nop
 801319c:	ffff3cb0 	.word	0xffff3cb0
 80131a0:	7149f2ca 	.word	0x7149f2ca
 80131a4:	0da24260 	.word	0x0da24260

080131a8 <atoi>:
 80131a8:	220a      	movs	r2, #10
 80131aa:	2100      	movs	r1, #0
 80131ac:	f000 b9f0 	b.w	8013590 <strtol>

080131b0 <__errno>:
 80131b0:	4b01      	ldr	r3, [pc, #4]	; (80131b8 <__errno+0x8>)
 80131b2:	6818      	ldr	r0, [r3, #0]
 80131b4:	4770      	bx	lr
 80131b6:	bf00      	nop
 80131b8:	20000010 	.word	0x20000010

080131bc <__libc_init_array>:
 80131bc:	b570      	push	{r4, r5, r6, lr}
 80131be:	2600      	movs	r6, #0
 80131c0:	4d0c      	ldr	r5, [pc, #48]	; (80131f4 <__libc_init_array+0x38>)
 80131c2:	4c0d      	ldr	r4, [pc, #52]	; (80131f8 <__libc_init_array+0x3c>)
 80131c4:	1b64      	subs	r4, r4, r5
 80131c6:	10a4      	asrs	r4, r4, #2
 80131c8:	42a6      	cmp	r6, r4
 80131ca:	d109      	bne.n	80131e0 <__libc_init_array+0x24>
 80131cc:	f001 f8f8 	bl	80143c0 <_init>
 80131d0:	2600      	movs	r6, #0
 80131d2:	4d0a      	ldr	r5, [pc, #40]	; (80131fc <__libc_init_array+0x40>)
 80131d4:	4c0a      	ldr	r4, [pc, #40]	; (8013200 <__libc_init_array+0x44>)
 80131d6:	1b64      	subs	r4, r4, r5
 80131d8:	10a4      	asrs	r4, r4, #2
 80131da:	42a6      	cmp	r6, r4
 80131dc:	d105      	bne.n	80131ea <__libc_init_array+0x2e>
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80131e4:	4798      	blx	r3
 80131e6:	3601      	adds	r6, #1
 80131e8:	e7ee      	b.n	80131c8 <__libc_init_array+0xc>
 80131ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80131ee:	4798      	blx	r3
 80131f0:	3601      	adds	r6, #1
 80131f2:	e7f2      	b.n	80131da <__libc_init_array+0x1e>
 80131f4:	08014af8 	.word	0x08014af8
 80131f8:	08014af8 	.word	0x08014af8
 80131fc:	08014af8 	.word	0x08014af8
 8013200:	08014b00 	.word	0x08014b00

08013204 <malloc>:
 8013204:	4b02      	ldr	r3, [pc, #8]	; (8013210 <malloc+0xc>)
 8013206:	4601      	mov	r1, r0
 8013208:	6818      	ldr	r0, [r3, #0]
 801320a:	f000 b86d 	b.w	80132e8 <_malloc_r>
 801320e:	bf00      	nop
 8013210:	20000010 	.word	0x20000010

08013214 <free>:
 8013214:	4b02      	ldr	r3, [pc, #8]	; (8013220 <free+0xc>)
 8013216:	4601      	mov	r1, r0
 8013218:	6818      	ldr	r0, [r3, #0]
 801321a:	f000 b819 	b.w	8013250 <_free_r>
 801321e:	bf00      	nop
 8013220:	20000010 	.word	0x20000010

08013224 <memcpy>:
 8013224:	440a      	add	r2, r1
 8013226:	4291      	cmp	r1, r2
 8013228:	f100 33ff 	add.w	r3, r0, #4294967295
 801322c:	d100      	bne.n	8013230 <memcpy+0xc>
 801322e:	4770      	bx	lr
 8013230:	b510      	push	{r4, lr}
 8013232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013236:	4291      	cmp	r1, r2
 8013238:	f803 4f01 	strb.w	r4, [r3, #1]!
 801323c:	d1f9      	bne.n	8013232 <memcpy+0xe>
 801323e:	bd10      	pop	{r4, pc}

08013240 <memset>:
 8013240:	4603      	mov	r3, r0
 8013242:	4402      	add	r2, r0
 8013244:	4293      	cmp	r3, r2
 8013246:	d100      	bne.n	801324a <memset+0xa>
 8013248:	4770      	bx	lr
 801324a:	f803 1b01 	strb.w	r1, [r3], #1
 801324e:	e7f9      	b.n	8013244 <memset+0x4>

08013250 <_free_r>:
 8013250:	b538      	push	{r3, r4, r5, lr}
 8013252:	4605      	mov	r5, r0
 8013254:	2900      	cmp	r1, #0
 8013256:	d043      	beq.n	80132e0 <_free_r+0x90>
 8013258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801325c:	1f0c      	subs	r4, r1, #4
 801325e:	2b00      	cmp	r3, #0
 8013260:	bfb8      	it	lt
 8013262:	18e4      	addlt	r4, r4, r3
 8013264:	f000 fac6 	bl	80137f4 <__malloc_lock>
 8013268:	4a1e      	ldr	r2, [pc, #120]	; (80132e4 <_free_r+0x94>)
 801326a:	6813      	ldr	r3, [r2, #0]
 801326c:	4610      	mov	r0, r2
 801326e:	b933      	cbnz	r3, 801327e <_free_r+0x2e>
 8013270:	6063      	str	r3, [r4, #4]
 8013272:	6014      	str	r4, [r2, #0]
 8013274:	4628      	mov	r0, r5
 8013276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801327a:	f000 bac1 	b.w	8013800 <__malloc_unlock>
 801327e:	42a3      	cmp	r3, r4
 8013280:	d90a      	bls.n	8013298 <_free_r+0x48>
 8013282:	6821      	ldr	r1, [r4, #0]
 8013284:	1862      	adds	r2, r4, r1
 8013286:	4293      	cmp	r3, r2
 8013288:	bf01      	itttt	eq
 801328a:	681a      	ldreq	r2, [r3, #0]
 801328c:	685b      	ldreq	r3, [r3, #4]
 801328e:	1852      	addeq	r2, r2, r1
 8013290:	6022      	streq	r2, [r4, #0]
 8013292:	6063      	str	r3, [r4, #4]
 8013294:	6004      	str	r4, [r0, #0]
 8013296:	e7ed      	b.n	8013274 <_free_r+0x24>
 8013298:	461a      	mov	r2, r3
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	b10b      	cbz	r3, 80132a2 <_free_r+0x52>
 801329e:	42a3      	cmp	r3, r4
 80132a0:	d9fa      	bls.n	8013298 <_free_r+0x48>
 80132a2:	6811      	ldr	r1, [r2, #0]
 80132a4:	1850      	adds	r0, r2, r1
 80132a6:	42a0      	cmp	r0, r4
 80132a8:	d10b      	bne.n	80132c2 <_free_r+0x72>
 80132aa:	6820      	ldr	r0, [r4, #0]
 80132ac:	4401      	add	r1, r0
 80132ae:	1850      	adds	r0, r2, r1
 80132b0:	4283      	cmp	r3, r0
 80132b2:	6011      	str	r1, [r2, #0]
 80132b4:	d1de      	bne.n	8013274 <_free_r+0x24>
 80132b6:	6818      	ldr	r0, [r3, #0]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	4401      	add	r1, r0
 80132bc:	6011      	str	r1, [r2, #0]
 80132be:	6053      	str	r3, [r2, #4]
 80132c0:	e7d8      	b.n	8013274 <_free_r+0x24>
 80132c2:	d902      	bls.n	80132ca <_free_r+0x7a>
 80132c4:	230c      	movs	r3, #12
 80132c6:	602b      	str	r3, [r5, #0]
 80132c8:	e7d4      	b.n	8013274 <_free_r+0x24>
 80132ca:	6820      	ldr	r0, [r4, #0]
 80132cc:	1821      	adds	r1, r4, r0
 80132ce:	428b      	cmp	r3, r1
 80132d0:	bf01      	itttt	eq
 80132d2:	6819      	ldreq	r1, [r3, #0]
 80132d4:	685b      	ldreq	r3, [r3, #4]
 80132d6:	1809      	addeq	r1, r1, r0
 80132d8:	6021      	streq	r1, [r4, #0]
 80132da:	6063      	str	r3, [r4, #4]
 80132dc:	6054      	str	r4, [r2, #4]
 80132de:	e7c9      	b.n	8013274 <_free_r+0x24>
 80132e0:	bd38      	pop	{r3, r4, r5, pc}
 80132e2:	bf00      	nop
 80132e4:	20001a10 	.word	0x20001a10

080132e8 <_malloc_r>:
 80132e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ea:	1ccd      	adds	r5, r1, #3
 80132ec:	f025 0503 	bic.w	r5, r5, #3
 80132f0:	3508      	adds	r5, #8
 80132f2:	2d0c      	cmp	r5, #12
 80132f4:	bf38      	it	cc
 80132f6:	250c      	movcc	r5, #12
 80132f8:	2d00      	cmp	r5, #0
 80132fa:	4606      	mov	r6, r0
 80132fc:	db01      	blt.n	8013302 <_malloc_r+0x1a>
 80132fe:	42a9      	cmp	r1, r5
 8013300:	d903      	bls.n	801330a <_malloc_r+0x22>
 8013302:	230c      	movs	r3, #12
 8013304:	6033      	str	r3, [r6, #0]
 8013306:	2000      	movs	r0, #0
 8013308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801330a:	f000 fa73 	bl	80137f4 <__malloc_lock>
 801330e:	4921      	ldr	r1, [pc, #132]	; (8013394 <_malloc_r+0xac>)
 8013310:	680a      	ldr	r2, [r1, #0]
 8013312:	4614      	mov	r4, r2
 8013314:	b99c      	cbnz	r4, 801333e <_malloc_r+0x56>
 8013316:	4f20      	ldr	r7, [pc, #128]	; (8013398 <_malloc_r+0xb0>)
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	b923      	cbnz	r3, 8013326 <_malloc_r+0x3e>
 801331c:	4621      	mov	r1, r4
 801331e:	4630      	mov	r0, r6
 8013320:	f000 f83c 	bl	801339c <_sbrk_r>
 8013324:	6038      	str	r0, [r7, #0]
 8013326:	4629      	mov	r1, r5
 8013328:	4630      	mov	r0, r6
 801332a:	f000 f837 	bl	801339c <_sbrk_r>
 801332e:	1c43      	adds	r3, r0, #1
 8013330:	d123      	bne.n	801337a <_malloc_r+0x92>
 8013332:	230c      	movs	r3, #12
 8013334:	4630      	mov	r0, r6
 8013336:	6033      	str	r3, [r6, #0]
 8013338:	f000 fa62 	bl	8013800 <__malloc_unlock>
 801333c:	e7e3      	b.n	8013306 <_malloc_r+0x1e>
 801333e:	6823      	ldr	r3, [r4, #0]
 8013340:	1b5b      	subs	r3, r3, r5
 8013342:	d417      	bmi.n	8013374 <_malloc_r+0x8c>
 8013344:	2b0b      	cmp	r3, #11
 8013346:	d903      	bls.n	8013350 <_malloc_r+0x68>
 8013348:	6023      	str	r3, [r4, #0]
 801334a:	441c      	add	r4, r3
 801334c:	6025      	str	r5, [r4, #0]
 801334e:	e004      	b.n	801335a <_malloc_r+0x72>
 8013350:	6863      	ldr	r3, [r4, #4]
 8013352:	42a2      	cmp	r2, r4
 8013354:	bf0c      	ite	eq
 8013356:	600b      	streq	r3, [r1, #0]
 8013358:	6053      	strne	r3, [r2, #4]
 801335a:	4630      	mov	r0, r6
 801335c:	f000 fa50 	bl	8013800 <__malloc_unlock>
 8013360:	f104 000b 	add.w	r0, r4, #11
 8013364:	1d23      	adds	r3, r4, #4
 8013366:	f020 0007 	bic.w	r0, r0, #7
 801336a:	1ac2      	subs	r2, r0, r3
 801336c:	d0cc      	beq.n	8013308 <_malloc_r+0x20>
 801336e:	1a1b      	subs	r3, r3, r0
 8013370:	50a3      	str	r3, [r4, r2]
 8013372:	e7c9      	b.n	8013308 <_malloc_r+0x20>
 8013374:	4622      	mov	r2, r4
 8013376:	6864      	ldr	r4, [r4, #4]
 8013378:	e7cc      	b.n	8013314 <_malloc_r+0x2c>
 801337a:	1cc4      	adds	r4, r0, #3
 801337c:	f024 0403 	bic.w	r4, r4, #3
 8013380:	42a0      	cmp	r0, r4
 8013382:	d0e3      	beq.n	801334c <_malloc_r+0x64>
 8013384:	1a21      	subs	r1, r4, r0
 8013386:	4630      	mov	r0, r6
 8013388:	f000 f808 	bl	801339c <_sbrk_r>
 801338c:	3001      	adds	r0, #1
 801338e:	d1dd      	bne.n	801334c <_malloc_r+0x64>
 8013390:	e7cf      	b.n	8013332 <_malloc_r+0x4a>
 8013392:	bf00      	nop
 8013394:	20001a10 	.word	0x20001a10
 8013398:	20001a14 	.word	0x20001a14

0801339c <_sbrk_r>:
 801339c:	b538      	push	{r3, r4, r5, lr}
 801339e:	2300      	movs	r3, #0
 80133a0:	4d05      	ldr	r5, [pc, #20]	; (80133b8 <_sbrk_r+0x1c>)
 80133a2:	4604      	mov	r4, r0
 80133a4:	4608      	mov	r0, r1
 80133a6:	602b      	str	r3, [r5, #0]
 80133a8:	f7f2 fe98 	bl	80060dc <_sbrk>
 80133ac:	1c43      	adds	r3, r0, #1
 80133ae:	d102      	bne.n	80133b6 <_sbrk_r+0x1a>
 80133b0:	682b      	ldr	r3, [r5, #0]
 80133b2:	b103      	cbz	r3, 80133b6 <_sbrk_r+0x1a>
 80133b4:	6023      	str	r3, [r4, #0]
 80133b6:	bd38      	pop	{r3, r4, r5, pc}
 80133b8:	20001a34 	.word	0x20001a34

080133bc <strcpy>:
 80133bc:	4603      	mov	r3, r0
 80133be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133c2:	f803 2b01 	strb.w	r2, [r3], #1
 80133c6:	2a00      	cmp	r2, #0
 80133c8:	d1f9      	bne.n	80133be <strcpy+0x2>
 80133ca:	4770      	bx	lr

080133cc <strtok>:
 80133cc:	4b16      	ldr	r3, [pc, #88]	; (8013428 <strtok+0x5c>)
 80133ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133d2:	681f      	ldr	r7, [r3, #0]
 80133d4:	4605      	mov	r5, r0
 80133d6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80133d8:	460e      	mov	r6, r1
 80133da:	b9ec      	cbnz	r4, 8013418 <strtok+0x4c>
 80133dc:	2050      	movs	r0, #80	; 0x50
 80133de:	f7ff ff11 	bl	8013204 <malloc>
 80133e2:	4602      	mov	r2, r0
 80133e4:	65b8      	str	r0, [r7, #88]	; 0x58
 80133e6:	b920      	cbnz	r0, 80133f2 <strtok+0x26>
 80133e8:	2157      	movs	r1, #87	; 0x57
 80133ea:	4b10      	ldr	r3, [pc, #64]	; (801342c <strtok+0x60>)
 80133ec:	4810      	ldr	r0, [pc, #64]	; (8013430 <strtok+0x64>)
 80133ee:	f000 f8d9 	bl	80135a4 <__assert_func>
 80133f2:	e9c0 4400 	strd	r4, r4, [r0]
 80133f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80133fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80133fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013402:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013406:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801340a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801340e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013412:	6184      	str	r4, [r0, #24]
 8013414:	7704      	strb	r4, [r0, #28]
 8013416:	6244      	str	r4, [r0, #36]	; 0x24
 8013418:	4631      	mov	r1, r6
 801341a:	4628      	mov	r0, r5
 801341c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801341e:	2301      	movs	r3, #1
 8013420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013424:	f000 b806 	b.w	8013434 <__strtok_r>
 8013428:	20000010 	.word	0x20000010
 801342c:	080148ac 	.word	0x080148ac
 8013430:	080148c3 	.word	0x080148c3

08013434 <__strtok_r>:
 8013434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013436:	b908      	cbnz	r0, 801343c <__strtok_r+0x8>
 8013438:	6810      	ldr	r0, [r2, #0]
 801343a:	b188      	cbz	r0, 8013460 <__strtok_r+0x2c>
 801343c:	4604      	mov	r4, r0
 801343e:	460f      	mov	r7, r1
 8013440:	4620      	mov	r0, r4
 8013442:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013446:	f817 6b01 	ldrb.w	r6, [r7], #1
 801344a:	b91e      	cbnz	r6, 8013454 <__strtok_r+0x20>
 801344c:	b965      	cbnz	r5, 8013468 <__strtok_r+0x34>
 801344e:	4628      	mov	r0, r5
 8013450:	6015      	str	r5, [r2, #0]
 8013452:	e005      	b.n	8013460 <__strtok_r+0x2c>
 8013454:	42b5      	cmp	r5, r6
 8013456:	d1f6      	bne.n	8013446 <__strtok_r+0x12>
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1f0      	bne.n	801343e <__strtok_r+0xa>
 801345c:	6014      	str	r4, [r2, #0]
 801345e:	7003      	strb	r3, [r0, #0]
 8013460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013462:	461c      	mov	r4, r3
 8013464:	e00c      	b.n	8013480 <__strtok_r+0x4c>
 8013466:	b915      	cbnz	r5, 801346e <__strtok_r+0x3a>
 8013468:	460e      	mov	r6, r1
 801346a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801346e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013472:	42ab      	cmp	r3, r5
 8013474:	d1f7      	bne.n	8013466 <__strtok_r+0x32>
 8013476:	2b00      	cmp	r3, #0
 8013478:	d0f3      	beq.n	8013462 <__strtok_r+0x2e>
 801347a:	2300      	movs	r3, #0
 801347c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013480:	6014      	str	r4, [r2, #0]
 8013482:	e7ed      	b.n	8013460 <__strtok_r+0x2c>

08013484 <_strtol_l.isra.0>:
 8013484:	2b01      	cmp	r3, #1
 8013486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801348a:	4686      	mov	lr, r0
 801348c:	d001      	beq.n	8013492 <_strtol_l.isra.0+0xe>
 801348e:	2b24      	cmp	r3, #36	; 0x24
 8013490:	d906      	bls.n	80134a0 <_strtol_l.isra.0+0x1c>
 8013492:	f7ff fe8d 	bl	80131b0 <__errno>
 8013496:	2316      	movs	r3, #22
 8013498:	6003      	str	r3, [r0, #0]
 801349a:	2000      	movs	r0, #0
 801349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a0:	468c      	mov	ip, r1
 80134a2:	4e3a      	ldr	r6, [pc, #232]	; (801358c <_strtol_l.isra.0+0x108>)
 80134a4:	4660      	mov	r0, ip
 80134a6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80134aa:	5da5      	ldrb	r5, [r4, r6]
 80134ac:	f015 0508 	ands.w	r5, r5, #8
 80134b0:	d1f8      	bne.n	80134a4 <_strtol_l.isra.0+0x20>
 80134b2:	2c2d      	cmp	r4, #45	; 0x2d
 80134b4:	d133      	bne.n	801351e <_strtol_l.isra.0+0x9a>
 80134b6:	f04f 0801 	mov.w	r8, #1
 80134ba:	f89c 4000 	ldrb.w	r4, [ip]
 80134be:	f100 0c02 	add.w	ip, r0, #2
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d05d      	beq.n	8013582 <_strtol_l.isra.0+0xfe>
 80134c6:	2b10      	cmp	r3, #16
 80134c8:	d10c      	bne.n	80134e4 <_strtol_l.isra.0+0x60>
 80134ca:	2c30      	cmp	r4, #48	; 0x30
 80134cc:	d10a      	bne.n	80134e4 <_strtol_l.isra.0+0x60>
 80134ce:	f89c 0000 	ldrb.w	r0, [ip]
 80134d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80134d6:	2858      	cmp	r0, #88	; 0x58
 80134d8:	d14e      	bne.n	8013578 <_strtol_l.isra.0+0xf4>
 80134da:	2310      	movs	r3, #16
 80134dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80134e0:	f10c 0c02 	add.w	ip, ip, #2
 80134e4:	2500      	movs	r5, #0
 80134e6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80134ea:	3f01      	subs	r7, #1
 80134ec:	fbb7 f9f3 	udiv	r9, r7, r3
 80134f0:	4628      	mov	r0, r5
 80134f2:	fb03 7a19 	mls	sl, r3, r9, r7
 80134f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80134fa:	2e09      	cmp	r6, #9
 80134fc:	d818      	bhi.n	8013530 <_strtol_l.isra.0+0xac>
 80134fe:	4634      	mov	r4, r6
 8013500:	42a3      	cmp	r3, r4
 8013502:	dd24      	ble.n	801354e <_strtol_l.isra.0+0xca>
 8013504:	2d00      	cmp	r5, #0
 8013506:	db1f      	blt.n	8013548 <_strtol_l.isra.0+0xc4>
 8013508:	4581      	cmp	r9, r0
 801350a:	d31d      	bcc.n	8013548 <_strtol_l.isra.0+0xc4>
 801350c:	d101      	bne.n	8013512 <_strtol_l.isra.0+0x8e>
 801350e:	45a2      	cmp	sl, r4
 8013510:	db1a      	blt.n	8013548 <_strtol_l.isra.0+0xc4>
 8013512:	2501      	movs	r5, #1
 8013514:	fb00 4003 	mla	r0, r0, r3, r4
 8013518:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801351c:	e7eb      	b.n	80134f6 <_strtol_l.isra.0+0x72>
 801351e:	2c2b      	cmp	r4, #43	; 0x2b
 8013520:	bf08      	it	eq
 8013522:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013526:	46a8      	mov	r8, r5
 8013528:	bf08      	it	eq
 801352a:	f100 0c02 	addeq.w	ip, r0, #2
 801352e:	e7c8      	b.n	80134c2 <_strtol_l.isra.0+0x3e>
 8013530:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013534:	2e19      	cmp	r6, #25
 8013536:	d801      	bhi.n	801353c <_strtol_l.isra.0+0xb8>
 8013538:	3c37      	subs	r4, #55	; 0x37
 801353a:	e7e1      	b.n	8013500 <_strtol_l.isra.0+0x7c>
 801353c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013540:	2e19      	cmp	r6, #25
 8013542:	d804      	bhi.n	801354e <_strtol_l.isra.0+0xca>
 8013544:	3c57      	subs	r4, #87	; 0x57
 8013546:	e7db      	b.n	8013500 <_strtol_l.isra.0+0x7c>
 8013548:	f04f 35ff 	mov.w	r5, #4294967295
 801354c:	e7e4      	b.n	8013518 <_strtol_l.isra.0+0x94>
 801354e:	2d00      	cmp	r5, #0
 8013550:	da08      	bge.n	8013564 <_strtol_l.isra.0+0xe0>
 8013552:	2322      	movs	r3, #34	; 0x22
 8013554:	4638      	mov	r0, r7
 8013556:	f8ce 3000 	str.w	r3, [lr]
 801355a:	2a00      	cmp	r2, #0
 801355c:	d09e      	beq.n	801349c <_strtol_l.isra.0+0x18>
 801355e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013562:	e007      	b.n	8013574 <_strtol_l.isra.0+0xf0>
 8013564:	f1b8 0f00 	cmp.w	r8, #0
 8013568:	d000      	beq.n	801356c <_strtol_l.isra.0+0xe8>
 801356a:	4240      	negs	r0, r0
 801356c:	2a00      	cmp	r2, #0
 801356e:	d095      	beq.n	801349c <_strtol_l.isra.0+0x18>
 8013570:	2d00      	cmp	r5, #0
 8013572:	d1f4      	bne.n	801355e <_strtol_l.isra.0+0xda>
 8013574:	6011      	str	r1, [r2, #0]
 8013576:	e791      	b.n	801349c <_strtol_l.isra.0+0x18>
 8013578:	2430      	movs	r4, #48	; 0x30
 801357a:	2b00      	cmp	r3, #0
 801357c:	d1b2      	bne.n	80134e4 <_strtol_l.isra.0+0x60>
 801357e:	2308      	movs	r3, #8
 8013580:	e7b0      	b.n	80134e4 <_strtol_l.isra.0+0x60>
 8013582:	2c30      	cmp	r4, #48	; 0x30
 8013584:	d0a3      	beq.n	80134ce <_strtol_l.isra.0+0x4a>
 8013586:	230a      	movs	r3, #10
 8013588:	e7ac      	b.n	80134e4 <_strtol_l.isra.0+0x60>
 801358a:	bf00      	nop
 801358c:	08014961 	.word	0x08014961

08013590 <strtol>:
 8013590:	4613      	mov	r3, r2
 8013592:	460a      	mov	r2, r1
 8013594:	4601      	mov	r1, r0
 8013596:	4802      	ldr	r0, [pc, #8]	; (80135a0 <strtol+0x10>)
 8013598:	6800      	ldr	r0, [r0, #0]
 801359a:	f7ff bf73 	b.w	8013484 <_strtol_l.isra.0>
 801359e:	bf00      	nop
 80135a0:	20000010 	.word	0x20000010

080135a4 <__assert_func>:
 80135a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135a6:	4614      	mov	r4, r2
 80135a8:	461a      	mov	r2, r3
 80135aa:	4b09      	ldr	r3, [pc, #36]	; (80135d0 <__assert_func+0x2c>)
 80135ac:	4605      	mov	r5, r0
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	68d8      	ldr	r0, [r3, #12]
 80135b2:	b14c      	cbz	r4, 80135c8 <__assert_func+0x24>
 80135b4:	4b07      	ldr	r3, [pc, #28]	; (80135d4 <__assert_func+0x30>)
 80135b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135ba:	9100      	str	r1, [sp, #0]
 80135bc:	462b      	mov	r3, r5
 80135be:	4906      	ldr	r1, [pc, #24]	; (80135d8 <__assert_func+0x34>)
 80135c0:	f000 f8e4 	bl	801378c <fiprintf>
 80135c4:	f000 fd26 	bl	8014014 <abort>
 80135c8:	4b04      	ldr	r3, [pc, #16]	; (80135dc <__assert_func+0x38>)
 80135ca:	461c      	mov	r4, r3
 80135cc:	e7f3      	b.n	80135b6 <__assert_func+0x12>
 80135ce:	bf00      	nop
 80135d0:	20000010 	.word	0x20000010
 80135d4:	08014924 	.word	0x08014924
 80135d8:	08014931 	.word	0x08014931
 80135dc:	0801495f 	.word	0x0801495f

080135e0 <std>:
 80135e0:	2300      	movs	r3, #0
 80135e2:	b510      	push	{r4, lr}
 80135e4:	4604      	mov	r4, r0
 80135e6:	e9c0 3300 	strd	r3, r3, [r0]
 80135ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ee:	6083      	str	r3, [r0, #8]
 80135f0:	8181      	strh	r1, [r0, #12]
 80135f2:	6643      	str	r3, [r0, #100]	; 0x64
 80135f4:	81c2      	strh	r2, [r0, #14]
 80135f6:	6183      	str	r3, [r0, #24]
 80135f8:	4619      	mov	r1, r3
 80135fa:	2208      	movs	r2, #8
 80135fc:	305c      	adds	r0, #92	; 0x5c
 80135fe:	f7ff fe1f 	bl	8013240 <memset>
 8013602:	4b05      	ldr	r3, [pc, #20]	; (8013618 <std+0x38>)
 8013604:	6224      	str	r4, [r4, #32]
 8013606:	6263      	str	r3, [r4, #36]	; 0x24
 8013608:	4b04      	ldr	r3, [pc, #16]	; (801361c <std+0x3c>)
 801360a:	62a3      	str	r3, [r4, #40]	; 0x28
 801360c:	4b04      	ldr	r3, [pc, #16]	; (8013620 <std+0x40>)
 801360e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013610:	4b04      	ldr	r3, [pc, #16]	; (8013624 <std+0x44>)
 8013612:	6323      	str	r3, [r4, #48]	; 0x30
 8013614:	bd10      	pop	{r4, pc}
 8013616:	bf00      	nop
 8013618:	08013de9 	.word	0x08013de9
 801361c:	08013e0b 	.word	0x08013e0b
 8013620:	08013e43 	.word	0x08013e43
 8013624:	08013e67 	.word	0x08013e67

08013628 <_cleanup_r>:
 8013628:	4901      	ldr	r1, [pc, #4]	; (8013630 <_cleanup_r+0x8>)
 801362a:	f000 b8c1 	b.w	80137b0 <_fwalk_reent>
 801362e:	bf00      	nop
 8013630:	08014151 	.word	0x08014151

08013634 <__sfmoreglue>:
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	2568      	movs	r5, #104	; 0x68
 8013638:	1e4a      	subs	r2, r1, #1
 801363a:	4355      	muls	r5, r2
 801363c:	460e      	mov	r6, r1
 801363e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013642:	f7ff fe51 	bl	80132e8 <_malloc_r>
 8013646:	4604      	mov	r4, r0
 8013648:	b140      	cbz	r0, 801365c <__sfmoreglue+0x28>
 801364a:	2100      	movs	r1, #0
 801364c:	e9c0 1600 	strd	r1, r6, [r0]
 8013650:	300c      	adds	r0, #12
 8013652:	60a0      	str	r0, [r4, #8]
 8013654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013658:	f7ff fdf2 	bl	8013240 <memset>
 801365c:	4620      	mov	r0, r4
 801365e:	bd70      	pop	{r4, r5, r6, pc}

08013660 <__sfp_lock_acquire>:
 8013660:	4801      	ldr	r0, [pc, #4]	; (8013668 <__sfp_lock_acquire+0x8>)
 8013662:	f000 b8c5 	b.w	80137f0 <__retarget_lock_acquire_recursive>
 8013666:	bf00      	nop
 8013668:	20001a30 	.word	0x20001a30

0801366c <__sfp_lock_release>:
 801366c:	4801      	ldr	r0, [pc, #4]	; (8013674 <__sfp_lock_release+0x8>)
 801366e:	f000 b8c0 	b.w	80137f2 <__retarget_lock_release_recursive>
 8013672:	bf00      	nop
 8013674:	20001a30 	.word	0x20001a30

08013678 <__sinit_lock_acquire>:
 8013678:	4801      	ldr	r0, [pc, #4]	; (8013680 <__sinit_lock_acquire+0x8>)
 801367a:	f000 b8b9 	b.w	80137f0 <__retarget_lock_acquire_recursive>
 801367e:	bf00      	nop
 8013680:	20001a2b 	.word	0x20001a2b

08013684 <__sinit_lock_release>:
 8013684:	4801      	ldr	r0, [pc, #4]	; (801368c <__sinit_lock_release+0x8>)
 8013686:	f000 b8b4 	b.w	80137f2 <__retarget_lock_release_recursive>
 801368a:	bf00      	nop
 801368c:	20001a2b 	.word	0x20001a2b

08013690 <__sinit>:
 8013690:	b510      	push	{r4, lr}
 8013692:	4604      	mov	r4, r0
 8013694:	f7ff fff0 	bl	8013678 <__sinit_lock_acquire>
 8013698:	69a3      	ldr	r3, [r4, #24]
 801369a:	b11b      	cbz	r3, 80136a4 <__sinit+0x14>
 801369c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136a0:	f7ff bff0 	b.w	8013684 <__sinit_lock_release>
 80136a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136a8:	6523      	str	r3, [r4, #80]	; 0x50
 80136aa:	4b13      	ldr	r3, [pc, #76]	; (80136f8 <__sinit+0x68>)
 80136ac:	4a13      	ldr	r2, [pc, #76]	; (80136fc <__sinit+0x6c>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80136b2:	42a3      	cmp	r3, r4
 80136b4:	bf08      	it	eq
 80136b6:	2301      	moveq	r3, #1
 80136b8:	4620      	mov	r0, r4
 80136ba:	bf08      	it	eq
 80136bc:	61a3      	streq	r3, [r4, #24]
 80136be:	f000 f81f 	bl	8013700 <__sfp>
 80136c2:	6060      	str	r0, [r4, #4]
 80136c4:	4620      	mov	r0, r4
 80136c6:	f000 f81b 	bl	8013700 <__sfp>
 80136ca:	60a0      	str	r0, [r4, #8]
 80136cc:	4620      	mov	r0, r4
 80136ce:	f000 f817 	bl	8013700 <__sfp>
 80136d2:	2200      	movs	r2, #0
 80136d4:	2104      	movs	r1, #4
 80136d6:	60e0      	str	r0, [r4, #12]
 80136d8:	6860      	ldr	r0, [r4, #4]
 80136da:	f7ff ff81 	bl	80135e0 <std>
 80136de:	2201      	movs	r2, #1
 80136e0:	2109      	movs	r1, #9
 80136e2:	68a0      	ldr	r0, [r4, #8]
 80136e4:	f7ff ff7c 	bl	80135e0 <std>
 80136e8:	2202      	movs	r2, #2
 80136ea:	2112      	movs	r1, #18
 80136ec:	68e0      	ldr	r0, [r4, #12]
 80136ee:	f7ff ff77 	bl	80135e0 <std>
 80136f2:	2301      	movs	r3, #1
 80136f4:	61a3      	str	r3, [r4, #24]
 80136f6:	e7d1      	b.n	801369c <__sinit+0xc>
 80136f8:	080148a8 	.word	0x080148a8
 80136fc:	08013629 	.word	0x08013629

08013700 <__sfp>:
 8013700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013702:	4607      	mov	r7, r0
 8013704:	f7ff ffac 	bl	8013660 <__sfp_lock_acquire>
 8013708:	4b1e      	ldr	r3, [pc, #120]	; (8013784 <__sfp+0x84>)
 801370a:	681e      	ldr	r6, [r3, #0]
 801370c:	69b3      	ldr	r3, [r6, #24]
 801370e:	b913      	cbnz	r3, 8013716 <__sfp+0x16>
 8013710:	4630      	mov	r0, r6
 8013712:	f7ff ffbd 	bl	8013690 <__sinit>
 8013716:	3648      	adds	r6, #72	; 0x48
 8013718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801371c:	3b01      	subs	r3, #1
 801371e:	d503      	bpl.n	8013728 <__sfp+0x28>
 8013720:	6833      	ldr	r3, [r6, #0]
 8013722:	b30b      	cbz	r3, 8013768 <__sfp+0x68>
 8013724:	6836      	ldr	r6, [r6, #0]
 8013726:	e7f7      	b.n	8013718 <__sfp+0x18>
 8013728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801372c:	b9d5      	cbnz	r5, 8013764 <__sfp+0x64>
 801372e:	4b16      	ldr	r3, [pc, #88]	; (8013788 <__sfp+0x88>)
 8013730:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013734:	60e3      	str	r3, [r4, #12]
 8013736:	6665      	str	r5, [r4, #100]	; 0x64
 8013738:	f000 f859 	bl	80137ee <__retarget_lock_init_recursive>
 801373c:	f7ff ff96 	bl	801366c <__sfp_lock_release>
 8013740:	2208      	movs	r2, #8
 8013742:	4629      	mov	r1, r5
 8013744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801374c:	6025      	str	r5, [r4, #0]
 801374e:	61a5      	str	r5, [r4, #24]
 8013750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013754:	f7ff fd74 	bl	8013240 <memset>
 8013758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801375c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013760:	4620      	mov	r0, r4
 8013762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013764:	3468      	adds	r4, #104	; 0x68
 8013766:	e7d9      	b.n	801371c <__sfp+0x1c>
 8013768:	2104      	movs	r1, #4
 801376a:	4638      	mov	r0, r7
 801376c:	f7ff ff62 	bl	8013634 <__sfmoreglue>
 8013770:	4604      	mov	r4, r0
 8013772:	6030      	str	r0, [r6, #0]
 8013774:	2800      	cmp	r0, #0
 8013776:	d1d5      	bne.n	8013724 <__sfp+0x24>
 8013778:	f7ff ff78 	bl	801366c <__sfp_lock_release>
 801377c:	230c      	movs	r3, #12
 801377e:	603b      	str	r3, [r7, #0]
 8013780:	e7ee      	b.n	8013760 <__sfp+0x60>
 8013782:	bf00      	nop
 8013784:	080148a8 	.word	0x080148a8
 8013788:	ffff0001 	.word	0xffff0001

0801378c <fiprintf>:
 801378c:	b40e      	push	{r1, r2, r3}
 801378e:	b503      	push	{r0, r1, lr}
 8013790:	4601      	mov	r1, r0
 8013792:	ab03      	add	r3, sp, #12
 8013794:	4805      	ldr	r0, [pc, #20]	; (80137ac <fiprintf+0x20>)
 8013796:	f853 2b04 	ldr.w	r2, [r3], #4
 801379a:	6800      	ldr	r0, [r0, #0]
 801379c:	9301      	str	r3, [sp, #4]
 801379e:	f000 f85d 	bl	801385c <_vfiprintf_r>
 80137a2:	b002      	add	sp, #8
 80137a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80137a8:	b003      	add	sp, #12
 80137aa:	4770      	bx	lr
 80137ac:	20000010 	.word	0x20000010

080137b0 <_fwalk_reent>:
 80137b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137b4:	4606      	mov	r6, r0
 80137b6:	4688      	mov	r8, r1
 80137b8:	2700      	movs	r7, #0
 80137ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137c2:	f1b9 0901 	subs.w	r9, r9, #1
 80137c6:	d505      	bpl.n	80137d4 <_fwalk_reent+0x24>
 80137c8:	6824      	ldr	r4, [r4, #0]
 80137ca:	2c00      	cmp	r4, #0
 80137cc:	d1f7      	bne.n	80137be <_fwalk_reent+0xe>
 80137ce:	4638      	mov	r0, r7
 80137d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137d4:	89ab      	ldrh	r3, [r5, #12]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d907      	bls.n	80137ea <_fwalk_reent+0x3a>
 80137da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137de:	3301      	adds	r3, #1
 80137e0:	d003      	beq.n	80137ea <_fwalk_reent+0x3a>
 80137e2:	4629      	mov	r1, r5
 80137e4:	4630      	mov	r0, r6
 80137e6:	47c0      	blx	r8
 80137e8:	4307      	orrs	r7, r0
 80137ea:	3568      	adds	r5, #104	; 0x68
 80137ec:	e7e9      	b.n	80137c2 <_fwalk_reent+0x12>

080137ee <__retarget_lock_init_recursive>:
 80137ee:	4770      	bx	lr

080137f0 <__retarget_lock_acquire_recursive>:
 80137f0:	4770      	bx	lr

080137f2 <__retarget_lock_release_recursive>:
 80137f2:	4770      	bx	lr

080137f4 <__malloc_lock>:
 80137f4:	4801      	ldr	r0, [pc, #4]	; (80137fc <__malloc_lock+0x8>)
 80137f6:	f7ff bffb 	b.w	80137f0 <__retarget_lock_acquire_recursive>
 80137fa:	bf00      	nop
 80137fc:	20001a2c 	.word	0x20001a2c

08013800 <__malloc_unlock>:
 8013800:	4801      	ldr	r0, [pc, #4]	; (8013808 <__malloc_unlock+0x8>)
 8013802:	f7ff bff6 	b.w	80137f2 <__retarget_lock_release_recursive>
 8013806:	bf00      	nop
 8013808:	20001a2c 	.word	0x20001a2c

0801380c <__sfputc_r>:
 801380c:	6893      	ldr	r3, [r2, #8]
 801380e:	b410      	push	{r4}
 8013810:	3b01      	subs	r3, #1
 8013812:	2b00      	cmp	r3, #0
 8013814:	6093      	str	r3, [r2, #8]
 8013816:	da07      	bge.n	8013828 <__sfputc_r+0x1c>
 8013818:	6994      	ldr	r4, [r2, #24]
 801381a:	42a3      	cmp	r3, r4
 801381c:	db01      	blt.n	8013822 <__sfputc_r+0x16>
 801381e:	290a      	cmp	r1, #10
 8013820:	d102      	bne.n	8013828 <__sfputc_r+0x1c>
 8013822:	bc10      	pop	{r4}
 8013824:	f000 bb24 	b.w	8013e70 <__swbuf_r>
 8013828:	6813      	ldr	r3, [r2, #0]
 801382a:	1c58      	adds	r0, r3, #1
 801382c:	6010      	str	r0, [r2, #0]
 801382e:	7019      	strb	r1, [r3, #0]
 8013830:	4608      	mov	r0, r1
 8013832:	bc10      	pop	{r4}
 8013834:	4770      	bx	lr

08013836 <__sfputs_r>:
 8013836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013838:	4606      	mov	r6, r0
 801383a:	460f      	mov	r7, r1
 801383c:	4614      	mov	r4, r2
 801383e:	18d5      	adds	r5, r2, r3
 8013840:	42ac      	cmp	r4, r5
 8013842:	d101      	bne.n	8013848 <__sfputs_r+0x12>
 8013844:	2000      	movs	r0, #0
 8013846:	e007      	b.n	8013858 <__sfputs_r+0x22>
 8013848:	463a      	mov	r2, r7
 801384a:	4630      	mov	r0, r6
 801384c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013850:	f7ff ffdc 	bl	801380c <__sfputc_r>
 8013854:	1c43      	adds	r3, r0, #1
 8013856:	d1f3      	bne.n	8013840 <__sfputs_r+0xa>
 8013858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801385c <_vfiprintf_r>:
 801385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013860:	460d      	mov	r5, r1
 8013862:	4614      	mov	r4, r2
 8013864:	4698      	mov	r8, r3
 8013866:	4606      	mov	r6, r0
 8013868:	b09d      	sub	sp, #116	; 0x74
 801386a:	b118      	cbz	r0, 8013874 <_vfiprintf_r+0x18>
 801386c:	6983      	ldr	r3, [r0, #24]
 801386e:	b90b      	cbnz	r3, 8013874 <_vfiprintf_r+0x18>
 8013870:	f7ff ff0e 	bl	8013690 <__sinit>
 8013874:	4b89      	ldr	r3, [pc, #548]	; (8013a9c <_vfiprintf_r+0x240>)
 8013876:	429d      	cmp	r5, r3
 8013878:	d11b      	bne.n	80138b2 <_vfiprintf_r+0x56>
 801387a:	6875      	ldr	r5, [r6, #4]
 801387c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801387e:	07d9      	lsls	r1, r3, #31
 8013880:	d405      	bmi.n	801388e <_vfiprintf_r+0x32>
 8013882:	89ab      	ldrh	r3, [r5, #12]
 8013884:	059a      	lsls	r2, r3, #22
 8013886:	d402      	bmi.n	801388e <_vfiprintf_r+0x32>
 8013888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801388a:	f7ff ffb1 	bl	80137f0 <__retarget_lock_acquire_recursive>
 801388e:	89ab      	ldrh	r3, [r5, #12]
 8013890:	071b      	lsls	r3, r3, #28
 8013892:	d501      	bpl.n	8013898 <_vfiprintf_r+0x3c>
 8013894:	692b      	ldr	r3, [r5, #16]
 8013896:	b9eb      	cbnz	r3, 80138d4 <_vfiprintf_r+0x78>
 8013898:	4629      	mov	r1, r5
 801389a:	4630      	mov	r0, r6
 801389c:	f000 fb4c 	bl	8013f38 <__swsetup_r>
 80138a0:	b1c0      	cbz	r0, 80138d4 <_vfiprintf_r+0x78>
 80138a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138a4:	07dc      	lsls	r4, r3, #31
 80138a6:	d50e      	bpl.n	80138c6 <_vfiprintf_r+0x6a>
 80138a8:	f04f 30ff 	mov.w	r0, #4294967295
 80138ac:	b01d      	add	sp, #116	; 0x74
 80138ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b2:	4b7b      	ldr	r3, [pc, #492]	; (8013aa0 <_vfiprintf_r+0x244>)
 80138b4:	429d      	cmp	r5, r3
 80138b6:	d101      	bne.n	80138bc <_vfiprintf_r+0x60>
 80138b8:	68b5      	ldr	r5, [r6, #8]
 80138ba:	e7df      	b.n	801387c <_vfiprintf_r+0x20>
 80138bc:	4b79      	ldr	r3, [pc, #484]	; (8013aa4 <_vfiprintf_r+0x248>)
 80138be:	429d      	cmp	r5, r3
 80138c0:	bf08      	it	eq
 80138c2:	68f5      	ldreq	r5, [r6, #12]
 80138c4:	e7da      	b.n	801387c <_vfiprintf_r+0x20>
 80138c6:	89ab      	ldrh	r3, [r5, #12]
 80138c8:	0598      	lsls	r0, r3, #22
 80138ca:	d4ed      	bmi.n	80138a8 <_vfiprintf_r+0x4c>
 80138cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138ce:	f7ff ff90 	bl	80137f2 <__retarget_lock_release_recursive>
 80138d2:	e7e9      	b.n	80138a8 <_vfiprintf_r+0x4c>
 80138d4:	2300      	movs	r3, #0
 80138d6:	9309      	str	r3, [sp, #36]	; 0x24
 80138d8:	2320      	movs	r3, #32
 80138da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138de:	2330      	movs	r3, #48	; 0x30
 80138e0:	f04f 0901 	mov.w	r9, #1
 80138e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80138e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013aa8 <_vfiprintf_r+0x24c>
 80138ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138f0:	4623      	mov	r3, r4
 80138f2:	469a      	mov	sl, r3
 80138f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138f8:	b10a      	cbz	r2, 80138fe <_vfiprintf_r+0xa2>
 80138fa:	2a25      	cmp	r2, #37	; 0x25
 80138fc:	d1f9      	bne.n	80138f2 <_vfiprintf_r+0x96>
 80138fe:	ebba 0b04 	subs.w	fp, sl, r4
 8013902:	d00b      	beq.n	801391c <_vfiprintf_r+0xc0>
 8013904:	465b      	mov	r3, fp
 8013906:	4622      	mov	r2, r4
 8013908:	4629      	mov	r1, r5
 801390a:	4630      	mov	r0, r6
 801390c:	f7ff ff93 	bl	8013836 <__sfputs_r>
 8013910:	3001      	adds	r0, #1
 8013912:	f000 80aa 	beq.w	8013a6a <_vfiprintf_r+0x20e>
 8013916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013918:	445a      	add	r2, fp
 801391a:	9209      	str	r2, [sp, #36]	; 0x24
 801391c:	f89a 3000 	ldrb.w	r3, [sl]
 8013920:	2b00      	cmp	r3, #0
 8013922:	f000 80a2 	beq.w	8013a6a <_vfiprintf_r+0x20e>
 8013926:	2300      	movs	r3, #0
 8013928:	f04f 32ff 	mov.w	r2, #4294967295
 801392c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013930:	f10a 0a01 	add.w	sl, sl, #1
 8013934:	9304      	str	r3, [sp, #16]
 8013936:	9307      	str	r3, [sp, #28]
 8013938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801393c:	931a      	str	r3, [sp, #104]	; 0x68
 801393e:	4654      	mov	r4, sl
 8013940:	2205      	movs	r2, #5
 8013942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013946:	4858      	ldr	r0, [pc, #352]	; (8013aa8 <_vfiprintf_r+0x24c>)
 8013948:	f000 fcb4 	bl	80142b4 <memchr>
 801394c:	9a04      	ldr	r2, [sp, #16]
 801394e:	b9d8      	cbnz	r0, 8013988 <_vfiprintf_r+0x12c>
 8013950:	06d1      	lsls	r1, r2, #27
 8013952:	bf44      	itt	mi
 8013954:	2320      	movmi	r3, #32
 8013956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801395a:	0713      	lsls	r3, r2, #28
 801395c:	bf44      	itt	mi
 801395e:	232b      	movmi	r3, #43	; 0x2b
 8013960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013964:	f89a 3000 	ldrb.w	r3, [sl]
 8013968:	2b2a      	cmp	r3, #42	; 0x2a
 801396a:	d015      	beq.n	8013998 <_vfiprintf_r+0x13c>
 801396c:	4654      	mov	r4, sl
 801396e:	2000      	movs	r0, #0
 8013970:	f04f 0c0a 	mov.w	ip, #10
 8013974:	9a07      	ldr	r2, [sp, #28]
 8013976:	4621      	mov	r1, r4
 8013978:	f811 3b01 	ldrb.w	r3, [r1], #1
 801397c:	3b30      	subs	r3, #48	; 0x30
 801397e:	2b09      	cmp	r3, #9
 8013980:	d94e      	bls.n	8013a20 <_vfiprintf_r+0x1c4>
 8013982:	b1b0      	cbz	r0, 80139b2 <_vfiprintf_r+0x156>
 8013984:	9207      	str	r2, [sp, #28]
 8013986:	e014      	b.n	80139b2 <_vfiprintf_r+0x156>
 8013988:	eba0 0308 	sub.w	r3, r0, r8
 801398c:	fa09 f303 	lsl.w	r3, r9, r3
 8013990:	4313      	orrs	r3, r2
 8013992:	46a2      	mov	sl, r4
 8013994:	9304      	str	r3, [sp, #16]
 8013996:	e7d2      	b.n	801393e <_vfiprintf_r+0xe2>
 8013998:	9b03      	ldr	r3, [sp, #12]
 801399a:	1d19      	adds	r1, r3, #4
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	9103      	str	r1, [sp, #12]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	bfbb      	ittet	lt
 80139a4:	425b      	neglt	r3, r3
 80139a6:	f042 0202 	orrlt.w	r2, r2, #2
 80139aa:	9307      	strge	r3, [sp, #28]
 80139ac:	9307      	strlt	r3, [sp, #28]
 80139ae:	bfb8      	it	lt
 80139b0:	9204      	strlt	r2, [sp, #16]
 80139b2:	7823      	ldrb	r3, [r4, #0]
 80139b4:	2b2e      	cmp	r3, #46	; 0x2e
 80139b6:	d10c      	bne.n	80139d2 <_vfiprintf_r+0x176>
 80139b8:	7863      	ldrb	r3, [r4, #1]
 80139ba:	2b2a      	cmp	r3, #42	; 0x2a
 80139bc:	d135      	bne.n	8013a2a <_vfiprintf_r+0x1ce>
 80139be:	9b03      	ldr	r3, [sp, #12]
 80139c0:	3402      	adds	r4, #2
 80139c2:	1d1a      	adds	r2, r3, #4
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	9203      	str	r2, [sp, #12]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	bfb8      	it	lt
 80139cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80139d0:	9305      	str	r3, [sp, #20]
 80139d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ab8 <_vfiprintf_r+0x25c>
 80139d6:	2203      	movs	r2, #3
 80139d8:	4650      	mov	r0, sl
 80139da:	7821      	ldrb	r1, [r4, #0]
 80139dc:	f000 fc6a 	bl	80142b4 <memchr>
 80139e0:	b140      	cbz	r0, 80139f4 <_vfiprintf_r+0x198>
 80139e2:	2340      	movs	r3, #64	; 0x40
 80139e4:	eba0 000a 	sub.w	r0, r0, sl
 80139e8:	fa03 f000 	lsl.w	r0, r3, r0
 80139ec:	9b04      	ldr	r3, [sp, #16]
 80139ee:	3401      	adds	r4, #1
 80139f0:	4303      	orrs	r3, r0
 80139f2:	9304      	str	r3, [sp, #16]
 80139f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139f8:	2206      	movs	r2, #6
 80139fa:	482c      	ldr	r0, [pc, #176]	; (8013aac <_vfiprintf_r+0x250>)
 80139fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a00:	f000 fc58 	bl	80142b4 <memchr>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	d03f      	beq.n	8013a88 <_vfiprintf_r+0x22c>
 8013a08:	4b29      	ldr	r3, [pc, #164]	; (8013ab0 <_vfiprintf_r+0x254>)
 8013a0a:	bb1b      	cbnz	r3, 8013a54 <_vfiprintf_r+0x1f8>
 8013a0c:	9b03      	ldr	r3, [sp, #12]
 8013a0e:	3307      	adds	r3, #7
 8013a10:	f023 0307 	bic.w	r3, r3, #7
 8013a14:	3308      	adds	r3, #8
 8013a16:	9303      	str	r3, [sp, #12]
 8013a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a1a:	443b      	add	r3, r7
 8013a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a1e:	e767      	b.n	80138f0 <_vfiprintf_r+0x94>
 8013a20:	460c      	mov	r4, r1
 8013a22:	2001      	movs	r0, #1
 8013a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a28:	e7a5      	b.n	8013976 <_vfiprintf_r+0x11a>
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	f04f 0c0a 	mov.w	ip, #10
 8013a30:	4619      	mov	r1, r3
 8013a32:	3401      	adds	r4, #1
 8013a34:	9305      	str	r3, [sp, #20]
 8013a36:	4620      	mov	r0, r4
 8013a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a3c:	3a30      	subs	r2, #48	; 0x30
 8013a3e:	2a09      	cmp	r2, #9
 8013a40:	d903      	bls.n	8013a4a <_vfiprintf_r+0x1ee>
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d0c5      	beq.n	80139d2 <_vfiprintf_r+0x176>
 8013a46:	9105      	str	r1, [sp, #20]
 8013a48:	e7c3      	b.n	80139d2 <_vfiprintf_r+0x176>
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a52:	e7f0      	b.n	8013a36 <_vfiprintf_r+0x1da>
 8013a54:	ab03      	add	r3, sp, #12
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	462a      	mov	r2, r5
 8013a5a:	4630      	mov	r0, r6
 8013a5c:	4b15      	ldr	r3, [pc, #84]	; (8013ab4 <_vfiprintf_r+0x258>)
 8013a5e:	a904      	add	r1, sp, #16
 8013a60:	f3af 8000 	nop.w
 8013a64:	4607      	mov	r7, r0
 8013a66:	1c78      	adds	r0, r7, #1
 8013a68:	d1d6      	bne.n	8013a18 <_vfiprintf_r+0x1bc>
 8013a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a6c:	07d9      	lsls	r1, r3, #31
 8013a6e:	d405      	bmi.n	8013a7c <_vfiprintf_r+0x220>
 8013a70:	89ab      	ldrh	r3, [r5, #12]
 8013a72:	059a      	lsls	r2, r3, #22
 8013a74:	d402      	bmi.n	8013a7c <_vfiprintf_r+0x220>
 8013a76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a78:	f7ff febb 	bl	80137f2 <__retarget_lock_release_recursive>
 8013a7c:	89ab      	ldrh	r3, [r5, #12]
 8013a7e:	065b      	lsls	r3, r3, #25
 8013a80:	f53f af12 	bmi.w	80138a8 <_vfiprintf_r+0x4c>
 8013a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a86:	e711      	b.n	80138ac <_vfiprintf_r+0x50>
 8013a88:	ab03      	add	r3, sp, #12
 8013a8a:	9300      	str	r3, [sp, #0]
 8013a8c:	462a      	mov	r2, r5
 8013a8e:	4630      	mov	r0, r6
 8013a90:	4b08      	ldr	r3, [pc, #32]	; (8013ab4 <_vfiprintf_r+0x258>)
 8013a92:	a904      	add	r1, sp, #16
 8013a94:	f000 f882 	bl	8013b9c <_printf_i>
 8013a98:	e7e4      	b.n	8013a64 <_vfiprintf_r+0x208>
 8013a9a:	bf00      	nop
 8013a9c:	08014a84 	.word	0x08014a84
 8013aa0:	08014aa4 	.word	0x08014aa4
 8013aa4:	08014a64 	.word	0x08014a64
 8013aa8:	08014ac4 	.word	0x08014ac4
 8013aac:	08014ace 	.word	0x08014ace
 8013ab0:	00000000 	.word	0x00000000
 8013ab4:	08013837 	.word	0x08013837
 8013ab8:	08014aca 	.word	0x08014aca

08013abc <_printf_common>:
 8013abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ac0:	4616      	mov	r6, r2
 8013ac2:	4699      	mov	r9, r3
 8013ac4:	688a      	ldr	r2, [r1, #8]
 8013ac6:	690b      	ldr	r3, [r1, #16]
 8013ac8:	4607      	mov	r7, r0
 8013aca:	4293      	cmp	r3, r2
 8013acc:	bfb8      	it	lt
 8013ace:	4613      	movlt	r3, r2
 8013ad0:	6033      	str	r3, [r6, #0]
 8013ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ad6:	460c      	mov	r4, r1
 8013ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013adc:	b10a      	cbz	r2, 8013ae2 <_printf_common+0x26>
 8013ade:	3301      	adds	r3, #1
 8013ae0:	6033      	str	r3, [r6, #0]
 8013ae2:	6823      	ldr	r3, [r4, #0]
 8013ae4:	0699      	lsls	r1, r3, #26
 8013ae6:	bf42      	ittt	mi
 8013ae8:	6833      	ldrmi	r3, [r6, #0]
 8013aea:	3302      	addmi	r3, #2
 8013aec:	6033      	strmi	r3, [r6, #0]
 8013aee:	6825      	ldr	r5, [r4, #0]
 8013af0:	f015 0506 	ands.w	r5, r5, #6
 8013af4:	d106      	bne.n	8013b04 <_printf_common+0x48>
 8013af6:	f104 0a19 	add.w	sl, r4, #25
 8013afa:	68e3      	ldr	r3, [r4, #12]
 8013afc:	6832      	ldr	r2, [r6, #0]
 8013afe:	1a9b      	subs	r3, r3, r2
 8013b00:	42ab      	cmp	r3, r5
 8013b02:	dc28      	bgt.n	8013b56 <_printf_common+0x9a>
 8013b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b08:	1e13      	subs	r3, r2, #0
 8013b0a:	6822      	ldr	r2, [r4, #0]
 8013b0c:	bf18      	it	ne
 8013b0e:	2301      	movne	r3, #1
 8013b10:	0692      	lsls	r2, r2, #26
 8013b12:	d42d      	bmi.n	8013b70 <_printf_common+0xb4>
 8013b14:	4649      	mov	r1, r9
 8013b16:	4638      	mov	r0, r7
 8013b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b1c:	47c0      	blx	r8
 8013b1e:	3001      	adds	r0, #1
 8013b20:	d020      	beq.n	8013b64 <_printf_common+0xa8>
 8013b22:	6823      	ldr	r3, [r4, #0]
 8013b24:	68e5      	ldr	r5, [r4, #12]
 8013b26:	f003 0306 	and.w	r3, r3, #6
 8013b2a:	2b04      	cmp	r3, #4
 8013b2c:	bf18      	it	ne
 8013b2e:	2500      	movne	r5, #0
 8013b30:	6832      	ldr	r2, [r6, #0]
 8013b32:	f04f 0600 	mov.w	r6, #0
 8013b36:	68a3      	ldr	r3, [r4, #8]
 8013b38:	bf08      	it	eq
 8013b3a:	1aad      	subeq	r5, r5, r2
 8013b3c:	6922      	ldr	r2, [r4, #16]
 8013b3e:	bf08      	it	eq
 8013b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b44:	4293      	cmp	r3, r2
 8013b46:	bfc4      	itt	gt
 8013b48:	1a9b      	subgt	r3, r3, r2
 8013b4a:	18ed      	addgt	r5, r5, r3
 8013b4c:	341a      	adds	r4, #26
 8013b4e:	42b5      	cmp	r5, r6
 8013b50:	d11a      	bne.n	8013b88 <_printf_common+0xcc>
 8013b52:	2000      	movs	r0, #0
 8013b54:	e008      	b.n	8013b68 <_printf_common+0xac>
 8013b56:	2301      	movs	r3, #1
 8013b58:	4652      	mov	r2, sl
 8013b5a:	4649      	mov	r1, r9
 8013b5c:	4638      	mov	r0, r7
 8013b5e:	47c0      	blx	r8
 8013b60:	3001      	adds	r0, #1
 8013b62:	d103      	bne.n	8013b6c <_printf_common+0xb0>
 8013b64:	f04f 30ff 	mov.w	r0, #4294967295
 8013b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b6c:	3501      	adds	r5, #1
 8013b6e:	e7c4      	b.n	8013afa <_printf_common+0x3e>
 8013b70:	2030      	movs	r0, #48	; 0x30
 8013b72:	18e1      	adds	r1, r4, r3
 8013b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b78:	1c5a      	adds	r2, r3, #1
 8013b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b7e:	4422      	add	r2, r4
 8013b80:	3302      	adds	r3, #2
 8013b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b86:	e7c5      	b.n	8013b14 <_printf_common+0x58>
 8013b88:	2301      	movs	r3, #1
 8013b8a:	4622      	mov	r2, r4
 8013b8c:	4649      	mov	r1, r9
 8013b8e:	4638      	mov	r0, r7
 8013b90:	47c0      	blx	r8
 8013b92:	3001      	adds	r0, #1
 8013b94:	d0e6      	beq.n	8013b64 <_printf_common+0xa8>
 8013b96:	3601      	adds	r6, #1
 8013b98:	e7d9      	b.n	8013b4e <_printf_common+0x92>
	...

08013b9c <_printf_i>:
 8013b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ba0:	460c      	mov	r4, r1
 8013ba2:	7e27      	ldrb	r7, [r4, #24]
 8013ba4:	4691      	mov	r9, r2
 8013ba6:	2f78      	cmp	r7, #120	; 0x78
 8013ba8:	4680      	mov	r8, r0
 8013baa:	469a      	mov	sl, r3
 8013bac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bb2:	d807      	bhi.n	8013bc4 <_printf_i+0x28>
 8013bb4:	2f62      	cmp	r7, #98	; 0x62
 8013bb6:	d80a      	bhi.n	8013bce <_printf_i+0x32>
 8013bb8:	2f00      	cmp	r7, #0
 8013bba:	f000 80d9 	beq.w	8013d70 <_printf_i+0x1d4>
 8013bbe:	2f58      	cmp	r7, #88	; 0x58
 8013bc0:	f000 80a4 	beq.w	8013d0c <_printf_i+0x170>
 8013bc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013bcc:	e03a      	b.n	8013c44 <_printf_i+0xa8>
 8013bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013bd2:	2b15      	cmp	r3, #21
 8013bd4:	d8f6      	bhi.n	8013bc4 <_printf_i+0x28>
 8013bd6:	a001      	add	r0, pc, #4	; (adr r0, 8013bdc <_printf_i+0x40>)
 8013bd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013bdc:	08013c35 	.word	0x08013c35
 8013be0:	08013c49 	.word	0x08013c49
 8013be4:	08013bc5 	.word	0x08013bc5
 8013be8:	08013bc5 	.word	0x08013bc5
 8013bec:	08013bc5 	.word	0x08013bc5
 8013bf0:	08013bc5 	.word	0x08013bc5
 8013bf4:	08013c49 	.word	0x08013c49
 8013bf8:	08013bc5 	.word	0x08013bc5
 8013bfc:	08013bc5 	.word	0x08013bc5
 8013c00:	08013bc5 	.word	0x08013bc5
 8013c04:	08013bc5 	.word	0x08013bc5
 8013c08:	08013d57 	.word	0x08013d57
 8013c0c:	08013c79 	.word	0x08013c79
 8013c10:	08013d39 	.word	0x08013d39
 8013c14:	08013bc5 	.word	0x08013bc5
 8013c18:	08013bc5 	.word	0x08013bc5
 8013c1c:	08013d79 	.word	0x08013d79
 8013c20:	08013bc5 	.word	0x08013bc5
 8013c24:	08013c79 	.word	0x08013c79
 8013c28:	08013bc5 	.word	0x08013bc5
 8013c2c:	08013bc5 	.word	0x08013bc5
 8013c30:	08013d41 	.word	0x08013d41
 8013c34:	680b      	ldr	r3, [r1, #0]
 8013c36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013c3a:	1d1a      	adds	r2, r3, #4
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	600a      	str	r2, [r1, #0]
 8013c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c44:	2301      	movs	r3, #1
 8013c46:	e0a4      	b.n	8013d92 <_printf_i+0x1f6>
 8013c48:	6825      	ldr	r5, [r4, #0]
 8013c4a:	6808      	ldr	r0, [r1, #0]
 8013c4c:	062e      	lsls	r6, r5, #24
 8013c4e:	f100 0304 	add.w	r3, r0, #4
 8013c52:	d50a      	bpl.n	8013c6a <_printf_i+0xce>
 8013c54:	6805      	ldr	r5, [r0, #0]
 8013c56:	600b      	str	r3, [r1, #0]
 8013c58:	2d00      	cmp	r5, #0
 8013c5a:	da03      	bge.n	8013c64 <_printf_i+0xc8>
 8013c5c:	232d      	movs	r3, #45	; 0x2d
 8013c5e:	426d      	negs	r5, r5
 8013c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c64:	230a      	movs	r3, #10
 8013c66:	485e      	ldr	r0, [pc, #376]	; (8013de0 <_printf_i+0x244>)
 8013c68:	e019      	b.n	8013c9e <_printf_i+0x102>
 8013c6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013c6e:	6805      	ldr	r5, [r0, #0]
 8013c70:	600b      	str	r3, [r1, #0]
 8013c72:	bf18      	it	ne
 8013c74:	b22d      	sxthne	r5, r5
 8013c76:	e7ef      	b.n	8013c58 <_printf_i+0xbc>
 8013c78:	680b      	ldr	r3, [r1, #0]
 8013c7a:	6825      	ldr	r5, [r4, #0]
 8013c7c:	1d18      	adds	r0, r3, #4
 8013c7e:	6008      	str	r0, [r1, #0]
 8013c80:	0628      	lsls	r0, r5, #24
 8013c82:	d501      	bpl.n	8013c88 <_printf_i+0xec>
 8013c84:	681d      	ldr	r5, [r3, #0]
 8013c86:	e002      	b.n	8013c8e <_printf_i+0xf2>
 8013c88:	0669      	lsls	r1, r5, #25
 8013c8a:	d5fb      	bpl.n	8013c84 <_printf_i+0xe8>
 8013c8c:	881d      	ldrh	r5, [r3, #0]
 8013c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8013c90:	bf0c      	ite	eq
 8013c92:	2308      	moveq	r3, #8
 8013c94:	230a      	movne	r3, #10
 8013c96:	4852      	ldr	r0, [pc, #328]	; (8013de0 <_printf_i+0x244>)
 8013c98:	2100      	movs	r1, #0
 8013c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c9e:	6866      	ldr	r6, [r4, #4]
 8013ca0:	2e00      	cmp	r6, #0
 8013ca2:	bfa8      	it	ge
 8013ca4:	6821      	ldrge	r1, [r4, #0]
 8013ca6:	60a6      	str	r6, [r4, #8]
 8013ca8:	bfa4      	itt	ge
 8013caa:	f021 0104 	bicge.w	r1, r1, #4
 8013cae:	6021      	strge	r1, [r4, #0]
 8013cb0:	b90d      	cbnz	r5, 8013cb6 <_printf_i+0x11a>
 8013cb2:	2e00      	cmp	r6, #0
 8013cb4:	d04d      	beq.n	8013d52 <_printf_i+0x1b6>
 8013cb6:	4616      	mov	r6, r2
 8013cb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8013cbc:	fb03 5711 	mls	r7, r3, r1, r5
 8013cc0:	5dc7      	ldrb	r7, [r0, r7]
 8013cc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013cc6:	462f      	mov	r7, r5
 8013cc8:	42bb      	cmp	r3, r7
 8013cca:	460d      	mov	r5, r1
 8013ccc:	d9f4      	bls.n	8013cb8 <_printf_i+0x11c>
 8013cce:	2b08      	cmp	r3, #8
 8013cd0:	d10b      	bne.n	8013cea <_printf_i+0x14e>
 8013cd2:	6823      	ldr	r3, [r4, #0]
 8013cd4:	07df      	lsls	r7, r3, #31
 8013cd6:	d508      	bpl.n	8013cea <_printf_i+0x14e>
 8013cd8:	6923      	ldr	r3, [r4, #16]
 8013cda:	6861      	ldr	r1, [r4, #4]
 8013cdc:	4299      	cmp	r1, r3
 8013cde:	bfde      	ittt	le
 8013ce0:	2330      	movle	r3, #48	; 0x30
 8013ce2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013ce6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013cea:	1b92      	subs	r2, r2, r6
 8013cec:	6122      	str	r2, [r4, #16]
 8013cee:	464b      	mov	r3, r9
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	4640      	mov	r0, r8
 8013cf4:	f8cd a000 	str.w	sl, [sp]
 8013cf8:	aa03      	add	r2, sp, #12
 8013cfa:	f7ff fedf 	bl	8013abc <_printf_common>
 8013cfe:	3001      	adds	r0, #1
 8013d00:	d14c      	bne.n	8013d9c <_printf_i+0x200>
 8013d02:	f04f 30ff 	mov.w	r0, #4294967295
 8013d06:	b004      	add	sp, #16
 8013d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d0c:	4834      	ldr	r0, [pc, #208]	; (8013de0 <_printf_i+0x244>)
 8013d0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013d12:	680e      	ldr	r6, [r1, #0]
 8013d14:	6823      	ldr	r3, [r4, #0]
 8013d16:	f856 5b04 	ldr.w	r5, [r6], #4
 8013d1a:	061f      	lsls	r7, r3, #24
 8013d1c:	600e      	str	r6, [r1, #0]
 8013d1e:	d514      	bpl.n	8013d4a <_printf_i+0x1ae>
 8013d20:	07d9      	lsls	r1, r3, #31
 8013d22:	bf44      	itt	mi
 8013d24:	f043 0320 	orrmi.w	r3, r3, #32
 8013d28:	6023      	strmi	r3, [r4, #0]
 8013d2a:	b91d      	cbnz	r5, 8013d34 <_printf_i+0x198>
 8013d2c:	6823      	ldr	r3, [r4, #0]
 8013d2e:	f023 0320 	bic.w	r3, r3, #32
 8013d32:	6023      	str	r3, [r4, #0]
 8013d34:	2310      	movs	r3, #16
 8013d36:	e7af      	b.n	8013c98 <_printf_i+0xfc>
 8013d38:	6823      	ldr	r3, [r4, #0]
 8013d3a:	f043 0320 	orr.w	r3, r3, #32
 8013d3e:	6023      	str	r3, [r4, #0]
 8013d40:	2378      	movs	r3, #120	; 0x78
 8013d42:	4828      	ldr	r0, [pc, #160]	; (8013de4 <_printf_i+0x248>)
 8013d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d48:	e7e3      	b.n	8013d12 <_printf_i+0x176>
 8013d4a:	065e      	lsls	r6, r3, #25
 8013d4c:	bf48      	it	mi
 8013d4e:	b2ad      	uxthmi	r5, r5
 8013d50:	e7e6      	b.n	8013d20 <_printf_i+0x184>
 8013d52:	4616      	mov	r6, r2
 8013d54:	e7bb      	b.n	8013cce <_printf_i+0x132>
 8013d56:	680b      	ldr	r3, [r1, #0]
 8013d58:	6826      	ldr	r6, [r4, #0]
 8013d5a:	1d1d      	adds	r5, r3, #4
 8013d5c:	6960      	ldr	r0, [r4, #20]
 8013d5e:	600d      	str	r5, [r1, #0]
 8013d60:	0635      	lsls	r5, r6, #24
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	d501      	bpl.n	8013d6a <_printf_i+0x1ce>
 8013d66:	6018      	str	r0, [r3, #0]
 8013d68:	e002      	b.n	8013d70 <_printf_i+0x1d4>
 8013d6a:	0671      	lsls	r1, r6, #25
 8013d6c:	d5fb      	bpl.n	8013d66 <_printf_i+0x1ca>
 8013d6e:	8018      	strh	r0, [r3, #0]
 8013d70:	2300      	movs	r3, #0
 8013d72:	4616      	mov	r6, r2
 8013d74:	6123      	str	r3, [r4, #16]
 8013d76:	e7ba      	b.n	8013cee <_printf_i+0x152>
 8013d78:	680b      	ldr	r3, [r1, #0]
 8013d7a:	1d1a      	adds	r2, r3, #4
 8013d7c:	600a      	str	r2, [r1, #0]
 8013d7e:	681e      	ldr	r6, [r3, #0]
 8013d80:	2100      	movs	r1, #0
 8013d82:	4630      	mov	r0, r6
 8013d84:	6862      	ldr	r2, [r4, #4]
 8013d86:	f000 fa95 	bl	80142b4 <memchr>
 8013d8a:	b108      	cbz	r0, 8013d90 <_printf_i+0x1f4>
 8013d8c:	1b80      	subs	r0, r0, r6
 8013d8e:	6060      	str	r0, [r4, #4]
 8013d90:	6863      	ldr	r3, [r4, #4]
 8013d92:	6123      	str	r3, [r4, #16]
 8013d94:	2300      	movs	r3, #0
 8013d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d9a:	e7a8      	b.n	8013cee <_printf_i+0x152>
 8013d9c:	4632      	mov	r2, r6
 8013d9e:	4649      	mov	r1, r9
 8013da0:	4640      	mov	r0, r8
 8013da2:	6923      	ldr	r3, [r4, #16]
 8013da4:	47d0      	blx	sl
 8013da6:	3001      	adds	r0, #1
 8013da8:	d0ab      	beq.n	8013d02 <_printf_i+0x166>
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	079b      	lsls	r3, r3, #30
 8013dae:	d413      	bmi.n	8013dd8 <_printf_i+0x23c>
 8013db0:	68e0      	ldr	r0, [r4, #12]
 8013db2:	9b03      	ldr	r3, [sp, #12]
 8013db4:	4298      	cmp	r0, r3
 8013db6:	bfb8      	it	lt
 8013db8:	4618      	movlt	r0, r3
 8013dba:	e7a4      	b.n	8013d06 <_printf_i+0x16a>
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	4632      	mov	r2, r6
 8013dc0:	4649      	mov	r1, r9
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	47d0      	blx	sl
 8013dc6:	3001      	adds	r0, #1
 8013dc8:	d09b      	beq.n	8013d02 <_printf_i+0x166>
 8013dca:	3501      	adds	r5, #1
 8013dcc:	68e3      	ldr	r3, [r4, #12]
 8013dce:	9903      	ldr	r1, [sp, #12]
 8013dd0:	1a5b      	subs	r3, r3, r1
 8013dd2:	42ab      	cmp	r3, r5
 8013dd4:	dcf2      	bgt.n	8013dbc <_printf_i+0x220>
 8013dd6:	e7eb      	b.n	8013db0 <_printf_i+0x214>
 8013dd8:	2500      	movs	r5, #0
 8013dda:	f104 0619 	add.w	r6, r4, #25
 8013dde:	e7f5      	b.n	8013dcc <_printf_i+0x230>
 8013de0:	08014ad5 	.word	0x08014ad5
 8013de4:	08014ae6 	.word	0x08014ae6

08013de8 <__sread>:
 8013de8:	b510      	push	{r4, lr}
 8013dea:	460c      	mov	r4, r1
 8013dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013df0:	f000 fa6e 	bl	80142d0 <_read_r>
 8013df4:	2800      	cmp	r0, #0
 8013df6:	bfab      	itete	ge
 8013df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8013dfc:	181b      	addge	r3, r3, r0
 8013dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013e02:	bfac      	ite	ge
 8013e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8013e06:	81a3      	strhlt	r3, [r4, #12]
 8013e08:	bd10      	pop	{r4, pc}

08013e0a <__swrite>:
 8013e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0e:	461f      	mov	r7, r3
 8013e10:	898b      	ldrh	r3, [r1, #12]
 8013e12:	4605      	mov	r5, r0
 8013e14:	05db      	lsls	r3, r3, #23
 8013e16:	460c      	mov	r4, r1
 8013e18:	4616      	mov	r6, r2
 8013e1a:	d505      	bpl.n	8013e28 <__swrite+0x1e>
 8013e1c:	2302      	movs	r3, #2
 8013e1e:	2200      	movs	r2, #0
 8013e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e24:	f000 f9d0 	bl	80141c8 <_lseek_r>
 8013e28:	89a3      	ldrh	r3, [r4, #12]
 8013e2a:	4632      	mov	r2, r6
 8013e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e30:	81a3      	strh	r3, [r4, #12]
 8013e32:	4628      	mov	r0, r5
 8013e34:	463b      	mov	r3, r7
 8013e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3e:	f000 b869 	b.w	8013f14 <_write_r>

08013e42 <__sseek>:
 8013e42:	b510      	push	{r4, lr}
 8013e44:	460c      	mov	r4, r1
 8013e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e4a:	f000 f9bd 	bl	80141c8 <_lseek_r>
 8013e4e:	1c43      	adds	r3, r0, #1
 8013e50:	89a3      	ldrh	r3, [r4, #12]
 8013e52:	bf15      	itete	ne
 8013e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e5e:	81a3      	strheq	r3, [r4, #12]
 8013e60:	bf18      	it	ne
 8013e62:	81a3      	strhne	r3, [r4, #12]
 8013e64:	bd10      	pop	{r4, pc}

08013e66 <__sclose>:
 8013e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e6a:	f000 b8db 	b.w	8014024 <_close_r>
	...

08013e70 <__swbuf_r>:
 8013e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e72:	460e      	mov	r6, r1
 8013e74:	4614      	mov	r4, r2
 8013e76:	4605      	mov	r5, r0
 8013e78:	b118      	cbz	r0, 8013e82 <__swbuf_r+0x12>
 8013e7a:	6983      	ldr	r3, [r0, #24]
 8013e7c:	b90b      	cbnz	r3, 8013e82 <__swbuf_r+0x12>
 8013e7e:	f7ff fc07 	bl	8013690 <__sinit>
 8013e82:	4b21      	ldr	r3, [pc, #132]	; (8013f08 <__swbuf_r+0x98>)
 8013e84:	429c      	cmp	r4, r3
 8013e86:	d12b      	bne.n	8013ee0 <__swbuf_r+0x70>
 8013e88:	686c      	ldr	r4, [r5, #4]
 8013e8a:	69a3      	ldr	r3, [r4, #24]
 8013e8c:	60a3      	str	r3, [r4, #8]
 8013e8e:	89a3      	ldrh	r3, [r4, #12]
 8013e90:	071a      	lsls	r2, r3, #28
 8013e92:	d52f      	bpl.n	8013ef4 <__swbuf_r+0x84>
 8013e94:	6923      	ldr	r3, [r4, #16]
 8013e96:	b36b      	cbz	r3, 8013ef4 <__swbuf_r+0x84>
 8013e98:	6923      	ldr	r3, [r4, #16]
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	b2f6      	uxtb	r6, r6
 8013e9e:	1ac0      	subs	r0, r0, r3
 8013ea0:	6963      	ldr	r3, [r4, #20]
 8013ea2:	4637      	mov	r7, r6
 8013ea4:	4283      	cmp	r3, r0
 8013ea6:	dc04      	bgt.n	8013eb2 <__swbuf_r+0x42>
 8013ea8:	4621      	mov	r1, r4
 8013eaa:	4628      	mov	r0, r5
 8013eac:	f000 f950 	bl	8014150 <_fflush_r>
 8013eb0:	bb30      	cbnz	r0, 8013f00 <__swbuf_r+0x90>
 8013eb2:	68a3      	ldr	r3, [r4, #8]
 8013eb4:	3001      	adds	r0, #1
 8013eb6:	3b01      	subs	r3, #1
 8013eb8:	60a3      	str	r3, [r4, #8]
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	1c5a      	adds	r2, r3, #1
 8013ebe:	6022      	str	r2, [r4, #0]
 8013ec0:	701e      	strb	r6, [r3, #0]
 8013ec2:	6963      	ldr	r3, [r4, #20]
 8013ec4:	4283      	cmp	r3, r0
 8013ec6:	d004      	beq.n	8013ed2 <__swbuf_r+0x62>
 8013ec8:	89a3      	ldrh	r3, [r4, #12]
 8013eca:	07db      	lsls	r3, r3, #31
 8013ecc:	d506      	bpl.n	8013edc <__swbuf_r+0x6c>
 8013ece:	2e0a      	cmp	r6, #10
 8013ed0:	d104      	bne.n	8013edc <__swbuf_r+0x6c>
 8013ed2:	4621      	mov	r1, r4
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	f000 f93b 	bl	8014150 <_fflush_r>
 8013eda:	b988      	cbnz	r0, 8013f00 <__swbuf_r+0x90>
 8013edc:	4638      	mov	r0, r7
 8013ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ee0:	4b0a      	ldr	r3, [pc, #40]	; (8013f0c <__swbuf_r+0x9c>)
 8013ee2:	429c      	cmp	r4, r3
 8013ee4:	d101      	bne.n	8013eea <__swbuf_r+0x7a>
 8013ee6:	68ac      	ldr	r4, [r5, #8]
 8013ee8:	e7cf      	b.n	8013e8a <__swbuf_r+0x1a>
 8013eea:	4b09      	ldr	r3, [pc, #36]	; (8013f10 <__swbuf_r+0xa0>)
 8013eec:	429c      	cmp	r4, r3
 8013eee:	bf08      	it	eq
 8013ef0:	68ec      	ldreq	r4, [r5, #12]
 8013ef2:	e7ca      	b.n	8013e8a <__swbuf_r+0x1a>
 8013ef4:	4621      	mov	r1, r4
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f000 f81e 	bl	8013f38 <__swsetup_r>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	d0cb      	beq.n	8013e98 <__swbuf_r+0x28>
 8013f00:	f04f 37ff 	mov.w	r7, #4294967295
 8013f04:	e7ea      	b.n	8013edc <__swbuf_r+0x6c>
 8013f06:	bf00      	nop
 8013f08:	08014a84 	.word	0x08014a84
 8013f0c:	08014aa4 	.word	0x08014aa4
 8013f10:	08014a64 	.word	0x08014a64

08013f14 <_write_r>:
 8013f14:	b538      	push	{r3, r4, r5, lr}
 8013f16:	4604      	mov	r4, r0
 8013f18:	4608      	mov	r0, r1
 8013f1a:	4611      	mov	r1, r2
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	4d05      	ldr	r5, [pc, #20]	; (8013f34 <_write_r+0x20>)
 8013f20:	602a      	str	r2, [r5, #0]
 8013f22:	461a      	mov	r2, r3
 8013f24:	f7f2 f88e 	bl	8006044 <_write>
 8013f28:	1c43      	adds	r3, r0, #1
 8013f2a:	d102      	bne.n	8013f32 <_write_r+0x1e>
 8013f2c:	682b      	ldr	r3, [r5, #0]
 8013f2e:	b103      	cbz	r3, 8013f32 <_write_r+0x1e>
 8013f30:	6023      	str	r3, [r4, #0]
 8013f32:	bd38      	pop	{r3, r4, r5, pc}
 8013f34:	20001a34 	.word	0x20001a34

08013f38 <__swsetup_r>:
 8013f38:	4b32      	ldr	r3, [pc, #200]	; (8014004 <__swsetup_r+0xcc>)
 8013f3a:	b570      	push	{r4, r5, r6, lr}
 8013f3c:	681d      	ldr	r5, [r3, #0]
 8013f3e:	4606      	mov	r6, r0
 8013f40:	460c      	mov	r4, r1
 8013f42:	b125      	cbz	r5, 8013f4e <__swsetup_r+0x16>
 8013f44:	69ab      	ldr	r3, [r5, #24]
 8013f46:	b913      	cbnz	r3, 8013f4e <__swsetup_r+0x16>
 8013f48:	4628      	mov	r0, r5
 8013f4a:	f7ff fba1 	bl	8013690 <__sinit>
 8013f4e:	4b2e      	ldr	r3, [pc, #184]	; (8014008 <__swsetup_r+0xd0>)
 8013f50:	429c      	cmp	r4, r3
 8013f52:	d10f      	bne.n	8013f74 <__swsetup_r+0x3c>
 8013f54:	686c      	ldr	r4, [r5, #4]
 8013f56:	89a3      	ldrh	r3, [r4, #12]
 8013f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f5c:	0719      	lsls	r1, r3, #28
 8013f5e:	d42c      	bmi.n	8013fba <__swsetup_r+0x82>
 8013f60:	06dd      	lsls	r5, r3, #27
 8013f62:	d411      	bmi.n	8013f88 <__swsetup_r+0x50>
 8013f64:	2309      	movs	r3, #9
 8013f66:	6033      	str	r3, [r6, #0]
 8013f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f70:	81a3      	strh	r3, [r4, #12]
 8013f72:	e03e      	b.n	8013ff2 <__swsetup_r+0xba>
 8013f74:	4b25      	ldr	r3, [pc, #148]	; (801400c <__swsetup_r+0xd4>)
 8013f76:	429c      	cmp	r4, r3
 8013f78:	d101      	bne.n	8013f7e <__swsetup_r+0x46>
 8013f7a:	68ac      	ldr	r4, [r5, #8]
 8013f7c:	e7eb      	b.n	8013f56 <__swsetup_r+0x1e>
 8013f7e:	4b24      	ldr	r3, [pc, #144]	; (8014010 <__swsetup_r+0xd8>)
 8013f80:	429c      	cmp	r4, r3
 8013f82:	bf08      	it	eq
 8013f84:	68ec      	ldreq	r4, [r5, #12]
 8013f86:	e7e6      	b.n	8013f56 <__swsetup_r+0x1e>
 8013f88:	0758      	lsls	r0, r3, #29
 8013f8a:	d512      	bpl.n	8013fb2 <__swsetup_r+0x7a>
 8013f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f8e:	b141      	cbz	r1, 8013fa2 <__swsetup_r+0x6a>
 8013f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f94:	4299      	cmp	r1, r3
 8013f96:	d002      	beq.n	8013f9e <__swsetup_r+0x66>
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f7ff f959 	bl	8013250 <_free_r>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8013fa2:	89a3      	ldrh	r3, [r4, #12]
 8013fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013fa8:	81a3      	strh	r3, [r4, #12]
 8013faa:	2300      	movs	r3, #0
 8013fac:	6063      	str	r3, [r4, #4]
 8013fae:	6923      	ldr	r3, [r4, #16]
 8013fb0:	6023      	str	r3, [r4, #0]
 8013fb2:	89a3      	ldrh	r3, [r4, #12]
 8013fb4:	f043 0308 	orr.w	r3, r3, #8
 8013fb8:	81a3      	strh	r3, [r4, #12]
 8013fba:	6923      	ldr	r3, [r4, #16]
 8013fbc:	b94b      	cbnz	r3, 8013fd2 <__swsetup_r+0x9a>
 8013fbe:	89a3      	ldrh	r3, [r4, #12]
 8013fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013fc8:	d003      	beq.n	8013fd2 <__swsetup_r+0x9a>
 8013fca:	4621      	mov	r1, r4
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f000 f931 	bl	8014234 <__smakebuf_r>
 8013fd2:	89a0      	ldrh	r0, [r4, #12]
 8013fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013fd8:	f010 0301 	ands.w	r3, r0, #1
 8013fdc:	d00a      	beq.n	8013ff4 <__swsetup_r+0xbc>
 8013fde:	2300      	movs	r3, #0
 8013fe0:	60a3      	str	r3, [r4, #8]
 8013fe2:	6963      	ldr	r3, [r4, #20]
 8013fe4:	425b      	negs	r3, r3
 8013fe6:	61a3      	str	r3, [r4, #24]
 8013fe8:	6923      	ldr	r3, [r4, #16]
 8013fea:	b943      	cbnz	r3, 8013ffe <__swsetup_r+0xc6>
 8013fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ff0:	d1ba      	bne.n	8013f68 <__swsetup_r+0x30>
 8013ff2:	bd70      	pop	{r4, r5, r6, pc}
 8013ff4:	0781      	lsls	r1, r0, #30
 8013ff6:	bf58      	it	pl
 8013ff8:	6963      	ldrpl	r3, [r4, #20]
 8013ffa:	60a3      	str	r3, [r4, #8]
 8013ffc:	e7f4      	b.n	8013fe8 <__swsetup_r+0xb0>
 8013ffe:	2000      	movs	r0, #0
 8014000:	e7f7      	b.n	8013ff2 <__swsetup_r+0xba>
 8014002:	bf00      	nop
 8014004:	20000010 	.word	0x20000010
 8014008:	08014a84 	.word	0x08014a84
 801400c:	08014aa4 	.word	0x08014aa4
 8014010:	08014a64 	.word	0x08014a64

08014014 <abort>:
 8014014:	2006      	movs	r0, #6
 8014016:	b508      	push	{r3, lr}
 8014018:	f000 f994 	bl	8014344 <raise>
 801401c:	2001      	movs	r0, #1
 801401e:	f7f1 ffea 	bl	8005ff6 <_exit>
	...

08014024 <_close_r>:
 8014024:	b538      	push	{r3, r4, r5, lr}
 8014026:	2300      	movs	r3, #0
 8014028:	4d05      	ldr	r5, [pc, #20]	; (8014040 <_close_r+0x1c>)
 801402a:	4604      	mov	r4, r0
 801402c:	4608      	mov	r0, r1
 801402e:	602b      	str	r3, [r5, #0]
 8014030:	f7f2 f824 	bl	800607c <_close>
 8014034:	1c43      	adds	r3, r0, #1
 8014036:	d102      	bne.n	801403e <_close_r+0x1a>
 8014038:	682b      	ldr	r3, [r5, #0]
 801403a:	b103      	cbz	r3, 801403e <_close_r+0x1a>
 801403c:	6023      	str	r3, [r4, #0]
 801403e:	bd38      	pop	{r3, r4, r5, pc}
 8014040:	20001a34 	.word	0x20001a34

08014044 <__sflush_r>:
 8014044:	898a      	ldrh	r2, [r1, #12]
 8014046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801404a:	4605      	mov	r5, r0
 801404c:	0710      	lsls	r0, r2, #28
 801404e:	460c      	mov	r4, r1
 8014050:	d458      	bmi.n	8014104 <__sflush_r+0xc0>
 8014052:	684b      	ldr	r3, [r1, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	dc05      	bgt.n	8014064 <__sflush_r+0x20>
 8014058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801405a:	2b00      	cmp	r3, #0
 801405c:	dc02      	bgt.n	8014064 <__sflush_r+0x20>
 801405e:	2000      	movs	r0, #0
 8014060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014066:	2e00      	cmp	r6, #0
 8014068:	d0f9      	beq.n	801405e <__sflush_r+0x1a>
 801406a:	2300      	movs	r3, #0
 801406c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014070:	682f      	ldr	r7, [r5, #0]
 8014072:	602b      	str	r3, [r5, #0]
 8014074:	d032      	beq.n	80140dc <__sflush_r+0x98>
 8014076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014078:	89a3      	ldrh	r3, [r4, #12]
 801407a:	075a      	lsls	r2, r3, #29
 801407c:	d505      	bpl.n	801408a <__sflush_r+0x46>
 801407e:	6863      	ldr	r3, [r4, #4]
 8014080:	1ac0      	subs	r0, r0, r3
 8014082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014084:	b10b      	cbz	r3, 801408a <__sflush_r+0x46>
 8014086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014088:	1ac0      	subs	r0, r0, r3
 801408a:	2300      	movs	r3, #0
 801408c:	4602      	mov	r2, r0
 801408e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014090:	4628      	mov	r0, r5
 8014092:	6a21      	ldr	r1, [r4, #32]
 8014094:	47b0      	blx	r6
 8014096:	1c43      	adds	r3, r0, #1
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	d106      	bne.n	80140aa <__sflush_r+0x66>
 801409c:	6829      	ldr	r1, [r5, #0]
 801409e:	291d      	cmp	r1, #29
 80140a0:	d82c      	bhi.n	80140fc <__sflush_r+0xb8>
 80140a2:	4a2a      	ldr	r2, [pc, #168]	; (801414c <__sflush_r+0x108>)
 80140a4:	40ca      	lsrs	r2, r1
 80140a6:	07d6      	lsls	r6, r2, #31
 80140a8:	d528      	bpl.n	80140fc <__sflush_r+0xb8>
 80140aa:	2200      	movs	r2, #0
 80140ac:	6062      	str	r2, [r4, #4]
 80140ae:	6922      	ldr	r2, [r4, #16]
 80140b0:	04d9      	lsls	r1, r3, #19
 80140b2:	6022      	str	r2, [r4, #0]
 80140b4:	d504      	bpl.n	80140c0 <__sflush_r+0x7c>
 80140b6:	1c42      	adds	r2, r0, #1
 80140b8:	d101      	bne.n	80140be <__sflush_r+0x7a>
 80140ba:	682b      	ldr	r3, [r5, #0]
 80140bc:	b903      	cbnz	r3, 80140c0 <__sflush_r+0x7c>
 80140be:	6560      	str	r0, [r4, #84]	; 0x54
 80140c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140c2:	602f      	str	r7, [r5, #0]
 80140c4:	2900      	cmp	r1, #0
 80140c6:	d0ca      	beq.n	801405e <__sflush_r+0x1a>
 80140c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140cc:	4299      	cmp	r1, r3
 80140ce:	d002      	beq.n	80140d6 <__sflush_r+0x92>
 80140d0:	4628      	mov	r0, r5
 80140d2:	f7ff f8bd 	bl	8013250 <_free_r>
 80140d6:	2000      	movs	r0, #0
 80140d8:	6360      	str	r0, [r4, #52]	; 0x34
 80140da:	e7c1      	b.n	8014060 <__sflush_r+0x1c>
 80140dc:	6a21      	ldr	r1, [r4, #32]
 80140de:	2301      	movs	r3, #1
 80140e0:	4628      	mov	r0, r5
 80140e2:	47b0      	blx	r6
 80140e4:	1c41      	adds	r1, r0, #1
 80140e6:	d1c7      	bne.n	8014078 <__sflush_r+0x34>
 80140e8:	682b      	ldr	r3, [r5, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d0c4      	beq.n	8014078 <__sflush_r+0x34>
 80140ee:	2b1d      	cmp	r3, #29
 80140f0:	d001      	beq.n	80140f6 <__sflush_r+0xb2>
 80140f2:	2b16      	cmp	r3, #22
 80140f4:	d101      	bne.n	80140fa <__sflush_r+0xb6>
 80140f6:	602f      	str	r7, [r5, #0]
 80140f8:	e7b1      	b.n	801405e <__sflush_r+0x1a>
 80140fa:	89a3      	ldrh	r3, [r4, #12]
 80140fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014100:	81a3      	strh	r3, [r4, #12]
 8014102:	e7ad      	b.n	8014060 <__sflush_r+0x1c>
 8014104:	690f      	ldr	r7, [r1, #16]
 8014106:	2f00      	cmp	r7, #0
 8014108:	d0a9      	beq.n	801405e <__sflush_r+0x1a>
 801410a:	0793      	lsls	r3, r2, #30
 801410c:	bf18      	it	ne
 801410e:	2300      	movne	r3, #0
 8014110:	680e      	ldr	r6, [r1, #0]
 8014112:	bf08      	it	eq
 8014114:	694b      	ldreq	r3, [r1, #20]
 8014116:	eba6 0807 	sub.w	r8, r6, r7
 801411a:	600f      	str	r7, [r1, #0]
 801411c:	608b      	str	r3, [r1, #8]
 801411e:	f1b8 0f00 	cmp.w	r8, #0
 8014122:	dd9c      	ble.n	801405e <__sflush_r+0x1a>
 8014124:	4643      	mov	r3, r8
 8014126:	463a      	mov	r2, r7
 8014128:	4628      	mov	r0, r5
 801412a:	6a21      	ldr	r1, [r4, #32]
 801412c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801412e:	47b0      	blx	r6
 8014130:	2800      	cmp	r0, #0
 8014132:	dc06      	bgt.n	8014142 <__sflush_r+0xfe>
 8014134:	89a3      	ldrh	r3, [r4, #12]
 8014136:	f04f 30ff 	mov.w	r0, #4294967295
 801413a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801413e:	81a3      	strh	r3, [r4, #12]
 8014140:	e78e      	b.n	8014060 <__sflush_r+0x1c>
 8014142:	4407      	add	r7, r0
 8014144:	eba8 0800 	sub.w	r8, r8, r0
 8014148:	e7e9      	b.n	801411e <__sflush_r+0xda>
 801414a:	bf00      	nop
 801414c:	20400001 	.word	0x20400001

08014150 <_fflush_r>:
 8014150:	b538      	push	{r3, r4, r5, lr}
 8014152:	690b      	ldr	r3, [r1, #16]
 8014154:	4605      	mov	r5, r0
 8014156:	460c      	mov	r4, r1
 8014158:	b913      	cbnz	r3, 8014160 <_fflush_r+0x10>
 801415a:	2500      	movs	r5, #0
 801415c:	4628      	mov	r0, r5
 801415e:	bd38      	pop	{r3, r4, r5, pc}
 8014160:	b118      	cbz	r0, 801416a <_fflush_r+0x1a>
 8014162:	6983      	ldr	r3, [r0, #24]
 8014164:	b90b      	cbnz	r3, 801416a <_fflush_r+0x1a>
 8014166:	f7ff fa93 	bl	8013690 <__sinit>
 801416a:	4b14      	ldr	r3, [pc, #80]	; (80141bc <_fflush_r+0x6c>)
 801416c:	429c      	cmp	r4, r3
 801416e:	d11b      	bne.n	80141a8 <_fflush_r+0x58>
 8014170:	686c      	ldr	r4, [r5, #4]
 8014172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d0ef      	beq.n	801415a <_fflush_r+0xa>
 801417a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801417c:	07d0      	lsls	r0, r2, #31
 801417e:	d404      	bmi.n	801418a <_fflush_r+0x3a>
 8014180:	0599      	lsls	r1, r3, #22
 8014182:	d402      	bmi.n	801418a <_fflush_r+0x3a>
 8014184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014186:	f7ff fb33 	bl	80137f0 <__retarget_lock_acquire_recursive>
 801418a:	4628      	mov	r0, r5
 801418c:	4621      	mov	r1, r4
 801418e:	f7ff ff59 	bl	8014044 <__sflush_r>
 8014192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014194:	4605      	mov	r5, r0
 8014196:	07da      	lsls	r2, r3, #31
 8014198:	d4e0      	bmi.n	801415c <_fflush_r+0xc>
 801419a:	89a3      	ldrh	r3, [r4, #12]
 801419c:	059b      	lsls	r3, r3, #22
 801419e:	d4dd      	bmi.n	801415c <_fflush_r+0xc>
 80141a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141a2:	f7ff fb26 	bl	80137f2 <__retarget_lock_release_recursive>
 80141a6:	e7d9      	b.n	801415c <_fflush_r+0xc>
 80141a8:	4b05      	ldr	r3, [pc, #20]	; (80141c0 <_fflush_r+0x70>)
 80141aa:	429c      	cmp	r4, r3
 80141ac:	d101      	bne.n	80141b2 <_fflush_r+0x62>
 80141ae:	68ac      	ldr	r4, [r5, #8]
 80141b0:	e7df      	b.n	8014172 <_fflush_r+0x22>
 80141b2:	4b04      	ldr	r3, [pc, #16]	; (80141c4 <_fflush_r+0x74>)
 80141b4:	429c      	cmp	r4, r3
 80141b6:	bf08      	it	eq
 80141b8:	68ec      	ldreq	r4, [r5, #12]
 80141ba:	e7da      	b.n	8014172 <_fflush_r+0x22>
 80141bc:	08014a84 	.word	0x08014a84
 80141c0:	08014aa4 	.word	0x08014aa4
 80141c4:	08014a64 	.word	0x08014a64

080141c8 <_lseek_r>:
 80141c8:	b538      	push	{r3, r4, r5, lr}
 80141ca:	4604      	mov	r4, r0
 80141cc:	4608      	mov	r0, r1
 80141ce:	4611      	mov	r1, r2
 80141d0:	2200      	movs	r2, #0
 80141d2:	4d05      	ldr	r5, [pc, #20]	; (80141e8 <_lseek_r+0x20>)
 80141d4:	602a      	str	r2, [r5, #0]
 80141d6:	461a      	mov	r2, r3
 80141d8:	f7f1 ff74 	bl	80060c4 <_lseek>
 80141dc:	1c43      	adds	r3, r0, #1
 80141de:	d102      	bne.n	80141e6 <_lseek_r+0x1e>
 80141e0:	682b      	ldr	r3, [r5, #0]
 80141e2:	b103      	cbz	r3, 80141e6 <_lseek_r+0x1e>
 80141e4:	6023      	str	r3, [r4, #0]
 80141e6:	bd38      	pop	{r3, r4, r5, pc}
 80141e8:	20001a34 	.word	0x20001a34

080141ec <__swhatbuf_r>:
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	460e      	mov	r6, r1
 80141f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141f4:	4614      	mov	r4, r2
 80141f6:	2900      	cmp	r1, #0
 80141f8:	461d      	mov	r5, r3
 80141fa:	b096      	sub	sp, #88	; 0x58
 80141fc:	da07      	bge.n	801420e <__swhatbuf_r+0x22>
 80141fe:	2300      	movs	r3, #0
 8014200:	602b      	str	r3, [r5, #0]
 8014202:	89b3      	ldrh	r3, [r6, #12]
 8014204:	061a      	lsls	r2, r3, #24
 8014206:	d410      	bmi.n	801422a <__swhatbuf_r+0x3e>
 8014208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801420c:	e00e      	b.n	801422c <__swhatbuf_r+0x40>
 801420e:	466a      	mov	r2, sp
 8014210:	f000 f8b4 	bl	801437c <_fstat_r>
 8014214:	2800      	cmp	r0, #0
 8014216:	dbf2      	blt.n	80141fe <__swhatbuf_r+0x12>
 8014218:	9a01      	ldr	r2, [sp, #4]
 801421a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801421e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014222:	425a      	negs	r2, r3
 8014224:	415a      	adcs	r2, r3
 8014226:	602a      	str	r2, [r5, #0]
 8014228:	e7ee      	b.n	8014208 <__swhatbuf_r+0x1c>
 801422a:	2340      	movs	r3, #64	; 0x40
 801422c:	2000      	movs	r0, #0
 801422e:	6023      	str	r3, [r4, #0]
 8014230:	b016      	add	sp, #88	; 0x58
 8014232:	bd70      	pop	{r4, r5, r6, pc}

08014234 <__smakebuf_r>:
 8014234:	898b      	ldrh	r3, [r1, #12]
 8014236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014238:	079d      	lsls	r5, r3, #30
 801423a:	4606      	mov	r6, r0
 801423c:	460c      	mov	r4, r1
 801423e:	d507      	bpl.n	8014250 <__smakebuf_r+0x1c>
 8014240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014244:	6023      	str	r3, [r4, #0]
 8014246:	6123      	str	r3, [r4, #16]
 8014248:	2301      	movs	r3, #1
 801424a:	6163      	str	r3, [r4, #20]
 801424c:	b002      	add	sp, #8
 801424e:	bd70      	pop	{r4, r5, r6, pc}
 8014250:	466a      	mov	r2, sp
 8014252:	ab01      	add	r3, sp, #4
 8014254:	f7ff ffca 	bl	80141ec <__swhatbuf_r>
 8014258:	9900      	ldr	r1, [sp, #0]
 801425a:	4605      	mov	r5, r0
 801425c:	4630      	mov	r0, r6
 801425e:	f7ff f843 	bl	80132e8 <_malloc_r>
 8014262:	b948      	cbnz	r0, 8014278 <__smakebuf_r+0x44>
 8014264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014268:	059a      	lsls	r2, r3, #22
 801426a:	d4ef      	bmi.n	801424c <__smakebuf_r+0x18>
 801426c:	f023 0303 	bic.w	r3, r3, #3
 8014270:	f043 0302 	orr.w	r3, r3, #2
 8014274:	81a3      	strh	r3, [r4, #12]
 8014276:	e7e3      	b.n	8014240 <__smakebuf_r+0xc>
 8014278:	4b0d      	ldr	r3, [pc, #52]	; (80142b0 <__smakebuf_r+0x7c>)
 801427a:	62b3      	str	r3, [r6, #40]	; 0x28
 801427c:	89a3      	ldrh	r3, [r4, #12]
 801427e:	6020      	str	r0, [r4, #0]
 8014280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014284:	81a3      	strh	r3, [r4, #12]
 8014286:	9b00      	ldr	r3, [sp, #0]
 8014288:	6120      	str	r0, [r4, #16]
 801428a:	6163      	str	r3, [r4, #20]
 801428c:	9b01      	ldr	r3, [sp, #4]
 801428e:	b15b      	cbz	r3, 80142a8 <__smakebuf_r+0x74>
 8014290:	4630      	mov	r0, r6
 8014292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014296:	f000 f883 	bl	80143a0 <_isatty_r>
 801429a:	b128      	cbz	r0, 80142a8 <__smakebuf_r+0x74>
 801429c:	89a3      	ldrh	r3, [r4, #12]
 801429e:	f023 0303 	bic.w	r3, r3, #3
 80142a2:	f043 0301 	orr.w	r3, r3, #1
 80142a6:	81a3      	strh	r3, [r4, #12]
 80142a8:	89a0      	ldrh	r0, [r4, #12]
 80142aa:	4305      	orrs	r5, r0
 80142ac:	81a5      	strh	r5, [r4, #12]
 80142ae:	e7cd      	b.n	801424c <__smakebuf_r+0x18>
 80142b0:	08013629 	.word	0x08013629

080142b4 <memchr>:
 80142b4:	4603      	mov	r3, r0
 80142b6:	b510      	push	{r4, lr}
 80142b8:	b2c9      	uxtb	r1, r1
 80142ba:	4402      	add	r2, r0
 80142bc:	4293      	cmp	r3, r2
 80142be:	4618      	mov	r0, r3
 80142c0:	d101      	bne.n	80142c6 <memchr+0x12>
 80142c2:	2000      	movs	r0, #0
 80142c4:	e003      	b.n	80142ce <memchr+0x1a>
 80142c6:	7804      	ldrb	r4, [r0, #0]
 80142c8:	3301      	adds	r3, #1
 80142ca:	428c      	cmp	r4, r1
 80142cc:	d1f6      	bne.n	80142bc <memchr+0x8>
 80142ce:	bd10      	pop	{r4, pc}

080142d0 <_read_r>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	4604      	mov	r4, r0
 80142d4:	4608      	mov	r0, r1
 80142d6:	4611      	mov	r1, r2
 80142d8:	2200      	movs	r2, #0
 80142da:	4d05      	ldr	r5, [pc, #20]	; (80142f0 <_read_r+0x20>)
 80142dc:	602a      	str	r2, [r5, #0]
 80142de:	461a      	mov	r2, r3
 80142e0:	f7f1 fe93 	bl	800600a <_read>
 80142e4:	1c43      	adds	r3, r0, #1
 80142e6:	d102      	bne.n	80142ee <_read_r+0x1e>
 80142e8:	682b      	ldr	r3, [r5, #0]
 80142ea:	b103      	cbz	r3, 80142ee <_read_r+0x1e>
 80142ec:	6023      	str	r3, [r4, #0]
 80142ee:	bd38      	pop	{r3, r4, r5, pc}
 80142f0:	20001a34 	.word	0x20001a34

080142f4 <_raise_r>:
 80142f4:	291f      	cmp	r1, #31
 80142f6:	b538      	push	{r3, r4, r5, lr}
 80142f8:	4604      	mov	r4, r0
 80142fa:	460d      	mov	r5, r1
 80142fc:	d904      	bls.n	8014308 <_raise_r+0x14>
 80142fe:	2316      	movs	r3, #22
 8014300:	6003      	str	r3, [r0, #0]
 8014302:	f04f 30ff 	mov.w	r0, #4294967295
 8014306:	bd38      	pop	{r3, r4, r5, pc}
 8014308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801430a:	b112      	cbz	r2, 8014312 <_raise_r+0x1e>
 801430c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014310:	b94b      	cbnz	r3, 8014326 <_raise_r+0x32>
 8014312:	4620      	mov	r0, r4
 8014314:	f000 f830 	bl	8014378 <_getpid_r>
 8014318:	462a      	mov	r2, r5
 801431a:	4601      	mov	r1, r0
 801431c:	4620      	mov	r0, r4
 801431e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014322:	f000 b817 	b.w	8014354 <_kill_r>
 8014326:	2b01      	cmp	r3, #1
 8014328:	d00a      	beq.n	8014340 <_raise_r+0x4c>
 801432a:	1c59      	adds	r1, r3, #1
 801432c:	d103      	bne.n	8014336 <_raise_r+0x42>
 801432e:	2316      	movs	r3, #22
 8014330:	6003      	str	r3, [r0, #0]
 8014332:	2001      	movs	r0, #1
 8014334:	e7e7      	b.n	8014306 <_raise_r+0x12>
 8014336:	2400      	movs	r4, #0
 8014338:	4628      	mov	r0, r5
 801433a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801433e:	4798      	blx	r3
 8014340:	2000      	movs	r0, #0
 8014342:	e7e0      	b.n	8014306 <_raise_r+0x12>

08014344 <raise>:
 8014344:	4b02      	ldr	r3, [pc, #8]	; (8014350 <raise+0xc>)
 8014346:	4601      	mov	r1, r0
 8014348:	6818      	ldr	r0, [r3, #0]
 801434a:	f7ff bfd3 	b.w	80142f4 <_raise_r>
 801434e:	bf00      	nop
 8014350:	20000010 	.word	0x20000010

08014354 <_kill_r>:
 8014354:	b538      	push	{r3, r4, r5, lr}
 8014356:	2300      	movs	r3, #0
 8014358:	4d06      	ldr	r5, [pc, #24]	; (8014374 <_kill_r+0x20>)
 801435a:	4604      	mov	r4, r0
 801435c:	4608      	mov	r0, r1
 801435e:	4611      	mov	r1, r2
 8014360:	602b      	str	r3, [r5, #0]
 8014362:	f7f1 fe38 	bl	8005fd6 <_kill>
 8014366:	1c43      	adds	r3, r0, #1
 8014368:	d102      	bne.n	8014370 <_kill_r+0x1c>
 801436a:	682b      	ldr	r3, [r5, #0]
 801436c:	b103      	cbz	r3, 8014370 <_kill_r+0x1c>
 801436e:	6023      	str	r3, [r4, #0]
 8014370:	bd38      	pop	{r3, r4, r5, pc}
 8014372:	bf00      	nop
 8014374:	20001a34 	.word	0x20001a34

08014378 <_getpid_r>:
 8014378:	f7f1 be26 	b.w	8005fc8 <_getpid>

0801437c <_fstat_r>:
 801437c:	b538      	push	{r3, r4, r5, lr}
 801437e:	2300      	movs	r3, #0
 8014380:	4d06      	ldr	r5, [pc, #24]	; (801439c <_fstat_r+0x20>)
 8014382:	4604      	mov	r4, r0
 8014384:	4608      	mov	r0, r1
 8014386:	4611      	mov	r1, r2
 8014388:	602b      	str	r3, [r5, #0]
 801438a:	f7f1 fe82 	bl	8006092 <_fstat>
 801438e:	1c43      	adds	r3, r0, #1
 8014390:	d102      	bne.n	8014398 <_fstat_r+0x1c>
 8014392:	682b      	ldr	r3, [r5, #0]
 8014394:	b103      	cbz	r3, 8014398 <_fstat_r+0x1c>
 8014396:	6023      	str	r3, [r4, #0]
 8014398:	bd38      	pop	{r3, r4, r5, pc}
 801439a:	bf00      	nop
 801439c:	20001a34 	.word	0x20001a34

080143a0 <_isatty_r>:
 80143a0:	b538      	push	{r3, r4, r5, lr}
 80143a2:	2300      	movs	r3, #0
 80143a4:	4d05      	ldr	r5, [pc, #20]	; (80143bc <_isatty_r+0x1c>)
 80143a6:	4604      	mov	r4, r0
 80143a8:	4608      	mov	r0, r1
 80143aa:	602b      	str	r3, [r5, #0]
 80143ac:	f7f1 fe80 	bl	80060b0 <_isatty>
 80143b0:	1c43      	adds	r3, r0, #1
 80143b2:	d102      	bne.n	80143ba <_isatty_r+0x1a>
 80143b4:	682b      	ldr	r3, [r5, #0]
 80143b6:	b103      	cbz	r3, 80143ba <_isatty_r+0x1a>
 80143b8:	6023      	str	r3, [r4, #0]
 80143ba:	bd38      	pop	{r3, r4, r5, pc}
 80143bc:	20001a34 	.word	0x20001a34

080143c0 <_init>:
 80143c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143c2:	bf00      	nop
 80143c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143c6:	bc08      	pop	{r3}
 80143c8:	469e      	mov	lr, r3
 80143ca:	4770      	bx	lr

080143cc <_fini>:
 80143cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ce:	bf00      	nop
 80143d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143d2:	bc08      	pop	{r3}
 80143d4:	469e      	mov	lr, r3
 80143d6:	4770      	bx	lr
