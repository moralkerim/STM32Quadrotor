
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800ed50  0800ed50  0001ed50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f260  0800f260  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800f260  0800f260  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f260  0800f260  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f260  0800f260  0001f260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f268  0800f268  0001f268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d4c  20000078  0800f2e4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  0800f2e4  00020dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fb8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000469a  00000000  00000000  00046055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  0004a6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0004bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d976  00000000  00000000  0004d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ae7  00000000  00000000  0006a9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097285  00000000  00000000  0008248d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c4  00000000  00000000  00119768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ed34 	.word	0x0800ed34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800ed34 	.word	0x0800ed34

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HMC5883L_initialize+0x44>)
 8001180:	223c      	movs	r2, #60	; 0x3c
 8001182:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001184:	2378      	movs	r3, #120	; 0x78
 8001186:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HMC5883L_initialize+0x44>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b299      	uxth	r1, r3
 800118e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	2200      	movs	r2, #0
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <HMC5883L_initialize+0x48>)
 80011a2:	f004 fc7d 	bl	8005aa0 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f80c 	bl	80011c4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f829 	bl	8001204 <HMC5883L_setMode>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000094 	.word	0x20000094
 80011c0:	200000a8 	.word	0x200000a8

080011c4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HMC5883L_setGain+0x38>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b299      	uxth	r1, r3
 80011dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2201      	movs	r2, #1
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <HMC5883L_setGain+0x3c>)
 80011f0:	f004 fc56 	bl	8005aa0 <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000094 	.word	0x20000094
 8001200:	200000a8 	.word	0x200000a8

08001204 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HMC5883L_setMode+0x3c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b299      	uxth	r1, r3
 8001218:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2202      	movs	r2, #2
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <HMC5883L_setMode+0x40>)
 800122c:	f004 fc38 	bl	8005aa0 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HMC5883L_setMode+0x44>)
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000094 	.word	0x20000094
 8001244:	200000a8 	.word	0x200000a8
 8001248:	2000009e 	.word	0x2000009e

0800124c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af04      	add	r7, sp, #16
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HMC5883L_getMagData+0x84>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b299      	uxth	r1, r3
 800125e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2306      	movs	r3, #6
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <HMC5883L_getMagData+0x8c>)
 8001272:	f004 fd0f 	bl	8005c94 <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HMC5883L_getMagData+0x90>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <HMC5883L_getMagData+0x38>
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ffc0 	bl	8001204 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HMC5883L_getMagData+0x88>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000094 	.word	0x20000094
 80012d4:	20000098 	.word	0x20000098
 80012d8:	200000a8 	.word	0x200000a8
 80012dc:	2000009e 	.word	0x2000009e

080012e0 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 80012ee:	2301      	movs	r3, #1
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	1dbb      	adds	r3, r7, #6
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	22d0      	movs	r2, #208	; 0xd0
 80012fe:	21ef      	movs	r1, #239	; 0xef
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <read_chip_id+0x3c>)
 8001302:	f004 fcc7 	bl	8005c94 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	2b55      	cmp	r3, #85	; 0x55
 800130a:	d001      	beq.n	8001310 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800130c:	2301      	movs	r3, #1
 800130e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001310:	79fb      	ldrb	r3, [r7, #7]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000a8 	.word	0x200000a8

08001320 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 800132c:	2300      	movs	r3, #0
 800132e:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d81a      	bhi.n	800136c <set_oss+0x4c>
 8001336:	a201      	add	r2, pc, #4	; (adr r2, 800133c <set_oss+0x1c>)
 8001338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001355 	.word	0x08001355
 8001344:	0800135d 	.word	0x0800135d
 8001348:	08001365 	.word	0x08001365
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2205      	movs	r2, #5
 8001350:	705a      	strb	r2, [r3, #1]
			break;
 8001352:	e00f      	b.n	8001374 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2208      	movs	r2, #8
 8001358:	705a      	strb	r2, [r3, #1]
			break;
 800135a:	e00b      	b.n	8001374 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	220e      	movs	r2, #14
 8001360:	705a      	strb	r2, [r3, #1]
			break;
 8001362:	e007      	b.n	8001374 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	221a      	movs	r2, #26
 8001368:	705a      	strb	r2, [r3, #1]
			break;
 800136a:	e003      	b.n	8001374 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2208      	movs	r2, #8
 8001370:	705a      	strb	r2, [r3, #1]
			break;
 8001372:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001384:	2301      	movs	r3, #1
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2302      	movs	r3, #2
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	22f4      	movs	r2, #244	; 0xf4
 8001396:	21ee      	movs	r1, #238	; 0xee
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <set_oss+0x88>)
 800139a:	f004 fb81 	bl	8005aa0 <HAL_I2C_Mem_Write>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000a8 	.word	0x200000a8

080013ac <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 80013da:	2301      	movs	r3, #1
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2316      	movs	r3, #22
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	22aa      	movs	r2, #170	; 0xaa
 80013ec:	21ef      	movs	r1, #239	; 0xef
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <read_calib_data+0xe4>)
 80013f0:	f004 fc50 	bl	8005c94 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013fa:	e03e      	b.n	800147a <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80013fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001406:	4413      	add	r3, r2
 8001408:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b219      	sxth	r1, r3
 8001410:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001414:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001418:	4413      	add	r3, r2
 800141a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800141e:	b21a      	sxth	r2, r3
 8001420:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4403      	add	r3, r0
 800142a:	430a      	orrs	r2, r1
 800142c:	b212      	sxth	r2, r2
 800142e:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2da      	uxtb	r2, r3
 8001448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	440b      	add	r3, r1
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 800146a:	2302      	movs	r3, #2
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001474:	3301      	adds	r3, #1
 8001476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800147a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147e:	2b0b      	cmp	r3, #11
 8001480:	d9bc      	bls.n	80013fc <read_calib_data+0x50>
		}
	}

	return ret_val;
 8001482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001486:	4618      	mov	r0, r3
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000a8 	.word	0x200000a8

08001494 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2204      	movs	r2, #4
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00d fb36 	bl	800eb14 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80014a8:	687c      	ldr	r4, [r7, #4]
 80014aa:	f7ff ff19 	bl	80012e0 <read_chip_id>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	687c      	ldr	r4, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff77 	bl	80013ac <read_calib_data>
 80014be:	4603      	mov	r3, r0
 80014c0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3338      	adds	r3, #56	; 0x38
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff28 	bl	8001320 <set_oss>
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 80014de:	232e      	movs	r3, #46	; 0x2e
 80014e0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80014e2:	2301      	movs	r3, #1
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	22f4      	movs	r2, #244	; 0xf4
 80014f2:	21ee      	movs	r1, #238	; 0xee
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <write_ut+0x2c>)
 80014f6:	f004 fad3 	bl	8005aa0 <HAL_I2C_Mem_Write>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200000a8 	.word	0x200000a8

08001508 <read_ut>:

int32_t read_ut (void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800150e:	2301      	movs	r3, #1
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2302      	movs	r3, #2
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	22f6      	movs	r2, #246	; 0xf6
 800151e:	21ef      	movs	r1, #239	; 0xef
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <read_ut+0x30>)
 8001522:	f004 fbb7 	bl	8005c94 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001526:	793b      	ldrb	r3, [r7, #4]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	797a      	ldrb	r2, [r7, #5]
 800152c:	4313      	orrs	r3, r2
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000a8 	.word	0x200000a8

0800153c <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
	float temp = 0;
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdc8 	bl	80010ec <__aeabi_f2iz>
 800155c:	4602      	mov	r2, r0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	8912      	ldrh	r2, [r2, #8]
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	13db      	asrs	r3, r3, #15
 800156e:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001576:	02da      	lsls	r2, r3, #11
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800157e:	4619      	mov	r1, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	440b      	add	r3, r1
 8001584:	fb92 f3f3 	sdiv	r3, r2, r3
 8001588:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	441a      	add	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	3308      	adds	r3, #8
 800159a:	111b      	asrs	r3, r3, #4
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb75 	bl	8000c8c <__aeabi_i2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <get_temp+0xa4>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fbc4 	bl	8000d34 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <get_temp+0xa8>)
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fd66 	bl	8001084 <__aeabi_fcmple>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <get_temp+0x90>
 80015be:	490a      	ldr	r1, [pc, #40]	; (80015e8 <get_temp+0xac>)
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd69 	bl	8001098 <__aeabi_fcmpge>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 80015d4:	68fb      	ldr	r3, [r7, #12]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	3dcccccd 	.word	0x3dcccccd
 80015e4:	c2200000 	.word	0xc2200000
 80015e8:	42aa0000 	.word	0x42aa0000

080015ec <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <write_up+0x38>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	803b      	strh	r3, [r7, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8001600:	2334      	movs	r3, #52	; 0x34
 8001602:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001604:	2301      	movs	r3, #1
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2301      	movs	r3, #1
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	463b      	mov	r3, r7
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	22f4      	movs	r2, #244	; 0xf4
 8001614:	21ee      	movs	r1, #238	; 0xee
 8001616:	4804      	ldr	r0, [pc, #16]	; (8001628 <write_up+0x3c>)
 8001618:	f004 fa42 	bl	8005aa0 <HAL_I2C_Mem_Write>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	0800ed50 	.word	0x0800ed50
 8001628:	200000a8 	.word	0x200000a8

0800162c <read_up>:

int32_t read_up (oss_t oss)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af04      	add	r7, sp, #16
 8001632:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <read_up+0x54>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	813b      	strh	r3, [r7, #8]
 800163a:	2300      	movs	r3, #0
 800163c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8001642:	2301      	movs	r3, #1
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2303      	movs	r3, #3
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	22f6      	movs	r2, #246	; 0xf6
 8001654:	21ef      	movs	r1, #239	; 0xef
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <read_up+0x58>)
 8001658:	f004 fb1c 	bl	8005c94 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800165c:	7a3b      	ldrb	r3, [r7, #8]
 800165e:	041a      	lsls	r2, r3, #16
 8001660:	7a7b      	ldrb	r3, [r7, #9]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	4413      	add	r3, r2
 8001666:	7aba      	ldrb	r2, [r7, #10]
 8001668:	441a      	add	r2, r3
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	f1c3 0308 	rsb	r3, r3, #8
 8001670:	fa42 f303 	asr.w	r3, r2, r3
 8001674:	60fb      	str	r3, [r7, #12]
	return up;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	0800ed50 	.word	0x0800ed50
 8001684:	200000a8 	.word	0x200000a8

08001688 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001688:	b084      	sub	sp, #16
 800168a:	b480      	push	{r7}
 800168c:	b089      	sub	sp, #36	; 0x24
 800168e:	af00      	add	r7, sp, #0
 8001690:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001694:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80016a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80016a6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80016a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80016ac:	461a      	mov	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fb03 f303 	mul.w	r3, r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da01      	bge.n	80016bc <get_pressure+0x34>
 80016b8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80016bc:	131b      	asrs	r3, r3, #12
 80016be:	fb03 f302 	mul.w	r3, r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da01      	bge.n	80016ca <get_pressure+0x42>
 80016c6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80016ca:	12db      	asrs	r3, r3, #11
 80016cc:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 80016ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016d2:	461a      	mov	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fb03 f302 	mul.w	r3, r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da01      	bge.n	80016e2 <get_pressure+0x5a>
 80016de:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80016e2:	12db      	asrs	r3, r3, #11
 80016e4:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 80016ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80016f2:	009a      	lsls	r2, r3, #2
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4413      	add	r3, r2
 80016f8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80016fc:	4093      	lsls	r3, r2
 80016fe:	3302      	adds	r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	da00      	bge.n	8001706 <get_pressure+0x7e>
 8001704:	3303      	adds	r3, #3
 8001706:	109b      	asrs	r3, r3, #2
 8001708:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800170a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800170e:	461a      	mov	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fb03 f302 	mul.w	r3, r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	da02      	bge.n	8001720 <get_pressure+0x98>
 800171a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800171e:	331f      	adds	r3, #31
 8001720:	135b      	asrs	r3, r3, #13
 8001722:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001724:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001728:	461a      	mov	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fb03 f303 	mul.w	r3, r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	da01      	bge.n	8001738 <get_pressure+0xb0>
 8001734:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001738:	131b      	asrs	r3, r3, #12
 800173a:	fb03 f302 	mul.w	r3, r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	da02      	bge.n	8001748 <get_pressure+0xc0>
 8001742:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001746:	33ff      	adds	r3, #255	; 0xff
 8001748:	141b      	asrs	r3, r3, #16
 800174a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	3302      	adds	r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	da00      	bge.n	800175a <get_pressure+0xd2>
 8001758:	3303      	adds	r3, #3
 800175a:	109b      	asrs	r3, r3, #2
 800175c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800175e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001768:	fb03 f302 	mul.w	r3, r3, r2
 800176c:	0bdb      	lsrs	r3, r3, #15
 800176e:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800177c:	4611      	mov	r1, r2
 800177e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001782:	410a      	asrs	r2, r1
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db06      	blt.n	800179e <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	005a      	lsls	r2, r3, #1
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	e005      	b.n	80017aa <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da00      	bge.n	80017b2 <get_pressure+0x12a>
 80017b0:	33ff      	adds	r3, #255	; 0xff
 80017b2:	121b      	asrs	r3, r3, #8
 80017b4:	461a      	mov	r2, r3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da00      	bge.n	80017be <get_pressure+0x136>
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	fb03 f302 	mul.w	r3, r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f640 32de 	movw	r2, #3038	; 0xbde
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da02      	bge.n	80017da <get_pressure+0x152>
 80017d4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017d8:	33ff      	adds	r3, #255	; 0xff
 80017da:	141b      	asrs	r3, r3, #16
 80017dc:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <get_pressure+0x194>)
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da02      	bge.n	80017f0 <get_pressure+0x168>
 80017ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017ee:	33ff      	adds	r3, #255	; 0xff
 80017f0:	141b      	asrs	r3, r3, #16
 80017f2:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4413      	add	r3, r2
 80017fa:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da00      	bge.n	8001804 <get_pressure+0x17c>
 8001802:	330f      	adds	r3, #15
 8001804:	111b      	asrs	r3, r3, #4
 8001806:	461a      	mov	r2, r3
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	61fb      	str	r3, [r7, #28]

	return p;
 800180e:	69fb      	ldr	r3, [r7, #28]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3724      	adds	r7, #36	; 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	b004      	add	sp, #16
 800181a:	4770      	bx	lr
 800181c:	ffffe343 	.word	0xffffe343

08001820 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa2a 	bl	8000c8c <__aeabi_i2f>
 8001838:	4603      	mov	r3, r0
 800183a:	4923      	ldr	r1, [pc, #140]	; (80018c8 <get_altitude+0xa8>)
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fb2d 	bl	8000e9c <__aeabi_fdiv>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fde7 	bl	8000418 <__aeabi_f2d>
 800184a:	a31b      	add	r3, pc, #108	; (adr r3, 80018b8 <get_altitude+0x98>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f00b f936 	bl	800cac0 <pow>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	491b      	ldr	r1, [pc, #108]	; (80018cc <get_altitude+0xac>)
 800185e:	f7fe fc7b 	bl	8000158 <__aeabi_dsub>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a315      	add	r3, pc, #84	; (adr r3, 80018c0 <get_altitude+0xa0>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fe2a 	bl	80004c8 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f8fc 	bl	8000a78 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001884:	4912      	ldr	r1, [pc, #72]	; (80018d0 <get_altitude+0xb0>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff fbfc 	bl	8001084 <__aeabi_fcmple>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <get_altitude+0x80>
 8001892:	4910      	ldr	r1, [pc, #64]	; (80018d4 <get_altitude+0xb4>)
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fbff 	bl	8001098 <__aeabi_fcmpge>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2205      	movs	r2, #5
 80018a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	ccd9456c 	.word	0xccd9456c
 80018bc:	3fc85b95 	.word	0x3fc85b95
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40e5a540 	.word	0x40e5a540
 80018c8:	47c5e680 	.word	0x47c5e680
 80018cc:	3ff00000 	.word	0x3ff00000
 80018d0:	c3fa0000 	.word	0xc3fa0000
 80018d4:	460ca000 	.word	0x460ca000

080018d8 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	return b_counter;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <get_b_counter+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	200000a0 	.word	0x200000a0

080018ec <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

	b_counter++;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <set_b_counter+0x30>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <set_b_counter+0x30>)
 80018fc:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <set_b_counter+0x30>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4293      	cmp	r3, r2
 8001908:	d202      	bcs.n	8001910 <set_b_counter+0x24>
		b_counter = 0;
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <set_b_counter+0x30>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
	}
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200000a0 	.word	0x200000a0

08001920 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8001926:	2351      	movs	r3, #81	; 0x51
 8001928:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 800192a:	1dba      	adds	r2, r7, #6
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	21e0      	movs	r1, #224	; 0xe0
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <request_range+0x2c>)
 8001936:	f003 fd55 	bl	80053e4 <HAL_I2C_Master_Transmit>
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <request_range+0x30>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000a8 	.word	0x200000a8
 8001950:	20000000 	.word	0x20000000

08001954 <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <getRange+0x34>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
			write = 1;
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <getRange+0x38>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8001966:	1d3a      	adds	r2, r7, #4
 8001968:	2364      	movs	r3, #100	; 0x64
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2302      	movs	r3, #2
 800196e:	21e1      	movs	r1, #225	; 0xe1
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <getRange+0x3c>)
 8001972:	f003 fe35 	bl	80055e0 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	797a      	ldrb	r2, [r7, #5]
 800197c:	4313      	orrs	r3, r2



	//return -1;

}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000dac 	.word	0x20000dac
 800198c:	20000000 	.word	0x20000000
 8001990:	200000a8 	.word	0x200000a8

08001994 <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	u_counter++;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <set_ucounter+0x30>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <set_ucounter+0x30>)
 80019a4:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <set_ucounter+0x30>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d202      	bcs.n	80019b8 <set_ucounter+0x24>
		u_counter = 0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <set_ucounter+0x30>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
	}
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200000a4 	.word	0x200000a4

080019c8 <get_ucounter>:

int get_ucounter(void) {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return u_counter;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <get_ucounter+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	200000a4 	.word	0x200000a4

080019dc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f00b f937 	bl	800cc70 <asinf>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f00a fed9 	bl	800c7cc <atanf>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f00b f943 	bl	800ccbc <atan2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f00a ffcb 	bl	800c9e4 <cosf>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f00a fff7 	bl	800ca54 <sinf>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f00b f921 	bl	800ccc0 <sqrtf>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f002 f934 	bl	8003cfe <_ZNSaIfED1Ev>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 f917 	bl	8003cde <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ffeb 	bl	8001aa0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	0000      	movs	r0, r0
	...

08001ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001adc:	f002 fe06 	bl	80046ec <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001ae0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ae4:	f002 fe64 	bl	80047b0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae8:	f000 f8d4 	bl	8001c94 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aec:	f000 fbe0 	bl	80022b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001af0:	f000 fbc0 	bl	8002274 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001af4:	f000 f91e 	bl	8001d34 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8001af8:	f000 fa1a 	bl	8001f30 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001afc:	f000 f94e 	bl	8001d9c <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001b00:	f000 fb88 	bl	8002214 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8001b04:	f000 fa70 	bl	8001fe8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001b08:	f000 faf8 	bl	80020fc <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8001b0c:	f000 fb54 	bl	80021b8 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8001b10:	2209      	movs	r2, #9
 8001b12:	4951      	ldr	r1, [pc, #324]	; (8001c58 <main+0x180>)
 8001b14:	4851      	ldr	r0, [pc, #324]	; (8001c5c <main+0x184>)
 8001b16:	f007 f8b7 	bl	8008c88 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8001b1a:	f000 fc4d 	bl	80023b8 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001b1e:	4850      	ldr	r0, [pc, #320]	; (8001c60 <main+0x188>)
 8001b20:	f7ff fcb8 	bl	8001494 <bmp_init>
  HMC5883L_initialize();
 8001b24:	f7ff fb28 	bl	8001178 <HMC5883L_initialize>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8001b28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b2c:	f002 fe40 	bl	80047b0 <HAL_Delay>
  //EKF.roll_bias=GyroErr(GYRO_X_ADDR)/14.375; EKF.pitch_bias=-1*GyroErr(GYRO_Y_ADDR)/14.375;
  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001b30:	201d      	movs	r0, #29
 8001b32:	f001 fb65 	bl	8003200 <_Z7GyroErrh>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <main+0x18c>)
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	201f      	movs	r0, #31
 8001b3e:	f001 fb5f 	bl	8003200 <_Z7GyroErrh>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <main+0x190>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	2021      	movs	r0, #33	; 0x21
 8001b4a:	f001 fb59 	bl	8003200 <_Z7GyroErrh>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a46      	ldr	r2, [pc, #280]	; (8001c6c <main+0x194>)
 8001b52:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8001b54:	2032      	movs	r0, #50	; 0x32
 8001b56:	f001 fb81 	bl	800325c <_Z6AccErrh>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc5b 	bl	8000418 <__aeabi_f2d>
 8001b62:	a33b      	add	r3, pc, #236	; (adr r3, 8001c50 <main+0x178>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fcae 	bl	80004c8 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ff80 	bl	8000a78 <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <main+0x198>)
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	2034      	movs	r0, #52	; 0x34
 8001b80:	f001 fb6c 	bl	800325c <_Z6AccErrh>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc46 	bl	8000418 <__aeabi_f2d>
 8001b8c:	a330      	add	r3, pc, #192	; (adr r3, 8001c50 <main+0x178>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fc99 	bl	80004c8 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7fe ff6b 	bl	8000a78 <__aeabi_d2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <main+0x19c>)
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	2036      	movs	r0, #54	; 0x36
 8001baa:	f001 fb57 	bl	800325c <_Z6AccErrh>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc31 	bl	8000418 <__aeabi_f2d>
 8001bb6:	a326      	add	r3, pc, #152	; (adr r3, 8001c50 <main+0x178>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fc84 	bl	80004c8 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff56 	bl	8000a78 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <main+0x1a0>)
 8001bd0:	6013      	str	r3, [r2, #0]
  //AccYh = 0.96009*AccYh - 0.42592*AccXh + 0.0091315*AccZh + 0.042165;
  //AccZh = 0.0091315*AccYh - 0.072464*AccXh + 0.98549*AccZh + 0.08443;

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8001bd2:	2032      	movs	r0, #50	; 0x32
 8001bd4:	f001 f80c 	bl	8002bf0 <_Z6AccOkuh>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f856 	bl	8000c8c <__aeabi_i2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <main+0x1a4>)
 8001be4:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8001be6:	2034      	movs	r0, #52	; 0x34
 8001be8:	f001 f802 	bl	8002bf0 <_Z6AccOkuh>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f84c 	bl	8000c8c <__aeabi_i2f>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <main+0x1a8>)
 8001bf8:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 8001bfa:	2036      	movs	r0, #54	; 0x36
 8001bfc:	f000 fff8 	bl	8002bf0 <_Z6AccOkuh>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f842 	bl	8000c8c <__aeabi_i2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <main+0x1ac>)
 8001c0c:	6013      	str	r3, [r2, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
  */

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001c0e:	481e      	ldr	r0, [pc, #120]	; (8001c88 <main+0x1b0>)
 8001c10:	f005 fc06 	bl	8007420 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001c14:	481d      	ldr	r0, [pc, #116]	; (8001c8c <main+0x1b4>)
 8001c16:	f005 fbb9 	bl	800738c <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	481c      	ldr	r0, [pc, #112]	; (8001c90 <main+0x1b8>)
 8001c1e:	f005 fca1 	bl	8007564 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001c22:	2104      	movs	r1, #4
 8001c24:	481a      	ldr	r0, [pc, #104]	; (8001c90 <main+0x1b8>)
 8001c26:	f006 fdcd 	bl	80087c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <main+0x1b8>)
 8001c2e:	f006 fdc9 	bl	80087c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c32:	210c      	movs	r1, #12
 8001c34:	4816      	ldr	r0, [pc, #88]	; (8001c90 <main+0x1b8>)
 8001c36:	f005 fc95 	bl	8007564 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001c3a:	2108      	movs	r1, #8
 8001c3c:	4813      	ldr	r0, [pc, #76]	; (8001c8c <main+0x1b4>)
 8001c3e:	f005 fd8b 	bl	8007758 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  SendTelem();
 8001c42:	f000 ff25 	bl	8002a90 <_Z9SendTelemv>
	  Check_Arm();
 8001c46:	f000 fd4d 	bl	80026e4 <_Z9Check_Armv>
	  Check_Disarm();
 8001c4a:	f000 fdb1 	bl	80027b0 <_Z12Check_Disarmv>
	  SendTelem();
 8001c4e:	e7f8      	b.n	8001c42 <main+0x16a>
 8001c50:	8e8a71de 	.word	0x8e8a71de
 8001c54:	3f7ff2e4 	.word	0x3f7ff2e4
 8001c58:	20000d68 	.word	0x20000d68
 8001c5c:	2000021c 	.word	0x2000021c
 8001c60:	20000d28 	.word	0x20000d28
 8001c64:	20000304 	.word	0x20000304
 8001c68:	20000308 	.word	0x20000308
 8001c6c:	2000030c 	.word	0x2000030c
 8001c70:	20000310 	.word	0x20000310
 8001c74:	20000314 	.word	0x20000314
 8001c78:	20000318 	.word	0x20000318
 8001c7c:	200002ec 	.word	0x200002ec
 8001c80:	200002f0 	.word	0x200002f0
 8001c84:	200002f4 	.word	0x200002f4
 8001c88:	20000144 	.word	0x20000144
 8001c8c:	2000018c 	.word	0x2000018c
 8001c90:	200000fc 	.word	0x200000fc

08001c94 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	2228      	movs	r2, #40	; 0x28
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00c ff36 	bl	800eb14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 feeb 	bl	8006ab8 <HAL_RCC_OscConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001cf2:	f001 ffef 	bl	8003cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2102      	movs	r1, #2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 f951 	bl	8006fb8 <HAL_RCC_ClockConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001d26:	f001 ffd5 	bl	8003cd4 <Error_Handler>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3740      	adds	r7, #64	; 0x40
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <_ZL12MX_I2C1_Initv+0x60>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <_ZL12MX_I2C1_Initv+0x64>)
 8001d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d72:	f003 f9f3 	bl	800515c <HAL_I2C_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001d86:	f001 ffa5 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200000a8 	.word	0x200000a8
 8001d94:	40005400 	.word	0x40005400
 8001d98:	00061a80 	.word	0x00061a80

08001d9c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b092      	sub	sp, #72	; 0x48
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00c fea4 	bl	800eb14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dce:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <_ZL12MX_TIM1_Initv+0x190>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001dd2:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dd4:	2247      	movs	r2, #71	; 0x47
 8001dd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001dde:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001de0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001de4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dec:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001df8:	484b      	ldr	r0, [pc, #300]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dfa:	f005 fb63 	bl	80074c4 <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001e0e:	f001 ff61 	bl	8003cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4841      	ldr	r0, [pc, #260]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001e22:	f006 fd6d 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001e36:	f001 ff4d 	bl	8003cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	2360      	movs	r3, #96	; 0x60
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4832      	ldr	r0, [pc, #200]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001e60:	f005 ff1c 	bl	8007c9c <HAL_TIM_PWM_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf14      	ite	ne
 8001e6a:	2301      	movne	r3, #1
 8001e6c:	2300      	moveq	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001e74:	f001 ff2e 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4829      	ldr	r0, [pc, #164]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001e82:	f005 ff0b 	bl	8007c9c <HAL_TIM_PWM_ConfigChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001e96:	f001 ff1d 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4821      	ldr	r0, [pc, #132]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001ea4:	f005 fefa 	bl	8007c9c <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001eb8:	f001 ff0c 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4818      	ldr	r0, [pc, #96]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001ec6:	f005 fee9 	bl	8007c9c <HAL_TIM_PWM_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001eda:	f001 fefb 	bl	8003cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4809      	ldr	r0, [pc, #36]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001f02:	f006 fd5b 	bl	80089bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001f16:	f001 fedd 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f1a:	4803      	ldr	r0, [pc, #12]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001f1c:	f002 fa1e 	bl	800435c <HAL_TIM_MspPostInit>

}
 8001f20:	bf00      	nop
 8001f22:	3748      	adds	r7, #72	; 0x48
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200000fc 	.word	0x200000fc
 8001f2c:	40012c00 	.word	0x40012c00

08001f30 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	463b      	mov	r3, r7
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f56:	2247      	movs	r2, #71	; 0x47
 8001f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f62:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f74:	481b      	ldr	r0, [pc, #108]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f76:	f005 f9b9 	bl	80072ec <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001f8a:	f001 fea3 	bl	8003cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4812      	ldr	r0, [pc, #72]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f9c:	f005 ff3c 	bl	8007e18 <HAL_TIM_ConfigClockSource>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001fb0:	f001 fe90 	bl	8003cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fc2:	f006 fc9d 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001fd6:	f001 fe7d 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000144 	.word	0x20000144

08001fe8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002006:	463b      	mov	r3, r7
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002014:	4a38      	ldr	r2, [pc, #224]	; (80020f8 <_ZL12MX_TIM3_Initv+0x110>)
 8002016:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800201a:	2247      	movs	r2, #71	; 0x47
 800201c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002038:	482e      	ldr	r0, [pc, #184]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800203a:	f005 f957 	bl	80072ec <HAL_TIM_Base_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 800204e:	f001 fe41 	bl	8003cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002056:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4619      	mov	r1, r3
 800205e:	4825      	ldr	r0, [pc, #148]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002060:	f005 feda 	bl	8007e18 <HAL_TIM_ConfigClockSource>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8002074:	f001 fe2e 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002078:	481e      	ldr	r0, [pc, #120]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800207a:	f005 fb15 	bl	80076a8 <HAL_TIM_IC_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800208e:	f001 fe21 	bl	8003cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	4619      	mov	r1, r3
 80020a0:	4814      	ldr	r0, [pc, #80]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 80020a2:	f006 fc2d 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80020b6:	f001 fe0d 	bl	8003cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020ba:	2300      	movs	r3, #0
 80020bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020be:	2301      	movs	r3, #1
 80020c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	2208      	movs	r2, #8
 80020ce:	4619      	mov	r1, r3
 80020d0:	4808      	ldr	r0, [pc, #32]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 80020d2:	f005 fd4f 	bl	8007b74 <HAL_TIM_IC_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80020e6:	f001 fdf5 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000018c 	.word	0x2000018c
 80020f8:	40000400 	.word	0x40000400

080020fc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <_ZL12MX_TIM4_Initv+0xb8>)
 800211c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002120:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002124:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800212e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002132:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002140:	481b      	ldr	r0, [pc, #108]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002142:	f005 f8d3 	bl	80072ec <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8002156:	f001 fdbd 	bl	8003cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	4619      	mov	r1, r3
 8002166:	4812      	ldr	r0, [pc, #72]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002168:	f005 fe56 	bl	8007e18 <HAL_TIM_ConfigClockSource>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 800217c:	f001 fdaa 	bl	8003cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002188:	463b      	mov	r3, r7
 800218a:	4619      	mov	r1, r3
 800218c:	4808      	ldr	r0, [pc, #32]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800218e:	f006 fbb7 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80021a2:	f001 fd97 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200001d4 	.word	0x200001d4
 80021b4:	40000800 	.word	0x40000800

080021b8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <_ZL19MX_USART1_UART_Initv+0x58>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021f0:	f006 fc6b 	bl	8008aca <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002204:	f001 fd66 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000021c 	.word	0x2000021c
 8002210:	40013800 	.word	0x40013800

08002214 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <_ZL19MX_USART2_UART_Initv+0x58>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002222:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002238:	220c      	movs	r2, #12
 800223a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800224a:	f006 fc3e 	bl	8008aca <HAL_UART_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 800225e:	f001 fd39 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000025c 	.word	0x2000025c
 800226c:	40004400 	.word	0x40004400
 8002270:	000f4240 	.word	0x000f4240

08002274 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <_ZL11MX_DMA_Initv+0x38>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <_ZL11MX_DMA_Initv+0x38>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6153      	str	r3, [r2, #20]
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <_ZL11MX_DMA_Initv+0x38>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	200f      	movs	r0, #15
 8002298:	f002 fb85 	bl	80049a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800229c:	200f      	movs	r0, #15
 800229e:	f002 fb9e 	bl	80049de <HAL_NVIC_EnableIRQ>

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a37      	ldr	r2, [pc, #220]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800232a:	4820      	ldr	r0, [pc, #128]	; (80023ac <_ZL12MX_GPIO_Initv+0xfc>)
 800232c:	f002 fee4 	bl	80050f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2102      	movs	r1, #2
 8002334:	481e      	ldr	r0, [pc, #120]	; (80023b0 <_ZL12MX_GPIO_Initv+0x100>)
 8002336:	f002 fedf 	bl	80050f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002340:	481c      	ldr	r0, [pc, #112]	; (80023b4 <_ZL12MX_GPIO_Initv+0x104>)
 8002342:	f002 fed9 	bl	80050f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2302      	movs	r3, #2
 8002356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	4813      	ldr	r0, [pc, #76]	; (80023ac <_ZL12MX_GPIO_Initv+0xfc>)
 8002360:	f002 fd46 	bl	8004df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2302      	movs	r3, #2
 8002372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4619      	mov	r1, r3
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <_ZL12MX_GPIO_Initv+0x100>)
 800237c:	f002 fd38 	bl	8004df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2302      	movs	r3, #2
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	4619      	mov	r1, r3
 8002398:	4806      	ldr	r0, [pc, #24]	; (80023b4 <_ZL12MX_GPIO_Initv+0x104>)
 800239a:	f002 fd29 	bl	8004df0 <HAL_GPIO_Init>

}
 800239e:	bf00      	nop
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40010800 	.word	0x40010800

080023b8 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80023be:	2300      	movs	r3, #0
 80023c0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 80023c2:	2305      	movs	r3, #5
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2301      	movs	r3, #1
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	223e      	movs	r2, #62	; 0x3e
 80023d2:	21d0      	movs	r1, #208	; 0xd0
 80023d4:	4826      	ldr	r0, [pc, #152]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 80023d6:	f003 fb63 	bl	8005aa0 <HAL_I2C_Mem_Write>
	config = 0x18;
 80023da:	2318      	movs	r3, #24
 80023dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 80023de:	2305      	movs	r3, #5
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2301      	movs	r3, #1
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2301      	movs	r3, #1
 80023ec:	2216      	movs	r2, #22
 80023ee:	21d0      	movs	r1, #208	; 0xd0
 80023f0:	481f      	ldr	r0, [pc, #124]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 80023f2:	f003 fb55 	bl	8005aa0 <HAL_I2C_Mem_Write>
	config = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80023fa:	2305      	movs	r3, #5
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	2301      	movs	r3, #1
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	222d      	movs	r2, #45	; 0x2d
 800240a:	21a6      	movs	r1, #166	; 0xa6
 800240c:	4818      	ldr	r0, [pc, #96]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 800240e:	f003 fb47 	bl	8005aa0 <HAL_I2C_Mem_Write>
	config = 0x08;
 8002412:	2308      	movs	r3, #8
 8002414:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002416:	2305      	movs	r3, #5
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	2301      	movs	r3, #1
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	222d      	movs	r2, #45	; 0x2d
 8002426:	21a6      	movs	r1, #166	; 0xa6
 8002428:	4811      	ldr	r0, [pc, #68]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 800242a:	f003 fb39 	bl	8005aa0 <HAL_I2C_Mem_Write>
	config = 0x0D;
 800242e:	230d      	movs	r3, #13
 8002430:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002432:	2305      	movs	r3, #5
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	2301      	movs	r3, #1
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2301      	movs	r3, #1
 8002440:	222c      	movs	r2, #44	; 0x2c
 8002442:	21a6      	movs	r1, #166	; 0xa6
 8002444:	480a      	ldr	r0, [pc, #40]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 8002446:	f003 fb2b 	bl	8005aa0 <HAL_I2C_Mem_Write>
	config = 0x01;
 800244a:	2301      	movs	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800244e:	2305      	movs	r3, #5
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	2301      	movs	r3, #1
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	2231      	movs	r2, #49	; 0x31
 800245e:	21a6      	movs	r1, #166	; 0xa6
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 8002462:	f003 fb1d 	bl	8005aa0 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200000a8 	.word	0x200000a8
 8002474:	00000000 	.word	0x00000000

08002478 <_Z8MagCalibsss>:

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
 8002482:	460b      	mov	r3, r1
 8002484:	80bb      	strh	r3, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 800248a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fd ffb0 	bl	80003f4 <__aeabi_i2d>
 8002494:	a366      	add	r3, pc, #408	; (adr r3, 8002630 <_Z8MagCalibsss+0x1b8>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fe f815 	bl	80004c8 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4614      	mov	r4, r2
 80024a4:	461d      	mov	r5, r3
 80024a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd ffa2 	bl	80003f4 <__aeabi_i2d>
 80024b0:	a361      	add	r3, pc, #388	; (adr r3, 8002638 <_Z8MagCalibsss+0x1c0>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fe f807 	bl	80004c8 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd fe4b 	bl	800015c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4614      	mov	r4, r2
 80024cc:	461d      	mov	r5, r3
 80024ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd ff8e 	bl	80003f4 <__aeabi_i2d>
 80024d8:	a359      	add	r3, pc, #356	; (adr r3, 8002640 <_Z8MagCalibsss+0x1c8>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fd fff3 	bl	80004c8 <__aeabi_dmul>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fd fe35 	bl	8000158 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <_Z8MagCalibsss+0x1f8>)
 80024fc:	f7fd fe2e 	bl	800015c <__adddf3>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fa8e 	bl	8000a28 <__aeabi_d2iz>
 800250c:	4603      	mov	r3, r0
 800250e:	b21a      	sxth	r2, r3
 8002510:	4b58      	ldr	r3, [pc, #352]	; (8002674 <_Z8MagCalibsss+0x1fc>)
 8002512:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 8002514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd ff6b 	bl	80003f4 <__aeabi_i2d>
 800251e:	a346      	add	r3, pc, #280	; (adr r3, 8002638 <_Z8MagCalibsss+0x1c0>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fd ffd0 	bl	80004c8 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4614      	mov	r4, r2
 800252e:	461d      	mov	r5, r3
 8002530:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ff5d 	bl	80003f4 <__aeabi_i2d>
 800253a:	a343      	add	r3, pc, #268	; (adr r3, 8002648 <_Z8MagCalibsss+0x1d0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fd ffc2 	bl	80004c8 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fd fe06 	bl	800015c <__adddf3>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
 8002558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff49 	bl	80003f4 <__aeabi_i2d>
 8002562:	a33b      	add	r3, pc, #236	; (adr r3, 8002650 <_Z8MagCalibsss+0x1d8>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fd ffae 	bl	80004c8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4620      	mov	r0, r4
 8002572:	4629      	mov	r1, r5
 8002574:	f7fd fdf2 	bl	800015c <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	a335      	add	r3, pc, #212	; (adr r3, 8002658 <_Z8MagCalibsss+0x1e0>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fd fde9 	bl	800015c <__adddf3>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fa49 	bl	8000a28 <__aeabi_d2iz>
 8002596:	4603      	mov	r3, r0
 8002598:	b21a      	sxth	r2, r3
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <_Z8MagCalibsss+0x200>)
 800259c:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 800259e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff26 	bl	80003f4 <__aeabi_i2d>
 80025a8:	a329      	add	r3, pc, #164	; (adr r3, 8002650 <_Z8MagCalibsss+0x1d8>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fd ff8b 	bl	80004c8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4614      	mov	r4, r2
 80025b8:	461d      	mov	r5, r3
 80025ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff18 	bl	80003f4 <__aeabi_i2d>
 80025c4:	a31e      	add	r3, pc, #120	; (adr r3, 8002640 <_Z8MagCalibsss+0x1c8>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fd ff7d 	bl	80004c8 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fdbf 	bl	8000158 <__aeabi_dsub>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	461d      	mov	r5, r3
 80025e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff04 	bl	80003f4 <__aeabi_i2d>
 80025ec:	a31c      	add	r3, pc, #112	; (adr r3, 8002660 <_Z8MagCalibsss+0x1e8>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd ff69 	bl	80004c8 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fd fdad 	bl	800015c <__adddf3>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	a317      	add	r3, pc, #92	; (adr r3, 8002668 <_Z8MagCalibsss+0x1f0>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fd fda2 	bl	8000158 <__aeabi_dsub>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fa04 	bl	8000a28 <__aeabi_d2iz>
 8002620:	4603      	mov	r3, r0
 8002622:	b21a      	sxth	r2, r3
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <_Z8MagCalibsss+0x204>)
 8002626:	801a      	strh	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	4189374c 	.word	0x4189374c
 8002634:	3feee560 	.word	0x3feee560
 8002638:	3dee7818 	.word	0x3dee7818
 800263c:	3f8c725c 	.word	0x3f8c725c
 8002640:	f861a60d 	.word	0xf861a60d
 8002644:	3f929888 	.word	0x3f929888
 8002648:	3c361134 	.word	0x3c361134
 800264c:	3fee52bd 	.word	0x3fee52bd
 8002650:	a6ce3583 	.word	0xa6ce3583
 8002654:	3f7b8023 	.word	0x3f7b8023
 8002658:	33333333 	.word	0x33333333
 800265c:	4059d333 	.word	0x4059d333
 8002660:	24dd2f1b 	.word	0x24dd2f1b
 8002664:	3ff18106 	.word	0x3ff18106
 8002668:	e353f7cf 	.word	0xe353f7cf
 800266c:	40211ba5 	.word	0x40211ba5
 8002670:	40300000 	.word	0x40300000
 8002674:	20000d92 	.word	0x20000d92
 8002678:	20000d94 	.word	0x20000d94
 800267c:	20000d96 	.word	0x20000d96

08002680 <_Z9checkModei>:

void checkMode(int mod_ch) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800268e:	da0d      	bge.n	80026ac <_Z9checkModei+0x2c>

		  controller.mod = STABILIZE;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <_Z9checkModei+0x58>)
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		  controller.z0 = EKF.alt_gnd;
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_Z9checkModei+0x5c>)
 800269a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <_Z9checkModei+0x58>)
 80026a0:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
		  controller.p_alt.reset();
 80026a4:	480e      	ldr	r0, [pc, #56]	; (80026e0 <_Z9checkModei+0x60>)
 80026a6:	f009 fec3 	bl	800c430 <_ZN3PID5resetEv>
	  }

	  else {
		  controller.mod = ALT_HOLD;
	  }
}
 80026aa:	e011      	b.n	80026d0 <_Z9checkModei+0x50>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80026b2:	db09      	blt.n	80026c8 <_Z9checkModei+0x48>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80026ba:	4293      	cmp	r3, r2
 80026bc:	dc04      	bgt.n	80026c8 <_Z9checkModei+0x48>
		  controller.mod = ALT_HOLD;
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <_Z9checkModei+0x58>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
}
 80026c6:	e003      	b.n	80026d0 <_Z9checkModei+0x50>
		  controller.mod = ALT_HOLD;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <_Z9checkModei+0x58>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200006e0 	.word	0x200006e0
 80026dc:	200004d8 	.word	0x200004d8
 80026e0:	20000a80 	.word	0x20000a80

080026e4 <_Z9Check_Armv>:

void Check_Arm() {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	if(!armed) {
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <_Z9Check_Armv+0xa4>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d045      	beq.n	8002782 <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <_Z9Check_Armv+0xa8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f240 424b 	movw	r2, #1099	; 0x44b
 80026fe:	4293      	cmp	r3, r2
 8002700:	dc3b      	bgt.n	800277a <_Z9Check_Armv+0x96>
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <_Z9Check_Armv+0xa8>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800270a:	4293      	cmp	r3, r2
 800270c:	dd35      	ble.n	800277a <_Z9Check_Armv+0x96>
				if(!arm_start){
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <_Z9Check_Armv+0xac>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 800271c:	f002 f83e 	bl	800479c <HAL_GetTick>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <_Z9Check_Armv+0xb0>)
 8002726:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <_Z9Check_Armv+0xac>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 800272e:	f002 f835 	bl	800479c <HAL_GetTick>
 8002732:	4603      	mov	r3, r0
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <_Z9Check_Armv+0xb0>)
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800273e:	4293      	cmp	r3, r2
 8002740:	bf8c      	ite	hi
 8002742:	2301      	movhi	r3, #1
 8002744:	2300      	movls	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01a      	beq.n	8002782 <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 800274c:	4812      	ldr	r0, [pc, #72]	; (8002798 <_Z9Check_Armv+0xb4>)
 800274e:	f009 fe6f 	bl	800c430 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8002752:	4812      	ldr	r0, [pc, #72]	; (800279c <_Z9Check_Armv+0xb8>)
 8002754:	f009 fe6c 	bl	800c430 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8002758:	4811      	ldr	r0, [pc, #68]	; (80027a0 <_Z9Check_Armv+0xbc>)
 800275a:	f009 fe69 	bl	800c430 <_ZN3PID5resetEv>
					armed = true;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <_Z9Check_Armv+0xa4>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002764:	2201      	movs	r2, #1
 8002766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276a:	480e      	ldr	r0, [pc, #56]	; (80027a4 <_Z9Check_Armv+0xc0>)
 800276c:	f002 fcc4 	bl	80050f8 <HAL_GPIO_WritePin>
					EKF.sb = 1e-3;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <_Z9Check_Armv+0xc4>)
 8002772:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <_Z9Check_Armv+0xc8>)
 8002774:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
				if(HAL_GetTick() - arm_timer > 3000) {
 8002778:	e003      	b.n	8002782 <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <_Z9Check_Armv+0xac>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8002780:	e7ff      	b.n	8002782 <_Z9Check_Armv+0x9e>
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000d05 	.word	0x20000d05
 800278c:	20000cac 	.word	0x20000cac
 8002790:	20000d04 	.word	0x20000d04
 8002794:	20000cf8 	.word	0x20000cf8
 8002798:	20000888 	.word	0x20000888
 800279c:	20000930 	.word	0x20000930
 80027a0:	200009d8 	.word	0x200009d8
 80027a4:	40010800 	.word	0x40010800
 80027a8:	200004d8 	.word	0x200004d8
 80027ac:	3a83126f 	.word	0x3a83126f

080027b0 <_Z12Check_Disarmv>:

void Check_Disarm() {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	if(armed) {
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <_Z12Check_Disarmv+0x84>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d038      	beq.n	800282e <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <_Z12Check_Disarmv+0x88>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f240 424b 	movw	r2, #1099	; 0x44b
 80027c4:	4293      	cmp	r3, r2
 80027c6:	dc2e      	bgt.n	8002826 <_Z12Check_Disarmv+0x76>
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <_Z12Check_Disarmv+0x88>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f240 424b 	movw	r2, #1099	; 0x44b
 80027d0:	4293      	cmp	r3, r2
 80027d2:	dc28      	bgt.n	8002826 <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <_Z12Check_Disarmv+0x8c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 80027e2:	f001 ffdb 	bl	800479c <HAL_GetTick>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_Z12Check_Disarmv+0x90>)
 80027ec:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <_Z12Check_Disarmv+0x8c>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 80027f4:	f001 ffd2 	bl	800479c <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <_Z12Check_Disarmv+0x90>)
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002804:	4293      	cmp	r3, r2
 8002806:	bf8c      	ite	hi
 8002808:	2301      	movhi	r3, #1
 800280a:	2300      	movls	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <_Z12Check_Disarmv+0x7e>
					armed = false;
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <_Z12Check_Disarmv+0x84>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281e:	4809      	ldr	r0, [pc, #36]	; (8002844 <_Z12Check_Disarmv+0x94>)
 8002820:	f002 fc6a 	bl	80050f8 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8002824:	e003      	b.n	800282e <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <_Z12Check_Disarmv+0x8c>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800282c:	e7ff      	b.n	800282e <_Z12Check_Disarmv+0x7e>
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000d05 	.word	0x20000d05
 8002838:	20000cac 	.word	0x20000cac
 800283c:	20000d07 	.word	0x20000d07
 8002840:	20000cfc 	.word	0x20000cfc
 8002844:	40010800 	.word	0x40010800

08002848 <_Z9TelemPackv>:

void TelemPack() {
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 800284c:	4b80      	ldr	r3, [pc, #512]	; (8002a50 <_Z9TelemPackv+0x208>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002852:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8002854:	4b7e      	ldr	r3, [pc, #504]	; (8002a50 <_Z9TelemPackv+0x208>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a7e      	ldr	r2, [pc, #504]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800285a:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 800285c:	4b7c      	ldr	r3, [pc, #496]	; (8002a50 <_Z9TelemPackv+0x208>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a7c      	ldr	r2, [pc, #496]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002862:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8002864:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <_Z9TelemPackv+0x210>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800286c:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <_Z9TelemPackv+0x210>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b77      	ldr	r3, [pc, #476]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002876:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8002878:	4b77      	ldr	r3, [pc, #476]	; (8002a58 <_Z9TelemPackv+0x210>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	b29a      	uxth	r2, r3
 800287e:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002880:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8002882:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <_Z9TelemPackv+0x210>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800288a:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 800288c:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <_Z9TelemPackv+0x214>)
 800288e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002892:	4a70      	ldr	r2, [pc, #448]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002894:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002898:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800289c:	4a6d      	ldr	r2, [pc, #436]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800289e:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <_Z9TelemPackv+0x218>)
 80028a2:	f993 3000 	ldrsb.w	r3, [r3]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f9f0 	bl	8000c8c <__aeabi_i2f>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028b0:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <_Z9TelemPackv+0x208>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028b8:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80028ba:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <_Z9TelemPackv+0x208>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028c0:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <_Z9TelemPackv+0x208>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4a63      	ldr	r2, [pc, #396]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028c8:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80028ca:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <_Z9TelemPackv+0x21c>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028d0:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80028d2:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <_Z9TelemPackv+0x21c>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4a5f      	ldr	r2, [pc, #380]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028d8:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = euler_angles.roll;
 80028da:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <_Z9TelemPackv+0x220>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028e0:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = euler_angles.pitch;
 80028e2:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <_Z9TelemPackv+0x220>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028e8:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <_Z9TelemPackv+0x224>)
 80028ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 80028f4:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <_Z9TelemPackv+0x224>)
 80028f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80028fa:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.gyro[2];
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002900:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002904:	4a53      	ldr	r2, [pc, #332]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002906:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = euler_angles.yaw;
 8002908:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <_Z9TelemPackv+0x220>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a51      	ldr	r2, [pc, #324]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800290e:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8002910:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002912:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002916:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002918:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <_Z9TelemPackv+0x224>)
 800291c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002920:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002922:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002926:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800292a:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 800292e:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002930:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002934:	4a47      	ldr	r2, [pc, #284]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002936:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002938:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <_Z9TelemPackv+0x214>)
 800293a:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800293e:	4a45      	ldr	r2, [pc, #276]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002940:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002944:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002948:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800294a:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <_Z9TelemPackv+0x214>)
 800294e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8002952:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002954:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002958:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800295c:	4a3d      	ldr	r2, [pc, #244]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800295e:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8002960:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002962:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002966:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <_Z9TelemPackv+0x214>)
 800296c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002970:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002972:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 8002974:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002976:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800297a:	4a36      	ldr	r2, [pc, #216]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800297c:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002980:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002984:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <_Z9TelemPackv+0x224>)
 800298c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <_Z9TelemPackv+0x228>)
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800299c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 80029a0:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <_Z9TelemPackv+0x228>)
 80029a2:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029aa:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <_Z9TelemPackv+0x228>)
 80029b0:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029b8:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 80029bc:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <_Z9TelemPackv+0x228>)
 80029be:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029c6:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.xpos;
 80029ca:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <_Z9TelemPackv+0x224>)
 80029cc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <_Z9TelemPackv+0x224>)
 80029d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  //telem_pack.position_body.y = EKF.ypos;

	  telem_pack.alt_thr = controller.alt_thr;
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <_Z9TelemPackv+0x214>)
 80029e4:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
 80029e8:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029ea:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 80029ec:	f001 fed6 	bl	800479c <HAL_GetTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accX;
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <_Z9TelemPackv+0x22c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029fe:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accY;
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <_Z9TelemPackv+0x230>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a08:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZ;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <_Z9TelemPackv+0x234>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a12:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <_Z9TelemPackv+0x238>)
 8002a18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a1e:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <_Z9TelemPackv+0x23c>)
 8002a24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a2a:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <_Z9TelemPackv+0x240>)
 8002a30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a36:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <_Z9TelemPackv+0x244>)
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	23b7      	movs	r3, #183	; 0xb7
 8002a44:	461a      	mov	r2, r3
 8002a46:	f00c f83d 	bl	800eac4 <memcpy>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000340 	.word	0x20000340
 8002a54:	20000364 	.word	0x20000364
 8002a58:	20000c80 	.word	0x20000c80
 8002a5c:	200006e0 	.word	0x200006e0
 8002a60:	20000d98 	.word	0x20000d98
 8002a64:	2000031c 	.word	0x2000031c
 8002a68:	20000d80 	.word	0x20000d80
 8002a6c:	200004d8 	.word	0x200004d8
 8002a70:	20000d74 	.word	0x20000d74
 8002a74:	200002ec 	.word	0x200002ec
 8002a78:	200002f0 	.word	0x200002f0
 8002a7c:	200002f4 	.word	0x200002f4
 8002a80:	20000d92 	.word	0x20000d92
 8002a84:	20000d94 	.word	0x20000d94
 8002a88:	20000d96 	.word	0x20000d96
 8002a8c:	2000041c 	.word	0x2000041c

08002a90 <_Z9SendTelemv>:

void SendTelem() {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
	  TelemPack();
 8002a96:	f7ff fed7 	bl	8002848 <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 8002a9a:	2364      	movs	r3, #100	; 0x64
 8002a9c:	22b7      	movs	r2, #183	; 0xb7
 8002a9e:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <_Z9SendTelemv+0x48>)
 8002aa0:	480e      	ldr	r0, [pc, #56]	; (8002adc <_Z9SendTelemv+0x4c>)
 8002aa2:	f006 f85f 	bl	8008b64 <HAL_UART_Transmit>
	  char end_char = '@';
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8002aaa:	1df9      	adds	r1, r7, #7
 8002aac:	2364      	movs	r3, #100	; 0x64
 8002aae:	2201      	movs	r2, #1
 8002ab0:	480a      	ldr	r0, [pc, #40]	; (8002adc <_Z9SendTelemv+0x4c>)
 8002ab2:	f006 f857 	bl	8008b64 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8002ab6:	1df9      	adds	r1, r7, #7
 8002ab8:	2364      	movs	r3, #100	; 0x64
 8002aba:	2201      	movs	r2, #1
 8002abc:	4807      	ldr	r0, [pc, #28]	; (8002adc <_Z9SendTelemv+0x4c>)
 8002abe:	f006 f851 	bl	8008b64 <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 8002ac2:	f001 fe6b 	bl	800479c <HAL_GetTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <_Z9SendTelemv+0x50>)
 8002acc:	601a      	str	r2, [r3, #0]


}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000041c 	.word	0x2000041c
 8002adc:	2000025c 	.word	0x2000025c
 8002ae0:	20000d00 	.word	0x20000d00

08002ae4 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	2301      	movs	r3, #1
 8002af4:	9302      	str	r3, [sp, #8]
 8002af6:	2302      	movs	r3, #2
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2301      	movs	r3, #1
 8002b02:	21d1      	movs	r1, #209	; 0xd1
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <_Z7GyroOkuh+0x40>)
 8002b06:	f003 f8c5 	bl	8005c94 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8002b0a:	7b3b      	ldrb	r3, [r7, #12]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	b21a      	sxth	r2, r3
 8002b10:	7b7b      	ldrb	r3, [r7, #13]
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200000a8 	.word	0x200000a8

08002b28 <_Z7pwm2angt>:

float pwm2ang(unsigned short int pwm) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8002b32:	2305      	movs	r3, #5
 8002b34:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8002b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002b3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b40:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -15;
 8002b42:	f06f 030e 	mvn.w	r3, #14
 8002b46:	60fb      	str	r3, [r7, #12]
	int out_max  = 15;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8002b4c:	88fa      	ldrh	r2, [r7, #6]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8002b54:	3304      	adds	r3, #4
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dd09      	ble.n	8002b6e <_Z7pwm2angt+0x46>
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	db03      	blt.n	8002b6e <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8002b66:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002b6a:	83fb      	strh	r3, [r7, #30]
 8002b6c:	e001      	b.n	8002b72 <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002b72:	8bfa      	ldrh	r2, [r7, #30]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	1a8a      	subs	r2, r1, r2
 8002b7e:	fb02 f203 	mul.w	r2, r2, r3
 8002b82:	6939      	ldr	r1, [r7, #16]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe f87b 	bl	8000c8c <__aeabi_i2f>
 8002b96:	4603      	mov	r3, r0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8002baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bae:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002bb0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bb4:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8002bb6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002bba:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8002bbc:	2364      	movs	r3, #100	; 0x64
 8002bbe:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	1a8a      	subs	r2, r1, r2
 8002bcc:	fb02 f203 	mul.w	r2, r2, r3
 8002bd0:	6939      	ldr	r1, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	1acb      	subs	r3, r1, r3
 8002bd6:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	425b      	negs	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe f853 	bl	8000c8c <__aeabi_i2f>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af04      	add	r7, sp, #16
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9302      	str	r3, [sp, #8]
 8002c02:	2302      	movs	r3, #2
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	21a7      	movs	r1, #167	; 0xa7
 8002c10:	4807      	ldr	r0, [pc, #28]	; (8002c30 <_Z6AccOkuh+0x40>)
 8002c12:	f003 f83f 	bl	8005c94 <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8002c16:	7b7b      	ldrb	r3, [r7, #13]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	7b3b      	ldrb	r3, [r7, #12]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200000a8 	.word	0x200000a8

08002c34 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fd fbd9 	bl	80003f4 <__aeabi_i2d>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f009 ffe5 	bl	800cc18 <sqrt>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8002c5c:	b5b0      	push	{r4, r5, r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8002c68:	4bc6      	ldr	r3, [pc, #792]	; (8002f84 <_Z9DCM2EulerPsS_+0x328>)
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3302      	adds	r3, #2
 8002c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c86:	4619      	mov	r1, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c90:	fb03 f301 	mul.w	r3, r3, r1
 8002c94:	441a      	add	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca8:	fb03 f301 	mul.w	r3, r3, r1
 8002cac:	4413      	add	r3, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ffc0 	bl	8002c34 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f7fd fedc 	bl	8000a78 <__aeabi_d2f>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3302      	adds	r3, #2
 8002cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd4:	fb03 f302 	mul.w	r3, r3, r2
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	3202      	adds	r2, #2
 8002cdc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002ce0:	fb02 f203 	mul.w	r2, r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	4619      	mov	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf4:	fb03 f301 	mul.w	r3, r3, r1
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	3102      	adds	r1, #2
 8002cfc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3304      	adds	r3, #4
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	fb03 f301 	mul.w	r3, r3, r1
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	3104      	adds	r1, #4
 8002d1e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	441a      	add	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d38:	fb03 f301 	mul.w	r3, r3, r1
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	3104      	adds	r1, #4
 8002d40:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd ff9e 	bl	8000c8c <__aeabi_i2f>
 8002d50:	4604      	mov	r4, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d62:	fb03 f202 	mul.w	r2, r3, r2
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d76:	fb03 f301 	mul.w	r3, r3, r1
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd ff85 	bl	8000c8c <__aeabi_i2f>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f9d3 	bl	8003130 <_Z6squaref>
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9c:	fb03 f202 	mul.w	r2, r3, r2
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3304      	adds	r3, #4
 8002da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da8:	4619      	mov	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db0:	fb03 f301 	mul.w	r3, r3, r1
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd ff68 	bl	8000c8c <__aeabi_i2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f9b6 	bl	8003130 <_Z6squaref>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f7fd feab 	bl	8000b24 <__addsf3>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de4:	fb03 f202 	mul.w	r2, r3, r2
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3304      	adds	r3, #4
 8002dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df0:	4619      	mov	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3302      	adds	r3, #2
 8002df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfa:	fb03 f301 	mul.w	r3, r3, r1
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd ff43 	bl	8000c8c <__aeabi_i2f>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f991 	bl	8003130 <_Z6squaref>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	4628      	mov	r0, r5
 8002e14:	f7fd fe86 	bl	8000b24 <__addsf3>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fe28 	bl	8001a70 <_ZSt4sqrtf>
 8002e20:	4603      	mov	r3, r0
 8002e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd ff85 	bl	8000d34 <__aeabi_fmul>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7fe f834 	bl	8000e9c <__aeabi_fdiv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e40:	461a      	mov	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3302      	adds	r3, #2
 8002e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4a:	fb03 f202 	mul.w	r2, r3, r2
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3302      	adds	r3, #2
 8002e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e56:	4619      	mov	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e60:	fb03 f301 	mul.w	r3, r3, r1
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd ff10 	bl	8000c8c <__aeabi_i2f>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e74:	461a      	mov	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3302      	adds	r3, #2
 8002e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e92:	fb03 f301 	mul.w	r3, r3, r1
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fef7 	bl	8000c8c <__aeabi_i2f>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f945 	bl	8003130 <_Z6squaref>
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb8:	fb03 f202 	mul.w	r2, r3, r2
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ecc:	fb03 f301 	mul.w	r3, r3, r1
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd feda 	bl	8000c8c <__aeabi_i2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f928 	bl	8003130 <_Z6squaref>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f7fd fe1d 	bl	8000b24 <__addsf3>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461d      	mov	r5, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f00:	fb03 f202 	mul.w	r2, r3, r2
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3304      	adds	r3, #4
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3302      	adds	r3, #2
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	fb03 f301 	mul.w	r3, r3, r1
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd feb5 	bl	8000c8c <__aeabi_i2f>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f903 	bl	8003130 <_Z6squaref>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f7fd fdf8 	bl	8000b24 <__addsf3>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fd9a 	bl	8001a70 <_ZSt4sqrtf>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7fd ffab 	bl	8000e9c <__aeabi_fdiv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f50:	425b      	negs	r3, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fe9a 	bl	8000c8c <__aeabi_i2f>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd ff9d 	bl	8000e9c <__aeabi_fdiv>
 8002f62:	4603      	mov	r3, r0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6e:	425b      	negs	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fe8b 	bl	8000c8c <__aeabi_i2f>
 8002f76:	4603      	mov	r3, r0
 8002f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd ff8e 	bl	8000e9c <__aeabi_fdiv>
 8002f80:	4603      	mov	r3, r0
 8002f82:	e001      	b.n	8002f88 <_Z9DCM2EulerPsS_+0x32c>
 8002f84:	42654ca3 	.word	0x42654ca3
 8002f88:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f92:	425b      	negs	r3, r3
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fe79 	bl	8000c8c <__aeabi_i2f>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ff7c 	bl	8000e9c <__aeabi_fdiv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fd20 	bl	80019f4 <_ZSt4asinf>
 8002fb4:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 8002fb6:	69b8      	ldr	r0, [r7, #24]
 8002fb8:	f7fe fd42 	bl	8001a40 <_ZSt3cosf>
 8002fbc:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fc2:	f7fd feb7 	bl	8000d34 <__aeabi_fmul>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 8002fce:	69f9      	ldr	r1, [r7, #28]
 8002fd0:	6a38      	ldr	r0, [r7, #32]
 8002fd2:	f7fd ff63 	bl	8000e9c <__aeabi_fdiv>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fd17 	bl	8001a0c <_ZSt4atanf>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fea6 	bl	8000d34 <__aeabi_fmul>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff4:	f7fd ff52 	bl	8000e9c <__aeabi_fdiv>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461c      	mov	r4, r3
 8002ffc:	6979      	ldr	r1, [r7, #20]
 8002ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003000:	f7fd ff4c 	bl	8000e9c <__aeabi_fdiv>
 8003004:	4603      	mov	r3, r0
 8003006:	4619      	mov	r1, r3
 8003008:	4620      	mov	r0, r4
 800300a:	f7fe fd0b 	bl	8001a24 <_ZSt5atan2ff>
 800300e:	4603      	mov	r3, r0
 8003010:	4619      	mov	r1, r3
 8003012:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003014:	f7fd fe8e 	bl	8000d34 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 800301c:	6938      	ldr	r0, [r7, #16]
 800301e:	f7fe f865 	bl	80010ec <__aeabi_f2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 8003028:	da23      	bge.n	8003072 <_Z9DCM2EulerPsS_+0x416>
 800302a:	6938      	ldr	r0, [r7, #16]
 800302c:	f7fe f85e 	bl	80010ec <__aeabi_f2iz>
 8003030:	4603      	mov	r3, r0
 8003032:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8003036:	db1c      	blt.n	8003072 <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 8003038:	4b39      	ldr	r3, [pc, #228]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d04b      	beq.n	80030d8 <_Z9DCM2EulerPsS_+0x47c>
 8003040:	4b38      	ldr	r3, [pc, #224]	; (8003124 <_Z9DCM2EulerPsS_+0x4c8>)
 8003042:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe f810 	bl	8001070 <__aeabi_fcmplt>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d100      	bne.n	8003058 <_Z9DCM2EulerPsS_+0x3fc>
 8003056:	e03f      	b.n	80030d8 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 8003058:	4b33      	ldr	r3, [pc, #204]	; (8003128 <_Z9DCM2EulerPsS_+0x4cc>)
 800305a:	f993 3000 	ldrsb.w	r3, [r3]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	b25a      	sxtb	r2, r3
 8003066:	4b30      	ldr	r3, [pc, #192]	; (8003128 <_Z9DCM2EulerPsS_+0x4cc>)
 8003068:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 8003070:	e032      	b.n	80030d8 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 8003072:	6938      	ldr	r0, [r7, #16]
 8003074:	f7fe f83a 	bl	80010ec <__aeabi_f2iz>
 8003078:	4603      	mov	r3, r0
 800307a:	2baf      	cmp	r3, #175	; 0xaf
 800307c:	dd22      	ble.n	80030c4 <_Z9DCM2EulerPsS_+0x468>
 800307e:	6938      	ldr	r0, [r7, #16]
 8003080:	f7fe f834 	bl	80010ec <__aeabi_f2iz>
 8003084:	4603      	mov	r3, r0
 8003086:	2bb4      	cmp	r3, #180	; 0xb4
 8003088:	dc1c      	bgt.n	80030c4 <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d022      	beq.n	80030d8 <_Z9DCM2EulerPsS_+0x47c>
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <_Z9DCM2EulerPsS_+0x4c8>)
 8003094:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe f805 	bl	80010ac <__aeabi_fcmpgt>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d100      	bne.n	80030aa <_Z9DCM2EulerPsS_+0x44e>
 80030a8:	e016      	b.n	80030d8 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 80030aa:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <_Z9DCM2EulerPsS_+0x4cc>)
 80030ac:	f993 3000 	ldrsb.w	r3, [r3]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	b25a      	sxtb	r2, r3
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <_Z9DCM2EulerPsS_+0x4cc>)
 80030ba:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80030c2:	e009      	b.n	80030d8 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <_Z9DCM2EulerPsS_+0x4d0>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	2b32      	cmp	r3, #50	; 0x32
 80030ca:	d905      	bls.n	80030d8 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <_Z9DCM2EulerPsS_+0x4d0>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d005      	beq.n	80030ec <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <_Z9DCM2EulerPsS_+0x4d0>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <_Z9DCM2EulerPsS_+0x4d0>)
 80030ea:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <_Z9DCM2EulerPsS_+0x4cc>)
 80030ee:	f993 3000 	ldrsb.w	r3, [r3]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80030f8:	fb03 f302 	mul.w	r3, r3, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fdc5 	bl	8000c8c <__aeabi_i2f>
 8003102:	4603      	mov	r3, r0
 8003104:	4619      	mov	r1, r3
 8003106:	6938      	ldr	r0, [r7, #16]
 8003108:	f7fd fd0c 	bl	8000b24 <__addsf3>
 800310c:	4603      	mov	r3, r0
 800310e:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 8003116:	bf00      	nop

}
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	3738      	adds	r7, #56	; 0x38
 800311c:	46bd      	mov	sp, r7
 800311e:	bdb0      	pop	{r4, r5, r7, pc}
 8003120:	20000001 	.word	0x20000001
 8003124:	200004d8 	.word	0x200004d8
 8003128:	20000d98 	.word	0x20000d98
 800312c:	20000d9a 	.word	0x20000d9a

08003130 <_Z6squaref>:

float square(float x) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	float y = x*x;
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fdfa 	bl	8000d34 <__aeabi_fmul>
 8003140:	4603      	mov	r3, r0
 8003142:	60fb      	str	r3, [r7, #12]
	return y;
 8003144:	68fb      	ldr	r3, [r7, #12]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <_Z6PWMYazv>:

void PWMYaz() {
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	  if(armed) {
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <_Z6PWMYazv+0x9c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d044      	beq.n	80031e6 <_Z6PWMYazv+0x96>

		  if(!motor_start) {
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <_Z6PWMYazv+0xa0>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	f083 0301 	eor.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <_Z6PWMYazv+0x24>
		  	  MotorBaslat();
 800316a:	f000 f8a5 	bl	80032b8 <_Z11MotorBaslatv>
		  	  motor_start = true;
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <_Z6PWMYazv+0xa0>)
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
		  }

		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN) {
 8003174:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <_Z6PWMYazv+0xa4>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f240 52db 	movw	r2, #1499	; 0x5db
 800317c:	4293      	cmp	r3, r2
 800317e:	dc1a      	bgt.n	80031b6 <_Z6PWMYazv+0x66>
 8003180:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <_Z6PWMYazv+0xa4>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003188:	dd15      	ble.n	80031b6 <_Z6PWMYazv+0x66>


			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <_Z6PWMYazv+0xa8>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <_Z6PWMYazv+0xac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <_Z6PWMYazv+0xa8>)
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <_Z6PWMYazv+0xac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <_Z6PWMYazv+0xa8>)
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <_Z6PWMYazv+0xac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <_Z6PWMYazv+0xa8>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <_Z6PWMYazv+0xac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
 80031b2:	bf00      	nop
		  }
	  }



}
 80031b4:	e017      	b.n	80031e6 <_Z6PWMYazv+0x96>
		  else if(motor_start) {
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <_Z6PWMYazv+0xa0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d013      	beq.n	80031e6 <_Z6PWMYazv+0x96>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <_Z6PWMYazv+0xac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <_Z6PWMYazv+0xac>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <_Z6PWMYazv+0xac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <_Z6PWMYazv+0xac>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000d05 	.word	0x20000d05
 80031f0:	20000d06 	.word	0x20000d06
 80031f4:	20000cac 	.word	0x20000cac
 80031f8:	20000c80 	.word	0x20000c80
 80031fc:	200000fc 	.word	0x200000fc

08003200 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800321a:	da12      	bge.n	8003242 <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fc60 	bl	8002ae4 <_Z7GyroOkuh>
 8003224:	4603      	mov	r3, r0
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fd30 	bl	8000c8c <__aeabi_i2f>
 800322c:	4603      	mov	r3, r0
 800322e:	4619      	mov	r1, r3
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7fd fc77 	bl	8000b24 <__addsf3>
 8003236:	4603      	mov	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	3301      	adds	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	e7e8      	b.n	8003214 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8003242:	4905      	ldr	r1, [pc, #20]	; (8003258 <_Z7GyroErrh+0x58>)
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fd fe29 	bl	8000e9c <__aeabi_fdiv>
 800324a:	4603      	mov	r3, r0
 800324c:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	44fa0000 	.word	0x44fa0000

0800325c <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003276:	da12      	bge.n	800329e <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fcb8 	bl	8002bf0 <_Z6AccOkuh>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fd02 	bl	8000c8c <__aeabi_i2f>
 8003288:	4603      	mov	r3, r0
 800328a:	4619      	mov	r1, r3
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7fd fc49 	bl	8000b24 <__addsf3>
 8003292:	4603      	mov	r3, r0
 8003294:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3301      	adds	r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	e7e8      	b.n	8003270 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 800329e:	4905      	ldr	r1, [pc, #20]	; (80032b4 <_Z6AccErrh+0x58>)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7fd fdfb 	bl	8000e9c <__aeabi_fdiv>
 80032a6:	4603      	mov	r3, r0
 80032a8:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	44fa0000 	.word	0x44fa0000

080032b8 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <_Z11MotorBaslatv+0x38>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <_Z11MotorBaslatv+0x38>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <_Z11MotorBaslatv+0x38>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <_Z11MotorBaslatv+0x38>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 80032e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032e8:	f001 fa62 	bl	80047b0 <HAL_Delay>
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200000fc 	.word	0x200000fc
 80032f4:	00000000 	.word	0x00000000

080032f8 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 80032f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fa:	b0a1      	sub	sp, #132	; 0x84
 80032fc:	af0c      	add	r7, sp, #48	; 0x30
 80032fe:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	4a4f      	ldr	r2, [pc, #316]	; (8003440 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003304:	4293      	cmp	r3, r2
 8003306:	f040 8406 	bne.w	8003b16 <HAL_TIM_PeriodElapsedCallback+0x81e>
		//1.25 ms || 800 Hz


		set_ucounter(SONAR_CLOCK_RATE);
 800330a:	2050      	movs	r0, #80	; 0x50
 800330c:	f7fe fb42 	bl	8001994 <set_ucounter>
		set_b_counter(12);
 8003310:	200c      	movs	r0, #12
 8003312:	f7fe faeb 	bl	80018ec <set_b_counter>

		controller_counter++;
 8003316:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	4b49      	ldr	r3, [pc, #292]	; (8003444 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003320:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 8003322:	4b49      	ldr	r3, [pc, #292]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800332c:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	4b45      	ldr	r3, [pc, #276]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003338:	801a      	strh	r2, [r3, #0]

		if(mag_counter == MAG_CLOCK_RATE) {
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	2b0b      	cmp	r3, #11
 8003340:	d146      	bne.n	80033d0 <HAL_TIM_PeriodElapsedCallback+0xd8>
			mag_counter = 0;
 8003342:	4b42      	ldr	r3, [pc, #264]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003344:	2200      	movs	r2, #0
 8003346:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 8003348:	4a41      	ldr	r2, [pc, #260]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800334a:	4942      	ldr	r1, [pc, #264]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800334c:	4842      	ldr	r0, [pc, #264]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800334e:	f7fd ff7d 	bl	800124c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003358:	4a3e      	ldr	r2, [pc, #248]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800335a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800335e:	4a3c      	ldr	r2, [pc, #240]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003360:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f887 	bl	8002478 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 800336a:	4b3c      	ldr	r3, [pc, #240]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800336c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003370:	843b      	strh	r3, [r7, #32]
			mag[1] = MAG_Y_CALIB;
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003378:	847b      	strh	r3, [r7, #34]	; 0x22
			mag[2] = MAG_Z_CALIB;
 800337a:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800337c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003380:	84bb      	strh	r3, [r7, #36]	; 0x24

			int16_t acc[3];
			acc[0] = accX;
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd feb0 	bl	80010ec <__aeabi_f2iz>
 800338c:	4603      	mov	r3, r0
 800338e:	b21b      	sxth	r3, r3
 8003390:	833b      	strh	r3, [r7, #24]
			acc[1] = accY;
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fea8 	bl	80010ec <__aeabi_f2iz>
 800339c:	4603      	mov	r3, r0
 800339e:	b21b      	sxth	r3, r3
 80033a0:	837b      	strh	r3, [r7, #26]
			acc[2] = accZ;
 80033a2:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fea0 	bl	80010ec <__aeabi_f2iz>
 80033ac:	4603      	mov	r3, r0
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	83bb      	strh	r3, [r7, #28]
			euler_angles = DCM2Euler(acc, mag);
 80033b2:	4c30      	ldr	r4, [pc, #192]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80033b4:	463b      	mov	r3, r7
 80033b6:	f107 0220 	add.w	r2, r7, #32
 80033ba:	f107 0118 	add.w	r1, r7, #24
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fc4c 	bl	8002c5c <_Z9DCM2EulerPsS_>
 80033c4:	4623      	mov	r3, r4
 80033c6:	463a      	mov	r2, r7
 80033c8:	6810      	ldr	r0, [r2, #0]
 80033ca:	6851      	ldr	r1, [r2, #4]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	2b28      	cmp	r3, #40	; 0x28
 80033d6:	d125      	bne.n	8003424 <HAL_TIM_PeriodElapsedCallback+0x12c>
			  camera_counter = 0;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80033da:	2200      	movs	r2, #0
 80033dc:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80033e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033e4:	c303      	stmia	r3!, {r0, r1}
 80033e6:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80033ea:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fc4b 	bl	8000c8c <__aeabi_i2f>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4921      	ldr	r1, [pc, #132]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fd4e 	bl	8000e9c <__aeabi_fdiv>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003406:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

			  if(!cam_data.detected) {
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <HAL_TIM_PeriodElapsedCallback+0x124>
				  EKF.Qc = 9e9;
 8003412:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003416:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800341a:	e003      	b.n	8003424 <HAL_TIM_PeriodElapsedCallback+0x12c>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800341e:	4a1b      	ldr	r2, [pc, #108]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003420:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
			  }
		}

		if(get_ucounter() == 1) {
 8003424:	f7fe fad0 	bl	80019c8 <get_ucounter>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02b      	beq.n	8003490 <HAL_TIM_PeriodElapsedCallback+0x198>
			request_range();
 8003438:	f7fe fa72 	bl	8001920 <request_range>
 800343c:	e0e9      	b.n	8003612 <HAL_TIM_PeriodElapsedCallback+0x31a>
 800343e:	bf00      	nop
 8003440:	20000144 	.word	0x20000144
 8003444:	20000d20 	.word	0x20000d20
 8003448:	20000d22 	.word	0x20000d22
 800344c:	20000d24 	.word	0x20000d24
 8003450:	20000d90 	.word	0x20000d90
 8003454:	20000d8e 	.word	0x20000d8e
 8003458:	20000d8c 	.word	0x20000d8c
 800345c:	20000d92 	.word	0x20000d92
 8003460:	20000d94 	.word	0x20000d94
 8003464:	20000d96 	.word	0x20000d96
 8003468:	200002ec 	.word	0x200002ec
 800346c:	200002f0 	.word	0x200002f0
 8003470:	200002f4 	.word	0x200002f4
 8003474:	20000d80 	.word	0x20000d80
 8003478:	20000d74 	.word	0x20000d74
 800347c:	20000d68 	.word	0x20000d68
 8003480:	42c80000 	.word	0x42c80000
 8003484:	200004d8 	.word	0x200004d8
 8003488:	50061c46 	.word	0x50061c46
 800348c:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8003490:	f7fe fa9a 	bl	80019c8 <get_ucounter>
 8003494:	4603      	mov	r3, r0
 8003496:	2b50      	cmp	r3, #80	; 0x50
 8003498:	bf0c      	ite	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	2300      	movne	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80b6 	beq.w	8003612 <HAL_TIM_PeriodElapsedCallback+0x31a>
		  sonar_range = getRange();
 80034a6:	f7fe fa55 	bl	8001954 <getRange>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b70      	ldr	r3, [pc, #448]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80034b0:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 80034b2:	4b70      	ldr	r3, [pc, #448]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a70      	ldr	r2, [pc, #448]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80034b8:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 80034ba:	4b70      	ldr	r3, [pc, #448]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a70      	ldr	r2, [pc, #448]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80034c0:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 80034c2:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4970      	ldr	r1, [pc, #448]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fc33 	bl	8000d34 <__aeabi_fmul>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fa83 	bl	80019dc <_ZSt3absf>
 80034d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	496a      	ldr	r1, [pc, #424]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fc28 	bl	8000d34 <__aeabi_fmul>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fa78 	bl	80019dc <_ZSt3absf>
 80034ec:	64b8      	str	r0, [r7, #72]	; 0x48
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 80034ee:	4b60      	ldr	r3, [pc, #384]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fbc6 	bl	8000c84 <__aeabi_ui2f>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc ff8c 	bl	8000418 <__aeabi_f2d>
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8003506:	f7fd f909 	bl	800071c <__aeabi_ddiv>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4614      	mov	r4, r2
 8003510:	461d      	mov	r5, r3
 8003512:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003514:	f7fe fa94 	bl	8001a40 <_ZSt3cosf>
 8003518:	4603      	mov	r3, r0
 800351a:	4618      	mov	r0, r3
 800351c:	f7fc ff7c 	bl	8000418 <__aeabi_f2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fc ffce 	bl	80004c8 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003536:	f7fe fa83 	bl	8001a40 <_ZSt3cosf>
 800353a:	4603      	mov	r3, r0
 800353c:	4618      	mov	r0, r3
 800353e:	f7fc ff6b 	bl	8000418 <__aeabi_f2d>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f7fc ffbd 	bl	80004c8 <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f7fd fa8f 	bl	8000a78 <__aeabi_d2f>
 800355a:	4603      	mov	r3, r0
 800355c:	4a45      	ldr	r2, [pc, #276]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800355e:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8003560:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8003564:	647b      	str	r3, [r7, #68]	; 0x44
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a43      	ldr	r2, [pc, #268]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fad5 	bl	8000b20 <__aeabi_fsub>
 8003576:	4603      	mov	r3, r0
 8003578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fc8e 	bl	8000e9c <__aeabi_fdiv>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003586:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8003588:	4b3c      	ldr	r3, [pc, #240]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fa25 	bl	80019dc <_ZSt3absf>
 8003592:	4603      	mov	r3, r0
 8003594:	2201      	movs	r2, #1
 8003596:	4614      	mov	r4, r2
 8003598:	493d      	ldr	r1, [pc, #244]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fd86 	bl	80010ac <__aeabi_fcmpgt>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PeriodElapsedCallback+0x2b2>
 80035a6:	2300      	movs	r3, #0
 80035a8:	461c      	mov	r4, r3
 80035aa:	b2e3      	uxtb	r3, r4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_TIM_PeriodElapsedCallback+0x2c8>
			  sonar_alt = sonar_alt_;
 80035b0:	4b31      	ldr	r3, [pc, #196]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80035b6:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2f      	ldr	r2, [pc, #188]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80035be:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 80035c0:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4933      	ldr	r1, [pc, #204]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fd70 	bl	80010ac <__aeabi_fcmpgt>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10c      	bne.n	80035ec <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ff1e 	bl	8000418 <__aeabi_f2d>
 80035dc:	a322      	add	r3, pc, #136	; (adr r3, 8003668 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fd f9e3 	bl	80009ac <__aeabi_dcmplt>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_TIM_PeriodElapsedCallback+0x306>
			  EKF.Qs = 9e9;
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80035ee:	4a2b      	ldr	r2, [pc, #172]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80035f0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			  EKF.salt = 50;
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80035f6:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80035f8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80035fc:	e009      	b.n	8003612 <HAL_TIM_PeriodElapsedCallback+0x31a>
		  }

		  else {
			  EKF.Qs = 0.25;
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003600:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003604:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			  EKF.salt = 1;
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800360a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800360e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		  }


		}

		if(get_b_counter() == 1) {
 8003612:	f7fe f961 	bl	80018d8 <get_b_counter>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_TIM_PeriodElapsedCallback+0x334>
			write_ut();
 8003626:	f7fd ff57 	bl	80014d8 <write_ut>
 800362a:	e06b      	b.n	8003704 <HAL_TIM_PeriodElapsedCallback+0x40c>
		}

		else if(get_b_counter() == 5) { //5 ms
 800362c:	f7fe f954 	bl	80018d8 <get_b_counter>
 8003630:	4603      	mov	r3, r0
 8003632:	2b05      	cmp	r3, #5
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d033      	beq.n	80036a8 <HAL_TIM_PeriodElapsedCallback+0x3b0>
			bmp.uncomp.temp = read_ut ();
 8003640:	f7fd ff62 	bl	8001508 <read_ut>
 8003644:	4603      	mov	r3, r0
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fb20 	bl	8000c8c <__aeabi_i2f>
 800364c:	4603      	mov	r3, r0
 800364e:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003650:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8003652:	4814      	ldr	r0, [pc, #80]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003654:	f7fd ff72 	bl	800153c <get_temp>
 8003658:	4603      	mov	r3, r0
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800365c:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 800365e:	f7fd ffc5 	bl	80015ec <write_up>
 8003662:	e04f      	b.n	8003704 <HAL_TIM_PeriodElapsedCallback+0x40c>
 8003664:	f3af 8000 	nop.w
 8003668:	33333333 	.word	0x33333333
 800366c:	3fd33333 	.word	0x3fd33333
 8003670:	20000d1c 	.word	0x20000d1c
 8003674:	20000d0c 	.word	0x20000d0c
 8003678:	20000d10 	.word	0x20000d10
 800367c:	20000d14 	.word	0x20000d14
 8003680:	20000d18 	.word	0x20000d18
 8003684:	20000340 	.word	0x20000340
 8003688:	3c8e8a72 	.word	0x3c8e8a72
 800368c:	40590000 	.word	0x40590000
 8003690:	40e00000 	.word	0x40e00000
 8003694:	40c00000 	.word	0x40c00000
 8003698:	200004d8 	.word	0x200004d8
 800369c:	50061c46 	.word	0x50061c46
 80036a0:	42480000 	.word	0x42480000
 80036a4:	20000d28 	.word	0x20000d28
		}

		else if(get_b_counter() == 12) { //
 80036a8:	f7fe f916 	bl	80018d8 <get_b_counter>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d023      	beq.n	8003704 <HAL_TIM_PeriodElapsedCallback+0x40c>
			bmp.uncomp.press = read_up (bmp.oss);
 80036bc:	4bac      	ldr	r3, [pc, #688]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036c0:	f7fd ffb4 	bl	800162c <read_up>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4aaa      	ldr	r2, [pc, #680]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036c8:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 80036ca:	4ea9      	ldr	r6, [pc, #676]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036cc:	466d      	mov	r5, sp
 80036ce:	f106 0410 	add.w	r4, r6, #16
 80036d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80036de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80036e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80036e6:	f7fd ffcf 	bl	8001688 <get_pressure>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4aa0      	ldr	r2, [pc, #640]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036ee:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 80036f0:	489f      	ldr	r0, [pc, #636]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036f2:	f7fe f895 	bl	8001820 <get_altitude>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4a9d      	ldr	r2, [pc, #628]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036fa:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 80036fc:	4b9c      	ldr	r3, [pc, #624]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	4a9c      	ldr	r2, [pc, #624]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8003702:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 8003704:	4b9c      	ldr	r3, [pc, #624]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	2b02      	cmp	r3, #2
 800370a:	f040 8204 	bne.w	8003b16 <HAL_TIM_PeriodElapsedCallback+0x81e>

		  controller_counter = 0;
 800370e:	4b9a      	ldr	r3, [pc, #616]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003710:	2200      	movs	r2, #0
 8003712:	801a      	strh	r2, [r3, #0]



		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 8003714:	201d      	movs	r0, #29
 8003716:	f7ff f9e5 	bl	8002ae4 <_Z7GyroOkuh>
 800371a:	4603      	mov	r3, r0
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fab5 	bl	8000c8c <__aeabi_i2f>
 8003722:	4602      	mov	r2, r0
 8003724:	4b95      	ldr	r3, [pc, #596]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f7fd f9f8 	bl	8000b20 <__aeabi_fsub>
 8003730:	4603      	mov	r3, r0
 8003732:	4993      	ldr	r1, [pc, #588]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fbb1 	bl	8000e9c <__aeabi_fdiv>
 800373a:	4603      	mov	r3, r0
 800373c:	461a      	mov	r2, r3
 800373e:	4b91      	ldr	r3, [pc, #580]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003740:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 8003742:	201f      	movs	r0, #31
 8003744:	f7ff f9ce 	bl	8002ae4 <_Z7GyroOkuh>
 8003748:	4603      	mov	r3, r0
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fa9e 	bl	8000c8c <__aeabi_i2f>
 8003750:	4602      	mov	r2, r0
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fd f9e1 	bl	8000b20 <__aeabi_fsub>
 800375e:	4603      	mov	r3, r0
 8003760:	4987      	ldr	r1, [pc, #540]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fb9a 	bl	8000e9c <__aeabi_fdiv>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	4b87      	ldr	r3, [pc, #540]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x694>)
 800376e:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8003770:	2021      	movs	r0, #33	; 0x21
 8003772:	f7ff f9b7 	bl	8002ae4 <_Z7GyroOkuh>
 8003776:	4603      	mov	r3, r0
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fa87 	bl	8000c8c <__aeabi_i2f>
 800377e:	4602      	mov	r2, r0
 8003780:	4b83      	ldr	r3, [pc, #524]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7fd f9ca 	bl	8000b20 <__aeabi_fsub>
 800378c:	4603      	mov	r3, r0
 800378e:	497c      	ldr	r1, [pc, #496]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd fb83 	bl	8000e9c <__aeabi_fdiv>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	4b7e      	ldr	r3, [pc, #504]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 800379c:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 800379e:	4b79      	ldr	r3, [pc, #484]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7d      	ldr	r2, [pc, #500]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80037a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		  EKF.gyro[1] = -1*gyroY;
 80037a8:	4b78      	ldr	r3, [pc, #480]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x694>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037b0:	4a79      	ldr	r2, [pc, #484]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80037b2:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
		  EKF.gyro[2] = gyroZ;
 80037b6:	4b77      	ldr	r3, [pc, #476]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a77      	ldr	r2, [pc, #476]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80037bc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 80037c0:	2032      	movs	r0, #50	; 0x32
 80037c2:	f7ff fa15 	bl	8002bf0 <_Z6AccOkuh>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fa5f 	bl	8000c8c <__aeabi_i2f>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4a72      	ldr	r2, [pc, #456]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80037d2:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 80037d4:	2034      	movs	r0, #52	; 0x34
 80037d6:	f7ff fa0b 	bl	8002bf0 <_Z6AccOkuh>
 80037da:	4603      	mov	r3, r0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fa55 	bl	8000c8c <__aeabi_i2f>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4a6e      	ldr	r2, [pc, #440]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80037e6:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 80037e8:	2036      	movs	r0, #54	; 0x36
 80037ea:	f7ff fa01 	bl	8002bf0 <_Z6AccOkuh>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fd fa4b 	bl	8000c8c <__aeabi_i2f>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4a6a      	ldr	r2, [pc, #424]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80037fa:	6013      	str	r3, [r2, #0]

		  accXc = (float)accX* 0.0078;
 80037fc:	4b67      	ldr	r3, [pc, #412]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fe09 	bl	8000418 <__aeabi_f2d>
 8003806:	a358      	add	r3, pc, #352	; (adr r3, 8003968 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc fe5c 	bl	80004c8 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f92e 	bl	8000a78 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	4a62      	ldr	r2, [pc, #392]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003820:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fdf6 	bl	8000418 <__aeabi_f2d>
 800382c:	a34e      	add	r3, pc, #312	; (adr r3, 8003968 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f7fc fe49 	bl	80004c8 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f7fd f91b 	bl	8000a78 <__aeabi_d2f>
 8003842:	4603      	mov	r3, r0
 8003844:	4a59      	ldr	r2, [pc, #356]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8003846:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 8003848:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fde3 	bl	8000418 <__aeabi_f2d>
 8003852:	a345      	add	r3, pc, #276	; (adr r3, 8003968 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f7fc fe36 	bl	80004c8 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd f908 	bl	8000a78 <__aeabi_d2f>
 8003868:	4603      	mov	r3, r0
 800386a:	4a51      	ldr	r2, [pc, #324]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 800386c:	6013      	str	r3, [r2, #0]
		  accZc = 0.0091315*accYs - 0.072464*accXs + 0.98549*accZs + 0.08443;
		  */


		  //float acc[3];
		  EKF.acc[0] = accXc;// - AccXh;
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a49      	ldr	r2, [pc, #292]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003874:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
		  EKF.acc[1] = accYc;// - AccYh;
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a46      	ldr	r2, [pc, #280]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800387e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		  EKF.acc[2] = accZc;// - AccZh;
 8003882:	4b4b      	ldr	r3, [pc, #300]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a44      	ldr	r2, [pc, #272]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003888:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 800388c:	4b49      	ldr	r3, [pc, #292]	; (80039b4 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
		  EKF.acc_vert = (accZc - 1.0)  * g;
 8003890:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fdbf 	bl	8000418 <__aeabi_f2d>
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	4b46      	ldr	r3, [pc, #280]	; (80039b8 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80038a0:	f7fc fc5a 	bl	8000158 <__aeabi_dsub>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4614      	mov	r4, r2
 80038aa:	461d      	mov	r5, r3
 80038ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038ae:	f7fc fdb3 	bl	8000418 <__aeabi_f2d>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4620      	mov	r0, r4
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7fc fe05 	bl	80004c8 <__aeabi_dmul>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	f7fd f8d7 	bl	8000a78 <__aeabi_d2f>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4a32      	ldr	r2, [pc, #200]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80038ce:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178

		  float ax_b = (accXc-AccXh);
 80038d2:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a39      	ldr	r2, [pc, #228]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd f91f 	bl	8000b20 <__aeabi_fsub>
 80038e2:	4603      	mov	r3, r0
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ax_b = ax_b - 1 * sin(deg2rad*EKF.state.angles[1]);
 80038e6:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80038e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80038ec:	4934      	ldr	r1, [pc, #208]	; (80039c0 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fa20 	bl	8000d34 <__aeabi_fmul>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe f8ae 	bl	8001a58 <_ZSt3sinf>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4619      	mov	r1, r3
 8003900:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003902:	f7fd f90d 	bl	8000b20 <__aeabi_fsub>
 8003906:	4603      	mov	r3, r0
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ax_b = ax_b * cos(deg2rad*EKF.state.angles[1]);
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800390c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003910:	492b      	ldr	r1, [pc, #172]	; (80039c0 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fa0e 	bl	8000d34 <__aeabi_fmul>
 8003918:	4603      	mov	r3, r0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe f890 	bl	8001a40 <_ZSt3cosf>
 8003920:	4603      	mov	r3, r0
 8003922:	4619      	mov	r1, r3
 8003924:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003926:	f7fd fa05 	bl	8000d34 <__aeabi_fmul>
 800392a:	4603      	mov	r3, r0
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
		  float accXm = ax_b  * g;
 800392e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003930:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003932:	f7fd f9ff 	bl	8000d34 <__aeabi_fmul>
 8003936:	4603      	mov	r3, r0
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
		  float accYm = (accYc-AccYh)  * g;
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a21      	ldr	r2, [pc, #132]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd f8eb 	bl	8000b20 <__aeabi_fsub>
 800394a:	4603      	mov	r3, r0
 800394c:	4619      	mov	r1, r3
 800394e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003950:	f7fd f9f0 	bl	8000d34 <__aeabi_fmul>
 8003954:	4603      	mov	r3, r0
 8003956:	637b      	str	r3, [r7, #52]	; 0x34

		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 8003958:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
 8003960:	e032      	b.n	80039c8 <HAL_TIM_PeriodElapsedCallback+0x6d0>
 8003962:	bf00      	nop
 8003964:	f3af 8000 	nop.w
 8003968:	8e8a71de 	.word	0x8e8a71de
 800396c:	3f7ff2e4 	.word	0x3f7ff2e4
 8003970:	20000d28 	.word	0x20000d28
 8003974:	20000d08 	.word	0x20000d08
 8003978:	20000d20 	.word	0x20000d20
 800397c:	20000304 	.word	0x20000304
 8003980:	41660000 	.word	0x41660000
 8003984:	200002e0 	.word	0x200002e0
 8003988:	20000308 	.word	0x20000308
 800398c:	200002e4 	.word	0x200002e4
 8003990:	2000030c 	.word	0x2000030c
 8003994:	200002e8 	.word	0x200002e8
 8003998:	200004d8 	.word	0x200004d8
 800399c:	200002ec 	.word	0x200002ec
 80039a0:	200002f0 	.word	0x200002f0
 80039a4:	200002f4 	.word	0x200002f4
 80039a8:	200002f8 	.word	0x200002f8
 80039ac:	200002fc 	.word	0x200002fc
 80039b0:	20000300 	.word	0x20000300
 80039b4:	411cf5c3 	.word	0x411cf5c3
 80039b8:	3ff00000 	.word	0x3ff00000
 80039bc:	20000310 	.word	0x20000310
 80039c0:	3c8e8a72 	.word	0x3c8e8a72
 80039c4:	20000314 	.word	0x20000314
		  EKF.accYm = accYm;
 80039c8:	4a55      	ldr	r2, [pc, #340]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194


		  EKF.sonar_alt = sonar_alt;
 80039d0:	4b54      	ldr	r3, [pc, #336]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80039d6:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
		  EKF.baro_alt = baro_alt;
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a50      	ldr	r2, [pc, #320]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80039e0:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 80039e4:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x834>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80039ec:	4a4c      	ldr	r2, [pc, #304]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80039ee:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

		  EKF.Run();
 80039f2:	484b      	ldr	r0, [pc, #300]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80039f4:	f008 f934 	bl	800bc60 <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 80039f8:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80039fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039fe:	4a4c      	ldr	r2, [pc, #304]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a00:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a04:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003a08:	4a49      	ldr	r2, [pc, #292]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a0a:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8003a0c:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a0e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003a12:	4a47      	ldr	r2, [pc, #284]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a14:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8003a16:	4b42      	ldr	r3, [pc, #264]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a18:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a1c:	4a44      	ldr	r2, [pc, #272]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a1e:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8003a20:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003a26:	4a42      	ldr	r2, [pc, #264]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a28:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a30:	4a3f      	ldr	r2, [pc, #252]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a32:	6153      	str	r3, [r2, #20]


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8003a34:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fe21 	bl	8002680 <_Z9checkModei>

			controller.z_vel = EKF.vz;
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a40:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003a44:	4a3c      	ldr	r2, [pc, #240]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003a46:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
			controller.vx	 = EKF.vx;
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a4c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003a50:	4a39      	ldr	r2, [pc, #228]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003a52:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			controller.x     = EKF.xpos;
 8003a56:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a58:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003a5c:	4a36      	ldr	r2, [pc, #216]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003a5e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			//controller.z0 = z0;
			controller.z = EKF.alt_gnd;
 8003a62:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003a64:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8003a68:	4a33      	ldr	r2, [pc, #204]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003a6a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

		  controller.state = state;
 8003a6e:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003a70:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a72:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8003a76:	4615      	mov	r5, r2
 8003a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003a86:	4a2d      	ldr	r2, [pc, #180]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003a88:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8003a8c:	4615      	mov	r5, r2
 8003a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f8f4 	bl	8000c8c <__aeabi_i2f>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003aa8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

		  controller_output_ang = controller.Run();
 8003aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab0:	4921      	ldr	r1, [pc, #132]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f005 fbfe 	bl	80092b4 <_ZN10Controller3RunEv>
 8003ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003abc:	4619      	mov	r1, r3
 8003abe:	4820      	ldr	r0, [pc, #128]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003ac0:	f000 f95d 	bl	8003d7e <_ZNSt6vectorIfSaIfEEaSEOS1_>
 8003ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f93d 	bl	8003d48 <_ZNSt6vectorIfSaIfEED1Ev>

		  controller_output[0] = controller.controller_output_pwm[0];
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003ad0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003ad6:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003ada:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003ae0:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003ae4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003ae8:	4a16      	ldr	r2, [pc, #88]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003aea:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003aee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003af2:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003af4:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003af8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003afc:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003afe:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003b02:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003b06:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003b08:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;

		  PWMYaz();
 8003b0a:	f7ff fb21 	bl	8003150 <_Z6PWMYazv>


		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8003b0e:	2102      	movs	r1, #2
 8003b10:	480d      	ldr	r0, [pc, #52]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003b12:	f001 fb09 	bl	8005128 <HAL_GPIO_TogglePin>
		}
		}
	}
 8003b16:	bf00      	nop
 8003b18:	3754      	adds	r7, #84	; 0x54
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200004d8 	.word	0x200004d8
 8003b24:	20000d0c 	.word	0x20000d0c
 8003b28:	20000d08 	.word	0x20000d08
 8003b2c:	20000d80 	.word	0x20000d80
 8003b30:	20000340 	.word	0x20000340
 8003b34:	20000cac 	.word	0x20000cac
 8003b38:	200006e0 	.word	0x200006e0
 8003b3c:	2000031c 	.word	0x2000031c
 8003b40:	20000c90 	.word	0x20000c90
 8003b44:	20000c80 	.word	0x20000c80
 8003b48:	40010c00 	.word	0x40010c00

08003b4c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a54      	ldr	r2, [pc, #336]	; (8003ca8 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	f040 80a0 	bne.w	8003c9e <HAL_TIM_IC_CaptureCallback+0x152>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7f1b      	ldrb	r3, [r3, #28]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	f040 809b 	bne.w	8003c9e <HAL_TIM_IC_CaptureCallback+0x152>
	{
				IC_Val1 = IC_Val2;
 8003b68:	4b50      	ldr	r3, [pc, #320]	; (8003cac <HAL_TIM_IC_CaptureCallback+0x160>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003b6e:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8003b70:	2108      	movs	r1, #8
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f004 fa14 	bl	8007fa0 <HAL_TIM_ReadCapturedValue>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_TIM_IC_CaptureCallback+0x160>)
 8003b7e:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8003b80:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_TIM_IC_CaptureCallback+0x160>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	4a4a      	ldr	r2, [pc, #296]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b8c:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0fdb      	lsrs	r3, r3, #31
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8003b9a:	4b46      	ldr	r3, [pc, #280]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003ba2:	33ff      	adds	r3, #255	; 0xff
 8003ba4:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003ba6:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 1000 && Diff <= 2000) {
 8003ba8:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb0:	db06      	blt.n	8003bc0 <HAL_TIM_IC_CaptureCallback+0x74>
 8003bb2:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003bba:	dc01      	bgt.n	8003bc0 <HAL_TIM_IC_CaptureCallback+0x74>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_TIM_IC_CaptureCallback+0x76>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <HAL_TIM_IC_CaptureCallback+0xb4>

						ch_[i] = ch[i];
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b21b      	sxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b3a      	ldr	r3, [pc, #232]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_TIM_IC_CaptureCallback+0x170>)
 8003bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bdc:	4a38      	ldr	r2, [pc, #224]	; (8003cc0 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003bde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 8003be2:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a33      	ldr	r2, [pc, #204]	; (8003cbc <HAL_TIM_IC_CaptureCallback+0x170>)
 8003bf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 8003bf4:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <HAL_TIM_IC_CaptureCallback+0x178>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a32      	ldr	r2, [pc, #200]	; (8003cc4 <HAL_TIM_IC_CaptureCallback+0x178>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e015      	b.n	8003c2c <HAL_TIM_IC_CaptureCallback+0xe0>


					}

					else if(Diff > CH0) {
 8003c00:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bfcc      	ite	gt
 8003c0c:	2301      	movgt	r3, #1
 8003c0e:	2300      	movle	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1c:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 8003c1e:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c24:	6213      	str	r3, [r2, #32]
						sync = 1;
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8003c2c:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe ff78 	bl	8002b28 <_Z7pwm2angt>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c3c:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe ff6f 	bl	8002b28 <_Z7pwm2angt>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c4e:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8003c50:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe ff9e 	bl	8002ba0 <_Z8pwm2ratet>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c68:	6153      	str	r3, [r2, #20]

				i++;
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b21b      	sxth	r3, r3
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b21a      	sxth	r2, r3
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c7a:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b21b      	sxth	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8003c86:	fb83 2301 	smull	r2, r3, r3, r1
 8003c8a:	105a      	asrs	r2, r3, #1
 8003c8c:	17cb      	asrs	r3, r1, #31
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	1aca      	subs	r2, r1, r3
 8003c98:	b212      	sxth	r2, r2
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c9c:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000018c 	.word	0x2000018c
 8003cac:	20000c9c 	.word	0x20000c9c
 8003cb0:	20000ca0 	.word	0x20000ca0
 8003cb4:	20000ca4 	.word	0x20000ca4
 8003cb8:	20000ca8 	.word	0x20000ca8
 8003cbc:	20000cac 	.word	0x20000cac
 8003cc0:	20000cd0 	.word	0x20000cd0
 8003cc4:	20000d64 	.word	0x20000d64
 8003cc8:	20000cf4 	.word	0x20000cf4
 8003ccc:	2000031c 	.word	0x2000031c
 8003cd0:	38e38e39 	.word	0x38e38e39

08003cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd8:	b672      	cpsid	i
}
 8003cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cdc:	e7fe      	b.n	8003cdc <Error_Handler+0x8>

08003cde <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f85e 	bl	8003da8 <_ZNSaIfEC1Ev>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f866 	bl	8003dc0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_ZNSaIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f86d 	bl	8003de6 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f862 	bl	8003dfa <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fd fea5 	bl	8001a88 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681c      	ldr	r4, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f860 	bl	8003e20 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003d60:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d62:	461a      	mov	r2, r3
 8003d64:	4629      	mov	r1, r5
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 f864 	bl	8003e34 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ffd1 	bl	8003d16 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdb0      	pop	{r4, r5, r7, pc}

08003d7e <_ZNSt6vectorIfSaIfEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8003d7e:	b590      	push	{r4, r7, lr}
 8003d80:	b085      	sub	sp, #20
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8003d8c:	6838      	ldr	r0, [r7, #0]
 8003d8e:	f000 f85f 	bl	8003e50 <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4622      	mov	r2, r4
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f863 	bl	8003e64 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8003d9e:	687b      	ldr	r3, [r7, #4]
      }
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd90      	pop	{r4, r7, pc}

08003da8 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f895 	bl	8003ee0 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
	{ }
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
	if (__p)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f86e 	bl	8003ef4 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f865 	bl	8003f12 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	f107 031c 	add.w	r3, r7, #28
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f857 	bl	8003f2c <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>
 8003e7e:	f107 021c 	add.w	r2, r7, #28
 8003e82:	f107 0310 	add.w	r3, r7, #16
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f860 	bl	8003f4e <_ZNSt6vectorIfSaIfEEC1ERKS0_>
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff33 	bl	8003cfe <_ZNSaIfED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f864 	bl	8003f6c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f85d 	bl	8003f6c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffb3 	bl	8003e20 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ffae 	bl	8003e20 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 f86d 	bl	8003fa8 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>
	vector __tmp(get_allocator());
 8003ece:	f107 0310 	add.w	r3, r7, #16
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ff38 	bl	8003d48 <_ZNSt6vectorIfSaIfEED1Ev>
      }
 8003ed8:	bf00      	nop
 8003eda:	3724      	adds	r7, #36	; 0x24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}

08003ee0 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f85d 	bl	8003fc4 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f85d 	bl	8003fde <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	f000 f85b 	bl	8003ff2 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f860 	bl	8004006 <_ZNSaIfEC1ERKS_>
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <_ZNSt6vectorIfSaIfEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f860 	bl	8004022 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff20 	bl	8003dc0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f85a 	bl	8004040 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8003f8c:	6839      	ldr	r1, [r7, #0]
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f856 	bl	8004040 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8003f94:	f107 030c 	add.w	r3, r7, #12
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6838      	ldr	r0, [r7, #0]
 8003f9c:	f000 f850 	bl	8004040 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f858 	bl	800406c <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8003fd0:	68b8      	ldr	r0, [r7, #8]
 8003fd2:	f008 fbda 	bl	800c78a <_ZdlPv>
      }
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004010:	6839      	ldr	r1, [r7, #0]
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f837 	bl	8004086 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f833 	bl	800409c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	609a      	str	r2, [r3, #8]
	}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8004078:	68b8      	ldr	r0, [r7, #8]
 800407a:	f000 f821 	bl	80040c0 <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ffac 	bl	8004006 <_ZNSaIfEC1ERKS_>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fe85 	bl	8003dc0 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10d      	bne.n	8004100 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Kalman_Filtresi EKF;
 80040ee:	480f      	ldr	r0, [pc, #60]	; (800412c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80040f0:	f005 ff12 	bl	8009f18 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 80040f4:	480e      	ldr	r0, [pc, #56]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80040f6:	f004 fffb 	bl	80090f0 <_ZN10ControllerC1Ev>
std::vector<float> controller_output_ang;
 80040fa:	480e      	ldr	r0, [pc, #56]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80040fc:	f7fd fcdd 	bl	8001aba <_ZNSt6vectorIfSaIfEEC1Ev>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800410c:	4293      	cmp	r3, r2
 800410e:	d108      	bne.n	8004122 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8004110:	4808      	ldr	r0, [pc, #32]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004112:	f7ff fe19 	bl	8003d48 <_ZNSt6vectorIfSaIfEED1Ev>
Controller controller;
 8004116:	4806      	ldr	r0, [pc, #24]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004118:	f005 fca0 	bl	8009a5c <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 800411c:	4803      	ldr	r0, [pc, #12]	; (800412c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800411e:	f007 fe93 	bl	800be48 <_ZN15Kalman_FiltresiD1Ev>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200004d8 	.word	0x200004d8
 8004130:	200006e0 	.word	0x200006e0
 8004134:	20000c90 	.word	0x20000c90

08004138 <_GLOBAL__sub_I_hi2c1>:
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
 800413c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004140:	2001      	movs	r0, #1
 8004142:	f7ff ffc7 	bl	80040d4 <_Z41__static_initialization_and_destruction_0ii>
 8004146:	bd80      	pop	{r7, pc}

08004148 <_GLOBAL__sub_D_hi2c1>:
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
 800414c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff ffbf 	bl	80040d4 <_Z41__static_initialization_and_destruction_0ii>
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_MspInit+0x5c>)
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <HAL_MspInit+0x5c>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6193      	str	r3, [r2, #24]
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <HAL_MspInit+0x5c>)
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_MspInit+0x5c>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <HAL_MspInit+0x5c>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	61d3      	str	r3, [r2, #28]
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <HAL_MspInit+0x5c>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_MspInit+0x60>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <HAL_MspInit+0x60>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40010000 	.word	0x40010000

080041bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 0310 	add.w	r3, r7, #16
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_I2C_MspInit+0x70>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d123      	bne.n	8004224 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_I2C_MspInit+0x74>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <HAL_I2C_MspInit+0x74>)
 80041e2:	f043 0308 	orr.w	r3, r3, #8
 80041e6:	6193      	str	r3, [r2, #24]
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_I2C_MspInit+0x74>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041f8:	2312      	movs	r3, #18
 80041fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	4619      	mov	r1, r3
 8004206:	480b      	ldr	r0, [pc, #44]	; (8004234 <HAL_I2C_MspInit+0x78>)
 8004208:	f000 fdf2 	bl	8004df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_I2C_MspInit+0x74>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <HAL_I2C_MspInit+0x74>)
 8004212:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004216:	61d3      	str	r3, [r2, #28]
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_I2C_MspInit+0x74>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004224:	bf00      	nop
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40005400 	.word	0x40005400
 8004230:	40021000 	.word	0x40021000
 8004234:	40010c00 	.word	0x40010c00

08004238 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_TIM_PWM_MspInit+0x34>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10b      	bne.n	8004262 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_TIM_PWM_MspInit+0x38>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	4a08      	ldr	r2, [pc, #32]	; (8004270 <HAL_TIM_PWM_MspInit+0x38>)
 8004250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004254:	6193      	str	r3, [r2, #24]
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_TIM_PWM_MspInit+0x38>)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40021000 	.word	0x40021000

08004274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 0318 	add.w	r3, r7, #24
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d114      	bne.n	80042be <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004294:	4b2d      	ldr	r3, [pc, #180]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4a2c      	ldr	r2, [pc, #176]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	61d3      	str	r3, [r2, #28]
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80042ac:	2200      	movs	r2, #0
 80042ae:	2101      	movs	r1, #1
 80042b0:	201c      	movs	r0, #28
 80042b2:	f000 fb78 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042b6:	201c      	movs	r0, #28
 80042b8:	f000 fb91 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80042bc:	e042      	b.n	8004344 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a23      	ldr	r2, [pc, #140]	; (8004350 <HAL_TIM_Base_MspInit+0xdc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d12c      	bne.n	8004322 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 80042ce:	f043 0302 	orr.w	r3, r3, #2
 80042d2:	61d3      	str	r3, [r2, #28]
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 80042e6:	f043 0308 	orr.w	r3, r3, #8
 80042ea:	6193      	str	r3, [r2, #24]
 80042ec:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042f8:	2301      	movs	r3, #1
 80042fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004304:	f107 0318 	add.w	r3, r7, #24
 8004308:	4619      	mov	r1, r3
 800430a:	4812      	ldr	r0, [pc, #72]	; (8004354 <HAL_TIM_Base_MspInit+0xe0>)
 800430c:	f000 fd70 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004310:	2200      	movs	r2, #0
 8004312:	2100      	movs	r1, #0
 8004314:	201d      	movs	r0, #29
 8004316:	f000 fb46 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800431a:	201d      	movs	r0, #29
 800431c:	f000 fb5f 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 8004320:	e010      	b.n	8004344 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <HAL_TIM_Base_MspInit+0xe4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d10b      	bne.n	8004344 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4a06      	ldr	r2, [pc, #24]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 8004332:	f043 0304 	orr.w	r3, r3, #4
 8004336:	61d3      	str	r3, [r2, #28]
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <HAL_TIM_Base_MspInit+0xd8>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
}
 8004344:	bf00      	nop
 8004346:	3728      	adds	r7, #40	; 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	40000400 	.word	0x40000400
 8004354:	40010c00 	.word	0x40010c00
 8004358:	40000800 	.word	0x40000800

0800435c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_TIM_MspPostInit+0x8c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d131      	bne.n	80043e0 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_TIM_MspPostInit+0x90>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <HAL_TIM_MspPostInit+0x90>)
 8004382:	f043 0308 	orr.w	r3, r3, #8
 8004386:	6193      	str	r3, [r2, #24]
 8004388:	4b18      	ldr	r3, [pc, #96]	; (80043ec <HAL_TIM_MspPostInit+0x90>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004394:	4b15      	ldr	r3, [pc, #84]	; (80043ec <HAL_TIM_MspPostInit+0x90>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <HAL_TIM_MspPostInit+0x90>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6193      	str	r3, [r2, #24]
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_TIM_MspPostInit+0x90>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80043ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80043b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b2:	2302      	movs	r3, #2
 80043b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b6:	2302      	movs	r3, #2
 80043b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	4619      	mov	r1, r3
 80043c0:	480b      	ldr	r0, [pc, #44]	; (80043f0 <HAL_TIM_MspPostInit+0x94>)
 80043c2:	f000 fd15 	bl	8004df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80043c6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80043ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043cc:	2302      	movs	r3, #2
 80043ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d0:	2302      	movs	r3, #2
 80043d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d4:	f107 0310 	add.w	r3, r7, #16
 80043d8:	4619      	mov	r1, r3
 80043da:	4806      	ldr	r0, [pc, #24]	; (80043f4 <HAL_TIM_MspPostInit+0x98>)
 80043dc:	f000 fd08 	bl	8004df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043e0:	bf00      	nop
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40010c00 	.word	0x40010c00
 80043f4:	40010800 	.word	0x40010800

080043f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004400:	f107 0318 	add.w	r3, r7, #24
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4b      	ldr	r2, [pc, #300]	; (8004540 <HAL_UART_MspInit+0x148>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d159      	bne.n	80044cc <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004418:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <HAL_UART_MspInit+0x14c>)
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	4a49      	ldr	r2, [pc, #292]	; (8004544 <HAL_UART_MspInit+0x14c>)
 800441e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004422:	6193      	str	r3, [r2, #24]
 8004424:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_UART_MspInit+0x14c>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004430:	4b44      	ldr	r3, [pc, #272]	; (8004544 <HAL_UART_MspInit+0x14c>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4a43      	ldr	r2, [pc, #268]	; (8004544 <HAL_UART_MspInit+0x14c>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	6193      	str	r3, [r2, #24]
 800443c:	4b41      	ldr	r3, [pc, #260]	; (8004544 <HAL_UART_MspInit+0x14c>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800444c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	2302      	movs	r3, #2
 8004450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004452:	2303      	movs	r3, #3
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004456:	f107 0318 	add.w	r3, r7, #24
 800445a:	4619      	mov	r1, r3
 800445c:	483a      	ldr	r0, [pc, #232]	; (8004548 <HAL_UART_MspInit+0x150>)
 800445e:	f000 fcc7 	bl	8004df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446c:	2300      	movs	r3, #0
 800446e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004470:	f107 0318 	add.w	r3, r7, #24
 8004474:	4619      	mov	r1, r3
 8004476:	4834      	ldr	r0, [pc, #208]	; (8004548 <HAL_UART_MspInit+0x150>)
 8004478:	f000 fcba 	bl	8004df0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800447c:	4b33      	ldr	r3, [pc, #204]	; (800454c <HAL_UART_MspInit+0x154>)
 800447e:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_UART_MspInit+0x158>)
 8004480:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004482:	4b32      	ldr	r3, [pc, #200]	; (800454c <HAL_UART_MspInit+0x154>)
 8004484:	2200      	movs	r2, #0
 8004486:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004488:	4b30      	ldr	r3, [pc, #192]	; (800454c <HAL_UART_MspInit+0x154>)
 800448a:	2200      	movs	r2, #0
 800448c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_UART_MspInit+0x154>)
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <HAL_UART_MspInit+0x154>)
 8004496:	2200      	movs	r2, #0
 8004498:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800449a:	4b2c      	ldr	r3, [pc, #176]	; (800454c <HAL_UART_MspInit+0x154>)
 800449c:	2200      	movs	r2, #0
 800449e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <HAL_UART_MspInit+0x154>)
 80044a2:	2220      	movs	r2, #32
 80044a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80044a6:	4b29      	ldr	r3, [pc, #164]	; (800454c <HAL_UART_MspInit+0x154>)
 80044a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80044ae:	4827      	ldr	r0, [pc, #156]	; (800454c <HAL_UART_MspInit+0x154>)
 80044b0:	f000 fab0 	bl	8004a14 <HAL_DMA_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80044ba:	f7ff fc0b 	bl	8003cd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <HAL_UART_MspInit+0x154>)
 80044c2:	635a      	str	r2, [r3, #52]	; 0x34
 80044c4:	4a21      	ldr	r2, [pc, #132]	; (800454c <HAL_UART_MspInit+0x154>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044ca:	e034      	b.n	8004536 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a20      	ldr	r2, [pc, #128]	; (8004554 <HAL_UART_MspInit+0x15c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d12f      	bne.n	8004536 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_UART_MspInit+0x14c>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <HAL_UART_MspInit+0x14c>)
 80044dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e0:	61d3      	str	r3, [r2, #28]
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_UART_MspInit+0x14c>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_UART_MspInit+0x14c>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <HAL_UART_MspInit+0x14c>)
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	6193      	str	r3, [r2, #24]
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_UART_MspInit+0x14c>)
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004506:	2304      	movs	r3, #4
 8004508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800450e:	2303      	movs	r3, #3
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004512:	f107 0318 	add.w	r3, r7, #24
 8004516:	4619      	mov	r1, r3
 8004518:	480b      	ldr	r0, [pc, #44]	; (8004548 <HAL_UART_MspInit+0x150>)
 800451a:	f000 fc69 	bl	8004df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800451e:	2308      	movs	r3, #8
 8004520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452a:	f107 0318 	add.w	r3, r7, #24
 800452e:	4619      	mov	r1, r3
 8004530:	4805      	ldr	r0, [pc, #20]	; (8004548 <HAL_UART_MspInit+0x150>)
 8004532:	f000 fc5d 	bl	8004df0 <HAL_GPIO_Init>
}
 8004536:	bf00      	nop
 8004538:	3728      	adds	r7, #40	; 0x28
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40013800 	.word	0x40013800
 8004544:	40021000 	.word	0x40021000
 8004548:	40010800 	.word	0x40010800
 800454c:	2000029c 	.word	0x2000029c
 8004550:	40020058 	.word	0x40020058
 8004554:	40004400 	.word	0x40004400

08004558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800455c:	e7fe      	b.n	800455c <NMI_Handler+0x4>

0800455e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004562:	e7fe      	b.n	8004562 <HardFault_Handler+0x4>

08004564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004568:	e7fe      	b.n	8004568 <MemManage_Handler+0x4>

0800456a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800456e:	e7fe      	b.n	800456e <BusFault_Handler+0x4>

08004570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004574:	e7fe      	b.n	8004574 <UsageFault_Handler+0x4>

08004576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004582:	b480      	push	{r7}
 8004584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800458e:	b480      	push	{r7}
 8004590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800459e:	f000 f8eb 	bl	8004778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <DMA1_Channel5_IRQHandler+0x10>)
 80045ae:	f000 faeb 	bl	8004b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	2000029c 	.word	0x2000029c

080045bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045c0:	4802      	ldr	r0, [pc, #8]	; (80045cc <TIM2_IRQHandler+0x10>)
 80045c2:	f003 f9cf 	bl	8007964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000144 	.word	0x20000144

080045d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045d4:	4802      	ldr	r0, [pc, #8]	; (80045e0 <TIM3_IRQHandler+0x10>)
 80045d6:	f003 f9c5 	bl	8007964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	2000018c 	.word	0x2000018c

080045e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
	return 1;
 80045e8:	2301      	movs	r3, #1
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <_kill>:

int _kill(int pid, int sig)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045fc:	f00a fa28 	bl	800ea50 <__errno>
 8004600:	4603      	mov	r3, r0
 8004602:	2216      	movs	r2, #22
 8004604:	601a      	str	r2, [r3, #0]
	return -1;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <_exit>:

void _exit (int status)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800461a:	f04f 31ff 	mov.w	r1, #4294967295
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ffe7 	bl	80045f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004624:	e7fe      	b.n	8004624 <_exit+0x12>
	...

08004628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <_sbrk+0x5c>)
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <_sbrk+0x60>)
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800463c:	4b13      	ldr	r3, [pc, #76]	; (800468c <_sbrk+0x64>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <_sbrk+0x64>)
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <_sbrk+0x68>)
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <_sbrk+0x64>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d207      	bcs.n	8004668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004658:	f00a f9fa 	bl	800ea50 <__errno>
 800465c:	4603      	mov	r3, r0
 800465e:	220c      	movs	r2, #12
 8004660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	e009      	b.n	800467c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004668:	4b08      	ldr	r3, [pc, #32]	; (800468c <_sbrk+0x64>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <_sbrk+0x64>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <_sbrk+0x64>)
 8004678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20005000 	.word	0x20005000
 8004688:	00000400 	.word	0x00000400
 800468c:	20000d9c 	.word	0x20000d9c
 8004690:	20000dc8 	.word	0x20000dc8

08004694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80046a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80046a2:	e003      	b.n	80046ac <LoopCopyDataInit>

080046a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80046a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80046a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80046aa:	3104      	adds	r1, #4

080046ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80046ac:	480a      	ldr	r0, [pc, #40]	; (80046d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80046b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80046b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80046b4:	d3f6      	bcc.n	80046a4 <CopyDataInit>
  ldr r2, =_sbss
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80046b8:	e002      	b.n	80046c0 <LoopFillZerobss>

080046ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80046ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80046bc:	f842 3b04 	str.w	r3, [r2], #4

080046c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80046c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80046c4:	d3f9      	bcc.n	80046ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046c6:	f7ff ffe5 	bl	8004694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046ca:	f00a f9c7 	bl	800ea5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046ce:	f7fd fa03 	bl	8001ad8 <main>
  bx lr
 80046d2:	4770      	bx	lr
  ldr r3, =_sidata
 80046d4:	0800f270 	.word	0x0800f270
  ldr r0, =_sdata
 80046d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80046dc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80046e0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80046e4:	20000dc4 	.word	0x20000dc4

080046e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046e8:	e7fe      	b.n	80046e8 <ADC1_2_IRQHandler>
	...

080046ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_Init+0x28>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a07      	ldr	r2, [pc, #28]	; (8004714 <HAL_Init+0x28>)
 80046f6:	f043 0310 	orr.w	r3, r3, #16
 80046fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046fc:	2003      	movs	r0, #3
 80046fe:	f000 f947 	bl	8004990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004702:	2000      	movs	r0, #0
 8004704:	f000 f808 	bl	8004718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004708:	f7ff fd26 	bl	8004158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40022000 	.word	0x40022000

08004718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_InitTick+0x54>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_InitTick+0x58>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800472e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f95f 	bl	80049fa <HAL_SYSTICK_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e00e      	b.n	8004764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d80a      	bhi.n	8004762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800474c:	2200      	movs	r2, #0
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	f000 f927 	bl	80049a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004758:	4a06      	ldr	r2, [pc, #24]	; (8004774 <HAL_InitTick+0x5c>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000004 	.word	0x20000004
 8004770:	2000000c 	.word	0x2000000c
 8004774:	20000008 	.word	0x20000008

08004778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_IncTick+0x1c>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_IncTick+0x20>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4413      	add	r3, r2
 8004788:	4a03      	ldr	r2, [pc, #12]	; (8004798 <HAL_IncTick+0x20>)
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	2000000c 	.word	0x2000000c
 8004798:	20000db0 	.word	0x20000db0

0800479c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;
 80047a0:	4b02      	ldr	r3, [pc, #8]	; (80047ac <HAL_GetTick+0x10>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	20000db0 	.word	0x20000db0

080047b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7ff fff0 	bl	800479c <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d005      	beq.n	80047d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_Delay+0x44>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047d6:	bf00      	nop
 80047d8:	f7ff ffe0 	bl	800479c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d8f7      	bhi.n	80047d8 <HAL_Delay+0x28>
  {
  }
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2000000c 	.word	0x2000000c

080047f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <__NVIC_SetPriorityGrouping+0x44>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004814:	4013      	ands	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800482a:	4a04      	ldr	r2, [pc, #16]	; (800483c <__NVIC_SetPriorityGrouping+0x44>)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	60d3      	str	r3, [r2, #12]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <__NVIC_GetPriorityGrouping+0x18>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	f003 0307 	and.w	r3, r3, #7
}
 800484e:	4618      	mov	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	2b00      	cmp	r3, #0
 800486c:	db0b      	blt.n	8004886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	f003 021f 	and.w	r2, r3, #31
 8004874:	4906      	ldr	r1, [pc, #24]	; (8004890 <__NVIC_EnableIRQ+0x34>)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2001      	movs	r0, #1
 800487e:	fa00 f202 	lsl.w	r2, r0, r2
 8004882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	e000e100 	.word	0xe000e100

08004894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	db0a      	blt.n	80048be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	490c      	ldr	r1, [pc, #48]	; (80048e0 <__NVIC_SetPriority+0x4c>)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	0112      	lsls	r2, r2, #4
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048bc:	e00a      	b.n	80048d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4908      	ldr	r1, [pc, #32]	; (80048e4 <__NVIC_SetPriority+0x50>)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	3b04      	subs	r3, #4
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	440b      	add	r3, r1
 80048d2:	761a      	strb	r2, [r3, #24]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e100 	.word	0xe000e100
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f1c3 0307 	rsb	r3, r3, #7
 8004902:	2b04      	cmp	r3, #4
 8004904:	bf28      	it	cs
 8004906:	2304      	movcs	r3, #4
 8004908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3304      	adds	r3, #4
 800490e:	2b06      	cmp	r3, #6
 8004910:	d902      	bls.n	8004918 <NVIC_EncodePriority+0x30>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3b03      	subs	r3, #3
 8004916:	e000      	b.n	800491a <NVIC_EncodePriority+0x32>
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43da      	mvns	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	401a      	ands	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004930:	f04f 31ff 	mov.w	r1, #4294967295
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	43d9      	mvns	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004940:	4313      	orrs	r3, r2
         );
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3b01      	subs	r3, #1
 8004958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800495c:	d301      	bcc.n	8004962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800495e:	2301      	movs	r3, #1
 8004960:	e00f      	b.n	8004982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <SysTick_Config+0x40>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496a:	210f      	movs	r1, #15
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	f7ff ff90 	bl	8004894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <SysTick_Config+0x40>)
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <SysTick_Config+0x40>)
 800497c:	2207      	movs	r2, #7
 800497e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000e010 	.word	0xe000e010

08004990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff2d 	bl	80047f8 <__NVIC_SetPriorityGrouping>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049b8:	f7ff ff42 	bl	8004840 <__NVIC_GetPriorityGrouping>
 80049bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f7ff ff90 	bl	80048e8 <NVIC_EncodePriority>
 80049c8:	4602      	mov	r2, r0
 80049ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff5f 	bl	8004894 <__NVIC_SetPriority>
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	4603      	mov	r3, r0
 80049e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff35 	bl	800485c <__NVIC_EnableIRQ>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffa2 	bl	800494c <SysTick_Config>
 8004a08:	4603      	mov	r3, r0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e043      	b.n	8004ab2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <HAL_DMA_Init+0xa8>)
 8004a32:	4413      	add	r3, r2
 8004a34:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <HAL_DMA_Init+0xac>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	009a      	lsls	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <HAL_DMA_Init+0xb0>)
 8004a46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	bffdfff8 	.word	0xbffdfff8
 8004ac0:	cccccccd 	.word	0xcccccccd
 8004ac4:	40020000 	.word	0x40020000

08004ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_DMA_Start_IT+0x20>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e04a      	b.n	8004b7e <HAL_DMA_Start_IT+0xb6>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d13a      	bne.n	8004b70 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f938 	bl	8004d94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 020e 	orr.w	r2, r2, #14
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e00f      	b.n	8004b5e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0204 	bic.w	r2, r2, #4
 8004b4c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 020a 	orr.w	r2, r2, #10
 8004b5c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0201 	orr.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e005      	b.n	8004b7c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d04f      	beq.n	8004c50 <HAL_DMA_IRQHandler+0xc8>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d04a      	beq.n	8004c50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a66      	ldr	r2, [pc, #408]	; (8004d78 <HAL_DMA_IRQHandler+0x1f0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d029      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xae>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a65      	ldr	r2, [pc, #404]	; (8004d7c <HAL_DMA_IRQHandler+0x1f4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a63      	ldr	r2, [pc, #396]	; (8004d80 <HAL_DMA_IRQHandler+0x1f8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01a      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xa4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a62      	ldr	r2, [pc, #392]	; (8004d84 <HAL_DMA_IRQHandler+0x1fc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d012      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x9e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a60      	ldr	r2, [pc, #384]	; (8004d88 <HAL_DMA_IRQHandler+0x200>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00a      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x98>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a5f      	ldr	r2, [pc, #380]	; (8004d8c <HAL_DMA_IRQHandler+0x204>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d102      	bne.n	8004c1a <HAL_DMA_IRQHandler+0x92>
 8004c14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c18:	e00e      	b.n	8004c38 <HAL_DMA_IRQHandler+0xb0>
 8004c1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c1e:	e00b      	b.n	8004c38 <HAL_DMA_IRQHandler+0xb0>
 8004c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c24:	e008      	b.n	8004c38 <HAL_DMA_IRQHandler+0xb0>
 8004c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c2a:	e005      	b.n	8004c38 <HAL_DMA_IRQHandler+0xb0>
 8004c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c30:	e002      	b.n	8004c38 <HAL_DMA_IRQHandler+0xb0>
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	e000      	b.n	8004c38 <HAL_DMA_IRQHandler+0xb0>
 8004c36:	2304      	movs	r3, #4
 8004c38:	4a55      	ldr	r2, [pc, #340]	; (8004d90 <HAL_DMA_IRQHandler+0x208>)
 8004c3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8094 	beq.w	8004d6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c4e:	e08e      	b.n	8004d6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	2202      	movs	r2, #2
 8004c56:	409a      	lsls	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d056      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x186>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d051      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 020a 	bic.w	r2, r2, #10
 8004c86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a38      	ldr	r2, [pc, #224]	; (8004d78 <HAL_DMA_IRQHandler+0x1f0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d029      	beq.n	8004cee <HAL_DMA_IRQHandler+0x166>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a37      	ldr	r2, [pc, #220]	; (8004d7c <HAL_DMA_IRQHandler+0x1f4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d022      	beq.n	8004cea <HAL_DMA_IRQHandler+0x162>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <HAL_DMA_IRQHandler+0x1f8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01a      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x15c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a34      	ldr	r2, [pc, #208]	; (8004d84 <HAL_DMA_IRQHandler+0x1fc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d012      	beq.n	8004cde <HAL_DMA_IRQHandler+0x156>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a32      	ldr	r2, [pc, #200]	; (8004d88 <HAL_DMA_IRQHandler+0x200>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x150>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a31      	ldr	r2, [pc, #196]	; (8004d8c <HAL_DMA_IRQHandler+0x204>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d102      	bne.n	8004cd2 <HAL_DMA_IRQHandler+0x14a>
 8004ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cd0:	e00e      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x168>
 8004cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd6:	e00b      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x168>
 8004cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cdc:	e008      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x168>
 8004cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce2:	e005      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x168>
 8004ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce8:	e002      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x168>
 8004cea:	2320      	movs	r3, #32
 8004cec:	e000      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x168>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <HAL_DMA_IRQHandler+0x208>)
 8004cf2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d034      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d0c:	e02f      	b.n	8004d6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2208      	movs	r2, #8
 8004d14:	409a      	lsls	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d028      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x1e8>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 020e 	bic.w	r2, r2, #14
 8004d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f202 	lsl.w	r2, r1, r2
 8004d46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
    }
  }
  return;
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
}
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40020008 	.word	0x40020008
 8004d7c:	4002001c 	.word	0x4002001c
 8004d80:	40020030 	.word	0x40020030
 8004d84:	40020044 	.word	0x40020044
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	4002006c 	.word	0x4002006c
 8004d90:	40020000 	.word	0x40020000

08004d94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	2101      	movs	r1, #1
 8004dac:	fa01 f202 	lsl.w	r2, r1, r2
 8004db0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d108      	bne.n	8004dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dd2:	e007      	b.n	8004de4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b08b      	sub	sp, #44	; 0x2c
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e02:	e169      	b.n	80050d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e04:	2201      	movs	r2, #1
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	f040 8158 	bne.w	80050d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4a9a      	ldr	r2, [pc, #616]	; (8005090 <HAL_GPIO_Init+0x2a0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d05e      	beq.n	8004eea <HAL_GPIO_Init+0xfa>
 8004e2c:	4a98      	ldr	r2, [pc, #608]	; (8005090 <HAL_GPIO_Init+0x2a0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d875      	bhi.n	8004f1e <HAL_GPIO_Init+0x12e>
 8004e32:	4a98      	ldr	r2, [pc, #608]	; (8005094 <HAL_GPIO_Init+0x2a4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d058      	beq.n	8004eea <HAL_GPIO_Init+0xfa>
 8004e38:	4a96      	ldr	r2, [pc, #600]	; (8005094 <HAL_GPIO_Init+0x2a4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d86f      	bhi.n	8004f1e <HAL_GPIO_Init+0x12e>
 8004e3e:	4a96      	ldr	r2, [pc, #600]	; (8005098 <HAL_GPIO_Init+0x2a8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d052      	beq.n	8004eea <HAL_GPIO_Init+0xfa>
 8004e44:	4a94      	ldr	r2, [pc, #592]	; (8005098 <HAL_GPIO_Init+0x2a8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d869      	bhi.n	8004f1e <HAL_GPIO_Init+0x12e>
 8004e4a:	4a94      	ldr	r2, [pc, #592]	; (800509c <HAL_GPIO_Init+0x2ac>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d04c      	beq.n	8004eea <HAL_GPIO_Init+0xfa>
 8004e50:	4a92      	ldr	r2, [pc, #584]	; (800509c <HAL_GPIO_Init+0x2ac>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d863      	bhi.n	8004f1e <HAL_GPIO_Init+0x12e>
 8004e56:	4a92      	ldr	r2, [pc, #584]	; (80050a0 <HAL_GPIO_Init+0x2b0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d046      	beq.n	8004eea <HAL_GPIO_Init+0xfa>
 8004e5c:	4a90      	ldr	r2, [pc, #576]	; (80050a0 <HAL_GPIO_Init+0x2b0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d85d      	bhi.n	8004f1e <HAL_GPIO_Init+0x12e>
 8004e62:	2b12      	cmp	r3, #18
 8004e64:	d82a      	bhi.n	8004ebc <HAL_GPIO_Init+0xcc>
 8004e66:	2b12      	cmp	r3, #18
 8004e68:	d859      	bhi.n	8004f1e <HAL_GPIO_Init+0x12e>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <HAL_GPIO_Init+0x80>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004eeb 	.word	0x08004eeb
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	08004ed7 	.word	0x08004ed7
 8004e7c:	08004f19 	.word	0x08004f19
 8004e80:	08004f1f 	.word	0x08004f1f
 8004e84:	08004f1f 	.word	0x08004f1f
 8004e88:	08004f1f 	.word	0x08004f1f
 8004e8c:	08004f1f 	.word	0x08004f1f
 8004e90:	08004f1f 	.word	0x08004f1f
 8004e94:	08004f1f 	.word	0x08004f1f
 8004e98:	08004f1f 	.word	0x08004f1f
 8004e9c:	08004f1f 	.word	0x08004f1f
 8004ea0:	08004f1f 	.word	0x08004f1f
 8004ea4:	08004f1f 	.word	0x08004f1f
 8004ea8:	08004f1f 	.word	0x08004f1f
 8004eac:	08004f1f 	.word	0x08004f1f
 8004eb0:	08004f1f 	.word	0x08004f1f
 8004eb4:	08004ecd 	.word	0x08004ecd
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	4a79      	ldr	r2, [pc, #484]	; (80050a4 <HAL_GPIO_Init+0x2b4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004ec2:	e02c      	b.n	8004f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	623b      	str	r3, [r7, #32]
          break;
 8004eca:	e029      	b.n	8004f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	623b      	str	r3, [r7, #32]
          break;
 8004ed4:	e024      	b.n	8004f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	3308      	adds	r3, #8
 8004edc:	623b      	str	r3, [r7, #32]
          break;
 8004ede:	e01f      	b.n	8004f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	623b      	str	r3, [r7, #32]
          break;
 8004ee8:	e01a      	b.n	8004f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	623b      	str	r3, [r7, #32]
          break;
 8004ef6:	e013      	b.n	8004f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d105      	bne.n	8004f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f00:	2308      	movs	r3, #8
 8004f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	611a      	str	r2, [r3, #16]
          break;
 8004f0a:	e009      	b.n	8004f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	615a      	str	r2, [r3, #20]
          break;
 8004f16:	e003      	b.n	8004f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	623b      	str	r3, [r7, #32]
          break;
 8004f1c:	e000      	b.n	8004f20 <HAL_GPIO_Init+0x130>
          break;
 8004f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2bff      	cmp	r3, #255	; 0xff
 8004f24:	d801      	bhi.n	8004f2a <HAL_GPIO_Init+0x13a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	e001      	b.n	8004f2e <HAL_GPIO_Init+0x13e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2bff      	cmp	r3, #255	; 0xff
 8004f34:	d802      	bhi.n	8004f3c <HAL_GPIO_Init+0x14c>
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	e002      	b.n	8004f42 <HAL_GPIO_Init+0x152>
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3b08      	subs	r3, #8
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	210f      	movs	r1, #15
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	6a39      	ldr	r1, [r7, #32]
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80b1 	beq.w	80050d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f70:	4b4d      	ldr	r3, [pc, #308]	; (80050a8 <HAL_GPIO_Init+0x2b8>)
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	4a4c      	ldr	r2, [pc, #304]	; (80050a8 <HAL_GPIO_Init+0x2b8>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	6193      	str	r3, [r2, #24]
 8004f7c:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_GPIO_Init+0x2b8>)
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f88:	4a48      	ldr	r2, [pc, #288]	; (80050ac <HAL_GPIO_Init+0x2bc>)
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	3302      	adds	r3, #2
 8004f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	220f      	movs	r2, #15
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a40      	ldr	r2, [pc, #256]	; (80050b0 <HAL_GPIO_Init+0x2c0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_GPIO_Init+0x1ec>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3f      	ldr	r2, [pc, #252]	; (80050b4 <HAL_GPIO_Init+0x2c4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00d      	beq.n	8004fd8 <HAL_GPIO_Init+0x1e8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <HAL_GPIO_Init+0x2c8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d007      	beq.n	8004fd4 <HAL_GPIO_Init+0x1e4>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3d      	ldr	r2, [pc, #244]	; (80050bc <HAL_GPIO_Init+0x2cc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d101      	bne.n	8004fd0 <HAL_GPIO_Init+0x1e0>
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e006      	b.n	8004fde <HAL_GPIO_Init+0x1ee>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	e004      	b.n	8004fde <HAL_GPIO_Init+0x1ee>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e002      	b.n	8004fde <HAL_GPIO_Init+0x1ee>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_GPIO_Init+0x1ee>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	f002 0203 	and.w	r2, r2, #3
 8004fe4:	0092      	lsls	r2, r2, #2
 8004fe6:	4093      	lsls	r3, r2
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004fee:	492f      	ldr	r1, [pc, #188]	; (80050ac <HAL_GPIO_Init+0x2bc>)
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	089b      	lsrs	r3, r3, #2
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d006      	beq.n	8005016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005008:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	492c      	ldr	r1, [pc, #176]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
 8005014:	e006      	b.n	8005024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005016:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	43db      	mvns	r3, r3
 800501e:	4928      	ldr	r1, [pc, #160]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005020:	4013      	ands	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005030:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	4922      	ldr	r1, [pc, #136]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]
 800503c:	e006      	b.n	800504c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	43db      	mvns	r3, r3
 8005046:	491e      	ldr	r1, [pc, #120]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005048:	4013      	ands	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d006      	beq.n	8005066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	4918      	ldr	r1, [pc, #96]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]
 8005064:	e006      	b.n	8005074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	43db      	mvns	r3, r3
 800506e:	4914      	ldr	r1, [pc, #80]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005070:	4013      	ands	r3, r2
 8005072:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d021      	beq.n	80050c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	490e      	ldr	r1, [pc, #56]	; (80050c0 <HAL_GPIO_Init+0x2d0>)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	4313      	orrs	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
 800508c:	e021      	b.n	80050d2 <HAL_GPIO_Init+0x2e2>
 800508e:	bf00      	nop
 8005090:	10320000 	.word	0x10320000
 8005094:	10310000 	.word	0x10310000
 8005098:	10220000 	.word	0x10220000
 800509c:	10210000 	.word	0x10210000
 80050a0:	10120000 	.word	0x10120000
 80050a4:	10110000 	.word	0x10110000
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40010800 	.word	0x40010800
 80050b4:	40010c00 	.word	0x40010c00
 80050b8:	40011000 	.word	0x40011000
 80050bc:	40011400 	.word	0x40011400
 80050c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_GPIO_Init+0x304>)
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	4909      	ldr	r1, [pc, #36]	; (80050f4 <HAL_GPIO_Init+0x304>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	3301      	adds	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f47f ae8e 	bne.w	8004e04 <HAL_GPIO_Init+0x14>
  }
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	372c      	adds	r7, #44	; 0x2c
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	40010400 	.word	0x40010400

080050f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	807b      	strh	r3, [r7, #2]
 8005104:	4613      	mov	r3, r2
 8005106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005108:	787b      	ldrb	r3, [r7, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800510e:	887a      	ldrh	r2, [r7, #2]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005114:	e003      	b.n	800511e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	041a      	lsls	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	611a      	str	r2, [r3, #16]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4013      	ands	r3, r2
 8005140:	041a      	lsls	r2, r3, #16
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	43d9      	mvns	r1, r3
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	400b      	ands	r3, r1
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	611a      	str	r2, [r3, #16]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr
	...

0800515c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e12b      	b.n	80053c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff f81a 	bl	80041bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2224      	movs	r2, #36	; 0x24
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051c0:	f002 f84e 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 80051c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4a81      	ldr	r2, [pc, #516]	; (80053d0 <HAL_I2C_Init+0x274>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d807      	bhi.n	80051e0 <HAL_I2C_Init+0x84>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a80      	ldr	r2, [pc, #512]	; (80053d4 <HAL_I2C_Init+0x278>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	bf94      	ite	ls
 80051d8:	2301      	movls	r3, #1
 80051da:	2300      	movhi	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e006      	b.n	80051ee <HAL_I2C_Init+0x92>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a7d      	ldr	r2, [pc, #500]	; (80053d8 <HAL_I2C_Init+0x27c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	bf94      	ite	ls
 80051e8:	2301      	movls	r3, #1
 80051ea:	2300      	movhi	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0e7      	b.n	80053c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a78      	ldr	r2, [pc, #480]	; (80053dc <HAL_I2C_Init+0x280>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0c9b      	lsrs	r3, r3, #18
 8005200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <HAL_I2C_Init+0x274>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d802      	bhi.n	8005230 <HAL_I2C_Init+0xd4>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	3301      	adds	r3, #1
 800522e:	e009      	b.n	8005244 <HAL_I2C_Init+0xe8>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	4a69      	ldr	r2, [pc, #420]	; (80053e0 <HAL_I2C_Init+0x284>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	099b      	lsrs	r3, r3, #6
 8005242:	3301      	adds	r3, #1
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	430b      	orrs	r3, r1
 800524a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	495c      	ldr	r1, [pc, #368]	; (80053d0 <HAL_I2C_Init+0x274>)
 8005260:	428b      	cmp	r3, r1
 8005262:	d819      	bhi.n	8005298 <HAL_I2C_Init+0x13c>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1e59      	subs	r1, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005278:	400b      	ands	r3, r1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_I2C_Init+0x138>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1e59      	subs	r1, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fbb1 f3f3 	udiv	r3, r1, r3
 800528c:	3301      	adds	r3, #1
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005292:	e051      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 8005294:	2304      	movs	r3, #4
 8005296:	e04f      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d111      	bne.n	80052c4 <HAL_I2C_Init+0x168>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1e58      	subs	r0, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	440b      	add	r3, r1
 80052ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b2:	3301      	adds	r3, #1
 80052b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e012      	b.n	80052ea <HAL_I2C_Init+0x18e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	0099      	lsls	r1, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_I2C_Init+0x196>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e022      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10e      	bne.n	8005318 <HAL_I2C_Init+0x1bc>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1e58      	subs	r0, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	440b      	add	r3, r1
 8005308:	fbb0 f3f3 	udiv	r3, r0, r3
 800530c:	3301      	adds	r3, #1
 800530e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005316:	e00f      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1e58      	subs	r0, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	0099      	lsls	r1, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	fbb0 f3f3 	udiv	r3, r0, r3
 800532e:	3301      	adds	r3, #1
 8005330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	6809      	ldr	r1, [r1, #0]
 800533c:	4313      	orrs	r3, r2
 800533e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6911      	ldr	r1, [r2, #16]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68d2      	ldr	r2, [r2, #12]
 8005372:	4311      	orrs	r1, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	430b      	orrs	r3, r1
 800537a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	000186a0 	.word	0x000186a0
 80053d4:	001e847f 	.word	0x001e847f
 80053d8:	003d08ff 	.word	0x003d08ff
 80053dc:	431bde83 	.word	0x431bde83
 80053e0:	10624dd3 	.word	0x10624dd3

080053e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	461a      	mov	r2, r3
 80053f0:	460b      	mov	r3, r1
 80053f2:	817b      	strh	r3, [r7, #10]
 80053f4:	4613      	mov	r3, r2
 80053f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053f8:	f7ff f9d0 	bl	800479c <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b20      	cmp	r3, #32
 8005408:	f040 80e0 	bne.w	80055cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	2319      	movs	r3, #25
 8005412:	2201      	movs	r2, #1
 8005414:	4970      	ldr	r1, [pc, #448]	; (80055d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f001 f972 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
 8005424:	e0d3      	b.n	80055ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_I2C_Master_Transmit+0x50>
 8005430:	2302      	movs	r3, #2
 8005432:	e0cc      	b.n	80055ce <HAL_I2C_Master_Transmit+0x1ea>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d007      	beq.n	800545a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2221      	movs	r2, #33	; 0x21
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2210      	movs	r2, #16
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	893a      	ldrh	r2, [r7, #8]
 800548a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a50      	ldr	r2, [pc, #320]	; (80055dc <HAL_I2C_Master_Transmit+0x1f8>)
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800549c:	8979      	ldrh	r1, [r7, #10]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6a3a      	ldr	r2, [r7, #32]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fe5e 	bl	8006164 <I2C_MasterRequestWrite>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e08d      	b.n	80055ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054c8:	e066      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6a39      	ldr	r1, [r7, #32]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f001 f9ec 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d107      	bne.n	80054f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e06b      	b.n	80055ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	781a      	ldrb	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d11b      	bne.n	800556c <HAL_I2C_Master_Transmit+0x188>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	6a39      	ldr	r1, [r7, #32]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f001 f9dc 	bl	800692e <I2C_WaitOnBTFFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00d      	beq.n	8005598 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	2b04      	cmp	r3, #4
 8005582:	d107      	bne.n	8005594 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005592:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e01a      	b.n	80055ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d194      	bne.n	80054ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	00100002 	.word	0x00100002
 80055dc:	ffff0000 	.word	0xffff0000

080055e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08c      	sub	sp, #48	; 0x30
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	461a      	mov	r2, r3
 80055ec:	460b      	mov	r3, r1
 80055ee:	817b      	strh	r3, [r7, #10]
 80055f0:	4613      	mov	r3, r2
 80055f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055f8:	f7ff f8d0 	bl	800479c <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b20      	cmp	r3, #32
 8005608:	f040 823f 	bne.w	8005a8a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2319      	movs	r3, #25
 8005612:	2201      	movs	r2, #1
 8005614:	497f      	ldr	r1, [pc, #508]	; (8005814 <HAL_I2C_Master_Receive+0x234>)
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f001 f872 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
 8005624:	e232      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_I2C_Master_Receive+0x54>
 8005630:	2302      	movs	r3, #2
 8005632:	e22b      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d007      	beq.n	800565a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005668:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2222      	movs	r2, #34	; 0x22
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2210      	movs	r2, #16
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	893a      	ldrh	r2, [r7, #8]
 800568a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a5f      	ldr	r2, [pc, #380]	; (8005818 <HAL_I2C_Master_Receive+0x238>)
 800569a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800569c:	8979      	ldrh	r1, [r7, #10]
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fde0 	bl	8006268 <I2C_MasterRequestRead>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e1ec      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d113      	bne.n	80056e2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e1c0      	b.n	8005a64 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d11e      	bne.n	8005728 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056fa:	b672      	cpsid	i
}
 80056fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fe:	2300      	movs	r3, #0
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005722:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005724:	b662      	cpsie	i
}
 8005726:	e035      	b.n	8005794 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572c:	2b02      	cmp	r3, #2
 800572e:	d11e      	bne.n	800576e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005740:	b672      	cpsid	i
}
 8005742:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800576a:	b662      	cpsie	i
}
 800576c:	e012      	b.n	8005794 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800577c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005794:	e166      	b.n	8005a64 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	2b03      	cmp	r3, #3
 800579c:	f200 811f 	bhi.w	80059de <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d123      	bne.n	80057f0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f001 f8ff 	bl	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e167      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057ee:	e139      	b.n	8005a64 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d152      	bne.n	800589e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	2200      	movs	r2, #0
 8005800:	4906      	ldr	r1, [pc, #24]	; (800581c <HAL_I2C_Master_Receive+0x23c>)
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 ff7c 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e13c      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
 8005812:	bf00      	nop
 8005814:	00100002 	.word	0x00100002
 8005818:	ffff0000 	.word	0xffff0000
 800581c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005820:	b672      	cpsid	i
}
 8005822:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005866:	b662      	cpsie	i
}
 8005868:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800589c:	e0e2      	b.n	8005a64 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	2200      	movs	r2, #0
 80058a6:	497b      	ldr	r1, [pc, #492]	; (8005a94 <HAL_I2C_Master_Receive+0x4b4>)
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 ff29 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0e9      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80058c8:	b672      	cpsid	i
}
 80058ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058fe:	4b66      	ldr	r3, [pc, #408]	; (8005a98 <HAL_I2C_Master_Receive+0x4b8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	4a65      	ldr	r2, [pc, #404]	; (8005a9c <HAL_I2C_Master_Receive+0x4bc>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	0a1a      	lsrs	r2, r3, #8
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	00da      	lsls	r2, r3, #3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	3b01      	subs	r3, #1
 800591c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d118      	bne.n	8005956 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005946:	b662      	cpsie	i
}
 8005948:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e09a      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d1d9      	bne.n	8005918 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80059a6:	b662      	cpsie	i
}
 80059a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059dc:	e042      	b.n	8005a64 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 ffe4 	bl	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e04c      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d118      	bne.n	8005a64 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f ae94 	bne.w	8005796 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e000      	b.n	8005a8c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3728      	adds	r7, #40	; 0x28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	00010004 	.word	0x00010004
 8005a98:	20000004 	.word	0x20000004
 8005a9c:	14f8b589 	.word	0x14f8b589

08005aa0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	817b      	strh	r3, [r7, #10]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	813b      	strh	r3, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aba:	f7fe fe6f 	bl	800479c <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	f040 80d9 	bne.w	8005c80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2319      	movs	r3, #25
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	496d      	ldr	r1, [pc, #436]	; (8005c8c <HAL_I2C_Mem_Write+0x1ec>)
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 fe11 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e0cc      	b.n	8005c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_I2C_Mem_Write+0x56>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e0c5      	b.n	8005c82 <HAL_I2C_Mem_Write+0x1e2>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d007      	beq.n	8005b1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2221      	movs	r2, #33	; 0x21
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2240      	movs	r2, #64	; 0x40
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a3a      	ldr	r2, [r7, #32]
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a4d      	ldr	r2, [pc, #308]	; (8005c90 <HAL_I2C_Mem_Write+0x1f0>)
 8005b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b5e:	88f8      	ldrh	r0, [r7, #6]
 8005b60:	893a      	ldrh	r2, [r7, #8]
 8005b62:	8979      	ldrh	r1, [r7, #10]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fc48 	bl	8006404 <I2C_RequestMemoryWrite>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d052      	beq.n	8005c20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e081      	b.n	8005c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fe92 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d107      	bne.n	8005ba6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e06b      	b.n	8005c82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d11b      	bne.n	8005c20 <HAL_I2C_Mem_Write+0x180>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d017      	beq.n	8005c20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1aa      	bne.n	8005b7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fe7e 	bl	800692e <I2C_WaitOnBTFFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00d      	beq.n	8005c54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d107      	bne.n	8005c50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e016      	b.n	8005c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	00100002 	.word	0x00100002
 8005c90:	ffff0000 	.word	0xffff0000

08005c94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	; 0x30
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	813b      	strh	r3, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cb2:	f7fe fd73 	bl	800479c <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	f040 8244 	bne.w	800614e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	2319      	movs	r3, #25
 8005ccc:	2201      	movs	r2, #1
 8005cce:	4982      	ldr	r1, [pc, #520]	; (8005ed8 <HAL_I2C_Mem_Read+0x244>)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fd15 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e237      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_I2C_Mem_Read+0x5a>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e230      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d007      	beq.n	8005d14 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2222      	movs	r2, #34	; 0x22
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2240      	movs	r2, #64	; 0x40
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a62      	ldr	r2, [pc, #392]	; (8005edc <HAL_I2C_Mem_Read+0x248>)
 8005d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d56:	88f8      	ldrh	r0, [r7, #6]
 8005d58:	893a      	ldrh	r2, [r7, #8]
 8005d5a:	8979      	ldrh	r1, [r7, #10]
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	4603      	mov	r3, r0
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fbe2 	bl	8006530 <I2C_RequestMemoryRead>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e1ec      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d113      	bne.n	8005da6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e1c0      	b.n	8006128 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d11e      	bne.n	8005dec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dbe:	b672      	cpsid	i
}
 8005dc0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005de8:	b662      	cpsie	i
}
 8005dea:	e035      	b.n	8005e58 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d11e      	bne.n	8005e32 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e04:	b672      	cpsid	i
}
 8005e06:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e2e:	b662      	cpsie	i
}
 8005e30:	e012      	b.n	8005e58 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e40:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005e58:	e166      	b.n	8006128 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	f200 811f 	bhi.w	80060a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d123      	bne.n	8005eb4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fd9d 	bl	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e167      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eb2:	e139      	b.n	8006128 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d152      	bne.n	8005f62 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4906      	ldr	r1, [pc, #24]	; (8005ee0 <HAL_I2C_Mem_Read+0x24c>)
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fc1a 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e13c      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
 8005ed6:	bf00      	nop
 8005ed8:	00100002 	.word	0x00100002
 8005edc:	ffff0000 	.word	0xffff0000
 8005ee0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ee4:	b672      	cpsid	i
}
 8005ee6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f2a:	b662      	cpsie	i
}
 8005f2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f60:	e0e2      	b.n	8006128 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2200      	movs	r2, #0
 8005f6a:	497b      	ldr	r1, [pc, #492]	; (8006158 <HAL_I2C_Mem_Read+0x4c4>)
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 fbc7 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0e9      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f8c:	b672      	cpsid	i
}
 8005f8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fc2:	4b66      	ldr	r3, [pc, #408]	; (800615c <HAL_I2C_Mem_Read+0x4c8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	4a65      	ldr	r2, [pc, #404]	; (8006160 <HAL_I2C_Mem_Read+0x4cc>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	0a1a      	lsrs	r2, r3, #8
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	00da      	lsls	r2, r3, #3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d118      	bne.n	800601a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800600a:	b662      	cpsie	i
}
 800600c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e09a      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b04      	cmp	r3, #4
 8006026:	d1d9      	bne.n	8005fdc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800606a:	b662      	cpsie	i
}
 800606c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060a0:	e042      	b.n	8006128 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fc82 	bl	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e04c      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d118      	bne.n	8006128 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f ae94 	bne.w	8005e5a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e000      	b.n	8006150 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
  }
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	00010004 	.word	0x00010004
 800615c:	20000004 	.word	0x20000004
 8006160:	14f8b589 	.word	0x14f8b589

08006164 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	460b      	mov	r3, r1
 8006172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d006      	beq.n	800618e <I2C_MasterRequestWrite+0x2a>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d003      	beq.n	800618e <I2C_MasterRequestWrite+0x2a>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800618c:	d108      	bne.n	80061a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e00b      	b.n	80061b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	2b12      	cmp	r3, #18
 80061a6:	d107      	bne.n	80061b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fa9b 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00d      	beq.n	80061ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061de:	d103      	bne.n	80061e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e035      	b.n	8006258 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f4:	d108      	bne.n	8006208 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061f6:	897b      	ldrh	r3, [r7, #10]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006204:	611a      	str	r2, [r3, #16]
 8006206:	e01b      	b.n	8006240 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006208:	897b      	ldrh	r3, [r7, #10]
 800620a:	11db      	asrs	r3, r3, #7
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0306 	and.w	r3, r3, #6
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f063 030f 	orn	r3, r3, #15
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	490e      	ldr	r1, [pc, #56]	; (8006260 <I2C_MasterRequestWrite+0xfc>)
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fac1 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e010      	b.n	8006258 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4907      	ldr	r1, [pc, #28]	; (8006264 <I2C_MasterRequestWrite+0x100>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fab1 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	00010008 	.word	0x00010008
 8006264:	00010002 	.word	0x00010002

08006268 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	460b      	mov	r3, r1
 8006276:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800628c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d006      	beq.n	80062a2 <I2C_MasterRequestRead+0x3a>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d003      	beq.n	80062a2 <I2C_MasterRequestRead+0x3a>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062a0:	d108      	bne.n	80062b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e00b      	b.n	80062cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	2b11      	cmp	r3, #17
 80062ba:	d107      	bne.n	80062cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa11 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f2:	d103      	bne.n	80062fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e079      	b.n	80063f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006308:	d108      	bne.n	800631c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800630a:	897b      	ldrh	r3, [r7, #10]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	611a      	str	r2, [r3, #16]
 800631a:	e05f      	b.n	80063dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800631c:	897b      	ldrh	r3, [r7, #10]
 800631e:	11db      	asrs	r3, r3, #7
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0306 	and.w	r3, r3, #6
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f063 030f 	orn	r3, r3, #15
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4930      	ldr	r1, [pc, #192]	; (80063fc <I2C_MasterRequestRead+0x194>)
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fa37 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e054      	b.n	80063f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4929      	ldr	r1, [pc, #164]	; (8006400 <I2C_MasterRequestRead+0x198>)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fa27 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e044      	b.n	80063f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800638e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f9af 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00d      	beq.n	80063c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	d103      	bne.n	80063c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e017      	b.n	80063f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063c4:	897b      	ldrh	r3, [r7, #10]
 80063c6:	11db      	asrs	r3, r3, #7
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0306 	and.w	r3, r3, #6
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f063 030e 	orn	r3, r3, #14
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4907      	ldr	r1, [pc, #28]	; (8006400 <I2C_MasterRequestRead+0x198>)
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f9e3 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	00010008 	.word	0x00010008
 8006400:	00010002 	.word	0x00010002

08006404 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	4608      	mov	r0, r1
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	4603      	mov	r3, r0
 8006414:	817b      	strh	r3, [r7, #10]
 8006416:	460b      	mov	r3, r1
 8006418:	813b      	strh	r3, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800642c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	2200      	movs	r2, #0
 8006436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f960 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006454:	d103      	bne.n	800645e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800645c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e05f      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006462:	897b      	ldrh	r3, [r7, #10]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	6a3a      	ldr	r2, [r7, #32]
 8006476:	492d      	ldr	r1, [pc, #180]	; (800652c <I2C_RequestMemoryWrite+0x128>)
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 f998 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e04c      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fa02 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d107      	bne.n	80064c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e02b      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d105      	bne.n	80064dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064d0:	893b      	ldrh	r3, [r7, #8]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	611a      	str	r2, [r3, #16]
 80064da:	e021      	b.n	8006520 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064dc:	893b      	ldrh	r3, [r7, #8]
 80064de:	0a1b      	lsrs	r3, r3, #8
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	6a39      	ldr	r1, [r7, #32]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f9dc 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d107      	bne.n	8006512 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e005      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006516:	893b      	ldrh	r3, [r7, #8]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	00010002 	.word	0x00010002

08006530 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	4608      	mov	r0, r1
 800653a:	4611      	mov	r1, r2
 800653c:	461a      	mov	r2, r3
 800653e:	4603      	mov	r3, r0
 8006540:	817b      	strh	r3, [r7, #10]
 8006542:	460b      	mov	r3, r1
 8006544:	813b      	strh	r3, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006558:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2200      	movs	r2, #0
 8006572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f8c2 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006590:	d103      	bne.n	800659a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e0aa      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800659e:	897b      	ldrh	r3, [r7, #10]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	4952      	ldr	r1, [pc, #328]	; (80066fc <I2C_RequestMemoryRead+0x1cc>)
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f8fa 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e097      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	6a39      	ldr	r1, [r7, #32]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f964 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d107      	bne.n	8006602 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006600:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e076      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d105      	bne.n	8006618 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800660c:	893b      	ldrh	r3, [r7, #8]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	611a      	str	r2, [r3, #16]
 8006616:	e021      	b.n	800665c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006618:	893b      	ldrh	r3, [r7, #8]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	b29b      	uxth	r3, r3
 800661e:	b2da      	uxtb	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006628:	6a39      	ldr	r1, [r7, #32]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f93e 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	2b04      	cmp	r3, #4
 800663c:	d107      	bne.n	800664e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800664c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e050      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006652:	893b      	ldrh	r3, [r7, #8]
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800665c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665e:	6a39      	ldr	r1, [r7, #32]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f923 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	2b04      	cmp	r3, #4
 8006672:	d107      	bne.n	8006684 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006682:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e035      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006696:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2200      	movs	r2, #0
 80066a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f82b 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066be:	d103      	bne.n	80066c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e013      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066cc:	897b      	ldrh	r3, [r7, #10]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	6a3a      	ldr	r2, [r7, #32]
 80066e0:	4906      	ldr	r1, [pc, #24]	; (80066fc <I2C_RequestMemoryRead+0x1cc>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f863 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	00010002 	.word	0x00010002

08006700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006710:	e025      	b.n	800675e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006718:	d021      	beq.n	800675e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671a:	f7fe f83f 	bl	800479c <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d116      	bne.n	800675e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e023      	b.n	80067a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10d      	bne.n	8006784 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	43da      	mvns	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4013      	ands	r3, r2
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	bf0c      	ite	eq
 800677a:	2301      	moveq	r3, #1
 800677c:	2300      	movne	r3, #0
 800677e:	b2db      	uxtb	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	e00c      	b.n	800679e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	43da      	mvns	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4013      	ands	r3, r2
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d0b6      	beq.n	8006712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067bc:	e051      	b.n	8006862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067cc:	d123      	bne.n	8006816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	f043 0204 	orr.w	r2, r3, #4
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e046      	b.n	80068a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d021      	beq.n	8006862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fd ffbd 	bl	800479c <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d116      	bne.n	8006862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e020      	b.n	80068a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d10c      	bne.n	8006886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	43da      	mvns	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4013      	ands	r3, r2
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	e00b      	b.n	800689e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	43da      	mvns	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf14      	ite	ne
 8006898:	2301      	movne	r3, #1
 800689a:	2300      	moveq	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d18d      	bne.n	80067be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068b8:	e02d      	b.n	8006916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f8ce 	bl	8006a5c <I2C_IsAcknowledgeFailed>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e02d      	b.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d021      	beq.n	8006916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d2:	f7fd ff63 	bl	800479c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d116      	bne.n	8006916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e007      	b.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d1ca      	bne.n	80068ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800693a:	e02d      	b.n	8006998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f88d 	bl	8006a5c <I2C_IsAcknowledgeFailed>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e02d      	b.n	80069a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d021      	beq.n	8006998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006954:	f7fd ff22 	bl	800479c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d116      	bne.n	8006998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e007      	b.n	80069a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d1ca      	bne.n	800693c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069bc:	e042      	b.n	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d119      	bne.n	8006a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0210 	mvn.w	r2, #16
 80069d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e029      	b.n	8006a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a00:	f7fd fecc 	bl	800479c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e007      	b.n	8006a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d1b5      	bne.n	80069be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d11b      	bne.n	8006aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f043 0204 	orr.w	r2, r3, #4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e26c      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 8087 	beq.w	8006be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ad8:	4b92      	ldr	r3, [pc, #584]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 030c 	and.w	r3, r3, #12
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d00c      	beq.n	8006afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ae4:	4b8f      	ldr	r3, [pc, #572]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 030c 	and.w	r3, r3, #12
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d112      	bne.n	8006b16 <HAL_RCC_OscConfig+0x5e>
 8006af0:	4b8c      	ldr	r3, [pc, #560]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afc:	d10b      	bne.n	8006b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006afe:	4b89      	ldr	r3, [pc, #548]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d06c      	beq.n	8006be4 <HAL_RCC_OscConfig+0x12c>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d168      	bne.n	8006be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e246      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCC_OscConfig+0x76>
 8006b20:	4b80      	ldr	r3, [pc, #512]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a7f      	ldr	r2, [pc, #508]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	e02e      	b.n	8006b8c <HAL_RCC_OscConfig+0xd4>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10c      	bne.n	8006b50 <HAL_RCC_OscConfig+0x98>
 8006b36:	4b7b      	ldr	r3, [pc, #492]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a7a      	ldr	r2, [pc, #488]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	4b78      	ldr	r3, [pc, #480]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a77      	ldr	r2, [pc, #476]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e01d      	b.n	8006b8c <HAL_RCC_OscConfig+0xd4>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCC_OscConfig+0xbc>
 8006b5a:	4b72      	ldr	r3, [pc, #456]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a71      	ldr	r2, [pc, #452]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	4b6f      	ldr	r3, [pc, #444]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6e      	ldr	r2, [pc, #440]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e00b      	b.n	8006b8c <HAL_RCC_OscConfig+0xd4>
 8006b74:	4b6b      	ldr	r3, [pc, #428]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6a      	ldr	r2, [pc, #424]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4b68      	ldr	r3, [pc, #416]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a67      	ldr	r2, [pc, #412]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d013      	beq.n	8006bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b94:	f7fd fe02 	bl	800479c <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b9c:	f7fd fdfe 	bl	800479c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b64      	cmp	r3, #100	; 0x64
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e1fa      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	4b5d      	ldr	r3, [pc, #372]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0f0      	beq.n	8006b9c <HAL_RCC_OscConfig+0xe4>
 8006bba:	e014      	b.n	8006be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbc:	f7fd fdee 	bl	800479c <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bc4:	f7fd fdea 	bl	800479c <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b64      	cmp	r3, #100	; 0x64
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e1e6      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd6:	4b53      	ldr	r3, [pc, #332]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x10c>
 8006be2:	e000      	b.n	8006be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d063      	beq.n	8006cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bf2:	4b4c      	ldr	r3, [pc, #304]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006bfe:	4b49      	ldr	r3, [pc, #292]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f003 030c 	and.w	r3, r3, #12
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d11c      	bne.n	8006c44 <HAL_RCC_OscConfig+0x18c>
 8006c0a:	4b46      	ldr	r3, [pc, #280]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d116      	bne.n	8006c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c16:	4b43      	ldr	r3, [pc, #268]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_RCC_OscConfig+0x176>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d001      	beq.n	8006c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e1ba      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2e:	4b3d      	ldr	r3, [pc, #244]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	4939      	ldr	r1, [pc, #228]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c42:	e03a      	b.n	8006cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d020      	beq.n	8006c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c4c:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <HAL_RCC_OscConfig+0x270>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c52:	f7fd fda3 	bl	800479c <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c5a:	f7fd fd9f 	bl	800479c <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e19b      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6c:	4b2d      	ldr	r3, [pc, #180]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c78:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4927      	ldr	r1, [pc, #156]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]
 8006c8c:	e015      	b.n	8006cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c8e:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <HAL_RCC_OscConfig+0x270>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c94:	f7fd fd82 	bl	800479c <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9c:	f7fd fd7e 	bl	800479c <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e17a      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d03a      	beq.n	8006d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d019      	beq.n	8006d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cce:	4b17      	ldr	r3, [pc, #92]	; (8006d2c <HAL_RCC_OscConfig+0x274>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cd4:	f7fd fd62 	bl	800479c <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cdc:	f7fd fd5e 	bl	800479c <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e15a      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cee:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	f000 fad8 	bl	80072b0 <RCC_Delay>
 8006d00:	e01c      	b.n	8006d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d02:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <HAL_RCC_OscConfig+0x274>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d08:	f7fd fd48 	bl	800479c <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d0e:	e00f      	b.n	8006d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d10:	f7fd fd44 	bl	800479c <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d908      	bls.n	8006d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e140      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
 8006d22:	bf00      	nop
 8006d24:	40021000 	.word	0x40021000
 8006d28:	42420000 	.word	0x42420000
 8006d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d30:	4b9e      	ldr	r3, [pc, #632]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e9      	bne.n	8006d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 80a6 	beq.w	8006e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d4e:	4b97      	ldr	r3, [pc, #604]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10d      	bne.n	8006d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d5a:	4b94      	ldr	r3, [pc, #592]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	4a93      	ldr	r2, [pc, #588]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d64:	61d3      	str	r3, [r2, #28]
 8006d66:	4b91      	ldr	r3, [pc, #580]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d76:	4b8e      	ldr	r3, [pc, #568]	; (8006fb0 <HAL_RCC_OscConfig+0x4f8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d118      	bne.n	8006db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d82:	4b8b      	ldr	r3, [pc, #556]	; (8006fb0 <HAL_RCC_OscConfig+0x4f8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a8a      	ldr	r2, [pc, #552]	; (8006fb0 <HAL_RCC_OscConfig+0x4f8>)
 8006d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d8e:	f7fd fd05 	bl	800479c <HAL_GetTick>
 8006d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d94:	e008      	b.n	8006da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d96:	f7fd fd01 	bl	800479c <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b64      	cmp	r3, #100	; 0x64
 8006da2:	d901      	bls.n	8006da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e0fd      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da8:	4b81      	ldr	r3, [pc, #516]	; (8006fb0 <HAL_RCC_OscConfig+0x4f8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0f0      	beq.n	8006d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d106      	bne.n	8006dca <HAL_RCC_OscConfig+0x312>
 8006dbc:	4b7b      	ldr	r3, [pc, #492]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	4a7a      	ldr	r2, [pc, #488]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6213      	str	r3, [r2, #32]
 8006dc8:	e02d      	b.n	8006e26 <HAL_RCC_OscConfig+0x36e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10c      	bne.n	8006dec <HAL_RCC_OscConfig+0x334>
 8006dd2:	4b76      	ldr	r3, [pc, #472]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	4a75      	ldr	r2, [pc, #468]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	6213      	str	r3, [r2, #32]
 8006dde:	4b73      	ldr	r3, [pc, #460]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	4a72      	ldr	r2, [pc, #456]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006de4:	f023 0304 	bic.w	r3, r3, #4
 8006de8:	6213      	str	r3, [r2, #32]
 8006dea:	e01c      	b.n	8006e26 <HAL_RCC_OscConfig+0x36e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d10c      	bne.n	8006e0e <HAL_RCC_OscConfig+0x356>
 8006df4:	4b6d      	ldr	r3, [pc, #436]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	4a6c      	ldr	r2, [pc, #432]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006dfa:	f043 0304 	orr.w	r3, r3, #4
 8006dfe:	6213      	str	r3, [r2, #32]
 8006e00:	4b6a      	ldr	r3, [pc, #424]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	4a69      	ldr	r2, [pc, #420]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	6213      	str	r3, [r2, #32]
 8006e0c:	e00b      	b.n	8006e26 <HAL_RCC_OscConfig+0x36e>
 8006e0e:	4b67      	ldr	r3, [pc, #412]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	4a66      	ldr	r2, [pc, #408]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	6213      	str	r3, [r2, #32]
 8006e1a:	4b64      	ldr	r3, [pc, #400]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	4a63      	ldr	r2, [pc, #396]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e20:	f023 0304 	bic.w	r3, r3, #4
 8006e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d015      	beq.n	8006e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e2e:	f7fd fcb5 	bl	800479c <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e34:	e00a      	b.n	8006e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e36:	f7fd fcb1 	bl	800479c <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e0ab      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4c:	4b57      	ldr	r3, [pc, #348]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ee      	beq.n	8006e36 <HAL_RCC_OscConfig+0x37e>
 8006e58:	e014      	b.n	8006e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5a:	f7fd fc9f 	bl	800479c <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e60:	e00a      	b.n	8006e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e62:	f7fd fc9b 	bl	800479c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e095      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e78:	4b4c      	ldr	r3, [pc, #304]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ee      	bne.n	8006e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d105      	bne.n	8006e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e8a:	4b48      	ldr	r3, [pc, #288]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	4a47      	ldr	r2, [pc, #284]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8081 	beq.w	8006fa2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ea0:	4b42      	ldr	r3, [pc, #264]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f003 030c 	and.w	r3, r3, #12
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d061      	beq.n	8006f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d146      	bne.n	8006f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb4:	4b3f      	ldr	r3, [pc, #252]	; (8006fb4 <HAL_RCC_OscConfig+0x4fc>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eba:	f7fd fc6f 	bl	800479c <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec2:	f7fd fc6b 	bl	800479c <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e067      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ed4:	4b35      	ldr	r3, [pc, #212]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d108      	bne.n	8006efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006eea:	4b30      	ldr	r3, [pc, #192]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	492d      	ldr	r1, [pc, #180]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006efc:	4b2b      	ldr	r3, [pc, #172]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a19      	ldr	r1, [r3, #32]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	4927      	ldr	r1, [pc, #156]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f14:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <HAL_RCC_OscConfig+0x4fc>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1a:	f7fd fc3f 	bl	800479c <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f22:	f7fd fc3b 	bl	800479c <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e037      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f34:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0f0      	beq.n	8006f22 <HAL_RCC_OscConfig+0x46a>
 8006f40:	e02f      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f42:	4b1c      	ldr	r3, [pc, #112]	; (8006fb4 <HAL_RCC_OscConfig+0x4fc>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f48:	f7fd fc28 	bl	800479c <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f50:	f7fd fc24 	bl	800479c <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e020      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f62:	4b12      	ldr	r3, [pc, #72]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0x498>
 8006f6e:	e018      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e013      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <HAL_RCC_OscConfig+0x4f4>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d106      	bne.n	8006f9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d001      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	40007000 	.word	0x40007000
 8006fb4:	42420060 	.word	0x42420060

08006fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0d0      	b.n	800716e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fcc:	4b6a      	ldr	r3, [pc, #424]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d910      	bls.n	8006ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fda:	4b67      	ldr	r3, [pc, #412]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f023 0207 	bic.w	r2, r3, #7
 8006fe2:	4965      	ldr	r1, [pc, #404]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fea:	4b63      	ldr	r3, [pc, #396]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0b8      	b.n	800716e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d020      	beq.n	800704a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007014:	4b59      	ldr	r3, [pc, #356]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4a58      	ldr	r2, [pc, #352]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 800701a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800701e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800702c:	4b53      	ldr	r3, [pc, #332]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4a52      	ldr	r2, [pc, #328]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007032:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007038:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	494d      	ldr	r1, [pc, #308]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007046:	4313      	orrs	r3, r2
 8007048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d040      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d107      	bne.n	800706e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d115      	bne.n	8007096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e07f      	b.n	800716e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d107      	bne.n	8007086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007076:	4b41      	ldr	r3, [pc, #260]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e073      	b.n	800716e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007086:	4b3d      	ldr	r3, [pc, #244]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e06b      	b.n	800716e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007096:	4b39      	ldr	r3, [pc, #228]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f023 0203 	bic.w	r2, r3, #3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	4936      	ldr	r1, [pc, #216]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070a8:	f7fd fb78 	bl	800479c <HAL_GetTick>
 80070ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ae:	e00a      	b.n	80070c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b0:	f7fd fb74 	bl	800479c <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80070be:	4293      	cmp	r3, r2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e053      	b.n	800716e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c6:	4b2d      	ldr	r3, [pc, #180]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f003 020c 	and.w	r2, r3, #12
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d1eb      	bne.n	80070b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070d8:	4b27      	ldr	r3, [pc, #156]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d210      	bcs.n	8007108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e6:	4b24      	ldr	r3, [pc, #144]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f023 0207 	bic.w	r2, r3, #7
 80070ee:	4922      	ldr	r1, [pc, #136]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f6:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d001      	beq.n	8007108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e032      	b.n	800716e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007114:	4b19      	ldr	r3, [pc, #100]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4916      	ldr	r1, [pc, #88]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007122:	4313      	orrs	r3, r2
 8007124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	490e      	ldr	r1, [pc, #56]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007146:	f000 f821 	bl	800718c <HAL_RCC_GetSysClockFreq>
 800714a:	4602      	mov	r2, r0
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	091b      	lsrs	r3, r3, #4
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	490a      	ldr	r1, [pc, #40]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007158:	5ccb      	ldrb	r3, [r1, r3]
 800715a:	fa22 f303 	lsr.w	r3, r2, r3
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <HAL_RCC_ClockConfig+0x1cc>)
 8007160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <HAL_RCC_ClockConfig+0x1d0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fad6 	bl	8004718 <HAL_InitTick>

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40022000 	.word	0x40022000
 800717c:	40021000 	.word	0x40021000
 8007180:	0800ed98 	.word	0x0800ed98
 8007184:	20000004 	.word	0x20000004
 8007188:	20000008 	.word	0x20000008

0800718c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800718c:	b490      	push	{r4, r7}
 800718e:	b08a      	sub	sp, #40	; 0x28
 8007190:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007192:	4b2a      	ldr	r3, [pc, #168]	; (800723c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007194:	1d3c      	adds	r4, r7, #4
 8007196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800719c:	f240 2301 	movw	r3, #513	; 0x201
 80071a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	2300      	movs	r3, #0
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	2300      	movs	r3, #0
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071b6:	4b22      	ldr	r3, [pc, #136]	; (8007240 <HAL_RCC_GetSysClockFreq+0xb4>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d002      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x40>
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d003      	beq.n	80071d2 <HAL_RCC_GetSysClockFreq+0x46>
 80071ca:	e02d      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071cc:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ce:	623b      	str	r3, [r7, #32]
      break;
 80071d0:	e02d      	b.n	800722e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	0c9b      	lsrs	r3, r3, #18
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80071de:	4413      	add	r3, r2
 80071e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80071e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d013      	beq.n	8007218 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071f0:	4b13      	ldr	r3, [pc, #76]	; (8007240 <HAL_RCC_GetSysClockFreq+0xb4>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	0c5b      	lsrs	r3, r3, #17
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80071fe:	4413      	add	r3, r2
 8007200:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007204:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4a0e      	ldr	r2, [pc, #56]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800720a:	fb02 f203 	mul.w	r2, r2, r3
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
 8007216:	e004      	b.n	8007222 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4a0b      	ldr	r2, [pc, #44]	; (8007248 <HAL_RCC_GetSysClockFreq+0xbc>)
 800721c:	fb02 f303 	mul.w	r3, r2, r3
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	623b      	str	r3, [r7, #32]
      break;
 8007226:	e002      	b.n	800722e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800722a:	623b      	str	r3, [r7, #32]
      break;
 800722c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800722e:	6a3b      	ldr	r3, [r7, #32]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3728      	adds	r7, #40	; 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bc90      	pop	{r4, r7}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	0800ed54 	.word	0x0800ed54
 8007240:	40021000 	.word	0x40021000
 8007244:	007a1200 	.word	0x007a1200
 8007248:	003d0900 	.word	0x003d0900

0800724c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <HAL_RCC_GetHCLKFreq+0x10>)
 8007252:	681b      	ldr	r3, [r3, #0]
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr
 800725c:	20000004 	.word	0x20000004

08007260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007264:	f7ff fff2 	bl	800724c <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4903      	ldr	r1, [pc, #12]	; (8007284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40021000 	.word	0x40021000
 8007284:	0800eda8 	.word	0x0800eda8

08007288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800728c:	f7ff ffde 	bl	800724c <HAL_RCC_GetHCLKFreq>
 8007290:	4602      	mov	r2, r0
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	0adb      	lsrs	r3, r3, #11
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	4903      	ldr	r1, [pc, #12]	; (80072ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800729e:	5ccb      	ldrb	r3, [r1, r3]
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40021000 	.word	0x40021000
 80072ac:	0800eda8 	.word	0x0800eda8

080072b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <RCC_Delay+0x34>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a0a      	ldr	r2, [pc, #40]	; (80072e8 <RCC_Delay+0x38>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	0a5b      	lsrs	r3, r3, #9
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072cc:	bf00      	nop
  }
  while (Delay --);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1e5a      	subs	r2, r3, #1
 80072d2:	60fa      	str	r2, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f9      	bne.n	80072cc <RCC_Delay+0x1c>
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr
 80072e4:	20000004 	.word	0x20000004
 80072e8:	10624dd3 	.word	0x10624dd3

080072ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e041      	b.n	8007382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fc ffae 	bl	8004274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3304      	adds	r3, #4
 8007328:	4619      	mov	r1, r3
 800732a:	4610      	mov	r0, r2
 800732c:	f000 fe98 	bl	8008060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d001      	beq.n	80073a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e032      	b.n	800740a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIM_Base_Start+0x88>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_TIM_Base_Start+0x48>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073be:	d009      	beq.n	80073d4 <HAL_TIM_Base_Start+0x48>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a14      	ldr	r2, [pc, #80]	; (8007418 <HAL_TIM_Base_Start+0x8c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_TIM_Base_Start+0x48>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <HAL_TIM_Base_Start+0x90>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d111      	bne.n	80073f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b06      	cmp	r3, #6
 80073e4:	d010      	beq.n	8007408 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0201 	orr.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	e007      	b.n	8007408 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800

08007420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b01      	cmp	r3, #1
 8007432:	d001      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e03a      	b.n	80074ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a18      	ldr	r2, [pc, #96]	; (80074b8 <HAL_TIM_Base_Start_IT+0x98>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00e      	beq.n	8007478 <HAL_TIM_Base_Start_IT+0x58>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007462:	d009      	beq.n	8007478 <HAL_TIM_Base_Start_IT+0x58>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a14      	ldr	r2, [pc, #80]	; (80074bc <HAL_TIM_Base_Start_IT+0x9c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d004      	beq.n	8007478 <HAL_TIM_Base_Start_IT+0x58>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a13      	ldr	r2, [pc, #76]	; (80074c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d111      	bne.n	800749c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b06      	cmp	r3, #6
 8007488:	d010      	beq.n	80074ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0201 	orr.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749a:	e007      	b.n	80074ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr
 80074b8:	40012c00 	.word	0x40012c00
 80074bc:	40000400 	.word	0x40000400
 80074c0:	40000800 	.word	0x40000800

080074c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e041      	b.n	800755a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d106      	bne.n	80074f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7fc fea4 	bl	8004238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f000 fdac 	bl	8008060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d109      	bne.n	8007588 <HAL_TIM_PWM_Start+0x24>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b01      	cmp	r3, #1
 800757e:	bf14      	ite	ne
 8007580:	2301      	movne	r3, #1
 8007582:	2300      	moveq	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	e022      	b.n	80075ce <HAL_TIM_PWM_Start+0x6a>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d109      	bne.n	80075a2 <HAL_TIM_PWM_Start+0x3e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b01      	cmp	r3, #1
 8007598:	bf14      	ite	ne
 800759a:	2301      	movne	r3, #1
 800759c:	2300      	moveq	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	e015      	b.n	80075ce <HAL_TIM_PWM_Start+0x6a>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d109      	bne.n	80075bc <HAL_TIM_PWM_Start+0x58>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	e008      	b.n	80075ce <HAL_TIM_PWM_Start+0x6a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	bf14      	ite	ne
 80075c8:	2301      	movne	r3, #1
 80075ca:	2300      	moveq	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e05e      	b.n	8007694 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <HAL_TIM_PWM_Start+0x82>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075e4:	e013      	b.n	800760e <HAL_TIM_PWM_Start+0xaa>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d104      	bne.n	80075f6 <HAL_TIM_PWM_Start+0x92>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f4:	e00b      	b.n	800760e <HAL_TIM_PWM_Start+0xaa>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_PWM_Start+0xa2>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007604:	e003      	b.n	800760e <HAL_TIM_PWM_Start+0xaa>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f001 f8af 	bl	800877a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1e      	ldr	r2, [pc, #120]	; (800769c <HAL_TIM_PWM_Start+0x138>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d107      	bne.n	8007636 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a18      	ldr	r2, [pc, #96]	; (800769c <HAL_TIM_PWM_Start+0x138>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIM_PWM_Start+0xfa>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007648:	d009      	beq.n	800765e <HAL_TIM_PWM_Start+0xfa>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <HAL_TIM_PWM_Start+0x13c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIM_PWM_Start+0xfa>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a12      	ldr	r2, [pc, #72]	; (80076a4 <HAL_TIM_PWM_Start+0x140>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d111      	bne.n	8007682 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b06      	cmp	r3, #6
 800766e:	d010      	beq.n	8007692 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	e007      	b.n	8007692 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40012c00 	.word	0x40012c00
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800

080076a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e041      	b.n	800773e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f839 	bl	8007746 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	4610      	mov	r0, r2
 80076e8:	f000 fcba 	bl	8008060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_TIM_IC_Start_IT+0x1a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776e:	b2db      	uxtb	r3, r3
 8007770:	e013      	b.n	800779a <HAL_TIM_IC_Start_IT+0x42>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d104      	bne.n	8007782 <HAL_TIM_IC_Start_IT+0x2a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800777e:	b2db      	uxtb	r3, r3
 8007780:	e00b      	b.n	800779a <HAL_TIM_IC_Start_IT+0x42>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b08      	cmp	r3, #8
 8007786:	d104      	bne.n	8007792 <HAL_TIM_IC_Start_IT+0x3a>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e003      	b.n	800779a <HAL_TIM_IC_Start_IT+0x42>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007798:	b2db      	uxtb	r3, r3
 800779a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <HAL_TIM_IC_Start_IT+0x54>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e013      	b.n	80077d4 <HAL_TIM_IC_Start_IT+0x7c>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d104      	bne.n	80077bc <HAL_TIM_IC_Start_IT+0x64>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	e00b      	b.n	80077d4 <HAL_TIM_IC_Start_IT+0x7c>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d104      	bne.n	80077cc <HAL_TIM_IC_Start_IT+0x74>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	e003      	b.n	80077d4 <HAL_TIM_IC_Start_IT+0x7c>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d102      	bne.n	80077e2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0b3      	b.n	800794e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_IC_Start_IT+0x9e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f4:	e013      	b.n	800781e <HAL_TIM_IC_Start_IT+0xc6>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_IC_Start_IT+0xae>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007804:	e00b      	b.n	800781e <HAL_TIM_IC_Start_IT+0xc6>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d104      	bne.n	8007816 <HAL_TIM_IC_Start_IT+0xbe>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007814:	e003      	b.n	800781e <HAL_TIM_IC_Start_IT+0xc6>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <HAL_TIM_IC_Start_IT+0xd6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800782c:	e013      	b.n	8007856 <HAL_TIM_IC_Start_IT+0xfe>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d104      	bne.n	800783e <HAL_TIM_IC_Start_IT+0xe6>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800783c:	e00b      	b.n	8007856 <HAL_TIM_IC_Start_IT+0xfe>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d104      	bne.n	800784e <HAL_TIM_IC_Start_IT+0xf6>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800784c:	e003      	b.n	8007856 <HAL_TIM_IC_Start_IT+0xfe>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d841      	bhi.n	80078e0 <HAL_TIM_IC_Start_IT+0x188>
 800785c:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <HAL_TIM_IC_Start_IT+0x10c>)
 800785e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007862:	bf00      	nop
 8007864:	08007899 	.word	0x08007899
 8007868:	080078e1 	.word	0x080078e1
 800786c:	080078e1 	.word	0x080078e1
 8007870:	080078e1 	.word	0x080078e1
 8007874:	080078ab 	.word	0x080078ab
 8007878:	080078e1 	.word	0x080078e1
 800787c:	080078e1 	.word	0x080078e1
 8007880:	080078e1 	.word	0x080078e1
 8007884:	080078bd 	.word	0x080078bd
 8007888:	080078e1 	.word	0x080078e1
 800788c:	080078e1 	.word	0x080078e1
 8007890:	080078e1 	.word	0x080078e1
 8007894:	080078cf 	.word	0x080078cf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0202 	orr.w	r2, r2, #2
 80078a6:	60da      	str	r2, [r3, #12]
      break;
 80078a8:	e01b      	b.n	80078e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0204 	orr.w	r2, r2, #4
 80078b8:	60da      	str	r2, [r3, #12]
      break;
 80078ba:	e012      	b.n	80078e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0208 	orr.w	r2, r2, #8
 80078ca:	60da      	str	r2, [r3, #12]
      break;
 80078cc:	e009      	b.n	80078e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0210 	orr.w	r2, r2, #16
 80078dc:	60da      	str	r2, [r3, #12]
      break;
 80078de:	e000      	b.n	80078e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80078e0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2201      	movs	r2, #1
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 ff45 	bl	800877a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a18      	ldr	r2, [pc, #96]	; (8007958 <HAL_TIM_IC_Start_IT+0x200>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_TIM_IC_Start_IT+0x1c0>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007902:	d009      	beq.n	8007918 <HAL_TIM_IC_Start_IT+0x1c0>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a14      	ldr	r2, [pc, #80]	; (800795c <HAL_TIM_IC_Start_IT+0x204>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_TIM_IC_Start_IT+0x1c0>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a13      	ldr	r2, [pc, #76]	; (8007960 <HAL_TIM_IC_Start_IT+0x208>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d111      	bne.n	800793c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b06      	cmp	r3, #6
 8007928:	d010      	beq.n	800794c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	e007      	b.n	800794c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	40012c00 	.word	0x40012c00
 800795c:	40000400 	.word	0x40000400
 8007960:	40000800 	.word	0x40000800

08007964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b02      	cmp	r3, #2
 8007978:	d122      	bne.n	80079c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b02      	cmp	r3, #2
 8007986:	d11b      	bne.n	80079c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0202 	mvn.w	r2, #2
 8007990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fc f8d0 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 80079ac:	e005      	b.n	80079ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fb3a 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fb40 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d122      	bne.n	8007a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d11b      	bne.n	8007a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f06f 0204 	mvn.w	r2, #4
 80079e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fc f8a6 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 8007a00:	e005      	b.n	8007a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fb10 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fb16 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d122      	bne.n	8007a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d11b      	bne.n	8007a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0208 	mvn.w	r2, #8
 8007a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fc f87c 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 8007a54:	e005      	b.n	8007a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fae6 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 faec 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	2b10      	cmp	r3, #16
 8007a74:	d122      	bne.n	8007abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	d11b      	bne.n	8007abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f06f 0210 	mvn.w	r2, #16
 8007a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2208      	movs	r2, #8
 8007a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fc f852 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 8007aa8:	e005      	b.n	8007ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fabc 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fac2 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d10e      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d107      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0201 	mvn.w	r2, #1
 8007ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fb fc08 	bl	80032f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b80      	cmp	r3, #128	; 0x80
 8007af4:	d10e      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	d107      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 ffae 	bl	8008a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b40      	cmp	r3, #64	; 0x40
 8007b20:	d10e      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d107      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa86 	bl	800804c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	d10e      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d107      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0220 	mvn.w	r2, #32
 8007b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 ff79 	bl	8008a5e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_TIM_IC_ConfigChannel+0x1a>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e082      	b.n	8007c94 <HAL_TIM_IC_ConfigChannel+0x120>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11b      	bne.n	8007bd4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f000 fc42 	bl	8008434 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 020c 	bic.w	r2, r2, #12
 8007bbe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6999      	ldr	r1, [r3, #24]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	619a      	str	r2, [r3, #24]
 8007bd2:	e05a      	b.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d11c      	bne.n	8007c14 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f000 fcab 	bl	8008544 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007bfc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6999      	ldr	r1, [r3, #24]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	021a      	lsls	r2, r3, #8
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	619a      	str	r2, [r3, #24]
 8007c12:	e03a      	b.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d11b      	bne.n	8007c52 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6819      	ldr	r1, [r3, #0]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f000 fcf6 	bl	800861a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 020c 	bic.w	r2, r2, #12
 8007c3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69d9      	ldr	r1, [r3, #28]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	61da      	str	r2, [r3, #28]
 8007c50:	e01b      	b.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f000 fd15 	bl	8008690 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69d9      	ldr	r1, [r3, #28]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	021a      	lsls	r2, r3, #8
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e0ac      	b.n	8007e10 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b0c      	cmp	r3, #12
 8007cc2:	f200 809f 	bhi.w	8007e04 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007e05 	.word	0x08007e05
 8007cd4:	08007e05 	.word	0x08007e05
 8007cd8:	08007e05 	.word	0x08007e05
 8007cdc:	08007d41 	.word	0x08007d41
 8007ce0:	08007e05 	.word	0x08007e05
 8007ce4:	08007e05 	.word	0x08007e05
 8007ce8:	08007e05 	.word	0x08007e05
 8007cec:	08007d83 	.word	0x08007d83
 8007cf0:	08007e05 	.word	0x08007e05
 8007cf4:	08007e05 	.word	0x08007e05
 8007cf8:	08007e05 	.word	0x08007e05
 8007cfc:	08007dc3 	.word	0x08007dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68b9      	ldr	r1, [r7, #8]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fa0c 	bl	8008124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0208 	orr.w	r2, r2, #8
 8007d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699a      	ldr	r2, [r3, #24]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0204 	bic.w	r2, r2, #4
 8007d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6999      	ldr	r1, [r3, #24]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	619a      	str	r2, [r3, #24]
      break;
 8007d3e:	e062      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fa52 	bl	80081f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6999      	ldr	r1, [r3, #24]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	021a      	lsls	r2, r3, #8
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	619a      	str	r2, [r3, #24]
      break;
 8007d80:	e041      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68b9      	ldr	r1, [r7, #8]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fa9b 	bl	80082c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0208 	orr.w	r2, r2, #8
 8007d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69da      	ldr	r2, [r3, #28]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0204 	bic.w	r2, r2, #4
 8007dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69d9      	ldr	r1, [r3, #28]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	61da      	str	r2, [r3, #28]
      break;
 8007dc0:	e021      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fae5 	bl	8008398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69da      	ldr	r2, [r3, #28]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69da      	ldr	r2, [r3, #28]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69d9      	ldr	r1, [r3, #28]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	021a      	lsls	r2, r3, #8
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	61da      	str	r2, [r3, #28]
      break;
 8007e02:	e000      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_TIM_ConfigClockSource+0x18>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e0b3      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x180>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e68:	d03e      	beq.n	8007ee8 <HAL_TIM_ConfigClockSource+0xd0>
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6e:	f200 8087 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e76:	f000 8085 	beq.w	8007f84 <HAL_TIM_ConfigClockSource+0x16c>
 8007e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7e:	d87f      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007e80:	2b70      	cmp	r3, #112	; 0x70
 8007e82:	d01a      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0xa2>
 8007e84:	2b70      	cmp	r3, #112	; 0x70
 8007e86:	d87b      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007e88:	2b60      	cmp	r3, #96	; 0x60
 8007e8a:	d050      	beq.n	8007f2e <HAL_TIM_ConfigClockSource+0x116>
 8007e8c:	2b60      	cmp	r3, #96	; 0x60
 8007e8e:	d877      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007e90:	2b50      	cmp	r3, #80	; 0x50
 8007e92:	d03c      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0xf6>
 8007e94:	2b50      	cmp	r3, #80	; 0x50
 8007e96:	d873      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007e98:	2b40      	cmp	r3, #64	; 0x40
 8007e9a:	d058      	beq.n	8007f4e <HAL_TIM_ConfigClockSource+0x136>
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	d86f      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007ea0:	2b30      	cmp	r3, #48	; 0x30
 8007ea2:	d064      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x156>
 8007ea4:	2b30      	cmp	r3, #48	; 0x30
 8007ea6:	d86b      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007ea8:	2b20      	cmp	r3, #32
 8007eaa:	d060      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x156>
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d867      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d05c      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x156>
 8007eb4:	2b10      	cmp	r3, #16
 8007eb6:	d05a      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007eb8:	e062      	b.n	8007f80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6899      	ldr	r1, [r3, #8]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f000 fc37 	bl	800873c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007edc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	609a      	str	r2, [r3, #8]
      break;
 8007ee6:	e04e      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	6899      	ldr	r1, [r3, #8]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f000 fc20 	bl	800873c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f0a:	609a      	str	r2, [r3, #8]
      break;
 8007f0c:	e03b      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	6859      	ldr	r1, [r3, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f000 fae4 	bl	80084e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2150      	movs	r1, #80	; 0x50
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fbee 	bl	8008708 <TIM_ITRx_SetConfig>
      break;
 8007f2c:	e02b      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	6859      	ldr	r1, [r3, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f000 fb3e 	bl	80085bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2160      	movs	r1, #96	; 0x60
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fbde 	bl	8008708 <TIM_ITRx_SetConfig>
      break;
 8007f4c:	e01b      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	6859      	ldr	r1, [r3, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f000 fac4 	bl	80084e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2140      	movs	r1, #64	; 0x40
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fbce 	bl	8008708 <TIM_ITRx_SetConfig>
      break;
 8007f6c:	e00b      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f000 fbc5 	bl	8008708 <TIM_ITRx_SetConfig>
        break;
 8007f7e:	e002      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f80:	bf00      	nop
 8007f82:	e000      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b0c      	cmp	r3, #12
 8007fb2:	d831      	bhi.n	8008018 <HAL_TIM_ReadCapturedValue+0x78>
 8007fb4:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	08008019 	.word	0x08008019
 8007fc4:	08008019 	.word	0x08008019
 8007fc8:	08008019 	.word	0x08008019
 8007fcc:	08007ffb 	.word	0x08007ffb
 8007fd0:	08008019 	.word	0x08008019
 8007fd4:	08008019 	.word	0x08008019
 8007fd8:	08008019 	.word	0x08008019
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	08008019 	.word	0x08008019
 8007fe4:	08008019 	.word	0x08008019
 8007fe8:	08008019 	.word	0x08008019
 8007fec:	0800800f 	.word	0x0800800f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff6:	60fb      	str	r3, [r7, #12]

      break;
 8007ff8:	e00f      	b.n	800801a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	60fb      	str	r3, [r7, #12]

      break;
 8008002:	e00a      	b.n	800801a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800a:	60fb      	str	r3, [r7, #12]

      break;
 800800c:	e005      	b.n	800801a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	60fb      	str	r3, [r7, #12]

      break;
 8008016:	e000      	b.n	800801a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008018:	bf00      	nop
  }

  return tmpreg;
 800801a:	68fb      	ldr	r3, [r7, #12]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop

08008028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr
	...

08008060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a29      	ldr	r2, [pc, #164]	; (8008118 <TIM_Base_SetConfig+0xb8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00b      	beq.n	8008090 <TIM_Base_SetConfig+0x30>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800807e:	d007      	beq.n	8008090 <TIM_Base_SetConfig+0x30>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a26      	ldr	r2, [pc, #152]	; (800811c <TIM_Base_SetConfig+0xbc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d003      	beq.n	8008090 <TIM_Base_SetConfig+0x30>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a25      	ldr	r2, [pc, #148]	; (8008120 <TIM_Base_SetConfig+0xc0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d108      	bne.n	80080a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a1c      	ldr	r2, [pc, #112]	; (8008118 <TIM_Base_SetConfig+0xb8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00b      	beq.n	80080c2 <TIM_Base_SetConfig+0x62>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b0:	d007      	beq.n	80080c2 <TIM_Base_SetConfig+0x62>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a19      	ldr	r2, [pc, #100]	; (800811c <TIM_Base_SetConfig+0xbc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_Base_SetConfig+0x62>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a18      	ldr	r2, [pc, #96]	; (8008120 <TIM_Base_SetConfig+0xc0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d108      	bne.n	80080d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a07      	ldr	r2, [pc, #28]	; (8008118 <TIM_Base_SetConfig+0xb8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d103      	bne.n	8008108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	615a      	str	r2, [r3, #20]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr
 8008118:	40012c00 	.word	0x40012c00
 800811c:	40000400 	.word	0x40000400
 8008120:	40000800 	.word	0x40000800

08008124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	f023 0201 	bic.w	r2, r3, #1
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f023 0302 	bic.w	r3, r3, #2
 800816c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <TIM_OC1_SetConfig+0xc8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10c      	bne.n	800819a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f023 0308 	bic.w	r3, r3, #8
 8008186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f023 0304 	bic.w	r3, r3, #4
 8008198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a13      	ldr	r2, [pc, #76]	; (80081ec <TIM_OC1_SetConfig+0xc8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d111      	bne.n	80081c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	621a      	str	r2, [r3, #32]
}
 80081e0:	bf00      	nop
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	40012c00 	.word	0x40012c00

080081f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	f023 0210 	bic.w	r2, r3, #16
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800821e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f023 0320 	bic.w	r3, r3, #32
 800823a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <TIM_OC2_SetConfig+0xd0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d10d      	bne.n	800826c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800826a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a14      	ldr	r2, [pc, #80]	; (80082c0 <TIM_OC2_SetConfig+0xd0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d113      	bne.n	800829c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800827a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr
 80082c0:	40012c00 	.word	0x40012c00

080082c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0303 	bic.w	r3, r3, #3
 80082fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800830c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <TIM_OC3_SetConfig+0xd0>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d10d      	bne.n	800833e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800833c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a14      	ldr	r2, [pc, #80]	; (8008394 <TIM_OC3_SetConfig+0xd0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d113      	bne.n	800836e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800834c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	011b      	lsls	r3, r3, #4
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4313      	orrs	r3, r2
 8008360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4313      	orrs	r3, r2
 800836c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	621a      	str	r2, [r3, #32]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	40012c00 	.word	0x40012c00

08008398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	031b      	lsls	r3, r3, #12
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a0f      	ldr	r2, [pc, #60]	; (8008430 <TIM_OC4_SetConfig+0x98>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d109      	bne.n	800840c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	019b      	lsls	r3, r3, #6
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	621a      	str	r2, [r3, #32]
}
 8008426:	bf00      	nop
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	bc80      	pop	{r7}
 800842e:	4770      	bx	lr
 8008430:	40012c00 	.word	0x40012c00

08008434 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	f023 0201 	bic.w	r2, r3, #1
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4a1f      	ldr	r2, [pc, #124]	; (80084dc <TIM_TI1_SetConfig+0xa8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00b      	beq.n	800847a <TIM_TI1_SetConfig+0x46>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008468:	d007      	beq.n	800847a <TIM_TI1_SetConfig+0x46>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4a1c      	ldr	r2, [pc, #112]	; (80084e0 <TIM_TI1_SetConfig+0xac>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d003      	beq.n	800847a <TIM_TI1_SetConfig+0x46>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <TIM_TI1_SetConfig+0xb0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d101      	bne.n	800847e <TIM_TI1_SetConfig+0x4a>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <TIM_TI1_SetConfig+0x4c>
 800847e:	2300      	movs	r3, #0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d008      	beq.n	8008496 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0303 	bic.w	r3, r3, #3
 800848a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4313      	orrs	r3, r2
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	e003      	b.n	800849e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f023 030a 	bic.w	r3, r3, #10
 80084b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f003 030a 	and.w	r3, r3, #10
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	621a      	str	r2, [r3, #32]
}
 80084d2:	bf00      	nop
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40000400 	.word	0x40000400
 80084e4:	40000800 	.word	0x40000800

080084e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	f023 0201 	bic.w	r2, r3, #1
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f023 030a 	bic.w	r3, r3, #10
 8008524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	bc80      	pop	{r7}
 8008542:	4770      	bx	lr

08008544 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f023 0210 	bic.w	r2, r3, #16
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008582:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	031b      	lsls	r3, r3, #12
 8008588:	b29b      	uxth	r3, r3
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008596:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	621a      	str	r2, [r3, #32]
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	f023 0210 	bic.w	r2, r3, #16
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	031b      	lsls	r3, r3, #12
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	621a      	str	r2, [r3, #32]
}
 8008610:	bf00      	nop
 8008612:	371c      	adds	r7, #28
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800861a:	b480      	push	{r7}
 800861c:	b087      	sub	sp, #28
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008656:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	b2db      	uxtb	r3, r3
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800866a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	021b      	lsls	r3, r3, #8
 8008670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr

08008690 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	031b      	lsls	r3, r3, #12
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	031b      	lsls	r3, r3, #12
 80086e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4313      	orrs	r3, r2
 8008726:	f043 0307 	orr.w	r3, r3, #7
 800872a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	609a      	str	r2, [r3, #8]
}
 8008732:	bf00      	nop
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr

0800873c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	021a      	lsls	r2, r3, #8
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	431a      	orrs	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4313      	orrs	r3, r2
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	609a      	str	r2, [r3, #8]
}
 8008770:	bf00      	nop
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800877a:	b480      	push	{r7}
 800877c:	b087      	sub	sp, #28
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	2201      	movs	r2, #1
 800878e:	fa02 f303 	lsl.w	r3, r2, r3
 8008792:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6a1a      	ldr	r2, [r3, #32]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	43db      	mvns	r3, r3
 800879c:	401a      	ands	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a1a      	ldr	r2, [r3, #32]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	fa01 f303 	lsl.w	r3, r1, r3
 80087b2:	431a      	orrs	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	621a      	str	r2, [r3, #32]
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
	...

080087c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d109      	bne.n	80087e8 <HAL_TIMEx_PWMN_Start+0x24>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b01      	cmp	r3, #1
 80087de:	bf14      	ite	ne
 80087e0:	2301      	movne	r3, #1
 80087e2:	2300      	moveq	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	e022      	b.n	800882e <HAL_TIMEx_PWMN_Start+0x6a>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d109      	bne.n	8008802 <HAL_TIMEx_PWMN_Start+0x3e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	bf14      	ite	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	2300      	moveq	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	e015      	b.n	800882e <HAL_TIMEx_PWMN_Start+0x6a>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b08      	cmp	r3, #8
 8008806:	d109      	bne.n	800881c <HAL_TIMEx_PWMN_Start+0x58>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b01      	cmp	r3, #1
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	e008      	b.n	800882e <HAL_TIMEx_PWMN_Start+0x6a>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	bf14      	ite	ne
 8008828:	2301      	movne	r3, #1
 800882a:	2300      	moveq	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e059      	b.n	80088ea <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <HAL_TIMEx_PWMN_Start+0x82>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008844:	e013      	b.n	800886e <HAL_TIMEx_PWMN_Start+0xaa>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b04      	cmp	r3, #4
 800884a:	d104      	bne.n	8008856 <HAL_TIMEx_PWMN_Start+0x92>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008854:	e00b      	b.n	800886e <HAL_TIMEx_PWMN_Start+0xaa>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b08      	cmp	r3, #8
 800885a:	d104      	bne.n	8008866 <HAL_TIMEx_PWMN_Start+0xa2>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008864:	e003      	b.n	800886e <HAL_TIMEx_PWMN_Start+0xaa>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2204      	movs	r2, #4
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f903 	bl	8008a82 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800888a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a18      	ldr	r2, [pc, #96]	; (80088f4 <HAL_TIMEx_PWMN_Start+0x130>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00e      	beq.n	80088b4 <HAL_TIMEx_PWMN_Start+0xf0>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d009      	beq.n	80088b4 <HAL_TIMEx_PWMN_Start+0xf0>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a14      	ldr	r2, [pc, #80]	; (80088f8 <HAL_TIMEx_PWMN_Start+0x134>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d004      	beq.n	80088b4 <HAL_TIMEx_PWMN_Start+0xf0>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a13      	ldr	r2, [pc, #76]	; (80088fc <HAL_TIMEx_PWMN_Start+0x138>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d111      	bne.n	80088d8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b06      	cmp	r3, #6
 80088c4:	d010      	beq.n	80088e8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0201 	orr.w	r2, r2, #1
 80088d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	e007      	b.n	80088e8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	40012c00 	.word	0x40012c00
 80088f8:	40000400 	.word	0x40000400
 80088fc:	40000800 	.word	0x40000800

08008900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008914:	2302      	movs	r3, #2
 8008916:	e046      	b.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a16      	ldr	r2, [pc, #88]	; (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00e      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d009      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a12      	ldr	r2, [pc, #72]	; (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d004      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a10      	ldr	r2, [pc, #64]	; (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d10c      	bne.n	8008994 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	4313      	orrs	r3, r2
 800898a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr
 80089b0:	40012c00 	.word	0x40012c00
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800

080089bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d101      	bne.n	80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089d4:	2302      	movs	r3, #2
 80089d6:	e03d      	b.n	8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr

08008a5e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr

08008a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr

08008a82 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b087      	sub	sp, #28
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	2204      	movs	r2, #4
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1a      	ldr	r2, [r3, #32]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	43db      	mvns	r3, r3
 8008aa4:	401a      	ands	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1a      	ldr	r2, [r3, #32]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	f003 031f 	and.w	r3, r3, #31
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aba:	431a      	orrs	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	621a      	str	r2, [r3, #32]
}
 8008ac0:	bf00      	nop
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr

08008aca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e03f      	b.n	8008b5c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d106      	bne.n	8008af6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7fb fc81 	bl	80043f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2224      	movs	r2, #36	; 0x24
 8008afa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa5e 	bl	8008fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	695a      	ldr	r2, [r3, #20]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08a      	sub	sp, #40	; 0x28
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d17c      	bne.n	8008c7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_UART_Transmit+0x2c>
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e075      	b.n	8008c80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_UART_Transmit+0x3e>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e06e      	b.n	8008c80 <HAL_UART_Transmit+0x11c>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2221      	movs	r2, #33	; 0x21
 8008bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008bb8:	f7fb fdf0 	bl	800479c <HAL_GetTick>
 8008bbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	88fa      	ldrh	r2, [r7, #6]
 8008bc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	88fa      	ldrh	r2, [r7, #6]
 8008bc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd2:	d108      	bne.n	8008be6 <HAL_UART_Transmit+0x82>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	e003      	b.n	8008bee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008bf6:	e02a      	b.n	8008c4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2180      	movs	r1, #128	; 0x80
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f967 	bl	8008ed6 <UART_WaitOnFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e036      	b.n	8008c80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	3302      	adds	r3, #2
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	e007      	b.n	8008c40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	781a      	ldrb	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1cf      	bne.n	8008bf8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2140      	movs	r1, #64	; 0x40
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 f937 	bl	8008ed6 <UART_WaitOnFlagUntilTimeout>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e006      	b.n	8008c80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e000      	b.n	8008c80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c7e:	2302      	movs	r3, #2
  }
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3720      	adds	r7, #32
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d166      	bne.n	8008d70 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <HAL_UART_Receive_DMA+0x26>
 8008ca8:	88fb      	ldrh	r3, [r7, #6]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e05f      	b.n	8008d72 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_UART_Receive_DMA+0x38>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e058      	b.n	8008d72 <HAL_UART_Receive_DMA+0xea>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2222      	movs	r2, #34	; 0x22
 8008cde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	4a25      	ldr	r2, [pc, #148]	; (8008d7c <HAL_UART_Receive_DMA+0xf4>)
 8008ce8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cee:	4a24      	ldr	r2, [pc, #144]	; (8008d80 <HAL_UART_Receive_DMA+0xf8>)
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	4a23      	ldr	r2, [pc, #140]	; (8008d84 <HAL_UART_Receive_DMA+0xfc>)
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cfe:	2200      	movs	r2, #0
 8008d00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8008d02:	f107 0308 	add.w	r3, r7, #8
 8008d06:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4619      	mov	r1, r3
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	f7fb fed5 	bl	8004ac8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695a      	ldr	r2, [r3, #20]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695a      	ldr	r2, [r3, #20]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d6a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e000      	b.n	8008d72 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008d70:	2302      	movs	r3, #2
  }
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	08008dbf 	.word	0x08008dbf
 8008d80:	08008e27 	.word	0x08008e27
 8008d84:	08008e43 	.word	0x08008e43

08008d88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d11e      	bne.n	8008e18 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dee:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	695a      	ldr	r2, [r3, #20]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0201 	bic.w	r2, r2, #1
 8008dfe:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e0e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2220      	movs	r2, #32
 8008e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff ffb5 	bl	8008d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff ffb0 	bl	8008d9a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bf14      	ite	ne
 8008e62:	2301      	movne	r3, #1
 8008e64:	2300      	moveq	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b21      	cmp	r3, #33	; 0x21
 8008e74:	d108      	bne.n	8008e88 <UART_DMAError+0x46>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008e82:	68b8      	ldr	r0, [r7, #8]
 8008e84:	f000 f871 	bl	8008f6a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bf14      	ite	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	2300      	moveq	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b22      	cmp	r3, #34	; 0x22
 8008ea8:	d108      	bne.n	8008ebc <UART_DMAError+0x7a>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008eb6:	68b8      	ldr	r0, [r7, #8]
 8008eb8:	f000 f86c 	bl	8008f94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec0:	f043 0210 	orr.w	r2, r3, #16
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ec8:	68b8      	ldr	r0, [r7, #8]
 8008eca:	f7ff ff6f 	bl	8008dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	603b      	str	r3, [r7, #0]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ee6:	e02c      	b.n	8008f42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d028      	beq.n	8008f42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ef6:	f7fb fc51 	bl	800479c <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d21d      	bcs.n	8008f42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	695a      	ldr	r2, [r3, #20]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0201 	bic.w	r2, r2, #1
 8008f24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e00f      	b.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	bf0c      	ite	eq
 8008f52:	2301      	moveq	r3, #1
 8008f54:	2300      	movne	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d0c3      	beq.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008f80:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bc80      	pop	{r7}
 8008f92:	4770      	bx	lr

08008f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008faa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	695a      	ldr	r2, [r3, #20]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0201 	bic.w	r2, r2, #1
 8008fba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
	...

08008fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800900a:	f023 030c 	bic.w	r3, r3, #12
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	430b      	orrs	r3, r1
 8009016:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699a      	ldr	r2, [r3, #24]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a2c      	ldr	r2, [pc, #176]	; (80090e4 <UART_SetConfig+0x114>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d103      	bne.n	8009040 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009038:	f7fe f926 	bl	8007288 <HAL_RCC_GetPCLK2Freq>
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	e002      	b.n	8009046 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009040:	f7fe f90e 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 8009044:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009a      	lsls	r2, r3, #2
 8009050:	441a      	add	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	fbb2 f3f3 	udiv	r3, r2, r3
 800905c:	4a22      	ldr	r2, [pc, #136]	; (80090e8 <UART_SetConfig+0x118>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	0119      	lsls	r1, r3, #4
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009a      	lsls	r2, r3, #2
 8009070:	441a      	add	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	fbb2 f2f3 	udiv	r2, r2, r3
 800907c:	4b1a      	ldr	r3, [pc, #104]	; (80090e8 <UART_SetConfig+0x118>)
 800907e:	fba3 0302 	umull	r0, r3, r3, r2
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	2064      	movs	r0, #100	; 0x64
 8009086:	fb00 f303 	mul.w	r3, r0, r3
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	3332      	adds	r3, #50	; 0x32
 8009090:	4a15      	ldr	r2, [pc, #84]	; (80090e8 <UART_SetConfig+0x118>)
 8009092:	fba2 2303 	umull	r2, r3, r2, r3
 8009096:	095b      	lsrs	r3, r3, #5
 8009098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800909c:	4419      	add	r1, r3
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009a      	lsls	r2, r3, #2
 80090a8:	441a      	add	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <UART_SetConfig+0x118>)
 80090b6:	fba3 0302 	umull	r0, r3, r3, r2
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	2064      	movs	r0, #100	; 0x64
 80090be:	fb00 f303 	mul.w	r3, r0, r3
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	3332      	adds	r3, #50	; 0x32
 80090c8:	4a07      	ldr	r2, [pc, #28]	; (80090e8 <UART_SetConfig+0x118>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	095b      	lsrs	r3, r3, #5
 80090d0:	f003 020f 	and.w	r2, r3, #15
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	440a      	add	r2, r1
 80090da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80090dc:	bf00      	nop
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	40013800 	.word	0x40013800
 80090e8:	51eb851f 	.word	0x51eb851f
 80090ec:	00000000 	.word	0x00000000

080090f0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"




Controller::Controller() {}
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af04      	add	r7, sp, #16
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a5f      	ldr	r2, [pc, #380]	; (8009278 <_ZN10ControllerC1Ev+0x188>)
 80090fc:	635a      	str	r2, [r3, #52]	; 0x34
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a5e      	ldr	r2, [pc, #376]	; (800927c <_ZN10ControllerC1Ev+0x18c>)
 8009102:	639a      	str	r2, [r3, #56]	; 0x38
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800910a:	63da      	str	r2, [r3, #60]	; 0x3c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009110:	4618      	mov	r0, r3
 8009112:	f7f7 fdbb 	bl	8000c8c <__aeabi_i2f>
 8009116:	4603      	mov	r3, r0
 8009118:	4619      	mov	r1, r3
 800911a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800911e:	f7f7 febd 	bl	8000e9c <__aeabi_fdiv>
 8009122:	4603      	mov	r3, r0
 8009124:	461a      	mov	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	641a      	str	r2, [r3, #64]	; 0x40
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a54      	ldr	r2, [pc, #336]	; (8009280 <_ZN10ControllerC1Ev+0x190>)
 800912e:	645a      	str	r2, [r3, #68]	; 0x44
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a54      	ldr	r2, [pc, #336]	; (8009284 <_ZN10ControllerC1Ev+0x194>)
 8009134:	649a      	str	r2, [r3, #72]	; 0x48
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a53      	ldr	r2, [pc, #332]	; (8009288 <_ZN10ControllerC1Ev+0x198>)
 800913a:	64da      	str	r2, [r3, #76]	; 0x4c
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f04f 0200 	mov.w	r2, #0
 8009142:	651a      	str	r2, [r3, #80]	; 0x50
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a51      	ldr	r2, [pc, #324]	; (800928c <_ZN10ControllerC1Ev+0x19c>)
 8009148:	655a      	str	r2, [r3, #84]	; 0x54
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a50      	ldr	r2, [pc, #320]	; (8009290 <_ZN10ControllerC1Ev+0x1a0>)
 800914e:	659a      	str	r2, [r3, #88]	; 0x58
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a50      	ldr	r2, [pc, #320]	; (8009294 <_ZN10ControllerC1Ev+0x1a4>)
 8009154:	65da      	str	r2, [r3, #92]	; 0x5c
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	661a      	str	r2, [r3, #96]	; 0x60
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	665a      	str	r2, [r3, #100]	; 0x64
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	669a      	str	r2, [r3, #104]	; 0x68
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a49      	ldr	r2, [pc, #292]	; (8009298 <_ZN10ControllerC1Ev+0x1a8>)
 8009172:	66da      	str	r2, [r3, #108]	; 0x6c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a49      	ldr	r2, [pc, #292]	; (800929c <_ZN10ControllerC1Ev+0x1ac>)
 8009178:	671a      	str	r2, [r3, #112]	; 0x70
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a48      	ldr	r2, [pc, #288]	; (80092a0 <_ZN10ControllerC1Ev+0x1b0>)
 800917e:	675a      	str	r2, [r3, #116]	; 0x74
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a48      	ldr	r2, [pc, #288]	; (80092a4 <_ZN10ControllerC1Ev+0x1b4>)
 8009184:	679a      	str	r2, [r3, #120]	; 0x78
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a47      	ldr	r2, [pc, #284]	; (80092a8 <_ZN10ControllerC1Ev+0x1b8>)
 800918a:	67da      	str	r2, [r3, #124]	; 0x7c
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a47      	ldr	r2, [pc, #284]	; (80092ac <_ZN10ControllerC1Ev+0x1bc>)
 8009190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a46      	ldr	r2, [pc, #280]	; (80092b0 <_ZN10ControllerC1Ev+0x1c0>)
 8009198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a44      	ldr	r2, [pc, #272]	; (80092b0 <_ZN10ControllerC1Ev+0x1c0>)
 80091a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80091aa:	a32f      	add	r3, pc, #188	; (adr r3, 8009268 <_ZN10ControllerC1Ev+0x178>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091b4:	a32c      	add	r3, pc, #176	; (adr r3, 8009268 <_ZN10ControllerC1Ev+0x178>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	e9cd 2300 	strd	r2, r3, [sp]
 80091be:	a32c      	add	r3, pc, #176	; (adr r3, 8009270 <_ZN10ControllerC1Ev+0x180>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	4608      	mov	r0, r1
 80091c6:	f003 fa65 	bl	800c694 <_ZN3lpfC1Eddd>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80091d0:	a325      	add	r3, pc, #148	; (adr r3, 8009268 <_ZN10ControllerC1Ev+0x178>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091da:	a323      	add	r3, pc, #140	; (adr r3, 8009268 <_ZN10ControllerC1Ev+0x178>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	e9cd 2300 	strd	r2, r3, [sp]
 80091e4:	a322      	add	r3, pc, #136	; (adr r3, 8009270 <_ZN10ControllerC1Ev+0x180>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	4608      	mov	r0, r1
 80091ec:	f003 fa52 	bl	800c694 <_ZN3lpfC1Eddd>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 80091f6:	a31c      	add	r3, pc, #112	; (adr r3, 8009268 <_ZN10ControllerC1Ev+0x178>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009200:	a319      	add	r3, pc, #100	; (adr r3, 8009268 <_ZN10ControllerC1Ev+0x178>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	e9cd 2300 	strd	r2, r3, [sp]
 800920a:	a319      	add	r3, pc, #100	; (adr r3, 8009270 <_ZN10ControllerC1Ev+0x180>)
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	4608      	mov	r0, r1
 8009212:	f003 fa3f 	bl	800c694 <_ZN3lpfC1Eddd>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800921c:	4618      	mov	r0, r3
 800921e:	f002 fe2b 	bl	800be78 <_ZN3PIDC1Ev>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009228:	4618      	mov	r0, r3
 800922a:	f002 fe25 	bl	800be78 <_ZN3PIDC1Ev>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8009234:	4618      	mov	r0, r3
 8009236:	f002 fe1f 	bl	800be78 <_ZN3PIDC1Ev>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8009240:	4618      	mov	r0, r3
 8009242:	f002 fe19 	bl	800be78 <_ZN3PIDC1Ev>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800924c:	4618      	mov	r0, r3
 800924e:	f002 fe13 	bl	800be78 <_ZN3PIDC1Ev>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8009258:	4618      	mov	r0, r3
 800925a:	f002 fe0d 	bl	800be78 <_ZN3PIDC1Ev>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	fc3b4f61 	.word	0xfc3b4f61
 800926c:	3fa35935 	.word	0x3fa35935
 8009270:	4f0d844d 	.word	0x4f0d844d
 8009274:	3fed94af 	.word	0x3fed94af
 8009278:	44c1c000 	.word	0x44c1c000
 800927c:	42654ca3 	.word	0x42654ca3
 8009280:	3fb33333 	.word	0x3fb33333
 8009284:	411cf5c3 	.word	0x411cf5c3
 8009288:	41f9d70a 	.word	0x41f9d70a
 800928c:	3ecccccd 	.word	0x3ecccccd
 8009290:	3da3d70a 	.word	0x3da3d70a
 8009294:	3cf5c28f 	.word	0x3cf5c28f
 8009298:	40a00000 	.word	0x40a00000
 800929c:	41100000 	.word	0x41100000
 80092a0:	40900000 	.word	0x40900000
 80092a4:	40400000 	.word	0x40400000
 80092a8:	41200000 	.word	0x41200000
 80092ac:	41700000 	.word	0x41700000
 80092b0:	bf800000 	.word	0xbf800000

080092b4 <_ZN10Controller3RunEv>:

std::vector<float> Controller::Run (void) {
 80092b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	b098      	sub	sp, #96	; 0x60
 80092ba:	af04      	add	r7, sp, #16
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	609a      	str	r2, [r3, #8]
        


    int thr;

    switch(mod) {
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8009320:	2b02      	cmp	r3, #2
 8009322:	f000 8145 	beq.w	80095b0 <_ZN10Controller3RunEv+0x2fc>
 8009326:	2b02      	cmp	r3, #2
 8009328:	f300 8167 	bgt.w	80095fa <_ZN10Controller3RunEv+0x346>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <_ZN10Controller3RunEv+0x82>
 8009330:	2b01      	cmp	r3, #1
 8009332:	d04f      	beq.n	80093d4 <_ZN10Controller3RunEv+0x120>
 8009334:	e161      	b.n	80095fa <_ZN10Controller3RunEv+0x346>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8009342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009346:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800934a:	f003 f8e5 	bl	800c518 <_ZN3PID3SatEfii>
 800934e:	4603      	mov	r3, r0
 8009350:	4618      	mov	r0, r3
 8009352:	f7f7 fecb 	bl	80010ec <__aeabi_f2iz>
 8009356:	4603      	mov	r3, r0
 8009358:	64fb      	str	r3, [r7, #76]	; 0x4c
            roll_des     = state_des.angles[0];
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 	 = state_des.angles[1];
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des = state_des.rates[2];
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800938a:	4619      	mov	r1, r3
 800938c:	4610      	mov	r0, r2
 800938e:	f003 f99c 	bl	800c6ca <_ZN3lpf3RunEf>
 8009392:	4602      	mov	r2, r0
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f003 f98e 	bl	800c6ca <_ZN3lpf3RunEf>
 80093ae:	4602      	mov	r2, r0
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f003 f980 	bl	800c6ca <_ZN3lpf3RunEf>
 80093ca:	4602      	mov	r2, r0
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    	    break;
 80093d2:	e112      	b.n	80095fa <_ZN10Controller3RunEv+0x346>
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	f503 7668 	add.w	r6, r3, #928	; 0x3a0
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	f8d3 817c 	ldr.w	r8, [r3, #380]	; 0x17c
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	f8d3 9180 	ldr.w	r9, [r3, #384]	; 0x180
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	f8d3 a178 	ldr.w	sl, [r3, #376]	; 0x178
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f7 fe9b 	bl	8001138 <__aeabi_f2uiz>
 8009402:	4603      	mov	r3, r0
 8009404:	9302      	str	r3, [sp, #8]
 8009406:	9501      	str	r5, [sp, #4]
 8009408:	9400      	str	r4, [sp, #0]
 800940a:	4653      	mov	r3, sl
 800940c:	464a      	mov	r2, r9
 800940e:	4641      	mov	r1, r8
 8009410:	4630      	mov	r0, r6
 8009412:	f002 fdc5 	bl	800bfa0 <_ZN3PID6PI_VelEfffffj>
 8009416:	4604      	mov	r4, r0
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7f7 fc86 	bl	8000d34 <__aeabi_fmul>
 8009428:	4603      	mov	r3, r0
 800942a:	4619      	mov	r1, r3
 800942c:	4620      	mov	r0, r4
 800942e:	f7f7 fb79 	bl	8000b24 <__addsf3>
 8009432:	4603      	mov	r3, r0
 8009434:	461a      	mov	r2, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			float deg2rad = 0.0175;
 800943c:	4b5b      	ldr	r3, [pc, #364]	; (80095ac <_ZN10Controller3RunEv+0x2f8>)
 800943e:	64bb      	str	r3, [r7, #72]	; 0x48
			float roll_r = roll * deg2rad;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	4619      	mov	r1, r3
 8009446:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009448:	f7f7 fc74 	bl	8000d34 <__aeabi_fmul>
 800944c:	4603      	mov	r3, r0
 800944e:	647b      	str	r3, [r7, #68]	; 0x44
			float pitch_r = pitch * deg2rad;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	4619      	mov	r1, r3
 8009456:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009458:	f7f7 fc6c 	bl	8000d34 <__aeabi_fmul>
 800945c:	4603      	mov	r3, r0
 800945e:	643b      	str	r3, [r7, #64]	; 0x40
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 8009460:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009462:	f7f8 faed 	bl	8001a40 <_ZSt3cosf>
 8009466:	4603      	mov	r3, r0
 8009468:	4619      	mov	r1, r3
 800946a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800946e:	f7f7 fd15 	bl	8000e9c <__aeabi_fdiv>
 8009472:	4603      	mov	r3, r0
 8009474:	461c      	mov	r4, r3
 8009476:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009478:	f7f8 fae2 	bl	8001a40 <_ZSt3cosf>
 800947c:	4603      	mov	r3, r0
 800947e:	4619      	mov	r1, r3
 8009480:	4620      	mov	r0, r4
 8009482:	f7f7 fd0b 	bl	8000e9c <__aeabi_fdiv>
 8009486:	4603      	mov	r3, r0
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c

			F = F * b2e ; // Body to Earth
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009492:	4618      	mov	r0, r3
 8009494:	f7f7 fc4e 	bl	8000d34 <__aeabi_fmul>
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			F = p_alt.Sat(F, F_max, F_min);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f7 fe1a 	bl	80010ec <__aeabi_f2iz>
 80094b8:	4606      	mov	r6, r0
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094be:	4618      	mov	r0, r3
 80094c0:	f7f7 fe14 	bl	80010ec <__aeabi_f2iz>
 80094c4:	4603      	mov	r3, r0
 80094c6:	4632      	mov	r2, r6
 80094c8:	4629      	mov	r1, r5
 80094ca:	4620      	mov	r0, r4
 80094cc:	f003 f824 	bl	800c518 <_ZN3PID3SatEfii>
 80094d0:	4602      	mov	r2, r0
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			thr = p_alt.F2thr(F);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f503 7268 	add.w	r2, r3, #928	; 0x3a0
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80094e4:	4619      	mov	r1, r3
 80094e6:	4610      	mov	r0, r2
 80094e8:	f003 f88e 	bl	800c608 <_ZN3PID5F2thrEf>
 80094ec:	4603      	mov	r3, r0
 80094ee:	64fb      	str	r3, [r7, #76]	; 0x4c
			thr = p_alt.Sat(thr, 1800, 1100);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 80094f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80094f8:	f7f7 fbc8 	bl	8000c8c <__aeabi_i2f>
 80094fc:	4601      	mov	r1, r0
 80094fe:	f240 434c 	movw	r3, #1100	; 0x44c
 8009502:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8009506:	4620      	mov	r0, r4
 8009508:	f003 f806 	bl	800c518 <_ZN3PID3SatEfii>
 800950c:	4603      	mov	r3, r0
 800950e:	4618      	mov	r0, r3
 8009510:	f7f7 fdec 	bl	80010ec <__aeabi_f2iz>
 8009514:	4603      	mov	r3, r0
 8009516:	64fb      	str	r3, [r7, #76]	; 0x4c
			alt_thr = thr;
 8009518:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800951a:	f7f7 fbb7 	bl	8000c8c <__aeabi_i2f>
 800951e:	4602      	mov	r2, r0
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
			z0 = p_alt.zi;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	f8d3 243c 	ldr.w	r2, [r3, #1084]	; 0x43c
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

            roll_des     = state_des.angles[0];
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 	 = state_des.angles[1];
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des = state_des.rates[2];
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f003 f8b0 	bl	800c6ca <_ZN3lpf3RunEf>
 800956a:	4602      	mov	r2, r0
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f003 f8a2 	bl	800c6ca <_ZN3lpf3RunEf>
 8009586:	4602      	mov	r2, r0
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f003 f894 	bl	800c6ca <_ZN3lpf3RunEf>
 80095a2:	4602      	mov	r2, r0
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
			break;
 80095aa:	e026      	b.n	80095fa <_ZN10Controller3RunEv+0x346>
 80095ac:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);
    		pitch_des = p_velx.PI_Vel(0, x, vx, Kp_vel, Ki_vel, ch2);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f503 6689 	add.w	r6, r3, #1096	; 0x448
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	f8d3 8190 	ldr.w	r8, [r3, #400]	; 0x190
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f8d3 9188 	ldr.w	r9, [r3, #392]	; 0x188
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7f7 fdaf 	bl	8001138 <__aeabi_f2uiz>
 80095da:	4603      	mov	r3, r0
 80095dc:	9302      	str	r3, [sp, #8]
 80095de:	9501      	str	r5, [sp, #4]
 80095e0:	9400      	str	r4, [sp, #0]
 80095e2:	464b      	mov	r3, r9
 80095e4:	4642      	mov	r2, r8
 80095e6:	f04f 0100 	mov.w	r1, #0
 80095ea:	4630      	mov	r0, r6
 80095ec:	f002 fcd8 	bl	800bfa0 <_ZN3PID6PI_VelEfffffj>
 80095f0:	4602      	mov	r2, r0
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    		break;
 80095f8:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	f8d3 119c 	ldr.w	r1, [r3, #412]	; 0x19c
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	4623      	mov	r3, r4
 8009616:	f002 fc85 	bl	800bf24 <_ZN3PID7P_AngleEffff>
 800961a:	4602      	mov	r2, r0
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7f7 fa7d 	bl	8000b24 <__addsf3>
 800962a:	4603      	mov	r3, r0
 800962c:	461a      	mov	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	f503 7014 	add.w	r0, r3, #592	; 0x250
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	691a      	ldr	r2, [r3, #16]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	4623      	mov	r3, r4
 8009650:	f002 fc68 	bl	800bf24 <_ZN3PID7P_AngleEffff>
 8009654:	4602      	mov	r2, r0
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f7f7 fa60 	bl	8000b24 <__addsf3>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800967a:	4619      	mov	r1, r3
 800967c:	4610      	mov	r0, r2
 800967e:	f002 fceb 	bl	800c058 <_ZN3PID6RateFFEf>
 8009682:	63b8      	str	r0, [r7, #56]	; 0x38
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f002 fce0 	bl	800c058 <_ZN3PID6RateFFEf>
 8009698:	6378      	str	r0, [r7, #52]	; 0x34

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle) + pd_roll_ff;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	699e      	ldr	r6, [r3, #24]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 80096bc:	6838      	ldr	r0, [r7, #0]
 80096be:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80096c0:	9003      	str	r0, [sp, #12]
 80096c2:	9102      	str	r1, [sp, #8]
 80096c4:	9201      	str	r2, [sp, #4]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	4663      	mov	r3, ip
 80096ca:	4632      	mov	r2, r6
 80096cc:	4629      	mov	r1, r5
 80096ce:	4620      	mov	r0, r4
 80096d0:	f002 fd12 	bl	800c0f8 <_ZN3PID9PID_Rate2Efffffff>
 80096d4:	4603      	mov	r3, r0
 80096d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f7 fa23 	bl	8000b24 <__addsf3>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle) + pd_pitch_ff;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	f503 7414 	add.w	r4, r3, #592	; 0x250
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	f8d3 5128 	ldr.w	r5, [r3, #296]	; 0x128
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	69de      	ldr	r6, [r3, #28]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800970a:	6838      	ldr	r0, [r7, #0]
 800970c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800970e:	9003      	str	r0, [sp, #12]
 8009710:	9102      	str	r1, [sp, #8]
 8009712:	9201      	str	r2, [sp, #4]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	4663      	mov	r3, ip
 8009718:	4632      	mov	r2, r6
 800971a:	4629      	mov	r1, r5
 800971c:	4620      	mov	r0, r4
 800971e:	f002 fceb 	bl	800c0f8 <_ZN3PID9PID_Rate2Efffffff>
 8009722:	4603      	mov	r3, r0
 8009724:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009726:	4618      	mov	r0, r3
 8009728:	f7f7 f9fc 	bl	8000b24 <__addsf3>
 800972c:	4603      	mov	r3, r0
 800972e:	461a      	mov	r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6a1a      	ldr	r2, [r3, #32]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974e:	f04f 0500 	mov.w	r5, #0
 8009752:	9501      	str	r5, [sp, #4]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	4623      	mov	r3, r4
 8009758:	f002 fd82 	bl	800c260 <_ZN3PID7PD_RateEfffff>
 800975c:	4602      	mov	r2, r0
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120



    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 8009764:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009766:	f7f7 fa91 	bl	8000c8c <__aeabi_i2f>
 800976a:	4602      	mov	r2, r0
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7f7 f9d5 	bl	8000b24 <__addsf3>
 800977a:	4603      	mov	r3, r0
 800977c:	461a      	mov	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f7f7 f9ca 	bl	8000b20 <__aeabi_fsub>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009796:	4619      	mov	r1, r3
 8009798:	4610      	mov	r0, r2
 800979a:	f7f7 f9c1 	bl	8000b20 <__aeabi_fsub>
 800979e:	4603      	mov	r3, r0
 80097a0:	49ac      	ldr	r1, [pc, #688]	; (8009a54 <_ZN10Controller3RunEv+0x7a0>)
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f7 f9be 	bl	8000b24 <__addsf3>
 80097a8:	4603      	mov	r3, r0
 80097aa:	49ab      	ldr	r1, [pc, #684]	; (8009a58 <_ZN10Controller3RunEv+0x7a4>)
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7f7 f9b9 	bl	8000b24 <__addsf3>
 80097b2:	4603      	mov	r3, r0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7f7 fc99 	bl	80010ec <__aeabi_f2iz>
 80097ba:	4603      	mov	r3, r0
 80097bc:	633b      	str	r3, [r7, #48]	; 0x30
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 80097be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80097c0:	f7f7 fa64 	bl	8000c8c <__aeabi_i2f>
 80097c4:	4602      	mov	r2, r0
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7f7 f9a6 	bl	8000b20 <__aeabi_fsub>
 80097d4:	4603      	mov	r3, r0
 80097d6:	461a      	mov	r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7f7 f99f 	bl	8000b24 <__addsf3>
 80097e6:	4603      	mov	r3, r0
 80097e8:	461a      	mov	r2, r3
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f7f7 f994 	bl	8000b20 <__aeabi_fsub>
 80097f8:	4603      	mov	r3, r0
 80097fa:	4996      	ldr	r1, [pc, #600]	; (8009a54 <_ZN10Controller3RunEv+0x7a0>)
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f7 f98f 	bl	8000b20 <__aeabi_fsub>
 8009802:	4603      	mov	r3, r0
 8009804:	4994      	ldr	r1, [pc, #592]	; (8009a58 <_ZN10Controller3RunEv+0x7a4>)
 8009806:	4618      	mov	r0, r3
 8009808:	f7f7 f98a 	bl	8000b20 <__aeabi_fsub>
 800980c:	4603      	mov	r3, r0
 800980e:	4618      	mov	r0, r3
 8009810:	f7f7 fc6c 	bl	80010ec <__aeabi_f2iz>
 8009814:	4603      	mov	r3, r0
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 8009818:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800981a:	f7f7 fa37 	bl	8000c8c <__aeabi_i2f>
 800981e:	4602      	mov	r2, r0
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009826:	4619      	mov	r1, r3
 8009828:	4610      	mov	r0, r2
 800982a:	f7f7 f97b 	bl	8000b24 <__addsf3>
 800982e:	4603      	mov	r3, r0
 8009830:	461a      	mov	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f7f7 f972 	bl	8000b24 <__addsf3>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800984a:	4619      	mov	r1, r3
 800984c:	4610      	mov	r0, r2
 800984e:	f7f7 f969 	bl	8000b24 <__addsf3>
 8009852:	4603      	mov	r3, r0
 8009854:	497f      	ldr	r1, [pc, #508]	; (8009a54 <_ZN10Controller3RunEv+0x7a0>)
 8009856:	4618      	mov	r0, r3
 8009858:	f7f7 f964 	bl	8000b24 <__addsf3>
 800985c:	4603      	mov	r3, r0
 800985e:	497e      	ldr	r1, [pc, #504]	; (8009a58 <_ZN10Controller3RunEv+0x7a4>)
 8009860:	4618      	mov	r0, r3
 8009862:	f7f7 f95d 	bl	8000b20 <__aeabi_fsub>
 8009866:	4603      	mov	r3, r0
 8009868:	4618      	mov	r0, r3
 800986a:	f7f7 fc3f 	bl	80010ec <__aeabi_f2iz>
 800986e:	4603      	mov	r3, r0
 8009870:	62bb      	str	r3, [r7, #40]	; 0x28
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 8009872:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009874:	f7f7 fa0a 	bl	8000c8c <__aeabi_i2f>
 8009878:	4602      	mov	r2, r0
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7f7 f94c 	bl	8000b20 <__aeabi_fsub>
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7f7 f943 	bl	8000b20 <__aeabi_fsub>
 800989a:	4603      	mov	r3, r0
 800989c:	461a      	mov	r2, r3
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7f7 f93c 	bl	8000b24 <__addsf3>
 80098ac:	4603      	mov	r3, r0
 80098ae:	4969      	ldr	r1, [pc, #420]	; (8009a54 <_ZN10Controller3RunEv+0x7a0>)
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f7 f935 	bl	8000b20 <__aeabi_fsub>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4967      	ldr	r1, [pc, #412]	; (8009a58 <_ZN10Controller3RunEv+0x7a4>)
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f7 f932 	bl	8000b24 <__addsf3>
 80098c0:	4603      	mov	r3, r0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7f7 fc12 	bl	80010ec <__aeabi_f2iz>
 80098c8:	4603      	mov	r3, r0
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80098d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098d4:	f7f7 f9da 	bl	8000c8c <__aeabi_i2f>
 80098d8:	4601      	mov	r1, r0
 80098da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	f240 434c 	movw	r3, #1100	; 0x44c
 80098e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80098e6:	4620      	mov	r0, r4
 80098e8:	f002 fddc 	bl	800c4a4 <_ZN3PID3SatEfiii>
 80098ec:	4603      	mov	r3, r0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f7 fbfc 	bl	80010ec <__aeabi_f2iz>
 80098f4:	4603      	mov	r3, r0
 80098f6:	633b      	str	r3, [r7, #48]	; 0x30
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80098fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009900:	f7f7 f9c4 	bl	8000c8c <__aeabi_i2f>
 8009904:	4601      	mov	r1, r0
 8009906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	f240 434c 	movw	r3, #1100	; 0x44c
 800990e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009912:	4620      	mov	r0, r4
 8009914:	f002 fdc6 	bl	800c4a4 <_ZN3PID3SatEfiii>
 8009918:	4603      	mov	r3, r0
 800991a:	4618      	mov	r0, r3
 800991c:	f7f7 fbe6 	bl	80010ec <__aeabi_f2iz>
 8009920:	4603      	mov	r3, r0
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992c:	f7f7 f9ae 	bl	8000c8c <__aeabi_i2f>
 8009930:	4601      	mov	r1, r0
 8009932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	f240 434c 	movw	r3, #1100	; 0x44c
 800993a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800993e:	4620      	mov	r0, r4
 8009940:	f002 fdb0 	bl	800c4a4 <_ZN3PID3SatEfiii>
 8009944:	4603      	mov	r3, r0
 8009946:	4618      	mov	r0, r3
 8009948:	f7f7 fbd0 	bl	80010ec <__aeabi_f2iz>
 800994c:	4603      	mov	r3, r0
 800994e:	62bb      	str	r3, [r7, #40]	; 0x28
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8009956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009958:	f7f7 f998 	bl	8000c8c <__aeabi_i2f>
 800995c:	4601      	mov	r1, r0
 800995e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	f240 434c 	movw	r3, #1100	; 0x44c
 8009966:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800996a:	4620      	mov	r0, r4
 800996c:	f002 fd9a 	bl	800c4a4 <_ZN3PID3SatEfiii>
 8009970:	4603      	mov	r3, r0
 8009972:	4618      	mov	r0, r3
 8009974:	f7f7 fbba 	bl	80010ec <__aeabi_f2iz>
 8009978:	4603      	mov	r3, r0
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
    pwm2 = 1000;
    pwm3 = 1000;
    pwm4 = 1000;
*/
    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009984:	b291      	uxth	r1, r2
 8009986:	2201      	movs	r2, #1
 8009988:	4618      	mov	r0, r3
 800998a:	f002 fdf5 	bl	800c578 <_ZN3PID7pwm2motEti>
 800998e:	4602      	mov	r2, r0
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	625a      	str	r2, [r3, #36]	; 0x24
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800999a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999c:	b291      	uxth	r1, r2
 800999e:	2201      	movs	r2, #1
 80099a0:	4618      	mov	r0, r3
 80099a2:	f002 fde9 	bl	800c578 <_ZN3PID7pwm2motEti>
 80099a6:	4602      	mov	r2, r0
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	629a      	str	r2, [r3, #40]	; 0x28
    w3 = pid_roll.pwm2mot(pwm3,-1);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80099b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b4:	b291      	uxth	r1, r2
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 fddc 	bl	800c578 <_ZN3PID7pwm2motEti>
 80099c0:	4602      	mov	r2, r0
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c
    w4 = pid_roll.pwm2mot(pwm4,-1);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80099cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ce:	b291      	uxth	r1, r2
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	4618      	mov	r0, r3
 80099d6:	f002 fdcf 	bl	800c578 <_ZN3PID7pwm2motEti>
 80099da:	4602      	mov	r2, r0
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	631a      	str	r2, [r3, #48]	; 0x30


    std::vector<float> controller_output = 	{w1,w2,w3,w4};
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	613b      	str	r3, [r7, #16]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	61bb      	str	r3, [r7, #24]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	61fb      	str	r3, [r7, #28]
 80099f8:	f107 0310 	add.w	r3, r7, #16
 80099fc:	60bb      	str	r3, [r7, #8]
 80099fe:	2304      	movs	r3, #4
 8009a00:	60fb      	str	r3, [r7, #12]
 8009a02:	f107 0320 	add.w	r3, r7, #32
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fa f9ce 	bl	8003da8 <_ZNSaIfEC1Ev>
 8009a0c:	f107 0320 	add.w	r3, r7, #32
 8009a10:	f107 0208 	add.w	r2, r7, #8
 8009a14:	ca06      	ldmia	r2, {r1, r2}
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f85c 	bl	8009ad4 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8009a1c:	f107 0320 	add.w	r3, r7, #32
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fa f96c 	bl	8003cfe <_ZNSaIfED1Ev>
    controller_output_pwm[0] = pwm1;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a2a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    controller_output_pwm[1] = pwm2;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a32:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    controller_output_pwm[2] = pwm3;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a3a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    controller_output_pwm[3] = pwm4;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a42:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

    return controller_output;
 8009a46:	bf00      	nop
}
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	3750      	adds	r7, #80	; 0x50
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a52:	bf00      	nop
 8009a54:	41880000 	.word	0x41880000
 8009a58:	40e00000 	.word	0x40e00000

08009a5c <_ZN10ControllerD1Ev>:
    controller_output_pwm[3] = pwm4;

    return controller_output;
}
*/
Controller::~Controller() {}
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f002 fe04 	bl	800c678 <_ZN3PIDD1Ev>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8009a76:	4618      	mov	r0, r3
 8009a78:	f002 fdfe 	bl	800c678 <_ZN3PIDD1Ev>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f002 fdf8 	bl	800c678 <_ZN3PIDD1Ev>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f002 fdf2 	bl	800c678 <_ZN3PIDD1Ev>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f002 fdec 	bl	800c678 <_ZN3PIDD1Ev>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f002 fde6 	bl	800c678 <_ZN3PIDD1Ev>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	33e0      	adds	r3, #224	; 0xe0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f002 fe60 	bl	800c776 <_ZN3lpfD1Ev>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	33b8      	adds	r3, #184	; 0xb8
 8009aba:	4618      	mov	r0, r3
 8009abc:	f002 fe5b 	bl	800c776 <_ZN3lpfD1Ev>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3390      	adds	r3, #144	; 0x90
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f002 fe56 	bl	800c776 <_ZN3lpfD1Ev>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 8009ad4:	b5b0      	push	{r4, r5, r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	1d38      	adds	r0, r7, #4
 8009ade:	e880 0006 	stmia.w	r0, {r1, r2}
 8009ae2:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fa fa9a 	bl	8004022 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8009aee:	1d3b      	adds	r3, r7, #4
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f810 	bl	8009b16 <_ZNKSt16initializer_listIfE5beginEv>
 8009af6:	4604      	mov	r4, r0
 8009af8:	1d3b      	adds	r3, r7, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 f816 	bl	8009b2c <_ZNKSt16initializer_listIfE3endEv>
 8009b00:	4602      	mov	r2, r0
 8009b02:	462b      	mov	r3, r5
 8009b04:	4621      	mov	r1, r4
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 f822 	bl	8009b50 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bdb0      	pop	{r4, r5, r7, pc}

08009b16 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr

08009b2c <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8009b2c:	b590      	push	{r4, r7, lr}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff ffee 	bl	8009b16 <_ZNKSt16initializer_listIfE5beginEv>
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f840 	bl	8009bc2 <_ZNKSt16initializer_listIfE4sizeEv>
 8009b42:	4603      	mov	r3, r0
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4423      	add	r3, r4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd90      	pop	{r4, r7, pc}

08009b50 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8009b50:	b590      	push	{r4, r7, lr}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	68b8      	ldr	r0, [r7, #8]
 8009b62:	f000 f839 	bl	8009bd8 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8009b66:	4603      	mov	r3, r0
 8009b68:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8009b6a:	68fc      	ldr	r4, [r7, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fa f956 	bl	8003e20 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009b74:	4603      	mov	r3, r0
 8009b76:	4619      	mov	r1, r3
 8009b78:	6978      	ldr	r0, [r7, #20]
 8009b7a:	f000 f841 	bl	8009c00 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4619      	mov	r1, r3
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 f864 	bl	8009c50 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8009b88:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	441a      	add	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fa f93c 	bl	8003e20 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009ba8:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8009baa:	4622      	mov	r2, r4
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	68b8      	ldr	r0, [r7, #8]
 8009bb0:	f000 f862 	bl	8009c78 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8009bb4:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	605a      	str	r2, [r3, #4]
	}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd90      	pop	{r4, r7, pc}

08009bc2 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bc80      	pop	{r7}
 8009bd6:	4770      	bx	lr

08009bd8 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8009bd8:	b5b0      	push	{r4, r5, r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8009be2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009be4:	1d3b      	adds	r3, r7, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f857 	bl	8009c9a <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8009bec:	462a      	mov	r2, r5
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 f85b 	bl	8009cac <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8009bf6:	4603      	mov	r3, r0
    }
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bdb0      	pop	{r4, r5, r7, pc}

08009c00 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8009c00:	b590      	push	{r4, r7, lr}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8009c0a:	f107 030c 	add.w	r3, r7, #12
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fa f9f8 	bl	8004006 <_ZNSaIfEC1ERKS_>
 8009c16:	f107 030c 	add.w	r3, r7, #12
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 f855 	bl	8009cca <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8009c20:	4602      	mov	r2, r0
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4293      	cmp	r3, r2
 8009c26:	bf8c      	ite	hi
 8009c28:	2301      	movhi	r3, #1
 8009c2a:	2300      	movls	r3, #0
 8009c2c:	b2dc      	uxtb	r4, r3
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fa f863 	bl	8003cfe <_ZNSaIfED1Ev>
 8009c38:	2c00      	cmp	r4, #0
 8009c3a:	d002      	beq.n	8009c42 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8009c3c:	4803      	ldr	r0, [pc, #12]	; (8009c4c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8009c3e:	f002 fdba 	bl	800c7b6 <_ZSt20__throw_length_errorPKc>
	return __n;
 8009c42:	687b      	ldr	r3, [r7, #4]
      }
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd90      	pop	{r4, r7, pc}
 8009c4c:	0800ed64 	.word	0x0800ed64

08009c50 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f84a 	bl	8009cfe <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	e000      	b.n	8009c70 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8009c6e:	2300      	movs	r3, #0
      }
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f846 	bl	8009d1c <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8009c90:	4603      	mov	r3, r0
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bc80      	pop	{r7}
 8009caa:	4770      	bx	lr

08009cac <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	109b      	asrs	r3, r3, #2
    }
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bc80      	pop	{r7}
 8009cc8:	4770      	bx	lr

08009cca <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009cd2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009cd6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f831 	bl	8009d40 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009ce2:	f107 0208 	add.w	r2, r7, #8
 8009ce6:	f107 030c 	add.w	r3, r7, #12
 8009cea:	4611      	mov	r1, r2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f833 	bl	8009d58 <_ZSt3minIjERKT_S2_S2_>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	681b      	ldr	r3, [r3, #0]
      }
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009d08:	2200      	movs	r2, #0
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f836 	bl	8009d7e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8009d12:	4603      	mov	r3, r0
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 f842 	bl	8009dba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8009d36:	4603      	mov	r3, r0
    }
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f846 	bl	8009dda <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d201      	bcs.n	8009d72 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	e000      	b.n	8009d74 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8009d72:	687b      	ldr	r3, [r7, #4]
    }
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bc80      	pop	{r7}
 8009d7c:	4770      	bx	lr

08009d7e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 f825 	bl	8009dda <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8009d90:	4602      	mov	r2, r0
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	4293      	cmp	r3, r2
 8009d96:	bf8c      	ite	hi
 8009d98:	2301      	movhi	r3, #1
 8009d9a:	2300      	movls	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009da2:	f002 fd05 	bl	800c7b0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f002 fcef 	bl	800c78e <_Znwj>
 8009db0:	4603      	mov	r3, r0
      }
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 f810 	bl	8009df0 <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009de2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bc80      	pop	{r7}
 8009dee:	4770      	bx	lr

08009df0 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8009df0:	b590      	push	{r4, r7, lr}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 f80f 	bl	8009e20 <_ZSt12__miter_baseIPKfET_S2_>
 8009e02:	4604      	mov	r4, r0
 8009e04:	68b8      	ldr	r0, [r7, #8]
 8009e06:	f000 f80b 	bl	8009e20 <_ZSt12__miter_baseIPKfET_S2_>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 f80f 	bl	8009e34 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8009e16:	4603      	mov	r3, r0
    }
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd90      	pop	{r4, r7, pc}

08009e20 <_ZSt12__miter_baseIPKfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009e34:	b5b0      	push	{r4, r5, r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 f81a 	bl	8009e7a <_ZSt12__niter_baseIPKfET_S2_>
 8009e46:	4604      	mov	r4, r0
 8009e48:	68b8      	ldr	r0, [r7, #8]
 8009e4a:	f000 f816 	bl	8009e7a <_ZSt12__niter_baseIPKfET_S2_>
 8009e4e:	4605      	mov	r5, r0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f81b 	bl	8009e8e <_ZSt12__niter_baseIPfET_S1_>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 f81f 	bl	8009ea2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8009e64:	4602      	mov	r2, r0
 8009e66:	1d3b      	adds	r3, r7, #4
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 f82b 	bl	8009ec6 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8009e70:	4603      	mov	r3, r0
    }
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bdb0      	pop	{r4, r5, r7, pc}

08009e7a <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bc80      	pop	{r7}
 8009ea0:	4770      	bx	lr

08009ea2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b086      	sub	sp, #24
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8009eae:	2301      	movs	r3, #1
 8009eb0:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 f810 	bl	8009edc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8009ebc:	4603      	mov	r3, r0
    }
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	109b      	asrs	r3, r3, #2
 8009ef0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d006      	beq.n	8009f06 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	461a      	mov	r2, r3
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f004 fded 	bl	800eae0 <memmove>
	  return __result + _Num;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	4413      	add	r3, r2
	}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af04      	add	r7, sp, #16
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	619a      	str	r2, [r3, #24]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f04f 0200 	mov.w	r2, #0
 8009f2e:	61da      	str	r2, [r3, #28]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f04f 0200 	mov.w	r2, #0
 8009f36:	621a      	str	r2, [r3, #32]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a59      	ldr	r2, [pc, #356]	; (800a0a0 <_ZN15Kalman_FiltresiC1Ev+0x188>)
 8009f3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a58      	ldr	r2, [pc, #352]	; (800a0a4 <_ZN15Kalman_FiltresiC1Ev+0x18c>)
 8009f42:	641a      	str	r2, [r3, #64]	; 0x40
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f04f 0200 	mov.w	r2, #0
 8009f4a:	645a      	str	r2, [r3, #68]	; 0x44
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f04f 0200 	mov.w	r2, #0
 8009f52:	649a      	str	r2, [r3, #72]	; 0x48
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a52      	ldr	r2, [pc, #328]	; (800a0a8 <_ZN15Kalman_FiltresiC1Ev+0x190>)
 8009f60:	669a      	str	r2, [r3, #104]	; 0x68
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f04f 0200 	mov.w	r2, #0
 8009f70:	671a      	str	r2, [r3, #112]	; 0x70
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a4d      	ldr	r2, [pc, #308]	; (800a0ac <_ZN15Kalman_FiltresiC1Ev+0x194>)
 8009f76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a4c      	ldr	r2, [pc, #304]	; (800a0b0 <_ZN15Kalman_FiltresiC1Ev+0x198>)
 8009f7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a4b      	ldr	r2, [pc, #300]	; (800a0b4 <_ZN15Kalman_FiltresiC1Ev+0x19c>)
 8009f86:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a48      	ldr	r2, [pc, #288]	; (800a0b8 <_ZN15Kalman_FiltresiC1Ev+0x1a0>)
 8009f98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a47      	ldr	r2, [pc, #284]	; (800a0bc <_ZN15Kalman_FiltresiC1Ev+0x1a4>)
 8009fa0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009faa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a43      	ldr	r2, [pc, #268]	; (800a0c0 <_ZN15Kalman_FiltresiC1Ev+0x1a8>)
 8009fb2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009fbc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7f6 fe60 	bl	8000c8c <__aeabi_i2f>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	4619      	mov	r1, r3
 8009fd0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009fd4:	f7f6 ff62 	bl	8000e9c <__aeabi_fdiv>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7f6 fa1c 	bl	8000418 <__aeabi_f2d>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a35      	ldr	r2, [pc, #212]	; (800a0c4 <_ZN15Kalman_FiltresiC1Ev+0x1ac>)
 8009fee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a34      	ldr	r2, [pc, #208]	; (800a0c8 <_ZN15Kalman_FiltresiC1Ev+0x1b0>)
 8009ff6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800a000:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a31      	ldr	r2, [pc, #196]	; (800a0cc <_ZN15Kalman_FiltresiC1Ev+0x1b4>)
 800a008:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a012:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a2d      	ldr	r2, [pc, #180]	; (800a0d0 <_ZN15Kalman_FiltresiC1Ev+0x1b8>)
 800a01a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a2c      	ldr	r2, [pc, #176]	; (800a0d4 <_ZN15Kalman_FiltresiC1Ev+0x1bc>)
 800a022:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800a02c:	a314      	add	r3, pc, #80	; (adr r3, 800a080 <_ZN15Kalman_FiltresiC1Ev+0x168>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a036:	a312      	add	r3, pc, #72	; (adr r3, 800a080 <_ZN15Kalman_FiltresiC1Ev+0x168>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	e9cd 2300 	strd	r2, r3, [sp]
 800a040:	a311      	add	r3, pc, #68	; (adr r3, 800a088 <_ZN15Kalman_FiltresiC1Ev+0x170>)
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	4608      	mov	r0, r1
 800a048:	f002 fb24 	bl	800c694 <_ZN3lpfC1Eddd>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 800a052:	a30f      	add	r3, pc, #60	; (adr r3, 800a090 <_ZN15Kalman_FiltresiC1Ev+0x178>)
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a05c:	a30c      	add	r3, pc, #48	; (adr r3, 800a090 <_ZN15Kalman_FiltresiC1Ev+0x178>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	e9cd 2300 	strd	r2, r3, [sp]
 800a066:	a30c      	add	r3, pc, #48	; (adr r3, 800a098 <_ZN15Kalman_FiltresiC1Ev+0x180>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	4608      	mov	r0, r1
 800a06e:	f002 fb11 	bl	800c694 <_ZN3lpfC1Eddd>

}
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	f3af 8000 	nop.w
 800a080:	de7ea5f8 	.word	0xde7ea5f8
 800a084:	3fb2a454 	.word	0x3fb2a454
 800a088:	ab367a10 	.word	0xab367a10
 800a08c:	3feb573e 	.word	0x3feb573e
 800a090:	fc3b4f61 	.word	0xfc3b4f61
 800a094:	3fa35935 	.word	0x3fa35935
 800a098:	4f0d844d 	.word	0x4f0d844d
 800a09c:	3fed94af 	.word	0x3fed94af
 800a0a0:	358637bd 	.word	0x358637bd
 800a0a4:	3d8f5c29 	.word	0x3d8f5c29
 800a0a8:	47c35000 	.word	0x47c35000
 800a0ac:	461c4000 	.word	0x461c4000
 800a0b0:	41200000 	.word	0x41200000
 800a0b4:	4b189680 	.word	0x4b189680
 800a0b8:	40a00000 	.word	0x40a00000
 800a0bc:	42480000 	.word	0x42480000
 800a0c0:	42654ca3 	.word	0x42654ca3
 800a0c4:	3727c5ac 	.word	0x3727c5ac
 800a0c8:	47435000 	.word	0x47435000
 800a0cc:	3cdd2f1b 	.word	0x3cdd2f1b
 800a0d0:	c03f433f 	.word	0xc03f433f
 800a0d4:	4034b6a2 	.word	0x4034b6a2

0800a0d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800a0d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0dc:	b09e      	sub	sp, #120	; 0x78
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float accY = acc[1];
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a0f4:	63bb      	str	r3, [r7, #56]	; 0x38
	  float accZ = acc[2];
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0fc:	637b      	str	r3, [r7, #52]	; 0x34

	  float gyroX = gyro[0];
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a104:	633b      	str	r3, [r7, #48]	; 0x30
	  float gyroY = gyro[1];
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a10c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float gyroZ = gyro[2];
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a114:	62bb      	str	r3, [r7, #40]	; 0x28

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800a116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a118:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a11a:	f7f6 fe0b 	bl	8000d34 <__aeabi_fmul>
 800a11e:	4603      	mov	r3, r0
 800a120:	461c      	mov	r4, r3
 800a122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a124:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a126:	f7f6 fe05 	bl	8000d34 <__aeabi_fmul>
 800a12a:	4603      	mov	r3, r0
 800a12c:	4619      	mov	r1, r3
 800a12e:	4620      	mov	r0, r4
 800a130:	f7f6 fcf8 	bl	8000b24 <__addsf3>
 800a134:	4603      	mov	r3, r0
 800a136:	461c      	mov	r4, r3
 800a138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a13a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a13c:	f7f6 fdfa 	bl	8000d34 <__aeabi_fmul>
 800a140:	4603      	mov	r3, r0
 800a142:	4619      	mov	r1, r3
 800a144:	4620      	mov	r0, r4
 800a146:	f7f6 fced 	bl	8000b24 <__addsf3>
 800a14a:	4603      	mov	r3, r0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7f7 fc8f 	bl	8001a70 <_ZSt4sqrtf>
 800a152:	6278      	str	r0, [r7, #36]	; 0x24

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800a154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a156:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a158:	f7f6 fea0 	bl	8000e9c <__aeabi_fdiv>
 800a15c:	4603      	mov	r3, r0
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f7 fc48 	bl	80019f4 <_ZSt4asinf>
 800a164:	4602      	mov	r2, r0
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f7f6 fde0 	bl	8000d34 <__aeabi_fmul>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f7f6 fccf 	bl	8000b24 <__addsf3>
 800a186:	4603      	mov	r3, r0
 800a188:	461a      	mov	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800a190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a192:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a194:	f7f6 fe82 	bl	8000e9c <__aeabi_fdiv>
 800a198:	4603      	mov	r3, r0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f7 fc2a 	bl	80019f4 <_ZSt4asinf>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	f7f6 fdc2 	bl	8000d34 <__aeabi_fmul>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7f6 fcb1 	bl	8000b24 <__addsf3>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;
    //ANGLE PREDICTION
	switch(euler_angle) {
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d07e      	beq.n	800a2d0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f8>
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	f300 80be 	bgt.w	800a354 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x10a>
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d038      	beq.n	800a252 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x17a>
 800a1e0:	e0b8      	b.n	800a354 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
		case ROLL:
			angle_ekf = roll_ekf;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a1e8:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = roll_rate;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = roll_bias;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a1f6:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = roll_acc;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a1fe:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroX;
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-6;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a2f      	ldr	r2, [pc, #188]	; (800a2c4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1ec>)
 800a208:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e4;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a2e      	ldr	r2, [pc, #184]	; (800a2c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f0>)
 800a20e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			Qg = 1e1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a2d      	ldr	r2, [pc, #180]	; (800a2cc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f4>)
 800a216:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

			S11_angle = S11_roll;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21e:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_roll;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a224:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_roll;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22a:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_roll;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a230:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_roll;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a236:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_roll;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23c:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_roll;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a242:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_roll;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a248:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_roll;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a24e:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800a250:	e080      	b.n	800a354 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>

		case PITCH:
			angle_ekf = pitch_ekf;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a258:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = pitch_rate;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = pitch_bias;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a266:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = pitch_acc;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a26e:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroY;
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-6;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a13      	ldr	r2, [pc, #76]	; (800a2c4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1ec>)
 800a278:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e4;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a12      	ldr	r2, [pc, #72]	; (800a2c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f0>)
 800a27e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			Qg = 1e1;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a11      	ldr	r2, [pc, #68]	; (800a2cc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f4>)
 800a286:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

			S11_angle = S11_pitch;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_pitch;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_pitch;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_pitch;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_pitch;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_pitch;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_pitch;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b2:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_pitch;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b8:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_pitch;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800a2c0:	e048      	b.n	800a354 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800a2c2:	bf00      	nop
 800a2c4:	358637bd 	.word	0x358637bd
 800a2c8:	47435000 	.word	0x47435000
 800a2cc:	41200000 	.word	0x41200000

		case YAW:
			angle_ekf = yaw_ekf;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a2d6:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = yaw_rate;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = yaw_bias;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800a2e4:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = yaw_acc;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a2ec:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroZ;
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 5e2;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a14      	ldr	r2, [pc, #80]	; (800a348 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x270>)
 800a2f6:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e7;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a14      	ldr	r2, [pc, #80]	; (800a34c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800a2fc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			Qg = 1e1;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a13      	ldr	r2, [pc, #76]	; (800a350 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800a304:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

			S11_angle = S11_yaw;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a30c:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_yaw;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a312:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_yaw;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a318:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_yaw;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a31e:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_yaw;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a324:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_yaw;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a32a:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_yaw;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a332:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_yaw;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a33a:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_yaw;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a342:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800a344:	bf00      	nop
 800a346:	e005      	b.n	800a354 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800a348:	43fa0000 	.word	0x43fa0000
 800a34c:	4c3ebc20 	.word	0x4c3ebc20
 800a350:	41200000 	.word	0x41200000

	}


    angle_ekf = (angle_ekf) + st*(angle_rate);
 800a354:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a356:	f7f6 f85f 	bl	8000418 <__aeabi_f2d>
 800a35a:	4680      	mov	r8, r0
 800a35c:	4689      	mov	r9, r1
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800a364:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a366:	f7f6 f857 	bl	8000418 <__aeabi_f2d>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4620      	mov	r0, r4
 800a370:	4629      	mov	r1, r5
 800a372:	f7f6 f8a9 	bl	80004c8 <__aeabi_dmul>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	f7f5 feed 	bl	800015c <__adddf3>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4610      	mov	r0, r2
 800a388:	4619      	mov	r1, r3
 800a38a:	f7f6 fb75 	bl	8000a78 <__aeabi_d2f>
 800a38e:	4603      	mov	r3, r0
 800a390:	677b      	str	r3, [r7, #116]	; 0x74

    S11_angle = S11_angle + sa + S31_angle*st + (st*st*(S13_angle + S33_angle*st))/st;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a396:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f6 fbc3 	bl	8000b24 <__addsf3>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7f6 f839 	bl	8000418 <__aeabi_f2d>
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a3ac:	f7f6 f834 	bl	8000418 <__aeabi_f2d>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a3b6:	f7f6 f887 	bl	80004c8 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f5 fecb 	bl	800015c <__adddf3>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4690      	mov	r8, r2
 800a3cc:	4699      	mov	r9, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a3da:	f7f6 f875 	bl	80004c8 <__aeabi_dmul>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4692      	mov	sl, r2
 800a3e4:	469b      	mov	fp, r3
 800a3e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a3e8:	f7f6 f816 	bl	8000418 <__aeabi_f2d>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a3f2:	f7f6 f811 	bl	8000418 <__aeabi_f2d>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a3fc:	f7f6 f864 	bl	80004c8 <__aeabi_dmul>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	f7f5 fea8 	bl	800015c <__adddf3>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4650      	mov	r0, sl
 800a412:	4659      	mov	r1, fp
 800a414:	f7f6 f858 	bl	80004c8 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4610      	mov	r0, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a426:	f7f6 f979 	bl	800071c <__aeabi_ddiv>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	f7f5 fe93 	bl	800015c <__adddf3>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4610      	mov	r0, r2
 800a43c:	4619      	mov	r1, r3
 800a43e:	f7f6 fb1b 	bl	8000a78 <__aeabi_d2f>
 800a442:	4603      	mov	r3, r0
 800a444:	663b      	str	r3, [r7, #96]	; 0x60
    S12_angle = S12_angle + S32_angle*st;
 800a446:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a448:	f7f5 ffe6 	bl	8000418 <__aeabi_f2d>
 800a44c:	4604      	mov	r4, r0
 800a44e:	460d      	mov	r5, r1
 800a450:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a452:	f7f5 ffe1 	bl	8000418 <__aeabi_f2d>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a45c:	f7f6 f834 	bl	80004c8 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 fe78 	bl	800015c <__adddf3>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4610      	mov	r0, r2
 800a472:	4619      	mov	r1, r3
 800a474:	f7f6 fb00 	bl	8000a78 <__aeabi_d2f>
 800a478:	4603      	mov	r3, r0
 800a47a:	65fb      	str	r3, [r7, #92]	; 0x5c
    S13_angle = S13_angle + S33_angle*st;
 800a47c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a47e:	f7f5 ffcb 	bl	8000418 <__aeabi_f2d>
 800a482:	4604      	mov	r4, r0
 800a484:	460d      	mov	r5, r1
 800a486:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a488:	f7f5 ffc6 	bl	8000418 <__aeabi_f2d>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a492:	f7f6 f819 	bl	80004c8 <__aeabi_dmul>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f5 fe5d 	bl	800015c <__adddf3>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f7f6 fae5 	bl	8000a78 <__aeabi_d2f>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	65bb      	str	r3, [r7, #88]	; 0x58

    S21_angle = S21_angle + S23_angle*(st);
 800a4b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a4b4:	f7f5 ffb0 	bl	8000418 <__aeabi_f2d>
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a4be:	f7f5 ffab 	bl	8000418 <__aeabi_f2d>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a4c8:	f7f5 fffe 	bl	80004c8 <__aeabi_dmul>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	f7f5 fe42 	bl	800015c <__adddf3>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f7f6 faca 	bl	8000a78 <__aeabi_d2f>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	657b      	str	r3, [r7, #84]	; 0x54
    S22_angle = S22_angle + sb;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a4f2:	f7f6 fb17 	bl	8000b24 <__addsf3>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	653b      	str	r3, [r7, #80]	; 0x50
    //S23_angle = S23_angle;

    S31_angle = S31_angle + S33_angle*(st);
 800a4fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a4fc:	f7f5 ff8c 	bl	8000418 <__aeabi_f2d>
 800a500:	4604      	mov	r4, r0
 800a502:	460d      	mov	r5, r1
 800a504:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a506:	f7f5 ff87 	bl	8000418 <__aeabi_f2d>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a510:	f7f5 ffda 	bl	80004c8 <__aeabi_dmul>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4620      	mov	r0, r4
 800a51a:	4629      	mov	r1, r5
 800a51c:	f7f5 fe1e 	bl	800015c <__adddf3>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4610      	mov	r0, r2
 800a526:	4619      	mov	r1, r3
 800a528:	f7f6 faa6 	bl	8000a78 <__aeabi_d2f>
 800a52c:	4603      	mov	r3, r0
 800a52e:	64bb      	str	r3, [r7, #72]	; 0x48
    //S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a534:	4619      	mov	r1, r3
 800a536:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a538:	f7f6 faf4 	bl	8000b24 <__addsf3>
 800a53c:	4603      	mov	r3, r0
 800a53e:	643b      	str	r3, [r7, #64]	; 0x40

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f7f6 fbf0 	bl	8000d34 <__aeabi_fmul>
 800a554:	4603      	mov	r3, r0
 800a556:	461c      	mov	r4, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a55e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a560:	4618      	mov	r0, r3
 800a562:	f7f6 fbe7 	bl	8000d34 <__aeabi_fmul>
 800a566:	4603      	mov	r3, r0
 800a568:	4619      	mov	r1, r3
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7f6 fada 	bl	8000b24 <__addsf3>
 800a570:	4603      	mov	r3, r0
 800a572:	461c      	mov	r4, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a57a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7f6 fbd9 	bl	8000d34 <__aeabi_fmul>
 800a582:	4603      	mov	r3, r0
 800a584:	4619      	mov	r1, r3
 800a586:	4620      	mov	r0, r4
 800a588:	f7f6 facc 	bl	8000b24 <__addsf3>
 800a58c:	4603      	mov	r3, r0
 800a58e:	461c      	mov	r4, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a598:	4618      	mov	r0, r3
 800a59a:	f7f6 fbcb 	bl	8000d34 <__aeabi_fmul>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7f6 fabe 	bl	8000b24 <__addsf3>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	461c      	mov	r4, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a5b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7f6 fbbd 	bl	8000d34 <__aeabi_fmul>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7f6 fab0 	bl	8000b24 <__addsf3>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	461c      	mov	r4, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a5ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7f6 fbaf 	bl	8000d34 <__aeabi_fmul>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f7f6 faa2 	bl	8000b24 <__addsf3>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461c      	mov	r4, r3
 800a5e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5e6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a5e8:	f7f6 fba4 	bl	8000d34 <__aeabi_fmul>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f7f6 fa97 	bl	8000b24 <__addsf3>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	461c      	mov	r4, r3
 800a5fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a5fe:	f7f6 fb99 	bl	8000d34 <__aeabi_fmul>
 800a602:	4603      	mov	r3, r0
 800a604:	4619      	mov	r1, r3
 800a606:	4620      	mov	r0, r4
 800a608:	f7f6 fa8a 	bl	8000b20 <__aeabi_fsub>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461c      	mov	r4, r3
 800a610:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a612:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a614:	f7f6 fb8e 	bl	8000d34 <__aeabi_fmul>
 800a618:	4603      	mov	r3, r0
 800a61a:	4619      	mov	r1, r3
 800a61c:	4620      	mov	r0, r4
 800a61e:	f7f6 fa81 	bl	8000b24 <__addsf3>
 800a622:	4603      	mov	r3, r0
 800a624:	461c      	mov	r4, r3
 800a626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a628:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a62a:	f7f6 fb83 	bl	8000d34 <__aeabi_fmul>
 800a62e:	4603      	mov	r3, r0
 800a630:	4619      	mov	r1, r3
 800a632:	4620      	mov	r0, r4
 800a634:	f7f6 fa74 	bl	8000b20 <__aeabi_fsub>
 800a638:	4603      	mov	r3, r0
 800a63a:	461c      	mov	r4, r3
 800a63c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a63e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a640:	f7f6 fb78 	bl	8000d34 <__aeabi_fmul>
 800a644:	4603      	mov	r3, r0
 800a646:	4619      	mov	r1, r3
 800a648:	4620      	mov	r0, r4
 800a64a:	f7f6 fa6b 	bl	8000b24 <__addsf3>
 800a64e:	4603      	mov	r3, r0
 800a650:	461c      	mov	r4, r3
 800a652:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a654:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a656:	f7f6 fb6d 	bl	8000d34 <__aeabi_fmul>
 800a65a:	4603      	mov	r3, r0
 800a65c:	4619      	mov	r1, r3
 800a65e:	4620      	mov	r0, r4
 800a660:	f7f6 fa5e 	bl	8000b20 <__aeabi_fsub>
 800a664:	4603      	mov	r3, r0
 800a666:	461c      	mov	r4, r3
 800a668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a66a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a66c:	f7f6 fb62 	bl	8000d34 <__aeabi_fmul>
 800a670:	4603      	mov	r3, r0
 800a672:	4619      	mov	r1, r3
 800a674:	4620      	mov	r0, r4
 800a676:	f7f6 fa55 	bl	8000b24 <__addsf3>
 800a67a:	4603      	mov	r3, r0
 800a67c:	461c      	mov	r4, r3
 800a67e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a680:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a682:	f7f6 fb57 	bl	8000d34 <__aeabi_fmul>
 800a686:	4603      	mov	r3, r0
 800a688:	4619      	mov	r1, r3
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7f6 fa48 	bl	8000b20 <__aeabi_fsub>
 800a690:	4603      	mov	r3, r0
 800a692:	623b      	str	r3, [r7, #32]
    float Kt11_att = 1 - (Qa*(Qg + S22_angle + S23_angle + S32_angle + S33_angle))/A;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 4168 	ldr.w	r4, [r3, #360]	; 0x168
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a6a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7f6 fa3e 	bl	8000b24 <__addsf3>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7f6 fa39 	bl	8000b24 <__addsf3>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f6 fa34 	bl	8000b24 <__addsf3>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7f6 fa2f 	bl	8000b24 <__addsf3>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f7f6 fb32 	bl	8000d34 <__aeabi_fmul>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	6a39      	ldr	r1, [r7, #32]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7f6 fbe1 	bl	8000e9c <__aeabi_fdiv>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a6e2:	f7f6 fa1d 	bl	8000b20 <__aeabi_fsub>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	61fb      	str	r3, [r7, #28]
    float Kt12_att = (Qa*(S12_angle + S13_angle))/A;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 4168 	ldr.w	r4, [r3, #360]	; 0x168
 800a6f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a6f4:	f7f6 fa16 	bl	8000b24 <__addsf3>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7f6 fb19 	bl	8000d34 <__aeabi_fmul>
 800a702:	4603      	mov	r3, r0
 800a704:	6a39      	ldr	r1, [r7, #32]
 800a706:	4618      	mov	r0, r3
 800a708:	f7f6 fbc8 	bl	8000e9c <__aeabi_fdiv>
 800a70c:	4603      	mov	r3, r0
 800a70e:	61bb      	str	r3, [r7, #24]
    float Kt21_att = (Qg*S21_angle + S21_angle*S32_angle - S22_angle*S31_angle + S21_angle*S33_angle - S23_angle*S31_angle)/A;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a716:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f6 fb0b 	bl	8000d34 <__aeabi_fmul>
 800a71e:	4603      	mov	r3, r0
 800a720:	461c      	mov	r4, r3
 800a722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a724:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a726:	f7f6 fb05 	bl	8000d34 <__aeabi_fmul>
 800a72a:	4603      	mov	r3, r0
 800a72c:	4619      	mov	r1, r3
 800a72e:	4620      	mov	r0, r4
 800a730:	f7f6 f9f8 	bl	8000b24 <__addsf3>
 800a734:	4603      	mov	r3, r0
 800a736:	461c      	mov	r4, r3
 800a738:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a73a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a73c:	f7f6 fafa 	bl	8000d34 <__aeabi_fmul>
 800a740:	4603      	mov	r3, r0
 800a742:	4619      	mov	r1, r3
 800a744:	4620      	mov	r0, r4
 800a746:	f7f6 f9eb 	bl	8000b20 <__aeabi_fsub>
 800a74a:	4603      	mov	r3, r0
 800a74c:	461c      	mov	r4, r3
 800a74e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a750:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a752:	f7f6 faef 	bl	8000d34 <__aeabi_fmul>
 800a756:	4603      	mov	r3, r0
 800a758:	4619      	mov	r1, r3
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7f6 f9e2 	bl	8000b24 <__addsf3>
 800a760:	4603      	mov	r3, r0
 800a762:	461c      	mov	r4, r3
 800a764:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a766:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a768:	f7f6 fae4 	bl	8000d34 <__aeabi_fmul>
 800a76c:	4603      	mov	r3, r0
 800a76e:	4619      	mov	r1, r3
 800a770:	4620      	mov	r0, r4
 800a772:	f7f6 f9d5 	bl	8000b20 <__aeabi_fsub>
 800a776:	4603      	mov	r3, r0
 800a778:	6a39      	ldr	r1, [r7, #32]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f6 fb8e 	bl	8000e9c <__aeabi_fdiv>
 800a780:	4603      	mov	r3, r0
 800a782:	617b      	str	r3, [r7, #20]
    float Kt22_att = (Qa*S22_angle + Qa*S23_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle)/A;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a78a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f6 fad1 	bl	8000d34 <__aeabi_fmul>
 800a792:	4603      	mov	r3, r0
 800a794:	461c      	mov	r4, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a79c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7f6 fac8 	bl	8000d34 <__aeabi_fmul>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7f6 f9bb 	bl	8000b24 <__addsf3>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	461c      	mov	r4, r3
 800a7b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7b4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a7b6:	f7f6 fabd 	bl	8000d34 <__aeabi_fmul>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7f6 f9b0 	bl	8000b24 <__addsf3>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461c      	mov	r4, r3
 800a7c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a7cc:	f7f6 fab2 	bl	8000d34 <__aeabi_fmul>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7f6 f9a3 	bl	8000b20 <__aeabi_fsub>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	461c      	mov	r4, r3
 800a7de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a7e0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a7e2:	f7f6 faa7 	bl	8000d34 <__aeabi_fmul>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f7f6 f99a 	bl	8000b24 <__addsf3>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7f8:	f7f6 fa9c 	bl	8000d34 <__aeabi_fmul>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	4619      	mov	r1, r3
 800a800:	4620      	mov	r0, r4
 800a802:	f7f6 f98d 	bl	8000b20 <__aeabi_fsub>
 800a806:	4603      	mov	r3, r0
 800a808:	6a39      	ldr	r1, [r7, #32]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7f6 fb46 	bl	8000e9c <__aeabi_fdiv>
 800a810:	4603      	mov	r3, r0
 800a812:	613b      	str	r3, [r7, #16]
    float Kt31_att = (Qg*S31_angle - S21_angle*S32_angle + S22_angle*S31_angle - S21_angle*S33_angle + S23_angle*S31_angle)/A;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a81a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f6 fa89 	bl	8000d34 <__aeabi_fmul>
 800a822:	4603      	mov	r3, r0
 800a824:	461c      	mov	r4, r3
 800a826:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a828:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a82a:	f7f6 fa83 	bl	8000d34 <__aeabi_fmul>
 800a82e:	4603      	mov	r3, r0
 800a830:	4619      	mov	r1, r3
 800a832:	4620      	mov	r0, r4
 800a834:	f7f6 f974 	bl	8000b20 <__aeabi_fsub>
 800a838:	4603      	mov	r3, r0
 800a83a:	461c      	mov	r4, r3
 800a83c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a83e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a840:	f7f6 fa78 	bl	8000d34 <__aeabi_fmul>
 800a844:	4603      	mov	r3, r0
 800a846:	4619      	mov	r1, r3
 800a848:	4620      	mov	r0, r4
 800a84a:	f7f6 f96b 	bl	8000b24 <__addsf3>
 800a84e:	4603      	mov	r3, r0
 800a850:	461c      	mov	r4, r3
 800a852:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a854:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a856:	f7f6 fa6d 	bl	8000d34 <__aeabi_fmul>
 800a85a:	4603      	mov	r3, r0
 800a85c:	4619      	mov	r1, r3
 800a85e:	4620      	mov	r0, r4
 800a860:	f7f6 f95e 	bl	8000b20 <__aeabi_fsub>
 800a864:	4603      	mov	r3, r0
 800a866:	461c      	mov	r4, r3
 800a868:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a86a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a86c:	f7f6 fa62 	bl	8000d34 <__aeabi_fmul>
 800a870:	4603      	mov	r3, r0
 800a872:	4619      	mov	r1, r3
 800a874:	4620      	mov	r0, r4
 800a876:	f7f6 f955 	bl	8000b24 <__addsf3>
 800a87a:	4603      	mov	r3, r0
 800a87c:	6a39      	ldr	r1, [r7, #32]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7f6 fb0c 	bl	8000e9c <__aeabi_fdiv>
 800a884:	4603      	mov	r3, r0
 800a886:	60fb      	str	r3, [r7, #12]
    float Kt32_att = (Qa*S32_angle + Qa*S33_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle)/A;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a88e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a890:	4618      	mov	r0, r3
 800a892:	f7f6 fa4f 	bl	8000d34 <__aeabi_fmul>
 800a896:	4603      	mov	r3, r0
 800a898:	461c      	mov	r4, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a8a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7f6 fa46 	bl	8000d34 <__aeabi_fmul>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f7f6 f939 	bl	8000b24 <__addsf3>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	461c      	mov	r4, r3
 800a8b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8b8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a8ba:	f7f6 fa3b 	bl	8000d34 <__aeabi_fmul>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f7f6 f92e 	bl	8000b24 <__addsf3>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461c      	mov	r4, r3
 800a8cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a8ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a8d0:	f7f6 fa30 	bl	8000d34 <__aeabi_fmul>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7f6 f921 	bl	8000b20 <__aeabi_fsub>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	461c      	mov	r4, r3
 800a8e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8e4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a8e6:	f7f6 fa25 	bl	8000d34 <__aeabi_fmul>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7f6 f918 	bl	8000b24 <__addsf3>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a8fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a8fc:	f7f6 fa1a 	bl	8000d34 <__aeabi_fmul>
 800a900:	4603      	mov	r3, r0
 800a902:	4619      	mov	r1, r3
 800a904:	4620      	mov	r0, r4
 800a906:	f7f6 f90b 	bl	8000b20 <__aeabi_fsub>
 800a90a:	4603      	mov	r3, r0
 800a90c:	6a39      	ldr	r1, [r7, #32]
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f6 fac4 	bl	8000e9c <__aeabi_fdiv>
 800a914:	4603      	mov	r3, r0
 800a916:	60bb      	str	r3, [r7, #8]

    angle_ekf = (angle_ekf) + Kt11_att*((angle_acc) - (angle_ekf)) - Kt12_att*((angle_bias) - (gyro) + (angle_rate));
 800a918:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a91a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a91c:	f7f6 f900 	bl	8000b20 <__aeabi_fsub>
 800a920:	4603      	mov	r3, r0
 800a922:	69f9      	ldr	r1, [r7, #28]
 800a924:	4618      	mov	r0, r3
 800a926:	f7f6 fa05 	bl	8000d34 <__aeabi_fmul>
 800a92a:	4603      	mov	r3, r0
 800a92c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f6 f8f8 	bl	8000b24 <__addsf3>
 800a934:	4603      	mov	r3, r0
 800a936:	461c      	mov	r4, r3
 800a938:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a93a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a93c:	f7f6 f8f0 	bl	8000b20 <__aeabi_fsub>
 800a940:	4603      	mov	r3, r0
 800a942:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a944:	4618      	mov	r0, r3
 800a946:	f7f6 f8ed 	bl	8000b24 <__addsf3>
 800a94a:	4603      	mov	r3, r0
 800a94c:	69b9      	ldr	r1, [r7, #24]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f6 f9f0 	bl	8000d34 <__aeabi_fmul>
 800a954:	4603      	mov	r3, r0
 800a956:	4619      	mov	r1, r3
 800a958:	4620      	mov	r0, r4
 800a95a:	f7f6 f8e1 	bl	8000b20 <__aeabi_fsub>
 800a95e:	4603      	mov	r3, r0
 800a960:	677b      	str	r3, [r7, #116]	; 0x74


    angle_bias = (angle_bias) + Kt21_att*((angle_acc) - (angle_ekf)) - Kt22_att*((angle_bias) - (gyro) + (angle_rate));
 800a962:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a964:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a966:	f7f6 f8db 	bl	8000b20 <__aeabi_fsub>
 800a96a:	4603      	mov	r3, r0
 800a96c:	6979      	ldr	r1, [r7, #20]
 800a96e:	4618      	mov	r0, r3
 800a970:	f7f6 f9e0 	bl	8000d34 <__aeabi_fmul>
 800a974:	4603      	mov	r3, r0
 800a976:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a978:	4618      	mov	r0, r3
 800a97a:	f7f6 f8d3 	bl	8000b24 <__addsf3>
 800a97e:	4603      	mov	r3, r0
 800a980:	461c      	mov	r4, r3
 800a982:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a984:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a986:	f7f6 f8cb 	bl	8000b20 <__aeabi_fsub>
 800a98a:	4603      	mov	r3, r0
 800a98c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a98e:	4618      	mov	r0, r3
 800a990:	f7f6 f8c8 	bl	8000b24 <__addsf3>
 800a994:	4603      	mov	r3, r0
 800a996:	6939      	ldr	r1, [r7, #16]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7f6 f9cb 	bl	8000d34 <__aeabi_fmul>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f7f6 f8bc 	bl	8000b20 <__aeabi_fsub>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	66fb      	str	r3, [r7, #108]	; 0x6c


    angle_rate = (angle_rate) + Kt31_att*((angle_acc) - (angle_ekf)) - Kt32_att*((angle_bias) - (gyro) + (angle_rate));
 800a9ac:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a9ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a9b0:	f7f6 f8b6 	bl	8000b20 <__aeabi_fsub>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	68f9      	ldr	r1, [r7, #12]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7f6 f9bb 	bl	8000d34 <__aeabi_fmul>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f6 f8ae 	bl	8000b24 <__addsf3>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461c      	mov	r4, r3
 800a9cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a9ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9d0:	f7f6 f8a6 	bl	8000b20 <__aeabi_fsub>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7f6 f8a3 	bl	8000b24 <__addsf3>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	68b9      	ldr	r1, [r7, #8]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f6 f9a6 	bl	8000d34 <__aeabi_fmul>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7f6 f897 	bl	8000b20 <__aeabi_fsub>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	673b      	str	r3, [r7, #112]	; 0x70


    S11_angle = - S11_angle*(Kt11_att - 1) - Kt12_att*S21_angle - Kt12_att*S31_angle;
 800a9f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9f8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a9fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa00:	69f8      	ldr	r0, [r7, #28]
 800aa02:	f7f6 f88d 	bl	8000b20 <__aeabi_fsub>
 800aa06:	4603      	mov	r3, r0
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f7f6 f992 	bl	8000d34 <__aeabi_fmul>
 800aa10:	4603      	mov	r3, r0
 800aa12:	461c      	mov	r4, r3
 800aa14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa16:	69b8      	ldr	r0, [r7, #24]
 800aa18:	f7f6 f98c 	bl	8000d34 <__aeabi_fmul>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7f6 f87d 	bl	8000b20 <__aeabi_fsub>
 800aa26:	4603      	mov	r3, r0
 800aa28:	461c      	mov	r4, r3
 800aa2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa2c:	69b8      	ldr	r0, [r7, #24]
 800aa2e:	f7f6 f981 	bl	8000d34 <__aeabi_fmul>
 800aa32:	4603      	mov	r3, r0
 800aa34:	4619      	mov	r1, r3
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7f6 f872 	bl	8000b20 <__aeabi_fsub>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	663b      	str	r3, [r7, #96]	; 0x60


    S12_angle = - S12_angle*(Kt11_att - 1) - Kt12_att*S22_angle - Kt12_att*S32_angle;
 800aa40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa42:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aa46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa4a:	69f8      	ldr	r0, [r7, #28]
 800aa4c:	f7f6 f868 	bl	8000b20 <__aeabi_fsub>
 800aa50:	4603      	mov	r3, r0
 800aa52:	4619      	mov	r1, r3
 800aa54:	4620      	mov	r0, r4
 800aa56:	f7f6 f96d 	bl	8000d34 <__aeabi_fmul>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	461c      	mov	r4, r3
 800aa5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa60:	69b8      	ldr	r0, [r7, #24]
 800aa62:	f7f6 f967 	bl	8000d34 <__aeabi_fmul>
 800aa66:	4603      	mov	r3, r0
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f7f6 f858 	bl	8000b20 <__aeabi_fsub>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461c      	mov	r4, r3
 800aa74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa76:	69b8      	ldr	r0, [r7, #24]
 800aa78:	f7f6 f95c 	bl	8000d34 <__aeabi_fmul>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4620      	mov	r0, r4
 800aa82:	f7f6 f84d 	bl	8000b20 <__aeabi_fsub>
 800aa86:	4603      	mov	r3, r0
 800aa88:	65fb      	str	r3, [r7, #92]	; 0x5c


    S13_angle = - S13_angle*(Kt11_att - 1) - Kt12_att*S23_angle - Kt12_att*S33_angle;
 800aa8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa8c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aa90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa94:	69f8      	ldr	r0, [r7, #28]
 800aa96:	f7f6 f843 	bl	8000b20 <__aeabi_fsub>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7f6 f948 	bl	8000d34 <__aeabi_fmul>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aaaa:	69b8      	ldr	r0, [r7, #24]
 800aaac:	f7f6 f942 	bl	8000d34 <__aeabi_fmul>
 800aab0:	4603      	mov	r3, r0
 800aab2:	4619      	mov	r1, r3
 800aab4:	4620      	mov	r0, r4
 800aab6:	f7f6 f833 	bl	8000b20 <__aeabi_fsub>
 800aaba:	4603      	mov	r3, r0
 800aabc:	461c      	mov	r4, r3
 800aabe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aac0:	69b8      	ldr	r0, [r7, #24]
 800aac2:	f7f6 f937 	bl	8000d34 <__aeabi_fmul>
 800aac6:	4603      	mov	r3, r0
 800aac8:	4619      	mov	r1, r3
 800aaca:	4620      	mov	r0, r4
 800aacc:	f7f6 f828 	bl	8000b20 <__aeabi_fsub>
 800aad0:	4603      	mov	r3, r0
 800aad2:	65bb      	str	r3, [r7, #88]	; 0x58


    S21_angle = - S21_angle*(Kt22_att - 1) - Kt21_att*S11_angle - Kt22_att*S31_angle;
 800aad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aada:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aade:	6938      	ldr	r0, [r7, #16]
 800aae0:	f7f6 f81e 	bl	8000b20 <__aeabi_fsub>
 800aae4:	4603      	mov	r3, r0
 800aae6:	4619      	mov	r1, r3
 800aae8:	4620      	mov	r0, r4
 800aaea:	f7f6 f923 	bl	8000d34 <__aeabi_fmul>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	461c      	mov	r4, r3
 800aaf2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aaf4:	6978      	ldr	r0, [r7, #20]
 800aaf6:	f7f6 f91d 	bl	8000d34 <__aeabi_fmul>
 800aafa:	4603      	mov	r3, r0
 800aafc:	4619      	mov	r1, r3
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7f6 f80e 	bl	8000b20 <__aeabi_fsub>
 800ab04:	4603      	mov	r3, r0
 800ab06:	461c      	mov	r4, r3
 800ab08:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ab0a:	6938      	ldr	r0, [r7, #16]
 800ab0c:	f7f6 f912 	bl	8000d34 <__aeabi_fmul>
 800ab10:	4603      	mov	r3, r0
 800ab12:	4619      	mov	r1, r3
 800ab14:	4620      	mov	r0, r4
 800ab16:	f7f6 f803 	bl	8000b20 <__aeabi_fsub>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	657b      	str	r3, [r7, #84]	; 0x54


    S22_angle = - S22_angle*(Kt22_att - 1) - Kt21_att*S12_angle - Kt22_att*S32_angle;
 800ab1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab20:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ab24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab28:	6938      	ldr	r0, [r7, #16]
 800ab2a:	f7f5 fff9 	bl	8000b20 <__aeabi_fsub>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	4619      	mov	r1, r3
 800ab32:	4620      	mov	r0, r4
 800ab34:	f7f6 f8fe 	bl	8000d34 <__aeabi_fmul>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	461c      	mov	r4, r3
 800ab3c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ab3e:	6978      	ldr	r0, [r7, #20]
 800ab40:	f7f6 f8f8 	bl	8000d34 <__aeabi_fmul>
 800ab44:	4603      	mov	r3, r0
 800ab46:	4619      	mov	r1, r3
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f7f5 ffe9 	bl	8000b20 <__aeabi_fsub>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	461c      	mov	r4, r3
 800ab52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab54:	6938      	ldr	r0, [r7, #16]
 800ab56:	f7f6 f8ed 	bl	8000d34 <__aeabi_fmul>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7f5 ffde 	bl	8000b20 <__aeabi_fsub>
 800ab64:	4603      	mov	r3, r0
 800ab66:	653b      	str	r3, [r7, #80]	; 0x50


    S23_angle = - S23_angle*(Kt22_att - 1) - Kt21_att*S13_angle - Kt22_att*S33_angle;
 800ab68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab6a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ab6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab72:	6938      	ldr	r0, [r7, #16]
 800ab74:	f7f5 ffd4 	bl	8000b20 <__aeabi_fsub>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7f6 f8d9 	bl	8000d34 <__aeabi_fmul>
 800ab82:	4603      	mov	r3, r0
 800ab84:	461c      	mov	r4, r3
 800ab86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab88:	6978      	ldr	r0, [r7, #20]
 800ab8a:	f7f6 f8d3 	bl	8000d34 <__aeabi_fmul>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4619      	mov	r1, r3
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7f5 ffc4 	bl	8000b20 <__aeabi_fsub>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	461c      	mov	r4, r3
 800ab9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab9e:	6938      	ldr	r0, [r7, #16]
 800aba0:	f7f6 f8c8 	bl	8000d34 <__aeabi_fmul>
 800aba4:	4603      	mov	r3, r0
 800aba6:	4619      	mov	r1, r3
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7f5 ffb9 	bl	8000b20 <__aeabi_fsub>
 800abae:	4603      	mov	r3, r0
 800abb0:	64fb      	str	r3, [r7, #76]	; 0x4c


    S31_angle = - S31_angle*(Kt32_att - 1) - Kt31_att*S11_angle - Kt32_att*S21_angle;
 800abb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abb4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800abb8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800abbc:	68b8      	ldr	r0, [r7, #8]
 800abbe:	f7f5 ffaf 	bl	8000b20 <__aeabi_fsub>
 800abc2:	4603      	mov	r3, r0
 800abc4:	4619      	mov	r1, r3
 800abc6:	4620      	mov	r0, r4
 800abc8:	f7f6 f8b4 	bl	8000d34 <__aeabi_fmul>
 800abcc:	4603      	mov	r3, r0
 800abce:	461c      	mov	r4, r3
 800abd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7f6 f8ae 	bl	8000d34 <__aeabi_fmul>
 800abd8:	4603      	mov	r3, r0
 800abda:	4619      	mov	r1, r3
 800abdc:	4620      	mov	r0, r4
 800abde:	f7f5 ff9f 	bl	8000b20 <__aeabi_fsub>
 800abe2:	4603      	mov	r3, r0
 800abe4:	461c      	mov	r4, r3
 800abe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abe8:	68b8      	ldr	r0, [r7, #8]
 800abea:	f7f6 f8a3 	bl	8000d34 <__aeabi_fmul>
 800abee:	4603      	mov	r3, r0
 800abf0:	4619      	mov	r1, r3
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7f5 ff94 	bl	8000b20 <__aeabi_fsub>
 800abf8:	4603      	mov	r3, r0
 800abfa:	64bb      	str	r3, [r7, #72]	; 0x48


    S32_angle = - S32_angle*(Kt32_att - 1) - Kt31_att*S12_angle - Kt32_att*S22_angle;
 800abfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abfe:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ac02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac06:	68b8      	ldr	r0, [r7, #8]
 800ac08:	f7f5 ff8a 	bl	8000b20 <__aeabi_fsub>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4620      	mov	r0, r4
 800ac12:	f7f6 f88f 	bl	8000d34 <__aeabi_fmul>
 800ac16:	4603      	mov	r3, r0
 800ac18:	461c      	mov	r4, r3
 800ac1a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7f6 f889 	bl	8000d34 <__aeabi_fmul>
 800ac22:	4603      	mov	r3, r0
 800ac24:	4619      	mov	r1, r3
 800ac26:	4620      	mov	r0, r4
 800ac28:	f7f5 ff7a 	bl	8000b20 <__aeabi_fsub>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	461c      	mov	r4, r3
 800ac30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac32:	68b8      	ldr	r0, [r7, #8]
 800ac34:	f7f6 f87e 	bl	8000d34 <__aeabi_fmul>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7f5 ff6f 	bl	8000b20 <__aeabi_fsub>
 800ac42:	4603      	mov	r3, r0
 800ac44:	647b      	str	r3, [r7, #68]	; 0x44


    S33_angle = - S33_angle*(Kt32_att - 1) - Kt31_att*S13_angle - Kt32_att*S23_angle;
 800ac46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac48:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ac4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac50:	68b8      	ldr	r0, [r7, #8]
 800ac52:	f7f5 ff65 	bl	8000b20 <__aeabi_fsub>
 800ac56:	4603      	mov	r3, r0
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f7f6 f86a 	bl	8000d34 <__aeabi_fmul>
 800ac60:	4603      	mov	r3, r0
 800ac62:	461c      	mov	r4, r3
 800ac64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7f6 f864 	bl	8000d34 <__aeabi_fmul>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4620      	mov	r0, r4
 800ac72:	f7f5 ff55 	bl	8000b20 <__aeabi_fsub>
 800ac76:	4603      	mov	r3, r0
 800ac78:	461c      	mov	r4, r3
 800ac7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac7c:	68b8      	ldr	r0, [r7, #8]
 800ac7e:	f7f6 f859 	bl	8000d34 <__aeabi_fmul>
 800ac82:	4603      	mov	r3, r0
 800ac84:	4619      	mov	r1, r3
 800ac86:	4620      	mov	r0, r4
 800ac88:	f7f5 ff4a 	bl	8000b20 <__aeabi_fsub>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	643b      	str	r3, [r7, #64]	; 0x40

    switch(euler_angle) {
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d05d      	beq.n	800ad52 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc7a>
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	f300 8089 	bgt.w	800adae <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xbce>
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d02b      	beq.n	800acfc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc24>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 800aca4:	e083      	b.n	800adae <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 roll_ekf = angle_ekf ;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800acaa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    			 roll_rate = angle_rate;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800acb2:	60da      	str	r2, [r3, #12]
    			 roll_bias = angle_bias;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    			 roll_acc = angle_acc ;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acc0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    			 S11_roll = S11_angle;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acc8:	645a      	str	r2, [r3, #68]	; 0x44
    			 S12_roll = S12_angle;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acce:	649a      	str	r2, [r3, #72]	; 0x48
    			 S13_roll = S13_angle;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acd4:	655a      	str	r2, [r3, #84]	; 0x54
    			 S21_roll = S21_angle;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acda:	64da      	str	r2, [r3, #76]	; 0x4c
    			 S22_roll = S22_angle;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ace0:	651a      	str	r2, [r3, #80]	; 0x50
    			 S23_roll = S23_angle;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ace6:	659a      	str	r2, [r3, #88]	; 0x58
    			 S31_roll = S31_angle;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acec:	65da      	str	r2, [r3, #92]	; 0x5c
    			 S32_roll = S32_angle;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acf2:	661a      	str	r2, [r3, #96]	; 0x60
    			 S33_roll = S33_angle;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acf8:	665a      	str	r2, [r3, #100]	; 0x64
    			break;
 800acfa:	e058      	b.n	800adae <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 pitch_ekf = angle_ekf ;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad00:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    			 pitch_rate = angle_rate;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ad08:	611a      	str	r2, [r3, #16]
    			 pitch_bias = angle_bias;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    			 pitch_acc = angle_acc ;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    			 S11_pitch = S11_angle;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad1e:	619a      	str	r2, [r3, #24]
    			 S12_pitch = S12_angle;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad24:	61da      	str	r2, [r3, #28]
    			 S13_pitch = S13_angle;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad2a:	629a      	str	r2, [r3, #40]	; 0x28
    			 S21_pitch = S21_angle;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad30:	621a      	str	r2, [r3, #32]
    			 S22_pitch = S22_angle;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad36:	625a      	str	r2, [r3, #36]	; 0x24
    			 S23_pitch = S23_angle;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad3c:	62da      	str	r2, [r3, #44]	; 0x2c
    			 S31_pitch = S31_angle;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad42:	631a      	str	r2, [r3, #48]	; 0x30
    			 S32_pitch = S32_angle;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad48:	635a      	str	r2, [r3, #52]	; 0x34
    			 S33_pitch = S33_angle;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
    			break;
 800ad50:	e02d      	b.n	800adae <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 yaw_ekf = angle_ekf ;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad56:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    			 yaw_rate = angle_rate;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ad5e:	615a      	str	r2, [r3, #20]
    			 yaw_bias = angle_bias;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    			 yaw_acc = angle_acc ;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    			 S11_yaw = S11_angle;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad74:	669a      	str	r2, [r3, #104]	; 0x68
    			 S12_yaw = S12_angle;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad7a:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S13_yaw = S13_angle;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad80:	679a      	str	r2, [r3, #120]	; 0x78
    			 S21_yaw = S21_angle;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad86:	671a      	str	r2, [r3, #112]	; 0x70
    			 S22_yaw = S22_angle;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad8c:	675a      	str	r2, [r3, #116]	; 0x74
    			 S23_yaw = S23_angle;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad92:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S31_yaw = S31_angle;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			 S32_yaw = S32_angle;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ada0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S33_yaw = S33_angle;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ada8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			break;
 800adac:	bf00      	nop
}
 800adae:	bf00      	nop
 800adb0:	3778      	adds	r7, #120	; 0x78
 800adb2:	46bd      	mov	sp, r7
 800adb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800adb8 <_ZN15Kalman_Filtresi7EKF_AltEv>:

void Kalman_Filtresi::EKF_Alt() {
 800adb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adbc:	b08a      	sub	sp, #40	; 0x28
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
    float u = acc_vert;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24

    //ALT PREDICTION
	  alt_gnd = (alt_gnd) + st*(vz) + (u*(st)*st)/2;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800add0:	4618      	mov	r0, r3
 800add2:	f7f5 fb21 	bl	8000418 <__aeabi_f2d>
 800add6:	4680      	mov	r8, r0
 800add8:	4689      	mov	r9, r1
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f5 fb16 	bl	8000418 <__aeabi_f2d>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4620      	mov	r0, r4
 800adf2:	4629      	mov	r1, r5
 800adf4:	f7f5 fb68 	bl	80004c8 <__aeabi_dmul>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4640      	mov	r0, r8
 800adfe:	4649      	mov	r1, r9
 800ae00:	f7f5 f9ac 	bl	800015c <__adddf3>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4614      	mov	r4, r2
 800ae0a:	461d      	mov	r5, r3
 800ae0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae0e:	f7f5 fb03 	bl	8000418 <__aeabi_f2d>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ae18:	f7f5 fb56 	bl	80004c8 <__aeabi_dmul>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4610      	mov	r0, r2
 800ae22:	4619      	mov	r1, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ae2a:	f7f5 fb4d 	bl	80004c8 <__aeabi_dmul>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4610      	mov	r0, r2
 800ae34:	4619      	mov	r1, r3
 800ae36:	f04f 0200 	mov.w	r2, #0
 800ae3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae3e:	f7f5 fc6d 	bl	800071c <__aeabi_ddiv>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 f987 	bl	800015c <__adddf3>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4610      	mov	r0, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	f7f5 fe0f 	bl	8000a78 <__aeabi_d2f>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	  vz = (vz) + u*(st);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7f5 fad5 	bl	8000418 <__aeabi_f2d>
 800ae6e:	4604      	mov	r4, r0
 800ae70:	460d      	mov	r5, r1
 800ae72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae74:	f7f5 fad0 	bl	8000418 <__aeabi_f2d>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ae7e:	f7f5 fb23 	bl	80004c8 <__aeabi_dmul>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 f967 	bl	800015c <__adddf3>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4610      	mov	r0, r2
 800ae94:	4619      	mov	r1, r3
 800ae96:	f7f5 fdef 	bl	8000a78 <__aeabi_d2f>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	  //baro_gnd = (baro_gnd);

	  S11_alt = S11_alt + salt + S21_alt*st + (st)*(S12_alt + S22_alt*st);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f7f5 fe37 	bl	8000b24 <__addsf3>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7f5 faad 	bl	8000418 <__aeabi_f2d>
 800aebe:	4604      	mov	r4, r0
 800aec0:	460d      	mov	r5, r1
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7f5 faa5 	bl	8000418 <__aeabi_f2d>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800aed4:	f7f5 faf8 	bl	80004c8 <__aeabi_dmul>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4620      	mov	r0, r4
 800aede:	4629      	mov	r1, r5
 800aee0:	f7f5 f93c 	bl	800015c <__adddf3>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4692      	mov	sl, r2
 800aeea:	469b      	mov	fp, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7f5 fa8d 	bl	8000418 <__aeabi_f2d>
 800aefe:	4680      	mov	r8, r0
 800af00:	4689      	mov	r9, r1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af08:	4618      	mov	r0, r3
 800af0a:	f7f5 fa85 	bl	8000418 <__aeabi_f2d>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800af14:	f7f5 fad8 	bl	80004c8 <__aeabi_dmul>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4640      	mov	r0, r8
 800af1e:	4649      	mov	r1, r9
 800af20:	f7f5 f91c 	bl	800015c <__adddf3>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4620      	mov	r0, r4
 800af2a:	4629      	mov	r1, r5
 800af2c:	f7f5 facc 	bl	80004c8 <__aeabi_dmul>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4650      	mov	r0, sl
 800af36:	4659      	mov	r1, fp
 800af38:	f7f5 f910 	bl	800015c <__adddf3>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4610      	mov	r0, r2
 800af42:	4619      	mov	r1, r3
 800af44:	f7f5 fd98 	bl	8000a78 <__aeabi_d2f>
 800af48:	4602      	mov	r2, r0
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  S12_alt = S12_alt + S22_alt*st;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af56:	4618      	mov	r0, r3
 800af58:	f7f5 fa5e 	bl	8000418 <__aeabi_f2d>
 800af5c:	4604      	mov	r4, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af66:	4618      	mov	r0, r3
 800af68:	f7f5 fa56 	bl	8000418 <__aeabi_f2d>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800af72:	f7f5 faa9 	bl	80004c8 <__aeabi_dmul>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4620      	mov	r0, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	f7f5 f8ed 	bl	800015c <__adddf3>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4610      	mov	r0, r2
 800af88:	4619      	mov	r1, r3
 800af8a:	f7f5 fd75 	bl	8000a78 <__aeabi_d2f>
 800af8e:	4602      	mov	r2, r0
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	  S13_alt = S13_alt + S23_alt*st;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7f5 fa3b 	bl	8000418 <__aeabi_f2d>
 800afa2:	4604      	mov	r4, r0
 800afa4:	460d      	mov	r5, r1
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800afac:	4618      	mov	r0, r3
 800afae:	f7f5 fa33 	bl	8000418 <__aeabi_f2d>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800afb8:	f7f5 fa86 	bl	80004c8 <__aeabi_dmul>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4620      	mov	r0, r4
 800afc2:	4629      	mov	r1, r5
 800afc4:	f7f5 f8ca 	bl	800015c <__adddf3>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4610      	mov	r0, r2
 800afce:	4619      	mov	r1, r3
 800afd0:	f7f5 fd52 	bl	8000a78 <__aeabi_d2f>
 800afd4:	4602      	mov	r2, r0
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	  S21_alt = S21_alt + S22_alt*(st);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7f5 fa18 	bl	8000418 <__aeabi_f2d>
 800afe8:	4604      	mov	r4, r0
 800afea:	460d      	mov	r5, r1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f5 fa10 	bl	8000418 <__aeabi_f2d>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800affe:	f7f5 fa63 	bl	80004c8 <__aeabi_dmul>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4620      	mov	r0, r4
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 f8a7 	bl	800015c <__adddf3>
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	4610      	mov	r0, r2
 800b014:	4619      	mov	r1, r3
 800b016:	f7f5 fd2f 	bl	8000a78 <__aeabi_d2f>
 800b01a:	4602      	mov	r2, r0
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	  S22_alt =  S22_alt + svel;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7f5 fd77 	bl	8000b24 <__addsf3>
 800b036:	4603      	mov	r3, r0
 800b038:	461a      	mov	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	  //S23_alt = S23_alt;

	  S31_alt = S31_alt + S32_alt*(st);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b046:	4618      	mov	r0, r3
 800b048:	f7f5 f9e6 	bl	8000418 <__aeabi_f2d>
 800b04c:	4604      	mov	r4, r0
 800b04e:	460d      	mov	r5, r1
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b056:	4618      	mov	r0, r3
 800b058:	f7f5 f9de 	bl	8000418 <__aeabi_f2d>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b062:	f7f5 fa31 	bl	80004c8 <__aeabi_dmul>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	4620      	mov	r0, r4
 800b06c:	4629      	mov	r1, r5
 800b06e:	f7f5 f875 	bl	800015c <__adddf3>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4610      	mov	r0, r2
 800b078:	4619      	mov	r1, r3
 800b07a:	f7f5 fcfd 	bl	8000a78 <__aeabi_d2f>
 800b07e:	4602      	mov	r2, r0
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  //S32_alt = S32_alt;
	  S33_alt = S33_alt + sbar;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b092:	4619      	mov	r1, r3
 800b094:	4610      	mov	r0, r2
 800b096:	f7f5 fd45 	bl	8000b24 <__addsf3>
 800b09a:	4603      	mov	r3, r0
 800b09c:	461a      	mov	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	  float A = (Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7f5 fe3e 	bl	8000d34 <__aeabi_fmul>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	461c      	mov	r4, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f7f5 fe32 	bl	8000d34 <__aeabi_fmul>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f7f5 fd25 	bl	8000b24 <__addsf3>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	461c      	mov	r4, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	f7f5 fe21 	bl	8000d34 <__aeabi_fmul>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7f5 fd14 	bl	8000b24 <__addsf3>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	461c      	mov	r4, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7f5 fe10 	bl	8000d34 <__aeabi_fmul>
 800b114:	4603      	mov	r3, r0
 800b116:	4619      	mov	r1, r3
 800b118:	4620      	mov	r0, r4
 800b11a:	f7f5 fd03 	bl	8000b24 <__addsf3>
 800b11e:	4603      	mov	r3, r0
 800b120:	461c      	mov	r4, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7f5 fdff 	bl	8000d34 <__aeabi_fmul>
 800b136:	4603      	mov	r3, r0
 800b138:	4619      	mov	r1, r3
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7f5 fcf2 	bl	8000b24 <__addsf3>
 800b140:	4603      	mov	r3, r0
 800b142:	461c      	mov	r4, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b150:	4619      	mov	r1, r3
 800b152:	4610      	mov	r0, r2
 800b154:	f7f5 fdee 	bl	8000d34 <__aeabi_fmul>
 800b158:	4603      	mov	r3, r0
 800b15a:	4619      	mov	r1, r3
 800b15c:	4620      	mov	r0, r4
 800b15e:	f7f5 fce1 	bl	8000b24 <__addsf3>
 800b162:	4603      	mov	r3, r0
 800b164:	461c      	mov	r4, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b172:	4619      	mov	r1, r3
 800b174:	4610      	mov	r0, r2
 800b176:	f7f5 fddd 	bl	8000d34 <__aeabi_fmul>
 800b17a:	4603      	mov	r3, r0
 800b17c:	4619      	mov	r1, r3
 800b17e:	4620      	mov	r0, r4
 800b180:	f7f5 fcd0 	bl	8000b24 <__addsf3>
 800b184:	4603      	mov	r3, r0
 800b186:	461c      	mov	r4, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7f5 fdcc 	bl	8000d34 <__aeabi_fmul>
 800b19c:	4603      	mov	r3, r0
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f7f5 fcbd 	bl	8000b20 <__aeabi_fsub>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	623b      	str	r3, [r7, #32]

	  //ALT CORRECTION
	  float Kt11 = (Qs*(S11_alt + S13_alt));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 416c 	ldr.w	r4, [r3, #364]	; 0x16c
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	f7f5 fcb0 	bl	8000b24 <__addsf3>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7f5 fdb3 	bl	8000d34 <__aeabi_fmul>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	61fb      	str	r3, [r7, #28]
	  Kt11 = Kt11/A;
 800b1d2:	6a39      	ldr	r1, [r7, #32]
 800b1d4:	69f8      	ldr	r0, [r7, #28]
 800b1d6:	f7f5 fe61 	bl	8000e9c <__aeabi_fdiv>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	61fb      	str	r3, [r7, #28]
	  float Kt12 = (Qb*S11_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	f7f5 fda1 	bl	8000d34 <__aeabi_fmul>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	461c      	mov	r4, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b202:	4619      	mov	r1, r3
 800b204:	4610      	mov	r0, r2
 800b206:	f7f5 fd95 	bl	8000d34 <__aeabi_fmul>
 800b20a:	4603      	mov	r3, r0
 800b20c:	4619      	mov	r1, r3
 800b20e:	4620      	mov	r0, r4
 800b210:	f7f5 fc88 	bl	8000b24 <__addsf3>
 800b214:	4603      	mov	r3, r0
 800b216:	461c      	mov	r4, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b224:	4619      	mov	r1, r3
 800b226:	4610      	mov	r0, r2
 800b228:	f7f5 fd84 	bl	8000d34 <__aeabi_fmul>
 800b22c:	4603      	mov	r3, r0
 800b22e:	4619      	mov	r1, r3
 800b230:	4620      	mov	r0, r4
 800b232:	f7f5 fc75 	bl	8000b20 <__aeabi_fsub>
 800b236:	4603      	mov	r3, r0
 800b238:	61bb      	str	r3, [r7, #24]
	  Kt12 = Kt12/A;
 800b23a:	6a39      	ldr	r1, [r7, #32]
 800b23c:	69b8      	ldr	r0, [r7, #24]
 800b23e:	f7f5 fe2d 	bl	8000e9c <__aeabi_fdiv>
 800b242:	4603      	mov	r3, r0
 800b244:	61bb      	str	r3, [r7, #24]

	  float Kt21 = (Qs*S21_alt + Qs*S23_alt + S11_alt*S23_alt - S13_alt*S21_alt);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b252:	4619      	mov	r1, r3
 800b254:	4610      	mov	r0, r2
 800b256:	f7f5 fd6d 	bl	8000d34 <__aeabi_fmul>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461c      	mov	r4, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b26a:	4619      	mov	r1, r3
 800b26c:	4610      	mov	r0, r2
 800b26e:	f7f5 fd61 	bl	8000d34 <__aeabi_fmul>
 800b272:	4603      	mov	r3, r0
 800b274:	4619      	mov	r1, r3
 800b276:	4620      	mov	r0, r4
 800b278:	f7f5 fc54 	bl	8000b24 <__addsf3>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461c      	mov	r4, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b28c:	4619      	mov	r1, r3
 800b28e:	4610      	mov	r0, r2
 800b290:	f7f5 fd50 	bl	8000d34 <__aeabi_fmul>
 800b294:	4603      	mov	r3, r0
 800b296:	4619      	mov	r1, r3
 800b298:	4620      	mov	r0, r4
 800b29a:	f7f5 fc43 	bl	8000b24 <__addsf3>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	461c      	mov	r4, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	f7f5 fd3f 	bl	8000d34 <__aeabi_fmul>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f7f5 fc30 	bl	8000b20 <__aeabi_fsub>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	617b      	str	r3, [r7, #20]
	  Kt21 = Kt21/A;
 800b2c4:	6a39      	ldr	r1, [r7, #32]
 800b2c6:	6978      	ldr	r0, [r7, #20]
 800b2c8:	f7f5 fde8 	bl	8000e9c <__aeabi_fdiv>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	617b      	str	r3, [r7, #20]
	  float Kt22 = (Qb*S21_alt - S11_alt*S23_alt + S13_alt*S21_alt + S21_alt*S33_alt - S23_alt*S31_alt);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2dc:	4619      	mov	r1, r3
 800b2de:	4610      	mov	r0, r2
 800b2e0:	f7f5 fd28 	bl	8000d34 <__aeabi_fmul>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	461c      	mov	r4, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	f7f5 fd1c 	bl	8000d34 <__aeabi_fmul>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	4619      	mov	r1, r3
 800b300:	4620      	mov	r0, r4
 800b302:	f7f5 fc0d 	bl	8000b20 <__aeabi_fsub>
 800b306:	4603      	mov	r3, r0
 800b308:	461c      	mov	r4, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f7f5 fd0b 	bl	8000d34 <__aeabi_fmul>
 800b31e:	4603      	mov	r3, r0
 800b320:	4619      	mov	r1, r3
 800b322:	4620      	mov	r0, r4
 800b324:	f7f5 fbfe 	bl	8000b24 <__addsf3>
 800b328:	4603      	mov	r3, r0
 800b32a:	461c      	mov	r4, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b338:	4619      	mov	r1, r3
 800b33a:	4610      	mov	r0, r2
 800b33c:	f7f5 fcfa 	bl	8000d34 <__aeabi_fmul>
 800b340:	4603      	mov	r3, r0
 800b342:	4619      	mov	r1, r3
 800b344:	4620      	mov	r0, r4
 800b346:	f7f5 fbed 	bl	8000b24 <__addsf3>
 800b34a:	4603      	mov	r3, r0
 800b34c:	461c      	mov	r4, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b35a:	4619      	mov	r1, r3
 800b35c:	4610      	mov	r0, r2
 800b35e:	f7f5 fce9 	bl	8000d34 <__aeabi_fmul>
 800b362:	4603      	mov	r3, r0
 800b364:	4619      	mov	r1, r3
 800b366:	4620      	mov	r0, r4
 800b368:	f7f5 fbda 	bl	8000b20 <__aeabi_fsub>
 800b36c:	4603      	mov	r3, r0
 800b36e:	613b      	str	r3, [r7, #16]
	  Kt22 = Kt22/A;
 800b370:	6a39      	ldr	r1, [r7, #32]
 800b372:	6938      	ldr	r0, [r7, #16]
 800b374:	f7f5 fd92 	bl	8000e9c <__aeabi_fdiv>
 800b378:	4603      	mov	r3, r0
 800b37a:	613b      	str	r3, [r7, #16]

	  float Kt31 = (Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f7f5 fcd2 	bl	8000d34 <__aeabi_fmul>
 800b390:	4603      	mov	r3, r0
 800b392:	461c      	mov	r4, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	f7f5 fcc6 	bl	8000d34 <__aeabi_fmul>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7f5 fbb9 	bl	8000b24 <__addsf3>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	461c      	mov	r4, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f7f5 fcb5 	bl	8000d34 <__aeabi_fmul>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7f5 fba8 	bl	8000b24 <__addsf3>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461c      	mov	r4, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	f7f5 fca4 	bl	8000d34 <__aeabi_fmul>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f7f5 fb95 	bl	8000b20 <__aeabi_fsub>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	60fb      	str	r3, [r7, #12]
	  Kt31 = Kt31/A;
 800b3fa:	6a39      	ldr	r1, [r7, #32]
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f7f5 fd4d 	bl	8000e9c <__aeabi_fdiv>
 800b402:	4603      	mov	r3, r0
 800b404:	60fb      	str	r3, [r7, #12]
	  float Kt32 = (Qb*S31_alt - S11_alt*S33_alt + S13_alt*S31_alt);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b412:	4619      	mov	r1, r3
 800b414:	4610      	mov	r0, r2
 800b416:	f7f5 fc8d 	bl	8000d34 <__aeabi_fmul>
 800b41a:	4603      	mov	r3, r0
 800b41c:	461c      	mov	r4, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	f7f5 fc81 	bl	8000d34 <__aeabi_fmul>
 800b432:	4603      	mov	r3, r0
 800b434:	4619      	mov	r1, r3
 800b436:	4620      	mov	r0, r4
 800b438:	f7f5 fb72 	bl	8000b20 <__aeabi_fsub>
 800b43c:	4603      	mov	r3, r0
 800b43e:	461c      	mov	r4, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b44c:	4619      	mov	r1, r3
 800b44e:	4610      	mov	r0, r2
 800b450:	f7f5 fc70 	bl	8000d34 <__aeabi_fmul>
 800b454:	4603      	mov	r3, r0
 800b456:	4619      	mov	r1, r3
 800b458:	4620      	mov	r0, r4
 800b45a:	f7f5 fb63 	bl	8000b24 <__addsf3>
 800b45e:	4603      	mov	r3, r0
 800b460:	60bb      	str	r3, [r7, #8]
	  Kt32 = Kt32/A;
 800b462:	6a39      	ldr	r1, [r7, #32]
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	f7f5 fd19 	bl	8000e9c <__aeabi_fdiv>
 800b46a:	4603      	mov	r3, r0
 800b46c:	60bb      	str	r3, [r7, #8]

	  alt_gnd = (alt_gnd) - Kt12*((alt_gnd) - (sonar_alt)) - Kt11*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 417c 	ldr.w	r4, [r3, #380]	; 0x17c
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b480:	4619      	mov	r1, r3
 800b482:	4610      	mov	r0, r2
 800b484:	f7f5 fb4c 	bl	8000b20 <__aeabi_fsub>
 800b488:	4603      	mov	r3, r0
 800b48a:	69b9      	ldr	r1, [r7, #24]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7f5 fc51 	bl	8000d34 <__aeabi_fmul>
 800b492:	4603      	mov	r3, r0
 800b494:	4619      	mov	r1, r3
 800b496:	4620      	mov	r0, r4
 800b498:	f7f5 fb42 	bl	8000b20 <__aeabi_fsub>
 800b49c:	4603      	mov	r3, r0
 800b49e:	461c      	mov	r4, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	f7f5 fb36 	bl	8000b20 <__aeabi_fsub>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f7f5 fb2f 	bl	8000b24 <__addsf3>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	69f9      	ldr	r1, [r7, #28]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f5 fc32 	bl	8000d34 <__aeabi_fmul>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7f5 fb23 	bl	8000b20 <__aeabi_fsub>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	461a      	mov	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c


	  vz = (vz) - Kt22*((alt_gnd) - (sonar_alt)) - Kt21*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	f7f5 fb11 	bl	8000b20 <__aeabi_fsub>
 800b4fe:	4603      	mov	r3, r0
 800b500:	6939      	ldr	r1, [r7, #16]
 800b502:	4618      	mov	r0, r3
 800b504:	f7f5 fc16 	bl	8000d34 <__aeabi_fmul>
 800b508:	4603      	mov	r3, r0
 800b50a:	4619      	mov	r1, r3
 800b50c:	4620      	mov	r0, r4
 800b50e:	f7f5 fb07 	bl	8000b20 <__aeabi_fsub>
 800b512:	4603      	mov	r3, r0
 800b514:	461c      	mov	r4, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b522:	4619      	mov	r1, r3
 800b524:	4610      	mov	r0, r2
 800b526:	f7f5 fafb 	bl	8000b20 <__aeabi_fsub>
 800b52a:	4603      	mov	r3, r0
 800b52c:	461a      	mov	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b534:	4619      	mov	r1, r3
 800b536:	4610      	mov	r0, r2
 800b538:	f7f5 faf4 	bl	8000b24 <__addsf3>
 800b53c:	4603      	mov	r3, r0
 800b53e:	6979      	ldr	r1, [r7, #20]
 800b540:	4618      	mov	r0, r3
 800b542:	f7f5 fbf7 	bl	8000d34 <__aeabi_fmul>
 800b546:	4603      	mov	r3, r0
 800b548:	4619      	mov	r1, r3
 800b54a:	4620      	mov	r0, r4
 800b54c:	f7f5 fae8 	bl	8000b20 <__aeabi_fsub>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180


	  baro_gnd = (baro_gnd) - Kt32*((alt_gnd) - (sonar_alt)) - Kt31*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 418c 	ldr.w	r4, [r3, #396]	; 0x18c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b56c:	4619      	mov	r1, r3
 800b56e:	4610      	mov	r0, r2
 800b570:	f7f5 fad6 	bl	8000b20 <__aeabi_fsub>
 800b574:	4603      	mov	r3, r0
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7f5 fbdb 	bl	8000d34 <__aeabi_fmul>
 800b57e:	4603      	mov	r3, r0
 800b580:	4619      	mov	r1, r3
 800b582:	4620      	mov	r0, r4
 800b584:	f7f5 facc 	bl	8000b20 <__aeabi_fsub>
 800b588:	4603      	mov	r3, r0
 800b58a:	461c      	mov	r4, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f7f5 fac0 	bl	8000b20 <__aeabi_fsub>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	f7f5 fab9 	bl	8000b24 <__addsf3>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	68f9      	ldr	r1, [r7, #12]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7f5 fbbc 	bl	8000d34 <__aeabi_fmul>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f7f5 faad 	bl	8000b20 <__aeabi_fsub>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c


	  S11_alt =  - S11_alt*(Kt11 + Kt12 - 1) - Kt11*S31_alt;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5d6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b5da:	69b9      	ldr	r1, [r7, #24]
 800b5dc:	69f8      	ldr	r0, [r7, #28]
 800b5de:	f7f5 faa1 	bl	8000b24 <__addsf3>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f5 fa99 	bl	8000b20 <__aeabi_fsub>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7f5 fb9e 	bl	8000d34 <__aeabi_fmul>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461c      	mov	r4, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b602:	69f9      	ldr	r1, [r7, #28]
 800b604:	4618      	mov	r0, r3
 800b606:	f7f5 fb95 	bl	8000d34 <__aeabi_fmul>
 800b60a:	4603      	mov	r3, r0
 800b60c:	4619      	mov	r1, r3
 800b60e:	4620      	mov	r0, r4
 800b610:	f7f5 fa86 	bl	8000b20 <__aeabi_fsub>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


	  S12_alt = - S12_alt*(Kt11 + Kt12 - 1) - Kt11*S32_alt;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b624:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b628:	69b9      	ldr	r1, [r7, #24]
 800b62a:	69f8      	ldr	r0, [r7, #28]
 800b62c:	f7f5 fa7a 	bl	8000b24 <__addsf3>
 800b630:	4603      	mov	r3, r0
 800b632:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b636:	4618      	mov	r0, r3
 800b638:	f7f5 fa72 	bl	8000b20 <__aeabi_fsub>
 800b63c:	4603      	mov	r3, r0
 800b63e:	4619      	mov	r1, r3
 800b640:	4620      	mov	r0, r4
 800b642:	f7f5 fb77 	bl	8000d34 <__aeabi_fmul>
 800b646:	4603      	mov	r3, r0
 800b648:	461c      	mov	r4, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b650:	69f9      	ldr	r1, [r7, #28]
 800b652:	4618      	mov	r0, r3
 800b654:	f7f5 fb6e 	bl	8000d34 <__aeabi_fmul>
 800b658:	4603      	mov	r3, r0
 800b65a:	4619      	mov	r1, r3
 800b65c:	4620      	mov	r0, r4
 800b65e:	f7f5 fa5f 	bl	8000b20 <__aeabi_fsub>
 800b662:	4603      	mov	r3, r0
 800b664:	461a      	mov	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


	  S13_alt = - S13_alt*(Kt11 + Kt12 - 1) - Kt11*S33_alt;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b672:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b676:	69b9      	ldr	r1, [r7, #24]
 800b678:	69f8      	ldr	r0, [r7, #28]
 800b67a:	f7f5 fa53 	bl	8000b24 <__addsf3>
 800b67e:	4603      	mov	r3, r0
 800b680:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b684:	4618      	mov	r0, r3
 800b686:	f7f5 fa4b 	bl	8000b20 <__aeabi_fsub>
 800b68a:	4603      	mov	r3, r0
 800b68c:	4619      	mov	r1, r3
 800b68e:	4620      	mov	r0, r4
 800b690:	f7f5 fb50 	bl	8000d34 <__aeabi_fmul>
 800b694:	4603      	mov	r3, r0
 800b696:	461c      	mov	r4, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b69e:	69f9      	ldr	r1, [r7, #28]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f5 fb47 	bl	8000d34 <__aeabi_fmul>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f7f5 fa38 	bl	8000b20 <__aeabi_fsub>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c


	  S21_alt =  S21_alt - S11_alt*(Kt21 + Kt22) - Kt21*S31_alt;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800b6c6:	6939      	ldr	r1, [r7, #16]
 800b6c8:	6978      	ldr	r0, [r7, #20]
 800b6ca:	f7f5 fa2b 	bl	8000b24 <__addsf3>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f7f5 fb2e 	bl	8000d34 <__aeabi_fmul>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f7f5 fa1f 	bl	8000b20 <__aeabi_fsub>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	461c      	mov	r4, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b6ec:	6979      	ldr	r1, [r7, #20]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7f5 fb20 	bl	8000d34 <__aeabi_fmul>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f7f5 fa11 	bl	8000b20 <__aeabi_fsub>
 800b6fe:	4603      	mov	r3, r0
 800b700:	461a      	mov	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94


	  S22_alt =  S22_alt - S12_alt*(Kt21 + Kt22) - Kt21*S32_alt;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 800b714:	6939      	ldr	r1, [r7, #16]
 800b716:	6978      	ldr	r0, [r7, #20]
 800b718:	f7f5 fa04 	bl	8000b24 <__addsf3>
 800b71c:	4603      	mov	r3, r0
 800b71e:	4619      	mov	r1, r3
 800b720:	4628      	mov	r0, r5
 800b722:	f7f5 fb07 	bl	8000d34 <__aeabi_fmul>
 800b726:	4603      	mov	r3, r0
 800b728:	4619      	mov	r1, r3
 800b72a:	4620      	mov	r0, r4
 800b72c:	f7f5 f9f8 	bl	8000b20 <__aeabi_fsub>
 800b730:	4603      	mov	r3, r0
 800b732:	461c      	mov	r4, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b73a:	6979      	ldr	r1, [r7, #20]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7f5 faf9 	bl	8000d34 <__aeabi_fmul>
 800b742:	4603      	mov	r3, r0
 800b744:	4619      	mov	r1, r3
 800b746:	4620      	mov	r0, r4
 800b748:	f7f5 f9ea 	bl	8000b20 <__aeabi_fsub>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98


	  S23_alt =  S23_alt - S13_alt*(Kt21 + Kt22) - Kt21*S33_alt;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800b762:	6939      	ldr	r1, [r7, #16]
 800b764:	6978      	ldr	r0, [r7, #20]
 800b766:	f7f5 f9dd 	bl	8000b24 <__addsf3>
 800b76a:	4603      	mov	r3, r0
 800b76c:	4619      	mov	r1, r3
 800b76e:	4628      	mov	r0, r5
 800b770:	f7f5 fae0 	bl	8000d34 <__aeabi_fmul>
 800b774:	4603      	mov	r3, r0
 800b776:	4619      	mov	r1, r3
 800b778:	4620      	mov	r0, r4
 800b77a:	f7f5 f9d1 	bl	8000b20 <__aeabi_fsub>
 800b77e:	4603      	mov	r3, r0
 800b780:	461c      	mov	r4, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b788:	6979      	ldr	r1, [r7, #20]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f5 fad2 	bl	8000d34 <__aeabi_fmul>
 800b790:	4603      	mov	r3, r0
 800b792:	4619      	mov	r1, r3
 800b794:	4620      	mov	r0, r4
 800b796:	f7f5 f9c3 	bl	8000b20 <__aeabi_fsub>
 800b79a:	4603      	mov	r3, r0
 800b79c:	461a      	mov	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0


	  S31_alt = - S31_alt*(Kt31 - 1) - S11_alt*(Kt31 + Kt32);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7aa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b7ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7f5 f9b4 	bl	8000b20 <__aeabi_fsub>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f7f5 fab9 	bl	8000d34 <__aeabi_fmul>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	461d      	mov	r5, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800b7cc:	68b9      	ldr	r1, [r7, #8]
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f7f5 f9a8 	bl	8000b24 <__addsf3>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f7f5 faab 	bl	8000d34 <__aeabi_fmul>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f7f5 f99c 	bl	8000b20 <__aeabi_fsub>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


	  S32_alt = - S32_alt*(Kt31 - 1) - S12_alt*(Kt31 + Kt32);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b7f8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b7fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7f5 f98d 	bl	8000b20 <__aeabi_fsub>
 800b806:	4603      	mov	r3, r0
 800b808:	4619      	mov	r1, r3
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7f5 fa92 	bl	8000d34 <__aeabi_fmul>
 800b810:	4603      	mov	r3, r0
 800b812:	461d      	mov	r5, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 800b81a:	68b9      	ldr	r1, [r7, #8]
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f7f5 f981 	bl	8000b24 <__addsf3>
 800b822:	4603      	mov	r3, r0
 800b824:	4619      	mov	r1, r3
 800b826:	4620      	mov	r0, r4
 800b828:	f7f5 fa84 	bl	8000d34 <__aeabi_fmul>
 800b82c:	4603      	mov	r3, r0
 800b82e:	4619      	mov	r1, r3
 800b830:	4628      	mov	r0, r5
 800b832:	f7f5 f975 	bl	8000b20 <__aeabi_fsub>
 800b836:	4603      	mov	r3, r0
 800b838:	461a      	mov	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8


	  S33_alt = - S33_alt*(Kt31 - 1) - S13_alt*(Kt31 + Kt32);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b846:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b84a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f7f5 f966 	bl	8000b20 <__aeabi_fsub>
 800b854:	4603      	mov	r3, r0
 800b856:	4619      	mov	r1, r3
 800b858:	4620      	mov	r0, r4
 800b85a:	f7f5 fa6b 	bl	8000d34 <__aeabi_fmul>
 800b85e:	4603      	mov	r3, r0
 800b860:	461d      	mov	r5, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7f5 f95a 	bl	8000b24 <__addsf3>
 800b870:	4603      	mov	r3, r0
 800b872:	4619      	mov	r1, r3
 800b874:	4620      	mov	r0, r4
 800b876:	f7f5 fa5d 	bl	8000d34 <__aeabi_fmul>
 800b87a:	4603      	mov	r3, r0
 800b87c:	4619      	mov	r1, r3
 800b87e:	4628      	mov	r0, r5
 800b880:	f7f5 f94e 	bl	8000b20 <__aeabi_fsub>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800b88e:	bf00      	nop
 800b890:	3728      	adds	r7, #40	; 0x28
 800b892:	46bd      	mov	sp, r7
 800b894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b898 <_ZN15Kalman_Filtresi7EKF_CamEv>:

void Kalman_Filtresi::EKF_Cam() {
 800b898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
	  //X Position Estimation
	  //camx = cam_filt.Run(camx);
	  xpos = (xpos) + st*(vx) + (accXm*st*st)/2;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7f4 fdb5 	bl	8000418 <__aeabi_f2d>
 800b8ae:	4680      	mov	r8, r0
 800b8b0:	4689      	mov	r9, r1
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7f4 fdaa 	bl	8000418 <__aeabi_f2d>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f7f4 fdfc 	bl	80004c8 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4640      	mov	r0, r8
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	f7f4 fc40 	bl	800015c <__adddf3>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4614      	mov	r4, r2
 800b8e2:	461d      	mov	r5, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7f4 fd94 	bl	8000418 <__aeabi_f2d>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b8f6:	f7f4 fde7 	bl	80004c8 <__aeabi_dmul>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4610      	mov	r0, r2
 800b900:	4619      	mov	r1, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b908:	f7f4 fdde 	bl	80004c8 <__aeabi_dmul>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	4610      	mov	r0, r2
 800b912:	4619      	mov	r1, r3
 800b914:	f04f 0200 	mov.w	r2, #0
 800b918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b91c:	f7f4 fefe 	bl	800071c <__aeabi_ddiv>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4620      	mov	r0, r4
 800b926:	4629      	mov	r1, r5
 800b928:	f7f4 fc18 	bl	800015c <__adddf3>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4610      	mov	r0, r2
 800b932:	4619      	mov	r1, r3
 800b934:	f7f5 f8a0 	bl	8000a78 <__aeabi_d2f>
 800b938:	4602      	mov	r2, r0
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	  vx = (vx) + accXm*(st);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b946:	4618      	mov	r0, r3
 800b948:	f7f4 fd66 	bl	8000418 <__aeabi_f2d>
 800b94c:	4604      	mov	r4, r0
 800b94e:	460d      	mov	r5, r1
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b956:	4618      	mov	r0, r3
 800b958:	f7f4 fd5e 	bl	8000418 <__aeabi_f2d>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b962:	f7f4 fdb1 	bl	80004c8 <__aeabi_dmul>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4620      	mov	r0, r4
 800b96c:	4629      	mov	r1, r5
 800b96e:	f7f4 fbf5 	bl	800015c <__adddf3>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	4610      	mov	r0, r2
 800b978:	4619      	mov	r1, r3
 800b97a:	f7f5 f87d 	bl	8000a78 <__aeabi_d2f>
 800b97e:	4602      	mov	r2, r0
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	  S11_x = S11_x + spx + S21_x*st + (st*st*(S12_x + S22_x*st))/st;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b992:	4619      	mov	r1, r3
 800b994:	4610      	mov	r0, r2
 800b996:	f7f5 f8c5 	bl	8000b24 <__addsf3>
 800b99a:	4603      	mov	r3, r0
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7f4 fd3b 	bl	8000418 <__aeabi_f2d>
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7f4 fd33 	bl	8000418 <__aeabi_f2d>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b9b8:	f7f4 fd86 	bl	80004c8 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	4629      	mov	r1, r5
 800b9c4:	f7f4 fbca 	bl	800015c <__adddf3>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4690      	mov	r8, r2
 800b9ce:	4699      	mov	r9, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b9dc:	f7f4 fd74 	bl	80004c8 <__aeabi_dmul>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4692      	mov	sl, r2
 800b9e6:	469b      	mov	fp, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f4 fd12 	bl	8000418 <__aeabi_f2d>
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7f4 fd0a 	bl	8000418 <__aeabi_f2d>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ba0a:	f7f4 fd5d 	bl	80004c8 <__aeabi_dmul>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4620      	mov	r0, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	f7f4 fba1 	bl	800015c <__adddf3>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4650      	mov	r0, sl
 800ba20:	4659      	mov	r1, fp
 800ba22:	f7f4 fd51 	bl	80004c8 <__aeabi_dmul>
 800ba26:	4602      	mov	r2, r0
 800ba28:	460b      	mov	r3, r1
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ba34:	f7f4 fe72 	bl	800071c <__aeabi_ddiv>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f4 fb8c 	bl	800015c <__adddf3>
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	f7f5 f814 	bl	8000a78 <__aeabi_d2f>
 800ba50:	4602      	mov	r2, r0
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  S12_x = S12_x + S22_x*st;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f4 fcda 	bl	8000418 <__aeabi_f2d>
 800ba64:	4604      	mov	r4, r0
 800ba66:	460d      	mov	r5, r1
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7f4 fcd2 	bl	8000418 <__aeabi_f2d>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ba7a:	f7f4 fd25 	bl	80004c8 <__aeabi_dmul>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4620      	mov	r0, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7f4 fb69 	bl	800015c <__adddf3>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4610      	mov	r0, r2
 800ba90:	4619      	mov	r1, r3
 800ba92:	f7f4 fff1 	bl	8000a78 <__aeabi_d2f>
 800ba96:	4602      	mov	r2, r0
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  S21_x = S21_x + svx + S22_x*(st);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f7f5 f839 	bl	8000b24 <__addsf3>
 800bab2:	4603      	mov	r3, r0
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7f4 fcaf 	bl	8000418 <__aeabi_f2d>
 800baba:	4604      	mov	r4, r0
 800babc:	460d      	mov	r5, r1
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7f4 fca7 	bl	8000418 <__aeabi_f2d>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800bad0:	f7f4 fcfa 	bl	80004c8 <__aeabi_dmul>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4620      	mov	r0, r4
 800bada:	4629      	mov	r1, r5
 800badc:	f7f4 fb3e 	bl	800015c <__adddf3>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	4610      	mov	r0, r2
 800bae6:	4619      	mov	r1, r3
 800bae8:	f7f4 ffc6 	bl	8000a78 <__aeabi_d2f>
 800baec:	4602      	mov	r2, r0
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  //S22_x = S22_x;


	  //X Position Correction
	  float Kt11 = S11_x/(Qc + S11_x);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7f5 f80b 	bl	8000b24 <__addsf3>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4619      	mov	r1, r3
 800bb12:	4620      	mov	r0, r4
 800bb14:	f7f5 f9c2 	bl	8000e9c <__aeabi_fdiv>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	60fb      	str	r3, [r7, #12]
	  float Kt21 = S21_x/(Qc + S11_x);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4610      	mov	r0, r2
 800bb32:	f7f4 fff7 	bl	8000b24 <__addsf3>
 800bb36:	4603      	mov	r3, r0
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f7f5 f9ae 	bl	8000e9c <__aeabi_fdiv>
 800bb40:	4603      	mov	r3, r0
 800bb42:	60bb      	str	r3, [r7, #8]



	  xpos = (xpos) + (Kt11)*(camx - (xpos));
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 419c 	ldr.w	r4, [r3, #412]	; 0x19c
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800bb56:	4619      	mov	r1, r3
 800bb58:	4610      	mov	r0, r2
 800bb5a:	f7f4 ffe1 	bl	8000b20 <__aeabi_fsub>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	68f9      	ldr	r1, [r7, #12]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7f5 f8e6 	bl	8000d34 <__aeabi_fmul>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f7f4 ffd9 	bl	8000b24 <__addsf3>
 800bb72:	4603      	mov	r3, r0
 800bb74:	461a      	mov	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

	  vx = (vx) + (Kt21)*(camx - (xpos));
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f7f4 ffc5 	bl	8000b20 <__aeabi_fsub>
 800bb96:	4603      	mov	r3, r0
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f5 f8ca 	bl	8000d34 <__aeabi_fmul>
 800bba0:	4603      	mov	r3, r0
 800bba2:	4619      	mov	r1, r3
 800bba4:	4620      	mov	r0, r4
 800bba6:	f7f4 ffbd 	bl	8000b24 <__addsf3>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	461a      	mov	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0


	  S11_x = -S11_x*((Kt11) - 1);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbba:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bbbe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f7f4 ffac 	bl	8000b20 <__aeabi_fsub>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f7f5 f8b1 	bl	8000d34 <__aeabi_fmul>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	  S12_x = -S12_x*((Kt11) - 1);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbe2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bbe6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7f4 ff98 	bl	8000b20 <__aeabi_fsub>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f7f5 f89d 	bl	8000d34 <__aeabi_fmul>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	  S21_x = S21_x - S11_x*(Kt21);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc10:	68b9      	ldr	r1, [r7, #8]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f5 f88e 	bl	8000d34 <__aeabi_fmul>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f7f4 ff7f 	bl	8000b20 <__aeabi_fsub>
 800bc22:	4603      	mov	r3, r0
 800bc24:	461a      	mov	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  S22_x = S22_x - S12_x*(Kt21);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc38:	68b9      	ldr	r1, [r7, #8]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7f5 f87a 	bl	8000d34 <__aeabi_fmul>
 800bc40:	4603      	mov	r3, r0
 800bc42:	4619      	mov	r1, r3
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7f4 ff6b 	bl	8000b20 <__aeabi_fsub>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc


}
 800bc54:	bf00      	nop
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800bc60 <_ZN15Kalman_Filtresi3RunEv>:
void Kalman_Filtresi::Run() {
 800bc60:	b590      	push	{r4, r7, lr}
 800bc62:	b08d      	sub	sp, #52	; 0x34
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]



  float A;
  float accX = acc[0];
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bc6e:	62bb      	str	r3, [r7, #40]	; 0x28
  float accY = acc[1];
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
  float accZ = acc[2];
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bc7e:	623b      	str	r3, [r7, #32]

  float gyroX = gyro[0];
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bc86:	61fb      	str	r3, [r7, #28]
  float gyroY = gyro[1];
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800bc8e:	61bb      	str	r3, [r7, #24]
  float gyroZ = gyro[2];
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bc96:	617b      	str	r3, [r7, #20]
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d012      	beq.n	800bcc8 <_ZN15Kalman_Filtresi3RunEv+0x68>
  	//float alpha = 0.998;
  	//float alpha = 0.998;
    //pitch_comp=(pitch_gyro+pitch_eski)*alpha+pitch_acc*(1-alpha);	//Tümleyen filtre
    //roll_comp =(roll_gyro+roll_eski)*alpha+roll_acc*(1-alpha);		//Tümleyen filtre

    EKF_Attitude(ROLL);
 800bca2:	2100      	movs	r1, #0
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7fe fa17 	bl	800a0d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 800bcaa:	2101      	movs	r1, #1
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7fe fa13 	bl	800a0d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 800bcb2:	2102      	movs	r1, #2
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7fe fa0f 	bl	800a0d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>

    EKF_Alt();
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7ff f87c 	bl	800adb8 <_ZN15Kalman_Filtresi7EKF_AltEv>

    EKF_Cam();
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7ff fde9 	bl	800b898 <_ZN15Kalman_Filtresi7EKF_CamEv>
 800bcc6:	e084      	b.n	800bdd2 <_ZN15Kalman_Filtresi3RunEv+0x172>
    }


    else {

    	for(int i=0; i<2000; i++) {
 800bcc8:	2300      	movs	r3, #0
 800bcca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bcd2:	da5e      	bge.n	800bd92 <_ZN15Kalman_Filtresi3RunEv+0x132>
    		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800bcd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd8:	f7f5 f82c 	bl	8000d34 <__aeabi_fmul>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461c      	mov	r4, r3
 800bce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bce4:	f7f5 f826 	bl	8000d34 <__aeabi_fmul>
 800bce8:	4603      	mov	r3, r0
 800bcea:	4619      	mov	r1, r3
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7f4 ff19 	bl	8000b24 <__addsf3>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	461c      	mov	r4, r3
 800bcf6:	6a39      	ldr	r1, [r7, #32]
 800bcf8:	6a38      	ldr	r0, [r7, #32]
 800bcfa:	f7f5 f81b 	bl	8000d34 <__aeabi_fmul>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	4619      	mov	r1, r3
 800bd02:	4620      	mov	r0, r4
 800bd04:	f7f4 ff0e 	bl	8000b24 <__addsf3>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7f5 feb0 	bl	8001a70 <_ZSt4sqrtf>
 800bd10:	6138      	str	r0, [r7, #16]

    		  float pitch_acc =  asin(accX/acctop)*rad2deg;
 800bd12:	6939      	ldr	r1, [r7, #16]
 800bd14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd16:	f7f5 f8c1 	bl	8000e9c <__aeabi_fdiv>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7f5 fe69 	bl	80019f4 <_ZSt4asinf>
 800bd22:	4602      	mov	r2, r0
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f7f5 f801 	bl	8000d34 <__aeabi_fmul>
 800bd32:	4603      	mov	r3, r0
 800bd34:	60fb      	str	r3, [r7, #12]
    		  float roll_acc  =  asin(accY/acctop)*rad2deg ;
 800bd36:	6939      	ldr	r1, [r7, #16]
 800bd38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd3a:	f7f5 f8af 	bl	8000e9c <__aeabi_fdiv>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7f5 fe57 	bl	80019f4 <_ZSt4asinf>
 800bd46:	4602      	mov	r2, r0
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f7f4 ffef 	bl	8000d34 <__aeabi_fmul>
 800bd56:	4603      	mov	r3, r0
 800bd58:	60bb      	str	r3, [r7, #8]

        	ROLL_OFFSET += roll_acc;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800bd60:	68b9      	ldr	r1, [r7, #8]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7f4 fede 	bl	8000b24 <__addsf3>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        	PITCH_OFFSET += pitch_acc;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800bd78:	68f9      	ldr	r1, [r7, #12]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7f4 fed2 	bl	8000b24 <__addsf3>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    	for(int i=0; i<2000; i++) {
 800bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd90:	e79c      	b.n	800bccc <_ZN15Kalman_Filtresi3RunEv+0x6c>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800bd98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd9c:	4929      	ldr	r1, [pc, #164]	; (800be44 <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7f5 f87c 	bl	8000e9c <__aeabi_fdiv>
 800bda4:	4603      	mov	r3, r0
 800bda6:	461a      	mov	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800bdb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bdb8:	4922      	ldr	r1, [pc, #136]	; (800be44 <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7f5 f86e 	bl	8000e9c <__aeabi_fdiv>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    	gyro_ready = true;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    state.angles[1] = pitch_ekf;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    state.angles[2] = -1*yaw_ekf;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bdf0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    state.rates[0] = roll_rate;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    state.rates[1] = pitch_rate;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	691a      	ldr	r2, [r3, #16]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    state.rates[2] = yaw_rate;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	695a      	ldr	r2, [r3, #20]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    state.bias[0] = roll_bias;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    state.bias[1] = pitch_bias;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    state.bias[2] = yaw_bias;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

}
 800be3c:	bf00      	nop
 800be3e:	3734      	adds	r7, #52	; 0x34
 800be40:	46bd      	mov	sp, r7
 800be42:	bd90      	pop	{r4, r7, pc}
 800be44:	44fa0000 	.word	0x44fa0000

0800be48 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fc8d 	bl	800c776 <_ZN3lpfD1Ev>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800be62:	4618      	mov	r0, r3
 800be64:	f000 fc87 	bl	800c776 <_ZN3lpfD1Ev>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	0000      	movs	r0, r0
 800be74:	0000      	movs	r0, r0
	...

0800be78 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af04      	add	r7, sp, #16
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a25      	ldr	r2, [pc, #148]	; (800bf18 <_ZN3PIDC1Ev+0xa0>)
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a24      	ldr	r2, [pc, #144]	; (800bf1c <_ZN3PIDC1Ev+0xa4>)
 800be8a:	605a      	str	r2, [r3, #4]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800be92:	609a      	str	r2, [r3, #8]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7f4 fef7 	bl	8000c8c <__aeabi_i2f>
 800be9e:	4603      	mov	r3, r0
 800bea0:	4619      	mov	r1, r3
 800bea2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bea6:	f7f4 fff9 	bl	8000e9c <__aeabi_fdiv>
 800beaa:	4603      	mov	r3, r0
 800beac:	461a      	mov	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	60da      	str	r2, [r3, #12]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a1a      	ldr	r2, [pc, #104]	; (800bf20 <_ZN3PIDC1Ev+0xa8>)
 800beb6:	611a      	str	r2, [r3, #16]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	691a      	ldr	r2, [r3, #16]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f7f4 ff36 	bl	8000d34 <__aeabi_fmul>
 800bec8:	4603      	mov	r3, r0
 800beca:	461a      	mov	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	615a      	str	r2, [r3, #20]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bed6:	a30c      	add	r3, pc, #48	; (adr r3, 800bf08 <_ZN3PIDC1Ev+0x90>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bee0:	a309      	add	r3, pc, #36	; (adr r3, 800bf08 <_ZN3PIDC1Ev+0x90>)
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	e9cd 2300 	strd	r2, r3, [sp]
 800beea:	a309      	add	r3, pc, #36	; (adr r3, 800bf10 <_ZN3PIDC1Ev+0x98>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	4608      	mov	r0, r1
 800bef2:	f000 fbcf 	bl	800c694 <_ZN3lpfC1Eddd>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800befc:	659a      	str	r2, [r3, #88]	; 0x58
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	de7ea5f8 	.word	0xde7ea5f8
 800bf0c:	3fb2a454 	.word	0x3fb2a454
 800bf10:	ab367a10 	.word	0xab367a10
 800bf14:	3feb573e 	.word	0x3feb573e
 800bf18:	42f00000 	.word	0x42f00000
 800bf1c:	c2f00000 	.word	0xc2f00000
 800bf20:	3e99999a 	.word	0x3e99999a

0800bf24 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 800bf24:	b590      	push	{r4, r7, lr}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	68b8      	ldr	r0, [r7, #8]
 800bf36:	f7f4 fdf3 	bl	8000b20 <__aeabi_fsub>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ie_roll += e_angle*st;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	4619      	mov	r1, r3
 800bf54:	4610      	mov	r0, r2
 800bf56:	f7f4 feed 	bl	8000d34 <__aeabi_fmul>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f7f4 fde0 	bl	8000b24 <__addsf3>
 800bf64:	4603      	mov	r3, r0
 800bf66:	461a      	mov	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	66da      	str	r2, [r3, #108]	; 0x6c
	P = Kp_angle*e_angle;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf72:	4619      	mov	r1, r3
 800bf74:	6838      	ldr	r0, [r7, #0]
 800bf76:	f7f4 fedd 	bl	8000d34 <__aeabi_fmul>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf82:	4619      	mov	r1, r3
 800bf84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf86:	f7f4 fed5 	bl	8000d34 <__aeabi_fmul>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	613b      	str	r3, [r7, #16]
    return P+I;
 800bf8e:	6939      	ldr	r1, [r7, #16]
 800bf90:	6978      	ldr	r0, [r7, #20]
 800bf92:	f7f4 fdc7 	bl	8000b24 <__addsf3>
 800bf96:	4603      	mov	r3, r0

}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	371c      	adds	r7, #28
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd90      	pop	{r4, r7, pc}

0800bfa0 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08a      	sub	sp, #40	; 0x28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800bfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d90e      	bls.n	800bfd6 <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7f4 fdb0 	bl	8000b24 <__addsf3>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = vz_def;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd4:	e01c      	b.n	800c010 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	f240 5213 	movw	r2, #1299	; 0x513
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d810      	bhi.n	800c002 <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	68b8      	ldr	r0, [r7, #8]
 800bfe8:	f7f4 fd9a 	bl	8000b20 <__aeabi_fsub>
 800bfec:	4603      	mov	r3, r0
 800bfee:	461a      	mov	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = -1 * vz_def;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
 800c000:	e006      	b.n	800c010 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = 0;
 800c00a:	f04f 0300 	mov.w	r3, #0
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c014:	f7f4 fd84 	bl	8000b20 <__aeabi_fsub>
 800c018:	4603      	mov	r3, r0
 800c01a:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800c01c:	6a39      	ldr	r1, [r7, #32]
 800c01e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c020:	f7f4 fe88 	bl	8000d34 <__aeabi_fmul>
 800c024:	4603      	mov	r3, r0
 800c026:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	68b8      	ldr	r0, [r7, #8]
 800c02c:	f7f4 fd78 	bl	8000b20 <__aeabi_fsub>
 800c030:	4603      	mov	r3, r0
 800c032:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800c034:	69b9      	ldr	r1, [r7, #24]
 800c036:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c038:	f7f4 fe7c 	bl	8000d34 <__aeabi_fmul>
 800c03c:	4603      	mov	r3, r0
 800c03e:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800c040:	6979      	ldr	r1, [r7, #20]
 800c042:	69f8      	ldr	r0, [r7, #28]
 800c044:	f7f4 fd6e 	bl	8000b24 <__addsf3>
 800c048:	4603      	mov	r3, r0
 800c04a:	613b      	str	r3, [r7, #16]
    return PI;
 800c04c:	693b      	ldr	r3, [r7, #16]

}
 800c04e:	4618      	mov	r0, r3
 800c050:	3728      	adds	r7, #40	; 0x28
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
	...

0800c058 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 800c058:	b5b0      	push	{r4, r5, r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c066:	4618      	mov	r0, r3
 800c068:	f7f4 f9d6 	bl	8000418 <__aeabi_f2d>
 800c06c:	a31e      	add	r3, pc, #120	; (adr r3, 800c0e8 <_ZN3PID6RateFFEf+0x90>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 fa29 	bl	80004c8 <__aeabi_dmul>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	4614      	mov	r4, r2
 800c07c:	461d      	mov	r5, r3
 800c07e:	6838      	ldr	r0, [r7, #0]
 800c080:	f7f4 f9ca 	bl	8000418 <__aeabi_f2d>
 800c084:	a31a      	add	r3, pc, #104	; (adr r3, 800c0f0 <_ZN3PID6RateFFEf+0x98>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f7f4 fa1d 	bl	80004c8 <__aeabi_dmul>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4620      	mov	r0, r4
 800c094:	4629      	mov	r1, r5
 800c096:	f7f4 f861 	bl	800015c <__adddf3>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4614      	mov	r4, r2
 800c0a0:	461d      	mov	r5, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7f4 f9b6 	bl	8000418 <__aeabi_f2d>
 800c0ac:	a310      	add	r3, pc, #64	; (adr r3, 800c0f0 <_ZN3PID6RateFFEf+0x98>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 fa09 	bl	80004c8 <__aeabi_dmul>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7f4 f84b 	bl	8000158 <__aeabi_dsub>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f7f4 fcd5 	bl	8000a78 <__aeabi_d2f>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d6:	68f9      	ldr	r1, [r7, #12]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f4 fe2b 	bl	8000d34 <__aeabi_fmul>
 800c0de:	4603      	mov	r3, r0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c0e8:	1eb851ec 	.word	0x1eb851ec
 800c0ec:	3fefeb85 	.word	0x3fefeb85
 800c0f0:	538ef34d 	.word	0x538ef34d
 800c0f4:	3fb72474 	.word	0x3fb72474

0800c0f8 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800c0f8:	b590      	push	{r4, r7, lr}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	68b8      	ldr	r0, [r7, #8]
 800c10a:	f7f4 fd09 	bl	8000b20 <__aeabi_fsub>
 800c10e:	4603      	mov	r3, r0
 800c110:	461a      	mov	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	65da      	str	r2, [r3, #92]	; 0x5c
	ie_roll_rate += e_roll*st;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	4619      	mov	r1, r3
 800c124:	4610      	mov	r0, r2
 800c126:	f7f4 fe05 	bl	8000d34 <__aeabi_fmul>
 800c12a:	4603      	mov	r3, r0
 800c12c:	4619      	mov	r1, r3
 800c12e:	4620      	mov	r0, r4
 800c130:	f7f4 fcf8 	bl	8000b24 <__addsf3>
 800c134:	4603      	mov	r3, r0
 800c136:	461a      	mov	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	675a      	str	r2, [r3, #116]	; 0x74
	P = Kp * e_roll;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c142:	4618      	mov	r0, r3
 800c144:	f7f4 fdf6 	bl	8000d34 <__aeabi_fmul>
 800c148:	4603      	mov	r3, r0
 800c14a:	461a      	mov	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f4 fdeb 	bl	8000d34 <__aeabi_fmul>
 800c15e:	4603      	mov	r3, r0
 800c160:	461a      	mov	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	4619      	mov	r1, r3
 800c16e:	68b8      	ldr	r0, [r7, #8]
 800c170:	f7f4 fcd6 	bl	8000b20 <__aeabi_fsub>
 800c174:	4603      	mov	r3, r0
 800c176:	617b      	str	r3, [r7, #20]
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7f4 fcce 	bl	8000b20 <__aeabi_fsub>
 800c184:	4603      	mov	r3, r0
 800c186:	461a      	mov	r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f7f4 fe84 	bl	8000e9c <__aeabi_fdiv>
 800c194:	4603      	mov	r3, r0
 800c196:	613b      	str	r3, [r7, #16]
	alpha_dot_dot_des = alpha_dot_dot_des / st;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	4619      	mov	r1, r3
 800c19e:	6978      	ldr	r0, [r7, #20]
 800c1a0:	f7f4 fe7c 	bl	8000e9c <__aeabi_fdiv>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	617b      	str	r3, [r7, #20]
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3328      	adds	r3, #40	; 0x28
 800c1ac:	6939      	ldr	r1, [r7, #16]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 fa8b 	bl	800c6ca <_ZN3lpf3RunEf>
 800c1b4:	6138      	str	r0, [r7, #16]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c1bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7f4 fdb8 	bl	8000d34 <__aeabi_fmul>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	6939      	ldr	r1, [r7, #16]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f4 fca9 	bl	8000b20 <__aeabi_fsub>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f4 fdae 	bl	8000d34 <__aeabi_fmul>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	461a      	mov	r2, r3
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	f7f4 fc97 	bl	8000b24 <__addsf3>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c200:	4619      	mov	r1, r3
 800c202:	4610      	mov	r0, r2
 800c204:	f7f4 fc8e 	bl	8000b24 <__addsf3>
 800c208:	4603      	mov	r3, r0
 800c20a:	461a      	mov	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  	pd_roll_buf = pd;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c222:	4b0e      	ldr	r3, [pc, #56]	; (800c25c <_ZN3PID9PID_Rate2Efffffff+0x164>)
 800c224:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 f975 	bl	800c518 <_ZN3PID3SatEfii>
 800c22e:	4602      	mov	r2, r0
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pd_roll_sat_buf = pd;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	67da      	str	r2, [r3, #124]	; 0x7c
	alpha_dot_des_ = alpha_dot_des;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	621a      	str	r2, [r3, #32]
	alpha_dot_ = alpha_dot;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	625a      	str	r2, [r3, #36]	; 0x24
	return pd;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
 800c252:	4618      	mov	r0, r3
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	bd90      	pop	{r4, r7, pc}
 800c25a:	bf00      	nop
 800c25c:	fffffed4 	.word	0xfffffed4

0800c260 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800c260:	b590      	push	{r4, r7, lr}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	68b8      	ldr	r0, [r7, #8]
 800c272:	f7f4 fc55 	bl	8000b20 <__aeabi_fsub>
 800c276:	4603      	mov	r3, r0
 800c278:	461a      	mov	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	65da      	str	r2, [r3, #92]	; 0x5c
  float e_roll_der = - alpha_dot;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c284:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c28a:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	4618      	mov	r0, r3
 800c292:	f7f4 ff2b 	bl	80010ec <__aeabi_f2iz>
 800c296:	4604      	mov	r4, r0
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7f4 ff25 	bl	80010ec <__aeabi_f2iz>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d018      	beq.n	800c2da <_ZN3PID7PD_RateEfffff+0x7a>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 f8d9 	bl	800c466 <_ZN3PID3sgnEf>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	461c      	mov	r4, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2bc:	4619      	mov	r1, r3
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 f8d1 	bl	800c466 <_ZN3PID3sgnEf>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	429c      	cmp	r4, r3
 800c2c8:	bf0c      	ite	eq
 800c2ca:	2301      	moveq	r3, #1
 800c2cc:	2300      	movne	r3, #0
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <_ZN3PID7PD_RateEfffff+0x7a>
      e_roll_int = 0;
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7f4 fd27 	bl	8000d34 <__aeabi_fmul>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f7f4 fc14 	bl	8000b20 <__aeabi_fsub>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	494b      	ldr	r1, [pc, #300]	; (800c428 <_ZN3PID7PD_RateEfffff+0x1c8>)
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7f4 fd19 	bl	8000d34 <__aeabi_fmul>
 800c302:	4603      	mov	r3, r0
 800c304:	461a      	mov	r2, r3
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	de_int += de_filt*st;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	4619      	mov	r1, r3
 800c31e:	4610      	mov	r0, r2
 800c320:	f7f4 fd08 	bl	8000d34 <__aeabi_fmul>
 800c324:	4603      	mov	r3, r0
 800c326:	4619      	mov	r1, r3
 800c328:	4620      	mov	r0, r4
 800c32a:	f7f4 fbfb 	bl	8000b24 <__addsf3>
 800c32e:	4603      	mov	r3, r0
 800c330:	461a      	mov	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	de = e_roll - e_eski_roll;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f7f4 fbec 	bl	8000b20 <__aeabi_fsub>
 800c348:	4603      	mov	r3, r0
 800c34a:	461a      	mov	r2, r3
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	e_eski_roll = e_roll;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	665a      	str	r2, [r3, #100]	; 0x64

  ie_roll += e_roll_int*st;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	6979      	ldr	r1, [r7, #20]
 800c364:	4618      	mov	r0, r3
 800c366:	f7f4 fce5 	bl	8000d34 <__aeabi_fmul>
 800c36a:	4603      	mov	r3, r0
 800c36c:	4619      	mov	r1, r3
 800c36e:	4620      	mov	r0, r4
 800c370:	f7f4 fbd8 	bl	8000b24 <__addsf3>
 800c374:	4603      	mov	r3, r0
 800c376:	461a      	mov	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	66da      	str	r2, [r3, #108]	; 0x6c

  ie_roll_sat = ie_roll;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	679a      	str	r2, [r3, #120]	; 0x78
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f4 fcd2 	bl	8000d34 <__aeabi_fmul>
 800c390:	4603      	mov	r3, r0
 800c392:	461a      	mov	r2, r3
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7f4 fcc1 	bl	8000d34 <__aeabi_fmul>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	//D = lpf.update(D);
	pd = P + I + D;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	4610      	mov	r0, r2
 800c3cc:	f7f4 fbaa 	bl	8000b24 <__addsf3>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7f4 fba1 	bl	8000b24 <__addsf3>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  	pd_roll_buf = pd;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c3fc:	4b0b      	ldr	r3, [pc, #44]	; (800c42c <_ZN3PID7PD_RateEfffff+0x1cc>)
 800c3fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 f888 	bl	800c518 <_ZN3PID3SatEfii>
 800c408:	4602      	mov	r2, r0
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pd_roll_sat_buf = pd;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	67da      	str	r2, [r3, #124]	; 0x7c
    return pd;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98

}
 800c420:	4618      	mov	r0, r3
 800c422:	371c      	adds	r7, #28
 800c424:	46bd      	mov	sp, r7
 800c426:	bd90      	pop	{r4, r7, pc}
 800c428:	42c80000 	.word	0x42c80000
 800c42c:	fffffed4 	.word	0xfffffed4

0800c430 <_ZN3PID5resetEv>:

void PID::reset() {
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f04f 0200 	mov.w	r2, #0
 800c43e:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate = 0;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f04f 0200 	mov.w	r2, #0
 800c446:	675a      	str	r2, [r3, #116]	; 0x74
	de_filt = 0;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f04f 0200 	mov.w	r2, #0
 800c44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_int = 0;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f04f 0200 	mov.w	r2, #0
 800c458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c45c:	bf00      	nop
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	bc80      	pop	{r7}
 800c464:	4770      	bx	lr

0800c466 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800c466:	b580      	push	{r7, lr}
 800c468:	b082      	sub	sp, #8
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800c470:	f04f 0100 	mov.w	r1, #0
 800c474:	6838      	ldr	r0, [r7, #0]
 800c476:	f7f4 fdfb 	bl	8001070 <__aeabi_fcmplt>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <_ZN3PID3sgnEf+0x1e>
 800c480:	23ff      	movs	r3, #255	; 0xff
 800c482:	e00a      	b.n	800c49a <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800c484:	f04f 0100 	mov.w	r1, #0
 800c488:	6838      	ldr	r0, [r7, #0]
 800c48a:	f7f4 fe0f 	bl	80010ac <__aeabi_fcmpgt>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <_ZN3PID3sgnEf+0x32>
 800c494:	2301      	movs	r3, #1
 800c496:	e000      	b.n	800c49a <_ZN3PID3sgnEf+0x34>
  return 0;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800c4b8:	dd24      	ble.n	800c504 <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7f4 fbe6 	bl	8000c8c <__aeabi_i2f>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	68b8      	ldr	r0, [r7, #8]
 800c4c6:	f7f4 fdf1 	bl	80010ac <__aeabi_fcmpgt>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d005      	beq.n	800c4dc <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7f4 fbdb 	bl	8000c8c <__aeabi_i2f>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	617b      	str	r3, [r7, #20]
 800c4da:	e015      	b.n	800c508 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800c4dc:	6838      	ldr	r0, [r7, #0]
 800c4de:	f7f4 fbd5 	bl	8000c8c <__aeabi_i2f>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	68b8      	ldr	r0, [r7, #8]
 800c4e8:	f7f4 fdc2 	bl	8001070 <__aeabi_fcmplt>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d005      	beq.n	800c4fe <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800c4f2:	6838      	ldr	r0, [r7, #0]
 800c4f4:	f7f4 fbca 	bl	8000c8c <__aeabi_i2f>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	e004      	b.n	800c508 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	e001      	b.n	800c508 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800c504:	4b03      	ldr	r3, [pc, #12]	; (800c514 <_ZN3PID3SatEfiii+0x70>)
 800c506:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800c508:	697b      	ldr	r3, [r7, #20]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	447a0000 	.word	0x447a0000

0800c518 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7f4 fbb0 	bl	8000c8c <__aeabi_i2f>
 800c52c:	4603      	mov	r3, r0
 800c52e:	4619      	mov	r1, r3
 800c530:	68b8      	ldr	r0, [r7, #8]
 800c532:	f7f4 fdbb 	bl	80010ac <__aeabi_fcmpgt>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d005      	beq.n	800c548 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7f4 fba5 	bl	8000c8c <__aeabi_i2f>
 800c542:	4603      	mov	r3, r0
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	e012      	b.n	800c56e <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800c548:	6838      	ldr	r0, [r7, #0]
 800c54a:	f7f4 fb9f 	bl	8000c8c <__aeabi_i2f>
 800c54e:	4603      	mov	r3, r0
 800c550:	4619      	mov	r1, r3
 800c552:	68b8      	ldr	r0, [r7, #8]
 800c554:	f7f4 fd8c 	bl	8001070 <__aeabi_fcmplt>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d005      	beq.n	800c56a <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800c55e:	6838      	ldr	r0, [r7, #0]
 800c560:	f7f4 fb94 	bl	8000c8c <__aeabi_i2f>
 800c564:	4603      	mov	r3, r0
 800c566:	617b      	str	r3, [r7, #20]
 800c568:	e001      	b.n	800c56e <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800c56e:	697b      	ldr	r3, [r7, #20]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3718      	adds	r7, #24
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <_ZN3PID7pwm2motEti>:

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
}

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 800c578:	b590      	push	{r4, r7, lr}
 800c57a:	b089      	sub	sp, #36	; 0x24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	460b      	mov	r3, r1
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 800c586:	4b1d      	ldr	r3, [pc, #116]	; (800c5fc <_ZN3PID7pwm2motEti+0x84>)
 800c588:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800c58a:	4b1d      	ldr	r3, [pc, #116]	; (800c600 <_ZN3PID7pwm2motEti+0x88>)
 800c58c:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800c58e:	f04f 0300 	mov.w	r3, #0
 800c592:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 800c594:	4b1b      	ldr	r3, [pc, #108]	; (800c604 <_ZN3PID7pwm2motEti+0x8c>)
 800c596:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7f4 fb77 	bl	8000c8c <__aeabi_i2f>
 800c59e:	4604      	mov	r4, r0
 800c5a0:	897b      	ldrh	r3, [r7, #10]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7f4 fb6e 	bl	8000c84 <__aeabi_ui2f>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	69f9      	ldr	r1, [r7, #28]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7f4 fab7 	bl	8000b20 <__aeabi_fsub>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f7f4 fbbc 	bl	8000d34 <__aeabi_fmul>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461c      	mov	r4, r3
 800c5c0:	6979      	ldr	r1, [r7, #20]
 800c5c2:	6938      	ldr	r0, [r7, #16]
 800c5c4:	f7f4 faac 	bl	8000b20 <__aeabi_fsub>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f7f4 fbb1 	bl	8000d34 <__aeabi_fmul>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	461c      	mov	r4, r3
 800c5d6:	69f9      	ldr	r1, [r7, #28]
 800c5d8:	69b8      	ldr	r0, [r7, #24]
 800c5da:	f7f4 faa1 	bl	8000b20 <__aeabi_fsub>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f7f4 fc5a 	bl	8000e9c <__aeabi_fdiv>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	6979      	ldr	r1, [r7, #20]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7f4 fa99 	bl	8000b24 <__addsf3>
 800c5f2:	4603      	mov	r3, r0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3724      	adds	r7, #36	; 0x24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd90      	pop	{r4, r7, pc}
 800c5fc:	447a0000 	.word	0x447a0000
 800c600:	44fa0000 	.word	0x44fa0000
 800c604:	44a5c000 	.word	0x44a5c000

0800c608 <_ZN3PID5F2thrEf>:

unsigned int PID::F2thr(float F) {
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800c612:	4b16      	ldr	r3, [pc, #88]	; (800c66c <_ZN3PID5F2thrEf+0x64>)
 800c614:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800c616:	4b16      	ldr	r3, [pc, #88]	; (800c670 <_ZN3PID5F2thrEf+0x68>)
 800c618:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800c61a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c61e:	6838      	ldr	r0, [r7, #0]
 800c620:	f7f4 fc3c 	bl	8000e9c <__aeabi_fdiv>
 800c624:	4603      	mov	r3, r0
 800c626:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800c628:	69f9      	ldr	r1, [r7, #28]
 800c62a:	6978      	ldr	r0, [r7, #20]
 800c62c:	f7f4 fc36 	bl	8000e9c <__aeabi_fdiv>
 800c630:	4603      	mov	r3, r0
 800c632:	4618      	mov	r0, r3
 800c634:	f7f5 fa1c 	bl	8001a70 <_ZSt4sqrtf>
 800c638:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800c63a:	490e      	ldr	r1, [pc, #56]	; (800c674 <_ZN3PID5F2thrEf+0x6c>)
 800c63c:	6938      	ldr	r0, [r7, #16]
 800c63e:	f7f4 fb79 	bl	8000d34 <__aeabi_fmul>
 800c642:	4603      	mov	r3, r0
 800c644:	69b9      	ldr	r1, [r7, #24]
 800c646:	4618      	mov	r0, r3
 800c648:	f7f4 fc28 	bl	8000e9c <__aeabi_fdiv>
 800c64c:	4603      	mov	r3, r0
 800c64e:	4909      	ldr	r1, [pc, #36]	; (800c674 <_ZN3PID5F2thrEf+0x6c>)
 800c650:	4618      	mov	r0, r3
 800c652:	f7f4 fa67 	bl	8000b24 <__addsf3>
 800c656:	4603      	mov	r3, r0
 800c658:	4618      	mov	r0, r3
 800c65a:	f7f4 fd6d 	bl	8001138 <__aeabi_f2uiz>
 800c65e:	4603      	mov	r3, r0
 800c660:	60fb      	str	r3, [r7, #12]
	return thr;
 800c662:	68fb      	ldr	r3, [r7, #12]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3720      	adds	r7, #32
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	3359f513 	.word	0x3359f513
 800c670:	46896e00 	.word	0x46896e00
 800c674:	447a0000 	.word	0x447a0000

0800c678 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	3328      	adds	r3, #40	; 0x28
 800c684:	4618      	mov	r0, r3
 800c686:	f000 f876 	bl	800c776 <_ZN3lpfD1Ev>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800c6a0:	68f9      	ldr	r1, [r7, #12]
 800c6a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800c6aa:	68f9      	ldr	r1, [r7, #12]
 800c6ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800c6b4:	68f9      	ldr	r1, [r7, #12]
 800c6b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c6ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bc80      	pop	{r7}
 800c6c8:	4770      	bx	lr

0800c6ca <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800c6ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7f3 fe99 	bl	8000418 <__aeabi_f2d>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f3 feeb 	bl	80004c8 <__aeabi_dmul>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4690      	mov	r8, r2
 800c6f8:	4699      	mov	r9, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c700:	6838      	ldr	r0, [r7, #0]
 800c702:	f7f3 fe89 	bl	8000418 <__aeabi_f2d>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4620      	mov	r0, r4
 800c70c:	4629      	mov	r1, r5
 800c70e:	f7f3 fedb 	bl	80004c8 <__aeabi_dmul>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4640      	mov	r0, r8
 800c718:	4649      	mov	r1, r9
 800c71a:	f7f3 fd1f 	bl	800015c <__adddf3>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4690      	mov	r8, r2
 800c724:	4699      	mov	r9, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4618      	mov	r0, r3
 800c732:	f7f3 fe71 	bl	8000418 <__aeabi_f2d>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4620      	mov	r0, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	f7f3 fec3 	bl	80004c8 <__aeabi_dmul>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4640      	mov	r0, r8
 800c748:	4649      	mov	r1, r9
 800c74a:	f7f3 fd07 	bl	800015c <__adddf3>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4610      	mov	r0, r2
 800c754:	4619      	mov	r1, r3
 800c756:	f7f4 f98f 	bl	8000a78 <__aeabi_d2f>
 800c75a:	4603      	mov	r3, r0
 800c75c:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	601a      	str	r2, [r3, #0]
	y_ = y;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	605a      	str	r2, [r3, #4]
	return y;
 800c76a:	68fb      	ldr	r3, [r7, #12]

}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800c776 <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800c776:	b480      	push	{r7}
 800c778:	b083      	sub	sp, #12
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	bc80      	pop	{r7}
 800c788:	4770      	bx	lr

0800c78a <_ZdlPv>:
 800c78a:	f002 b993 	b.w	800eab4 <free>

0800c78e <_Znwj>:
 800c78e:	2801      	cmp	r0, #1
 800c790:	bf38      	it	cc
 800c792:	2001      	movcc	r0, #1
 800c794:	b510      	push	{r4, lr}
 800c796:	4604      	mov	r4, r0
 800c798:	4620      	mov	r0, r4
 800c79a:	f002 f983 	bl	800eaa4 <malloc>
 800c79e:	b930      	cbnz	r0, 800c7ae <_Znwj+0x20>
 800c7a0:	f000 f80c 	bl	800c7bc <_ZSt15get_new_handlerv>
 800c7a4:	b908      	cbnz	r0, 800c7aa <_Znwj+0x1c>
 800c7a6:	f002 f94b 	bl	800ea40 <abort>
 800c7aa:	4780      	blx	r0
 800c7ac:	e7f4      	b.n	800c798 <_Znwj+0xa>
 800c7ae:	bd10      	pop	{r4, pc}

0800c7b0 <_ZSt17__throw_bad_allocv>:
 800c7b0:	b508      	push	{r3, lr}
 800c7b2:	f002 f945 	bl	800ea40 <abort>

0800c7b6 <_ZSt20__throw_length_errorPKc>:
 800c7b6:	b508      	push	{r3, lr}
 800c7b8:	f002 f942 	bl	800ea40 <abort>

0800c7bc <_ZSt15get_new_handlerv>:
 800c7bc:	4b02      	ldr	r3, [pc, #8]	; (800c7c8 <_ZSt15get_new_handlerv+0xc>)
 800c7be:	6818      	ldr	r0, [r3, #0]
 800c7c0:	f3bf 8f5b 	dmb	ish
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	20000da0 	.word	0x20000da0

0800c7cc <atanf>:
 800c7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c7d4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c7d8:	4604      	mov	r4, r0
 800c7da:	4680      	mov	r8, r0
 800c7dc:	db0e      	blt.n	800c7fc <atanf+0x30>
 800c7de:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c7e2:	dd04      	ble.n	800c7ee <atanf+0x22>
 800c7e4:	4601      	mov	r1, r0
 800c7e6:	f7f4 f99d 	bl	8000b24 <__addsf3>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	e003      	b.n	800c7f6 <atanf+0x2a>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	f300 80ce 	bgt.w	800c990 <atanf+0x1c4>
 800c7f4:	4c67      	ldr	r4, [pc, #412]	; (800c994 <atanf+0x1c8>)
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7fc:	4b66      	ldr	r3, [pc, #408]	; (800c998 <atanf+0x1cc>)
 800c7fe:	429d      	cmp	r5, r3
 800c800:	dc0e      	bgt.n	800c820 <atanf+0x54>
 800c802:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c806:	da08      	bge.n	800c81a <atanf+0x4e>
 800c808:	4964      	ldr	r1, [pc, #400]	; (800c99c <atanf+0x1d0>)
 800c80a:	f7f4 f98b 	bl	8000b24 <__addsf3>
 800c80e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c812:	f7f4 fc4b 	bl	80010ac <__aeabi_fcmpgt>
 800c816:	2800      	cmp	r0, #0
 800c818:	d1ed      	bne.n	800c7f6 <atanf+0x2a>
 800c81a:	f04f 36ff 	mov.w	r6, #4294967295
 800c81e:	e01c      	b.n	800c85a <atanf+0x8e>
 800c820:	f000 f914 	bl	800ca4c <fabsf>
 800c824:	4b5e      	ldr	r3, [pc, #376]	; (800c9a0 <atanf+0x1d4>)
 800c826:	4604      	mov	r4, r0
 800c828:	429d      	cmp	r5, r3
 800c82a:	dc7c      	bgt.n	800c926 <atanf+0x15a>
 800c82c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c830:	429d      	cmp	r5, r3
 800c832:	dc67      	bgt.n	800c904 <atanf+0x138>
 800c834:	4601      	mov	r1, r0
 800c836:	f7f4 f975 	bl	8000b24 <__addsf3>
 800c83a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c83e:	f7f4 f96f 	bl	8000b20 <__aeabi_fsub>
 800c842:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c846:	4605      	mov	r5, r0
 800c848:	4620      	mov	r0, r4
 800c84a:	f7f4 f96b 	bl	8000b24 <__addsf3>
 800c84e:	4601      	mov	r1, r0
 800c850:	4628      	mov	r0, r5
 800c852:	f7f4 fb23 	bl	8000e9c <__aeabi_fdiv>
 800c856:	2600      	movs	r6, #0
 800c858:	4604      	mov	r4, r0
 800c85a:	4621      	mov	r1, r4
 800c85c:	4620      	mov	r0, r4
 800c85e:	f7f4 fa69 	bl	8000d34 <__aeabi_fmul>
 800c862:	4601      	mov	r1, r0
 800c864:	4607      	mov	r7, r0
 800c866:	f7f4 fa65 	bl	8000d34 <__aeabi_fmul>
 800c86a:	4605      	mov	r5, r0
 800c86c:	494d      	ldr	r1, [pc, #308]	; (800c9a4 <atanf+0x1d8>)
 800c86e:	f7f4 fa61 	bl	8000d34 <__aeabi_fmul>
 800c872:	494d      	ldr	r1, [pc, #308]	; (800c9a8 <atanf+0x1dc>)
 800c874:	f7f4 f956 	bl	8000b24 <__addsf3>
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f4 fa5b 	bl	8000d34 <__aeabi_fmul>
 800c87e:	494b      	ldr	r1, [pc, #300]	; (800c9ac <atanf+0x1e0>)
 800c880:	f7f4 f950 	bl	8000b24 <__addsf3>
 800c884:	4629      	mov	r1, r5
 800c886:	f7f4 fa55 	bl	8000d34 <__aeabi_fmul>
 800c88a:	4949      	ldr	r1, [pc, #292]	; (800c9b0 <atanf+0x1e4>)
 800c88c:	f7f4 f94a 	bl	8000b24 <__addsf3>
 800c890:	4629      	mov	r1, r5
 800c892:	f7f4 fa4f 	bl	8000d34 <__aeabi_fmul>
 800c896:	4947      	ldr	r1, [pc, #284]	; (800c9b4 <atanf+0x1e8>)
 800c898:	f7f4 f944 	bl	8000b24 <__addsf3>
 800c89c:	4629      	mov	r1, r5
 800c89e:	f7f4 fa49 	bl	8000d34 <__aeabi_fmul>
 800c8a2:	4945      	ldr	r1, [pc, #276]	; (800c9b8 <atanf+0x1ec>)
 800c8a4:	f7f4 f93e 	bl	8000b24 <__addsf3>
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f4 fa43 	bl	8000d34 <__aeabi_fmul>
 800c8ae:	4943      	ldr	r1, [pc, #268]	; (800c9bc <atanf+0x1f0>)
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f7f4 fa3e 	bl	8000d34 <__aeabi_fmul>
 800c8b8:	4941      	ldr	r1, [pc, #260]	; (800c9c0 <atanf+0x1f4>)
 800c8ba:	f7f4 f931 	bl	8000b20 <__aeabi_fsub>
 800c8be:	4629      	mov	r1, r5
 800c8c0:	f7f4 fa38 	bl	8000d34 <__aeabi_fmul>
 800c8c4:	493f      	ldr	r1, [pc, #252]	; (800c9c4 <atanf+0x1f8>)
 800c8c6:	f7f4 f92b 	bl	8000b20 <__aeabi_fsub>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	f7f4 fa32 	bl	8000d34 <__aeabi_fmul>
 800c8d0:	493d      	ldr	r1, [pc, #244]	; (800c9c8 <atanf+0x1fc>)
 800c8d2:	f7f4 f925 	bl	8000b20 <__aeabi_fsub>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f7f4 fa2c 	bl	8000d34 <__aeabi_fmul>
 800c8dc:	493b      	ldr	r1, [pc, #236]	; (800c9cc <atanf+0x200>)
 800c8de:	f7f4 f91f 	bl	8000b20 <__aeabi_fsub>
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f7f4 fa26 	bl	8000d34 <__aeabi_fmul>
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	f7f4 f91a 	bl	8000b24 <__addsf3>
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	f7f4 fa1f 	bl	8000d34 <__aeabi_fmul>
 800c8f6:	1c73      	adds	r3, r6, #1
 800c8f8:	4601      	mov	r1, r0
 800c8fa:	d133      	bne.n	800c964 <atanf+0x198>
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f7f4 f90f 	bl	8000b20 <__aeabi_fsub>
 800c902:	e772      	b.n	800c7ea <atanf+0x1e>
 800c904:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c908:	f7f4 f90a 	bl	8000b20 <__aeabi_fsub>
 800c90c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c910:	4605      	mov	r5, r0
 800c912:	4620      	mov	r0, r4
 800c914:	f7f4 f906 	bl	8000b24 <__addsf3>
 800c918:	4601      	mov	r1, r0
 800c91a:	4628      	mov	r0, r5
 800c91c:	f7f4 fabe 	bl	8000e9c <__aeabi_fdiv>
 800c920:	2601      	movs	r6, #1
 800c922:	4604      	mov	r4, r0
 800c924:	e799      	b.n	800c85a <atanf+0x8e>
 800c926:	4b2a      	ldr	r3, [pc, #168]	; (800c9d0 <atanf+0x204>)
 800c928:	429d      	cmp	r5, r3
 800c92a:	dc14      	bgt.n	800c956 <atanf+0x18a>
 800c92c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c930:	f7f4 f8f6 	bl	8000b20 <__aeabi_fsub>
 800c934:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c938:	4605      	mov	r5, r0
 800c93a:	4620      	mov	r0, r4
 800c93c:	f7f4 f9fa 	bl	8000d34 <__aeabi_fmul>
 800c940:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c944:	f7f4 f8ee 	bl	8000b24 <__addsf3>
 800c948:	4601      	mov	r1, r0
 800c94a:	4628      	mov	r0, r5
 800c94c:	f7f4 faa6 	bl	8000e9c <__aeabi_fdiv>
 800c950:	2602      	movs	r6, #2
 800c952:	4604      	mov	r4, r0
 800c954:	e781      	b.n	800c85a <atanf+0x8e>
 800c956:	4601      	mov	r1, r0
 800c958:	481e      	ldr	r0, [pc, #120]	; (800c9d4 <atanf+0x208>)
 800c95a:	f7f4 fa9f 	bl	8000e9c <__aeabi_fdiv>
 800c95e:	2603      	movs	r6, #3
 800c960:	4604      	mov	r4, r0
 800c962:	e77a      	b.n	800c85a <atanf+0x8e>
 800c964:	4b1c      	ldr	r3, [pc, #112]	; (800c9d8 <atanf+0x20c>)
 800c966:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c96a:	f7f4 f8d9 	bl	8000b20 <__aeabi_fsub>
 800c96e:	4621      	mov	r1, r4
 800c970:	f7f4 f8d6 	bl	8000b20 <__aeabi_fsub>
 800c974:	4b19      	ldr	r3, [pc, #100]	; (800c9dc <atanf+0x210>)
 800c976:	4601      	mov	r1, r0
 800c978:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c97c:	f7f4 f8d0 	bl	8000b20 <__aeabi_fsub>
 800c980:	f1b8 0f00 	cmp.w	r8, #0
 800c984:	4604      	mov	r4, r0
 800c986:	f6bf af36 	bge.w	800c7f6 <atanf+0x2a>
 800c98a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c98e:	e72c      	b.n	800c7ea <atanf+0x1e>
 800c990:	4c13      	ldr	r4, [pc, #76]	; (800c9e0 <atanf+0x214>)
 800c992:	e730      	b.n	800c7f6 <atanf+0x2a>
 800c994:	bfc90fdb 	.word	0xbfc90fdb
 800c998:	3edfffff 	.word	0x3edfffff
 800c99c:	7149f2ca 	.word	0x7149f2ca
 800c9a0:	3f97ffff 	.word	0x3f97ffff
 800c9a4:	3c8569d7 	.word	0x3c8569d7
 800c9a8:	3d4bda59 	.word	0x3d4bda59
 800c9ac:	3d886b35 	.word	0x3d886b35
 800c9b0:	3dba2e6e 	.word	0x3dba2e6e
 800c9b4:	3e124925 	.word	0x3e124925
 800c9b8:	3eaaaaab 	.word	0x3eaaaaab
 800c9bc:	bd15a221 	.word	0xbd15a221
 800c9c0:	3d6ef16b 	.word	0x3d6ef16b
 800c9c4:	3d9d8795 	.word	0x3d9d8795
 800c9c8:	3de38e38 	.word	0x3de38e38
 800c9cc:	3e4ccccd 	.word	0x3e4ccccd
 800c9d0:	401bffff 	.word	0x401bffff
 800c9d4:	bf800000 	.word	0xbf800000
 800c9d8:	0800edc0 	.word	0x0800edc0
 800c9dc:	0800edb0 	.word	0x0800edb0
 800c9e0:	3fc90fdb 	.word	0x3fc90fdb

0800c9e4 <cosf>:
 800c9e4:	b507      	push	{r0, r1, r2, lr}
 800c9e6:	4a18      	ldr	r2, [pc, #96]	; (800ca48 <cosf+0x64>)
 800c9e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	4601      	mov	r1, r0
 800c9f0:	dc03      	bgt.n	800c9fa <cosf+0x16>
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	f001 fac4 	bl	800df80 <__kernel_cosf>
 800c9f8:	e004      	b.n	800ca04 <cosf+0x20>
 800c9fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c9fe:	db04      	blt.n	800ca0a <cosf+0x26>
 800ca00:	f7f4 f88e 	bl	8000b20 <__aeabi_fsub>
 800ca04:	b003      	add	sp, #12
 800ca06:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca0a:	4669      	mov	r1, sp
 800ca0c:	f001 f908 	bl	800dc20 <__ieee754_rem_pio2f>
 800ca10:	f000 0203 	and.w	r2, r0, #3
 800ca14:	2a01      	cmp	r2, #1
 800ca16:	d005      	beq.n	800ca24 <cosf+0x40>
 800ca18:	2a02      	cmp	r2, #2
 800ca1a:	d00a      	beq.n	800ca32 <cosf+0x4e>
 800ca1c:	b972      	cbnz	r2, 800ca3c <cosf+0x58>
 800ca1e:	9901      	ldr	r1, [sp, #4]
 800ca20:	9800      	ldr	r0, [sp, #0]
 800ca22:	e7e7      	b.n	800c9f4 <cosf+0x10>
 800ca24:	9901      	ldr	r1, [sp, #4]
 800ca26:	9800      	ldr	r0, [sp, #0]
 800ca28:	f001 fde0 	bl	800e5ec <__kernel_sinf>
 800ca2c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ca30:	e7e8      	b.n	800ca04 <cosf+0x20>
 800ca32:	9901      	ldr	r1, [sp, #4]
 800ca34:	9800      	ldr	r0, [sp, #0]
 800ca36:	f001 faa3 	bl	800df80 <__kernel_cosf>
 800ca3a:	e7f7      	b.n	800ca2c <cosf+0x48>
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	9901      	ldr	r1, [sp, #4]
 800ca40:	9800      	ldr	r0, [sp, #0]
 800ca42:	f001 fdd3 	bl	800e5ec <__kernel_sinf>
 800ca46:	e7dd      	b.n	800ca04 <cosf+0x20>
 800ca48:	3f490fd8 	.word	0x3f490fd8

0800ca4c <fabsf>:
 800ca4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ca50:	4770      	bx	lr
	...

0800ca54 <sinf>:
 800ca54:	b507      	push	{r0, r1, r2, lr}
 800ca56:	4a19      	ldr	r2, [pc, #100]	; (800cabc <sinf+0x68>)
 800ca58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	4601      	mov	r1, r0
 800ca60:	dc04      	bgt.n	800ca6c <sinf+0x18>
 800ca62:	2200      	movs	r2, #0
 800ca64:	2100      	movs	r1, #0
 800ca66:	f001 fdc1 	bl	800e5ec <__kernel_sinf>
 800ca6a:	e004      	b.n	800ca76 <sinf+0x22>
 800ca6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca70:	db04      	blt.n	800ca7c <sinf+0x28>
 800ca72:	f7f4 f855 	bl	8000b20 <__aeabi_fsub>
 800ca76:	b003      	add	sp, #12
 800ca78:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca7c:	4669      	mov	r1, sp
 800ca7e:	f001 f8cf 	bl	800dc20 <__ieee754_rem_pio2f>
 800ca82:	f000 0003 	and.w	r0, r0, #3
 800ca86:	2801      	cmp	r0, #1
 800ca88:	d006      	beq.n	800ca98 <sinf+0x44>
 800ca8a:	2802      	cmp	r0, #2
 800ca8c:	d009      	beq.n	800caa2 <sinf+0x4e>
 800ca8e:	b980      	cbnz	r0, 800cab2 <sinf+0x5e>
 800ca90:	2201      	movs	r2, #1
 800ca92:	9901      	ldr	r1, [sp, #4]
 800ca94:	9800      	ldr	r0, [sp, #0]
 800ca96:	e7e6      	b.n	800ca66 <sinf+0x12>
 800ca98:	9901      	ldr	r1, [sp, #4]
 800ca9a:	9800      	ldr	r0, [sp, #0]
 800ca9c:	f001 fa70 	bl	800df80 <__kernel_cosf>
 800caa0:	e7e9      	b.n	800ca76 <sinf+0x22>
 800caa2:	2201      	movs	r2, #1
 800caa4:	9901      	ldr	r1, [sp, #4]
 800caa6:	9800      	ldr	r0, [sp, #0]
 800caa8:	f001 fda0 	bl	800e5ec <__kernel_sinf>
 800caac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cab0:	e7e1      	b.n	800ca76 <sinf+0x22>
 800cab2:	9901      	ldr	r1, [sp, #4]
 800cab4:	9800      	ldr	r0, [sp, #0]
 800cab6:	f001 fa63 	bl	800df80 <__kernel_cosf>
 800caba:	e7f7      	b.n	800caac <sinf+0x58>
 800cabc:	3f490fd8 	.word	0x3f490fd8

0800cac0 <pow>:
 800cac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac4:	461f      	mov	r7, r3
 800cac6:	4680      	mov	r8, r0
 800cac8:	4689      	mov	r9, r1
 800caca:	4616      	mov	r6, r2
 800cacc:	f000 f91c 	bl	800cd08 <__ieee754_pow>
 800cad0:	4b4d      	ldr	r3, [pc, #308]	; (800cc08 <pow+0x148>)
 800cad2:	4604      	mov	r4, r0
 800cad4:	f993 3000 	ldrsb.w	r3, [r3]
 800cad8:	460d      	mov	r5, r1
 800cada:	3301      	adds	r3, #1
 800cadc:	d015      	beq.n	800cb0a <pow+0x4a>
 800cade:	4632      	mov	r2, r6
 800cae0:	463b      	mov	r3, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	4639      	mov	r1, r7
 800cae6:	f7f3 ff89 	bl	80009fc <__aeabi_dcmpun>
 800caea:	b970      	cbnz	r0, 800cb0a <pow+0x4a>
 800caec:	4642      	mov	r2, r8
 800caee:	464b      	mov	r3, r9
 800caf0:	4640      	mov	r0, r8
 800caf2:	4649      	mov	r1, r9
 800caf4:	f7f3 ff82 	bl	80009fc <__aeabi_dcmpun>
 800caf8:	2200      	movs	r2, #0
 800cafa:	2300      	movs	r3, #0
 800cafc:	b148      	cbz	r0, 800cb12 <pow+0x52>
 800cafe:	4630      	mov	r0, r6
 800cb00:	4639      	mov	r1, r7
 800cb02:	f7f3 ff49 	bl	8000998 <__aeabi_dcmpeq>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d17b      	bne.n	800cc02 <pow+0x142>
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb12:	4640      	mov	r0, r8
 800cb14:	4649      	mov	r1, r9
 800cb16:	f7f3 ff3f 	bl	8000998 <__aeabi_dcmpeq>
 800cb1a:	b1e0      	cbz	r0, 800cb56 <pow+0x96>
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4630      	mov	r0, r6
 800cb22:	4639      	mov	r1, r7
 800cb24:	f7f3 ff38 	bl	8000998 <__aeabi_dcmpeq>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d16a      	bne.n	800cc02 <pow+0x142>
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	4639      	mov	r1, r7
 800cb30:	f001 fdd5 	bl	800e6de <finite>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d0e8      	beq.n	800cb0a <pow+0x4a>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	4639      	mov	r1, r7
 800cb40:	f7f3 ff34 	bl	80009ac <__aeabi_dcmplt>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d0e0      	beq.n	800cb0a <pow+0x4a>
 800cb48:	f001 ff82 	bl	800ea50 <__errno>
 800cb4c:	2321      	movs	r3, #33	; 0x21
 800cb4e:	2400      	movs	r4, #0
 800cb50:	6003      	str	r3, [r0, #0]
 800cb52:	4d2e      	ldr	r5, [pc, #184]	; (800cc0c <pow+0x14c>)
 800cb54:	e7d9      	b.n	800cb0a <pow+0x4a>
 800cb56:	4620      	mov	r0, r4
 800cb58:	4629      	mov	r1, r5
 800cb5a:	f001 fdc0 	bl	800e6de <finite>
 800cb5e:	bba8      	cbnz	r0, 800cbcc <pow+0x10c>
 800cb60:	4640      	mov	r0, r8
 800cb62:	4649      	mov	r1, r9
 800cb64:	f001 fdbb 	bl	800e6de <finite>
 800cb68:	b380      	cbz	r0, 800cbcc <pow+0x10c>
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	f001 fdb6 	bl	800e6de <finite>
 800cb72:	b358      	cbz	r0, 800cbcc <pow+0x10c>
 800cb74:	4622      	mov	r2, r4
 800cb76:	462b      	mov	r3, r5
 800cb78:	4620      	mov	r0, r4
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f7f3 ff3e 	bl	80009fc <__aeabi_dcmpun>
 800cb80:	b160      	cbz	r0, 800cb9c <pow+0xdc>
 800cb82:	f001 ff65 	bl	800ea50 <__errno>
 800cb86:	2321      	movs	r3, #33	; 0x21
 800cb88:	2200      	movs	r2, #0
 800cb8a:	6003      	str	r3, [r0, #0]
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4610      	mov	r0, r2
 800cb90:	4619      	mov	r1, r3
 800cb92:	f7f3 fdc3 	bl	800071c <__aeabi_ddiv>
 800cb96:	4604      	mov	r4, r0
 800cb98:	460d      	mov	r5, r1
 800cb9a:	e7b6      	b.n	800cb0a <pow+0x4a>
 800cb9c:	f001 ff58 	bl	800ea50 <__errno>
 800cba0:	2322      	movs	r3, #34	; 0x22
 800cba2:	2200      	movs	r2, #0
 800cba4:	6003      	str	r3, [r0, #0]
 800cba6:	4649      	mov	r1, r9
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f7f3 fefe 	bl	80009ac <__aeabi_dcmplt>
 800cbb0:	2400      	movs	r4, #0
 800cbb2:	b148      	cbz	r0, 800cbc8 <pow+0x108>
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	f001 fd9e 	bl	800e6f8 <rint>
 800cbbc:	4632      	mov	r2, r6
 800cbbe:	463b      	mov	r3, r7
 800cbc0:	f7f3 feea 	bl	8000998 <__aeabi_dcmpeq>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d0c4      	beq.n	800cb52 <pow+0x92>
 800cbc8:	4d11      	ldr	r5, [pc, #68]	; (800cc10 <pow+0x150>)
 800cbca:	e79e      	b.n	800cb0a <pow+0x4a>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2300      	movs	r3, #0
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 fee0 	bl	8000998 <__aeabi_dcmpeq>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d096      	beq.n	800cb0a <pow+0x4a>
 800cbdc:	4640      	mov	r0, r8
 800cbde:	4649      	mov	r1, r9
 800cbe0:	f001 fd7d 	bl	800e6de <finite>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d090      	beq.n	800cb0a <pow+0x4a>
 800cbe8:	4630      	mov	r0, r6
 800cbea:	4639      	mov	r1, r7
 800cbec:	f001 fd77 	bl	800e6de <finite>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d08a      	beq.n	800cb0a <pow+0x4a>
 800cbf4:	f001 ff2c 	bl	800ea50 <__errno>
 800cbf8:	2322      	movs	r3, #34	; 0x22
 800cbfa:	2400      	movs	r4, #0
 800cbfc:	2500      	movs	r5, #0
 800cbfe:	6003      	str	r3, [r0, #0]
 800cc00:	e783      	b.n	800cb0a <pow+0x4a>
 800cc02:	2400      	movs	r4, #0
 800cc04:	4d03      	ldr	r5, [pc, #12]	; (800cc14 <pow+0x154>)
 800cc06:	e780      	b.n	800cb0a <pow+0x4a>
 800cc08:	2000000d 	.word	0x2000000d
 800cc0c:	fff00000 	.word	0xfff00000
 800cc10:	7ff00000 	.word	0x7ff00000
 800cc14:	3ff00000 	.word	0x3ff00000

0800cc18 <sqrt>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	f000 fd89 	bl	800d734 <__ieee754_sqrt>
 800cc22:	4b12      	ldr	r3, [pc, #72]	; (800cc6c <sqrt+0x54>)
 800cc24:	4604      	mov	r4, r0
 800cc26:	f993 3000 	ldrsb.w	r3, [r3]
 800cc2a:	460d      	mov	r5, r1
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	d019      	beq.n	800cc64 <sqrt+0x4c>
 800cc30:	4632      	mov	r2, r6
 800cc32:	463b      	mov	r3, r7
 800cc34:	4630      	mov	r0, r6
 800cc36:	4639      	mov	r1, r7
 800cc38:	f7f3 fee0 	bl	80009fc <__aeabi_dcmpun>
 800cc3c:	b990      	cbnz	r0, 800cc64 <sqrt+0x4c>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2300      	movs	r3, #0
 800cc42:	4630      	mov	r0, r6
 800cc44:	4639      	mov	r1, r7
 800cc46:	f7f3 feb1 	bl	80009ac <__aeabi_dcmplt>
 800cc4a:	b158      	cbz	r0, 800cc64 <sqrt+0x4c>
 800cc4c:	f001 ff00 	bl	800ea50 <__errno>
 800cc50:	2321      	movs	r3, #33	; 0x21
 800cc52:	2200      	movs	r2, #0
 800cc54:	6003      	str	r3, [r0, #0]
 800cc56:	2300      	movs	r3, #0
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	f7f3 fd5e 	bl	800071c <__aeabi_ddiv>
 800cc60:	4604      	mov	r4, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	4620      	mov	r0, r4
 800cc66:	4629      	mov	r1, r5
 800cc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000000d 	.word	0x2000000d

0800cc70 <asinf>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4604      	mov	r4, r0
 800cc74:	f000 fe0a 	bl	800d88c <__ieee754_asinf>
 800cc78:	4b0e      	ldr	r3, [pc, #56]	; (800ccb4 <asinf+0x44>)
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	f993 3000 	ldrsb.w	r3, [r3]
 800cc80:	3301      	adds	r3, #1
 800cc82:	d015      	beq.n	800ccb0 <asinf+0x40>
 800cc84:	4621      	mov	r1, r4
 800cc86:	4620      	mov	r0, r4
 800cc88:	f7f4 fa1a 	bl	80010c0 <__aeabi_fcmpun>
 800cc8c:	b980      	cbnz	r0, 800ccb0 <asinf+0x40>
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f7ff fedc 	bl	800ca4c <fabsf>
 800cc94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc98:	f7f4 fa08 	bl	80010ac <__aeabi_fcmpgt>
 800cc9c:	b140      	cbz	r0, 800ccb0 <asinf+0x40>
 800cc9e:	f001 fed7 	bl	800ea50 <__errno>
 800cca2:	2321      	movs	r3, #33	; 0x21
 800cca4:	6003      	str	r3, [r0, #0]
 800cca6:	4804      	ldr	r0, [pc, #16]	; (800ccb8 <asinf+0x48>)
 800cca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccac:	f001 be78 	b.w	800e9a0 <nanf>
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}
 800ccb4:	2000000d 	.word	0x2000000d
 800ccb8:	0800edd0 	.word	0x0800edd0

0800ccbc <atan2f>:
 800ccbc:	f000 bf2a 	b.w	800db14 <__ieee754_atan2f>

0800ccc0 <sqrtf>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	f001 f90a 	bl	800dedc <__ieee754_sqrtf>
 800ccc8:	4b0d      	ldr	r3, [pc, #52]	; (800cd00 <sqrtf+0x40>)
 800ccca:	4604      	mov	r4, r0
 800cccc:	f993 3000 	ldrsb.w	r3, [r3]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	d012      	beq.n	800ccfa <sqrtf+0x3a>
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f7f4 f9f2 	bl	80010c0 <__aeabi_fcmpun>
 800ccdc:	b968      	cbnz	r0, 800ccfa <sqrtf+0x3a>
 800ccde:	2100      	movs	r1, #0
 800cce0:	4628      	mov	r0, r5
 800cce2:	f7f4 f9c5 	bl	8001070 <__aeabi_fcmplt>
 800cce6:	b140      	cbz	r0, 800ccfa <sqrtf+0x3a>
 800cce8:	f001 feb2 	bl	800ea50 <__errno>
 800ccec:	2321      	movs	r3, #33	; 0x21
 800ccee:	2100      	movs	r1, #0
 800ccf0:	6003      	str	r3, [r0, #0]
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	f7f4 f8d2 	bl	8000e9c <__aeabi_fdiv>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	bd38      	pop	{r3, r4, r5, pc}
 800ccfe:	bf00      	nop
 800cd00:	2000000d 	.word	0x2000000d
 800cd04:	00000000 	.word	0x00000000

0800cd08 <__ieee754_pow>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	b093      	sub	sp, #76	; 0x4c
 800cd0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd12:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800cd16:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cd1a:	ea55 0302 	orrs.w	r3, r5, r2
 800cd1e:	4607      	mov	r7, r0
 800cd20:	4688      	mov	r8, r1
 800cd22:	f000 84bf 	beq.w	800d6a4 <__ieee754_pow+0x99c>
 800cd26:	4b7e      	ldr	r3, [pc, #504]	; (800cf20 <__ieee754_pow+0x218>)
 800cd28:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cd2c:	429c      	cmp	r4, r3
 800cd2e:	4689      	mov	r9, r1
 800cd30:	4682      	mov	sl, r0
 800cd32:	dc09      	bgt.n	800cd48 <__ieee754_pow+0x40>
 800cd34:	d103      	bne.n	800cd3e <__ieee754_pow+0x36>
 800cd36:	b978      	cbnz	r0, 800cd58 <__ieee754_pow+0x50>
 800cd38:	42a5      	cmp	r5, r4
 800cd3a:	dd02      	ble.n	800cd42 <__ieee754_pow+0x3a>
 800cd3c:	e00c      	b.n	800cd58 <__ieee754_pow+0x50>
 800cd3e:	429d      	cmp	r5, r3
 800cd40:	dc02      	bgt.n	800cd48 <__ieee754_pow+0x40>
 800cd42:	429d      	cmp	r5, r3
 800cd44:	d10e      	bne.n	800cd64 <__ieee754_pow+0x5c>
 800cd46:	b16a      	cbz	r2, 800cd64 <__ieee754_pow+0x5c>
 800cd48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cd4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd50:	ea54 030a 	orrs.w	r3, r4, sl
 800cd54:	f000 84a6 	beq.w	800d6a4 <__ieee754_pow+0x99c>
 800cd58:	4872      	ldr	r0, [pc, #456]	; (800cf24 <__ieee754_pow+0x21c>)
 800cd5a:	b013      	add	sp, #76	; 0x4c
 800cd5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	f001 bcc4 	b.w	800e6ec <nan>
 800cd64:	f1b9 0f00 	cmp.w	r9, #0
 800cd68:	da39      	bge.n	800cdde <__ieee754_pow+0xd6>
 800cd6a:	4b6f      	ldr	r3, [pc, #444]	; (800cf28 <__ieee754_pow+0x220>)
 800cd6c:	429d      	cmp	r5, r3
 800cd6e:	dc54      	bgt.n	800ce1a <__ieee754_pow+0x112>
 800cd70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cd74:	429d      	cmp	r5, r3
 800cd76:	f340 84a6 	ble.w	800d6c6 <__ieee754_pow+0x9be>
 800cd7a:	152b      	asrs	r3, r5, #20
 800cd7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd80:	2b14      	cmp	r3, #20
 800cd82:	dd0f      	ble.n	800cda4 <__ieee754_pow+0x9c>
 800cd84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cd88:	fa22 f103 	lsr.w	r1, r2, r3
 800cd8c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd90:	4293      	cmp	r3, r2
 800cd92:	f040 8498 	bne.w	800d6c6 <__ieee754_pow+0x9be>
 800cd96:	f001 0101 	and.w	r1, r1, #1
 800cd9a:	f1c1 0302 	rsb	r3, r1, #2
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	b182      	cbz	r2, 800cdc4 <__ieee754_pow+0xbc>
 800cda2:	e05e      	b.n	800ce62 <__ieee754_pow+0x15a>
 800cda4:	2a00      	cmp	r2, #0
 800cda6:	d15a      	bne.n	800ce5e <__ieee754_pow+0x156>
 800cda8:	f1c3 0314 	rsb	r3, r3, #20
 800cdac:	fa45 f103 	asr.w	r1, r5, r3
 800cdb0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb4:	42ab      	cmp	r3, r5
 800cdb6:	f040 8483 	bne.w	800d6c0 <__ieee754_pow+0x9b8>
 800cdba:	f001 0101 	and.w	r1, r1, #1
 800cdbe:	f1c1 0302 	rsb	r3, r1, #2
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4b59      	ldr	r3, [pc, #356]	; (800cf2c <__ieee754_pow+0x224>)
 800cdc6:	429d      	cmp	r5, r3
 800cdc8:	d130      	bne.n	800ce2c <__ieee754_pow+0x124>
 800cdca:	2e00      	cmp	r6, #0
 800cdcc:	f280 8474 	bge.w	800d6b8 <__ieee754_pow+0x9b0>
 800cdd0:	463a      	mov	r2, r7
 800cdd2:	4643      	mov	r3, r8
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	4955      	ldr	r1, [pc, #340]	; (800cf2c <__ieee754_pow+0x224>)
 800cdd8:	f7f3 fca0 	bl	800071c <__aeabi_ddiv>
 800cddc:	e02f      	b.n	800ce3e <__ieee754_pow+0x136>
 800cdde:	2300      	movs	r3, #0
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	2a00      	cmp	r2, #0
 800cde4:	d13d      	bne.n	800ce62 <__ieee754_pow+0x15a>
 800cde6:	4b4e      	ldr	r3, [pc, #312]	; (800cf20 <__ieee754_pow+0x218>)
 800cde8:	429d      	cmp	r5, r3
 800cdea:	d1eb      	bne.n	800cdc4 <__ieee754_pow+0xbc>
 800cdec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cdf0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cdf4:	ea53 030a 	orrs.w	r3, r3, sl
 800cdf8:	f000 8454 	beq.w	800d6a4 <__ieee754_pow+0x99c>
 800cdfc:	4b4c      	ldr	r3, [pc, #304]	; (800cf30 <__ieee754_pow+0x228>)
 800cdfe:	429c      	cmp	r4, r3
 800ce00:	dd0d      	ble.n	800ce1e <__ieee754_pow+0x116>
 800ce02:	2e00      	cmp	r6, #0
 800ce04:	f280 8454 	bge.w	800d6b0 <__ieee754_pow+0x9a8>
 800ce08:	f04f 0b00 	mov.w	fp, #0
 800ce0c:	f04f 0c00 	mov.w	ip, #0
 800ce10:	4658      	mov	r0, fp
 800ce12:	4661      	mov	r1, ip
 800ce14:	b013      	add	sp, #76	; 0x4c
 800ce16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	e7e0      	b.n	800cde0 <__ieee754_pow+0xd8>
 800ce1e:	2e00      	cmp	r6, #0
 800ce20:	daf2      	bge.n	800ce08 <__ieee754_pow+0x100>
 800ce22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ce26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ce2a:	e7f1      	b.n	800ce10 <__ieee754_pow+0x108>
 800ce2c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ce30:	d108      	bne.n	800ce44 <__ieee754_pow+0x13c>
 800ce32:	463a      	mov	r2, r7
 800ce34:	4643      	mov	r3, r8
 800ce36:	4638      	mov	r0, r7
 800ce38:	4641      	mov	r1, r8
 800ce3a:	f7f3 fb45 	bl	80004c8 <__aeabi_dmul>
 800ce3e:	4683      	mov	fp, r0
 800ce40:	468c      	mov	ip, r1
 800ce42:	e7e5      	b.n	800ce10 <__ieee754_pow+0x108>
 800ce44:	4b3b      	ldr	r3, [pc, #236]	; (800cf34 <__ieee754_pow+0x22c>)
 800ce46:	429e      	cmp	r6, r3
 800ce48:	d10b      	bne.n	800ce62 <__ieee754_pow+0x15a>
 800ce4a:	f1b9 0f00 	cmp.w	r9, #0
 800ce4e:	db08      	blt.n	800ce62 <__ieee754_pow+0x15a>
 800ce50:	4638      	mov	r0, r7
 800ce52:	4641      	mov	r1, r8
 800ce54:	b013      	add	sp, #76	; 0x4c
 800ce56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5a:	f000 bc6b 	b.w	800d734 <__ieee754_sqrt>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	4638      	mov	r0, r7
 800ce64:	4641      	mov	r1, r8
 800ce66:	f001 fc37 	bl	800e6d8 <fabs>
 800ce6a:	4683      	mov	fp, r0
 800ce6c:	468c      	mov	ip, r1
 800ce6e:	f1ba 0f00 	cmp.w	sl, #0
 800ce72:	d129      	bne.n	800cec8 <__ieee754_pow+0x1c0>
 800ce74:	b124      	cbz	r4, 800ce80 <__ieee754_pow+0x178>
 800ce76:	4b2d      	ldr	r3, [pc, #180]	; (800cf2c <__ieee754_pow+0x224>)
 800ce78:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d123      	bne.n	800cec8 <__ieee754_pow+0x1c0>
 800ce80:	2e00      	cmp	r6, #0
 800ce82:	da07      	bge.n	800ce94 <__ieee754_pow+0x18c>
 800ce84:	465a      	mov	r2, fp
 800ce86:	4663      	mov	r3, ip
 800ce88:	2000      	movs	r0, #0
 800ce8a:	4928      	ldr	r1, [pc, #160]	; (800cf2c <__ieee754_pow+0x224>)
 800ce8c:	f7f3 fc46 	bl	800071c <__aeabi_ddiv>
 800ce90:	4683      	mov	fp, r0
 800ce92:	468c      	mov	ip, r1
 800ce94:	f1b9 0f00 	cmp.w	r9, #0
 800ce98:	daba      	bge.n	800ce10 <__ieee754_pow+0x108>
 800ce9a:	9b00      	ldr	r3, [sp, #0]
 800ce9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cea0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cea4:	4323      	orrs	r3, r4
 800cea6:	d108      	bne.n	800ceba <__ieee754_pow+0x1b2>
 800cea8:	465a      	mov	r2, fp
 800ceaa:	4663      	mov	r3, ip
 800ceac:	4658      	mov	r0, fp
 800ceae:	4661      	mov	r1, ip
 800ceb0:	f7f3 f952 	bl	8000158 <__aeabi_dsub>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	e78e      	b.n	800cdd8 <__ieee754_pow+0xd0>
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d1a7      	bne.n	800ce10 <__ieee754_pow+0x108>
 800cec0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cec4:	469c      	mov	ip, r3
 800cec6:	e7a3      	b.n	800ce10 <__ieee754_pow+0x108>
 800cec8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800cecc:	3b01      	subs	r3, #1
 800cece:	930c      	str	r3, [sp, #48]	; 0x30
 800ced0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ced2:	9b00      	ldr	r3, [sp, #0]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	d104      	bne.n	800cee2 <__ieee754_pow+0x1da>
 800ced8:	463a      	mov	r2, r7
 800ceda:	4643      	mov	r3, r8
 800cedc:	4638      	mov	r0, r7
 800cede:	4641      	mov	r1, r8
 800cee0:	e7e6      	b.n	800ceb0 <__ieee754_pow+0x1a8>
 800cee2:	4b15      	ldr	r3, [pc, #84]	; (800cf38 <__ieee754_pow+0x230>)
 800cee4:	429d      	cmp	r5, r3
 800cee6:	f340 80f9 	ble.w	800d0dc <__ieee754_pow+0x3d4>
 800ceea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ceee:	429d      	cmp	r5, r3
 800cef0:	4b0f      	ldr	r3, [pc, #60]	; (800cf30 <__ieee754_pow+0x228>)
 800cef2:	dd09      	ble.n	800cf08 <__ieee754_pow+0x200>
 800cef4:	429c      	cmp	r4, r3
 800cef6:	dc0c      	bgt.n	800cf12 <__ieee754_pow+0x20a>
 800cef8:	2e00      	cmp	r6, #0
 800cefa:	da85      	bge.n	800ce08 <__ieee754_pow+0x100>
 800cefc:	a306      	add	r3, pc, #24	; (adr r3, 800cf18 <__ieee754_pow+0x210>)
 800cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf02:	4610      	mov	r0, r2
 800cf04:	4619      	mov	r1, r3
 800cf06:	e798      	b.n	800ce3a <__ieee754_pow+0x132>
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	dbf5      	blt.n	800cef8 <__ieee754_pow+0x1f0>
 800cf0c:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <__ieee754_pow+0x224>)
 800cf0e:	429c      	cmp	r4, r3
 800cf10:	dd14      	ble.n	800cf3c <__ieee754_pow+0x234>
 800cf12:	2e00      	cmp	r6, #0
 800cf14:	dcf2      	bgt.n	800cefc <__ieee754_pow+0x1f4>
 800cf16:	e777      	b.n	800ce08 <__ieee754_pow+0x100>
 800cf18:	8800759c 	.word	0x8800759c
 800cf1c:	7e37e43c 	.word	0x7e37e43c
 800cf20:	7ff00000 	.word	0x7ff00000
 800cf24:	0800edd0 	.word	0x0800edd0
 800cf28:	433fffff 	.word	0x433fffff
 800cf2c:	3ff00000 	.word	0x3ff00000
 800cf30:	3fefffff 	.word	0x3fefffff
 800cf34:	3fe00000 	.word	0x3fe00000
 800cf38:	41e00000 	.word	0x41e00000
 800cf3c:	4661      	mov	r1, ip
 800cf3e:	2200      	movs	r2, #0
 800cf40:	4658      	mov	r0, fp
 800cf42:	4b61      	ldr	r3, [pc, #388]	; (800d0c8 <__ieee754_pow+0x3c0>)
 800cf44:	f7f3 f908 	bl	8000158 <__aeabi_dsub>
 800cf48:	a355      	add	r3, pc, #340	; (adr r3, 800d0a0 <__ieee754_pow+0x398>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460d      	mov	r5, r1
 800cf52:	f7f3 fab9 	bl	80004c8 <__aeabi_dmul>
 800cf56:	a354      	add	r3, pc, #336	; (adr r3, 800d0a8 <__ieee754_pow+0x3a0>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	4620      	mov	r0, r4
 800cf62:	4629      	mov	r1, r5
 800cf64:	f7f3 fab0 	bl	80004c8 <__aeabi_dmul>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4682      	mov	sl, r0
 800cf6c:	468b      	mov	fp, r1
 800cf6e:	4620      	mov	r0, r4
 800cf70:	4629      	mov	r1, r5
 800cf72:	4b56      	ldr	r3, [pc, #344]	; (800d0cc <__ieee754_pow+0x3c4>)
 800cf74:	f7f3 faa8 	bl	80004c8 <__aeabi_dmul>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	a14c      	add	r1, pc, #304	; (adr r1, 800d0b0 <__ieee754_pow+0x3a8>)
 800cf7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf82:	f7f3 f8e9 	bl	8000158 <__aeabi_dsub>
 800cf86:	4622      	mov	r2, r4
 800cf88:	462b      	mov	r3, r5
 800cf8a:	f7f3 fa9d 	bl	80004c8 <__aeabi_dmul>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	2000      	movs	r0, #0
 800cf94:	494e      	ldr	r1, [pc, #312]	; (800d0d0 <__ieee754_pow+0x3c8>)
 800cf96:	f7f3 f8df 	bl	8000158 <__aeabi_dsub>
 800cf9a:	4622      	mov	r2, r4
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	4689      	mov	r9, r1
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7f3 fa8f 	bl	80004c8 <__aeabi_dmul>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	460b      	mov	r3, r1
 800cfae:	4640      	mov	r0, r8
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	f7f3 fa89 	bl	80004c8 <__aeabi_dmul>
 800cfb6:	a340      	add	r3, pc, #256	; (adr r3, 800d0b8 <__ieee754_pow+0x3b0>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 fa84 	bl	80004c8 <__aeabi_dmul>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4650      	mov	r0, sl
 800cfc6:	4659      	mov	r1, fp
 800cfc8:	f7f3 f8c6 	bl	8000158 <__aeabi_dsub>
 800cfcc:	f04f 0a00 	mov.w	sl, #0
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	460d      	mov	r5, r1
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f7f3 f8be 	bl	800015c <__adddf3>
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	463b      	mov	r3, r7
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	468b      	mov	fp, r1
 800cfe8:	f7f3 f8b6 	bl	8000158 <__aeabi_dsub>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4620      	mov	r0, r4
 800cff2:	4629      	mov	r1, r5
 800cff4:	f7f3 f8b0 	bl	8000158 <__aeabi_dsub>
 800cff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cffc:	9b00      	ldr	r3, [sp, #0]
 800cffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d000:	3b01      	subs	r3, #1
 800d002:	4313      	orrs	r3, r2
 800d004:	f04f 0600 	mov.w	r6, #0
 800d008:	f04f 0200 	mov.w	r2, #0
 800d00c:	bf0c      	ite	eq
 800d00e:	4b31      	ldreq	r3, [pc, #196]	; (800d0d4 <__ieee754_pow+0x3cc>)
 800d010:	4b2d      	ldrne	r3, [pc, #180]	; (800d0c8 <__ieee754_pow+0x3c0>)
 800d012:	4604      	mov	r4, r0
 800d014:	460d      	mov	r5, r1
 800d016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d01a:	e9cd 2300 	strd	r2, r3, [sp]
 800d01e:	4632      	mov	r2, r6
 800d020:	463b      	mov	r3, r7
 800d022:	f7f3 f899 	bl	8000158 <__aeabi_dsub>
 800d026:	4652      	mov	r2, sl
 800d028:	465b      	mov	r3, fp
 800d02a:	f7f3 fa4d 	bl	80004c8 <__aeabi_dmul>
 800d02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d032:	4680      	mov	r8, r0
 800d034:	4689      	mov	r9, r1
 800d036:	4620      	mov	r0, r4
 800d038:	4629      	mov	r1, r5
 800d03a:	f7f3 fa45 	bl	80004c8 <__aeabi_dmul>
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	4640      	mov	r0, r8
 800d044:	4649      	mov	r1, r9
 800d046:	f7f3 f889 	bl	800015c <__adddf3>
 800d04a:	4632      	mov	r2, r6
 800d04c:	463b      	mov	r3, r7
 800d04e:	4680      	mov	r8, r0
 800d050:	4689      	mov	r9, r1
 800d052:	4650      	mov	r0, sl
 800d054:	4659      	mov	r1, fp
 800d056:	f7f3 fa37 	bl	80004c8 <__aeabi_dmul>
 800d05a:	4604      	mov	r4, r0
 800d05c:	460d      	mov	r5, r1
 800d05e:	460b      	mov	r3, r1
 800d060:	4602      	mov	r2, r0
 800d062:	4649      	mov	r1, r9
 800d064:	4640      	mov	r0, r8
 800d066:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d06a:	f7f3 f877 	bl	800015c <__adddf3>
 800d06e:	4b1a      	ldr	r3, [pc, #104]	; (800d0d8 <__ieee754_pow+0x3d0>)
 800d070:	4682      	mov	sl, r0
 800d072:	4299      	cmp	r1, r3
 800d074:	460f      	mov	r7, r1
 800d076:	460e      	mov	r6, r1
 800d078:	f340 82ed 	ble.w	800d656 <__ieee754_pow+0x94e>
 800d07c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d080:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d084:	4303      	orrs	r3, r0
 800d086:	f000 81e7 	beq.w	800d458 <__ieee754_pow+0x750>
 800d08a:	a30d      	add	r3, pc, #52	; (adr r3, 800d0c0 <__ieee754_pow+0x3b8>)
 800d08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d090:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d094:	f7f3 fa18 	bl	80004c8 <__aeabi_dmul>
 800d098:	a309      	add	r3, pc, #36	; (adr r3, 800d0c0 <__ieee754_pow+0x3b8>)
 800d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09e:	e6cc      	b.n	800ce3a <__ieee754_pow+0x132>
 800d0a0:	60000000 	.word	0x60000000
 800d0a4:	3ff71547 	.word	0x3ff71547
 800d0a8:	f85ddf44 	.word	0xf85ddf44
 800d0ac:	3e54ae0b 	.word	0x3e54ae0b
 800d0b0:	55555555 	.word	0x55555555
 800d0b4:	3fd55555 	.word	0x3fd55555
 800d0b8:	652b82fe 	.word	0x652b82fe
 800d0bc:	3ff71547 	.word	0x3ff71547
 800d0c0:	8800759c 	.word	0x8800759c
 800d0c4:	7e37e43c 	.word	0x7e37e43c
 800d0c8:	3ff00000 	.word	0x3ff00000
 800d0cc:	3fd00000 	.word	0x3fd00000
 800d0d0:	3fe00000 	.word	0x3fe00000
 800d0d4:	bff00000 	.word	0xbff00000
 800d0d8:	408fffff 	.word	0x408fffff
 800d0dc:	4bd4      	ldr	r3, [pc, #848]	; (800d430 <__ieee754_pow+0x728>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	ea09 0303 	and.w	r3, r9, r3
 800d0e4:	b943      	cbnz	r3, 800d0f8 <__ieee754_pow+0x3f0>
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	4661      	mov	r1, ip
 800d0ea:	4bd2      	ldr	r3, [pc, #840]	; (800d434 <__ieee754_pow+0x72c>)
 800d0ec:	f7f3 f9ec 	bl	80004c8 <__aeabi_dmul>
 800d0f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d0f4:	4683      	mov	fp, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	1523      	asrs	r3, r4, #20
 800d0fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0fe:	4413      	add	r3, r2
 800d100:	930b      	str	r3, [sp, #44]	; 0x2c
 800d102:	4bcd      	ldr	r3, [pc, #820]	; (800d438 <__ieee754_pow+0x730>)
 800d104:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d108:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d10c:	429c      	cmp	r4, r3
 800d10e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d112:	dd08      	ble.n	800d126 <__ieee754_pow+0x41e>
 800d114:	4bc9      	ldr	r3, [pc, #804]	; (800d43c <__ieee754_pow+0x734>)
 800d116:	429c      	cmp	r4, r3
 800d118:	f340 819c 	ble.w	800d454 <__ieee754_pow+0x74c>
 800d11c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d11e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d122:	3301      	adds	r3, #1
 800d124:	930b      	str	r3, [sp, #44]	; 0x2c
 800d126:	2600      	movs	r6, #0
 800d128:	00f3      	lsls	r3, r6, #3
 800d12a:	930d      	str	r3, [sp, #52]	; 0x34
 800d12c:	4bc4      	ldr	r3, [pc, #784]	; (800d440 <__ieee754_pow+0x738>)
 800d12e:	4658      	mov	r0, fp
 800d130:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d134:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d138:	4629      	mov	r1, r5
 800d13a:	461a      	mov	r2, r3
 800d13c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d140:	4623      	mov	r3, r4
 800d142:	f7f3 f809 	bl	8000158 <__aeabi_dsub>
 800d146:	46da      	mov	sl, fp
 800d148:	462b      	mov	r3, r5
 800d14a:	4652      	mov	r2, sl
 800d14c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d150:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d154:	f7f3 f802 	bl	800015c <__adddf3>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	2000      	movs	r0, #0
 800d15e:	49b9      	ldr	r1, [pc, #740]	; (800d444 <__ieee754_pow+0x73c>)
 800d160:	f7f3 fadc 	bl	800071c <__aeabi_ddiv>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d16c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d170:	f7f3 f9aa 	bl	80004c8 <__aeabi_dmul>
 800d174:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d178:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d17c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d180:	2300      	movs	r3, #0
 800d182:	2200      	movs	r2, #0
 800d184:	46ab      	mov	fp, r5
 800d186:	106d      	asrs	r5, r5, #1
 800d188:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d18c:	9304      	str	r3, [sp, #16]
 800d18e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d192:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d196:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d19a:	4640      	mov	r0, r8
 800d19c:	4649      	mov	r1, r9
 800d19e:	4614      	mov	r4, r2
 800d1a0:	461d      	mov	r5, r3
 800d1a2:	f7f3 f991 	bl	80004c8 <__aeabi_dmul>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d1ae:	f7f2 ffd3 	bl	8000158 <__aeabi_dsub>
 800d1b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	460f      	mov	r7, r1
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	4629      	mov	r1, r5
 800d1be:	f7f2 ffcb 	bl	8000158 <__aeabi_dsub>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	4659      	mov	r1, fp
 800d1ca:	f7f2 ffc5 	bl	8000158 <__aeabi_dsub>
 800d1ce:	4642      	mov	r2, r8
 800d1d0:	464b      	mov	r3, r9
 800d1d2:	f7f3 f979 	bl	80004c8 <__aeabi_dmul>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4630      	mov	r0, r6
 800d1dc:	4639      	mov	r1, r7
 800d1de:	f7f2 ffbb 	bl	8000158 <__aeabi_dsub>
 800d1e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1e6:	f7f3 f96f 	bl	80004c8 <__aeabi_dmul>
 800d1ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f7f3 f967 	bl	80004c8 <__aeabi_dmul>
 800d1fa:	a37b      	add	r3, pc, #492	; (adr r3, 800d3e8 <__ieee754_pow+0x6e0>)
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	4604      	mov	r4, r0
 800d202:	460d      	mov	r5, r1
 800d204:	f7f3 f960 	bl	80004c8 <__aeabi_dmul>
 800d208:	a379      	add	r3, pc, #484	; (adr r3, 800d3f0 <__ieee754_pow+0x6e8>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f2 ffa5 	bl	800015c <__adddf3>
 800d212:	4622      	mov	r2, r4
 800d214:	462b      	mov	r3, r5
 800d216:	f7f3 f957 	bl	80004c8 <__aeabi_dmul>
 800d21a:	a377      	add	r3, pc, #476	; (adr r3, 800d3f8 <__ieee754_pow+0x6f0>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f7f2 ff9c 	bl	800015c <__adddf3>
 800d224:	4622      	mov	r2, r4
 800d226:	462b      	mov	r3, r5
 800d228:	f7f3 f94e 	bl	80004c8 <__aeabi_dmul>
 800d22c:	a374      	add	r3, pc, #464	; (adr r3, 800d400 <__ieee754_pow+0x6f8>)
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	f7f2 ff93 	bl	800015c <__adddf3>
 800d236:	4622      	mov	r2, r4
 800d238:	462b      	mov	r3, r5
 800d23a:	f7f3 f945 	bl	80004c8 <__aeabi_dmul>
 800d23e:	a372      	add	r3, pc, #456	; (adr r3, 800d408 <__ieee754_pow+0x700>)
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	f7f2 ff8a 	bl	800015c <__adddf3>
 800d248:	4622      	mov	r2, r4
 800d24a:	462b      	mov	r3, r5
 800d24c:	f7f3 f93c 	bl	80004c8 <__aeabi_dmul>
 800d250:	a36f      	add	r3, pc, #444	; (adr r3, 800d410 <__ieee754_pow+0x708>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	f7f2 ff81 	bl	800015c <__adddf3>
 800d25a:	4622      	mov	r2, r4
 800d25c:	4606      	mov	r6, r0
 800d25e:	460f      	mov	r7, r1
 800d260:	462b      	mov	r3, r5
 800d262:	4620      	mov	r0, r4
 800d264:	4629      	mov	r1, r5
 800d266:	f7f3 f92f 	bl	80004c8 <__aeabi_dmul>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4630      	mov	r0, r6
 800d270:	4639      	mov	r1, r7
 800d272:	f7f3 f929 	bl	80004c8 <__aeabi_dmul>
 800d276:	4604      	mov	r4, r0
 800d278:	460d      	mov	r5, r1
 800d27a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d27e:	4642      	mov	r2, r8
 800d280:	464b      	mov	r3, r9
 800d282:	f7f2 ff6b 	bl	800015c <__adddf3>
 800d286:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d28a:	f7f3 f91d 	bl	80004c8 <__aeabi_dmul>
 800d28e:	4622      	mov	r2, r4
 800d290:	462b      	mov	r3, r5
 800d292:	f7f2 ff63 	bl	800015c <__adddf3>
 800d296:	4642      	mov	r2, r8
 800d298:	4606      	mov	r6, r0
 800d29a:	460f      	mov	r7, r1
 800d29c:	464b      	mov	r3, r9
 800d29e:	4640      	mov	r0, r8
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	f7f3 f911 	bl	80004c8 <__aeabi_dmul>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	4b67      	ldr	r3, [pc, #412]	; (800d448 <__ieee754_pow+0x740>)
 800d2aa:	4682      	mov	sl, r0
 800d2ac:	468b      	mov	fp, r1
 800d2ae:	f7f2 ff55 	bl	800015c <__adddf3>
 800d2b2:	4632      	mov	r2, r6
 800d2b4:	463b      	mov	r3, r7
 800d2b6:	f7f2 ff51 	bl	800015c <__adddf3>
 800d2ba:	9c04      	ldr	r4, [sp, #16]
 800d2bc:	460d      	mov	r5, r1
 800d2be:	4622      	mov	r2, r4
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	f7f3 f8ff 	bl	80004c8 <__aeabi_dmul>
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4689      	mov	r9, r1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	4b5c      	ldr	r3, [pc, #368]	; (800d448 <__ieee754_pow+0x740>)
 800d2d6:	f7f2 ff3f 	bl	8000158 <__aeabi_dsub>
 800d2da:	4652      	mov	r2, sl
 800d2dc:	465b      	mov	r3, fp
 800d2de:	f7f2 ff3b 	bl	8000158 <__aeabi_dsub>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	f7f2 ff35 	bl	8000158 <__aeabi_dsub>
 800d2ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2f2:	f7f3 f8e9 	bl	80004c8 <__aeabi_dmul>
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	460f      	mov	r7, r1
 800d2fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d300:	462b      	mov	r3, r5
 800d302:	f7f3 f8e1 	bl	80004c8 <__aeabi_dmul>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4630      	mov	r0, r6
 800d30c:	4639      	mov	r1, r7
 800d30e:	f7f2 ff25 	bl	800015c <__adddf3>
 800d312:	4606      	mov	r6, r0
 800d314:	460f      	mov	r7, r1
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4640      	mov	r0, r8
 800d31c:	4649      	mov	r1, r9
 800d31e:	f7f2 ff1d 	bl	800015c <__adddf3>
 800d322:	a33d      	add	r3, pc, #244	; (adr r3, 800d418 <__ieee754_pow+0x710>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	9c04      	ldr	r4, [sp, #16]
 800d32a:	460d      	mov	r5, r1
 800d32c:	4620      	mov	r0, r4
 800d32e:	f7f3 f8cb 	bl	80004c8 <__aeabi_dmul>
 800d332:	4642      	mov	r2, r8
 800d334:	464b      	mov	r3, r9
 800d336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d33a:	4620      	mov	r0, r4
 800d33c:	4629      	mov	r1, r5
 800d33e:	f7f2 ff0b 	bl	8000158 <__aeabi_dsub>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4630      	mov	r0, r6
 800d348:	4639      	mov	r1, r7
 800d34a:	f7f2 ff05 	bl	8000158 <__aeabi_dsub>
 800d34e:	a334      	add	r3, pc, #208	; (adr r3, 800d420 <__ieee754_pow+0x718>)
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	f7f3 f8b8 	bl	80004c8 <__aeabi_dmul>
 800d358:	a333      	add	r3, pc, #204	; (adr r3, 800d428 <__ieee754_pow+0x720>)
 800d35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35e:	4606      	mov	r6, r0
 800d360:	460f      	mov	r7, r1
 800d362:	4620      	mov	r0, r4
 800d364:	4629      	mov	r1, r5
 800d366:	f7f3 f8af 	bl	80004c8 <__aeabi_dmul>
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	4630      	mov	r0, r6
 800d370:	4639      	mov	r1, r7
 800d372:	f7f2 fef3 	bl	800015c <__adddf3>
 800d376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d378:	4b34      	ldr	r3, [pc, #208]	; (800d44c <__ieee754_pow+0x744>)
 800d37a:	4413      	add	r3, r2
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f2 feec 	bl	800015c <__adddf3>
 800d384:	4680      	mov	r8, r0
 800d386:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d388:	4689      	mov	r9, r1
 800d38a:	f7f3 f833 	bl	80003f4 <__aeabi_i2d>
 800d38e:	4604      	mov	r4, r0
 800d390:	460d      	mov	r5, r1
 800d392:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d394:	4b2e      	ldr	r3, [pc, #184]	; (800d450 <__ieee754_pow+0x748>)
 800d396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d39a:	4413      	add	r3, r2
 800d39c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d3a0:	4642      	mov	r2, r8
 800d3a2:	464b      	mov	r3, r9
 800d3a4:	f7f2 feda 	bl	800015c <__adddf3>
 800d3a8:	4632      	mov	r2, r6
 800d3aa:	463b      	mov	r3, r7
 800d3ac:	f7f2 fed6 	bl	800015c <__adddf3>
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	462b      	mov	r3, r5
 800d3b4:	f7f2 fed2 	bl	800015c <__adddf3>
 800d3b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d3bc:	4622      	mov	r2, r4
 800d3be:	462b      	mov	r3, r5
 800d3c0:	4650      	mov	r0, sl
 800d3c2:	468b      	mov	fp, r1
 800d3c4:	f7f2 fec8 	bl	8000158 <__aeabi_dsub>
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	463b      	mov	r3, r7
 800d3cc:	f7f2 fec4 	bl	8000158 <__aeabi_dsub>
 800d3d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3d4:	f7f2 fec0 	bl	8000158 <__aeabi_dsub>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4640      	mov	r0, r8
 800d3de:	4649      	mov	r1, r9
 800d3e0:	e608      	b.n	800cff4 <__ieee754_pow+0x2ec>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	4a454eef 	.word	0x4a454eef
 800d3ec:	3fca7e28 	.word	0x3fca7e28
 800d3f0:	93c9db65 	.word	0x93c9db65
 800d3f4:	3fcd864a 	.word	0x3fcd864a
 800d3f8:	a91d4101 	.word	0xa91d4101
 800d3fc:	3fd17460 	.word	0x3fd17460
 800d400:	518f264d 	.word	0x518f264d
 800d404:	3fd55555 	.word	0x3fd55555
 800d408:	db6fabff 	.word	0xdb6fabff
 800d40c:	3fdb6db6 	.word	0x3fdb6db6
 800d410:	33333303 	.word	0x33333303
 800d414:	3fe33333 	.word	0x3fe33333
 800d418:	e0000000 	.word	0xe0000000
 800d41c:	3feec709 	.word	0x3feec709
 800d420:	dc3a03fd 	.word	0xdc3a03fd
 800d424:	3feec709 	.word	0x3feec709
 800d428:	145b01f5 	.word	0x145b01f5
 800d42c:	be3e2fe0 	.word	0xbe3e2fe0
 800d430:	7ff00000 	.word	0x7ff00000
 800d434:	43400000 	.word	0x43400000
 800d438:	0003988e 	.word	0x0003988e
 800d43c:	000bb679 	.word	0x000bb679
 800d440:	0800edd8 	.word	0x0800edd8
 800d444:	3ff00000 	.word	0x3ff00000
 800d448:	40080000 	.word	0x40080000
 800d44c:	0800edf8 	.word	0x0800edf8
 800d450:	0800ede8 	.word	0x0800ede8
 800d454:	2601      	movs	r6, #1
 800d456:	e667      	b.n	800d128 <__ieee754_pow+0x420>
 800d458:	a39d      	add	r3, pc, #628	; (adr r3, 800d6d0 <__ieee754_pow+0x9c8>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	4640      	mov	r0, r8
 800d460:	4649      	mov	r1, r9
 800d462:	f7f2 fe7b 	bl	800015c <__adddf3>
 800d466:	4622      	mov	r2, r4
 800d468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d46c:	462b      	mov	r3, r5
 800d46e:	4650      	mov	r0, sl
 800d470:	4639      	mov	r1, r7
 800d472:	f7f2 fe71 	bl	8000158 <__aeabi_dsub>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d47e:	f7f3 fab3 	bl	80009e8 <__aeabi_dcmpgt>
 800d482:	2800      	cmp	r0, #0
 800d484:	f47f ae01 	bne.w	800d08a <__ieee754_pow+0x382>
 800d488:	4aa5      	ldr	r2, [pc, #660]	; (800d720 <__ieee754_pow+0xa18>)
 800d48a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d48e:	4293      	cmp	r3, r2
 800d490:	f340 8103 	ble.w	800d69a <__ieee754_pow+0x992>
 800d494:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d498:	2000      	movs	r0, #0
 800d49a:	151b      	asrs	r3, r3, #20
 800d49c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d4a0:	fa4a f303 	asr.w	r3, sl, r3
 800d4a4:	4433      	add	r3, r6
 800d4a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d4aa:	4f9e      	ldr	r7, [pc, #632]	; (800d724 <__ieee754_pow+0xa1c>)
 800d4ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d4b0:	4117      	asrs	r7, r2
 800d4b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d4b6:	ea23 0107 	bic.w	r1, r3, r7
 800d4ba:	f1c2 0214 	rsb	r2, r2, #20
 800d4be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	fa4a fa02 	asr.w	sl, sl, r2
 800d4c8:	2e00      	cmp	r6, #0
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	bfb8      	it	lt
 800d4d2:	f1ca 0a00 	rsblt	sl, sl, #0
 800d4d6:	f7f2 fe3f 	bl	8000158 <__aeabi_dsub>
 800d4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	4642      	mov	r2, r8
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	f7f2 fe38 	bl	800015c <__adddf3>
 800d4ec:	a37a      	add	r3, pc, #488	; (adr r3, 800d6d8 <__ieee754_pow+0x9d0>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	f7f2 ffe7 	bl	80004c8 <__aeabi_dmul>
 800d4fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	4620      	mov	r0, r4
 800d504:	4629      	mov	r1, r5
 800d506:	f7f2 fe27 	bl	8000158 <__aeabi_dsub>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4640      	mov	r0, r8
 800d510:	4649      	mov	r1, r9
 800d512:	f7f2 fe21 	bl	8000158 <__aeabi_dsub>
 800d516:	a372      	add	r3, pc, #456	; (adr r3, 800d6e0 <__ieee754_pow+0x9d8>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f2 ffd4 	bl	80004c8 <__aeabi_dmul>
 800d520:	a371      	add	r3, pc, #452	; (adr r3, 800d6e8 <__ieee754_pow+0x9e0>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	4680      	mov	r8, r0
 800d528:	4689      	mov	r9, r1
 800d52a:	4620      	mov	r0, r4
 800d52c:	4629      	mov	r1, r5
 800d52e:	f7f2 ffcb 	bl	80004c8 <__aeabi_dmul>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4640      	mov	r0, r8
 800d538:	4649      	mov	r1, r9
 800d53a:	f7f2 fe0f 	bl	800015c <__adddf3>
 800d53e:	4604      	mov	r4, r0
 800d540:	460d      	mov	r5, r1
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	4630      	mov	r0, r6
 800d548:	4639      	mov	r1, r7
 800d54a:	f7f2 fe07 	bl	800015c <__adddf3>
 800d54e:	4632      	mov	r2, r6
 800d550:	463b      	mov	r3, r7
 800d552:	4680      	mov	r8, r0
 800d554:	4689      	mov	r9, r1
 800d556:	f7f2 fdff 	bl	8000158 <__aeabi_dsub>
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	f7f2 fdf9 	bl	8000158 <__aeabi_dsub>
 800d566:	4642      	mov	r2, r8
 800d568:	4606      	mov	r6, r0
 800d56a:	460f      	mov	r7, r1
 800d56c:	464b      	mov	r3, r9
 800d56e:	4640      	mov	r0, r8
 800d570:	4649      	mov	r1, r9
 800d572:	f7f2 ffa9 	bl	80004c8 <__aeabi_dmul>
 800d576:	a35e      	add	r3, pc, #376	; (adr r3, 800d6f0 <__ieee754_pow+0x9e8>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	4604      	mov	r4, r0
 800d57e:	460d      	mov	r5, r1
 800d580:	f7f2 ffa2 	bl	80004c8 <__aeabi_dmul>
 800d584:	a35c      	add	r3, pc, #368	; (adr r3, 800d6f8 <__ieee754_pow+0x9f0>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f2 fde5 	bl	8000158 <__aeabi_dsub>
 800d58e:	4622      	mov	r2, r4
 800d590:	462b      	mov	r3, r5
 800d592:	f7f2 ff99 	bl	80004c8 <__aeabi_dmul>
 800d596:	a35a      	add	r3, pc, #360	; (adr r3, 800d700 <__ieee754_pow+0x9f8>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f7f2 fdde 	bl	800015c <__adddf3>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	462b      	mov	r3, r5
 800d5a4:	f7f2 ff90 	bl	80004c8 <__aeabi_dmul>
 800d5a8:	a357      	add	r3, pc, #348	; (adr r3, 800d708 <__ieee754_pow+0xa00>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	f7f2 fdd3 	bl	8000158 <__aeabi_dsub>
 800d5b2:	4622      	mov	r2, r4
 800d5b4:	462b      	mov	r3, r5
 800d5b6:	f7f2 ff87 	bl	80004c8 <__aeabi_dmul>
 800d5ba:	a355      	add	r3, pc, #340	; (adr r3, 800d710 <__ieee754_pow+0xa08>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	f7f2 fdcc 	bl	800015c <__adddf3>
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	462b      	mov	r3, r5
 800d5c8:	f7f2 ff7e 	bl	80004c8 <__aeabi_dmul>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	4640      	mov	r0, r8
 800d5d2:	4649      	mov	r1, r9
 800d5d4:	f7f2 fdc0 	bl	8000158 <__aeabi_dsub>
 800d5d8:	4604      	mov	r4, r0
 800d5da:	460d      	mov	r5, r1
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	f7f2 ff70 	bl	80004c8 <__aeabi_dmul>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	f7f2 fdaf 	bl	8000158 <__aeabi_dsub>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d602:	f7f3 f88b 	bl	800071c <__aeabi_ddiv>
 800d606:	4632      	mov	r2, r6
 800d608:	4604      	mov	r4, r0
 800d60a:	460d      	mov	r5, r1
 800d60c:	463b      	mov	r3, r7
 800d60e:	4640      	mov	r0, r8
 800d610:	4649      	mov	r1, r9
 800d612:	f7f2 ff59 	bl	80004c8 <__aeabi_dmul>
 800d616:	4632      	mov	r2, r6
 800d618:	463b      	mov	r3, r7
 800d61a:	f7f2 fd9f 	bl	800015c <__adddf3>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4620      	mov	r0, r4
 800d624:	4629      	mov	r1, r5
 800d626:	f7f2 fd97 	bl	8000158 <__aeabi_dsub>
 800d62a:	4642      	mov	r2, r8
 800d62c:	464b      	mov	r3, r9
 800d62e:	f7f2 fd93 	bl	8000158 <__aeabi_dsub>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	2000      	movs	r0, #0
 800d638:	493b      	ldr	r1, [pc, #236]	; (800d728 <__ieee754_pow+0xa20>)
 800d63a:	f7f2 fd8d 	bl	8000158 <__aeabi_dsub>
 800d63e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d642:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d646:	da2b      	bge.n	800d6a0 <__ieee754_pow+0x998>
 800d648:	4652      	mov	r2, sl
 800d64a:	f001 f8e1 	bl	800e810 <scalbn>
 800d64e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d652:	f7ff bbf2 	b.w	800ce3a <__ieee754_pow+0x132>
 800d656:	4b35      	ldr	r3, [pc, #212]	; (800d72c <__ieee754_pow+0xa24>)
 800d658:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d65c:	429f      	cmp	r7, r3
 800d65e:	f77f af13 	ble.w	800d488 <__ieee754_pow+0x780>
 800d662:	4b33      	ldr	r3, [pc, #204]	; (800d730 <__ieee754_pow+0xa28>)
 800d664:	440b      	add	r3, r1
 800d666:	4303      	orrs	r3, r0
 800d668:	d00b      	beq.n	800d682 <__ieee754_pow+0x97a>
 800d66a:	a32b      	add	r3, pc, #172	; (adr r3, 800d718 <__ieee754_pow+0xa10>)
 800d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d670:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d674:	f7f2 ff28 	bl	80004c8 <__aeabi_dmul>
 800d678:	a327      	add	r3, pc, #156	; (adr r3, 800d718 <__ieee754_pow+0xa10>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f7ff bbdc 	b.w	800ce3a <__ieee754_pow+0x132>
 800d682:	4622      	mov	r2, r4
 800d684:	462b      	mov	r3, r5
 800d686:	f7f2 fd67 	bl	8000158 <__aeabi_dsub>
 800d68a:	4642      	mov	r2, r8
 800d68c:	464b      	mov	r3, r9
 800d68e:	f7f3 f9a1 	bl	80009d4 <__aeabi_dcmpge>
 800d692:	2800      	cmp	r0, #0
 800d694:	f43f aef8 	beq.w	800d488 <__ieee754_pow+0x780>
 800d698:	e7e7      	b.n	800d66a <__ieee754_pow+0x962>
 800d69a:	f04f 0a00 	mov.w	sl, #0
 800d69e:	e71e      	b.n	800d4de <__ieee754_pow+0x7d6>
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	e7d4      	b.n	800d64e <__ieee754_pow+0x946>
 800d6a4:	f04f 0b00 	mov.w	fp, #0
 800d6a8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d728 <__ieee754_pow+0xa20>
 800d6ac:	f7ff bbb0 	b.w	800ce10 <__ieee754_pow+0x108>
 800d6b0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d6b4:	f7ff bbac 	b.w	800ce10 <__ieee754_pow+0x108>
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	4641      	mov	r1, r8
 800d6bc:	f7ff bbbf 	b.w	800ce3e <__ieee754_pow+0x136>
 800d6c0:	9200      	str	r2, [sp, #0]
 800d6c2:	f7ff bb7f 	b.w	800cdc4 <__ieee754_pow+0xbc>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f7ff bb69 	b.w	800cd9e <__ieee754_pow+0x96>
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	652b82fe 	.word	0x652b82fe
 800d6d4:	3c971547 	.word	0x3c971547
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	3fe62e43 	.word	0x3fe62e43
 800d6e0:	fefa39ef 	.word	0xfefa39ef
 800d6e4:	3fe62e42 	.word	0x3fe62e42
 800d6e8:	0ca86c39 	.word	0x0ca86c39
 800d6ec:	be205c61 	.word	0xbe205c61
 800d6f0:	72bea4d0 	.word	0x72bea4d0
 800d6f4:	3e663769 	.word	0x3e663769
 800d6f8:	c5d26bf1 	.word	0xc5d26bf1
 800d6fc:	3ebbbd41 	.word	0x3ebbbd41
 800d700:	af25de2c 	.word	0xaf25de2c
 800d704:	3f11566a 	.word	0x3f11566a
 800d708:	16bebd93 	.word	0x16bebd93
 800d70c:	3f66c16c 	.word	0x3f66c16c
 800d710:	5555553e 	.word	0x5555553e
 800d714:	3fc55555 	.word	0x3fc55555
 800d718:	c2f8f359 	.word	0xc2f8f359
 800d71c:	01a56e1f 	.word	0x01a56e1f
 800d720:	3fe00000 	.word	0x3fe00000
 800d724:	000fffff 	.word	0x000fffff
 800d728:	3ff00000 	.word	0x3ff00000
 800d72c:	4090cbff 	.word	0x4090cbff
 800d730:	3f6f3400 	.word	0x3f6f3400

0800d734 <__ieee754_sqrt>:
 800d734:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d888 <__ieee754_sqrt+0x154>
 800d738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73c:	ea3c 0c01 	bics.w	ip, ip, r1
 800d740:	460b      	mov	r3, r1
 800d742:	4606      	mov	r6, r0
 800d744:	460d      	mov	r5, r1
 800d746:	460a      	mov	r2, r1
 800d748:	4607      	mov	r7, r0
 800d74a:	4604      	mov	r4, r0
 800d74c:	d10e      	bne.n	800d76c <__ieee754_sqrt+0x38>
 800d74e:	4602      	mov	r2, r0
 800d750:	f7f2 feba 	bl	80004c8 <__aeabi_dmul>
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	4630      	mov	r0, r6
 800d75a:	4629      	mov	r1, r5
 800d75c:	f7f2 fcfe 	bl	800015c <__adddf3>
 800d760:	4606      	mov	r6, r0
 800d762:	460d      	mov	r5, r1
 800d764:	4630      	mov	r0, r6
 800d766:	4629      	mov	r1, r5
 800d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76c:	2900      	cmp	r1, #0
 800d76e:	dc0d      	bgt.n	800d78c <__ieee754_sqrt+0x58>
 800d770:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d774:	ea5c 0707 	orrs.w	r7, ip, r7
 800d778:	d0f4      	beq.n	800d764 <__ieee754_sqrt+0x30>
 800d77a:	b139      	cbz	r1, 800d78c <__ieee754_sqrt+0x58>
 800d77c:	4602      	mov	r2, r0
 800d77e:	f7f2 fceb 	bl	8000158 <__aeabi_dsub>
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	f7f2 ffc9 	bl	800071c <__aeabi_ddiv>
 800d78a:	e7e9      	b.n	800d760 <__ieee754_sqrt+0x2c>
 800d78c:	1512      	asrs	r2, r2, #20
 800d78e:	d074      	beq.n	800d87a <__ieee754_sqrt+0x146>
 800d790:	2000      	movs	r0, #0
 800d792:	07d5      	lsls	r5, r2, #31
 800d794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d798:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800d79c:	bf5e      	ittt	pl
 800d79e:	0fe3      	lsrpl	r3, r4, #31
 800d7a0:	0064      	lslpl	r4, r4, #1
 800d7a2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800d7a6:	0fe3      	lsrs	r3, r4, #31
 800d7a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d7ac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d7b0:	2516      	movs	r5, #22
 800d7b2:	4601      	mov	r1, r0
 800d7b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d7b8:	1076      	asrs	r6, r6, #1
 800d7ba:	0064      	lsls	r4, r4, #1
 800d7bc:	188f      	adds	r7, r1, r2
 800d7be:	429f      	cmp	r7, r3
 800d7c0:	bfde      	ittt	le
 800d7c2:	1bdb      	suble	r3, r3, r7
 800d7c4:	18b9      	addle	r1, r7, r2
 800d7c6:	1880      	addle	r0, r0, r2
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	3d01      	subs	r5, #1
 800d7cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d7d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d7d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d7d8:	d1f0      	bne.n	800d7bc <__ieee754_sqrt+0x88>
 800d7da:	462a      	mov	r2, r5
 800d7dc:	f04f 0e20 	mov.w	lr, #32
 800d7e0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d7e4:	428b      	cmp	r3, r1
 800d7e6:	eb07 0c05 	add.w	ip, r7, r5
 800d7ea:	dc02      	bgt.n	800d7f2 <__ieee754_sqrt+0xbe>
 800d7ec:	d113      	bne.n	800d816 <__ieee754_sqrt+0xe2>
 800d7ee:	45a4      	cmp	ip, r4
 800d7f0:	d811      	bhi.n	800d816 <__ieee754_sqrt+0xe2>
 800d7f2:	f1bc 0f00 	cmp.w	ip, #0
 800d7f6:	eb0c 0507 	add.w	r5, ip, r7
 800d7fa:	da43      	bge.n	800d884 <__ieee754_sqrt+0x150>
 800d7fc:	2d00      	cmp	r5, #0
 800d7fe:	db41      	blt.n	800d884 <__ieee754_sqrt+0x150>
 800d800:	f101 0801 	add.w	r8, r1, #1
 800d804:	1a5b      	subs	r3, r3, r1
 800d806:	4641      	mov	r1, r8
 800d808:	45a4      	cmp	ip, r4
 800d80a:	bf88      	it	hi
 800d80c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d810:	eba4 040c 	sub.w	r4, r4, ip
 800d814:	443a      	add	r2, r7
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	f1be 0e01 	subs.w	lr, lr, #1
 800d81c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d820:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800d824:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d828:	d1dc      	bne.n	800d7e4 <__ieee754_sqrt+0xb0>
 800d82a:	4323      	orrs	r3, r4
 800d82c:	d006      	beq.n	800d83c <__ieee754_sqrt+0x108>
 800d82e:	1c54      	adds	r4, r2, #1
 800d830:	bf0b      	itete	eq
 800d832:	4672      	moveq	r2, lr
 800d834:	3201      	addne	r2, #1
 800d836:	3001      	addeq	r0, #1
 800d838:	f022 0201 	bicne.w	r2, r2, #1
 800d83c:	1043      	asrs	r3, r0, #1
 800d83e:	07c1      	lsls	r1, r0, #31
 800d840:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d844:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d848:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d84c:	bf48      	it	mi
 800d84e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d852:	4610      	mov	r0, r2
 800d854:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d858:	e782      	b.n	800d760 <__ieee754_sqrt+0x2c>
 800d85a:	0ae3      	lsrs	r3, r4, #11
 800d85c:	3915      	subs	r1, #21
 800d85e:	0564      	lsls	r4, r4, #21
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0fa      	beq.n	800d85a <__ieee754_sqrt+0x126>
 800d864:	02de      	lsls	r6, r3, #11
 800d866:	d50a      	bpl.n	800d87e <__ieee754_sqrt+0x14a>
 800d868:	f1c2 0020 	rsb	r0, r2, #32
 800d86c:	fa24 f000 	lsr.w	r0, r4, r0
 800d870:	1e55      	subs	r5, r2, #1
 800d872:	4094      	lsls	r4, r2
 800d874:	4303      	orrs	r3, r0
 800d876:	1b4a      	subs	r2, r1, r5
 800d878:	e78a      	b.n	800d790 <__ieee754_sqrt+0x5c>
 800d87a:	4611      	mov	r1, r2
 800d87c:	e7f0      	b.n	800d860 <__ieee754_sqrt+0x12c>
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	3201      	adds	r2, #1
 800d882:	e7ef      	b.n	800d864 <__ieee754_sqrt+0x130>
 800d884:	4688      	mov	r8, r1
 800d886:	e7bd      	b.n	800d804 <__ieee754_sqrt+0xd0>
 800d888:	7ff00000 	.word	0x7ff00000

0800d88c <__ieee754_asinf>:
 800d88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d890:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800d894:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d898:	4604      	mov	r4, r0
 800d89a:	4605      	mov	r5, r0
 800d89c:	d10c      	bne.n	800d8b8 <__ieee754_asinf+0x2c>
 800d89e:	498d      	ldr	r1, [pc, #564]	; (800dad4 <__ieee754_asinf+0x248>)
 800d8a0:	f7f3 fa48 	bl	8000d34 <__aeabi_fmul>
 800d8a4:	498c      	ldr	r1, [pc, #560]	; (800dad8 <__ieee754_asinf+0x24c>)
 800d8a6:	4605      	mov	r5, r0
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f7f3 fa43 	bl	8000d34 <__aeabi_fmul>
 800d8ae:	4601      	mov	r1, r0
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f7f3 f937 	bl	8000b24 <__addsf3>
 800d8b6:	e006      	b.n	800d8c6 <__ieee754_asinf+0x3a>
 800d8b8:	dd07      	ble.n	800d8ca <__ieee754_asinf+0x3e>
 800d8ba:	4601      	mov	r1, r0
 800d8bc:	f7f3 f930 	bl	8000b20 <__aeabi_fsub>
 800d8c0:	4601      	mov	r1, r0
 800d8c2:	f7f3 faeb 	bl	8000e9c <__aeabi_fdiv>
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	e00e      	b.n	800d8e8 <__ieee754_asinf+0x5c>
 800d8ca:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800d8ce:	da58      	bge.n	800d982 <__ieee754_asinf+0xf6>
 800d8d0:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800d8d4:	da0b      	bge.n	800d8ee <__ieee754_asinf+0x62>
 800d8d6:	4981      	ldr	r1, [pc, #516]	; (800dadc <__ieee754_asinf+0x250>)
 800d8d8:	f7f3 f924 	bl	8000b24 <__addsf3>
 800d8dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d8e0:	f7f3 fbe4 	bl	80010ac <__aeabi_fcmpgt>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d04c      	beq.n	800d982 <__ieee754_asinf+0xf6>
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ee:	4601      	mov	r1, r0
 800d8f0:	f7f3 fa20 	bl	8000d34 <__aeabi_fmul>
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	497a      	ldr	r1, [pc, #488]	; (800dae0 <__ieee754_asinf+0x254>)
 800d8f8:	f7f3 fa1c 	bl	8000d34 <__aeabi_fmul>
 800d8fc:	4979      	ldr	r1, [pc, #484]	; (800dae4 <__ieee754_asinf+0x258>)
 800d8fe:	f7f3 f911 	bl	8000b24 <__addsf3>
 800d902:	4629      	mov	r1, r5
 800d904:	f7f3 fa16 	bl	8000d34 <__aeabi_fmul>
 800d908:	4977      	ldr	r1, [pc, #476]	; (800dae8 <__ieee754_asinf+0x25c>)
 800d90a:	f7f3 f909 	bl	8000b20 <__aeabi_fsub>
 800d90e:	4629      	mov	r1, r5
 800d910:	f7f3 fa10 	bl	8000d34 <__aeabi_fmul>
 800d914:	4975      	ldr	r1, [pc, #468]	; (800daec <__ieee754_asinf+0x260>)
 800d916:	f7f3 f905 	bl	8000b24 <__addsf3>
 800d91a:	4629      	mov	r1, r5
 800d91c:	f7f3 fa0a 	bl	8000d34 <__aeabi_fmul>
 800d920:	4973      	ldr	r1, [pc, #460]	; (800daf0 <__ieee754_asinf+0x264>)
 800d922:	f7f3 f8fd 	bl	8000b20 <__aeabi_fsub>
 800d926:	4629      	mov	r1, r5
 800d928:	f7f3 fa04 	bl	8000d34 <__aeabi_fmul>
 800d92c:	4971      	ldr	r1, [pc, #452]	; (800daf4 <__ieee754_asinf+0x268>)
 800d92e:	f7f3 f8f9 	bl	8000b24 <__addsf3>
 800d932:	4629      	mov	r1, r5
 800d934:	f7f3 f9fe 	bl	8000d34 <__aeabi_fmul>
 800d938:	496f      	ldr	r1, [pc, #444]	; (800daf8 <__ieee754_asinf+0x26c>)
 800d93a:	4606      	mov	r6, r0
 800d93c:	4628      	mov	r0, r5
 800d93e:	f7f3 f9f9 	bl	8000d34 <__aeabi_fmul>
 800d942:	496e      	ldr	r1, [pc, #440]	; (800dafc <__ieee754_asinf+0x270>)
 800d944:	f7f3 f8ec 	bl	8000b20 <__aeabi_fsub>
 800d948:	4629      	mov	r1, r5
 800d94a:	f7f3 f9f3 	bl	8000d34 <__aeabi_fmul>
 800d94e:	496c      	ldr	r1, [pc, #432]	; (800db00 <__ieee754_asinf+0x274>)
 800d950:	f7f3 f8e8 	bl	8000b24 <__addsf3>
 800d954:	4629      	mov	r1, r5
 800d956:	f7f3 f9ed 	bl	8000d34 <__aeabi_fmul>
 800d95a:	496a      	ldr	r1, [pc, #424]	; (800db04 <__ieee754_asinf+0x278>)
 800d95c:	f7f3 f8e0 	bl	8000b20 <__aeabi_fsub>
 800d960:	4629      	mov	r1, r5
 800d962:	f7f3 f9e7 	bl	8000d34 <__aeabi_fmul>
 800d966:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d96a:	f7f3 f8db 	bl	8000b24 <__addsf3>
 800d96e:	4601      	mov	r1, r0
 800d970:	4630      	mov	r0, r6
 800d972:	f7f3 fa93 	bl	8000e9c <__aeabi_fdiv>
 800d976:	4621      	mov	r1, r4
 800d978:	f7f3 f9dc 	bl	8000d34 <__aeabi_fmul>
 800d97c:	4601      	mov	r1, r0
 800d97e:	4620      	mov	r0, r4
 800d980:	e797      	b.n	800d8b2 <__ieee754_asinf+0x26>
 800d982:	4620      	mov	r0, r4
 800d984:	f7ff f862 	bl	800ca4c <fabsf>
 800d988:	4601      	mov	r1, r0
 800d98a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d98e:	f7f3 f8c7 	bl	8000b20 <__aeabi_fsub>
 800d992:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d996:	f7f3 f9cd 	bl	8000d34 <__aeabi_fmul>
 800d99a:	4606      	mov	r6, r0
 800d99c:	4950      	ldr	r1, [pc, #320]	; (800dae0 <__ieee754_asinf+0x254>)
 800d99e:	f7f3 f9c9 	bl	8000d34 <__aeabi_fmul>
 800d9a2:	4950      	ldr	r1, [pc, #320]	; (800dae4 <__ieee754_asinf+0x258>)
 800d9a4:	f7f3 f8be 	bl	8000b24 <__addsf3>
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	f7f3 f9c3 	bl	8000d34 <__aeabi_fmul>
 800d9ae:	494e      	ldr	r1, [pc, #312]	; (800dae8 <__ieee754_asinf+0x25c>)
 800d9b0:	f7f3 f8b6 	bl	8000b20 <__aeabi_fsub>
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	f7f3 f9bd 	bl	8000d34 <__aeabi_fmul>
 800d9ba:	494c      	ldr	r1, [pc, #304]	; (800daec <__ieee754_asinf+0x260>)
 800d9bc:	f7f3 f8b2 	bl	8000b24 <__addsf3>
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	f7f3 f9b7 	bl	8000d34 <__aeabi_fmul>
 800d9c6:	494a      	ldr	r1, [pc, #296]	; (800daf0 <__ieee754_asinf+0x264>)
 800d9c8:	f7f3 f8aa 	bl	8000b20 <__aeabi_fsub>
 800d9cc:	4631      	mov	r1, r6
 800d9ce:	f7f3 f9b1 	bl	8000d34 <__aeabi_fmul>
 800d9d2:	4948      	ldr	r1, [pc, #288]	; (800daf4 <__ieee754_asinf+0x268>)
 800d9d4:	f7f3 f8a6 	bl	8000b24 <__addsf3>
 800d9d8:	4631      	mov	r1, r6
 800d9da:	f7f3 f9ab 	bl	8000d34 <__aeabi_fmul>
 800d9de:	4946      	ldr	r1, [pc, #280]	; (800daf8 <__ieee754_asinf+0x26c>)
 800d9e0:	4681      	mov	r9, r0
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f7f3 f9a6 	bl	8000d34 <__aeabi_fmul>
 800d9e8:	4944      	ldr	r1, [pc, #272]	; (800dafc <__ieee754_asinf+0x270>)
 800d9ea:	f7f3 f899 	bl	8000b20 <__aeabi_fsub>
 800d9ee:	4631      	mov	r1, r6
 800d9f0:	f7f3 f9a0 	bl	8000d34 <__aeabi_fmul>
 800d9f4:	4942      	ldr	r1, [pc, #264]	; (800db00 <__ieee754_asinf+0x274>)
 800d9f6:	f7f3 f895 	bl	8000b24 <__addsf3>
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	f7f3 f99a 	bl	8000d34 <__aeabi_fmul>
 800da00:	4940      	ldr	r1, [pc, #256]	; (800db04 <__ieee754_asinf+0x278>)
 800da02:	f7f3 f88d 	bl	8000b20 <__aeabi_fsub>
 800da06:	4631      	mov	r1, r6
 800da08:	f7f3 f994 	bl	8000d34 <__aeabi_fmul>
 800da0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800da10:	f7f3 f888 	bl	8000b24 <__addsf3>
 800da14:	4682      	mov	sl, r0
 800da16:	4630      	mov	r0, r6
 800da18:	f000 fa60 	bl	800dedc <__ieee754_sqrtf>
 800da1c:	4b3a      	ldr	r3, [pc, #232]	; (800db08 <__ieee754_asinf+0x27c>)
 800da1e:	4607      	mov	r7, r0
 800da20:	4598      	cmp	r8, r3
 800da22:	dd1a      	ble.n	800da5a <__ieee754_asinf+0x1ce>
 800da24:	4651      	mov	r1, sl
 800da26:	4648      	mov	r0, r9
 800da28:	f7f3 fa38 	bl	8000e9c <__aeabi_fdiv>
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f3 f981 	bl	8000d34 <__aeabi_fmul>
 800da32:	4639      	mov	r1, r7
 800da34:	f7f3 f876 	bl	8000b24 <__addsf3>
 800da38:	4601      	mov	r1, r0
 800da3a:	f7f3 f873 	bl	8000b24 <__addsf3>
 800da3e:	4933      	ldr	r1, [pc, #204]	; (800db0c <__ieee754_asinf+0x280>)
 800da40:	f7f3 f870 	bl	8000b24 <__addsf3>
 800da44:	4601      	mov	r1, r0
 800da46:	4823      	ldr	r0, [pc, #140]	; (800dad4 <__ieee754_asinf+0x248>)
 800da48:	f7f3 f86a 	bl	8000b20 <__aeabi_fsub>
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	4604      	mov	r4, r0
 800da50:	f73f af4a 	bgt.w	800d8e8 <__ieee754_asinf+0x5c>
 800da54:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800da58:	e735      	b.n	800d8c6 <__ieee754_asinf+0x3a>
 800da5a:	4601      	mov	r1, r0
 800da5c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800da60:	f7f3 f860 	bl	8000b24 <__addsf3>
 800da64:	4651      	mov	r1, sl
 800da66:	4604      	mov	r4, r0
 800da68:	4648      	mov	r0, r9
 800da6a:	f7f3 fa17 	bl	8000e9c <__aeabi_fdiv>
 800da6e:	4601      	mov	r1, r0
 800da70:	4620      	mov	r0, r4
 800da72:	f7f3 f95f 	bl	8000d34 <__aeabi_fmul>
 800da76:	f028 080f 	bic.w	r8, r8, #15
 800da7a:	4681      	mov	r9, r0
 800da7c:	4641      	mov	r1, r8
 800da7e:	4640      	mov	r0, r8
 800da80:	f7f3 f958 	bl	8000d34 <__aeabi_fmul>
 800da84:	4601      	mov	r1, r0
 800da86:	4630      	mov	r0, r6
 800da88:	f7f3 f84a 	bl	8000b20 <__aeabi_fsub>
 800da8c:	4641      	mov	r1, r8
 800da8e:	4604      	mov	r4, r0
 800da90:	4638      	mov	r0, r7
 800da92:	f7f3 f847 	bl	8000b24 <__addsf3>
 800da96:	4601      	mov	r1, r0
 800da98:	4620      	mov	r0, r4
 800da9a:	f7f3 f9ff 	bl	8000e9c <__aeabi_fdiv>
 800da9e:	4601      	mov	r1, r0
 800daa0:	f7f3 f840 	bl	8000b24 <__addsf3>
 800daa4:	4601      	mov	r1, r0
 800daa6:	480c      	ldr	r0, [pc, #48]	; (800dad8 <__ieee754_asinf+0x24c>)
 800daa8:	f7f3 f83a 	bl	8000b20 <__aeabi_fsub>
 800daac:	4601      	mov	r1, r0
 800daae:	4648      	mov	r0, r9
 800dab0:	f7f3 f836 	bl	8000b20 <__aeabi_fsub>
 800dab4:	4641      	mov	r1, r8
 800dab6:	4604      	mov	r4, r0
 800dab8:	4640      	mov	r0, r8
 800daba:	f7f3 f833 	bl	8000b24 <__addsf3>
 800dabe:	4601      	mov	r1, r0
 800dac0:	4813      	ldr	r0, [pc, #76]	; (800db10 <__ieee754_asinf+0x284>)
 800dac2:	f7f3 f82d 	bl	8000b20 <__aeabi_fsub>
 800dac6:	4601      	mov	r1, r0
 800dac8:	4620      	mov	r0, r4
 800daca:	f7f3 f829 	bl	8000b20 <__aeabi_fsub>
 800dace:	4601      	mov	r1, r0
 800dad0:	480f      	ldr	r0, [pc, #60]	; (800db10 <__ieee754_asinf+0x284>)
 800dad2:	e7b9      	b.n	800da48 <__ieee754_asinf+0x1bc>
 800dad4:	3fc90fdb 	.word	0x3fc90fdb
 800dad8:	b33bbd2e 	.word	0xb33bbd2e
 800dadc:	7149f2ca 	.word	0x7149f2ca
 800dae0:	3811ef08 	.word	0x3811ef08
 800dae4:	3a4f7f04 	.word	0x3a4f7f04
 800dae8:	3d241146 	.word	0x3d241146
 800daec:	3e4e0aa8 	.word	0x3e4e0aa8
 800daf0:	3ea6b090 	.word	0x3ea6b090
 800daf4:	3e2aaaab 	.word	0x3e2aaaab
 800daf8:	3d9dc62e 	.word	0x3d9dc62e
 800dafc:	3f303361 	.word	0x3f303361
 800db00:	4001572d 	.word	0x4001572d
 800db04:	4019d139 	.word	0x4019d139
 800db08:	3f799999 	.word	0x3f799999
 800db0c:	333bbd2e 	.word	0x333bbd2e
 800db10:	3f490fdb 	.word	0x3f490fdb

0800db14 <__ieee754_atan2f>:
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db16:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800db1a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800db1e:	4603      	mov	r3, r0
 800db20:	dc05      	bgt.n	800db2e <__ieee754_atan2f+0x1a>
 800db22:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800db26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800db2a:	4607      	mov	r7, r0
 800db2c:	dd04      	ble.n	800db38 <__ieee754_atan2f+0x24>
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f2 fff8 	bl	8000b24 <__addsf3>
 800db34:	4603      	mov	r3, r0
 800db36:	e011      	b.n	800db5c <__ieee754_atan2f+0x48>
 800db38:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800db3c:	d103      	bne.n	800db46 <__ieee754_atan2f+0x32>
 800db3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db42:	f7fe be43 	b.w	800c7cc <atanf>
 800db46:	178c      	asrs	r4, r1, #30
 800db48:	f004 0402 	and.w	r4, r4, #2
 800db4c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800db50:	b932      	cbnz	r2, 800db60 <__ieee754_atan2f+0x4c>
 800db52:	2c02      	cmp	r4, #2
 800db54:	d04c      	beq.n	800dbf0 <__ieee754_atan2f+0xdc>
 800db56:	2c03      	cmp	r4, #3
 800db58:	d100      	bne.n	800db5c <__ieee754_atan2f+0x48>
 800db5a:	4b29      	ldr	r3, [pc, #164]	; (800dc00 <__ieee754_atan2f+0xec>)
 800db5c:	4618      	mov	r0, r3
 800db5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db60:	b91e      	cbnz	r6, 800db6a <__ieee754_atan2f+0x56>
 800db62:	2f00      	cmp	r7, #0
 800db64:	da4a      	bge.n	800dbfc <__ieee754_atan2f+0xe8>
 800db66:	4b27      	ldr	r3, [pc, #156]	; (800dc04 <__ieee754_atan2f+0xf0>)
 800db68:	e7f8      	b.n	800db5c <__ieee754_atan2f+0x48>
 800db6a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800db6e:	d10e      	bne.n	800db8e <__ieee754_atan2f+0x7a>
 800db70:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800db74:	f104 34ff 	add.w	r4, r4, #4294967295
 800db78:	d105      	bne.n	800db86 <__ieee754_atan2f+0x72>
 800db7a:	2c02      	cmp	r4, #2
 800db7c:	d83a      	bhi.n	800dbf4 <__ieee754_atan2f+0xe0>
 800db7e:	4b22      	ldr	r3, [pc, #136]	; (800dc08 <__ieee754_atan2f+0xf4>)
 800db80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800db84:	e7ea      	b.n	800db5c <__ieee754_atan2f+0x48>
 800db86:	2c02      	cmp	r4, #2
 800db88:	d836      	bhi.n	800dbf8 <__ieee754_atan2f+0xe4>
 800db8a:	4b20      	ldr	r3, [pc, #128]	; (800dc0c <__ieee754_atan2f+0xf8>)
 800db8c:	e7f8      	b.n	800db80 <__ieee754_atan2f+0x6c>
 800db8e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800db92:	d0e6      	beq.n	800db62 <__ieee754_atan2f+0x4e>
 800db94:	1b92      	subs	r2, r2, r6
 800db96:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800db9a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800db9e:	da17      	bge.n	800dbd0 <__ieee754_atan2f+0xbc>
 800dba0:	2900      	cmp	r1, #0
 800dba2:	da01      	bge.n	800dba8 <__ieee754_atan2f+0x94>
 800dba4:	303c      	adds	r0, #60	; 0x3c
 800dba6:	db15      	blt.n	800dbd4 <__ieee754_atan2f+0xc0>
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7f3 f977 	bl	8000e9c <__aeabi_fdiv>
 800dbae:	f7fe ff4d 	bl	800ca4c <fabsf>
 800dbb2:	f7fe fe0b 	bl	800c7cc <atanf>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2c01      	cmp	r4, #1
 800dbba:	d00d      	beq.n	800dbd8 <__ieee754_atan2f+0xc4>
 800dbbc:	2c02      	cmp	r4, #2
 800dbbe:	d00e      	beq.n	800dbde <__ieee754_atan2f+0xca>
 800dbc0:	2c00      	cmp	r4, #0
 800dbc2:	d0cb      	beq.n	800db5c <__ieee754_atan2f+0x48>
 800dbc4:	4912      	ldr	r1, [pc, #72]	; (800dc10 <__ieee754_atan2f+0xfc>)
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7f2 ffac 	bl	8000b24 <__addsf3>
 800dbcc:	4911      	ldr	r1, [pc, #68]	; (800dc14 <__ieee754_atan2f+0x100>)
 800dbce:	e00c      	b.n	800dbea <__ieee754_atan2f+0xd6>
 800dbd0:	4b11      	ldr	r3, [pc, #68]	; (800dc18 <__ieee754_atan2f+0x104>)
 800dbd2:	e7f1      	b.n	800dbb8 <__ieee754_atan2f+0xa4>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	e7ef      	b.n	800dbb8 <__ieee754_atan2f+0xa4>
 800dbd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbdc:	e7be      	b.n	800db5c <__ieee754_atan2f+0x48>
 800dbde:	490c      	ldr	r1, [pc, #48]	; (800dc10 <__ieee754_atan2f+0xfc>)
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7f2 ff9f 	bl	8000b24 <__addsf3>
 800dbe6:	4601      	mov	r1, r0
 800dbe8:	480a      	ldr	r0, [pc, #40]	; (800dc14 <__ieee754_atan2f+0x100>)
 800dbea:	f7f2 ff99 	bl	8000b20 <__aeabi_fsub>
 800dbee:	e7a1      	b.n	800db34 <__ieee754_atan2f+0x20>
 800dbf0:	4b08      	ldr	r3, [pc, #32]	; (800dc14 <__ieee754_atan2f+0x100>)
 800dbf2:	e7b3      	b.n	800db5c <__ieee754_atan2f+0x48>
 800dbf4:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <__ieee754_atan2f+0x108>)
 800dbf6:	e7b1      	b.n	800db5c <__ieee754_atan2f+0x48>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	e7af      	b.n	800db5c <__ieee754_atan2f+0x48>
 800dbfc:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <__ieee754_atan2f+0x104>)
 800dbfe:	e7ad      	b.n	800db5c <__ieee754_atan2f+0x48>
 800dc00:	c0490fdb 	.word	0xc0490fdb
 800dc04:	bfc90fdb 	.word	0xbfc90fdb
 800dc08:	0800ee08 	.word	0x0800ee08
 800dc0c:	0800ee14 	.word	0x0800ee14
 800dc10:	33bbbd2e 	.word	0x33bbbd2e
 800dc14:	40490fdb 	.word	0x40490fdb
 800dc18:	3fc90fdb 	.word	0x3fc90fdb
 800dc1c:	3f490fdb 	.word	0x3f490fdb

0800dc20 <__ieee754_rem_pio2f>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	4aa0      	ldr	r2, [pc, #640]	; (800dea8 <__ieee754_rem_pio2f+0x288>)
 800dc26:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800dc2a:	4296      	cmp	r6, r2
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	4682      	mov	sl, r0
 800dc30:	b087      	sub	sp, #28
 800dc32:	dc04      	bgt.n	800dc3e <__ieee754_rem_pio2f+0x1e>
 800dc34:	2300      	movs	r3, #0
 800dc36:	6008      	str	r0, [r1, #0]
 800dc38:	604b      	str	r3, [r1, #4]
 800dc3a:	2500      	movs	r5, #0
 800dc3c:	e01a      	b.n	800dc74 <__ieee754_rem_pio2f+0x54>
 800dc3e:	4a9b      	ldr	r2, [pc, #620]	; (800deac <__ieee754_rem_pio2f+0x28c>)
 800dc40:	4296      	cmp	r6, r2
 800dc42:	dc4b      	bgt.n	800dcdc <__ieee754_rem_pio2f+0xbc>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	499a      	ldr	r1, [pc, #616]	; (800deb0 <__ieee754_rem_pio2f+0x290>)
 800dc48:	4f9a      	ldr	r7, [pc, #616]	; (800deb4 <__ieee754_rem_pio2f+0x294>)
 800dc4a:	f026 060f 	bic.w	r6, r6, #15
 800dc4e:	dd23      	ble.n	800dc98 <__ieee754_rem_pio2f+0x78>
 800dc50:	f7f2 ff66 	bl	8000b20 <__aeabi_fsub>
 800dc54:	42be      	cmp	r6, r7
 800dc56:	4605      	mov	r5, r0
 800dc58:	d010      	beq.n	800dc7c <__ieee754_rem_pio2f+0x5c>
 800dc5a:	4997      	ldr	r1, [pc, #604]	; (800deb8 <__ieee754_rem_pio2f+0x298>)
 800dc5c:	f7f2 ff60 	bl	8000b20 <__aeabi_fsub>
 800dc60:	4601      	mov	r1, r0
 800dc62:	6020      	str	r0, [r4, #0]
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7f2 ff5b 	bl	8000b20 <__aeabi_fsub>
 800dc6a:	4993      	ldr	r1, [pc, #588]	; (800deb8 <__ieee754_rem_pio2f+0x298>)
 800dc6c:	f7f2 ff58 	bl	8000b20 <__aeabi_fsub>
 800dc70:	2501      	movs	r5, #1
 800dc72:	6060      	str	r0, [r4, #4]
 800dc74:	4628      	mov	r0, r5
 800dc76:	b007      	add	sp, #28
 800dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7c:	498f      	ldr	r1, [pc, #572]	; (800debc <__ieee754_rem_pio2f+0x29c>)
 800dc7e:	f7f2 ff4f 	bl	8000b20 <__aeabi_fsub>
 800dc82:	498f      	ldr	r1, [pc, #572]	; (800dec0 <__ieee754_rem_pio2f+0x2a0>)
 800dc84:	4605      	mov	r5, r0
 800dc86:	f7f2 ff4b 	bl	8000b20 <__aeabi_fsub>
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	6020      	str	r0, [r4, #0]
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f7f2 ff46 	bl	8000b20 <__aeabi_fsub>
 800dc94:	498a      	ldr	r1, [pc, #552]	; (800dec0 <__ieee754_rem_pio2f+0x2a0>)
 800dc96:	e7e9      	b.n	800dc6c <__ieee754_rem_pio2f+0x4c>
 800dc98:	f7f2 ff44 	bl	8000b24 <__addsf3>
 800dc9c:	42be      	cmp	r6, r7
 800dc9e:	4605      	mov	r5, r0
 800dca0:	d00e      	beq.n	800dcc0 <__ieee754_rem_pio2f+0xa0>
 800dca2:	4985      	ldr	r1, [pc, #532]	; (800deb8 <__ieee754_rem_pio2f+0x298>)
 800dca4:	f7f2 ff3e 	bl	8000b24 <__addsf3>
 800dca8:	4601      	mov	r1, r0
 800dcaa:	6020      	str	r0, [r4, #0]
 800dcac:	4628      	mov	r0, r5
 800dcae:	f7f2 ff37 	bl	8000b20 <__aeabi_fsub>
 800dcb2:	4981      	ldr	r1, [pc, #516]	; (800deb8 <__ieee754_rem_pio2f+0x298>)
 800dcb4:	f7f2 ff36 	bl	8000b24 <__addsf3>
 800dcb8:	f04f 35ff 	mov.w	r5, #4294967295
 800dcbc:	6060      	str	r0, [r4, #4]
 800dcbe:	e7d9      	b.n	800dc74 <__ieee754_rem_pio2f+0x54>
 800dcc0:	497e      	ldr	r1, [pc, #504]	; (800debc <__ieee754_rem_pio2f+0x29c>)
 800dcc2:	f7f2 ff2f 	bl	8000b24 <__addsf3>
 800dcc6:	497e      	ldr	r1, [pc, #504]	; (800dec0 <__ieee754_rem_pio2f+0x2a0>)
 800dcc8:	4605      	mov	r5, r0
 800dcca:	f7f2 ff2b 	bl	8000b24 <__addsf3>
 800dcce:	4601      	mov	r1, r0
 800dcd0:	6020      	str	r0, [r4, #0]
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f7f2 ff24 	bl	8000b20 <__aeabi_fsub>
 800dcd8:	4979      	ldr	r1, [pc, #484]	; (800dec0 <__ieee754_rem_pio2f+0x2a0>)
 800dcda:	e7eb      	b.n	800dcb4 <__ieee754_rem_pio2f+0x94>
 800dcdc:	4a79      	ldr	r2, [pc, #484]	; (800dec4 <__ieee754_rem_pio2f+0x2a4>)
 800dcde:	4296      	cmp	r6, r2
 800dce0:	f300 8091 	bgt.w	800de06 <__ieee754_rem_pio2f+0x1e6>
 800dce4:	f7fe feb2 	bl	800ca4c <fabsf>
 800dce8:	4977      	ldr	r1, [pc, #476]	; (800dec8 <__ieee754_rem_pio2f+0x2a8>)
 800dcea:	4607      	mov	r7, r0
 800dcec:	f7f3 f822 	bl	8000d34 <__aeabi_fmul>
 800dcf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dcf4:	f7f2 ff16 	bl	8000b24 <__addsf3>
 800dcf8:	f7f3 f9f8 	bl	80010ec <__aeabi_f2iz>
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	f7f2 ffc5 	bl	8000c8c <__aeabi_i2f>
 800dd02:	496b      	ldr	r1, [pc, #428]	; (800deb0 <__ieee754_rem_pio2f+0x290>)
 800dd04:	4681      	mov	r9, r0
 800dd06:	f7f3 f815 	bl	8000d34 <__aeabi_fmul>
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f7f2 ff07 	bl	8000b20 <__aeabi_fsub>
 800dd12:	4969      	ldr	r1, [pc, #420]	; (800deb8 <__ieee754_rem_pio2f+0x298>)
 800dd14:	4680      	mov	r8, r0
 800dd16:	4648      	mov	r0, r9
 800dd18:	f7f3 f80c 	bl	8000d34 <__aeabi_fmul>
 800dd1c:	2d1f      	cmp	r5, #31
 800dd1e:	4607      	mov	r7, r0
 800dd20:	dc0c      	bgt.n	800dd3c <__ieee754_rem_pio2f+0x11c>
 800dd22:	4a6a      	ldr	r2, [pc, #424]	; (800decc <__ieee754_rem_pio2f+0x2ac>)
 800dd24:	1e69      	subs	r1, r5, #1
 800dd26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dd2a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d004      	beq.n	800dd3c <__ieee754_rem_pio2f+0x11c>
 800dd32:	4639      	mov	r1, r7
 800dd34:	4640      	mov	r0, r8
 800dd36:	f7f2 fef3 	bl	8000b20 <__aeabi_fsub>
 800dd3a:	e00b      	b.n	800dd54 <__ieee754_rem_pio2f+0x134>
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	4640      	mov	r0, r8
 800dd40:	f7f2 feee 	bl	8000b20 <__aeabi_fsub>
 800dd44:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dd48:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800dd4c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800dd50:	2e08      	cmp	r6, #8
 800dd52:	dc01      	bgt.n	800dd58 <__ieee754_rem_pio2f+0x138>
 800dd54:	6020      	str	r0, [r4, #0]
 800dd56:	e026      	b.n	800dda6 <__ieee754_rem_pio2f+0x186>
 800dd58:	4958      	ldr	r1, [pc, #352]	; (800debc <__ieee754_rem_pio2f+0x29c>)
 800dd5a:	4648      	mov	r0, r9
 800dd5c:	f7f2 ffea 	bl	8000d34 <__aeabi_fmul>
 800dd60:	4607      	mov	r7, r0
 800dd62:	4601      	mov	r1, r0
 800dd64:	4640      	mov	r0, r8
 800dd66:	f7f2 fedb 	bl	8000b20 <__aeabi_fsub>
 800dd6a:	4601      	mov	r1, r0
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	4640      	mov	r0, r8
 800dd70:	f7f2 fed6 	bl	8000b20 <__aeabi_fsub>
 800dd74:	4639      	mov	r1, r7
 800dd76:	f7f2 fed3 	bl	8000b20 <__aeabi_fsub>
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	4950      	ldr	r1, [pc, #320]	; (800dec0 <__ieee754_rem_pio2f+0x2a0>)
 800dd7e:	4648      	mov	r0, r9
 800dd80:	f7f2 ffd8 	bl	8000d34 <__aeabi_fmul>
 800dd84:	4639      	mov	r1, r7
 800dd86:	f7f2 fecb 	bl	8000b20 <__aeabi_fsub>
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	4607      	mov	r7, r0
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7f2 fec6 	bl	8000b20 <__aeabi_fsub>
 800dd94:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dd98:	ebab 0b03 	sub.w	fp, fp, r3
 800dd9c:	f1bb 0f19 	cmp.w	fp, #25
 800dda0:	dc16      	bgt.n	800ddd0 <__ieee754_rem_pio2f+0x1b0>
 800dda2:	46b0      	mov	r8, r6
 800dda4:	6020      	str	r0, [r4, #0]
 800dda6:	6826      	ldr	r6, [r4, #0]
 800dda8:	4640      	mov	r0, r8
 800ddaa:	4631      	mov	r1, r6
 800ddac:	f7f2 feb8 	bl	8000b20 <__aeabi_fsub>
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	f7f2 feb5 	bl	8000b20 <__aeabi_fsub>
 800ddb6:	f1ba 0f00 	cmp.w	sl, #0
 800ddba:	6060      	str	r0, [r4, #4]
 800ddbc:	f6bf af5a 	bge.w	800dc74 <__ieee754_rem_pio2f+0x54>
 800ddc0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ddc4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ddc8:	6026      	str	r6, [r4, #0]
 800ddca:	6060      	str	r0, [r4, #4]
 800ddcc:	426d      	negs	r5, r5
 800ddce:	e751      	b.n	800dc74 <__ieee754_rem_pio2f+0x54>
 800ddd0:	493f      	ldr	r1, [pc, #252]	; (800ded0 <__ieee754_rem_pio2f+0x2b0>)
 800ddd2:	4648      	mov	r0, r9
 800ddd4:	f7f2 ffae 	bl	8000d34 <__aeabi_fmul>
 800ddd8:	4607      	mov	r7, r0
 800ddda:	4601      	mov	r1, r0
 800dddc:	4630      	mov	r0, r6
 800ddde:	f7f2 fe9f 	bl	8000b20 <__aeabi_fsub>
 800dde2:	4601      	mov	r1, r0
 800dde4:	4680      	mov	r8, r0
 800dde6:	4630      	mov	r0, r6
 800dde8:	f7f2 fe9a 	bl	8000b20 <__aeabi_fsub>
 800ddec:	4639      	mov	r1, r7
 800ddee:	f7f2 fe97 	bl	8000b20 <__aeabi_fsub>
 800ddf2:	4606      	mov	r6, r0
 800ddf4:	4937      	ldr	r1, [pc, #220]	; (800ded4 <__ieee754_rem_pio2f+0x2b4>)
 800ddf6:	4648      	mov	r0, r9
 800ddf8:	f7f2 ff9c 	bl	8000d34 <__aeabi_fmul>
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	f7f2 fe8f 	bl	8000b20 <__aeabi_fsub>
 800de02:	4607      	mov	r7, r0
 800de04:	e795      	b.n	800dd32 <__ieee754_rem_pio2f+0x112>
 800de06:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800de0a:	db05      	blt.n	800de18 <__ieee754_rem_pio2f+0x1f8>
 800de0c:	4601      	mov	r1, r0
 800de0e:	f7f2 fe87 	bl	8000b20 <__aeabi_fsub>
 800de12:	6060      	str	r0, [r4, #4]
 800de14:	6020      	str	r0, [r4, #0]
 800de16:	e710      	b.n	800dc3a <__ieee754_rem_pio2f+0x1a>
 800de18:	15f7      	asrs	r7, r6, #23
 800de1a:	3f86      	subs	r7, #134	; 0x86
 800de1c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800de20:	4630      	mov	r0, r6
 800de22:	f7f3 f963 	bl	80010ec <__aeabi_f2iz>
 800de26:	f7f2 ff31 	bl	8000c8c <__aeabi_i2f>
 800de2a:	4601      	mov	r1, r0
 800de2c:	9003      	str	r0, [sp, #12]
 800de2e:	4630      	mov	r0, r6
 800de30:	f7f2 fe76 	bl	8000b20 <__aeabi_fsub>
 800de34:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800de38:	f7f2 ff7c 	bl	8000d34 <__aeabi_fmul>
 800de3c:	4606      	mov	r6, r0
 800de3e:	f7f3 f955 	bl	80010ec <__aeabi_f2iz>
 800de42:	f7f2 ff23 	bl	8000c8c <__aeabi_i2f>
 800de46:	4601      	mov	r1, r0
 800de48:	9004      	str	r0, [sp, #16]
 800de4a:	4605      	mov	r5, r0
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7f2 fe67 	bl	8000b20 <__aeabi_fsub>
 800de52:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800de56:	f7f2 ff6d 	bl	8000d34 <__aeabi_fmul>
 800de5a:	2100      	movs	r1, #0
 800de5c:	9005      	str	r0, [sp, #20]
 800de5e:	f7f3 f8fd 	bl	800105c <__aeabi_fcmpeq>
 800de62:	b1f0      	cbz	r0, 800dea2 <__ieee754_rem_pio2f+0x282>
 800de64:	2100      	movs	r1, #0
 800de66:	4628      	mov	r0, r5
 800de68:	f7f3 f8f8 	bl	800105c <__aeabi_fcmpeq>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	bf14      	ite	ne
 800de70:	2301      	movne	r3, #1
 800de72:	2302      	moveq	r3, #2
 800de74:	4a18      	ldr	r2, [pc, #96]	; (800ded8 <__ieee754_rem_pio2f+0x2b8>)
 800de76:	4621      	mov	r1, r4
 800de78:	9201      	str	r2, [sp, #4]
 800de7a:	2202      	movs	r2, #2
 800de7c:	a803      	add	r0, sp, #12
 800de7e:	9200      	str	r2, [sp, #0]
 800de80:	463a      	mov	r2, r7
 800de82:	f000 f8fd 	bl	800e080 <__kernel_rem_pio2f>
 800de86:	f1ba 0f00 	cmp.w	sl, #0
 800de8a:	4605      	mov	r5, r0
 800de8c:	f6bf aef2 	bge.w	800dc74 <__ieee754_rem_pio2f+0x54>
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de96:	6023      	str	r3, [r4, #0]
 800de98:	6863      	ldr	r3, [r4, #4]
 800de9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de9e:	6063      	str	r3, [r4, #4]
 800dea0:	e794      	b.n	800ddcc <__ieee754_rem_pio2f+0x1ac>
 800dea2:	2303      	movs	r3, #3
 800dea4:	e7e6      	b.n	800de74 <__ieee754_rem_pio2f+0x254>
 800dea6:	bf00      	nop
 800dea8:	3f490fd8 	.word	0x3f490fd8
 800deac:	4016cbe3 	.word	0x4016cbe3
 800deb0:	3fc90f80 	.word	0x3fc90f80
 800deb4:	3fc90fd0 	.word	0x3fc90fd0
 800deb8:	37354443 	.word	0x37354443
 800debc:	37354400 	.word	0x37354400
 800dec0:	2e85a308 	.word	0x2e85a308
 800dec4:	43490f80 	.word	0x43490f80
 800dec8:	3f22f984 	.word	0x3f22f984
 800decc:	0800ee20 	.word	0x0800ee20
 800ded0:	2e85a300 	.word	0x2e85a300
 800ded4:	248d3132 	.word	0x248d3132
 800ded8:	0800eea0 	.word	0x0800eea0

0800dedc <__ieee754_sqrtf>:
 800dedc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dee0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dee4:	b570      	push	{r4, r5, r6, lr}
 800dee6:	4603      	mov	r3, r0
 800dee8:	4604      	mov	r4, r0
 800deea:	d309      	bcc.n	800df00 <__ieee754_sqrtf+0x24>
 800deec:	4601      	mov	r1, r0
 800deee:	f7f2 ff21 	bl	8000d34 <__aeabi_fmul>
 800def2:	4601      	mov	r1, r0
 800def4:	4620      	mov	r0, r4
 800def6:	f7f2 fe15 	bl	8000b24 <__addsf3>
 800defa:	4604      	mov	r4, r0
 800defc:	4620      	mov	r0, r4
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	2a00      	cmp	r2, #0
 800df02:	d0fb      	beq.n	800defc <__ieee754_sqrtf+0x20>
 800df04:	2800      	cmp	r0, #0
 800df06:	da06      	bge.n	800df16 <__ieee754_sqrtf+0x3a>
 800df08:	4601      	mov	r1, r0
 800df0a:	f7f2 fe09 	bl	8000b20 <__aeabi_fsub>
 800df0e:	4601      	mov	r1, r0
 800df10:	f7f2 ffc4 	bl	8000e9c <__aeabi_fdiv>
 800df14:	e7f1      	b.n	800defa <__ieee754_sqrtf+0x1e>
 800df16:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800df1a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800df1e:	d029      	beq.n	800df74 <__ieee754_sqrtf+0x98>
 800df20:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800df24:	07cb      	lsls	r3, r1, #31
 800df26:	f04f 0300 	mov.w	r3, #0
 800df2a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800df2e:	f04f 0419 	mov.w	r4, #25
 800df32:	461e      	mov	r6, r3
 800df34:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800df38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800df3c:	bf58      	it	pl
 800df3e:	0052      	lslpl	r2, r2, #1
 800df40:	1040      	asrs	r0, r0, #1
 800df42:	0052      	lsls	r2, r2, #1
 800df44:	1875      	adds	r5, r6, r1
 800df46:	4295      	cmp	r5, r2
 800df48:	bfde      	ittt	le
 800df4a:	186e      	addle	r6, r5, r1
 800df4c:	1b52      	suble	r2, r2, r5
 800df4e:	185b      	addle	r3, r3, r1
 800df50:	3c01      	subs	r4, #1
 800df52:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800df56:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800df5a:	d1f3      	bne.n	800df44 <__ieee754_sqrtf+0x68>
 800df5c:	b112      	cbz	r2, 800df64 <__ieee754_sqrtf+0x88>
 800df5e:	3301      	adds	r3, #1
 800df60:	f023 0301 	bic.w	r3, r3, #1
 800df64:	105c      	asrs	r4, r3, #1
 800df66:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800df6a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800df6e:	e7c5      	b.n	800defc <__ieee754_sqrtf+0x20>
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	3201      	adds	r2, #1
 800df74:	0218      	lsls	r0, r3, #8
 800df76:	d5fb      	bpl.n	800df70 <__ieee754_sqrtf+0x94>
 800df78:	3a01      	subs	r2, #1
 800df7a:	1a89      	subs	r1, r1, r2
 800df7c:	e7d0      	b.n	800df20 <__ieee754_sqrtf+0x44>
	...

0800df80 <__kernel_cosf>:
 800df80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df84:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800df88:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800df8c:	4606      	mov	r6, r0
 800df8e:	4688      	mov	r8, r1
 800df90:	da03      	bge.n	800df9a <__kernel_cosf+0x1a>
 800df92:	f7f3 f8ab 	bl	80010ec <__aeabi_f2iz>
 800df96:	2800      	cmp	r0, #0
 800df98:	d05c      	beq.n	800e054 <__kernel_cosf+0xd4>
 800df9a:	4631      	mov	r1, r6
 800df9c:	4630      	mov	r0, r6
 800df9e:	f7f2 fec9 	bl	8000d34 <__aeabi_fmul>
 800dfa2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	f7f2 fec4 	bl	8000d34 <__aeabi_fmul>
 800dfac:	492b      	ldr	r1, [pc, #172]	; (800e05c <__kernel_cosf+0xdc>)
 800dfae:	4607      	mov	r7, r0
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f7f2 febf 	bl	8000d34 <__aeabi_fmul>
 800dfb6:	492a      	ldr	r1, [pc, #168]	; (800e060 <__kernel_cosf+0xe0>)
 800dfb8:	f7f2 fdb4 	bl	8000b24 <__addsf3>
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	f7f2 feb9 	bl	8000d34 <__aeabi_fmul>
 800dfc2:	4928      	ldr	r1, [pc, #160]	; (800e064 <__kernel_cosf+0xe4>)
 800dfc4:	f7f2 fdac 	bl	8000b20 <__aeabi_fsub>
 800dfc8:	4629      	mov	r1, r5
 800dfca:	f7f2 feb3 	bl	8000d34 <__aeabi_fmul>
 800dfce:	4926      	ldr	r1, [pc, #152]	; (800e068 <__kernel_cosf+0xe8>)
 800dfd0:	f7f2 fda8 	bl	8000b24 <__addsf3>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7f2 fead 	bl	8000d34 <__aeabi_fmul>
 800dfda:	4924      	ldr	r1, [pc, #144]	; (800e06c <__kernel_cosf+0xec>)
 800dfdc:	f7f2 fda0 	bl	8000b20 <__aeabi_fsub>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	f7f2 fea7 	bl	8000d34 <__aeabi_fmul>
 800dfe6:	4922      	ldr	r1, [pc, #136]	; (800e070 <__kernel_cosf+0xf0>)
 800dfe8:	f7f2 fd9c 	bl	8000b24 <__addsf3>
 800dfec:	4629      	mov	r1, r5
 800dfee:	f7f2 fea1 	bl	8000d34 <__aeabi_fmul>
 800dff2:	4629      	mov	r1, r5
 800dff4:	f7f2 fe9e 	bl	8000d34 <__aeabi_fmul>
 800dff8:	4641      	mov	r1, r8
 800dffa:	4605      	mov	r5, r0
 800dffc:	4630      	mov	r0, r6
 800dffe:	f7f2 fe99 	bl	8000d34 <__aeabi_fmul>
 800e002:	4601      	mov	r1, r0
 800e004:	4628      	mov	r0, r5
 800e006:	f7f2 fd8b 	bl	8000b20 <__aeabi_fsub>
 800e00a:	4b1a      	ldr	r3, [pc, #104]	; (800e074 <__kernel_cosf+0xf4>)
 800e00c:	4605      	mov	r5, r0
 800e00e:	429c      	cmp	r4, r3
 800e010:	dc0a      	bgt.n	800e028 <__kernel_cosf+0xa8>
 800e012:	4601      	mov	r1, r0
 800e014:	4638      	mov	r0, r7
 800e016:	f7f2 fd83 	bl	8000b20 <__aeabi_fsub>
 800e01a:	4601      	mov	r1, r0
 800e01c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e020:	f7f2 fd7e 	bl	8000b20 <__aeabi_fsub>
 800e024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e028:	4b13      	ldr	r3, [pc, #76]	; (800e078 <__kernel_cosf+0xf8>)
 800e02a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e02e:	429c      	cmp	r4, r3
 800e030:	bfcc      	ite	gt
 800e032:	4c12      	ldrgt	r4, [pc, #72]	; (800e07c <__kernel_cosf+0xfc>)
 800e034:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800e038:	4621      	mov	r1, r4
 800e03a:	f7f2 fd71 	bl	8000b20 <__aeabi_fsub>
 800e03e:	4621      	mov	r1, r4
 800e040:	4606      	mov	r6, r0
 800e042:	4638      	mov	r0, r7
 800e044:	f7f2 fd6c 	bl	8000b20 <__aeabi_fsub>
 800e048:	4629      	mov	r1, r5
 800e04a:	f7f2 fd69 	bl	8000b20 <__aeabi_fsub>
 800e04e:	4601      	mov	r1, r0
 800e050:	4630      	mov	r0, r6
 800e052:	e7e5      	b.n	800e020 <__kernel_cosf+0xa0>
 800e054:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e058:	e7e4      	b.n	800e024 <__kernel_cosf+0xa4>
 800e05a:	bf00      	nop
 800e05c:	ad47d74e 	.word	0xad47d74e
 800e060:	310f74f6 	.word	0x310f74f6
 800e064:	3493f27c 	.word	0x3493f27c
 800e068:	37d00d01 	.word	0x37d00d01
 800e06c:	3ab60b61 	.word	0x3ab60b61
 800e070:	3d2aaaab 	.word	0x3d2aaaab
 800e074:	3e999999 	.word	0x3e999999
 800e078:	3f480000 	.word	0x3f480000
 800e07c:	3e900000 	.word	0x3e900000

0800e080 <__kernel_rem_pio2f>:
 800e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	b0db      	sub	sp, #364	; 0x16c
 800e086:	9202      	str	r2, [sp, #8]
 800e088:	9304      	str	r3, [sp, #16]
 800e08a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e08c:	4bc5      	ldr	r3, [pc, #788]	; (800e3a4 <__kernel_rem_pio2f+0x324>)
 800e08e:	9005      	str	r0, [sp, #20]
 800e090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e094:	9100      	str	r1, [sp, #0]
 800e096:	9301      	str	r3, [sp, #4]
 800e098:	9b04      	ldr	r3, [sp, #16]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	9303      	str	r3, [sp, #12]
 800e09e:	9b02      	ldr	r3, [sp, #8]
 800e0a0:	1d1a      	adds	r2, r3, #4
 800e0a2:	f2c0 809b 	blt.w	800e1dc <__kernel_rem_pio2f+0x15c>
 800e0a6:	1edc      	subs	r4, r3, #3
 800e0a8:	bf48      	it	mi
 800e0aa:	1d1c      	addmi	r4, r3, #4
 800e0ac:	10e4      	asrs	r4, r4, #3
 800e0ae:	2500      	movs	r5, #0
 800e0b0:	f04f 0a00 	mov.w	sl, #0
 800e0b4:	1c67      	adds	r7, r4, #1
 800e0b6:	00fb      	lsls	r3, r7, #3
 800e0b8:	9306      	str	r3, [sp, #24]
 800e0ba:	9b02      	ldr	r3, [sp, #8]
 800e0bc:	9a03      	ldr	r2, [sp, #12]
 800e0be:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800e0c2:	9b01      	ldr	r3, [sp, #4]
 800e0c4:	1aa6      	subs	r6, r4, r2
 800e0c6:	eb03 0802 	add.w	r8, r3, r2
 800e0ca:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e0cc:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800e0d0:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800e0d4:	4545      	cmp	r5, r8
 800e0d6:	f340 8083 	ble.w	800e1e0 <__kernel_rem_pio2f+0x160>
 800e0da:	f04f 0800 	mov.w	r8, #0
 800e0de:	f04f 0b00 	mov.w	fp, #0
 800e0e2:	9b04      	ldr	r3, [sp, #16]
 800e0e4:	aa1e      	add	r2, sp, #120	; 0x78
 800e0e6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e0ea:	ab46      	add	r3, sp, #280	; 0x118
 800e0ec:	9a01      	ldr	r2, [sp, #4]
 800e0ee:	4590      	cmp	r8, r2
 800e0f0:	f340 809c 	ble.w	800e22c <__kernel_rem_pio2f+0x1ac>
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	aa0a      	add	r2, sp, #40	; 0x28
 800e0f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0fc:	9308      	str	r3, [sp, #32]
 800e0fe:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e100:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e104:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e108:	9307      	str	r3, [sp, #28]
 800e10a:	ad0a      	add	r5, sp, #40	; 0x28
 800e10c:	462e      	mov	r6, r5
 800e10e:	46c3      	mov	fp, r8
 800e110:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800e114:	ab5a      	add	r3, sp, #360	; 0x168
 800e116:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e11a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800e11e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800e122:	f1bb 0f00 	cmp.w	fp, #0
 800e126:	f300 8086 	bgt.w	800e236 <__kernel_rem_pio2f+0x1b6>
 800e12a:	4639      	mov	r1, r7
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 fc3b 	bl	800e9a8 <scalbnf>
 800e132:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800e136:	4604      	mov	r4, r0
 800e138:	f7f2 fdfc 	bl	8000d34 <__aeabi_fmul>
 800e13c:	f000 fbee 	bl	800e91c <floorf>
 800e140:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800e144:	f7f2 fdf6 	bl	8000d34 <__aeabi_fmul>
 800e148:	4601      	mov	r1, r0
 800e14a:	4620      	mov	r0, r4
 800e14c:	f7f2 fce8 	bl	8000b20 <__aeabi_fsub>
 800e150:	4604      	mov	r4, r0
 800e152:	f7f2 ffcb 	bl	80010ec <__aeabi_f2iz>
 800e156:	4606      	mov	r6, r0
 800e158:	f7f2 fd98 	bl	8000c8c <__aeabi_i2f>
 800e15c:	4601      	mov	r1, r0
 800e15e:	4620      	mov	r0, r4
 800e160:	f7f2 fcde 	bl	8000b20 <__aeabi_fsub>
 800e164:	2f00      	cmp	r7, #0
 800e166:	4681      	mov	r9, r0
 800e168:	f340 8084 	ble.w	800e274 <__kernel_rem_pio2f+0x1f4>
 800e16c:	f108 32ff 	add.w	r2, r8, #4294967295
 800e170:	ab0a      	add	r3, sp, #40	; 0x28
 800e172:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800e176:	f1c7 0108 	rsb	r1, r7, #8
 800e17a:	fa44 f301 	asr.w	r3, r4, r1
 800e17e:	441e      	add	r6, r3
 800e180:	408b      	lsls	r3, r1
 800e182:	1ae4      	subs	r4, r4, r3
 800e184:	f1c7 0007 	rsb	r0, r7, #7
 800e188:	ab0a      	add	r3, sp, #40	; 0x28
 800e18a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e18e:	4104      	asrs	r4, r0
 800e190:	2c00      	cmp	r4, #0
 800e192:	dd7e      	ble.n	800e292 <__kernel_rem_pio2f+0x212>
 800e194:	2200      	movs	r2, #0
 800e196:	4692      	mov	sl, r2
 800e198:	3601      	adds	r6, #1
 800e19a:	4590      	cmp	r8, r2
 800e19c:	f300 80b0 	bgt.w	800e300 <__kernel_rem_pio2f+0x280>
 800e1a0:	2f00      	cmp	r7, #0
 800e1a2:	dd05      	ble.n	800e1b0 <__kernel_rem_pio2f+0x130>
 800e1a4:	2f01      	cmp	r7, #1
 800e1a6:	f000 80bd 	beq.w	800e324 <__kernel_rem_pio2f+0x2a4>
 800e1aa:	2f02      	cmp	r7, #2
 800e1ac:	f000 80c5 	beq.w	800e33a <__kernel_rem_pio2f+0x2ba>
 800e1b0:	2c02      	cmp	r4, #2
 800e1b2:	d16e      	bne.n	800e292 <__kernel_rem_pio2f+0x212>
 800e1b4:	4649      	mov	r1, r9
 800e1b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1ba:	f7f2 fcb1 	bl	8000b20 <__aeabi_fsub>
 800e1be:	4681      	mov	r9, r0
 800e1c0:	f1ba 0f00 	cmp.w	sl, #0
 800e1c4:	d065      	beq.n	800e292 <__kernel_rem_pio2f+0x212>
 800e1c6:	4639      	mov	r1, r7
 800e1c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1cc:	f000 fbec 	bl	800e9a8 <scalbnf>
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	4648      	mov	r0, r9
 800e1d4:	f7f2 fca4 	bl	8000b20 <__aeabi_fsub>
 800e1d8:	4681      	mov	r9, r0
 800e1da:	e05a      	b.n	800e292 <__kernel_rem_pio2f+0x212>
 800e1dc:	2400      	movs	r4, #0
 800e1de:	e766      	b.n	800e0ae <__kernel_rem_pio2f+0x2e>
 800e1e0:	42ee      	cmn	r6, r5
 800e1e2:	d407      	bmi.n	800e1f4 <__kernel_rem_pio2f+0x174>
 800e1e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e1e8:	f7f2 fd50 	bl	8000c8c <__aeabi_i2f>
 800e1ec:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800e1f0:	3501      	adds	r5, #1
 800e1f2:	e76f      	b.n	800e0d4 <__kernel_rem_pio2f+0x54>
 800e1f4:	4650      	mov	r0, sl
 800e1f6:	e7f9      	b.n	800e1ec <__kernel_rem_pio2f+0x16c>
 800e1f8:	9b05      	ldr	r3, [sp, #20]
 800e1fa:	f8da 1000 	ldr.w	r1, [sl]
 800e1fe:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800e202:	f7f2 fd97 	bl	8000d34 <__aeabi_fmul>
 800e206:	4601      	mov	r1, r0
 800e208:	4630      	mov	r0, r6
 800e20a:	f7f2 fc8b 	bl	8000b24 <__addsf3>
 800e20e:	4606      	mov	r6, r0
 800e210:	f109 0901 	add.w	r9, r9, #1
 800e214:	ab46      	add	r3, sp, #280	; 0x118
 800e216:	9a03      	ldr	r2, [sp, #12]
 800e218:	f1aa 0a04 	sub.w	sl, sl, #4
 800e21c:	4591      	cmp	r9, r2
 800e21e:	ddeb      	ble.n	800e1f8 <__kernel_rem_pio2f+0x178>
 800e220:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e224:	3504      	adds	r5, #4
 800e226:	f108 0801 	add.w	r8, r8, #1
 800e22a:	e75f      	b.n	800e0ec <__kernel_rem_pio2f+0x6c>
 800e22c:	46aa      	mov	sl, r5
 800e22e:	465e      	mov	r6, fp
 800e230:	f04f 0900 	mov.w	r9, #0
 800e234:	e7ef      	b.n	800e216 <__kernel_rem_pio2f+0x196>
 800e236:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e23a:	4620      	mov	r0, r4
 800e23c:	f7f2 fd7a 	bl	8000d34 <__aeabi_fmul>
 800e240:	f7f2 ff54 	bl	80010ec <__aeabi_f2iz>
 800e244:	f7f2 fd22 	bl	8000c8c <__aeabi_i2f>
 800e248:	4649      	mov	r1, r9
 800e24a:	9009      	str	r0, [sp, #36]	; 0x24
 800e24c:	f7f2 fd72 	bl	8000d34 <__aeabi_fmul>
 800e250:	4601      	mov	r1, r0
 800e252:	4620      	mov	r0, r4
 800e254:	f7f2 fc64 	bl	8000b20 <__aeabi_fsub>
 800e258:	f7f2 ff48 	bl	80010ec <__aeabi_f2iz>
 800e25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e25e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e262:	f846 0b04 	str.w	r0, [r6], #4
 800e266:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7f2 fc5a 	bl	8000b24 <__addsf3>
 800e270:	4604      	mov	r4, r0
 800e272:	e756      	b.n	800e122 <__kernel_rem_pio2f+0xa2>
 800e274:	d106      	bne.n	800e284 <__kernel_rem_pio2f+0x204>
 800e276:	f108 33ff 	add.w	r3, r8, #4294967295
 800e27a:	aa0a      	add	r2, sp, #40	; 0x28
 800e27c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e280:	1224      	asrs	r4, r4, #8
 800e282:	e785      	b.n	800e190 <__kernel_rem_pio2f+0x110>
 800e284:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e288:	f7f2 ff06 	bl	8001098 <__aeabi_fcmpge>
 800e28c:	4604      	mov	r4, r0
 800e28e:	2800      	cmp	r0, #0
 800e290:	d134      	bne.n	800e2fc <__kernel_rem_pio2f+0x27c>
 800e292:	2100      	movs	r1, #0
 800e294:	4648      	mov	r0, r9
 800e296:	f7f2 fee1 	bl	800105c <__aeabi_fcmpeq>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	f000 809a 	beq.w	800e3d4 <__kernel_rem_pio2f+0x354>
 800e2a0:	f108 35ff 	add.w	r5, r8, #4294967295
 800e2a4:	462b      	mov	r3, r5
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	9901      	ldr	r1, [sp, #4]
 800e2aa:	428b      	cmp	r3, r1
 800e2ac:	da4d      	bge.n	800e34a <__kernel_rem_pio2f+0x2ca>
 800e2ae:	2a00      	cmp	r2, #0
 800e2b0:	d07c      	beq.n	800e3ac <__kernel_rem_pio2f+0x32c>
 800e2b2:	ab0a      	add	r3, sp, #40	; 0x28
 800e2b4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2b8:	3f08      	subs	r7, #8
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f000 8088 	beq.w	800e3d0 <__kernel_rem_pio2f+0x350>
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e2c6:	f000 fb6f 	bl	800e9a8 <scalbnf>
 800e2ca:	46aa      	mov	sl, r5
 800e2cc:	4681      	mov	r9, r0
 800e2ce:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800e2d2:	af46      	add	r7, sp, #280	; 0x118
 800e2d4:	f1ba 0f00 	cmp.w	sl, #0
 800e2d8:	f280 80b1 	bge.w	800e43e <__kernel_rem_pio2f+0x3be>
 800e2dc:	46a9      	mov	r9, r5
 800e2de:	f04f 0a00 	mov.w	sl, #0
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f1b9 0f00 	cmp.w	r9, #0
 800e2e8:	f2c0 80db 	blt.w	800e4a2 <__kernel_rem_pio2f+0x422>
 800e2ec:	a946      	add	r1, sp, #280	; 0x118
 800e2ee:	4617      	mov	r7, r2
 800e2f0:	f04f 0800 	mov.w	r8, #0
 800e2f4:	4b2c      	ldr	r3, [pc, #176]	; (800e3a8 <__kernel_rem_pio2f+0x328>)
 800e2f6:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800e2fa:	e0c3      	b.n	800e484 <__kernel_rem_pio2f+0x404>
 800e2fc:	2402      	movs	r4, #2
 800e2fe:	e749      	b.n	800e194 <__kernel_rem_pio2f+0x114>
 800e300:	682b      	ldr	r3, [r5, #0]
 800e302:	f1ba 0f00 	cmp.w	sl, #0
 800e306:	d108      	bne.n	800e31a <__kernel_rem_pio2f+0x29a>
 800e308:	b11b      	cbz	r3, 800e312 <__kernel_rem_pio2f+0x292>
 800e30a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e30e:	602b      	str	r3, [r5, #0]
 800e310:	2301      	movs	r3, #1
 800e312:	469a      	mov	sl, r3
 800e314:	3201      	adds	r2, #1
 800e316:	3504      	adds	r5, #4
 800e318:	e73f      	b.n	800e19a <__kernel_rem_pio2f+0x11a>
 800e31a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e31e:	602b      	str	r3, [r5, #0]
 800e320:	4653      	mov	r3, sl
 800e322:	e7f6      	b.n	800e312 <__kernel_rem_pio2f+0x292>
 800e324:	f108 32ff 	add.w	r2, r8, #4294967295
 800e328:	ab0a      	add	r3, sp, #40	; 0x28
 800e32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e332:	a90a      	add	r1, sp, #40	; 0x28
 800e334:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e338:	e73a      	b.n	800e1b0 <__kernel_rem_pio2f+0x130>
 800e33a:	f108 32ff 	add.w	r2, r8, #4294967295
 800e33e:	ab0a      	add	r3, sp, #40	; 0x28
 800e340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e348:	e7f3      	b.n	800e332 <__kernel_rem_pio2f+0x2b2>
 800e34a:	a90a      	add	r1, sp, #40	; 0x28
 800e34c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e350:	3b01      	subs	r3, #1
 800e352:	430a      	orrs	r2, r1
 800e354:	e7a8      	b.n	800e2a8 <__kernel_rem_pio2f+0x228>
 800e356:	3301      	adds	r3, #1
 800e358:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e35c:	2900      	cmp	r1, #0
 800e35e:	d0fa      	beq.n	800e356 <__kernel_rem_pio2f+0x2d6>
 800e360:	9a04      	ldr	r2, [sp, #16]
 800e362:	f108 0501 	add.w	r5, r8, #1
 800e366:	eb08 0402 	add.w	r4, r8, r2
 800e36a:	aa1e      	add	r2, sp, #120	; 0x78
 800e36c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e370:	4498      	add	r8, r3
 800e372:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800e376:	45a8      	cmp	r8, r5
 800e378:	f6ff aec7 	blt.w	800e10a <__kernel_rem_pio2f+0x8a>
 800e37c:	9b07      	ldr	r3, [sp, #28]
 800e37e:	46a3      	mov	fp, r4
 800e380:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e384:	f7f2 fc82 	bl	8000c8c <__aeabi_i2f>
 800e388:	f04f 0a00 	mov.w	sl, #0
 800e38c:	2600      	movs	r6, #0
 800e38e:	f84b 0b04 	str.w	r0, [fp], #4
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	459a      	cmp	sl, r3
 800e396:	dd0c      	ble.n	800e3b2 <__kernel_rem_pio2f+0x332>
 800e398:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800e39c:	465c      	mov	r4, fp
 800e39e:	3501      	adds	r5, #1
 800e3a0:	e7e9      	b.n	800e376 <__kernel_rem_pio2f+0x2f6>
 800e3a2:	bf00      	nop
 800e3a4:	0800f1e4 	.word	0x0800f1e4
 800e3a8:	0800f1b8 	.word	0x0800f1b8
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	9a08      	ldr	r2, [sp, #32]
 800e3b0:	e7d2      	b.n	800e358 <__kernel_rem_pio2f+0x2d8>
 800e3b2:	9b05      	ldr	r3, [sp, #20]
 800e3b4:	f854 0904 	ldr.w	r0, [r4], #-4
 800e3b8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e3bc:	f7f2 fcba 	bl	8000d34 <__aeabi_fmul>
 800e3c0:	4601      	mov	r1, r0
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7f2 fbae 	bl	8000b24 <__addsf3>
 800e3c8:	f10a 0a01 	add.w	sl, sl, #1
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	e7e0      	b.n	800e392 <__kernel_rem_pio2f+0x312>
 800e3d0:	3d01      	subs	r5, #1
 800e3d2:	e76e      	b.n	800e2b2 <__kernel_rem_pio2f+0x232>
 800e3d4:	9b06      	ldr	r3, [sp, #24]
 800e3d6:	9a02      	ldr	r2, [sp, #8]
 800e3d8:	4648      	mov	r0, r9
 800e3da:	1a99      	subs	r1, r3, r2
 800e3dc:	f000 fae4 	bl	800e9a8 <scalbnf>
 800e3e0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	f7f2 fe57 	bl	8001098 <__aeabi_fcmpge>
 800e3ea:	b300      	cbz	r0, 800e42e <__kernel_rem_pio2f+0x3ae>
 800e3ec:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f7f2 fc9f 	bl	8000d34 <__aeabi_fmul>
 800e3f6:	f7f2 fe79 	bl	80010ec <__aeabi_f2iz>
 800e3fa:	f7f2 fc47 	bl	8000c8c <__aeabi_i2f>
 800e3fe:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e402:	4681      	mov	r9, r0
 800e404:	f7f2 fc96 	bl	8000d34 <__aeabi_fmul>
 800e408:	4601      	mov	r1, r0
 800e40a:	4628      	mov	r0, r5
 800e40c:	f7f2 fb88 	bl	8000b20 <__aeabi_fsub>
 800e410:	f7f2 fe6c 	bl	80010ec <__aeabi_f2iz>
 800e414:	ab0a      	add	r3, sp, #40	; 0x28
 800e416:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e41a:	4648      	mov	r0, r9
 800e41c:	f7f2 fe66 	bl	80010ec <__aeabi_f2iz>
 800e420:	f108 0501 	add.w	r5, r8, #1
 800e424:	ab0a      	add	r3, sp, #40	; 0x28
 800e426:	3708      	adds	r7, #8
 800e428:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e42c:	e748      	b.n	800e2c0 <__kernel_rem_pio2f+0x240>
 800e42e:	4628      	mov	r0, r5
 800e430:	f7f2 fe5c 	bl	80010ec <__aeabi_f2iz>
 800e434:	ab0a      	add	r3, sp, #40	; 0x28
 800e436:	4645      	mov	r5, r8
 800e438:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e43c:	e740      	b.n	800e2c0 <__kernel_rem_pio2f+0x240>
 800e43e:	ab0a      	add	r3, sp, #40	; 0x28
 800e440:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e444:	f7f2 fc22 	bl	8000c8c <__aeabi_i2f>
 800e448:	4649      	mov	r1, r9
 800e44a:	f7f2 fc73 	bl	8000d34 <__aeabi_fmul>
 800e44e:	4641      	mov	r1, r8
 800e450:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800e454:	4648      	mov	r0, r9
 800e456:	f7f2 fc6d 	bl	8000d34 <__aeabi_fmul>
 800e45a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e45e:	4681      	mov	r9, r0
 800e460:	e738      	b.n	800e2d4 <__kernel_rem_pio2f+0x254>
 800e462:	f853 0b04 	ldr.w	r0, [r3], #4
 800e466:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e46a:	9203      	str	r2, [sp, #12]
 800e46c:	9302      	str	r3, [sp, #8]
 800e46e:	f7f2 fc61 	bl	8000d34 <__aeabi_fmul>
 800e472:	4601      	mov	r1, r0
 800e474:	4638      	mov	r0, r7
 800e476:	f7f2 fb55 	bl	8000b24 <__addsf3>
 800e47a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e47e:	4607      	mov	r7, r0
 800e480:	f108 0801 	add.w	r8, r8, #1
 800e484:	9901      	ldr	r1, [sp, #4]
 800e486:	4588      	cmp	r8, r1
 800e488:	dc01      	bgt.n	800e48e <__kernel_rem_pio2f+0x40e>
 800e48a:	45c2      	cmp	sl, r8
 800e48c:	dae9      	bge.n	800e462 <__kernel_rem_pio2f+0x3e2>
 800e48e:	ab5a      	add	r3, sp, #360	; 0x168
 800e490:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e494:	f843 7ca0 	str.w	r7, [r3, #-160]
 800e498:	f109 39ff 	add.w	r9, r9, #4294967295
 800e49c:	f10a 0a01 	add.w	sl, sl, #1
 800e4a0:	e720      	b.n	800e2e4 <__kernel_rem_pio2f+0x264>
 800e4a2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	dc07      	bgt.n	800e4b8 <__kernel_rem_pio2f+0x438>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dc4d      	bgt.n	800e548 <__kernel_rem_pio2f+0x4c8>
 800e4ac:	d02e      	beq.n	800e50c <__kernel_rem_pio2f+0x48c>
 800e4ae:	f006 0007 	and.w	r0, r6, #7
 800e4b2:	b05b      	add	sp, #364	; 0x16c
 800e4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	d1f7      	bne.n	800e4ae <__kernel_rem_pio2f+0x42e>
 800e4be:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800e4c2:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800e4c6:	46b8      	mov	r8, r7
 800e4c8:	46aa      	mov	sl, r5
 800e4ca:	f1ba 0f00 	cmp.w	sl, #0
 800e4ce:	dc48      	bgt.n	800e562 <__kernel_rem_pio2f+0x4e2>
 800e4d0:	46a9      	mov	r9, r5
 800e4d2:	f1b9 0f01 	cmp.w	r9, #1
 800e4d6:	dc5f      	bgt.n	800e598 <__kernel_rem_pio2f+0x518>
 800e4d8:	2000      	movs	r0, #0
 800e4da:	2d01      	cmp	r5, #1
 800e4dc:	dc75      	bgt.n	800e5ca <__kernel_rem_pio2f+0x54a>
 800e4de:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e4e0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e4e2:	2c00      	cmp	r4, #0
 800e4e4:	d177      	bne.n	800e5d6 <__kernel_rem_pio2f+0x556>
 800e4e6:	9900      	ldr	r1, [sp, #0]
 800e4e8:	600a      	str	r2, [r1, #0]
 800e4ea:	460a      	mov	r2, r1
 800e4ec:	604b      	str	r3, [r1, #4]
 800e4ee:	6090      	str	r0, [r2, #8]
 800e4f0:	e7dd      	b.n	800e4ae <__kernel_rem_pio2f+0x42e>
 800e4f2:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800e4f6:	f7f2 fb15 	bl	8000b24 <__addsf3>
 800e4fa:	3d01      	subs	r5, #1
 800e4fc:	2d00      	cmp	r5, #0
 800e4fe:	daf8      	bge.n	800e4f2 <__kernel_rem_pio2f+0x472>
 800e500:	b10c      	cbz	r4, 800e506 <__kernel_rem_pio2f+0x486>
 800e502:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e506:	9b00      	ldr	r3, [sp, #0]
 800e508:	6018      	str	r0, [r3, #0]
 800e50a:	e7d0      	b.n	800e4ae <__kernel_rem_pio2f+0x42e>
 800e50c:	2000      	movs	r0, #0
 800e50e:	af32      	add	r7, sp, #200	; 0xc8
 800e510:	e7f4      	b.n	800e4fc <__kernel_rem_pio2f+0x47c>
 800e512:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e516:	f7f2 fb05 	bl	8000b24 <__addsf3>
 800e51a:	3f01      	subs	r7, #1
 800e51c:	2f00      	cmp	r7, #0
 800e51e:	daf8      	bge.n	800e512 <__kernel_rem_pio2f+0x492>
 800e520:	b1bc      	cbz	r4, 800e552 <__kernel_rem_pio2f+0x4d2>
 800e522:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e526:	9a00      	ldr	r2, [sp, #0]
 800e528:	4601      	mov	r1, r0
 800e52a:	6013      	str	r3, [r2, #0]
 800e52c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800e52e:	f7f2 faf7 	bl	8000b20 <__aeabi_fsub>
 800e532:	2701      	movs	r7, #1
 800e534:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e538:	42bd      	cmp	r5, r7
 800e53a:	da0c      	bge.n	800e556 <__kernel_rem_pio2f+0x4d6>
 800e53c:	b10c      	cbz	r4, 800e542 <__kernel_rem_pio2f+0x4c2>
 800e53e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e542:	9b00      	ldr	r3, [sp, #0]
 800e544:	6058      	str	r0, [r3, #4]
 800e546:	e7b2      	b.n	800e4ae <__kernel_rem_pio2f+0x42e>
 800e548:	462f      	mov	r7, r5
 800e54a:	2000      	movs	r0, #0
 800e54c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e550:	e7e4      	b.n	800e51c <__kernel_rem_pio2f+0x49c>
 800e552:	4603      	mov	r3, r0
 800e554:	e7e7      	b.n	800e526 <__kernel_rem_pio2f+0x4a6>
 800e556:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e55a:	f7f2 fae3 	bl	8000b24 <__addsf3>
 800e55e:	3701      	adds	r7, #1
 800e560:	e7ea      	b.n	800e538 <__kernel_rem_pio2f+0x4b8>
 800e562:	f8d8 3000 	ldr.w	r3, [r8]
 800e566:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e56a:	4619      	mov	r1, r3
 800e56c:	4610      	mov	r0, r2
 800e56e:	9302      	str	r3, [sp, #8]
 800e570:	9201      	str	r2, [sp, #4]
 800e572:	f7f2 fad7 	bl	8000b24 <__addsf3>
 800e576:	9a01      	ldr	r2, [sp, #4]
 800e578:	4601      	mov	r1, r0
 800e57a:	4681      	mov	r9, r0
 800e57c:	4610      	mov	r0, r2
 800e57e:	f7f2 facf 	bl	8000b20 <__aeabi_fsub>
 800e582:	9b02      	ldr	r3, [sp, #8]
 800e584:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e588:	4619      	mov	r1, r3
 800e58a:	f7f2 facb 	bl	8000b24 <__addsf3>
 800e58e:	f848 0904 	str.w	r0, [r8], #-4
 800e592:	f8c8 9000 	str.w	r9, [r8]
 800e596:	e798      	b.n	800e4ca <__kernel_rem_pio2f+0x44a>
 800e598:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e59c:	f8d7 a000 	ldr.w	sl, [r7]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	4651      	mov	r1, sl
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	f7f2 fabd 	bl	8000b24 <__addsf3>
 800e5aa:	9b01      	ldr	r3, [sp, #4]
 800e5ac:	4601      	mov	r1, r0
 800e5ae:	4680      	mov	r8, r0
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7f2 fab5 	bl	8000b20 <__aeabi_fsub>
 800e5b6:	4651      	mov	r1, sl
 800e5b8:	f7f2 fab4 	bl	8000b24 <__addsf3>
 800e5bc:	f847 0904 	str.w	r0, [r7], #-4
 800e5c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e5c4:	f8c7 8000 	str.w	r8, [r7]
 800e5c8:	e783      	b.n	800e4d2 <__kernel_rem_pio2f+0x452>
 800e5ca:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800e5ce:	f7f2 faa9 	bl	8000b24 <__addsf3>
 800e5d2:	3d01      	subs	r5, #1
 800e5d4:	e781      	b.n	800e4da <__kernel_rem_pio2f+0x45a>
 800e5d6:	9900      	ldr	r1, [sp, #0]
 800e5d8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e5dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e5e0:	600a      	str	r2, [r1, #0]
 800e5e2:	604b      	str	r3, [r1, #4]
 800e5e4:	460a      	mov	r2, r1
 800e5e6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e5ea:	e780      	b.n	800e4ee <__kernel_rem_pio2f+0x46e>

0800e5ec <__kernel_sinf>:
 800e5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e5f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	460f      	mov	r7, r1
 800e5fc:	4691      	mov	r9, r2
 800e5fe:	da03      	bge.n	800e608 <__kernel_sinf+0x1c>
 800e600:	f7f2 fd74 	bl	80010ec <__aeabi_f2iz>
 800e604:	2800      	cmp	r0, #0
 800e606:	d035      	beq.n	800e674 <__kernel_sinf+0x88>
 800e608:	4621      	mov	r1, r4
 800e60a:	4620      	mov	r0, r4
 800e60c:	f7f2 fb92 	bl	8000d34 <__aeabi_fmul>
 800e610:	4605      	mov	r5, r0
 800e612:	4601      	mov	r1, r0
 800e614:	4620      	mov	r0, r4
 800e616:	f7f2 fb8d 	bl	8000d34 <__aeabi_fmul>
 800e61a:	4929      	ldr	r1, [pc, #164]	; (800e6c0 <__kernel_sinf+0xd4>)
 800e61c:	4606      	mov	r6, r0
 800e61e:	4628      	mov	r0, r5
 800e620:	f7f2 fb88 	bl	8000d34 <__aeabi_fmul>
 800e624:	4927      	ldr	r1, [pc, #156]	; (800e6c4 <__kernel_sinf+0xd8>)
 800e626:	f7f2 fa7b 	bl	8000b20 <__aeabi_fsub>
 800e62a:	4629      	mov	r1, r5
 800e62c:	f7f2 fb82 	bl	8000d34 <__aeabi_fmul>
 800e630:	4925      	ldr	r1, [pc, #148]	; (800e6c8 <__kernel_sinf+0xdc>)
 800e632:	f7f2 fa77 	bl	8000b24 <__addsf3>
 800e636:	4629      	mov	r1, r5
 800e638:	f7f2 fb7c 	bl	8000d34 <__aeabi_fmul>
 800e63c:	4923      	ldr	r1, [pc, #140]	; (800e6cc <__kernel_sinf+0xe0>)
 800e63e:	f7f2 fa6f 	bl	8000b20 <__aeabi_fsub>
 800e642:	4629      	mov	r1, r5
 800e644:	f7f2 fb76 	bl	8000d34 <__aeabi_fmul>
 800e648:	4921      	ldr	r1, [pc, #132]	; (800e6d0 <__kernel_sinf+0xe4>)
 800e64a:	f7f2 fa6b 	bl	8000b24 <__addsf3>
 800e64e:	4680      	mov	r8, r0
 800e650:	f1b9 0f00 	cmp.w	r9, #0
 800e654:	d111      	bne.n	800e67a <__kernel_sinf+0x8e>
 800e656:	4601      	mov	r1, r0
 800e658:	4628      	mov	r0, r5
 800e65a:	f7f2 fb6b 	bl	8000d34 <__aeabi_fmul>
 800e65e:	491d      	ldr	r1, [pc, #116]	; (800e6d4 <__kernel_sinf+0xe8>)
 800e660:	f7f2 fa5e 	bl	8000b20 <__aeabi_fsub>
 800e664:	4631      	mov	r1, r6
 800e666:	f7f2 fb65 	bl	8000d34 <__aeabi_fmul>
 800e66a:	4601      	mov	r1, r0
 800e66c:	4620      	mov	r0, r4
 800e66e:	f7f2 fa59 	bl	8000b24 <__addsf3>
 800e672:	4604      	mov	r4, r0
 800e674:	4620      	mov	r0, r4
 800e676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e67a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e67e:	4638      	mov	r0, r7
 800e680:	f7f2 fb58 	bl	8000d34 <__aeabi_fmul>
 800e684:	4641      	mov	r1, r8
 800e686:	4681      	mov	r9, r0
 800e688:	4630      	mov	r0, r6
 800e68a:	f7f2 fb53 	bl	8000d34 <__aeabi_fmul>
 800e68e:	4601      	mov	r1, r0
 800e690:	4648      	mov	r0, r9
 800e692:	f7f2 fa45 	bl	8000b20 <__aeabi_fsub>
 800e696:	4629      	mov	r1, r5
 800e698:	f7f2 fb4c 	bl	8000d34 <__aeabi_fmul>
 800e69c:	4639      	mov	r1, r7
 800e69e:	f7f2 fa3f 	bl	8000b20 <__aeabi_fsub>
 800e6a2:	490c      	ldr	r1, [pc, #48]	; (800e6d4 <__kernel_sinf+0xe8>)
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7f2 fb44 	bl	8000d34 <__aeabi_fmul>
 800e6ac:	4601      	mov	r1, r0
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f7f2 fa38 	bl	8000b24 <__addsf3>
 800e6b4:	4601      	mov	r1, r0
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f7f2 fa32 	bl	8000b20 <__aeabi_fsub>
 800e6bc:	e7d9      	b.n	800e672 <__kernel_sinf+0x86>
 800e6be:	bf00      	nop
 800e6c0:	2f2ec9d3 	.word	0x2f2ec9d3
 800e6c4:	32d72f34 	.word	0x32d72f34
 800e6c8:	3638ef1b 	.word	0x3638ef1b
 800e6cc:	39500d01 	.word	0x39500d01
 800e6d0:	3c088889 	.word	0x3c088889
 800e6d4:	3e2aaaab 	.word	0x3e2aaaab

0800e6d8 <fabs>:
 800e6d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e6dc:	4770      	bx	lr

0800e6de <finite>:
 800e6de:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e6e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e6e6:	0fc0      	lsrs	r0, r0, #31
 800e6e8:	4770      	bx	lr
	...

0800e6ec <nan>:
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	4901      	ldr	r1, [pc, #4]	; (800e6f4 <nan+0x8>)
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	7ff80000 	.word	0x7ff80000

0800e6f8 <rint>:
 800e6f8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800e6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6fe:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800e702:	2f13      	cmp	r7, #19
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	460c      	mov	r4, r1
 800e70a:	4605      	mov	r5, r0
 800e70c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800e710:	dc59      	bgt.n	800e7c6 <rint+0xce>
 800e712:	2f00      	cmp	r7, #0
 800e714:	da2a      	bge.n	800e76c <rint+0x74>
 800e716:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e71a:	4301      	orrs	r1, r0
 800e71c:	d022      	beq.n	800e764 <rint+0x6c>
 800e71e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800e722:	4301      	orrs	r1, r0
 800e724:	424d      	negs	r5, r1
 800e726:	430d      	orrs	r5, r1
 800e728:	4936      	ldr	r1, [pc, #216]	; (800e804 <rint+0x10c>)
 800e72a:	0c5c      	lsrs	r4, r3, #17
 800e72c:	0b2d      	lsrs	r5, r5, #12
 800e72e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800e732:	0464      	lsls	r4, r4, #17
 800e734:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e738:	ea45 0304 	orr.w	r3, r5, r4
 800e73c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e740:	4620      	mov	r0, r4
 800e742:	4629      	mov	r1, r5
 800e744:	f7f1 fd0a 	bl	800015c <__adddf3>
 800e748:	e9cd 0100 	strd	r0, r1, [sp]
 800e74c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e750:	462b      	mov	r3, r5
 800e752:	4622      	mov	r2, r4
 800e754:	f7f1 fd00 	bl	8000158 <__aeabi_dsub>
 800e758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e75c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800e760:	4602      	mov	r2, r0
 800e762:	460b      	mov	r3, r1
 800e764:	4610      	mov	r0, r2
 800e766:	4619      	mov	r1, r3
 800e768:	b003      	add	sp, #12
 800e76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e76c:	4926      	ldr	r1, [pc, #152]	; (800e808 <rint+0x110>)
 800e76e:	4139      	asrs	r1, r7
 800e770:	ea03 0001 	and.w	r0, r3, r1
 800e774:	4310      	orrs	r0, r2
 800e776:	d0f5      	beq.n	800e764 <rint+0x6c>
 800e778:	084b      	lsrs	r3, r1, #1
 800e77a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800e77e:	ea52 0501 	orrs.w	r5, r2, r1
 800e782:	d00c      	beq.n	800e79e <rint+0xa6>
 800e784:	ea24 0303 	bic.w	r3, r4, r3
 800e788:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800e78c:	2f13      	cmp	r7, #19
 800e78e:	bf0c      	ite	eq
 800e790:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800e794:	2500      	movne	r5, #0
 800e796:	fa44 f707 	asr.w	r7, r4, r7
 800e79a:	ea43 0407 	orr.w	r4, r3, r7
 800e79e:	4919      	ldr	r1, [pc, #100]	; (800e804 <rint+0x10c>)
 800e7a0:	4623      	mov	r3, r4
 800e7a2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800e7a6:	462a      	mov	r2, r5
 800e7a8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	f7f1 fcd4 	bl	800015c <__adddf3>
 800e7b4:	e9cd 0100 	strd	r0, r1, [sp]
 800e7b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7bc:	4622      	mov	r2, r4
 800e7be:	462b      	mov	r3, r5
 800e7c0:	f7f1 fcca 	bl	8000158 <__aeabi_dsub>
 800e7c4:	e7cc      	b.n	800e760 <rint+0x68>
 800e7c6:	2f33      	cmp	r7, #51	; 0x33
 800e7c8:	dd05      	ble.n	800e7d6 <rint+0xde>
 800e7ca:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800e7ce:	d1c9      	bne.n	800e764 <rint+0x6c>
 800e7d0:	f7f1 fcc4 	bl	800015c <__adddf3>
 800e7d4:	e7c4      	b.n	800e760 <rint+0x68>
 800e7d6:	f04f 31ff 	mov.w	r1, #4294967295
 800e7da:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800e7de:	fa21 f10c 	lsr.w	r1, r1, ip
 800e7e2:	4208      	tst	r0, r1
 800e7e4:	d0be      	beq.n	800e764 <rint+0x6c>
 800e7e6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800e7ea:	bf18      	it	ne
 800e7ec:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800e7f0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800e7f4:	bf1e      	ittt	ne
 800e7f6:	ea20 0303 	bicne.w	r3, r0, r3
 800e7fa:	fa45 fc0c 	asrne.w	ip, r5, ip
 800e7fe:	ea43 050c 	orrne.w	r5, r3, ip
 800e802:	e7cc      	b.n	800e79e <rint+0xa6>
 800e804:	0800f1f0 	.word	0x0800f1f0
 800e808:	000fffff 	.word	0x000fffff
 800e80c:	00000000 	.word	0x00000000

0800e810 <scalbn>:
 800e810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e812:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e816:	4604      	mov	r4, r0
 800e818:	460d      	mov	r5, r1
 800e81a:	4617      	mov	r7, r2
 800e81c:	460b      	mov	r3, r1
 800e81e:	b996      	cbnz	r6, 800e846 <scalbn+0x36>
 800e820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e824:	4303      	orrs	r3, r0
 800e826:	d039      	beq.n	800e89c <scalbn+0x8c>
 800e828:	4b35      	ldr	r3, [pc, #212]	; (800e900 <scalbn+0xf0>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	f7f1 fe4c 	bl	80004c8 <__aeabi_dmul>
 800e830:	4b34      	ldr	r3, [pc, #208]	; (800e904 <scalbn+0xf4>)
 800e832:	4604      	mov	r4, r0
 800e834:	429f      	cmp	r7, r3
 800e836:	460d      	mov	r5, r1
 800e838:	da0f      	bge.n	800e85a <scalbn+0x4a>
 800e83a:	a32d      	add	r3, pc, #180	; (adr r3, 800e8f0 <scalbn+0xe0>)
 800e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e840:	f7f1 fe42 	bl	80004c8 <__aeabi_dmul>
 800e844:	e006      	b.n	800e854 <scalbn+0x44>
 800e846:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e84a:	4296      	cmp	r6, r2
 800e84c:	d10a      	bne.n	800e864 <scalbn+0x54>
 800e84e:	4602      	mov	r2, r0
 800e850:	f7f1 fc84 	bl	800015c <__adddf3>
 800e854:	4604      	mov	r4, r0
 800e856:	460d      	mov	r5, r1
 800e858:	e020      	b.n	800e89c <scalbn+0x8c>
 800e85a:	460b      	mov	r3, r1
 800e85c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e860:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e864:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e868:	19b9      	adds	r1, r7, r6
 800e86a:	4291      	cmp	r1, r2
 800e86c:	dd0e      	ble.n	800e88c <scalbn+0x7c>
 800e86e:	a322      	add	r3, pc, #136	; (adr r3, 800e8f8 <scalbn+0xe8>)
 800e870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e874:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e878:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e87c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e880:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e884:	4820      	ldr	r0, [pc, #128]	; (800e908 <scalbn+0xf8>)
 800e886:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e88a:	e7d9      	b.n	800e840 <scalbn+0x30>
 800e88c:	2900      	cmp	r1, #0
 800e88e:	dd08      	ble.n	800e8a2 <scalbn+0x92>
 800e890:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e898:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e89c:	4620      	mov	r0, r4
 800e89e:	4629      	mov	r1, r5
 800e8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e8a6:	da16      	bge.n	800e8d6 <scalbn+0xc6>
 800e8a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e8ac:	429f      	cmp	r7, r3
 800e8ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e8b2:	dd08      	ble.n	800e8c6 <scalbn+0xb6>
 800e8b4:	4c15      	ldr	r4, [pc, #84]	; (800e90c <scalbn+0xfc>)
 800e8b6:	4814      	ldr	r0, [pc, #80]	; (800e908 <scalbn+0xf8>)
 800e8b8:	f363 74df 	bfi	r4, r3, #31, #1
 800e8bc:	a30e      	add	r3, pc, #56	; (adr r3, 800e8f8 <scalbn+0xe8>)
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	4621      	mov	r1, r4
 800e8c4:	e7bc      	b.n	800e840 <scalbn+0x30>
 800e8c6:	4c12      	ldr	r4, [pc, #72]	; (800e910 <scalbn+0x100>)
 800e8c8:	4812      	ldr	r0, [pc, #72]	; (800e914 <scalbn+0x104>)
 800e8ca:	f363 74df 	bfi	r4, r3, #31, #1
 800e8ce:	a308      	add	r3, pc, #32	; (adr r3, 800e8f0 <scalbn+0xe0>)
 800e8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d4:	e7f5      	b.n	800e8c2 <scalbn+0xb2>
 800e8d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8da:	3136      	adds	r1, #54	; 0x36
 800e8dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e8e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	4b0b      	ldr	r3, [pc, #44]	; (800e918 <scalbn+0x108>)
 800e8ec:	e7a8      	b.n	800e840 <scalbn+0x30>
 800e8ee:	bf00      	nop
 800e8f0:	c2f8f359 	.word	0xc2f8f359
 800e8f4:	01a56e1f 	.word	0x01a56e1f
 800e8f8:	8800759c 	.word	0x8800759c
 800e8fc:	7e37e43c 	.word	0x7e37e43c
 800e900:	43500000 	.word	0x43500000
 800e904:	ffff3cb0 	.word	0xffff3cb0
 800e908:	8800759c 	.word	0x8800759c
 800e90c:	7e37e43c 	.word	0x7e37e43c
 800e910:	01a56e1f 	.word	0x01a56e1f
 800e914:	c2f8f359 	.word	0xc2f8f359
 800e918:	3c900000 	.word	0x3c900000

0800e91c <floorf>:
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800e922:	3d7f      	subs	r5, #127	; 0x7f
 800e924:	2d16      	cmp	r5, #22
 800e926:	4601      	mov	r1, r0
 800e928:	4604      	mov	r4, r0
 800e92a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e92e:	dc26      	bgt.n	800e97e <floorf+0x62>
 800e930:	2d00      	cmp	r5, #0
 800e932:	da0e      	bge.n	800e952 <floorf+0x36>
 800e934:	4917      	ldr	r1, [pc, #92]	; (800e994 <floorf+0x78>)
 800e936:	f7f2 f8f5 	bl	8000b24 <__addsf3>
 800e93a:	2100      	movs	r1, #0
 800e93c:	f7f2 fbb6 	bl	80010ac <__aeabi_fcmpgt>
 800e940:	b128      	cbz	r0, 800e94e <floorf+0x32>
 800e942:	2c00      	cmp	r4, #0
 800e944:	da23      	bge.n	800e98e <floorf+0x72>
 800e946:	4b14      	ldr	r3, [pc, #80]	; (800e998 <floorf+0x7c>)
 800e948:	2e00      	cmp	r6, #0
 800e94a:	bf18      	it	ne
 800e94c:	461c      	movne	r4, r3
 800e94e:	4621      	mov	r1, r4
 800e950:	e01b      	b.n	800e98a <floorf+0x6e>
 800e952:	4e12      	ldr	r6, [pc, #72]	; (800e99c <floorf+0x80>)
 800e954:	412e      	asrs	r6, r5
 800e956:	4230      	tst	r0, r6
 800e958:	d017      	beq.n	800e98a <floorf+0x6e>
 800e95a:	490e      	ldr	r1, [pc, #56]	; (800e994 <floorf+0x78>)
 800e95c:	f7f2 f8e2 	bl	8000b24 <__addsf3>
 800e960:	2100      	movs	r1, #0
 800e962:	f7f2 fba3 	bl	80010ac <__aeabi_fcmpgt>
 800e966:	2800      	cmp	r0, #0
 800e968:	d0f1      	beq.n	800e94e <floorf+0x32>
 800e96a:	2c00      	cmp	r4, #0
 800e96c:	bfbe      	ittt	lt
 800e96e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800e972:	fa43 f505 	asrlt.w	r5, r3, r5
 800e976:	1964      	addlt	r4, r4, r5
 800e978:	ea24 0406 	bic.w	r4, r4, r6
 800e97c:	e7e7      	b.n	800e94e <floorf+0x32>
 800e97e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e982:	d302      	bcc.n	800e98a <floorf+0x6e>
 800e984:	f7f2 f8ce 	bl	8000b24 <__addsf3>
 800e988:	4601      	mov	r1, r0
 800e98a:	4608      	mov	r0, r1
 800e98c:	bd70      	pop	{r4, r5, r6, pc}
 800e98e:	2400      	movs	r4, #0
 800e990:	e7dd      	b.n	800e94e <floorf+0x32>
 800e992:	bf00      	nop
 800e994:	7149f2ca 	.word	0x7149f2ca
 800e998:	bf800000 	.word	0xbf800000
 800e99c:	007fffff 	.word	0x007fffff

0800e9a0 <nanf>:
 800e9a0:	4800      	ldr	r0, [pc, #0]	; (800e9a4 <nanf+0x4>)
 800e9a2:	4770      	bx	lr
 800e9a4:	7fc00000 	.word	0x7fc00000

0800e9a8 <scalbnf>:
 800e9a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800e9ac:	b538      	push	{r3, r4, r5, lr}
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	460d      	mov	r5, r1
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	d02a      	beq.n	800ea0c <scalbnf+0x64>
 800e9b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e9ba:	d304      	bcc.n	800e9c6 <scalbnf+0x1e>
 800e9bc:	4601      	mov	r1, r0
 800e9be:	f7f2 f8b1 	bl	8000b24 <__addsf3>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	e022      	b.n	800ea0c <scalbnf+0x64>
 800e9c6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800e9ca:	d117      	bne.n	800e9fc <scalbnf+0x54>
 800e9cc:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800e9d0:	f7f2 f9b0 	bl	8000d34 <__aeabi_fmul>
 800e9d4:	4a17      	ldr	r2, [pc, #92]	; (800ea34 <scalbnf+0x8c>)
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	4295      	cmp	r5, r2
 800e9da:	db0b      	blt.n	800e9f4 <scalbnf+0x4c>
 800e9dc:	4604      	mov	r4, r0
 800e9de:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e9e2:	3a19      	subs	r2, #25
 800e9e4:	442a      	add	r2, r5
 800e9e6:	2afe      	cmp	r2, #254	; 0xfe
 800e9e8:	dd0a      	ble.n	800ea00 <scalbnf+0x58>
 800e9ea:	4913      	ldr	r1, [pc, #76]	; (800ea38 <scalbnf+0x90>)
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f361 001e 	bfi	r0, r1, #0, #31
 800e9f2:	e000      	b.n	800e9f6 <scalbnf+0x4e>
 800e9f4:	4911      	ldr	r1, [pc, #68]	; (800ea3c <scalbnf+0x94>)
 800e9f6:	f7f2 f99d 	bl	8000d34 <__aeabi_fmul>
 800e9fa:	e7e2      	b.n	800e9c2 <scalbnf+0x1a>
 800e9fc:	0dd2      	lsrs	r2, r2, #23
 800e9fe:	e7f1      	b.n	800e9e4 <scalbnf+0x3c>
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	dd05      	ble.n	800ea10 <scalbnf+0x68>
 800ea04:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800ea08:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	f112 0f16 	cmn.w	r2, #22
 800ea14:	da05      	bge.n	800ea22 <scalbnf+0x7a>
 800ea16:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ea1a:	4295      	cmp	r5, r2
 800ea1c:	dce5      	bgt.n	800e9ea <scalbnf+0x42>
 800ea1e:	4907      	ldr	r1, [pc, #28]	; (800ea3c <scalbnf+0x94>)
 800ea20:	e7e4      	b.n	800e9ec <scalbnf+0x44>
 800ea22:	3219      	adds	r2, #25
 800ea24:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800ea28:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800ea2c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800ea30:	e7e1      	b.n	800e9f6 <scalbnf+0x4e>
 800ea32:	bf00      	nop
 800ea34:	ffff3cb0 	.word	0xffff3cb0
 800ea38:	7149f2ca 	.word	0x7149f2ca
 800ea3c:	0da24260 	.word	0x0da24260

0800ea40 <abort>:
 800ea40:	2006      	movs	r0, #6
 800ea42:	b508      	push	{r3, lr}
 800ea44:	f000 f94c 	bl	800ece0 <raise>
 800ea48:	2001      	movs	r0, #1
 800ea4a:	f7f5 fde2 	bl	8004612 <_exit>
	...

0800ea50 <__errno>:
 800ea50:	4b01      	ldr	r3, [pc, #4]	; (800ea58 <__errno+0x8>)
 800ea52:	6818      	ldr	r0, [r3, #0]
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	20000010 	.word	0x20000010

0800ea5c <__libc_init_array>:
 800ea5c:	b570      	push	{r4, r5, r6, lr}
 800ea5e:	2600      	movs	r6, #0
 800ea60:	4d0c      	ldr	r5, [pc, #48]	; (800ea94 <__libc_init_array+0x38>)
 800ea62:	4c0d      	ldr	r4, [pc, #52]	; (800ea98 <__libc_init_array+0x3c>)
 800ea64:	1b64      	subs	r4, r4, r5
 800ea66:	10a4      	asrs	r4, r4, #2
 800ea68:	42a6      	cmp	r6, r4
 800ea6a:	d109      	bne.n	800ea80 <__libc_init_array+0x24>
 800ea6c:	f000 f962 	bl	800ed34 <_init>
 800ea70:	2600      	movs	r6, #0
 800ea72:	4d0a      	ldr	r5, [pc, #40]	; (800ea9c <__libc_init_array+0x40>)
 800ea74:	4c0a      	ldr	r4, [pc, #40]	; (800eaa0 <__libc_init_array+0x44>)
 800ea76:	1b64      	subs	r4, r4, r5
 800ea78:	10a4      	asrs	r4, r4, #2
 800ea7a:	42a6      	cmp	r6, r4
 800ea7c:	d105      	bne.n	800ea8a <__libc_init_array+0x2e>
 800ea7e:	bd70      	pop	{r4, r5, r6, pc}
 800ea80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea84:	4798      	blx	r3
 800ea86:	3601      	adds	r6, #1
 800ea88:	e7ee      	b.n	800ea68 <__libc_init_array+0xc>
 800ea8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea8e:	4798      	blx	r3
 800ea90:	3601      	adds	r6, #1
 800ea92:	e7f2      	b.n	800ea7a <__libc_init_array+0x1e>
 800ea94:	0800f260 	.word	0x0800f260
 800ea98:	0800f260 	.word	0x0800f260
 800ea9c:	0800f260 	.word	0x0800f260
 800eaa0:	0800f268 	.word	0x0800f268

0800eaa4 <malloc>:
 800eaa4:	4b02      	ldr	r3, [pc, #8]	; (800eab0 <malloc+0xc>)
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f000 b887 	b.w	800ebbc <_malloc_r>
 800eaae:	bf00      	nop
 800eab0:	20000010 	.word	0x20000010

0800eab4 <free>:
 800eab4:	4b02      	ldr	r3, [pc, #8]	; (800eac0 <free+0xc>)
 800eab6:	4601      	mov	r1, r0
 800eab8:	6818      	ldr	r0, [r3, #0]
 800eaba:	f000 b833 	b.w	800eb24 <_free_r>
 800eabe:	bf00      	nop
 800eac0:	20000010 	.word	0x20000010

0800eac4 <memcpy>:
 800eac4:	440a      	add	r2, r1
 800eac6:	4291      	cmp	r1, r2
 800eac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eacc:	d100      	bne.n	800ead0 <memcpy+0xc>
 800eace:	4770      	bx	lr
 800ead0:	b510      	push	{r4, lr}
 800ead2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ead6:	4291      	cmp	r1, r2
 800ead8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eadc:	d1f9      	bne.n	800ead2 <memcpy+0xe>
 800eade:	bd10      	pop	{r4, pc}

0800eae0 <memmove>:
 800eae0:	4288      	cmp	r0, r1
 800eae2:	b510      	push	{r4, lr}
 800eae4:	eb01 0402 	add.w	r4, r1, r2
 800eae8:	d902      	bls.n	800eaf0 <memmove+0x10>
 800eaea:	4284      	cmp	r4, r0
 800eaec:	4623      	mov	r3, r4
 800eaee:	d807      	bhi.n	800eb00 <memmove+0x20>
 800eaf0:	1e43      	subs	r3, r0, #1
 800eaf2:	42a1      	cmp	r1, r4
 800eaf4:	d008      	beq.n	800eb08 <memmove+0x28>
 800eaf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eafa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eafe:	e7f8      	b.n	800eaf2 <memmove+0x12>
 800eb00:	4601      	mov	r1, r0
 800eb02:	4402      	add	r2, r0
 800eb04:	428a      	cmp	r2, r1
 800eb06:	d100      	bne.n	800eb0a <memmove+0x2a>
 800eb08:	bd10      	pop	{r4, pc}
 800eb0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb12:	e7f7      	b.n	800eb04 <memmove+0x24>

0800eb14 <memset>:
 800eb14:	4603      	mov	r3, r0
 800eb16:	4402      	add	r2, r0
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d100      	bne.n	800eb1e <memset+0xa>
 800eb1c:	4770      	bx	lr
 800eb1e:	f803 1b01 	strb.w	r1, [r3], #1
 800eb22:	e7f9      	b.n	800eb18 <memset+0x4>

0800eb24 <_free_r>:
 800eb24:	b538      	push	{r3, r4, r5, lr}
 800eb26:	4605      	mov	r5, r0
 800eb28:	2900      	cmp	r1, #0
 800eb2a:	d043      	beq.n	800ebb4 <_free_r+0x90>
 800eb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb30:	1f0c      	subs	r4, r1, #4
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	bfb8      	it	lt
 800eb36:	18e4      	addlt	r4, r4, r3
 800eb38:	f000 f8f0 	bl	800ed1c <__malloc_lock>
 800eb3c:	4a1e      	ldr	r2, [pc, #120]	; (800ebb8 <_free_r+0x94>)
 800eb3e:	6813      	ldr	r3, [r2, #0]
 800eb40:	4610      	mov	r0, r2
 800eb42:	b933      	cbnz	r3, 800eb52 <_free_r+0x2e>
 800eb44:	6063      	str	r3, [r4, #4]
 800eb46:	6014      	str	r4, [r2, #0]
 800eb48:	4628      	mov	r0, r5
 800eb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb4e:	f000 b8eb 	b.w	800ed28 <__malloc_unlock>
 800eb52:	42a3      	cmp	r3, r4
 800eb54:	d90a      	bls.n	800eb6c <_free_r+0x48>
 800eb56:	6821      	ldr	r1, [r4, #0]
 800eb58:	1862      	adds	r2, r4, r1
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	bf01      	itttt	eq
 800eb5e:	681a      	ldreq	r2, [r3, #0]
 800eb60:	685b      	ldreq	r3, [r3, #4]
 800eb62:	1852      	addeq	r2, r2, r1
 800eb64:	6022      	streq	r2, [r4, #0]
 800eb66:	6063      	str	r3, [r4, #4]
 800eb68:	6004      	str	r4, [r0, #0]
 800eb6a:	e7ed      	b.n	800eb48 <_free_r+0x24>
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	b10b      	cbz	r3, 800eb76 <_free_r+0x52>
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	d9fa      	bls.n	800eb6c <_free_r+0x48>
 800eb76:	6811      	ldr	r1, [r2, #0]
 800eb78:	1850      	adds	r0, r2, r1
 800eb7a:	42a0      	cmp	r0, r4
 800eb7c:	d10b      	bne.n	800eb96 <_free_r+0x72>
 800eb7e:	6820      	ldr	r0, [r4, #0]
 800eb80:	4401      	add	r1, r0
 800eb82:	1850      	adds	r0, r2, r1
 800eb84:	4283      	cmp	r3, r0
 800eb86:	6011      	str	r1, [r2, #0]
 800eb88:	d1de      	bne.n	800eb48 <_free_r+0x24>
 800eb8a:	6818      	ldr	r0, [r3, #0]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	4401      	add	r1, r0
 800eb90:	6011      	str	r1, [r2, #0]
 800eb92:	6053      	str	r3, [r2, #4]
 800eb94:	e7d8      	b.n	800eb48 <_free_r+0x24>
 800eb96:	d902      	bls.n	800eb9e <_free_r+0x7a>
 800eb98:	230c      	movs	r3, #12
 800eb9a:	602b      	str	r3, [r5, #0]
 800eb9c:	e7d4      	b.n	800eb48 <_free_r+0x24>
 800eb9e:	6820      	ldr	r0, [r4, #0]
 800eba0:	1821      	adds	r1, r4, r0
 800eba2:	428b      	cmp	r3, r1
 800eba4:	bf01      	itttt	eq
 800eba6:	6819      	ldreq	r1, [r3, #0]
 800eba8:	685b      	ldreq	r3, [r3, #4]
 800ebaa:	1809      	addeq	r1, r1, r0
 800ebac:	6021      	streq	r1, [r4, #0]
 800ebae:	6063      	str	r3, [r4, #4]
 800ebb0:	6054      	str	r4, [r2, #4]
 800ebb2:	e7c9      	b.n	800eb48 <_free_r+0x24>
 800ebb4:	bd38      	pop	{r3, r4, r5, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20000da4 	.word	0x20000da4

0800ebbc <_malloc_r>:
 800ebbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebbe:	1ccd      	adds	r5, r1, #3
 800ebc0:	f025 0503 	bic.w	r5, r5, #3
 800ebc4:	3508      	adds	r5, #8
 800ebc6:	2d0c      	cmp	r5, #12
 800ebc8:	bf38      	it	cc
 800ebca:	250c      	movcc	r5, #12
 800ebcc:	2d00      	cmp	r5, #0
 800ebce:	4606      	mov	r6, r0
 800ebd0:	db01      	blt.n	800ebd6 <_malloc_r+0x1a>
 800ebd2:	42a9      	cmp	r1, r5
 800ebd4:	d903      	bls.n	800ebde <_malloc_r+0x22>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	6033      	str	r3, [r6, #0]
 800ebda:	2000      	movs	r0, #0
 800ebdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebde:	f000 f89d 	bl	800ed1c <__malloc_lock>
 800ebe2:	4921      	ldr	r1, [pc, #132]	; (800ec68 <_malloc_r+0xac>)
 800ebe4:	680a      	ldr	r2, [r1, #0]
 800ebe6:	4614      	mov	r4, r2
 800ebe8:	b99c      	cbnz	r4, 800ec12 <_malloc_r+0x56>
 800ebea:	4f20      	ldr	r7, [pc, #128]	; (800ec6c <_malloc_r+0xb0>)
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	b923      	cbnz	r3, 800ebfa <_malloc_r+0x3e>
 800ebf0:	4621      	mov	r1, r4
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f000 f83c 	bl	800ec70 <_sbrk_r>
 800ebf8:	6038      	str	r0, [r7, #0]
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f000 f837 	bl	800ec70 <_sbrk_r>
 800ec02:	1c43      	adds	r3, r0, #1
 800ec04:	d123      	bne.n	800ec4e <_malloc_r+0x92>
 800ec06:	230c      	movs	r3, #12
 800ec08:	4630      	mov	r0, r6
 800ec0a:	6033      	str	r3, [r6, #0]
 800ec0c:	f000 f88c 	bl	800ed28 <__malloc_unlock>
 800ec10:	e7e3      	b.n	800ebda <_malloc_r+0x1e>
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	1b5b      	subs	r3, r3, r5
 800ec16:	d417      	bmi.n	800ec48 <_malloc_r+0x8c>
 800ec18:	2b0b      	cmp	r3, #11
 800ec1a:	d903      	bls.n	800ec24 <_malloc_r+0x68>
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	441c      	add	r4, r3
 800ec20:	6025      	str	r5, [r4, #0]
 800ec22:	e004      	b.n	800ec2e <_malloc_r+0x72>
 800ec24:	6863      	ldr	r3, [r4, #4]
 800ec26:	42a2      	cmp	r2, r4
 800ec28:	bf0c      	ite	eq
 800ec2a:	600b      	streq	r3, [r1, #0]
 800ec2c:	6053      	strne	r3, [r2, #4]
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f000 f87a 	bl	800ed28 <__malloc_unlock>
 800ec34:	f104 000b 	add.w	r0, r4, #11
 800ec38:	1d23      	adds	r3, r4, #4
 800ec3a:	f020 0007 	bic.w	r0, r0, #7
 800ec3e:	1ac2      	subs	r2, r0, r3
 800ec40:	d0cc      	beq.n	800ebdc <_malloc_r+0x20>
 800ec42:	1a1b      	subs	r3, r3, r0
 800ec44:	50a3      	str	r3, [r4, r2]
 800ec46:	e7c9      	b.n	800ebdc <_malloc_r+0x20>
 800ec48:	4622      	mov	r2, r4
 800ec4a:	6864      	ldr	r4, [r4, #4]
 800ec4c:	e7cc      	b.n	800ebe8 <_malloc_r+0x2c>
 800ec4e:	1cc4      	adds	r4, r0, #3
 800ec50:	f024 0403 	bic.w	r4, r4, #3
 800ec54:	42a0      	cmp	r0, r4
 800ec56:	d0e3      	beq.n	800ec20 <_malloc_r+0x64>
 800ec58:	1a21      	subs	r1, r4, r0
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f000 f808 	bl	800ec70 <_sbrk_r>
 800ec60:	3001      	adds	r0, #1
 800ec62:	d1dd      	bne.n	800ec20 <_malloc_r+0x64>
 800ec64:	e7cf      	b.n	800ec06 <_malloc_r+0x4a>
 800ec66:	bf00      	nop
 800ec68:	20000da4 	.word	0x20000da4
 800ec6c:	20000da8 	.word	0x20000da8

0800ec70 <_sbrk_r>:
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	2300      	movs	r3, #0
 800ec74:	4d05      	ldr	r5, [pc, #20]	; (800ec8c <_sbrk_r+0x1c>)
 800ec76:	4604      	mov	r4, r0
 800ec78:	4608      	mov	r0, r1
 800ec7a:	602b      	str	r3, [r5, #0]
 800ec7c:	f7f5 fcd4 	bl	8004628 <_sbrk>
 800ec80:	1c43      	adds	r3, r0, #1
 800ec82:	d102      	bne.n	800ec8a <_sbrk_r+0x1a>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	b103      	cbz	r3, 800ec8a <_sbrk_r+0x1a>
 800ec88:	6023      	str	r3, [r4, #0]
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	20000dc0 	.word	0x20000dc0

0800ec90 <_raise_r>:
 800ec90:	291f      	cmp	r1, #31
 800ec92:	b538      	push	{r3, r4, r5, lr}
 800ec94:	4604      	mov	r4, r0
 800ec96:	460d      	mov	r5, r1
 800ec98:	d904      	bls.n	800eca4 <_raise_r+0x14>
 800ec9a:	2316      	movs	r3, #22
 800ec9c:	6003      	str	r3, [r0, #0]
 800ec9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eca6:	b112      	cbz	r2, 800ecae <_raise_r+0x1e>
 800eca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecac:	b94b      	cbnz	r3, 800ecc2 <_raise_r+0x32>
 800ecae:	4620      	mov	r0, r4
 800ecb0:	f000 f830 	bl	800ed14 <_getpid_r>
 800ecb4:	462a      	mov	r2, r5
 800ecb6:	4601      	mov	r1, r0
 800ecb8:	4620      	mov	r0, r4
 800ecba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecbe:	f000 b817 	b.w	800ecf0 <_kill_r>
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d00a      	beq.n	800ecdc <_raise_r+0x4c>
 800ecc6:	1c59      	adds	r1, r3, #1
 800ecc8:	d103      	bne.n	800ecd2 <_raise_r+0x42>
 800ecca:	2316      	movs	r3, #22
 800eccc:	6003      	str	r3, [r0, #0]
 800ecce:	2001      	movs	r0, #1
 800ecd0:	e7e7      	b.n	800eca2 <_raise_r+0x12>
 800ecd2:	2400      	movs	r4, #0
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecda:	4798      	blx	r3
 800ecdc:	2000      	movs	r0, #0
 800ecde:	e7e0      	b.n	800eca2 <_raise_r+0x12>

0800ece0 <raise>:
 800ece0:	4b02      	ldr	r3, [pc, #8]	; (800ecec <raise+0xc>)
 800ece2:	4601      	mov	r1, r0
 800ece4:	6818      	ldr	r0, [r3, #0]
 800ece6:	f7ff bfd3 	b.w	800ec90 <_raise_r>
 800ecea:	bf00      	nop
 800ecec:	20000010 	.word	0x20000010

0800ecf0 <_kill_r>:
 800ecf0:	b538      	push	{r3, r4, r5, lr}
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	4d06      	ldr	r5, [pc, #24]	; (800ed10 <_kill_r+0x20>)
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	4608      	mov	r0, r1
 800ecfa:	4611      	mov	r1, r2
 800ecfc:	602b      	str	r3, [r5, #0]
 800ecfe:	f7f5 fc78 	bl	80045f2 <_kill>
 800ed02:	1c43      	adds	r3, r0, #1
 800ed04:	d102      	bne.n	800ed0c <_kill_r+0x1c>
 800ed06:	682b      	ldr	r3, [r5, #0]
 800ed08:	b103      	cbz	r3, 800ed0c <_kill_r+0x1c>
 800ed0a:	6023      	str	r3, [r4, #0]
 800ed0c:	bd38      	pop	{r3, r4, r5, pc}
 800ed0e:	bf00      	nop
 800ed10:	20000dc0 	.word	0x20000dc0

0800ed14 <_getpid_r>:
 800ed14:	f7f5 bc66 	b.w	80045e4 <_getpid>

0800ed18 <__retarget_lock_acquire_recursive>:
 800ed18:	4770      	bx	lr

0800ed1a <__retarget_lock_release_recursive>:
 800ed1a:	4770      	bx	lr

0800ed1c <__malloc_lock>:
 800ed1c:	4801      	ldr	r0, [pc, #4]	; (800ed24 <__malloc_lock+0x8>)
 800ed1e:	f7ff bffb 	b.w	800ed18 <__retarget_lock_acquire_recursive>
 800ed22:	bf00      	nop
 800ed24:	20000db8 	.word	0x20000db8

0800ed28 <__malloc_unlock>:
 800ed28:	4801      	ldr	r0, [pc, #4]	; (800ed30 <__malloc_unlock+0x8>)
 800ed2a:	f7ff bff6 	b.w	800ed1a <__retarget_lock_release_recursive>
 800ed2e:	bf00      	nop
 800ed30:	20000db8 	.word	0x20000db8

0800ed34 <_init>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	bf00      	nop
 800ed38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed3a:	bc08      	pop	{r3}
 800ed3c:	469e      	mov	lr, r3
 800ed3e:	4770      	bx	lr

0800ed40 <_fini>:
 800ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed42:	bf00      	nop
 800ed44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed46:	bc08      	pop	{r3}
 800ed48:	469e      	mov	lr, r3
 800ed4a:	4770      	bx	lr
